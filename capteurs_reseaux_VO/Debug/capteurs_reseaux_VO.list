
capteurs_reseaux_VO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb50  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  0800cd20  0800cd20  0000dd20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d570  0800d570  0000f1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d570  0800d570  0000e570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d578  0800d578  0000f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d578  0800d578  0000e578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d57c  0800d57c  0000e57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800d580  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  200001d4  0800d754  0000f1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  0800d754  0000f578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159af  00000000  00000000  0000f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003636  00000000  00000000  00024bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  000281f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000efc  00000000  00000000  00029528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025357  00000000  00000000  0002a424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019655  00000000  00000000  0004f77b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8d73  00000000  00000000  00068dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141b43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066a0  00000000  00000000  00141b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00148228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cd08 	.word	0x0800cd08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800cd08 	.word	0x0800cd08

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cfc:	f000 b9a0 	b.w	8001040 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	460c      	mov	r4, r1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d14e      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d90:	4694      	mov	ip, r2
 8000d92:	458c      	cmp	ip, r1
 8000d94:	4686      	mov	lr, r0
 8000d96:	fab2 f282 	clz	r2, r2
 8000d9a:	d962      	bls.n	8000e62 <__udivmoddi4+0xde>
 8000d9c:	b14a      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000d9e:	f1c2 0320 	rsb	r3, r2, #32
 8000da2:	4091      	lsls	r1, r2
 8000da4:	fa20 f303 	lsr.w	r3, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	4319      	orrs	r1, r3
 8000dae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f f68c 	uxth.w	r6, ip
 8000dba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb04 f106 	mul.w	r1, r4, r6
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dda:	f080 8112 	bcs.w	8001002 <__udivmoddi4+0x27e>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 810f 	bls.w	8001002 <__udivmoddi4+0x27e>
 8000de4:	3c02      	subs	r4, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a59      	subs	r1, r3, r1
 8000dea:	fa1f f38e 	uxth.w	r3, lr
 8000dee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df2:	fb07 1110 	mls	r1, r7, r0, r1
 8000df6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfa:	fb00 f606 	mul.w	r6, r0, r6
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	d90a      	bls.n	8000e18 <__udivmoddi4+0x94>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000e0a:	f080 80fc 	bcs.w	8001006 <__udivmoddi4+0x282>
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	f240 80f9 	bls.w	8001006 <__udivmoddi4+0x282>
 8000e14:	4463      	add	r3, ip
 8000e16:	3802      	subs	r0, #2
 8000e18:	1b9b      	subs	r3, r3, r6
 8000e1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e1e:	2100      	movs	r1, #0
 8000e20:	b11d      	cbz	r5, 8000e2a <__udivmoddi4+0xa6>
 8000e22:	40d3      	lsrs	r3, r2
 8000e24:	2200      	movs	r2, #0
 8000e26:	e9c5 3200 	strd	r3, r2, [r5]
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d905      	bls.n	8000e3e <__udivmoddi4+0xba>
 8000e32:	b10d      	cbz	r5, 8000e38 <__udivmoddi4+0xb4>
 8000e34:	e9c5 0100 	strd	r0, r1, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e7f5      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e3e:	fab3 f183 	clz	r1, r3
 8000e42:	2900      	cmp	r1, #0
 8000e44:	d146      	bne.n	8000ed4 <__udivmoddi4+0x150>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d302      	bcc.n	8000e50 <__udivmoddi4+0xcc>
 8000e4a:	4290      	cmp	r0, r2
 8000e4c:	f0c0 80f0 	bcc.w	8001030 <__udivmoddi4+0x2ac>
 8000e50:	1a86      	subs	r6, r0, r2
 8000e52:	eb64 0303 	sbc.w	r3, r4, r3
 8000e56:	2001      	movs	r0, #1
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d0e6      	beq.n	8000e2a <__udivmoddi4+0xa6>
 8000e5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e60:	e7e3      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	f040 8090 	bne.w	8000f88 <__udivmoddi4+0x204>
 8000e68:	eba1 040c 	sub.w	r4, r1, ip
 8000e6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	2101      	movs	r1, #1
 8000e76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb07 f006 	mul.w	r0, r7, r6
 8000e8a:	4298      	cmp	r0, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x11c>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x11a>
 8000e98:	4298      	cmp	r0, r3
 8000e9a:	f200 80cd 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e9e:	4626      	mov	r6, r4
 8000ea0:	1a1c      	subs	r4, r3, r0
 8000ea2:	fa1f f38e 	uxth.w	r3, lr
 8000ea6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eaa:	fb08 4410 	mls	r4, r8, r0, r4
 8000eae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eb2:	fb00 f707 	mul.w	r7, r0, r7
 8000eb6:	429f      	cmp	r7, r3
 8000eb8:	d908      	bls.n	8000ecc <__udivmoddi4+0x148>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000ec2:	d202      	bcs.n	8000eca <__udivmoddi4+0x146>
 8000ec4:	429f      	cmp	r7, r3
 8000ec6:	f200 80b0 	bhi.w	800102a <__udivmoddi4+0x2a6>
 8000eca:	4620      	mov	r0, r4
 8000ecc:	1bdb      	subs	r3, r3, r7
 8000ece:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ed2:	e7a5      	b.n	8000e20 <__udivmoddi4+0x9c>
 8000ed4:	f1c1 0620 	rsb	r6, r1, #32
 8000ed8:	408b      	lsls	r3, r1
 8000eda:	fa22 f706 	lsr.w	r7, r2, r6
 8000ede:	431f      	orrs	r7, r3
 8000ee0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ee4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ee8:	ea43 030c 	orr.w	r3, r3, ip
 8000eec:	40f4      	lsrs	r4, r6
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	0c38      	lsrs	r0, r7, #16
 8000ef4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ef8:	fbb4 fef0 	udiv	lr, r4, r0
 8000efc:	fa1f fc87 	uxth.w	ip, r7
 8000f00:	fb00 441e 	mls	r4, r0, lr, r4
 8000f04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f08:	fb0e f90c 	mul.w	r9, lr, ip
 8000f0c:	45a1      	cmp	r9, r4
 8000f0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f12:	d90a      	bls.n	8000f2a <__udivmoddi4+0x1a6>
 8000f14:	193c      	adds	r4, r7, r4
 8000f16:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f1a:	f080 8084 	bcs.w	8001026 <__udivmoddi4+0x2a2>
 8000f1e:	45a1      	cmp	r9, r4
 8000f20:	f240 8081 	bls.w	8001026 <__udivmoddi4+0x2a2>
 8000f24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	eba4 0409 	sub.w	r4, r4, r9
 8000f2e:	fa1f f983 	uxth.w	r9, r3
 8000f32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f36:	fb00 4413 	mls	r4, r0, r3, r4
 8000f3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x1d2>
 8000f46:	193c      	adds	r4, r7, r4
 8000f48:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f4c:	d267      	bcs.n	800101e <__udivmoddi4+0x29a>
 8000f4e:	45a4      	cmp	ip, r4
 8000f50:	d965      	bls.n	800101e <__udivmoddi4+0x29a>
 8000f52:	3b02      	subs	r3, #2
 8000f54:	443c      	add	r4, r7
 8000f56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f5e:	eba4 040c 	sub.w	r4, r4, ip
 8000f62:	429c      	cmp	r4, r3
 8000f64:	46ce      	mov	lr, r9
 8000f66:	469c      	mov	ip, r3
 8000f68:	d351      	bcc.n	800100e <__udivmoddi4+0x28a>
 8000f6a:	d04e      	beq.n	800100a <__udivmoddi4+0x286>
 8000f6c:	b155      	cbz	r5, 8000f84 <__udivmoddi4+0x200>
 8000f6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f72:	eb64 040c 	sbc.w	r4, r4, ip
 8000f76:	fa04 f606 	lsl.w	r6, r4, r6
 8000f7a:	40cb      	lsrs	r3, r1
 8000f7c:	431e      	orrs	r6, r3
 8000f7e:	40cc      	lsrs	r4, r1
 8000f80:	e9c5 6400 	strd	r6, r4, [r5]
 8000f84:	2100      	movs	r1, #0
 8000f86:	e750      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f94:	fa24 f303 	lsr.w	r3, r4, r3
 8000f98:	4094      	lsls	r4, r2
 8000f9a:	430c      	orrs	r4, r1
 8000f9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fa0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa4:	fa1f f78c 	uxth.w	r7, ip
 8000fa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fac:	fb08 3110 	mls	r1, r8, r0, r3
 8000fb0:	0c23      	lsrs	r3, r4, #16
 8000fb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb6:	fb00 f107 	mul.w	r1, r0, r7
 8000fba:	4299      	cmp	r1, r3
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x24c>
 8000fbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fc6:	d22c      	bcs.n	8001022 <__udivmoddi4+0x29e>
 8000fc8:	4299      	cmp	r1, r3
 8000fca:	d92a      	bls.n	8001022 <__udivmoddi4+0x29e>
 8000fcc:	3802      	subs	r0, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	1a5b      	subs	r3, r3, r1
 8000fd2:	b2a4      	uxth	r4, r4
 8000fd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fe0:	fb01 f307 	mul.w	r3, r1, r7
 8000fe4:	42a3      	cmp	r3, r4
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x276>
 8000fe8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fec:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ff0:	d213      	bcs.n	800101a <__udivmoddi4+0x296>
 8000ff2:	42a3      	cmp	r3, r4
 8000ff4:	d911      	bls.n	800101a <__udivmoddi4+0x296>
 8000ff6:	3902      	subs	r1, #2
 8000ff8:	4464      	add	r4, ip
 8000ffa:	1ae4      	subs	r4, r4, r3
 8000ffc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001000:	e739      	b.n	8000e76 <__udivmoddi4+0xf2>
 8001002:	4604      	mov	r4, r0
 8001004:	e6f0      	b.n	8000de8 <__udivmoddi4+0x64>
 8001006:	4608      	mov	r0, r1
 8001008:	e706      	b.n	8000e18 <__udivmoddi4+0x94>
 800100a:	45c8      	cmp	r8, r9
 800100c:	d2ae      	bcs.n	8000f6c <__udivmoddi4+0x1e8>
 800100e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001012:	eb63 0c07 	sbc.w	ip, r3, r7
 8001016:	3801      	subs	r0, #1
 8001018:	e7a8      	b.n	8000f6c <__udivmoddi4+0x1e8>
 800101a:	4631      	mov	r1, r6
 800101c:	e7ed      	b.n	8000ffa <__udivmoddi4+0x276>
 800101e:	4603      	mov	r3, r0
 8001020:	e799      	b.n	8000f56 <__udivmoddi4+0x1d2>
 8001022:	4630      	mov	r0, r6
 8001024:	e7d4      	b.n	8000fd0 <__udivmoddi4+0x24c>
 8001026:	46d6      	mov	lr, sl
 8001028:	e77f      	b.n	8000f2a <__udivmoddi4+0x1a6>
 800102a:	4463      	add	r3, ip
 800102c:	3802      	subs	r0, #2
 800102e:	e74d      	b.n	8000ecc <__udivmoddi4+0x148>
 8001030:	4606      	mov	r6, r0
 8001032:	4623      	mov	r3, r4
 8001034:	4608      	mov	r0, r1
 8001036:	e70f      	b.n	8000e58 <__udivmoddi4+0xd4>
 8001038:	3e02      	subs	r6, #2
 800103a:	4463      	add	r3, ip
 800103c:	e730      	b.n	8000ea0 <__udivmoddi4+0x11c>
 800103e:	bf00      	nop

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <BMP280_Check_id>:
 * response matches the expected ID. Prints the ID if successful.
 *
 * @return int Returns EXIT_SUCCESS if ID is read successfully, otherwise returns EXIT_FAILURE.
 */
int BMP280_Check_id(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af02      	add	r7, sp, #8
	uint8_t buff[BUFF_SIZE];	// Buffer for the I2C communication
	HAL_StatusTypeDef ret; 		// I2C operations status
	hi2c_user = &hi2c3;			// I2C Handler used by the user
 800104a:	4b1b      	ldr	r3, [pc, #108]	@ (80010b8 <BMP280_Check_id+0x74>)
 800104c:	4a1b      	ldr	r2, [pc, #108]	@ (80010bc <BMP280_Check_id+0x78>)
 800104e:	601a      	str	r2, [r3, #0]

	buff[0] = BMP280_REG_ID;
 8001050:	23d0      	movs	r3, #208	@ 0xd0
 8001052:	713b      	strb	r3, [r7, #4]

	ret = HAL_I2C_Master_Transmit(hi2c_user, BMP280_ADDR, buff, 1, HAL_MAX_DELAY);
 8001054:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <BMP280_Check_id+0x74>)
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	1d3a      	adds	r2, r7, #4
 800105a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	21ee      	movs	r1, #238	@ 0xee
 8001064:	f003 f816 	bl	8004094 <HAL_I2C_Master_Transmit>
 8001068:	4603      	mov	r3, r0
 800106a:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d004      	beq.n	800107c <BMP280_Check_id+0x38>
		printf("I2C Transmit failure\r\n");
 8001072:	4813      	ldr	r0, [pc, #76]	@ (80010c0 <BMP280_Check_id+0x7c>)
 8001074:	f008 f83e 	bl	80090f4 <puts>
		return EXIT_FAILURE;
 8001078:	2301      	movs	r3, #1
 800107a:	e019      	b.n	80010b0 <BMP280_Check_id+0x6c>
	}
	ret = HAL_I2C_Master_Receive(hi2c_user, BMP280_ADDR, buff, 1, HAL_MAX_DELAY);
 800107c:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <BMP280_Check_id+0x74>)
 800107e:	6818      	ldr	r0, [r3, #0]
 8001080:	1d3a      	adds	r2, r7, #4
 8001082:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2301      	movs	r3, #1
 800108a:	21ee      	movs	r1, #238	@ 0xee
 800108c:	f003 f900 	bl	8004290 <HAL_I2C_Master_Receive>
 8001090:	4603      	mov	r3, r0
 8001092:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d004      	beq.n	80010a4 <BMP280_Check_id+0x60>
		printf("I2C Receive failure\r\n");
 800109a:	480a      	ldr	r0, [pc, #40]	@ (80010c4 <BMP280_Check_id+0x80>)
 800109c:	f008 f82a 	bl	80090f4 <puts>
		return EXIT_FAILURE;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e005      	b.n	80010b0 <BMP280_Check_id+0x6c>
	}

	printf("BMP280 ID: 0x%X\r\n", buff[0]);
 80010a4:	793b      	ldrb	r3, [r7, #4]
 80010a6:	4619      	mov	r1, r3
 80010a8:	4807      	ldr	r0, [pc, #28]	@ (80010c8 <BMP280_Check_id+0x84>)
 80010aa:	f007 ffbb 	bl	8009024 <iprintf>

	return EXIT_SUCCESS;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200001f0 	.word	0x200001f0
 80010bc:	20000284 	.word	0x20000284
 80010c0:	0800cd20 	.word	0x0800cd20
 80010c4:	0800cd38 	.word	0x0800cd38
 80010c8:	0800cd50 	.word	0x0800cd50

080010cc <BMP280_Config>:
 * sent and confirmed by checking the response from the sensor.
 *
 * @return int Returns EXIT_SUCCESS if configuration is confirmed, otherwise returns EXIT_FAILURE.
 */
int BMP280_Config(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af02      	add	r7, sp, #8
	uint8_t buff[BUFF_SIZE];	// Buffer for the I2C communication
	HAL_StatusTypeDef ret; 		// I2C operations status
	hi2c_user = &hi2c3;			// I2C Handler used by the user
 80010d2:	4b1e      	ldr	r3, [pc, #120]	@ (800114c <BMP280_Config+0x80>)
 80010d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001150 <BMP280_Config+0x84>)
 80010d6:	601a      	str	r2, [r3, #0]

	buff[0]= BMP280_REG_MODE;
 80010d8:	23f4      	movs	r3, #244	@ 0xf4
 80010da:	713b      	strb	r3, [r7, #4]
	buff[1]= BMP280_CONFIG;
 80010dc:	2357      	movs	r3, #87	@ 0x57
 80010de:	717b      	strb	r3, [r7, #5]

	ret = HAL_I2C_Master_Transmit(hi2c_user,BMP280_ADDR, buff, 2, HAL_MAX_DELAY);
 80010e0:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <BMP280_Config+0x80>)
 80010e2:	6818      	ldr	r0, [r3, #0]
 80010e4:	1d3a      	adds	r2, r7, #4
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2302      	movs	r3, #2
 80010ee:	21ee      	movs	r1, #238	@ 0xee
 80010f0:	f002 ffd0 	bl	8004094 <HAL_I2C_Master_Transmit>
 80010f4:	4603      	mov	r3, r0
 80010f6:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d004      	beq.n	8001108 <BMP280_Config+0x3c>
		printf("I2C Transmit failure\r\n");
 80010fe:	4815      	ldr	r0, [pc, #84]	@ (8001154 <BMP280_Config+0x88>)
 8001100:	f007 fff8 	bl	80090f4 <puts>
		return EXIT_FAILURE;
 8001104:	2301      	movs	r3, #1
 8001106:	e01c      	b.n	8001142 <BMP280_Config+0x76>
	}

	ret = HAL_I2C_Master_Receive(hi2c_user, BMP280_ADDR, buff, 1, HAL_MAX_DELAY);
 8001108:	4b10      	ldr	r3, [pc, #64]	@ (800114c <BMP280_Config+0x80>)
 800110a:	6818      	ldr	r0, [r3, #0]
 800110c:	1d3a      	adds	r2, r7, #4
 800110e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2301      	movs	r3, #1
 8001116:	21ee      	movs	r1, #238	@ 0xee
 8001118:	f003 f8ba 	bl	8004290 <HAL_I2C_Master_Receive>
 800111c:	4603      	mov	r3, r0
 800111e:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d004      	beq.n	8001130 <BMP280_Config+0x64>
		printf("I2C Receive failure\r\n");
 8001126:	480c      	ldr	r0, [pc, #48]	@ (8001158 <BMP280_Config+0x8c>)
 8001128:	f007 ffe4 	bl	80090f4 <puts>
		return EXIT_FAILURE;
 800112c:	2301      	movs	r3, #1
 800112e:	e008      	b.n	8001142 <BMP280_Config+0x76>
	}

	if(buff[0] == BMP280_CONFIG){
 8001130:	793b      	ldrb	r3, [r7, #4]
 8001132:	2b57      	cmp	r3, #87	@ 0x57
 8001134:	d104      	bne.n	8001140 <BMP280_Config+0x74>
		printf("La config BMP280 envoyée reçue avec succès\r\n");
 8001136:	4809      	ldr	r0, [pc, #36]	@ (800115c <BMP280_Config+0x90>)
 8001138:	f007 ffdc 	bl	80090f4 <puts>
		return EXIT_SUCCESS;
 800113c:	2300      	movs	r3, #0
 800113e:	e000      	b.n	8001142 <BMP280_Config+0x76>
	}

	return EXIT_SUCCESS;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200001f0 	.word	0x200001f0
 8001150:	20000284 	.word	0x20000284
 8001154:	0800cd20 	.word	0x0800cd20
 8001158:	0800cd38 	.word	0x0800cd38
 800115c:	0800cd64 	.word	0x0800cd64

08001160 <BMP280_calibration>:
 *
 * Reads calibration data from the BMP280 sensor and stores it in global
 * variables for temperature and pressure compensation calculations.
 */
int BMP280_calibration(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08c      	sub	sp, #48	@ 0x30
 8001164:	af02      	add	r7, sp, #8
	uint8_t buff[BUFF_SIZE];
	uint8_t receive_buf[24];
	HAL_StatusTypeDef ret; 		// I2C operations status

	buff[0]= BMP280_REG_CALIBRATION;
 8001166:	2388      	movs	r3, #136	@ 0x88
 8001168:	773b      	strb	r3, [r7, #28]

	ret = HAL_I2C_Master_Transmit(hi2c_user, BMP280_ADDR, buff, 1, HAL_MAX_DELAY);
 800116a:	4b50      	ldr	r3, [pc, #320]	@ (80012ac <BMP280_calibration+0x14c>)
 800116c:	6818      	ldr	r0, [r3, #0]
 800116e:	f107 021c 	add.w	r2, r7, #28
 8001172:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2301      	movs	r3, #1
 800117a:	21ee      	movs	r1, #238	@ 0xee
 800117c:	f002 ff8a 	bl	8004094 <HAL_I2C_Master_Transmit>
 8001180:	4603      	mov	r3, r0
 8001182:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if(ret != HAL_OK){
 8001186:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800118a:	2b00      	cmp	r3, #0
 800118c:	d004      	beq.n	8001198 <BMP280_calibration+0x38>
		printf("I2C Transmit failure\r\n");
 800118e:	4848      	ldr	r0, [pc, #288]	@ (80012b0 <BMP280_calibration+0x150>)
 8001190:	f007 ffb0 	bl	80090f4 <puts>
		return EXIT_FAILURE;
 8001194:	2301      	movs	r3, #1
 8001196:	e084      	b.n	80012a2 <BMP280_calibration+0x142>
	}

	ret = HAL_I2C_Master_Receive(hi2c_user, BMP280_ADDR, receive_buf, 24, HAL_MAX_DELAY);
 8001198:	4b44      	ldr	r3, [pc, #272]	@ (80012ac <BMP280_calibration+0x14c>)
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	1d3a      	adds	r2, r7, #4
 800119e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2318      	movs	r3, #24
 80011a6:	21ee      	movs	r1, #238	@ 0xee
 80011a8:	f003 f872 	bl	8004290 <HAL_I2C_Master_Receive>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if(ret != HAL_OK){
 80011b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d004      	beq.n	80011c4 <BMP280_calibration+0x64>
		printf("I2C Receive failure\r\n");
 80011ba:	483e      	ldr	r0, [pc, #248]	@ (80012b4 <BMP280_calibration+0x154>)
 80011bc:	f007 ff9a 	bl	80090f4 <puts>
		return EXIT_FAILURE;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e06e      	b.n	80012a2 <BMP280_calibration+0x142>
		for(int i=0;i<24;i++){
			printf("calib %2d = 0x%x\r\n",i, receive_buf[i]);
		}
	}

	dig_T1 = receive_buf[0]|(receive_buf[1]<<8);
 80011c4:	793b      	ldrb	r3, [r7, #4]
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	797b      	ldrb	r3, [r7, #5]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	4b38      	ldr	r3, [pc, #224]	@ (80012b8 <BMP280_calibration+0x158>)
 80011d6:	801a      	strh	r2, [r3, #0]
	dig_T2 = receive_buf[2]|(receive_buf[3]<<8);
 80011d8:	79bb      	ldrb	r3, [r7, #6]
 80011da:	b21a      	sxth	r2, r3
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b21b      	sxth	r3, r3
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	4b35      	ldr	r3, [pc, #212]	@ (80012bc <BMP280_calibration+0x15c>)
 80011e8:	801a      	strh	r2, [r3, #0]
	dig_T3 = receive_buf[4]|(receive_buf[5]<<8);
 80011ea:	7a3b      	ldrb	r3, [r7, #8]
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	7a7b      	ldrb	r3, [r7, #9]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	b21b      	sxth	r3, r3
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	4b31      	ldr	r3, [pc, #196]	@ (80012c0 <BMP280_calibration+0x160>)
 80011fa:	801a      	strh	r2, [r3, #0]
	dig_P1 = receive_buf[6]|(receive_buf[7]<<8);
 80011fc:	7abb      	ldrb	r3, [r7, #10]
 80011fe:	b21a      	sxth	r2, r3
 8001200:	7afb      	ldrb	r3, [r7, #11]
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	b21b      	sxth	r3, r3
 8001206:	4313      	orrs	r3, r2
 8001208:	b21b      	sxth	r3, r3
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b2d      	ldr	r3, [pc, #180]	@ (80012c4 <BMP280_calibration+0x164>)
 800120e:	801a      	strh	r2, [r3, #0]
	dig_P2 = receive_buf[8]|(receive_buf[9]<<8);
 8001210:	7b3b      	ldrb	r3, [r7, #12]
 8001212:	b21a      	sxth	r2, r3
 8001214:	7b7b      	ldrb	r3, [r7, #13]
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	b21b      	sxth	r3, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	b21a      	sxth	r2, r3
 800121e:	4b2a      	ldr	r3, [pc, #168]	@ (80012c8 <BMP280_calibration+0x168>)
 8001220:	801a      	strh	r2, [r3, #0]
	dig_P3 = receive_buf[10]|(receive_buf[11]<<8);
 8001222:	7bbb      	ldrb	r3, [r7, #14]
 8001224:	b21a      	sxth	r2, r3
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	b21b      	sxth	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b21a      	sxth	r2, r3
 8001230:	4b26      	ldr	r3, [pc, #152]	@ (80012cc <BMP280_calibration+0x16c>)
 8001232:	801a      	strh	r2, [r3, #0]
	dig_P4 = receive_buf[12]|(receive_buf[13]<<8);
 8001234:	7c3b      	ldrb	r3, [r7, #16]
 8001236:	b21a      	sxth	r2, r3
 8001238:	7c7b      	ldrb	r3, [r7, #17]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	b21b      	sxth	r3, r3
 800123e:	4313      	orrs	r3, r2
 8001240:	b21a      	sxth	r2, r3
 8001242:	4b23      	ldr	r3, [pc, #140]	@ (80012d0 <BMP280_calibration+0x170>)
 8001244:	801a      	strh	r2, [r3, #0]
	dig_P5 = receive_buf[14]|(receive_buf[15]<<8);
 8001246:	7cbb      	ldrb	r3, [r7, #18]
 8001248:	b21a      	sxth	r2, r3
 800124a:	7cfb      	ldrb	r3, [r7, #19]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b21b      	sxth	r3, r3
 8001250:	4313      	orrs	r3, r2
 8001252:	b21a      	sxth	r2, r3
 8001254:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <BMP280_calibration+0x174>)
 8001256:	801a      	strh	r2, [r3, #0]
	dig_P6 = receive_buf[16]|(receive_buf[17]<<8);
 8001258:	7d3b      	ldrb	r3, [r7, #20]
 800125a:	b21a      	sxth	r2, r3
 800125c:	7d7b      	ldrb	r3, [r7, #21]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	b21b      	sxth	r3, r3
 8001262:	4313      	orrs	r3, r2
 8001264:	b21a      	sxth	r2, r3
 8001266:	4b1c      	ldr	r3, [pc, #112]	@ (80012d8 <BMP280_calibration+0x178>)
 8001268:	801a      	strh	r2, [r3, #0]
	dig_P7 = receive_buf[18]|(receive_buf[19]<<8);
 800126a:	7dbb      	ldrb	r3, [r7, #22]
 800126c:	b21a      	sxth	r2, r3
 800126e:	7dfb      	ldrb	r3, [r7, #23]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	b21b      	sxth	r3, r3
 8001274:	4313      	orrs	r3, r2
 8001276:	b21a      	sxth	r2, r3
 8001278:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <BMP280_calibration+0x17c>)
 800127a:	801a      	strh	r2, [r3, #0]
	dig_P8 = receive_buf[20]|(receive_buf[21]<<8);
 800127c:	7e3b      	ldrb	r3, [r7, #24]
 800127e:	b21a      	sxth	r2, r3
 8001280:	7e7b      	ldrb	r3, [r7, #25]
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	b21b      	sxth	r3, r3
 8001286:	4313      	orrs	r3, r2
 8001288:	b21a      	sxth	r2, r3
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <BMP280_calibration+0x180>)
 800128c:	801a      	strh	r2, [r3, #0]
	dig_P9 = receive_buf[22]|(receive_buf[23]<<8);
 800128e:	7ebb      	ldrb	r3, [r7, #26]
 8001290:	b21a      	sxth	r2, r3
 8001292:	7efb      	ldrb	r3, [r7, #27]
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	b21b      	sxth	r3, r3
 8001298:	4313      	orrs	r3, r2
 800129a:	b21a      	sxth	r2, r3
 800129c:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <BMP280_calibration+0x184>)
 800129e:	801a      	strh	r2, [r3, #0]

	return EXIT_SUCCESS;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3728      	adds	r7, #40	@ 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200001f0 	.word	0x200001f0
 80012b0:	0800cd20 	.word	0x0800cd20
 80012b4:	0800cd38 	.word	0x0800cd38
 80012b8:	200001f4 	.word	0x200001f4
 80012bc:	200001f6 	.word	0x200001f6
 80012c0:	200001f8 	.word	0x200001f8
 80012c4:	200001fa 	.word	0x200001fa
 80012c8:	200001fc 	.word	0x200001fc
 80012cc:	200001fe 	.word	0x200001fe
 80012d0:	20000200 	.word	0x20000200
 80012d4:	20000202 	.word	0x20000202
 80012d8:	20000204 	.word	0x20000204
 80012dc:	20000206 	.word	0x20000206
 80012e0:	20000208 	.word	0x20000208
 80012e4:	2000020a 	.word	0x2000020a

080012e8 <BMP280_Read_Reg>:
 *
 * @param reg Register address to read from.
 * @param length Number of bytes to read.
 * @return uint8_t* Pointer to buffer with read data. The caller is responsible for freeing the buffer.
 */
uint8_t* BMP280_Read_Reg(uint8_t reg, uint8_t length) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	4603      	mov	r3, r0
 80012f0:	460a      	mov	r2, r1
 80012f2:	71fb      	strb	r3, [r7, #7]
 80012f4:	4613      	mov	r3, r2
 80012f6:	71bb      	strb	r3, [r7, #6]
	uint8_t *buf;
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(hi2c_user, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 80012f8:	4b17      	ldr	r3, [pc, #92]	@ (8001358 <BMP280_Read_Reg+0x70>)
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	1dfa      	adds	r2, r7, #7
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2301      	movs	r3, #1
 8001306:	21ee      	movs	r1, #238	@ 0xee
 8001308:	f002 fec4 	bl	8004094 <HAL_I2C_Master_Transmit>
 800130c:	4603      	mov	r3, r0
 800130e:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d002      	beq.n	800131c <BMP280_Read_Reg+0x34>
		printf("Problem with I2C Transmit\r\n");
 8001316:	4811      	ldr	r0, [pc, #68]	@ (800135c <BMP280_Read_Reg+0x74>)
 8001318:	f007 feec 	bl	80090f4 <puts>
	}

	buf = (uint8_t*) malloc(length);
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	4618      	mov	r0, r3
 8001320:	f006 fe94 	bl	800804c <malloc>
 8001324:	4603      	mov	r3, r0
 8001326:	60bb      	str	r3, [r7, #8]
	ret = HAL_I2C_Master_Receive(hi2c_user, BMP280_ADDR, buf, length,
 8001328:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <BMP280_Read_Reg+0x70>)
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	79bb      	ldrb	r3, [r7, #6]
 800132e:	b29b      	uxth	r3, r3
 8001330:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001334:	9200      	str	r2, [sp, #0]
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	21ee      	movs	r1, #238	@ 0xee
 800133a:	f002 ffa9 	bl	8004290 <HAL_I2C_Master_Receive>
 800133e:	4603      	mov	r3, r0
 8001340:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	if (ret != 0) {
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d002      	beq.n	800134e <BMP280_Read_Reg+0x66>
		printf("Problem with I2C Receive\r\n");
 8001348:	4805      	ldr	r0, [pc, #20]	@ (8001360 <BMP280_Read_Reg+0x78>)
 800134a:	f007 fed3 	bl	80090f4 <puts>
	}

	return buf;
 800134e:	68bb      	ldr	r3, [r7, #8]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200001f0 	.word	0x200001f0
 800135c:	0800cd94 	.word	0x0800cd94
 8001360:	0800cdb0 	.word	0x0800cdb0

08001364 <BMP280_get_temperature>:
 * Reads the raw temperature data from the BMP280, compensates it, and
 * returns the result. Prints both raw and compensated temperature values.
 *
 * @return BMP280_S32_t Compensated temperature in degrees Celsius, scaled by 100.
 */
BMP280_S32_t BMP280_get_temperature() {
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_T;

	buf = BMP280_Read_Reg(BMP280_REG_TEMP_MSB, BMP280_LEN_TEMP);
 800136a:	2103      	movs	r1, #3
 800136c:	20fa      	movs	r0, #250	@ 0xfa
 800136e:	f7ff ffbb 	bl	80012e8 <BMP280_Read_Reg>
 8001372:	6078      	str	r0, [r7, #4]

	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	031a      	lsls	r2, r3, #12
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3301      	adds	r3, #1
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	4313      	orrs	r3, r2
							| ((BMP280_S32_t) (buf[2]) >> 4);
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	3202      	adds	r2, #2
 8001388:	7812      	ldrb	r2, [r2, #0]
 800138a:	0912      	lsrs	r2, r2, #4
 800138c:	b2d2      	uxtb	r2, r2
	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 800138e:	4313      	orrs	r3, r2
 8001390:	603b      	str	r3, [r7, #0]

	free(buf);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f006 fe62 	bl	800805c <free>
		printf("Compensated temperature: ");
		printf("0x%05lX = %d°C", adc_T, adc_T);
		printf("\r\n");
	}

	return adc_T;
 8001398:	683b      	ldr	r3, [r7, #0]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <BMP280_get_pressure>:
 * Reads the raw pressure data from the BMP280, compensates it, and
 * returns the result. Prints both raw and compensated pressure values.
 *
 * @return BMP280_S32_t Compensated pressure in Pascals.
 */
BMP280_S32_t BMP280_get_pressure() {
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_P;

	buf = BMP280_Read_Reg(BMP280_REG_PRES_MSB, BMP280_LEN_PRES);
 80013a8:	2103      	movs	r1, #3
 80013aa:	20f7      	movs	r0, #247	@ 0xf7
 80013ac:	f7ff ff9c 	bl	80012e8 <BMP280_Read_Reg>
 80013b0:	6078      	str	r0, [r7, #4]

	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	031a      	lsls	r2, r3, #12
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3301      	adds	r3, #1
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	011b      	lsls	r3, r3, #4
 80013c0:	4313      	orrs	r3, r2
							| ((BMP280_S32_t) (buf[2]) >> 4);
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	3202      	adds	r2, #2
 80013c6:	7812      	ldrb	r2, [r2, #0]
 80013c8:	0912      	lsrs	r2, r2, #4
 80013ca:	b2d2      	uxtb	r2, r2
	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	603b      	str	r3, [r7, #0]

	free(buf);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f006 fe43 	bl	800805c <free>
		printf("Compensated pressure: ");
		printf("0x%05lX = %ld Pa", adc_P, adc_P);
		printf("\r\n");
	}

	return adc_P;
 80013d6:	683b      	ldr	r3, [r7, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <MPU_begin>:
/// @param aScale Set accelerometer full scale range: 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.
/// @param gScale Set gyroscope full scale range: 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
/// @param tau Set tau value for the complementary filter (typically 0.98).
/// @param dt Set sampling rate in seconds determined by the timer interrupt.
uint8_t MPU_begin(I2C_HandleTypeDef *I2Cx, uint8_t addr, uint8_t aScale, uint8_t gScale, float tau, float dt)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	@ 0x28
 80013e4:	af04      	add	r7, sp, #16
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	4608      	mov	r0, r1
 80013ea:	4611      	mov	r1, r2
 80013ec:	461a      	mov	r2, r3
 80013ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80013f2:	edc7 0a00 	vstr	s1, [r7]
 80013f6:	4603      	mov	r3, r0
 80013f8:	72fb      	strb	r3, [r7, #11]
 80013fa:	460b      	mov	r3, r1
 80013fc:	72bb      	strb	r3, [r7, #10]
 80013fe:	4613      	mov	r3, r2
 8001400:	727b      	strb	r3, [r7, #9]
    // Save values
    _addr = addr << 1;
 8001402:	7afb      	ldrb	r3, [r7, #11]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b20      	ldr	r3, [pc, #128]	@ (800148c <MPU_begin+0xac>)
 800140a:	701a      	strb	r2, [r3, #0]
    _tau = tau;
 800140c:	4a20      	ldr	r2, [pc, #128]	@ (8001490 <MPU_begin+0xb0>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
    _dt = dt;
 8001412:	4a20      	ldr	r2, [pc, #128]	@ (8001494 <MPU_begin+0xb4>)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	6013      	str	r3, [r2, #0]
    // Initialize variables
    uint8_t check;
    uint8_t select;

    // Confirm device
    HAL_I2C_Mem_Read(I2Cx, _addr, WHO_AM_I, 1, &check, 1, I2C_TIMOUT_MS);
 8001418:	4b1c      	ldr	r3, [pc, #112]	@ (800148c <MPU_begin+0xac>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001422:	9302      	str	r3, [sp, #8]
 8001424:	2301      	movs	r3, #1
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	f107 0317 	add.w	r3, r7, #23
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	2301      	movs	r3, #1
 8001430:	2275      	movs	r2, #117	@ 0x75
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	f003 fa58 	bl	80048e8 <HAL_I2C_Mem_Read>

    // TODO: If 9250 or 6050 fails could it trigger the opposite check???
    if ((check == WHO_AM_I_9250_ANS) || (check == WHO_AM_I_6050_ANS))
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	2b71      	cmp	r3, #113	@ 0x71
 800143c:	d002      	beq.n	8001444 <MPU_begin+0x64>
 800143e:	7dfb      	ldrb	r3, [r7, #23]
 8001440:	2b68      	cmp	r3, #104	@ 0x68
 8001442:	d11d      	bne.n	8001480 <MPU_begin+0xa0>
    {
        // Startup / reset the sensor
        select = 0x00;
 8001444:	2300      	movs	r3, #0
 8001446:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(I2Cx, _addr, PWR_MGMT_1, 1, &select, 1, I2C_TIMOUT_MS);
 8001448:	4b10      	ldr	r3, [pc, #64]	@ (800148c <MPU_begin+0xac>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001452:	9302      	str	r3, [sp, #8]
 8001454:	2301      	movs	r3, #1
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	f107 0316 	add.w	r3, r7, #22
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	2301      	movs	r3, #1
 8001460:	226b      	movs	r2, #107	@ 0x6b
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f003 f946 	bl	80046f4 <HAL_I2C_Mem_Write>

        // Set the full scale ranges
        MPU_writeAccFullScaleRange(I2Cx, aScale);
 8001468:	7abb      	ldrb	r3, [r7, #10]
 800146a:	4619      	mov	r1, r3
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f000 f813 	bl	8001498 <MPU_writeAccFullScaleRange>
        MPU_writeGyroFullScaleRange(I2Cx, gScale);
 8001472:	7a7b      	ldrb	r3, [r7, #9]
 8001474:	4619      	mov	r1, r3
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	f000 f89e 	bl	80015b8 <MPU_writeGyroFullScaleRange>

        return 1;
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <MPU_begin+0xa2>
    }
    else
    {
        return 0;
 8001480:	2300      	movs	r3, #0
    }
}
 8001482:	4618      	mov	r0, r3
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000248 	.word	0x20000248
 8001490:	20000250 	.word	0x20000250
 8001494:	2000024c 	.word	0x2000024c

08001498 <MPU_writeAccFullScaleRange>:

/// @brief Set the accelerometer full scale range.
/// @param I2Cx Pointer to I2C structure config.
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.
void MPU_writeAccFullScaleRange(I2C_HandleTypeDef *I2Cx, uint8_t aScale)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af04      	add	r7, sp, #16
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	70fb      	strb	r3, [r7, #3]
    // Variable init
    uint8_t select;

    // Set the value
    switch (aScale)
 80014a4:	78fb      	ldrb	r3, [r7, #3]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d866      	bhi.n	8001578 <MPU_writeAccFullScaleRange+0xe0>
 80014aa:	a201      	add	r2, pc, #4	@ (adr r2, 80014b0 <MPU_writeAccFullScaleRange+0x18>)
 80014ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b0:	080014c1 	.word	0x080014c1
 80014b4:	080014ef 	.word	0x080014ef
 80014b8:	0800151d 	.word	0x0800151d
 80014bc:	0800154b 	.word	0x0800154b
    {
    case AFSR_2G:
        aScaleFactor = 16384.0;
 80014c0:	4b3b      	ldr	r3, [pc, #236]	@ (80015b0 <MPU_writeAccFullScaleRange+0x118>)
 80014c2:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 80014c6:	601a      	str	r2, [r3, #0]
        select = 0x00;
 80014c8:	2300      	movs	r3, #0
 80014ca:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80014cc:	4b39      	ldr	r3, [pc, #228]	@ (80015b4 <MPU_writeAccFullScaleRange+0x11c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014d6:	9302      	str	r3, [sp, #8]
 80014d8:	2301      	movs	r3, #1
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	f107 030f 	add.w	r3, r7, #15
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2301      	movs	r3, #1
 80014e4:	221c      	movs	r2, #28
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f003 f904 	bl	80046f4 <HAL_I2C_Mem_Write>
        break;
 80014ec:	e05b      	b.n	80015a6 <MPU_writeAccFullScaleRange+0x10e>
    case AFSR_4G:
        aScaleFactor = 8192.0;
 80014ee:	4b30      	ldr	r3, [pc, #192]	@ (80015b0 <MPU_writeAccFullScaleRange+0x118>)
 80014f0:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 80014f4:	601a      	str	r2, [r3, #0]
        select = 0x08;
 80014f6:	2308      	movs	r3, #8
 80014f8:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80014fa:	4b2e      	ldr	r3, [pc, #184]	@ (80015b4 <MPU_writeAccFullScaleRange+0x11c>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	4619      	mov	r1, r3
 8001500:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001504:	9302      	str	r3, [sp, #8]
 8001506:	2301      	movs	r3, #1
 8001508:	9301      	str	r3, [sp, #4]
 800150a:	f107 030f 	add.w	r3, r7, #15
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	2301      	movs	r3, #1
 8001512:	221c      	movs	r2, #28
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f003 f8ed 	bl	80046f4 <HAL_I2C_Mem_Write>
        break;
 800151a:	e044      	b.n	80015a6 <MPU_writeAccFullScaleRange+0x10e>
    case AFSR_8G:
        aScaleFactor = 4096.0;
 800151c:	4b24      	ldr	r3, [pc, #144]	@ (80015b0 <MPU_writeAccFullScaleRange+0x118>)
 800151e:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8001522:	601a      	str	r2, [r3, #0]
        select = 0x10;
 8001524:	2310      	movs	r3, #16
 8001526:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001528:	4b22      	ldr	r3, [pc, #136]	@ (80015b4 <MPU_writeAccFullScaleRange+0x11c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4619      	mov	r1, r3
 800152e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001532:	9302      	str	r3, [sp, #8]
 8001534:	2301      	movs	r3, #1
 8001536:	9301      	str	r3, [sp, #4]
 8001538:	f107 030f 	add.w	r3, r7, #15
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	2301      	movs	r3, #1
 8001540:	221c      	movs	r2, #28
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f003 f8d6 	bl	80046f4 <HAL_I2C_Mem_Write>
        break;
 8001548:	e02d      	b.n	80015a6 <MPU_writeAccFullScaleRange+0x10e>
    case AFSR_16G:
        aScaleFactor = 2048.0;
 800154a:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <MPU_writeAccFullScaleRange+0x118>)
 800154c:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8001550:	601a      	str	r2, [r3, #0]
        select = 0x18;
 8001552:	2318      	movs	r3, #24
 8001554:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001556:	4b17      	ldr	r3, [pc, #92]	@ (80015b4 <MPU_writeAccFullScaleRange+0x11c>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	4619      	mov	r1, r3
 800155c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001560:	9302      	str	r3, [sp, #8]
 8001562:	2301      	movs	r3, #1
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	f107 030f 	add.w	r3, r7, #15
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2301      	movs	r3, #1
 800156e:	221c      	movs	r2, #28
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f003 f8bf 	bl	80046f4 <HAL_I2C_Mem_Write>
        break;
 8001576:	e016      	b.n	80015a6 <MPU_writeAccFullScaleRange+0x10e>
    default:
        aScaleFactor = 8192.0;
 8001578:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <MPU_writeAccFullScaleRange+0x118>)
 800157a:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 800157e:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8001580:	2308      	movs	r3, #8
 8001582:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001584:	4b0b      	ldr	r3, [pc, #44]	@ (80015b4 <MPU_writeAccFullScaleRange+0x11c>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4619      	mov	r1, r3
 800158a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800158e:	9302      	str	r3, [sp, #8]
 8001590:	2301      	movs	r3, #1
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	f107 030f 	add.w	r3, r7, #15
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2301      	movs	r3, #1
 800159c:	221c      	movs	r2, #28
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f003 f8a8 	bl	80046f4 <HAL_I2C_Mem_Write>
        break;
 80015a4:	bf00      	nop
    }
}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000254 	.word	0x20000254
 80015b4:	20000248 	.word	0x20000248

080015b8 <MPU_writeGyroFullScaleRange>:

/// @brief Set the gyroscope full scale range.
/// @param I2Cx Pointer to I2C structure config.
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
void MPU_writeGyroFullScaleRange(I2C_HandleTypeDef *I2Cx, uint8_t gScale)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af04      	add	r7, sp, #16
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	70fb      	strb	r3, [r7, #3]
    // Variable init
    uint8_t select;

    // Set the value
    switch (gScale)
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d862      	bhi.n	8001690 <MPU_writeGyroFullScaleRange+0xd8>
 80015ca:	a201      	add	r2, pc, #4	@ (adr r2, 80015d0 <MPU_writeGyroFullScaleRange+0x18>)
 80015cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d0:	080015e1 	.word	0x080015e1
 80015d4:	0800160d 	.word	0x0800160d
 80015d8:	08001639 	.word	0x08001639
 80015dc:	08001665 	.word	0x08001665
    {
    case GFSR_250DPS:
        gScaleFactor = 131.0;
 80015e0:	4b38      	ldr	r3, [pc, #224]	@ (80016c4 <MPU_writeGyroFullScaleRange+0x10c>)
 80015e2:	4a39      	ldr	r2, [pc, #228]	@ (80016c8 <MPU_writeGyroFullScaleRange+0x110>)
 80015e4:	601a      	str	r2, [r3, #0]
        select = 0x00;
 80015e6:	2300      	movs	r3, #0
 80015e8:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80015ea:	4b38      	ldr	r3, [pc, #224]	@ (80016cc <MPU_writeGyroFullScaleRange+0x114>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	4619      	mov	r1, r3
 80015f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	2301      	movs	r3, #1
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	f107 030f 	add.w	r3, r7, #15
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2301      	movs	r3, #1
 8001602:	221b      	movs	r2, #27
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f003 f875 	bl	80046f4 <HAL_I2C_Mem_Write>
        break;
 800160a:	e057      	b.n	80016bc <MPU_writeGyroFullScaleRange+0x104>
    case GFSR_500DPS:
        gScaleFactor = 65.5;
 800160c:	4b2d      	ldr	r3, [pc, #180]	@ (80016c4 <MPU_writeGyroFullScaleRange+0x10c>)
 800160e:	4a30      	ldr	r2, [pc, #192]	@ (80016d0 <MPU_writeGyroFullScaleRange+0x118>)
 8001610:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8001612:	2308      	movs	r3, #8
 8001614:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001616:	4b2d      	ldr	r3, [pc, #180]	@ (80016cc <MPU_writeGyroFullScaleRange+0x114>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	4619      	mov	r1, r3
 800161c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001620:	9302      	str	r3, [sp, #8]
 8001622:	2301      	movs	r3, #1
 8001624:	9301      	str	r3, [sp, #4]
 8001626:	f107 030f 	add.w	r3, r7, #15
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2301      	movs	r3, #1
 800162e:	221b      	movs	r2, #27
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f003 f85f 	bl	80046f4 <HAL_I2C_Mem_Write>
        break;
 8001636:	e041      	b.n	80016bc <MPU_writeGyroFullScaleRange+0x104>
    case GFSR_1000DPS:
        gScaleFactor = 32.8;
 8001638:	4b22      	ldr	r3, [pc, #136]	@ (80016c4 <MPU_writeGyroFullScaleRange+0x10c>)
 800163a:	4a26      	ldr	r2, [pc, #152]	@ (80016d4 <MPU_writeGyroFullScaleRange+0x11c>)
 800163c:	601a      	str	r2, [r3, #0]
        select = 0x10;
 800163e:	2310      	movs	r3, #16
 8001640:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001642:	4b22      	ldr	r3, [pc, #136]	@ (80016cc <MPU_writeGyroFullScaleRange+0x114>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	4619      	mov	r1, r3
 8001648:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800164c:	9302      	str	r3, [sp, #8]
 800164e:	2301      	movs	r3, #1
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	f107 030f 	add.w	r3, r7, #15
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2301      	movs	r3, #1
 800165a:	221b      	movs	r2, #27
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f003 f849 	bl	80046f4 <HAL_I2C_Mem_Write>
        break;
 8001662:	e02b      	b.n	80016bc <MPU_writeGyroFullScaleRange+0x104>
    case GFSR_2000DPS:
        gScaleFactor = 16.4;
 8001664:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <MPU_writeGyroFullScaleRange+0x10c>)
 8001666:	4a1c      	ldr	r2, [pc, #112]	@ (80016d8 <MPU_writeGyroFullScaleRange+0x120>)
 8001668:	601a      	str	r2, [r3, #0]
        select = 0x18;
 800166a:	2318      	movs	r3, #24
 800166c:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 800166e:	4b17      	ldr	r3, [pc, #92]	@ (80016cc <MPU_writeGyroFullScaleRange+0x114>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	4619      	mov	r1, r3
 8001674:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001678:	9302      	str	r3, [sp, #8]
 800167a:	2301      	movs	r3, #1
 800167c:	9301      	str	r3, [sp, #4]
 800167e:	f107 030f 	add.w	r3, r7, #15
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	2301      	movs	r3, #1
 8001686:	221b      	movs	r2, #27
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f003 f833 	bl	80046f4 <HAL_I2C_Mem_Write>
        break;
 800168e:	e015      	b.n	80016bc <MPU_writeGyroFullScaleRange+0x104>
    default:
        gScaleFactor = 65.5;
 8001690:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <MPU_writeGyroFullScaleRange+0x10c>)
 8001692:	4a0f      	ldr	r2, [pc, #60]	@ (80016d0 <MPU_writeGyroFullScaleRange+0x118>)
 8001694:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8001696:	2308      	movs	r3, #8
 8001698:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 800169a:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <MPU_writeGyroFullScaleRange+0x114>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	4619      	mov	r1, r3
 80016a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016a4:	9302      	str	r3, [sp, #8]
 80016a6:	2301      	movs	r3, #1
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	f107 030f 	add.w	r3, r7, #15
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	221b      	movs	r2, #27
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f003 f81d 	bl	80046f4 <HAL_I2C_Mem_Write>
        break;
 80016ba:	bf00      	nop
    }
}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000258 	.word	0x20000258
 80016c8:	43030000 	.word	0x43030000
 80016cc:	20000248 	.word	0x20000248
 80016d0:	42830000 	.word	0x42830000
 80016d4:	42033333 	.word	0x42033333
 80016d8:	41833333 	.word	0x41833333

080016dc <MPU_readRawData>:

/// @brief Read raw data from IMU.
/// @param I2Cx Pointer to I2C structure config.
void MPU_readRawData(I2C_HandleTypeDef *I2Cx)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	@ 0x28
 80016e0:	af04      	add	r7, sp, #16
 80016e2:	6078      	str	r0, [r7, #4]
    // Init buffer
    uint8_t buf[14];

    // Subroutine for reading the raw data
    HAL_I2C_Mem_Read(I2Cx, _addr, ACCEL_XOUT_H, 1, buf, 14, I2C_TIMOUT_MS);
 80016e4:	4b24      	ldr	r3, [pc, #144]	@ (8001778 <MPU_readRawData+0x9c>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ee:	9302      	str	r3, [sp, #8]
 80016f0:	230e      	movs	r3, #14
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	f107 0308 	add.w	r3, r7, #8
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2301      	movs	r3, #1
 80016fc:	223b      	movs	r2, #59	@ 0x3b
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f003 f8f2 	bl	80048e8 <HAL_I2C_Mem_Read>

    // Bit shift the data
    rawData.ax = buf[0] << 8 | buf[1];
 8001704:	7a3b      	ldrb	r3, [r7, #8]
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	b21a      	sxth	r2, r3
 800170a:	7a7b      	ldrb	r3, [r7, #9]
 800170c:	b21b      	sxth	r3, r3
 800170e:	4313      	orrs	r3, r2
 8001710:	b21a      	sxth	r2, r3
 8001712:	4b1a      	ldr	r3, [pc, #104]	@ (800177c <MPU_readRawData+0xa0>)
 8001714:	801a      	strh	r2, [r3, #0]
    rawData.ay = buf[2] << 8 | buf[3];
 8001716:	7abb      	ldrb	r3, [r7, #10]
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	b21a      	sxth	r2, r3
 800171c:	7afb      	ldrb	r3, [r7, #11]
 800171e:	b21b      	sxth	r3, r3
 8001720:	4313      	orrs	r3, r2
 8001722:	b21a      	sxth	r2, r3
 8001724:	4b15      	ldr	r3, [pc, #84]	@ (800177c <MPU_readRawData+0xa0>)
 8001726:	805a      	strh	r2, [r3, #2]
    rawData.az = buf[4] << 8 | buf[5];
 8001728:	7b3b      	ldrb	r3, [r7, #12]
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	b21a      	sxth	r2, r3
 800172e:	7b7b      	ldrb	r3, [r7, #13]
 8001730:	b21b      	sxth	r3, r3
 8001732:	4313      	orrs	r3, r2
 8001734:	b21a      	sxth	r2, r3
 8001736:	4b11      	ldr	r3, [pc, #68]	@ (800177c <MPU_readRawData+0xa0>)
 8001738:	809a      	strh	r2, [r3, #4]
    // temperature = buf[6] << 8 | buf[7];
    rawData.gx = buf[8] << 8 | buf[9];
 800173a:	7c3b      	ldrb	r3, [r7, #16]
 800173c:	021b      	lsls	r3, r3, #8
 800173e:	b21a      	sxth	r2, r3
 8001740:	7c7b      	ldrb	r3, [r7, #17]
 8001742:	b21b      	sxth	r3, r3
 8001744:	4313      	orrs	r3, r2
 8001746:	b21a      	sxth	r2, r3
 8001748:	4b0c      	ldr	r3, [pc, #48]	@ (800177c <MPU_readRawData+0xa0>)
 800174a:	80da      	strh	r2, [r3, #6]
    rawData.gy = buf[10] << 8 | buf[11];
 800174c:	7cbb      	ldrb	r3, [r7, #18]
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	b21a      	sxth	r2, r3
 8001752:	7cfb      	ldrb	r3, [r7, #19]
 8001754:	b21b      	sxth	r3, r3
 8001756:	4313      	orrs	r3, r2
 8001758:	b21a      	sxth	r2, r3
 800175a:	4b08      	ldr	r3, [pc, #32]	@ (800177c <MPU_readRawData+0xa0>)
 800175c:	811a      	strh	r2, [r3, #8]
    rawData.gz = buf[12] << 8 | buf[13];
 800175e:	7d3b      	ldrb	r3, [r7, #20]
 8001760:	021b      	lsls	r3, r3, #8
 8001762:	b21a      	sxth	r2, r3
 8001764:	7d7b      	ldrb	r3, [r7, #21]
 8001766:	b21b      	sxth	r3, r3
 8001768:	4313      	orrs	r3, r2
 800176a:	b21a      	sxth	r2, r3
 800176c:	4b03      	ldr	r3, [pc, #12]	@ (800177c <MPU_readRawData+0xa0>)
 800176e:	815a      	strh	r2, [r3, #10]
}
 8001770:	bf00      	nop
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000248 	.word	0x20000248
 800177c:	2000020c 	.word	0x2000020c

08001780 <MPU_calibrateGyro>:

/// @brief Find offsets for each axis of gyroscope.
/// @param I2Cx Pointer to I2C structure config.
/// @param numCalPoints Number of data points to average.
void MPU_calibrateGyro(I2C_HandleTypeDef *I2Cx, uint16_t numCalPoints)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	807b      	strh	r3, [r7, #2]
    // Init
    int32_t x = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	613b      	str	r3, [r7, #16]
    int32_t z = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]

    // Zero guard
    if (numCalPoints == 0)
 8001798:	887b      	ldrh	r3, [r7, #2]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <MPU_calibrateGyro+0x22>
    {
        numCalPoints = 1;
 800179e:	2301      	movs	r3, #1
 80017a0:	807b      	strh	r3, [r7, #2]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	817b      	strh	r3, [r7, #10]
 80017a6:	e01d      	b.n	80017e4 <MPU_calibrateGyro+0x64>
    {
        MPU_readRawData(I2Cx);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff97 	bl	80016dc <MPU_readRawData>
        x += rawData.gx;
 80017ae:	4b28      	ldr	r3, [pc, #160]	@ (8001850 <MPU_calibrateGyro+0xd0>)
 80017b0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80017b4:	461a      	mov	r2, r3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	4413      	add	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]
        y += rawData.gy;
 80017bc:	4b24      	ldr	r3, [pc, #144]	@ (8001850 <MPU_calibrateGyro+0xd0>)
 80017be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80017c2:	461a      	mov	r2, r3
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4413      	add	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        z += rawData.gz;
 80017ca:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <MPU_calibrateGyro+0xd0>)
 80017cc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80017d0:	461a      	mov	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4413      	add	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]
        HAL_Delay(3);
 80017d8:	2003      	movs	r0, #3
 80017da:	f001 fa21 	bl	8002c20 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 80017de:	897b      	ldrh	r3, [r7, #10]
 80017e0:	3301      	adds	r3, #1
 80017e2:	817b      	strh	r3, [r7, #10]
 80017e4:	897a      	ldrh	r2, [r7, #10]
 80017e6:	887b      	ldrh	r3, [r7, #2]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d3dd      	bcc.n	80017a8 <MPU_calibrateGyro+0x28>
    }

    // Average the saved data points to find the gyroscope offset
    gyroCal.x = (float)x / (float)numCalPoints;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	ee07 3a90 	vmov	s15, r3
 80017f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017f6:	887b      	ldrh	r3, [r7, #2]
 80017f8:	ee07 3a90 	vmov	s15, r3
 80017fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001804:	4b13      	ldr	r3, [pc, #76]	@ (8001854 <MPU_calibrateGyro+0xd4>)
 8001806:	edc3 7a00 	vstr	s15, [r3]
    gyroCal.y = (float)y / (float)numCalPoints;
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001814:	887b      	ldrh	r3, [r7, #2]
 8001816:	ee07 3a90 	vmov	s15, r3
 800181a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800181e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001822:	4b0c      	ldr	r3, [pc, #48]	@ (8001854 <MPU_calibrateGyro+0xd4>)
 8001824:	edc3 7a01 	vstr	s15, [r3, #4]
    gyroCal.z = (float)z / (float)numCalPoints;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	ee07 3a90 	vmov	s15, r3
 800182e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001832:	887b      	ldrh	r3, [r7, #2]
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800183c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001840:	4b04      	ldr	r3, [pc, #16]	@ (8001854 <MPU_calibrateGyro+0xd4>)
 8001842:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001846:	bf00      	nop
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	2000020c 	.word	0x2000020c
 8001854:	20000230 	.word	0x20000230

08001858 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values.
/// @param I2Cx Pointer to I2C structure config.
void MPU_readProcessedData(I2C_HandleTypeDef *I2Cx)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
    // Get raw values from the IMU
    MPU_readRawData(I2Cx);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ff3b 	bl	80016dc <MPU_readRawData>

    // Convert accelerometer values to g's
    sensorData.ax = rawData.ax / aScaleFactor;
 8001866:	4b3f      	ldr	r3, [pc, #252]	@ (8001964 <MPU_readProcessedData+0x10c>)
 8001868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800186c:	ee07 3a90 	vmov	s15, r3
 8001870:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001874:	4b3c      	ldr	r3, [pc, #240]	@ (8001968 <MPU_readProcessedData+0x110>)
 8001876:	ed93 7a00 	vldr	s14, [r3]
 800187a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800187e:	4b3b      	ldr	r3, [pc, #236]	@ (800196c <MPU_readProcessedData+0x114>)
 8001880:	edc3 7a00 	vstr	s15, [r3]
    sensorData.ay = rawData.ay / aScaleFactor;
 8001884:	4b37      	ldr	r3, [pc, #220]	@ (8001964 <MPU_readProcessedData+0x10c>)
 8001886:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800188a:	ee07 3a90 	vmov	s15, r3
 800188e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001892:	4b35      	ldr	r3, [pc, #212]	@ (8001968 <MPU_readProcessedData+0x110>)
 8001894:	ed93 7a00 	vldr	s14, [r3]
 8001898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800189c:	4b33      	ldr	r3, [pc, #204]	@ (800196c <MPU_readProcessedData+0x114>)
 800189e:	edc3 7a01 	vstr	s15, [r3, #4]
    sensorData.az = rawData.az / aScaleFactor;
 80018a2:	4b30      	ldr	r3, [pc, #192]	@ (8001964 <MPU_readProcessedData+0x10c>)
 80018a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001968 <MPU_readProcessedData+0x110>)
 80018b2:	ed93 7a00 	vldr	s14, [r3]
 80018b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ba:	4b2c      	ldr	r3, [pc, #176]	@ (800196c <MPU_readProcessedData+0x114>)
 80018bc:	edc3 7a02 	vstr	s15, [r3, #8]

    // Compensate for gyro offset
    sensorData.gx = rawData.gx - gyroCal.x;
 80018c0:	4b28      	ldr	r3, [pc, #160]	@ (8001964 <MPU_readProcessedData+0x10c>)
 80018c2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018c6:	ee07 3a90 	vmov	s15, r3
 80018ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ce:	4b28      	ldr	r3, [pc, #160]	@ (8001970 <MPU_readProcessedData+0x118>)
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d8:	4b24      	ldr	r3, [pc, #144]	@ (800196c <MPU_readProcessedData+0x114>)
 80018da:	edc3 7a03 	vstr	s15, [r3, #12]
    sensorData.gy = rawData.gy - gyroCal.y;
 80018de:	4b21      	ldr	r3, [pc, #132]	@ (8001964 <MPU_readProcessedData+0x10c>)
 80018e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018e4:	ee07 3a90 	vmov	s15, r3
 80018e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ec:	4b20      	ldr	r3, [pc, #128]	@ (8001970 <MPU_readProcessedData+0x118>)
 80018ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80018f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f6:	4b1d      	ldr	r3, [pc, #116]	@ (800196c <MPU_readProcessedData+0x114>)
 80018f8:	edc3 7a04 	vstr	s15, [r3, #16]
    sensorData.gz = rawData.gz - gyroCal.z;
 80018fc:	4b19      	ldr	r3, [pc, #100]	@ (8001964 <MPU_readProcessedData+0x10c>)
 80018fe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001902:	ee07 3a90 	vmov	s15, r3
 8001906:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800190a:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <MPU_readProcessedData+0x118>)
 800190c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001910:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001914:	4b15      	ldr	r3, [pc, #84]	@ (800196c <MPU_readProcessedData+0x114>)
 8001916:	edc3 7a05 	vstr	s15, [r3, #20]

    // Convert gyro values to deg/s
    sensorData.gx /= gScaleFactor;
 800191a:	4b14      	ldr	r3, [pc, #80]	@ (800196c <MPU_readProcessedData+0x114>)
 800191c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001920:	4b14      	ldr	r3, [pc, #80]	@ (8001974 <MPU_readProcessedData+0x11c>)
 8001922:	ed93 7a00 	vldr	s14, [r3]
 8001926:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800192a:	4b10      	ldr	r3, [pc, #64]	@ (800196c <MPU_readProcessedData+0x114>)
 800192c:	edc3 7a03 	vstr	s15, [r3, #12]
    sensorData.gy /= gScaleFactor;
 8001930:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <MPU_readProcessedData+0x114>)
 8001932:	edd3 6a04 	vldr	s13, [r3, #16]
 8001936:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <MPU_readProcessedData+0x11c>)
 8001938:	ed93 7a00 	vldr	s14, [r3]
 800193c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001940:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <MPU_readProcessedData+0x114>)
 8001942:	edc3 7a04 	vstr	s15, [r3, #16]
    sensorData.gz /= gScaleFactor;
 8001946:	4b09      	ldr	r3, [pc, #36]	@ (800196c <MPU_readProcessedData+0x114>)
 8001948:	edd3 6a05 	vldr	s13, [r3, #20]
 800194c:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <MPU_readProcessedData+0x11c>)
 800194e:	ed93 7a00 	vldr	s14, [r3]
 8001952:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001956:	4b05      	ldr	r3, [pc, #20]	@ (800196c <MPU_readProcessedData+0x114>)
 8001958:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	2000020c 	.word	0x2000020c
 8001968:	20000254 	.word	0x20000254
 800196c:	20000218 	.word	0x20000218
 8001970:	20000230 	.word	0x20000230
 8001974:	20000258 	.word	0x20000258

08001978 <MPU_calcAttitude>:

/// @brief Calculate the attitude of the sensor in degrees using a complementary filter.
/// @param I2Cx Pointer to I2C structure config.
void MPU_calcAttitude(I2C_HandleTypeDef *I2Cx)
{
 8001978:	b5b0      	push	{r4, r5, r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
    // Read processed data
    MPU_readProcessedData(I2Cx);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ff69 	bl	8001858 <MPU_readProcessedData>

    // Complementary filter
    float accelPitch = atan2(sensorData.ay, sensorData.az) * RAD2DEG;
 8001986:	4b52      	ldr	r3, [pc, #328]	@ (8001ad0 <MPU_calcAttitude+0x158>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fe0c 	bl	80005a8 <__aeabi_f2d>
 8001990:	4604      	mov	r4, r0
 8001992:	460d      	mov	r5, r1
 8001994:	4b4e      	ldr	r3, [pc, #312]	@ (8001ad0 <MPU_calcAttitude+0x158>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fe05 	bl	80005a8 <__aeabi_f2d>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	ec43 2b11 	vmov	d1, r2, r3
 80019a6:	ec45 4b10 	vmov	d0, r4, r5
 80019aa:	f00a ff43 	bl	800c834 <atan2>
 80019ae:	ec51 0b10 	vmov	r0, r1, d0
 80019b2:	a345      	add	r3, pc, #276	@ (adr r3, 8001ac8 <MPU_calcAttitude+0x150>)
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	f7fe fe4e 	bl	8000658 <__aeabi_dmul>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	f7ff f940 	bl	8000c48 <__aeabi_d2f>
 80019c8:	4603      	mov	r3, r0
 80019ca:	60fb      	str	r3, [r7, #12]
    float accelRoll = atan2(sensorData.ax, sensorData.az) * RAD2DEG;
 80019cc:	4b40      	ldr	r3, [pc, #256]	@ (8001ad0 <MPU_calcAttitude+0x158>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fde9 	bl	80005a8 <__aeabi_f2d>
 80019d6:	4604      	mov	r4, r0
 80019d8:	460d      	mov	r5, r1
 80019da:	4b3d      	ldr	r3, [pc, #244]	@ (8001ad0 <MPU_calcAttitude+0x158>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fde2 	bl	80005a8 <__aeabi_f2d>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	ec43 2b11 	vmov	d1, r2, r3
 80019ec:	ec45 4b10 	vmov	d0, r4, r5
 80019f0:	f00a ff20 	bl	800c834 <atan2>
 80019f4:	ec51 0b10 	vmov	r0, r1, d0
 80019f8:	a333      	add	r3, pc, #204	@ (adr r3, 8001ac8 <MPU_calcAttitude+0x150>)
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	f7fe fe2b 	bl	8000658 <__aeabi_dmul>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f7ff f91d 	bl	8000c48 <__aeabi_d2f>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	60bb      	str	r3, [r7, #8]

    attitude.r = _tau * (attitude.r - sensorData.gy * _dt) + (1 - _tau) * accelRoll;
 8001a12:	4b30      	ldr	r3, [pc, #192]	@ (8001ad4 <MPU_calcAttitude+0x15c>)
 8001a14:	ed93 7a00 	vldr	s14, [r3]
 8001a18:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad0 <MPU_calcAttitude+0x158>)
 8001a1a:	edd3 6a04 	vldr	s13, [r3, #16]
 8001a1e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad8 <MPU_calcAttitude+0x160>)
 8001a20:	edd3 7a00 	vldr	s15, [r3]
 8001a24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001adc <MPU_calcAttitude+0x164>)
 8001a2e:	edd3 7a00 	vldr	s15, [r3]
 8001a32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a36:	4b29      	ldr	r3, [pc, #164]	@ (8001adc <MPU_calcAttitude+0x164>)
 8001a38:	edd3 7a00 	vldr	s15, [r3]
 8001a3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001a40:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a44:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a50:	4b20      	ldr	r3, [pc, #128]	@ (8001ad4 <MPU_calcAttitude+0x15c>)
 8001a52:	edc3 7a00 	vstr	s15, [r3]
    attitude.p = _tau * (attitude.p + sensorData.gx * _dt) + (1 - _tau) * accelPitch;
 8001a56:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad4 <MPU_calcAttitude+0x15c>)
 8001a58:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad0 <MPU_calcAttitude+0x158>)
 8001a5e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a62:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad8 <MPU_calcAttitude+0x160>)
 8001a64:	edd3 7a00 	vldr	s15, [r3]
 8001a68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a70:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <MPU_calcAttitude+0x164>)
 8001a72:	edd3 7a00 	vldr	s15, [r3]
 8001a76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a7a:	4b18      	ldr	r3, [pc, #96]	@ (8001adc <MPU_calcAttitude+0x164>)
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001a84:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a88:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a94:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad4 <MPU_calcAttitude+0x15c>)
 8001a96:	edc3 7a01 	vstr	s15, [r3, #4]
    attitude.y += sensorData.gz * _dt;
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad4 <MPU_calcAttitude+0x15c>)
 8001a9c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <MPU_calcAttitude+0x158>)
 8001aa2:	edd3 6a05 	vldr	s13, [r3, #20]
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad8 <MPU_calcAttitude+0x160>)
 8001aa8:	edd3 7a00 	vldr	s15, [r3]
 8001aac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab4:	4b07      	ldr	r3, [pc, #28]	@ (8001ad4 <MPU_calcAttitude+0x15c>)
 8001ab6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	f3af 8000 	nop.w
 8001ac8:	1a63cbb0 	.word	0x1a63cbb0
 8001acc:	404ca5dc 	.word	0x404ca5dc
 8001ad0:	20000218 	.word	0x20000218
 8001ad4:	2000023c 	.word	0x2000023c
 8001ad8:	2000024c 	.word	0x2000024c
 8001adc:	20000250 	.word	0x20000250

08001ae0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001ae4:	4b17      	ldr	r3, [pc, #92]	@ (8001b44 <MX_CAN1_Init+0x64>)
 8001ae6:	4a18      	ldr	r2, [pc, #96]	@ (8001b48 <MX_CAN1_Init+0x68>)
 8001ae8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8001aea:	4b16      	ldr	r3, [pc, #88]	@ (8001b44 <MX_CAN1_Init+0x64>)
 8001aec:	220a      	movs	r2, #10
 8001aee:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001af0:	4b14      	ldr	r3, [pc, #80]	@ (8001b44 <MX_CAN1_Init+0x64>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001af6:	4b13      	ldr	r3, [pc, #76]	@ (8001b44 <MX_CAN1_Init+0x64>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001afc:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <MX_CAN1_Init+0x64>)
 8001afe:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8001b02:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001b04:	4b0f      	ldr	r3, [pc, #60]	@ (8001b44 <MX_CAN1_Init+0x64>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <MX_CAN1_Init+0x64>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	@ (8001b44 <MX_CAN1_Init+0x64>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <MX_CAN1_Init+0x64>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001b1c:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <MX_CAN1_Init+0x64>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001b22:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <MX_CAN1_Init+0x64>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001b28:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <MX_CAN1_Init+0x64>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001b2e:	4805      	ldr	r0, [pc, #20]	@ (8001b44 <MX_CAN1_Init+0x64>)
 8001b30:	f001 f89a 	bl	8002c68 <HAL_CAN_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001b3a:	f000 fbb5 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2000025c 	.word	0x2000025c
 8001b48:	40006400 	.word	0x40006400

08001b4c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	@ 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a19      	ldr	r2, [pc, #100]	@ (8001bd0 <HAL_CAN_MspInit+0x84>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d12c      	bne.n	8001bc8 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	4b18      	ldr	r3, [pc, #96]	@ (8001bd4 <HAL_CAN_MspInit+0x88>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	4a17      	ldr	r2, [pc, #92]	@ (8001bd4 <HAL_CAN_MspInit+0x88>)
 8001b78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b7e:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <HAL_CAN_MspInit+0x88>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b11      	ldr	r3, [pc, #68]	@ (8001bd4 <HAL_CAN_MspInit+0x88>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	4a10      	ldr	r2, [pc, #64]	@ (8001bd4 <HAL_CAN_MspInit+0x88>)
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd4 <HAL_CAN_MspInit+0x88>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ba6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001bb8:	2309      	movs	r3, #9
 8001bba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4805      	ldr	r0, [pc, #20]	@ (8001bd8 <HAL_CAN_MspInit+0x8c>)
 8001bc4:	f001 ff74 	bl	8003ab0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001bc8:	bf00      	nop
 8001bca:	3728      	adds	r7, #40	@ 0x28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40006400 	.word	0x40006400
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40020400 	.word	0x40020400

08001bdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c18 <MX_DMA_Init+0x3c>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	4a0b      	ldr	r2, [pc, #44]	@ (8001c18 <MX_DMA_Init+0x3c>)
 8001bec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf2:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <MX_DMA_Init+0x3c>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	203a      	movs	r0, #58	@ 0x3a
 8001c04:	f001 fb1b 	bl	800323e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001c08:	203a      	movs	r0, #58	@ 0x3a
 8001c0a:	f001 fb34 	bl	8003276 <HAL_NVIC_EnableIRQ>

}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800

08001c1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	@ 0x28
 8001c20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	4b2d      	ldr	r3, [pc, #180]	@ (8001cec <MX_GPIO_Init+0xd0>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	4a2c      	ldr	r2, [pc, #176]	@ (8001cec <MX_GPIO_Init+0xd0>)
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c42:	4b2a      	ldr	r3, [pc, #168]	@ (8001cec <MX_GPIO_Init+0xd0>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	4b26      	ldr	r3, [pc, #152]	@ (8001cec <MX_GPIO_Init+0xd0>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	4a25      	ldr	r2, [pc, #148]	@ (8001cec <MX_GPIO_Init+0xd0>)
 8001c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5e:	4b23      	ldr	r3, [pc, #140]	@ (8001cec <MX_GPIO_Init+0xd0>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cec <MX_GPIO_Init+0xd0>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	4a1e      	ldr	r2, [pc, #120]	@ (8001cec <MX_GPIO_Init+0xd0>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cec <MX_GPIO_Init+0xd0>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	4b18      	ldr	r3, [pc, #96]	@ (8001cec <MX_GPIO_Init+0xd0>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	4a17      	ldr	r2, [pc, #92]	@ (8001cec <MX_GPIO_Init+0xd0>)
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c96:	4b15      	ldr	r3, [pc, #84]	@ (8001cec <MX_GPIO_Init+0xd0>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2120      	movs	r1, #32
 8001ca6:	4812      	ldr	r0, [pc, #72]	@ (8001cf0 <MX_GPIO_Init+0xd4>)
 8001ca8:	f002 f896 	bl	8003dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cb2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	480c      	ldr	r0, [pc, #48]	@ (8001cf4 <MX_GPIO_Init+0xd8>)
 8001cc4:	f001 fef4 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001cc8:	2320      	movs	r3, #32
 8001cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4804      	ldr	r0, [pc, #16]	@ (8001cf0 <MX_GPIO_Init+0xd4>)
 8001ce0:	f001 fee6 	bl	8003ab0 <HAL_GPIO_Init>

}
 8001ce4:	bf00      	nop
 8001ce6:	3728      	adds	r7, #40	@ 0x28
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020000 	.word	0x40020000
 8001cf4:	40020800 	.word	0x40020800

08001cf8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001cfc:	4b12      	ldr	r3, [pc, #72]	@ (8001d48 <MX_I2C3_Init+0x50>)
 8001cfe:	4a13      	ldr	r2, [pc, #76]	@ (8001d4c <MX_I2C3_Init+0x54>)
 8001d00:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001d02:	4b11      	ldr	r3, [pc, #68]	@ (8001d48 <MX_I2C3_Init+0x50>)
 8001d04:	4a12      	ldr	r2, [pc, #72]	@ (8001d50 <MX_I2C3_Init+0x58>)
 8001d06:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d08:	4b0f      	ldr	r3, [pc, #60]	@ (8001d48 <MX_I2C3_Init+0x50>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d48 <MX_I2C3_Init+0x50>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	@ (8001d48 <MX_I2C3_Init+0x50>)
 8001d16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d1a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <MX_I2C3_Init+0x50>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001d22:	4b09      	ldr	r3, [pc, #36]	@ (8001d48 <MX_I2C3_Init+0x50>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d28:	4b07      	ldr	r3, [pc, #28]	@ (8001d48 <MX_I2C3_Init+0x50>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d2e:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <MX_I2C3_Init+0x50>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001d34:	4804      	ldr	r0, [pc, #16]	@ (8001d48 <MX_I2C3_Init+0x50>)
 8001d36:	f002 f869 	bl	8003e0c <HAL_I2C_Init>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001d40:	f000 fab2 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000284 	.word	0x20000284
 8001d4c:	40005c00 	.word	0x40005c00
 8001d50:	000186a0 	.word	0x000186a0

08001d54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	@ 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a28      	ldr	r2, [pc, #160]	@ (8001e14 <HAL_I2C_MspInit+0xc0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d14a      	bne.n	8001e0c <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	4b27      	ldr	r3, [pc, #156]	@ (8001e18 <HAL_I2C_MspInit+0xc4>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	4a26      	ldr	r2, [pc, #152]	@ (8001e18 <HAL_I2C_MspInit+0xc4>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d86:	4b24      	ldr	r3, [pc, #144]	@ (8001e18 <HAL_I2C_MspInit+0xc4>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b20      	ldr	r3, [pc, #128]	@ (8001e18 <HAL_I2C_MspInit+0xc4>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8001e18 <HAL_I2C_MspInit+0xc4>)
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e18 <HAL_I2C_MspInit+0xc4>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001dae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001db4:	2312      	movs	r3, #18
 8001db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4814      	ldr	r0, [pc, #80]	@ (8001e1c <HAL_I2C_MspInit+0xc8>)
 8001dcc:	f001 fe70 	bl	8003ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dd0:	2310      	movs	r3, #16
 8001dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd4:	2312      	movs	r3, #18
 8001dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001de0:	2304      	movs	r3, #4
 8001de2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	4619      	mov	r1, r3
 8001dea:	480d      	ldr	r0, [pc, #52]	@ (8001e20 <HAL_I2C_MspInit+0xcc>)
 8001dec:	f001 fe60 	bl	8003ab0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	4b08      	ldr	r3, [pc, #32]	@ (8001e18 <HAL_I2C_MspInit+0xc4>)
 8001df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df8:	4a07      	ldr	r2, [pc, #28]	@ (8001e18 <HAL_I2C_MspInit+0xc4>)
 8001dfa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001dfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e00:	4b05      	ldr	r3, [pc, #20]	@ (8001e18 <HAL_I2C_MspInit+0xc4>)
 8001e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	3728      	adds	r7, #40	@ 0x28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40005c00 	.word	0x40005c00
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020000 	.word	0x40020000
 8001e20:	40020400 	.word	0x40020400

08001e24 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001e2c:	1d39      	adds	r1, r7, #4
 8001e2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e32:	2201      	movs	r2, #1
 8001e34:	4807      	ldr	r0, [pc, #28]	@ (8001e54 <__io_putchar+0x30>)
 8001e36:	f004 ff3b 	bl	8006cb0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001e3a:	1d39      	adds	r1, r7, #4
 8001e3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e40:	2201      	movs	r2, #1
 8001e42:	4805      	ldr	r0, [pc, #20]	@ (8001e58 <__io_putchar+0x34>)
 8001e44:	f004 ff34 	bl	8006cb0 <HAL_UART_Transmit>

	return ch;
 8001e48:	687b      	ldr	r3, [r7, #4]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000380 	.word	0x20000380
 8001e58:	20000338 	.word	0x20000338

08001e5c <BMP280_init>:

int BMP280_init()
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
	if (BMP280_Check_id() == EXIT_FAILURE) return EXIT_FAILURE;			// Identification du BMP280
 8001e60:	f7ff f8f0 	bl	8001044 <BMP280_Check_id>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d101      	bne.n	8001e6e <BMP280_init+0x12>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e00e      	b.n	8001e8c <BMP280_init+0x30>
	if (BMP280_Config() == EXIT_FAILURE) return EXIT_FAILURE;			// Configuration du BMP280
 8001e6e:	f7ff f92d 	bl	80010cc <BMP280_Config>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <BMP280_init+0x20>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e007      	b.n	8001e8c <BMP280_init+0x30>
	if (BMP280_calibration() == EXIT_FAILURE) return EXIT_FAILURE;		// Mise à jour des paramètres d'étalonage
 8001e7c:	f7ff f970 	bl	8001160 <BMP280_calibration>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <BMP280_init+0x2e>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <BMP280_init+0x30>

	return EXIT_SUCCESS;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <MPU9250_init>:

void MPU9250_init()
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	// Vérifie si l'IMU est configuré correctement et bloque si ce n'est pas le cas
	if (MPU_begin(&hi2c3, AD0_LOW, AFSR_4G, GFSR_500DPS, 0.98, 0.004) == TRUE)
 8001e94:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8001ed0 <MPU9250_init+0x40>
 8001e98:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8001ed4 <MPU9250_init+0x44>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	2168      	movs	r1, #104	@ 0x68
 8001ea2:	480d      	ldr	r0, [pc, #52]	@ (8001ed8 <MPU9250_init+0x48>)
 8001ea4:	f7ff fa9c 	bl	80013e0 <MPU_begin>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d103      	bne.n	8001eb6 <MPU9250_init+0x26>
	{
		printf("Centrale inertielle configurée correctement\r\n");
 8001eae:	480b      	ldr	r0, [pc, #44]	@ (8001edc <MPU9250_init+0x4c>)
 8001eb0:	f007 f920 	bl	80090f4 <puts>
 8001eb4:	e002      	b.n	8001ebc <MPU9250_init+0x2c>
	}
	else
	{
		printf("ERREUR!\r\n");
 8001eb6:	480a      	ldr	r0, [pc, #40]	@ (8001ee0 <MPU9250_init+0x50>)
 8001eb8:	f007 f91c 	bl	80090f4 <puts>
	}

	// Calibre l'IMU
	printf("CALIBRATION EN COURS...\r\n");
 8001ebc:	4809      	ldr	r0, [pc, #36]	@ (8001ee4 <MPU9250_init+0x54>)
 8001ebe:	f007 f919 	bl	80090f4 <puts>
	MPU_calibrateGyro(&hi2c3, 1500);
 8001ec2:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8001ec6:	4804      	ldr	r0, [pc, #16]	@ (8001ed8 <MPU9250_init+0x48>)
 8001ec8:	f7ff fc5a 	bl	8001780 <MPU_calibrateGyro>
}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	3b83126f 	.word	0x3b83126f
 8001ed4:	3f7ae148 	.word	0x3f7ae148
 8001ed8:	20000284 	.word	0x20000284
 8001edc:	0800cdcc 	.word	0x0800cdcc
 8001ee0:	0800cdfc 	.word	0x0800cdfc
 8001ee4:	0800ce08 	.word	0x0800ce08

08001ee8 <MOT_Init>:

void MOT_Init()
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
	CAN_Init();
 8001eec:	f000 f9e2 	bl	80022b4 <CAN_Init>
	MOT_Set_mode(MOT_MODE_ANTICLOCKWISE, 1, 1);
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f000 faeb 	bl	80024d0 <MOT_Set_mode>
	MOT_Set_origin();
 8001efa:	f000 fb03 	bl	8002504 <MOT_Set_origin>
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <RaspberryPI_Request>:

void RaspberryPI_Request()
{
 8001f04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af04      	add	r7, sp, #16
	char* cmd = (char*)serial_buff;
 8001f0c:	4b3f      	ldr	r3, [pc, #252]	@ (800200c <RaspberryPI_Request+0x108>)
 8001f0e:	603b      	str	r3, [r7, #0]
	size_t len = strlen(cmd);
 8001f10:	6838      	ldr	r0, [r7, #0]
 8001f12:	f7fe f9dd 	bl	80002d0 <strlen>
 8001f16:	6078      	str	r0, [r7, #4]

	while (len > 0 && (cmd[len - 1] == '\r' || cmd[len - 1] == '\n'))
 8001f18:	e008      	b.n	8001f2c <RaspberryPI_Request+0x28>
	{
		cmd[len - 1] = '\0';
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	4413      	add	r3, r2
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
		len--;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	607b      	str	r3, [r7, #4]
	while (len > 0 && (cmd[len - 1] == '\r' || cmd[len - 1] == '\n'))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00d      	beq.n	8001f4e <RaspberryPI_Request+0x4a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	4413      	add	r3, r2
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b0d      	cmp	r3, #13
 8001f3e:	d0ec      	beq.n	8001f1a <RaspberryPI_Request+0x16>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b0a      	cmp	r3, #10
 8001f4c:	d0e5      	beq.n	8001f1a <RaspberryPI_Request+0x16>
	}

	if (!strcmp("GET_T", (char*)cmd)) {
 8001f4e:	6839      	ldr	r1, [r7, #0]
 8001f50:	482f      	ldr	r0, [pc, #188]	@ (8002010 <RaspberryPI_Request+0x10c>)
 8001f52:	f7fe f95d 	bl	8000210 <strcmp>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d107      	bne.n	8001f6c <RaspberryPI_Request+0x68>
		printf("La température est : %d\r\n", (int) BMP280_get_temperature());
 8001f5c:	f7ff fa02 	bl	8001364 <BMP280_get_temperature>
 8001f60:	4603      	mov	r3, r0
 8001f62:	4619      	mov	r1, r3
 8001f64:	482b      	ldr	r0, [pc, #172]	@ (8002014 <RaspberryPI_Request+0x110>)
 8001f66:	f007 f85d 	bl	8009024 <iprintf>
		printf("A:%.1f;%.1f;%.1f\r\n", attitude.r, attitude.p, attitude.y);
	}
	else {
		printf("Unknown request: %s\r\n", cmd);
	}
}
 8001f6a:	e049      	b.n	8002000 <RaspberryPI_Request+0xfc>
	else if (!strcmp("GET_P", (char*)cmd)) {
 8001f6c:	6839      	ldr	r1, [r7, #0]
 8001f6e:	482a      	ldr	r0, [pc, #168]	@ (8002018 <RaspberryPI_Request+0x114>)
 8001f70:	f7fe f94e 	bl	8000210 <strcmp>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d107      	bne.n	8001f8a <RaspberryPI_Request+0x86>
		printf("La pression est : %d\r\n", (int) BMP280_get_pressure());
 8001f7a:	f7ff fa12 	bl	80013a2 <BMP280_get_pressure>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	4619      	mov	r1, r3
 8001f82:	4826      	ldr	r0, [pc, #152]	@ (800201c <RaspberryPI_Request+0x118>)
 8001f84:	f007 f84e 	bl	8009024 <iprintf>
}
 8001f88:	e03a      	b.n	8002000 <RaspberryPI_Request+0xfc>
	else if (!strcmp("SET_K", (char*)cmd)) {
 8001f8a:	6839      	ldr	r1, [r7, #0]
 8001f8c:	4824      	ldr	r0, [pc, #144]	@ (8002020 <RaspberryPI_Request+0x11c>)
 8001f8e:	f7fe f93f 	bl	8000210 <strcmp>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d033      	beq.n	8002000 <RaspberryPI_Request+0xfc>
	else if (!strcmp("GET_K", (char*)cmd)) {
 8001f98:	6839      	ldr	r1, [r7, #0]
 8001f9a:	4822      	ldr	r0, [pc, #136]	@ (8002024 <RaspberryPI_Request+0x120>)
 8001f9c:	f7fe f938 	bl	8000210 <strcmp>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d02c      	beq.n	8002000 <RaspberryPI_Request+0xfc>
	else if (!strcmp("GET_A", (char*)cmd)) {
 8001fa6:	6839      	ldr	r1, [r7, #0]
 8001fa8:	481f      	ldr	r0, [pc, #124]	@ (8002028 <RaspberryPI_Request+0x124>)
 8001faa:	f7fe f931 	bl	8000210 <strcmp>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d121      	bne.n	8001ff8 <RaspberryPI_Request+0xf4>
		MPU_calcAttitude(&hi2c3);
 8001fb4:	481d      	ldr	r0, [pc, #116]	@ (800202c <RaspberryPI_Request+0x128>)
 8001fb6:	f7ff fcdf 	bl	8001978 <MPU_calcAttitude>
		printf("A:%.1f;%.1f;%.1f\r\n", attitude.r, attitude.p, attitude.y);
 8001fba:	4b1d      	ldr	r3, [pc, #116]	@ (8002030 <RaspberryPI_Request+0x12c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe faf2 	bl	80005a8 <__aeabi_f2d>
 8001fc4:	4680      	mov	r8, r0
 8001fc6:	4689      	mov	r9, r1
 8001fc8:	4b19      	ldr	r3, [pc, #100]	@ (8002030 <RaspberryPI_Request+0x12c>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe faeb 	bl	80005a8 <__aeabi_f2d>
 8001fd2:	4604      	mov	r4, r0
 8001fd4:	460d      	mov	r5, r1
 8001fd6:	4b16      	ldr	r3, [pc, #88]	@ (8002030 <RaspberryPI_Request+0x12c>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fae4 	bl	80005a8 <__aeabi_f2d>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001fe8:	e9cd 4500 	strd	r4, r5, [sp]
 8001fec:	4642      	mov	r2, r8
 8001fee:	464b      	mov	r3, r9
 8001ff0:	4810      	ldr	r0, [pc, #64]	@ (8002034 <RaspberryPI_Request+0x130>)
 8001ff2:	f007 f817 	bl	8009024 <iprintf>
}
 8001ff6:	e003      	b.n	8002000 <RaspberryPI_Request+0xfc>
		printf("Unknown request: %s\r\n", cmd);
 8001ff8:	6839      	ldr	r1, [r7, #0]
 8001ffa:	480f      	ldr	r0, [pc, #60]	@ (8002038 <RaspberryPI_Request+0x134>)
 8001ffc:	f007 f812 	bl	8009024 <iprintf>
}
 8002000:	bf00      	nop
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800200a:	bf00      	nop
 800200c:	200002d8 	.word	0x200002d8
 8002010:	0800ce24 	.word	0x0800ce24
 8002014:	0800ce2c 	.word	0x0800ce2c
 8002018:	0800ce48 	.word	0x0800ce48
 800201c:	0800ce50 	.word	0x0800ce50
 8002020:	0800ce68 	.word	0x0800ce68
 8002024:	0800ce70 	.word	0x0800ce70
 8002028:	0800ce78 	.word	0x0800ce78
 800202c:	20000284 	.word	0x20000284
 8002030:	2000023c 	.word	0x2000023c
 8002034:	0800ce80 	.word	0x0800ce80
 8002038:	0800ce94 	.word	0x0800ce94

0800203c <HAL_TIM_PeriodElapsedCallback>:
 * @brief  Period elapsed callback in non-blocking mode.
 * @param  htim: TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) // Check if the interrupt is from Timer 2
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800204c:	d136      	bne.n	80020bc <HAL_TIM_PeriodElapsedCallback+0x80>
	{
		// Motor movement proportional to the temperature
		angle += (int)(BMP280_get_temperature() * proportional_coeff)%360;
 800204e:	f7ff f989 	bl	8001364 <BMP280_get_temperature>
 8002052:	ee07 0a90 	vmov	s15, r0
 8002056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800205a:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80020c4 <HAL_TIM_PeriodElapsedCallback+0x88>
 800205e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002062:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002066:	ee17 2a90 	vmov	r2, s15
 800206a:	4b17      	ldr	r3, [pc, #92]	@ (80020c8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800206c:	fb83 1302 	smull	r1, r3, r3, r2
 8002070:	4413      	add	r3, r2
 8002072:	1219      	asrs	r1, r3, #8
 8002074:	17d3      	asrs	r3, r2, #31
 8002076:	1acb      	subs	r3, r1, r3
 8002078:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	4a12      	ldr	r2, [pc, #72]	@ (80020cc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002084:	6812      	ldr	r2, [r2, #0]
 8002086:	4413      	add	r3, r2
 8002088:	4a10      	ldr	r2, [pc, #64]	@ (80020cc <HAL_TIM_PeriodElapsedCallback+0x90>)
 800208a:	6013      	str	r3, [r2, #0]

		// Sign and angle change to do complete rotations
		if (angle>180) MOT_Rotate(angle-180, MOT_ANGLE_NEGATIVE);
 800208c:	4b0f      	ldr	r3, [pc, #60]	@ (80020cc <HAL_TIM_PeriodElapsedCallback+0x90>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2bb4      	cmp	r3, #180	@ 0xb4
 8002092:	dd08      	ble.n	80020a6 <HAL_TIM_PeriodElapsedCallback+0x6a>
 8002094:	4b0d      	ldr	r3, [pc, #52]	@ (80020cc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	334c      	adds	r3, #76	@ 0x4c
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2101      	movs	r1, #1
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 fa3e 	bl	8002522 <MOT_Rotate>
		if (angle<=180) MOT_Rotate(angle, MOT_ANGLE_POSITIVE);
 80020a6:	4b09      	ldr	r3, [pc, #36]	@ (80020cc <HAL_TIM_PeriodElapsedCallback+0x90>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2bb4      	cmp	r3, #180	@ 0xb4
 80020ac:	dc06      	bgt.n	80020bc <HAL_TIM_PeriodElapsedCallback+0x80>
 80020ae:	4b07      	ldr	r3, [pc, #28]	@ (80020cc <HAL_TIM_PeriodElapsedCallback+0x90>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 fa33 	bl	8002522 <MOT_Rotate>
	}
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	3a83126f 	.word	0x3a83126f
 80020c8:	b60b60b7 	.word	0xb60b60b7
 80020cc:	200002e4 	.word	0x200002e4

080020d0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a18      	ldr	r2, [pc, #96]	@ (8002144 <HAL_UARTEx_RxEventCallback+0x74>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d12a      	bne.n	800213c <HAL_UARTEx_RxEventCallback+0x6c>
	{
		// Process received data
		// Null-terminate the received string (prevent overflow)
		if (Size < SERIAL_BUFF_SIZE) {
 80020e6:	887b      	ldrh	r3, [r7, #2]
 80020e8:	2b09      	cmp	r3, #9
 80020ea:	d804      	bhi.n	80020f6 <HAL_UARTEx_RxEventCallback+0x26>
			serial_buff[Size] = '\0';  // Null-terminate based on actual data size
 80020ec:	887b      	ldrh	r3, [r7, #2]
 80020ee:	4a16      	ldr	r2, [pc, #88]	@ (8002148 <HAL_UARTEx_RxEventCallback+0x78>)
 80020f0:	2100      	movs	r1, #0
 80020f2:	54d1      	strb	r1, [r2, r3]
 80020f4:	e002      	b.n	80020fc <HAL_UARTEx_RxEventCallback+0x2c>
		} else {
			serial_buff[SERIAL_BUFF_SIZE - 1] = '\0';
 80020f6:	4b14      	ldr	r3, [pc, #80]	@ (8002148 <HAL_UARTEx_RxEventCallback+0x78>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	725a      	strb	r2, [r3, #9]
		}

		printf("Received (%d bytes): %s\r\n", Size, serial_buff);
 80020fc:	887b      	ldrh	r3, [r7, #2]
 80020fe:	4a12      	ldr	r2, [pc, #72]	@ (8002148 <HAL_UARTEx_RxEventCallback+0x78>)
 8002100:	4619      	mov	r1, r3
 8002102:	4812      	ldr	r0, [pc, #72]	@ (800214c <HAL_UARTEx_RxEventCallback+0x7c>)
 8002104:	f006 ff8e 	bl	8009024 <iprintf>

		if (strchr((char*)serial_buff, '\r') != NULL || strchr((char*)serial_buff, '\n') != NULL)
 8002108:	210d      	movs	r1, #13
 800210a:	480f      	ldr	r0, [pc, #60]	@ (8002148 <HAL_UARTEx_RxEventCallback+0x78>)
 800210c:	f007 f8fa 	bl	8009304 <strchr>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d106      	bne.n	8002124 <HAL_UARTEx_RxEventCallback+0x54>
 8002116:	210a      	movs	r1, #10
 8002118:	480b      	ldr	r0, [pc, #44]	@ (8002148 <HAL_UARTEx_RxEventCallback+0x78>)
 800211a:	f007 f8f3 	bl	8009304 <strchr>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d006      	beq.n	8002132 <HAL_UARTEx_RxEventCallback+0x62>
		{
			RaspberryPI_Request();
 8002124:	f7ff feee 	bl	8001f04 <RaspberryPI_Request>
			// Clear the buffer after processing
			memset(serial_buff, 0, SERIAL_BUFF_SIZE);
 8002128:	220a      	movs	r2, #10
 800212a:	2100      	movs	r1, #0
 800212c:	4806      	ldr	r0, [pc, #24]	@ (8002148 <HAL_UARTEx_RxEventCallback+0x78>)
 800212e:	f007 f8e1 	bl	80092f4 <memset>
		}

		// Restart DMA Reception
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, serial_buff, SERIAL_BUFF_SIZE);
 8002132:	220a      	movs	r2, #10
 8002134:	4904      	ldr	r1, [pc, #16]	@ (8002148 <HAL_UARTEx_RxEventCallback+0x78>)
 8002136:	4806      	ldr	r0, [pc, #24]	@ (8002150 <HAL_UARTEx_RxEventCallback+0x80>)
 8002138:	f004 fe45 	bl	8006dc6 <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40011000 	.word	0x40011000
 8002148:	200002d8 	.word	0x200002d8
 800214c:	0800ceac 	.word	0x0800ceac
 8002150:	20000338 	.word	0x20000338

08002154 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002158:	f000 fcf0 	bl	8002b3c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800215c:	f000 f838 	bl	80021d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002160:	f7ff fd5c 	bl	8001c1c <MX_GPIO_Init>
	MX_DMA_Init();
 8002164:	f7ff fd3a 	bl	8001bdc <MX_DMA_Init>
	MX_USART2_UART_Init();
 8002168:	f000 fbdc 	bl	8002924 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 800216c:	f000 fbb0 	bl	80028d0 <MX_USART1_UART_Init>
	MX_CAN1_Init();
 8002170:	f7ff fcb6 	bl	8001ae0 <MX_CAN1_Init>
	MX_I2C3_Init();
 8002174:	f7ff fdc0 	bl	8001cf8 <MX_I2C3_Init>
	MX_TIM2_Init();
 8002178:	f000 fb38 	bl	80027ec <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	printf("\r\n=== TP Capteurs & Reseaux ===\r\n");
 800217c:	4810      	ldr	r0, [pc, #64]	@ (80021c0 <main+0x6c>)
 800217e:	f006 ffb9 	bl	80090f4 <puts>
	// Initialize external peripherals
	if (BMP280_init() == EXIT_FAILURE) return EXIT_FAILURE;
 8002182:	f7ff fe6b 	bl	8001e5c <BMP280_init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <main+0x3c>
 800218c:	2301      	movs	r3, #1
 800218e:	e015      	b.n	80021bc <main+0x68>
	MOT_Init();
 8002190:	f7ff feaa 	bl	8001ee8 <MOT_Init>
	MPU9250_init();
 8002194:	f7ff fe7c 	bl	8001e90 <MPU9250_init>

	// Enable Timer 2 IT
	HAL_TIM_Base_Start_IT(&htim2);
 8002198:	480a      	ldr	r0, [pc, #40]	@ (80021c4 <main+0x70>)
 800219a:	f004 f913 	bl	80063c4 <HAL_TIM_Base_Start_IT>

	// Start USART1 DMA reception
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, serial_buff, SERIAL_BUFF_SIZE);
 800219e:	220a      	movs	r2, #10
 80021a0:	4909      	ldr	r1, [pc, #36]	@ (80021c8 <main+0x74>)
 80021a2:	480a      	ldr	r0, [pc, #40]	@ (80021cc <main+0x78>)
 80021a4:	f004 fe0f 	bl	8006dc6 <HAL_UARTEx_ReceiveToIdle_DMA>
	// Enable UART IDLE interrupt
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80021a8:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <main+0x78>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	4b07      	ldr	r3, [pc, #28]	@ (80021cc <main+0x78>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0210 	orr.w	r2, r2, #16
 80021b6:	60da      	str	r2, [r3, #12]
	//HAL_UART_DMAResume(&huart1);
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80021b8:	bf00      	nop
 80021ba:	e7fd      	b.n	80021b8 <main+0x64>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}
 80021bc:	4618      	mov	r0, r3
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	0800cec8 	.word	0x0800cec8
 80021c4:	200002f0 	.word	0x200002f0
 80021c8:	200002d8 	.word	0x200002d8
 80021cc:	20000338 	.word	0x20000338

080021d0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b094      	sub	sp, #80	@ 0x50
 80021d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021d6:	f107 031c 	add.w	r3, r7, #28
 80021da:	2234      	movs	r2, #52	@ 0x34
 80021dc:	2100      	movs	r1, #0
 80021de:	4618      	mov	r0, r3
 80021e0:	f007 f888 	bl	80092f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021e4:	f107 0308 	add.w	r3, r7, #8
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80021f4:	2300      	movs	r3, #0
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	4b29      	ldr	r3, [pc, #164]	@ (80022a0 <SystemClock_Config+0xd0>)
 80021fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fc:	4a28      	ldr	r2, [pc, #160]	@ (80022a0 <SystemClock_Config+0xd0>)
 80021fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002202:	6413      	str	r3, [r2, #64]	@ 0x40
 8002204:	4b26      	ldr	r3, [pc, #152]	@ (80022a0 <SystemClock_Config+0xd0>)
 8002206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002210:	2300      	movs	r3, #0
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	4b23      	ldr	r3, [pc, #140]	@ (80022a4 <SystemClock_Config+0xd4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800221c:	4a21      	ldr	r2, [pc, #132]	@ (80022a4 <SystemClock_Config+0xd4>)
 800221e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	4b1f      	ldr	r3, [pc, #124]	@ (80022a4 <SystemClock_Config+0xd4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800222c:	603b      	str	r3, [r7, #0]
 800222e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002230:	2302      	movs	r3, #2
 8002232:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002234:	2301      	movs	r3, #1
 8002236:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002238:	2310      	movs	r3, #16
 800223a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800223c:	2302      	movs	r3, #2
 800223e:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002240:	2300      	movs	r3, #0
 8002242:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002244:	2308      	movs	r3, #8
 8002246:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 80;
 8002248:	2350      	movs	r3, #80	@ 0x50
 800224a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800224c:	2302      	movs	r3, #2
 800224e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8002250:	2302      	movs	r3, #2
 8002252:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002254:	2302      	movs	r3, #2
 8002256:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002258:	f107 031c 	add.w	r3, r7, #28
 800225c:	4618      	mov	r0, r3
 800225e:	f003 fdc3 	bl	8005de8 <HAL_RCC_OscConfig>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8002268:	f000 f81e 	bl	80022a8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800226c:	230f      	movs	r3, #15
 800226e:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002270:	2302      	movs	r3, #2
 8002272:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002274:	2300      	movs	r3, #0
 8002276:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002278:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800227c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002282:	f107 0308 	add.w	r3, r7, #8
 8002286:	2102      	movs	r1, #2
 8002288:	4618      	mov	r0, r3
 800228a:	f003 fa63 	bl	8005754 <HAL_RCC_ClockConfig>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <SystemClock_Config+0xc8>
	{
		Error_Handler();
 8002294:	f000 f808 	bl	80022a8 <Error_Handler>
	}
}
 8002298:	bf00      	nop
 800229a:	3750      	adds	r7, #80	@ 0x50
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40007000 	.word	0x40007000

080022a8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022ac:	b672      	cpsid	i
}
 80022ae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <Error_Handler+0x8>

080022b4 <CAN_Init>:

/**
 * @brief Initialises the CAN communication
 */
void CAN_Init()
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	logs = FALSE;
 80022ba:	4b26      	ldr	r3, [pc, #152]	@ (8002354 <CAN_Init+0xa0>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

	status = HAL_CAN_Start(&hcan1);
 80022c0:	4825      	ldr	r0, [pc, #148]	@ (8002358 <CAN_Init+0xa4>)
 80022c2:	f000 fdcc 	bl	8002e5e <HAL_CAN_Start>
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]

	switch (status)
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	d82f      	bhi.n	8002330 <CAN_Init+0x7c>
 80022d0:	a201      	add	r2, pc, #4	@ (adr r2, 80022d8 <CAN_Init+0x24>)
 80022d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d6:	bf00      	nop
 80022d8:	080022e9 	.word	0x080022e9
 80022dc:	080022f9 	.word	0x080022f9
 80022e0:	0800230d 	.word	0x0800230d
 80022e4:	0800231d 	.word	0x0800231d
	{
	case HAL_OK:
		if (logs == TRUE) printf("CAN started successfully.\r\n");
 80022e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002354 <CAN_Init+0xa0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d129      	bne.n	8002344 <CAN_Init+0x90>
 80022f0:	481a      	ldr	r0, [pc, #104]	@ (800235c <CAN_Init+0xa8>)
 80022f2:	f006 feff 	bl	80090f4 <puts>
		break;
 80022f6:	e025      	b.n	8002344 <CAN_Init+0x90>
	case HAL_ERROR:
		if (logs == TRUE) printf("Error: CAN start failed.\r\n");
 80022f8:	4b16      	ldr	r3, [pc, #88]	@ (8002354 <CAN_Init+0xa0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d102      	bne.n	8002306 <CAN_Init+0x52>
 8002300:	4817      	ldr	r0, [pc, #92]	@ (8002360 <CAN_Init+0xac>)
 8002302:	f006 fef7 	bl	80090f4 <puts>
		Error_Handler(); // Optional: Go to error handler
 8002306:	f7ff ffcf 	bl	80022a8 <Error_Handler>
		break;
 800230a:	e01e      	b.n	800234a <CAN_Init+0x96>
	case HAL_BUSY:
		if (logs == TRUE) printf("Warning: CAN is busy. Retry later.\r\n");
 800230c:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <CAN_Init+0xa0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d119      	bne.n	8002348 <CAN_Init+0x94>
 8002314:	4813      	ldr	r0, [pc, #76]	@ (8002364 <CAN_Init+0xb0>)
 8002316:	f006 feed 	bl	80090f4 <puts>
		// Optional: add retry logic if desired
		break;
 800231a:	e015      	b.n	8002348 <CAN_Init+0x94>
	case HAL_TIMEOUT:
		if (logs == TRUE) printf("Error: CAN start timed out.\r\n");
 800231c:	4b0d      	ldr	r3, [pc, #52]	@ (8002354 <CAN_Init+0xa0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d102      	bne.n	800232a <CAN_Init+0x76>
 8002324:	4810      	ldr	r0, [pc, #64]	@ (8002368 <CAN_Init+0xb4>)
 8002326:	f006 fee5 	bl	80090f4 <puts>
		Error_Handler(); // Optional: Go to error handler
 800232a:	f7ff ffbd 	bl	80022a8 <Error_Handler>
		break;
 800232e:	e00c      	b.n	800234a <CAN_Init+0x96>
	default:
		if (logs == TRUE) printf("Unknown status returned from HAL_CAN_Start.\r\n");
 8002330:	4b08      	ldr	r3, [pc, #32]	@ (8002354 <CAN_Init+0xa0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d102      	bne.n	800233e <CAN_Init+0x8a>
 8002338:	480c      	ldr	r0, [pc, #48]	@ (800236c <CAN_Init+0xb8>)
 800233a:	f006 fedb 	bl	80090f4 <puts>
		Error_Handler(); // Optional: Go to error handler
 800233e:	f7ff ffb3 	bl	80022a8 <Error_Handler>
		break;
 8002342:	e002      	b.n	800234a <CAN_Init+0x96>
		break;
 8002344:	bf00      	nop
 8002346:	e000      	b.n	800234a <CAN_Init+0x96>
		break;
 8002348:	bf00      	nop
	}
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	200002e8 	.word	0x200002e8
 8002358:	2000025c 	.word	0x2000025c
 800235c:	0800ceec 	.word	0x0800ceec
 8002360:	0800cf08 	.word	0x0800cf08
 8002364:	0800cf24 	.word	0x0800cf24
 8002368:	0800cf48 	.word	0x0800cf48
 800236c:	0800cf68 	.word	0x0800cf68

08002370 <CAN_Send>:
 *               			destination or type of the message being sent.
 *
 * @retval None
 */
void CAN_Send(uint8_t * aData, uint32_t size, uint32_t msg_id)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b092      	sub	sp, #72	@ 0x48
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status;
	CAN_TxHeaderTypeDef header;
	uint32_t txMailbox;
	int retryCount = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	647b      	str	r3, [r7, #68]	@ 0x44
	const int maxRetries = 5;
 8002380:	2305      	movs	r3, #5
 8002382:	63fb      	str	r3, [r7, #60]	@ 0x3c

	// Initialiser le header
	header.StdId = msg_id;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	61bb      	str	r3, [r7, #24]
	header.IDE = CAN_ID_STD;
 8002388:	2300      	movs	r3, #0
 800238a:	623b      	str	r3, [r7, #32]
	header.RTR = CAN_RTR_DATA;
 800238c:	2300      	movs	r3, #0
 800238e:	627b      	str	r3, [r7, #36]	@ 0x24
	header.DLC = size;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	62bb      	str	r3, [r7, #40]	@ 0x28
	header.TransmitGlobalTime = DISABLE;
 8002394:	2300      	movs	r3, #0
 8002396:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	// Pointer vers les variables locales
	CAN_TxHeaderTypeDef *pHeader = &header;
 800239a:	f107 0318 	add.w	r3, r7, #24
 800239e:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t *pTxMailbox = &txMailbox;
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	637b      	str	r3, [r7, #52]	@ 0x34

	// Attempt to add the CAN message to the transmission mailbox with retry logic
	do {
		status = HAL_CAN_AddTxMessage(&hcan1, pHeader, aData, pTxMailbox);
 80023a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80023ac:	483e      	ldr	r0, [pc, #248]	@ (80024a8 <CAN_Send+0x138>)
 80023ae:	f000 fd9a 	bl	8002ee6 <HAL_CAN_AddTxMessage>
 80023b2:	4603      	mov	r3, r0
 80023b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		switch (status)
 80023b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d852      	bhi.n	8002466 <CAN_Send+0xf6>
 80023c0:	a201      	add	r2, pc, #4	@ (adr r2, 80023c8 <CAN_Send+0x58>)
 80023c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c6:	bf00      	nop
 80023c8:	080023d9 	.word	0x080023d9
 80023cc:	0800243f 	.word	0x0800243f
 80023d0:	08002415 	.word	0x08002415
 80023d4:	08002453 	.word	0x08002453
		{
		case HAL_OK:
			if (logs == TRUE)
 80023d8:	4b34      	ldr	r3, [pc, #208]	@ (80024ac <CAN_Send+0x13c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d15e      	bne.n	800249e <CAN_Send+0x12e>
			{
			printf("CAN message ");
 80023e0:	4833      	ldr	r0, [pc, #204]	@ (80024b0 <CAN_Send+0x140>)
 80023e2:	f006 fe1f 	bl	8009024 <iprintf>
			for (int i = 0; i<size; i++)
 80023e6:	2300      	movs	r3, #0
 80023e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80023ea:	e00a      	b.n	8002402 <CAN_Send+0x92>
				printf(" 0x%X", aData[i]);
 80023ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4413      	add	r3, r2
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	482f      	ldr	r0, [pc, #188]	@ (80024b4 <CAN_Send+0x144>)
 80023f8:	f006 fe14 	bl	8009024 <iprintf>
			for (int i = 0; i<size; i++)
 80023fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023fe:	3301      	adds	r3, #1
 8002400:	643b      	str	r3, [r7, #64]	@ 0x40
 8002402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	429a      	cmp	r2, r3
 8002408:	d8f0      	bhi.n	80023ec <CAN_Send+0x7c>
			printf(" sent successfully to  0x%X.\r\n", (unsigned int)msg_id);
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	482a      	ldr	r0, [pc, #168]	@ (80024b8 <CAN_Send+0x148>)
 800240e:	f006 fe09 	bl	8009024 <iprintf>
			}
			return;  // Exit the function if the message was sent successfully
 8002412:	e044      	b.n	800249e <CAN_Send+0x12e>

		case HAL_BUSY:
			retryCount++;
 8002414:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002416:	3301      	adds	r3, #1
 8002418:	647b      	str	r3, [r7, #68]	@ 0x44
			if (logs == TRUE) printf("Warning: CAN bus is busy, retrying (%d/%d)...\r\n", retryCount, maxRetries);
 800241a:	4b24      	ldr	r3, [pc, #144]	@ (80024ac <CAN_Send+0x13c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d104      	bne.n	800242c <CAN_Send+0xbc>
 8002422:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002424:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002426:	4825      	ldr	r0, [pc, #148]	@ (80024bc <CAN_Send+0x14c>)
 8002428:	f006 fdfc 	bl	8009024 <iprintf>
			HAL_Delay(10);  // Optional: Add a small delay between retries
 800242c:	200a      	movs	r0, #10
 800242e:	f000 fbf7 	bl	8002c20 <HAL_Delay>
			break;
 8002432:	bf00      	nop
			if (logs == TRUE) printf("Unknown status returned from HAL_CAN_AddTxMessage.\r\n");
			Error_Handler();  // Optional: Handle unexpected status
			return;
		}

	} while (status == HAL_BUSY && retryCount < maxRetries);
 8002434:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002438:	2b02      	cmp	r3, #2
 800243a:	d122      	bne.n	8002482 <CAN_Send+0x112>
 800243c:	e01d      	b.n	800247a <CAN_Send+0x10a>
			if (logs == TRUE) printf("Error: Failed to send CAN message.\r\n");
 800243e:	4b1b      	ldr	r3, [pc, #108]	@ (80024ac <CAN_Send+0x13c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d102      	bne.n	800244c <CAN_Send+0xdc>
 8002446:	481e      	ldr	r0, [pc, #120]	@ (80024c0 <CAN_Send+0x150>)
 8002448:	f006 fe54 	bl	80090f4 <puts>
			Error_Handler();  // Optional: Go to error handler for critical failure
 800244c:	f7ff ff2c 	bl	80022a8 <Error_Handler>
			return;
 8002450:	e026      	b.n	80024a0 <CAN_Send+0x130>
			if (logs == TRUE) printf("Error: CAN message send timed out.\r\n");
 8002452:	4b16      	ldr	r3, [pc, #88]	@ (80024ac <CAN_Send+0x13c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d102      	bne.n	8002460 <CAN_Send+0xf0>
 800245a:	481a      	ldr	r0, [pc, #104]	@ (80024c4 <CAN_Send+0x154>)
 800245c:	f006 fe4a 	bl	80090f4 <puts>
			Error_Handler();  // Optional: Go to error handler for timeout
 8002460:	f7ff ff22 	bl	80022a8 <Error_Handler>
			return;
 8002464:	e01c      	b.n	80024a0 <CAN_Send+0x130>
			if (logs == TRUE) printf("Unknown status returned from HAL_CAN_AddTxMessage.\r\n");
 8002466:	4b11      	ldr	r3, [pc, #68]	@ (80024ac <CAN_Send+0x13c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d102      	bne.n	8002474 <CAN_Send+0x104>
 800246e:	4816      	ldr	r0, [pc, #88]	@ (80024c8 <CAN_Send+0x158>)
 8002470:	f006 fe40 	bl	80090f4 <puts>
			Error_Handler();  // Optional: Handle unexpected status
 8002474:	f7ff ff18 	bl	80022a8 <Error_Handler>
			return;
 8002478:	e012      	b.n	80024a0 <CAN_Send+0x130>
	} while (status == HAL_BUSY && retryCount < maxRetries);
 800247a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800247c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800247e:	429a      	cmp	r2, r3
 8002480:	db91      	blt.n	80023a6 <CAN_Send+0x36>

	if (retryCount == maxRetries)
 8002482:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002486:	429a      	cmp	r2, r3
 8002488:	d10a      	bne.n	80024a0 <CAN_Send+0x130>
	{
		if (logs == TRUE) printf("Error: Exceeded maximum retries for CAN message send.\r\n");
 800248a:	4b08      	ldr	r3, [pc, #32]	@ (80024ac <CAN_Send+0x13c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d102      	bne.n	8002498 <CAN_Send+0x128>
 8002492:	480e      	ldr	r0, [pc, #56]	@ (80024cc <CAN_Send+0x15c>)
 8002494:	f006 fe2e 	bl	80090f4 <puts>
		Error_Handler();  // Optional: Go to error handler after max retries
 8002498:	f7ff ff06 	bl	80022a8 <Error_Handler>
 800249c:	e000      	b.n	80024a0 <CAN_Send+0x130>
			return;  // Exit the function if the message was sent successfully
 800249e:	bf00      	nop
	}
}
 80024a0:	3748      	adds	r7, #72	@ 0x48
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	2000025c 	.word	0x2000025c
 80024ac:	200002e8 	.word	0x200002e8
 80024b0:	0800cf98 	.word	0x0800cf98
 80024b4:	0800cfa8 	.word	0x0800cfa8
 80024b8:	0800cfb0 	.word	0x0800cfb0
 80024bc:	0800cfd0 	.word	0x0800cfd0
 80024c0:	0800d000 	.word	0x0800d000
 80024c4:	0800d024 	.word	0x0800d024
 80024c8:	0800d048 	.word	0x0800d048
 80024cc:	0800d07c 	.word	0x0800d07c

080024d0 <MOT_Set_mode>:
 * @param uint8_t direction	Rotation direction: Anti-clockwise (0x00) or Clockwise (0x01).
 * @param uint8_t steps		Number of steps, range: 0x01 to 0xFF (1 unit = 1°).
 * @param uint8_t speed		Speed of the motor, range: 0x01 = 1 ms / 1 kHz to 0xFF = 255ms / 4 Hz
 */
void MOT_Set_mode(uint8_t direction, uint8_t steps, uint8_t speed)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
 80024da:	460b      	mov	r3, r1
 80024dc:	71bb      	strb	r3, [r7, #6]
 80024de:	4613      	mov	r3, r2
 80024e0:	717b      	strb	r3, [r7, #5]
	uint8_t aData[3];

	aData[0] = direction;
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	733b      	strb	r3, [r7, #12]
	aData[1] = steps;
 80024e6:	79bb      	ldrb	r3, [r7, #6]
 80024e8:	737b      	strb	r3, [r7, #13]
	aData[2] = speed;
 80024ea:	797b      	ldrb	r3, [r7, #5]
 80024ec:	73bb      	strb	r3, [r7, #14]

	CAN_Send(aData, 3, MOT_MODE_MANUAL_ID);
 80024ee:	f107 030c 	add.w	r3, r7, #12
 80024f2:	2260      	movs	r2, #96	@ 0x60
 80024f4:	2103      	movs	r1, #3
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff ff3a 	bl	8002370 <CAN_Send>
}
 80024fc:	bf00      	nop
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <MOT_Set_origin>:

/**
 * @brief Sets the current position of the motor as the origin.
 */
void MOT_Set_origin()
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
	uint8_t aData[2];

	aData[0] = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	713b      	strb	r3, [r7, #4]
	CAN_Send(aData, 1, MOT_INIT_POS_ID);
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	2262      	movs	r2, #98	@ 0x62
 8002512:	2101      	movs	r1, #1
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff2b 	bl	8002370 <CAN_Send>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <MOT_Rotate>:
 * @brief Rotates the Step Motor of an angle in a defined direction.
 * @param uint8_t angle Angle of rotation, range: 0x01 to 0xFF (1 unit = 1°).
 * @param uint8_t sign	Angle sign, can be positive (0x00) or negative (0x01).
 */
void MOT_Rotate(uint8_t angle, uint8_t sign)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	4603      	mov	r3, r0
 800252a:	460a      	mov	r2, r1
 800252c:	71fb      	strb	r3, [r7, #7]
 800252e:	4613      	mov	r3, r2
 8002530:	71bb      	strb	r3, [r7, #6]
	uint8_t aData[2];

	if (angle < MOT_ANGLE_MIN) angle = 0x00;
	if (angle > MOT_ANGLE_MAX) angle = 0xFF;

	aData[0] = angle;
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	733b      	strb	r3, [r7, #12]
	aData[1] = sign;
 8002536:	79bb      	ldrb	r3, [r7, #6]
 8002538:	737b      	strb	r3, [r7, #13]

	CAN_Send(aData, MOT_ANGLE_SIZE, MOT_ANGLE_ID);
 800253a:	f107 030c 	add.w	r3, r7, #12
 800253e:	2261      	movs	r2, #97	@ 0x61
 8002540:	2102      	movs	r1, #2
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff ff14 	bl	8002370 <CAN_Send>
}
 8002548:	bf00      	nop
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	607b      	str	r3, [r7, #4]
 800255a:	4b10      	ldr	r3, [pc, #64]	@ (800259c <HAL_MspInit+0x4c>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255e:	4a0f      	ldr	r2, [pc, #60]	@ (800259c <HAL_MspInit+0x4c>)
 8002560:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002564:	6453      	str	r3, [r2, #68]	@ 0x44
 8002566:	4b0d      	ldr	r3, [pc, #52]	@ (800259c <HAL_MspInit+0x4c>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	603b      	str	r3, [r7, #0]
 8002576:	4b09      	ldr	r3, [pc, #36]	@ (800259c <HAL_MspInit+0x4c>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257a:	4a08      	ldr	r2, [pc, #32]	@ (800259c <HAL_MspInit+0x4c>)
 800257c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002580:	6413      	str	r3, [r2, #64]	@ 0x40
 8002582:	4b06      	ldr	r3, [pc, #24]	@ (800259c <HAL_MspInit+0x4c>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800258e:	2007      	movs	r0, #7
 8002590:	f000 fe4a 	bl	8003228 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40023800 	.word	0x40023800

080025a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025a4:	bf00      	nop
 80025a6:	e7fd      	b.n	80025a4 <NMI_Handler+0x4>

080025a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ac:	bf00      	nop
 80025ae:	e7fd      	b.n	80025ac <HardFault_Handler+0x4>

080025b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025b4:	bf00      	nop
 80025b6:	e7fd      	b.n	80025b4 <MemManage_Handler+0x4>

080025b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025bc:	bf00      	nop
 80025be:	e7fd      	b.n	80025bc <BusFault_Handler+0x4>

080025c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025c4:	bf00      	nop
 80025c6:	e7fd      	b.n	80025c4 <UsageFault_Handler+0x4>

080025c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025f6:	f000 faf3 	bl	8002be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002604:	4802      	ldr	r0, [pc, #8]	@ (8002610 <TIM2_IRQHandler+0x10>)
 8002606:	f003 ff4d 	bl	80064a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	200002f0 	.word	0x200002f0

08002614 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002618:	4802      	ldr	r0, [pc, #8]	@ (8002624 <USART1_IRQHandler+0x10>)
 800261a:	f004 fc31 	bl	8006e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000338 	.word	0x20000338

08002628 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800262c:	4802      	ldr	r0, [pc, #8]	@ (8002638 <DMA2_Stream2_IRQHandler+0x10>)
 800262e:	f000 ffd5 	bl	80035dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	200003c8 	.word	0x200003c8

0800263c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return 1;
 8002640:	2301      	movs	r3, #1
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <_kill>:

int _kill(int pid, int sig)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002656:	f006 febd 	bl	80093d4 <__errno>
 800265a:	4603      	mov	r3, r0
 800265c:	2216      	movs	r2, #22
 800265e:	601a      	str	r2, [r3, #0]
  return -1;
 8002660:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <_exit>:

void _exit (int status)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002674:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff ffe7 	bl	800264c <_kill>
  while (1) {}    /* Make sure we hang here */
 800267e:	bf00      	nop
 8002680:	e7fd      	b.n	800267e <_exit+0x12>

08002682 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b086      	sub	sp, #24
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	e00a      	b.n	80026aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002694:	f3af 8000 	nop.w
 8002698:	4601      	mov	r1, r0
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	60ba      	str	r2, [r7, #8]
 80026a0:	b2ca      	uxtb	r2, r1
 80026a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	3301      	adds	r3, #1
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	dbf0      	blt.n	8002694 <_read+0x12>
  }

  return len;
 80026b2:	687b      	ldr	r3, [r7, #4]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	e009      	b.n	80026e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	60ba      	str	r2, [r7, #8]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fba4 	bl	8001e24 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	3301      	adds	r3, #1
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	dbf1      	blt.n	80026ce <_write+0x12>
  }
  return len;
 80026ea:	687b      	ldr	r3, [r7, #4]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <_close>:

int _close(int file)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800271c:	605a      	str	r2, [r3, #4]
  return 0;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <_isatty>:

int _isatty(int file)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002734:	2301      	movs	r3, #1
}
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002742:	b480      	push	{r7}
 8002744:	b085      	sub	sp, #20
 8002746:	af00      	add	r7, sp, #0
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002764:	4a14      	ldr	r2, [pc, #80]	@ (80027b8 <_sbrk+0x5c>)
 8002766:	4b15      	ldr	r3, [pc, #84]	@ (80027bc <_sbrk+0x60>)
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002770:	4b13      	ldr	r3, [pc, #76]	@ (80027c0 <_sbrk+0x64>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d102      	bne.n	800277e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002778:	4b11      	ldr	r3, [pc, #68]	@ (80027c0 <_sbrk+0x64>)
 800277a:	4a12      	ldr	r2, [pc, #72]	@ (80027c4 <_sbrk+0x68>)
 800277c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800277e:	4b10      	ldr	r3, [pc, #64]	@ (80027c0 <_sbrk+0x64>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	429a      	cmp	r2, r3
 800278a:	d207      	bcs.n	800279c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800278c:	f006 fe22 	bl	80093d4 <__errno>
 8002790:	4603      	mov	r3, r0
 8002792:	220c      	movs	r2, #12
 8002794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002796:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800279a:	e009      	b.n	80027b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800279c:	4b08      	ldr	r3, [pc, #32]	@ (80027c0 <_sbrk+0x64>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027a2:	4b07      	ldr	r3, [pc, #28]	@ (80027c0 <_sbrk+0x64>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	4a05      	ldr	r2, [pc, #20]	@ (80027c0 <_sbrk+0x64>)
 80027ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ae:	68fb      	ldr	r3, [r7, #12]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20020000 	.word	0x20020000
 80027bc:	00000400 	.word	0x00000400
 80027c0:	200002ec 	.word	0x200002ec
 80027c4:	20000578 	.word	0x20000578

080027c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027cc:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <SystemInit+0x20>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d2:	4a05      	ldr	r2, [pc, #20]	@ (80027e8 <SystemInit+0x20>)
 80027d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027f2:	f107 0308 	add.w	r3, r7, #8
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	605a      	str	r2, [r3, #4]
 80027fc:	609a      	str	r2, [r3, #8]
 80027fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002800:	463b      	mov	r3, r7
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002808:	4b1d      	ldr	r3, [pc, #116]	@ (8002880 <MX_TIM2_Init+0x94>)
 800280a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800280e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8002810:	4b1b      	ldr	r3, [pc, #108]	@ (8002880 <MX_TIM2_Init+0x94>)
 8002812:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002816:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002818:	4b19      	ldr	r3, [pc, #100]	@ (8002880 <MX_TIM2_Init+0x94>)
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800281e:	4b18      	ldr	r3, [pc, #96]	@ (8002880 <MX_TIM2_Init+0x94>)
 8002820:	2263      	movs	r2, #99	@ 0x63
 8002822:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002824:	4b16      	ldr	r3, [pc, #88]	@ (8002880 <MX_TIM2_Init+0x94>)
 8002826:	2200      	movs	r2, #0
 8002828:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800282a:	4b15      	ldr	r3, [pc, #84]	@ (8002880 <MX_TIM2_Init+0x94>)
 800282c:	2200      	movs	r2, #0
 800282e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002830:	4813      	ldr	r0, [pc, #76]	@ (8002880 <MX_TIM2_Init+0x94>)
 8002832:	f003 fd77 	bl	8006324 <HAL_TIM_Base_Init>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800283c:	f7ff fd34 	bl	80022a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002840:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002844:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002846:	f107 0308 	add.w	r3, r7, #8
 800284a:	4619      	mov	r1, r3
 800284c:	480c      	ldr	r0, [pc, #48]	@ (8002880 <MX_TIM2_Init+0x94>)
 800284e:	f003 ff19 	bl	8006684 <HAL_TIM_ConfigClockSource>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002858:	f7ff fd26 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800285c:	2300      	movs	r3, #0
 800285e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002860:	2300      	movs	r3, #0
 8002862:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002864:	463b      	mov	r3, r7
 8002866:	4619      	mov	r1, r3
 8002868:	4805      	ldr	r0, [pc, #20]	@ (8002880 <MX_TIM2_Init+0x94>)
 800286a:	f004 f941 	bl	8006af0 <HAL_TIMEx_MasterConfigSynchronization>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002874:	f7ff fd18 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002878:	bf00      	nop
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	200002f0 	.word	0x200002f0

08002884 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002894:	d115      	bne.n	80028c2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	4b0c      	ldr	r3, [pc, #48]	@ (80028cc <HAL_TIM_Base_MspInit+0x48>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	4a0b      	ldr	r2, [pc, #44]	@ (80028cc <HAL_TIM_Base_MspInit+0x48>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028a6:	4b09      	ldr	r3, [pc, #36]	@ (80028cc <HAL_TIM_Base_MspInit+0x48>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028b2:	2200      	movs	r2, #0
 80028b4:	2100      	movs	r1, #0
 80028b6:	201c      	movs	r0, #28
 80028b8:	f000 fcc1 	bl	800323e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028bc:	201c      	movs	r0, #28
 80028be:	f000 fcda 	bl	8003276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800

080028d0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028d4:	4b11      	ldr	r3, [pc, #68]	@ (800291c <MX_USART1_UART_Init+0x4c>)
 80028d6:	4a12      	ldr	r2, [pc, #72]	@ (8002920 <MX_USART1_UART_Init+0x50>)
 80028d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028da:	4b10      	ldr	r3, [pc, #64]	@ (800291c <MX_USART1_UART_Init+0x4c>)
 80028dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028e2:	4b0e      	ldr	r3, [pc, #56]	@ (800291c <MX_USART1_UART_Init+0x4c>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028e8:	4b0c      	ldr	r3, [pc, #48]	@ (800291c <MX_USART1_UART_Init+0x4c>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028ee:	4b0b      	ldr	r3, [pc, #44]	@ (800291c <MX_USART1_UART_Init+0x4c>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028f4:	4b09      	ldr	r3, [pc, #36]	@ (800291c <MX_USART1_UART_Init+0x4c>)
 80028f6:	220c      	movs	r2, #12
 80028f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028fa:	4b08      	ldr	r3, [pc, #32]	@ (800291c <MX_USART1_UART_Init+0x4c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002900:	4b06      	ldr	r3, [pc, #24]	@ (800291c <MX_USART1_UART_Init+0x4c>)
 8002902:	2200      	movs	r2, #0
 8002904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002906:	4805      	ldr	r0, [pc, #20]	@ (800291c <MX_USART1_UART_Init+0x4c>)
 8002908:	f004 f982 	bl	8006c10 <HAL_UART_Init>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002912:	f7ff fcc9 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000338 	.word	0x20000338
 8002920:	40011000 	.word	0x40011000

08002924 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002928:	4b11      	ldr	r3, [pc, #68]	@ (8002970 <MX_USART2_UART_Init+0x4c>)
 800292a:	4a12      	ldr	r2, [pc, #72]	@ (8002974 <MX_USART2_UART_Init+0x50>)
 800292c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800292e:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <MX_USART2_UART_Init+0x4c>)
 8002930:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002934:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002936:	4b0e      	ldr	r3, [pc, #56]	@ (8002970 <MX_USART2_UART_Init+0x4c>)
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800293c:	4b0c      	ldr	r3, [pc, #48]	@ (8002970 <MX_USART2_UART_Init+0x4c>)
 800293e:	2200      	movs	r2, #0
 8002940:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002942:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <MX_USART2_UART_Init+0x4c>)
 8002944:	2200      	movs	r2, #0
 8002946:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002948:	4b09      	ldr	r3, [pc, #36]	@ (8002970 <MX_USART2_UART_Init+0x4c>)
 800294a:	220c      	movs	r2, #12
 800294c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800294e:	4b08      	ldr	r3, [pc, #32]	@ (8002970 <MX_USART2_UART_Init+0x4c>)
 8002950:	2200      	movs	r2, #0
 8002952:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002954:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <MX_USART2_UART_Init+0x4c>)
 8002956:	2200      	movs	r2, #0
 8002958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800295a:	4805      	ldr	r0, [pc, #20]	@ (8002970 <MX_USART2_UART_Init+0x4c>)
 800295c:	f004 f958 	bl	8006c10 <HAL_UART_Init>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002966:	f7ff fc9f 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000380 	.word	0x20000380
 8002974:	40004400 	.word	0x40004400

08002978 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08c      	sub	sp, #48	@ 0x30
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	f107 031c 	add.w	r3, r7, #28
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a4e      	ldr	r2, [pc, #312]	@ (8002ad0 <HAL_UART_MspInit+0x158>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d164      	bne.n	8002a64 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	61bb      	str	r3, [r7, #24]
 800299e:	4b4d      	ldr	r3, [pc, #308]	@ (8002ad4 <HAL_UART_MspInit+0x15c>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a2:	4a4c      	ldr	r2, [pc, #304]	@ (8002ad4 <HAL_UART_MspInit+0x15c>)
 80029a4:	f043 0310 	orr.w	r3, r3, #16
 80029a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029aa:	4b4a      	ldr	r3, [pc, #296]	@ (8002ad4 <HAL_UART_MspInit+0x15c>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	61bb      	str	r3, [r7, #24]
 80029b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	4b46      	ldr	r3, [pc, #280]	@ (8002ad4 <HAL_UART_MspInit+0x15c>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	4a45      	ldr	r2, [pc, #276]	@ (8002ad4 <HAL_UART_MspInit+0x15c>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029c6:	4b43      	ldr	r3, [pc, #268]	@ (8002ad4 <HAL_UART_MspInit+0x15c>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80029d2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80029d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e0:	2303      	movs	r3, #3
 80029e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029e4:	2307      	movs	r3, #7
 80029e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e8:	f107 031c 	add.w	r3, r7, #28
 80029ec:	4619      	mov	r1, r3
 80029ee:	483a      	ldr	r0, [pc, #232]	@ (8002ad8 <HAL_UART_MspInit+0x160>)
 80029f0:	f001 f85e 	bl	8003ab0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80029f4:	4b39      	ldr	r3, [pc, #228]	@ (8002adc <HAL_UART_MspInit+0x164>)
 80029f6:	4a3a      	ldr	r2, [pc, #232]	@ (8002ae0 <HAL_UART_MspInit+0x168>)
 80029f8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80029fa:	4b38      	ldr	r3, [pc, #224]	@ (8002adc <HAL_UART_MspInit+0x164>)
 80029fc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a00:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a02:	4b36      	ldr	r3, [pc, #216]	@ (8002adc <HAL_UART_MspInit+0x164>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a08:	4b34      	ldr	r3, [pc, #208]	@ (8002adc <HAL_UART_MspInit+0x164>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a0e:	4b33      	ldr	r3, [pc, #204]	@ (8002adc <HAL_UART_MspInit+0x164>)
 8002a10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a14:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a16:	4b31      	ldr	r3, [pc, #196]	@ (8002adc <HAL_UART_MspInit+0x164>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a1c:	4b2f      	ldr	r3, [pc, #188]	@ (8002adc <HAL_UART_MspInit+0x164>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002a22:	4b2e      	ldr	r3, [pc, #184]	@ (8002adc <HAL_UART_MspInit+0x164>)
 8002a24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a28:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002adc <HAL_UART_MspInit+0x164>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a30:	4b2a      	ldr	r3, [pc, #168]	@ (8002adc <HAL_UART_MspInit+0x164>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002a36:	4829      	ldr	r0, [pc, #164]	@ (8002adc <HAL_UART_MspInit+0x164>)
 8002a38:	f000 fc38 	bl	80032ac <HAL_DMA_Init>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002a42:	f7ff fc31 	bl	80022a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a24      	ldr	r2, [pc, #144]	@ (8002adc <HAL_UART_MspInit+0x164>)
 8002a4a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a4c:	4a23      	ldr	r2, [pc, #140]	@ (8002adc <HAL_UART_MspInit+0x164>)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2100      	movs	r1, #0
 8002a56:	2025      	movs	r0, #37	@ 0x25
 8002a58:	f000 fbf1 	bl	800323e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a5c:	2025      	movs	r0, #37	@ 0x25
 8002a5e:	f000 fc0a 	bl	8003276 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a62:	e030      	b.n	8002ac6 <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART2)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a1e      	ldr	r2, [pc, #120]	@ (8002ae4 <HAL_UART_MspInit+0x16c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d12b      	bne.n	8002ac6 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	4b18      	ldr	r3, [pc, #96]	@ (8002ad4 <HAL_UART_MspInit+0x15c>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	4a17      	ldr	r2, [pc, #92]	@ (8002ad4 <HAL_UART_MspInit+0x15c>)
 8002a78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a7e:	4b15      	ldr	r3, [pc, #84]	@ (8002ad4 <HAL_UART_MspInit+0x15c>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	4b11      	ldr	r3, [pc, #68]	@ (8002ad4 <HAL_UART_MspInit+0x15c>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a92:	4a10      	ldr	r2, [pc, #64]	@ (8002ad4 <HAL_UART_MspInit+0x15c>)
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad4 <HAL_UART_MspInit+0x15c>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002aa6:	230c      	movs	r3, #12
 8002aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ab6:	2307      	movs	r3, #7
 8002ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aba:	f107 031c 	add.w	r3, r7, #28
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4805      	ldr	r0, [pc, #20]	@ (8002ad8 <HAL_UART_MspInit+0x160>)
 8002ac2:	f000 fff5 	bl	8003ab0 <HAL_GPIO_Init>
}
 8002ac6:	bf00      	nop
 8002ac8:	3730      	adds	r7, #48	@ 0x30
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40011000 	.word	0x40011000
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40020000 	.word	0x40020000
 8002adc:	200003c8 	.word	0x200003c8
 8002ae0:	40026440 	.word	0x40026440
 8002ae4:	40004400 	.word	0x40004400

08002ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ae8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002aec:	f7ff fe6c 	bl	80027c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002af0:	480c      	ldr	r0, [pc, #48]	@ (8002b24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002af2:	490d      	ldr	r1, [pc, #52]	@ (8002b28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002af4:	4a0d      	ldr	r2, [pc, #52]	@ (8002b2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002af8:	e002      	b.n	8002b00 <LoopCopyDataInit>

08002afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002afe:	3304      	adds	r3, #4

08002b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b04:	d3f9      	bcc.n	8002afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b06:	4a0a      	ldr	r2, [pc, #40]	@ (8002b30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b08:	4c0a      	ldr	r4, [pc, #40]	@ (8002b34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b0c:	e001      	b.n	8002b12 <LoopFillZerobss>

08002b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b10:	3204      	adds	r2, #4

08002b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b14:	d3fb      	bcc.n	8002b0e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002b16:	f006 fc63 	bl	80093e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b1a:	f7ff fb1b 	bl	8002154 <main>
  bx  lr    
 8002b1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b28:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002b2c:	0800d580 	.word	0x0800d580
  ldr r2, =_sbss
 8002b30:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002b34:	20000578 	.word	0x20000578

08002b38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b38:	e7fe      	b.n	8002b38 <ADC_IRQHandler>
	...

08002b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b40:	4b0e      	ldr	r3, [pc, #56]	@ (8002b7c <HAL_Init+0x40>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a0d      	ldr	r2, [pc, #52]	@ (8002b7c <HAL_Init+0x40>)
 8002b46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <HAL_Init+0x40>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a0a      	ldr	r2, [pc, #40]	@ (8002b7c <HAL_Init+0x40>)
 8002b52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b58:	4b08      	ldr	r3, [pc, #32]	@ (8002b7c <HAL_Init+0x40>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a07      	ldr	r2, [pc, #28]	@ (8002b7c <HAL_Init+0x40>)
 8002b5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b64:	2003      	movs	r0, #3
 8002b66:	f000 fb5f 	bl	8003228 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	f000 f808 	bl	8002b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b70:	f7ff fcee 	bl	8002550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40023c00 	.word	0x40023c00

08002b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b88:	4b12      	ldr	r3, [pc, #72]	@ (8002bd4 <HAL_InitTick+0x54>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <HAL_InitTick+0x58>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	4619      	mov	r1, r3
 8002b92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fb77 	bl	8003292 <HAL_SYSTICK_Config>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e00e      	b.n	8002bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b0f      	cmp	r3, #15
 8002bb2:	d80a      	bhi.n	8002bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002bbc:	f000 fb3f 	bl	800323e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bc0:	4a06      	ldr	r2, [pc, #24]	@ (8002bdc <HAL_InitTick+0x5c>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e000      	b.n	8002bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	20000008 	.word	0x20000008
 8002bdc:	20000004 	.word	0x20000004

08002be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002be4:	4b06      	ldr	r3, [pc, #24]	@ (8002c00 <HAL_IncTick+0x20>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <HAL_IncTick+0x24>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4413      	add	r3, r2
 8002bf0:	4a04      	ldr	r2, [pc, #16]	@ (8002c04 <HAL_IncTick+0x24>)
 8002bf2:	6013      	str	r3, [r2, #0]
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	20000008 	.word	0x20000008
 8002c04:	20000428 	.word	0x20000428

08002c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c0c:	4b03      	ldr	r3, [pc, #12]	@ (8002c1c <HAL_GetTick+0x14>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	20000428 	.word	0x20000428

08002c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c28:	f7ff ffee 	bl	8002c08 <HAL_GetTick>
 8002c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c38:	d005      	beq.n	8002c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c64 <HAL_Delay+0x44>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4413      	add	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c46:	bf00      	nop
 8002c48:	f7ff ffde 	bl	8002c08 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d8f7      	bhi.n	8002c48 <HAL_Delay+0x28>
  {
  }
}
 8002c58:	bf00      	nop
 8002c5a:	bf00      	nop
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20000008 	.word	0x20000008

08002c68 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e0ed      	b.n	8002e56 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d102      	bne.n	8002c8c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fe ff60 	bl	8001b4c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c9c:	f7ff ffb4 	bl	8002c08 <HAL_GetTick>
 8002ca0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ca2:	e012      	b.n	8002cca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ca4:	f7ff ffb0 	bl	8002c08 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b0a      	cmp	r3, #10
 8002cb0:	d90b      	bls.n	8002cca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2205      	movs	r2, #5
 8002cc2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e0c5      	b.n	8002e56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0e5      	beq.n	8002ca4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0202 	bic.w	r2, r2, #2
 8002ce6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ce8:	f7ff ff8e 	bl	8002c08 <HAL_GetTick>
 8002cec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002cee:	e012      	b.n	8002d16 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cf0:	f7ff ff8a 	bl	8002c08 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b0a      	cmp	r3, #10
 8002cfc:	d90b      	bls.n	8002d16 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d02:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2205      	movs	r2, #5
 8002d0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e09f      	b.n	8002e56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1e5      	bne.n	8002cf0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	7e1b      	ldrb	r3, [r3, #24]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d108      	bne.n	8002d3e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	e007      	b.n	8002d4e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	7e5b      	ldrb	r3, [r3, #25]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d108      	bne.n	8002d68 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	e007      	b.n	8002d78 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d76:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	7e9b      	ldrb	r3, [r3, #26]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d108      	bne.n	8002d92 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0220 	orr.w	r2, r2, #32
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	e007      	b.n	8002da2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0220 	bic.w	r2, r2, #32
 8002da0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	7edb      	ldrb	r3, [r3, #27]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d108      	bne.n	8002dbc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0210 	bic.w	r2, r2, #16
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	e007      	b.n	8002dcc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0210 	orr.w	r2, r2, #16
 8002dca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	7f1b      	ldrb	r3, [r3, #28]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d108      	bne.n	8002de6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0208 	orr.w	r2, r2, #8
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	e007      	b.n	8002df6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0208 	bic.w	r2, r2, #8
 8002df4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	7f5b      	ldrb	r3, [r3, #29]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d108      	bne.n	8002e10 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f042 0204 	orr.w	r2, r2, #4
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	e007      	b.n	8002e20 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0204 	bic.w	r2, r2, #4
 8002e1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	ea42 0103 	orr.w	r1, r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	1e5a      	subs	r2, r3, #1
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b084      	sub	sp, #16
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d12e      	bne.n	8002ed0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2202      	movs	r2, #2
 8002e76:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0201 	bic.w	r2, r2, #1
 8002e88:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e8a:	f7ff febd 	bl	8002c08 <HAL_GetTick>
 8002e8e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e90:	e012      	b.n	8002eb8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e92:	f7ff feb9 	bl	8002c08 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b0a      	cmp	r3, #10
 8002e9e:	d90b      	bls.n	8002eb8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2205      	movs	r2, #5
 8002eb0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e012      	b.n	8002ede <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1e5      	bne.n	8002e92 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e006      	b.n	8002ede <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
  }
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b089      	sub	sp, #36	@ 0x24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002efa:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f04:	7ffb      	ldrb	r3, [r7, #31]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d003      	beq.n	8002f12 <HAL_CAN_AddTxMessage+0x2c>
 8002f0a:	7ffb      	ldrb	r3, [r7, #31]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	f040 80ad 	bne.w	800306c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10a      	bne.n	8002f32 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d105      	bne.n	8002f32 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 8095 	beq.w	800305c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	0e1b      	lsrs	r3, r3, #24
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	409a      	lsls	r2, r3
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10d      	bne.n	8002f6a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f58:	68f9      	ldr	r1, [r7, #12]
 8002f5a:	6809      	ldr	r1, [r1, #0]
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	3318      	adds	r3, #24
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	440b      	add	r3, r1
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	e00f      	b.n	8002f8a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f74:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f7a:	68f9      	ldr	r1, [r7, #12]
 8002f7c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002f7e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	3318      	adds	r3, #24
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	440b      	add	r3, r1
 8002f88:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6819      	ldr	r1, [r3, #0]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	3318      	adds	r3, #24
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	440b      	add	r3, r1
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	7d1b      	ldrb	r3, [r3, #20]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d111      	bne.n	8002fca <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	3318      	adds	r3, #24
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	6811      	ldr	r1, [r2, #0]
 8002fba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	3318      	adds	r3, #24
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	440b      	add	r3, r1
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3307      	adds	r3, #7
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	061a      	lsls	r2, r3, #24
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	3306      	adds	r3, #6
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	041b      	lsls	r3, r3, #16
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3305      	adds	r3, #5
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	021b      	lsls	r3, r3, #8
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	3204      	adds	r2, #4
 8002fea:	7812      	ldrb	r2, [r2, #0]
 8002fec:	4610      	mov	r0, r2
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	6811      	ldr	r1, [r2, #0]
 8002ff2:	ea43 0200 	orr.w	r2, r3, r0
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	440b      	add	r3, r1
 8002ffc:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003000:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3303      	adds	r3, #3
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	061a      	lsls	r2, r3, #24
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3302      	adds	r3, #2
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	041b      	lsls	r3, r3, #16
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3301      	adds	r3, #1
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	4313      	orrs	r3, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	7812      	ldrb	r2, [r2, #0]
 8003022:	4610      	mov	r0, r2
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	6811      	ldr	r1, [r2, #0]
 8003028:	ea43 0200 	orr.w	r2, r3, r0
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	440b      	add	r3, r1
 8003032:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003036:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	3318      	adds	r3, #24
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	4413      	add	r3, r2
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	6811      	ldr	r1, [r2, #0]
 800304a:	f043 0201 	orr.w	r2, r3, #1
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	3318      	adds	r3, #24
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	440b      	add	r3, r1
 8003056:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	e00e      	b.n	800307a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003060:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e006      	b.n	800307a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003070:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
  }
}
 800307a:	4618      	mov	r0, r3
 800307c:	3724      	adds	r7, #36	@ 0x24
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
	...

08003088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003098:	4b0c      	ldr	r3, [pc, #48]	@ (80030cc <__NVIC_SetPriorityGrouping+0x44>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030a4:	4013      	ands	r3, r2
 80030a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ba:	4a04      	ldr	r2, [pc, #16]	@ (80030cc <__NVIC_SetPriorityGrouping+0x44>)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	60d3      	str	r3, [r2, #12]
}
 80030c0:	bf00      	nop
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	e000ed00 	.word	0xe000ed00

080030d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d4:	4b04      	ldr	r3, [pc, #16]	@ (80030e8 <__NVIC_GetPriorityGrouping+0x18>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	0a1b      	lsrs	r3, r3, #8
 80030da:	f003 0307 	and.w	r3, r3, #7
}
 80030de:	4618      	mov	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	db0b      	blt.n	8003116 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	f003 021f 	and.w	r2, r3, #31
 8003104:	4907      	ldr	r1, [pc, #28]	@ (8003124 <__NVIC_EnableIRQ+0x38>)
 8003106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	2001      	movs	r0, #1
 800310e:	fa00 f202 	lsl.w	r2, r0, r2
 8003112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	e000e100 	.word	0xe000e100

08003128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	6039      	str	r1, [r7, #0]
 8003132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003138:	2b00      	cmp	r3, #0
 800313a:	db0a      	blt.n	8003152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	b2da      	uxtb	r2, r3
 8003140:	490c      	ldr	r1, [pc, #48]	@ (8003174 <__NVIC_SetPriority+0x4c>)
 8003142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003146:	0112      	lsls	r2, r2, #4
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	440b      	add	r3, r1
 800314c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003150:	e00a      	b.n	8003168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	b2da      	uxtb	r2, r3
 8003156:	4908      	ldr	r1, [pc, #32]	@ (8003178 <__NVIC_SetPriority+0x50>)
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	3b04      	subs	r3, #4
 8003160:	0112      	lsls	r2, r2, #4
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	440b      	add	r3, r1
 8003166:	761a      	strb	r2, [r3, #24]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000e100 	.word	0xe000e100
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800317c:	b480      	push	{r7}
 800317e:	b089      	sub	sp, #36	@ 0x24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f1c3 0307 	rsb	r3, r3, #7
 8003196:	2b04      	cmp	r3, #4
 8003198:	bf28      	it	cs
 800319a:	2304      	movcs	r3, #4
 800319c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	3304      	adds	r3, #4
 80031a2:	2b06      	cmp	r3, #6
 80031a4:	d902      	bls.n	80031ac <NVIC_EncodePriority+0x30>
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3b03      	subs	r3, #3
 80031aa:	e000      	b.n	80031ae <NVIC_EncodePriority+0x32>
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43da      	mvns	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	401a      	ands	r2, r3
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	fa01 f303 	lsl.w	r3, r1, r3
 80031ce:	43d9      	mvns	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d4:	4313      	orrs	r3, r2
         );
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3724      	adds	r7, #36	@ 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031f4:	d301      	bcc.n	80031fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031f6:	2301      	movs	r3, #1
 80031f8:	e00f      	b.n	800321a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003224 <SysTick_Config+0x40>)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3b01      	subs	r3, #1
 8003200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003202:	210f      	movs	r1, #15
 8003204:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003208:	f7ff ff8e 	bl	8003128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800320c:	4b05      	ldr	r3, [pc, #20]	@ (8003224 <SysTick_Config+0x40>)
 800320e:	2200      	movs	r2, #0
 8003210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003212:	4b04      	ldr	r3, [pc, #16]	@ (8003224 <SysTick_Config+0x40>)
 8003214:	2207      	movs	r2, #7
 8003216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	e000e010 	.word	0xe000e010

08003228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7ff ff29 	bl	8003088 <__NVIC_SetPriorityGrouping>
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800323e:	b580      	push	{r7, lr}
 8003240:	b086      	sub	sp, #24
 8003242:	af00      	add	r7, sp, #0
 8003244:	4603      	mov	r3, r0
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003250:	f7ff ff3e 	bl	80030d0 <__NVIC_GetPriorityGrouping>
 8003254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	6978      	ldr	r0, [r7, #20]
 800325c:	f7ff ff8e 	bl	800317c <NVIC_EncodePriority>
 8003260:	4602      	mov	r2, r0
 8003262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003266:	4611      	mov	r1, r2
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff ff5d 	bl	8003128 <__NVIC_SetPriority>
}
 800326e:	bf00      	nop
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	4603      	mov	r3, r0
 800327e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff ff31 	bl	80030ec <__NVIC_EnableIRQ>
}
 800328a:	bf00      	nop
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff ffa2 	bl	80031e4 <SysTick_Config>
 80032a0:	4603      	mov	r3, r0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032b8:	f7ff fca6 	bl	8002c08 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e099      	b.n	80033fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0201 	bic.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032e8:	e00f      	b.n	800330a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032ea:	f7ff fc8d 	bl	8002c08 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b05      	cmp	r3, #5
 80032f6:	d908      	bls.n	800330a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2220      	movs	r2, #32
 80032fc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2203      	movs	r2, #3
 8003302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e078      	b.n	80033fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1e8      	bne.n	80032ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	4b38      	ldr	r3, [pc, #224]	@ (8003404 <HAL_DMA_Init+0x158>)
 8003324:	4013      	ands	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003336:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003342:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800334e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003360:	2b04      	cmp	r3, #4
 8003362:	d107      	bne.n	8003374 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336c:	4313      	orrs	r3, r2
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f023 0307 	bic.w	r3, r3, #7
 800338a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	4313      	orrs	r3, r2
 8003394:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	2b04      	cmp	r3, #4
 800339c:	d117      	bne.n	80033ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00e      	beq.n	80033ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fb01 	bl	80039b8 <DMA_CheckFifoParam>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2240      	movs	r2, #64	@ 0x40
 80033c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80033ca:	2301      	movs	r3, #1
 80033cc:	e016      	b.n	80033fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fab8 	bl	800394c <DMA_CalcBaseAndBitshift>
 80033dc:	4603      	mov	r3, r0
 80033de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e4:	223f      	movs	r2, #63	@ 0x3f
 80033e6:	409a      	lsls	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	f010803f 	.word	0xf010803f

08003408 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_DMA_Start_IT+0x26>
 800342a:	2302      	movs	r3, #2
 800342c:	e040      	b.n	80034b0 <HAL_DMA_Start_IT+0xa8>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b01      	cmp	r3, #1
 8003440:	d12f      	bne.n	80034a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2202      	movs	r2, #2
 8003446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 fa4a 	bl	80038f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003460:	223f      	movs	r2, #63	@ 0x3f
 8003462:	409a      	lsls	r2, r3
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0216 	orr.w	r2, r2, #22
 8003476:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347c:	2b00      	cmp	r3, #0
 800347e:	d007      	beq.n	8003490 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0208 	orr.w	r2, r2, #8
 800348e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	e005      	b.n	80034ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034aa:	2302      	movs	r3, #2
 80034ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034c6:	f7ff fb9f 	bl	8002c08 <HAL_GetTick>
 80034ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d008      	beq.n	80034ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2280      	movs	r2, #128	@ 0x80
 80034dc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e052      	b.n	8003590 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0216 	bic.w	r2, r2, #22
 80034f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695a      	ldr	r2, [r3, #20]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003508:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	2b00      	cmp	r3, #0
 8003510:	d103      	bne.n	800351a <HAL_DMA_Abort+0x62>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003516:	2b00      	cmp	r3, #0
 8003518:	d007      	beq.n	800352a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0208 	bic.w	r2, r2, #8
 8003528:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0201 	bic.w	r2, r2, #1
 8003538:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800353a:	e013      	b.n	8003564 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800353c:	f7ff fb64 	bl	8002c08 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b05      	cmp	r3, #5
 8003548:	d90c      	bls.n	8003564 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2203      	movs	r2, #3
 8003554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e015      	b.n	8003590 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1e4      	bne.n	800353c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003576:	223f      	movs	r2, #63	@ 0x3f
 8003578:	409a      	lsls	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d004      	beq.n	80035b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2280      	movs	r2, #128	@ 0x80
 80035b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e00c      	b.n	80035d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2205      	movs	r2, #5
 80035ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0201 	bic.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035e8:	4b8e      	ldr	r3, [pc, #568]	@ (8003824 <HAL_DMA_IRQHandler+0x248>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a8e      	ldr	r2, [pc, #568]	@ (8003828 <HAL_DMA_IRQHandler+0x24c>)
 80035ee:	fba2 2303 	umull	r2, r3, r2, r3
 80035f2:	0a9b      	lsrs	r3, r3, #10
 80035f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003606:	2208      	movs	r2, #8
 8003608:	409a      	lsls	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4013      	ands	r3, r2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d01a      	beq.n	8003648 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d013      	beq.n	8003648 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0204 	bic.w	r2, r2, #4
 800362e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003634:	2208      	movs	r2, #8
 8003636:	409a      	lsls	r2, r3
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003640:	f043 0201 	orr.w	r2, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364c:	2201      	movs	r2, #1
 800364e:	409a      	lsls	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4013      	ands	r3, r2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d012      	beq.n	800367e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00b      	beq.n	800367e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366a:	2201      	movs	r2, #1
 800366c:	409a      	lsls	r2, r3
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003676:	f043 0202 	orr.w	r2, r3, #2
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003682:	2204      	movs	r2, #4
 8003684:	409a      	lsls	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	4013      	ands	r3, r2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d012      	beq.n	80036b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00b      	beq.n	80036b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a0:	2204      	movs	r2, #4
 80036a2:	409a      	lsls	r2, r3
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ac:	f043 0204 	orr.w	r2, r3, #4
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b8:	2210      	movs	r2, #16
 80036ba:	409a      	lsls	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4013      	ands	r3, r2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d043      	beq.n	800374c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d03c      	beq.n	800374c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d6:	2210      	movs	r2, #16
 80036d8:	409a      	lsls	r2, r3
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d018      	beq.n	800371e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d108      	bne.n	800370c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d024      	beq.n	800374c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	4798      	blx	r3
 800370a:	e01f      	b.n	800374c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01b      	beq.n	800374c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4798      	blx	r3
 800371c:	e016      	b.n	800374c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d107      	bne.n	800373c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0208 	bic.w	r2, r2, #8
 800373a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003750:	2220      	movs	r2, #32
 8003752:	409a      	lsls	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4013      	ands	r3, r2
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 808f 	beq.w	800387c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 8087 	beq.w	800387c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003772:	2220      	movs	r2, #32
 8003774:	409a      	lsls	r2, r3
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b05      	cmp	r3, #5
 8003784:	d136      	bne.n	80037f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0216 	bic.w	r2, r2, #22
 8003794:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695a      	ldr	r2, [r3, #20]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d103      	bne.n	80037b6 <HAL_DMA_IRQHandler+0x1da>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d007      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0208 	bic.w	r2, r2, #8
 80037c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ca:	223f      	movs	r2, #63	@ 0x3f
 80037cc:	409a      	lsls	r2, r3
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d07e      	beq.n	80038e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	4798      	blx	r3
        }
        return;
 80037f2:	e079      	b.n	80038e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d01d      	beq.n	800383e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10d      	bne.n	800382c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003814:	2b00      	cmp	r3, #0
 8003816:	d031      	beq.n	800387c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	4798      	blx	r3
 8003820:	e02c      	b.n	800387c <HAL_DMA_IRQHandler+0x2a0>
 8003822:	bf00      	nop
 8003824:	20000000 	.word	0x20000000
 8003828:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003830:	2b00      	cmp	r3, #0
 8003832:	d023      	beq.n	800387c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	4798      	blx	r3
 800383c:	e01e      	b.n	800387c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10f      	bne.n	800386c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0210 	bic.w	r2, r2, #16
 800385a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003880:	2b00      	cmp	r3, #0
 8003882:	d032      	beq.n	80038ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d022      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2205      	movs	r2, #5
 8003894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0201 	bic.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	3301      	adds	r3, #1
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d307      	bcc.n	80038c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f2      	bne.n	80038a8 <HAL_DMA_IRQHandler+0x2cc>
 80038c2:	e000      	b.n	80038c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d005      	beq.n	80038ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	4798      	blx	r3
 80038e6:	e000      	b.n	80038ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80038e8:	bf00      	nop
    }
  }
}
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800390c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b40      	cmp	r3, #64	@ 0x40
 800391c:	d108      	bne.n	8003930 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800392e:	e007      	b.n	8003940 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	60da      	str	r2, [r3, #12]
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	3b10      	subs	r3, #16
 800395c:	4a14      	ldr	r2, [pc, #80]	@ (80039b0 <DMA_CalcBaseAndBitshift+0x64>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	091b      	lsrs	r3, r3, #4
 8003964:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003966:	4a13      	ldr	r2, [pc, #76]	@ (80039b4 <DMA_CalcBaseAndBitshift+0x68>)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4413      	add	r3, r2
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2b03      	cmp	r3, #3
 8003978:	d909      	bls.n	800398e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003982:	f023 0303 	bic.w	r3, r3, #3
 8003986:	1d1a      	adds	r2, r3, #4
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	659a      	str	r2, [r3, #88]	@ 0x58
 800398c:	e007      	b.n	800399e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003996:	f023 0303 	bic.w	r3, r3, #3
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	aaaaaaab 	.word	0xaaaaaaab
 80039b4:	0800d0cc 	.word	0x0800d0cc

080039b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d11f      	bne.n	8003a12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d856      	bhi.n	8003a86 <DMA_CheckFifoParam+0xce>
 80039d8:	a201      	add	r2, pc, #4	@ (adr r2, 80039e0 <DMA_CheckFifoParam+0x28>)
 80039da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039de:	bf00      	nop
 80039e0:	080039f1 	.word	0x080039f1
 80039e4:	08003a03 	.word	0x08003a03
 80039e8:	080039f1 	.word	0x080039f1
 80039ec:	08003a87 	.word	0x08003a87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d046      	beq.n	8003a8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a00:	e043      	b.n	8003a8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a06:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a0a:	d140      	bne.n	8003a8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a10:	e03d      	b.n	8003a8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a1a:	d121      	bne.n	8003a60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d837      	bhi.n	8003a92 <DMA_CheckFifoParam+0xda>
 8003a22:	a201      	add	r2, pc, #4	@ (adr r2, 8003a28 <DMA_CheckFifoParam+0x70>)
 8003a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a28:	08003a39 	.word	0x08003a39
 8003a2c:	08003a3f 	.word	0x08003a3f
 8003a30:	08003a39 	.word	0x08003a39
 8003a34:	08003a51 	.word	0x08003a51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a3c:	e030      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d025      	beq.n	8003a96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a4e:	e022      	b.n	8003a96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a54:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a58:	d11f      	bne.n	8003a9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a5e:	e01c      	b.n	8003a9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d903      	bls.n	8003a6e <DMA_CheckFifoParam+0xb6>
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d003      	beq.n	8003a74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a6c:	e018      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
      break;
 8003a72:	e015      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00e      	beq.n	8003a9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
      break;
 8003a84:	e00b      	b.n	8003a9e <DMA_CheckFifoParam+0xe6>
      break;
 8003a86:	bf00      	nop
 8003a88:	e00a      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003a8a:	bf00      	nop
 8003a8c:	e008      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003a8e:	bf00      	nop
 8003a90:	e006      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003a92:	bf00      	nop
 8003a94:	e004      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003a96:	bf00      	nop
 8003a98:	e002      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a9a:	bf00      	nop
 8003a9c:	e000      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003a9e:	bf00      	nop
    }
  } 
  
  return status; 
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop

08003ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b089      	sub	sp, #36	@ 0x24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61fb      	str	r3, [r7, #28]
 8003aca:	e165      	b.n	8003d98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003acc:	2201      	movs	r2, #1
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4013      	ands	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	f040 8154 	bne.w	8003d92 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d005      	beq.n	8003b02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d130      	bne.n	8003b64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	43db      	mvns	r3, r3
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	4013      	ands	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b38:	2201      	movs	r2, #1
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	43db      	mvns	r3, r3
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	4013      	ands	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	f003 0201 	and.w	r2, r3, #1
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d017      	beq.n	8003ba0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	2203      	movs	r2, #3
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d123      	bne.n	8003bf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	08da      	lsrs	r2, r3, #3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3208      	adds	r2, #8
 8003bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	220f      	movs	r2, #15
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	08da      	lsrs	r2, r3, #3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3208      	adds	r2, #8
 8003bee:	69b9      	ldr	r1, [r7, #24]
 8003bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	2203      	movs	r2, #3
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 0203 	and.w	r2, r3, #3
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 80ae 	beq.w	8003d92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	4b5d      	ldr	r3, [pc, #372]	@ (8003db0 <HAL_GPIO_Init+0x300>)
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3e:	4a5c      	ldr	r2, [pc, #368]	@ (8003db0 <HAL_GPIO_Init+0x300>)
 8003c40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c44:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c46:	4b5a      	ldr	r3, [pc, #360]	@ (8003db0 <HAL_GPIO_Init+0x300>)
 8003c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c52:	4a58      	ldr	r2, [pc, #352]	@ (8003db4 <HAL_GPIO_Init+0x304>)
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	089b      	lsrs	r3, r3, #2
 8003c58:	3302      	adds	r3, #2
 8003c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	220f      	movs	r2, #15
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4013      	ands	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a4f      	ldr	r2, [pc, #316]	@ (8003db8 <HAL_GPIO_Init+0x308>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d025      	beq.n	8003cca <HAL_GPIO_Init+0x21a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a4e      	ldr	r2, [pc, #312]	@ (8003dbc <HAL_GPIO_Init+0x30c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d01f      	beq.n	8003cc6 <HAL_GPIO_Init+0x216>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a4d      	ldr	r2, [pc, #308]	@ (8003dc0 <HAL_GPIO_Init+0x310>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d019      	beq.n	8003cc2 <HAL_GPIO_Init+0x212>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a4c      	ldr	r2, [pc, #304]	@ (8003dc4 <HAL_GPIO_Init+0x314>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <HAL_GPIO_Init+0x20e>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a4b      	ldr	r2, [pc, #300]	@ (8003dc8 <HAL_GPIO_Init+0x318>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00d      	beq.n	8003cba <HAL_GPIO_Init+0x20a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a4a      	ldr	r2, [pc, #296]	@ (8003dcc <HAL_GPIO_Init+0x31c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d007      	beq.n	8003cb6 <HAL_GPIO_Init+0x206>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a49      	ldr	r2, [pc, #292]	@ (8003dd0 <HAL_GPIO_Init+0x320>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d101      	bne.n	8003cb2 <HAL_GPIO_Init+0x202>
 8003cae:	2306      	movs	r3, #6
 8003cb0:	e00c      	b.n	8003ccc <HAL_GPIO_Init+0x21c>
 8003cb2:	2307      	movs	r3, #7
 8003cb4:	e00a      	b.n	8003ccc <HAL_GPIO_Init+0x21c>
 8003cb6:	2305      	movs	r3, #5
 8003cb8:	e008      	b.n	8003ccc <HAL_GPIO_Init+0x21c>
 8003cba:	2304      	movs	r3, #4
 8003cbc:	e006      	b.n	8003ccc <HAL_GPIO_Init+0x21c>
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e004      	b.n	8003ccc <HAL_GPIO_Init+0x21c>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e002      	b.n	8003ccc <HAL_GPIO_Init+0x21c>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <HAL_GPIO_Init+0x21c>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	69fa      	ldr	r2, [r7, #28]
 8003cce:	f002 0203 	and.w	r2, r2, #3
 8003cd2:	0092      	lsls	r2, r2, #2
 8003cd4:	4093      	lsls	r3, r2
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cdc:	4935      	ldr	r1, [pc, #212]	@ (8003db4 <HAL_GPIO_Init+0x304>)
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	089b      	lsrs	r3, r3, #2
 8003ce2:	3302      	adds	r3, #2
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cea:	4b3a      	ldr	r3, [pc, #232]	@ (8003dd4 <HAL_GPIO_Init+0x324>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d0e:	4a31      	ldr	r2, [pc, #196]	@ (8003dd4 <HAL_GPIO_Init+0x324>)
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d14:	4b2f      	ldr	r3, [pc, #188]	@ (8003dd4 <HAL_GPIO_Init+0x324>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4013      	ands	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d38:	4a26      	ldr	r2, [pc, #152]	@ (8003dd4 <HAL_GPIO_Init+0x324>)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d3e:	4b25      	ldr	r3, [pc, #148]	@ (8003dd4 <HAL_GPIO_Init+0x324>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	43db      	mvns	r3, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d62:	4a1c      	ldr	r2, [pc, #112]	@ (8003dd4 <HAL_GPIO_Init+0x324>)
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d68:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd4 <HAL_GPIO_Init+0x324>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d8c:	4a11      	ldr	r2, [pc, #68]	@ (8003dd4 <HAL_GPIO_Init+0x324>)
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	3301      	adds	r3, #1
 8003d96:	61fb      	str	r3, [r7, #28]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	2b0f      	cmp	r3, #15
 8003d9c:	f67f ae96 	bls.w	8003acc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003da0:	bf00      	nop
 8003da2:	bf00      	nop
 8003da4:	3724      	adds	r7, #36	@ 0x24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40023800 	.word	0x40023800
 8003db4:	40013800 	.word	0x40013800
 8003db8:	40020000 	.word	0x40020000
 8003dbc:	40020400 	.word	0x40020400
 8003dc0:	40020800 	.word	0x40020800
 8003dc4:	40020c00 	.word	0x40020c00
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	40021400 	.word	0x40021400
 8003dd0:	40021800 	.word	0x40021800
 8003dd4:	40013c00 	.word	0x40013c00

08003dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	807b      	strh	r3, [r7, #2]
 8003de4:	4613      	mov	r3, r2
 8003de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003de8:	787b      	ldrb	r3, [r7, #1]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dee:	887a      	ldrh	r2, [r7, #2]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003df4:	e003      	b.n	8003dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003df6:	887b      	ldrh	r3, [r7, #2]
 8003df8:	041a      	lsls	r2, r3, #16
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	619a      	str	r2, [r3, #24]
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
	...

08003e0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e12b      	b.n	8004076 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fd ff8e 	bl	8001d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2224      	movs	r2, #36	@ 0x24
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0201 	bic.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e70:	f001 fd62 	bl	8005938 <HAL_RCC_GetPCLK1Freq>
 8003e74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	4a81      	ldr	r2, [pc, #516]	@ (8004080 <HAL_I2C_Init+0x274>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d807      	bhi.n	8003e90 <HAL_I2C_Init+0x84>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4a80      	ldr	r2, [pc, #512]	@ (8004084 <HAL_I2C_Init+0x278>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	bf94      	ite	ls
 8003e88:	2301      	movls	r3, #1
 8003e8a:	2300      	movhi	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	e006      	b.n	8003e9e <HAL_I2C_Init+0x92>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4a7d      	ldr	r2, [pc, #500]	@ (8004088 <HAL_I2C_Init+0x27c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	bf94      	ite	ls
 8003e98:	2301      	movls	r3, #1
 8003e9a:	2300      	movhi	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e0e7      	b.n	8004076 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4a78      	ldr	r2, [pc, #480]	@ (800408c <HAL_I2C_Init+0x280>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	0c9b      	lsrs	r3, r3, #18
 8003eb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	4a6a      	ldr	r2, [pc, #424]	@ (8004080 <HAL_I2C_Init+0x274>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d802      	bhi.n	8003ee0 <HAL_I2C_Init+0xd4>
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	3301      	adds	r3, #1
 8003ede:	e009      	b.n	8003ef4 <HAL_I2C_Init+0xe8>
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003ee6:	fb02 f303 	mul.w	r3, r2, r3
 8003eea:	4a69      	ldr	r2, [pc, #420]	@ (8004090 <HAL_I2C_Init+0x284>)
 8003eec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef0:	099b      	lsrs	r3, r3, #6
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003f06:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	495c      	ldr	r1, [pc, #368]	@ (8004080 <HAL_I2C_Init+0x274>)
 8003f10:	428b      	cmp	r3, r1
 8003f12:	d819      	bhi.n	8003f48 <HAL_I2C_Init+0x13c>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	1e59      	subs	r1, r3, #1
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f22:	1c59      	adds	r1, r3, #1
 8003f24:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f28:	400b      	ands	r3, r1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <HAL_I2C_Init+0x138>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	1e59      	subs	r1, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f42:	e051      	b.n	8003fe8 <HAL_I2C_Init+0x1dc>
 8003f44:	2304      	movs	r3, #4
 8003f46:	e04f      	b.n	8003fe8 <HAL_I2C_Init+0x1dc>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d111      	bne.n	8003f74 <HAL_I2C_Init+0x168>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	1e58      	subs	r0, r3, #1
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6859      	ldr	r1, [r3, #4]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	440b      	add	r3, r1
 8003f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f62:	3301      	adds	r3, #1
 8003f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	bf0c      	ite	eq
 8003f6c:	2301      	moveq	r3, #1
 8003f6e:	2300      	movne	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	e012      	b.n	8003f9a <HAL_I2C_Init+0x18e>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	1e58      	subs	r0, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6859      	ldr	r1, [r3, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	0099      	lsls	r1, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf0c      	ite	eq
 8003f94:	2301      	moveq	r3, #1
 8003f96:	2300      	movne	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_I2C_Init+0x196>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e022      	b.n	8003fe8 <HAL_I2C_Init+0x1dc>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10e      	bne.n	8003fc8 <HAL_I2C_Init+0x1bc>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	1e58      	subs	r0, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6859      	ldr	r1, [r3, #4]
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	440b      	add	r3, r1
 8003fb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fc6:	e00f      	b.n	8003fe8 <HAL_I2C_Init+0x1dc>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	1e58      	subs	r0, r3, #1
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6859      	ldr	r1, [r3, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	0099      	lsls	r1, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fde:	3301      	adds	r3, #1
 8003fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fe4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	6809      	ldr	r1, [r1, #0]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69da      	ldr	r2, [r3, #28]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004016:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6911      	ldr	r1, [r2, #16]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	68d2      	ldr	r2, [r2, #12]
 8004022:	4311      	orrs	r1, r2
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6812      	ldr	r2, [r2, #0]
 8004028:	430b      	orrs	r3, r1
 800402a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695a      	ldr	r2, [r3, #20]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2220      	movs	r2, #32
 8004062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	000186a0 	.word	0x000186a0
 8004084:	001e847f 	.word	0x001e847f
 8004088:	003d08ff 	.word	0x003d08ff
 800408c:	431bde83 	.word	0x431bde83
 8004090:	10624dd3 	.word	0x10624dd3

08004094 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af02      	add	r7, sp, #8
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	607a      	str	r2, [r7, #4]
 800409e:	461a      	mov	r2, r3
 80040a0:	460b      	mov	r3, r1
 80040a2:	817b      	strh	r3, [r7, #10]
 80040a4:	4613      	mov	r3, r2
 80040a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040a8:	f7fe fdae 	bl	8002c08 <HAL_GetTick>
 80040ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b20      	cmp	r3, #32
 80040b8:	f040 80e0 	bne.w	800427c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	2319      	movs	r3, #25
 80040c2:	2201      	movs	r2, #1
 80040c4:	4970      	ldr	r1, [pc, #448]	@ (8004288 <HAL_I2C_Master_Transmit+0x1f4>)
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f001 f90e 	bl	80052e8 <I2C_WaitOnFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80040d2:	2302      	movs	r3, #2
 80040d4:	e0d3      	b.n	800427e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d101      	bne.n	80040e4 <HAL_I2C_Master_Transmit+0x50>
 80040e0:	2302      	movs	r3, #2
 80040e2:	e0cc      	b.n	800427e <HAL_I2C_Master_Transmit+0x1ea>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d007      	beq.n	800410a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f042 0201 	orr.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004118:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2221      	movs	r2, #33	@ 0x21
 800411e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2210      	movs	r2, #16
 8004126:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	893a      	ldrh	r2, [r7, #8]
 800413a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	4a50      	ldr	r2, [pc, #320]	@ (800428c <HAL_I2C_Master_Transmit+0x1f8>)
 800414a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800414c:	8979      	ldrh	r1, [r7, #10]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	6a3a      	ldr	r2, [r7, #32]
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 fdfa 	bl	8004d4c <I2C_MasterRequestWrite>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e08d      	b.n	800427e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004162:	2300      	movs	r3, #0
 8004164:	613b      	str	r3, [r7, #16]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004178:	e066      	b.n	8004248 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	6a39      	ldr	r1, [r7, #32]
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f001 f9cc 	bl	800551c <I2C_WaitOnTXEFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00d      	beq.n	80041a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418e:	2b04      	cmp	r3, #4
 8004190:	d107      	bne.n	80041a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e06b      	b.n	800427e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	781a      	ldrb	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d11b      	bne.n	800421c <HAL_I2C_Master_Transmit+0x188>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d017      	beq.n	800421c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f0:	781a      	ldrb	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004206:	b29b      	uxth	r3, r3
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	6a39      	ldr	r1, [r7, #32]
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f001 f9c3 	bl	80055ac <I2C_WaitOnBTFFlagUntilTimeout>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00d      	beq.n	8004248 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004230:	2b04      	cmp	r3, #4
 8004232:	d107      	bne.n	8004244 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004242:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e01a      	b.n	800427e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424c:	2b00      	cmp	r3, #0
 800424e:	d194      	bne.n	800417a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800425e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	e000      	b.n	800427e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800427c:	2302      	movs	r3, #2
  }
}
 800427e:	4618      	mov	r0, r3
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	00100002 	.word	0x00100002
 800428c:	ffff0000 	.word	0xffff0000

08004290 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08c      	sub	sp, #48	@ 0x30
 8004294:	af02      	add	r7, sp, #8
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	607a      	str	r2, [r7, #4]
 800429a:	461a      	mov	r2, r3
 800429c:	460b      	mov	r3, r1
 800429e:	817b      	strh	r3, [r7, #10]
 80042a0:	4613      	mov	r3, r2
 80042a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042a4:	f7fe fcb0 	bl	8002c08 <HAL_GetTick>
 80042a8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b20      	cmp	r3, #32
 80042b4:	f040 8217 	bne.w	80046e6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	2319      	movs	r3, #25
 80042be:	2201      	movs	r2, #1
 80042c0:	497c      	ldr	r1, [pc, #496]	@ (80044b4 <HAL_I2C_Master_Receive+0x224>)
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f001 f810 	bl	80052e8 <I2C_WaitOnFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80042ce:	2302      	movs	r3, #2
 80042d0:	e20a      	b.n	80046e8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_I2C_Master_Receive+0x50>
 80042dc:	2302      	movs	r3, #2
 80042de:	e203      	b.n	80046e8 <HAL_I2C_Master_Receive+0x458>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d007      	beq.n	8004306 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0201 	orr.w	r2, r2, #1
 8004304:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004314:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2222      	movs	r2, #34	@ 0x22
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2210      	movs	r2, #16
 8004322:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	893a      	ldrh	r2, [r7, #8]
 8004336:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4a5c      	ldr	r2, [pc, #368]	@ (80044b8 <HAL_I2C_Master_Receive+0x228>)
 8004346:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004348:	8979      	ldrh	r1, [r7, #10]
 800434a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 fd7e 	bl	8004e50 <I2C_MasterRequestRead>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e1c4      	b.n	80046e8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004362:	2b00      	cmp	r3, #0
 8004364:	d113      	bne.n	800438e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004366:	2300      	movs	r3, #0
 8004368:	623b      	str	r3, [r7, #32]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	623b      	str	r3, [r7, #32]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	623b      	str	r3, [r7, #32]
 800437a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	e198      	b.n	80046c0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004392:	2b01      	cmp	r3, #1
 8004394:	d11b      	bne.n	80043ce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	61fb      	str	r3, [r7, #28]
 80043ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	e178      	b.n	80046c0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d11b      	bne.n	800440e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043f6:	2300      	movs	r3, #0
 80043f8:	61bb      	str	r3, [r7, #24]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	61bb      	str	r3, [r7, #24]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	61bb      	str	r3, [r7, #24]
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	e158      	b.n	80046c0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800441c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800441e:	2300      	movs	r3, #0
 8004420:	617b      	str	r3, [r7, #20]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	617b      	str	r3, [r7, #20]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004434:	e144      	b.n	80046c0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800443a:	2b03      	cmp	r3, #3
 800443c:	f200 80f1 	bhi.w	8004622 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004444:	2b01      	cmp	r3, #1
 8004446:	d123      	bne.n	8004490 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800444a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f001 f8f5 	bl	800563c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e145      	b.n	80046e8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691a      	ldr	r2, [r3, #16]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800448e:	e117      	b.n	80046c0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004494:	2b02      	cmp	r3, #2
 8004496:	d14e      	bne.n	8004536 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449e:	2200      	movs	r2, #0
 80044a0:	4906      	ldr	r1, [pc, #24]	@ (80044bc <HAL_I2C_Master_Receive+0x22c>)
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 ff20 	bl	80052e8 <I2C_WaitOnFlagUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d008      	beq.n	80044c0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e11a      	b.n	80046e8 <HAL_I2C_Master_Receive+0x458>
 80044b2:	bf00      	nop
 80044b4:	00100002 	.word	0x00100002
 80044b8:	ffff0000 	.word	0xffff0000
 80044bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ec:	3b01      	subs	r3, #1
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452a:	b29b      	uxth	r3, r3
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004534:	e0c4      	b.n	80046c0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453c:	2200      	movs	r2, #0
 800453e:	496c      	ldr	r1, [pc, #432]	@ (80046f0 <HAL_I2C_Master_Receive+0x460>)
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 fed1 	bl	80052e8 <I2C_WaitOnFlagUntilTimeout>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e0cb      	b.n	80046e8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800455e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	691a      	ldr	r2, [r3, #16]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800457c:	3b01      	subs	r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004598:	2200      	movs	r2, #0
 800459a:	4955      	ldr	r1, [pc, #340]	@ (80046f0 <HAL_I2C_Master_Receive+0x460>)
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 fea3 	bl	80052e8 <I2C_WaitOnFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e09d      	b.n	80046e8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691a      	ldr	r2, [r3, #16]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	691a      	ldr	r2, [r3, #16]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004600:	1c5a      	adds	r2, r3, #1
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800460a:	3b01      	subs	r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004616:	b29b      	uxth	r3, r3
 8004618:	3b01      	subs	r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004620:	e04e      	b.n	80046c0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004624:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f001 f808 	bl	800563c <I2C_WaitOnRXNEFlagUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e058      	b.n	80046e8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004652:	3b01      	subs	r3, #1
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800465e:	b29b      	uxth	r3, r3
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	2b04      	cmp	r3, #4
 8004674:	d124      	bne.n	80046c0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800467a:	2b03      	cmp	r3, #3
 800467c:	d107      	bne.n	800468e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800468c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f47f aeb6 	bne.w	8004436 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	e000      	b.n	80046e8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80046e6:	2302      	movs	r3, #2
  }
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3728      	adds	r7, #40	@ 0x28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	00010004 	.word	0x00010004

080046f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af02      	add	r7, sp, #8
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	4608      	mov	r0, r1
 80046fe:	4611      	mov	r1, r2
 8004700:	461a      	mov	r2, r3
 8004702:	4603      	mov	r3, r0
 8004704:	817b      	strh	r3, [r7, #10]
 8004706:	460b      	mov	r3, r1
 8004708:	813b      	strh	r3, [r7, #8]
 800470a:	4613      	mov	r3, r2
 800470c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800470e:	f7fe fa7b 	bl	8002c08 <HAL_GetTick>
 8004712:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b20      	cmp	r3, #32
 800471e:	f040 80d9 	bne.w	80048d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	2319      	movs	r3, #25
 8004728:	2201      	movs	r2, #1
 800472a:	496d      	ldr	r1, [pc, #436]	@ (80048e0 <HAL_I2C_Mem_Write+0x1ec>)
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 fddb 	bl	80052e8 <I2C_WaitOnFlagUntilTimeout>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004738:	2302      	movs	r3, #2
 800473a:	e0cc      	b.n	80048d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004742:	2b01      	cmp	r3, #1
 8004744:	d101      	bne.n	800474a <HAL_I2C_Mem_Write+0x56>
 8004746:	2302      	movs	r3, #2
 8004748:	e0c5      	b.n	80048d6 <HAL_I2C_Mem_Write+0x1e2>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b01      	cmp	r3, #1
 800475e:	d007      	beq.n	8004770 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0201 	orr.w	r2, r2, #1
 800476e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800477e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2221      	movs	r2, #33	@ 0x21
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2240      	movs	r2, #64	@ 0x40
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6a3a      	ldr	r2, [r7, #32]
 800479a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80047a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4a4d      	ldr	r2, [pc, #308]	@ (80048e4 <HAL_I2C_Mem_Write+0x1f0>)
 80047b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047b2:	88f8      	ldrh	r0, [r7, #6]
 80047b4:	893a      	ldrh	r2, [r7, #8]
 80047b6:	8979      	ldrh	r1, [r7, #10]
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	9301      	str	r3, [sp, #4]
 80047bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	4603      	mov	r3, r0
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 fc12 	bl	8004fec <I2C_RequestMemoryWrite>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d052      	beq.n	8004874 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e081      	b.n	80048d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 fea0 	bl	800551c <I2C_WaitOnTXEFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00d      	beq.n	80047fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d107      	bne.n	80047fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e06b      	b.n	80048d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004802:	781a      	ldrb	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b04      	cmp	r3, #4
 800483a:	d11b      	bne.n	8004874 <HAL_I2C_Mem_Write+0x180>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004840:	2b00      	cmp	r3, #0
 8004842:	d017      	beq.n	8004874 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004848:	781a      	ldrb	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1aa      	bne.n	80047d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 fe93 	bl	80055ac <I2C_WaitOnBTFFlagUntilTimeout>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00d      	beq.n	80048a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004890:	2b04      	cmp	r3, #4
 8004892:	d107      	bne.n	80048a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e016      	b.n	80048d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80048d0:	2300      	movs	r3, #0
 80048d2:	e000      	b.n	80048d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80048d4:	2302      	movs	r3, #2
  }
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	00100002 	.word	0x00100002
 80048e4:	ffff0000 	.word	0xffff0000

080048e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08c      	sub	sp, #48	@ 0x30
 80048ec:	af02      	add	r7, sp, #8
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	4608      	mov	r0, r1
 80048f2:	4611      	mov	r1, r2
 80048f4:	461a      	mov	r2, r3
 80048f6:	4603      	mov	r3, r0
 80048f8:	817b      	strh	r3, [r7, #10]
 80048fa:	460b      	mov	r3, r1
 80048fc:	813b      	strh	r3, [r7, #8]
 80048fe:	4613      	mov	r3, r2
 8004900:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004902:	f7fe f981 	bl	8002c08 <HAL_GetTick>
 8004906:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b20      	cmp	r3, #32
 8004912:	f040 8214 	bne.w	8004d3e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	2319      	movs	r3, #25
 800491c:	2201      	movs	r2, #1
 800491e:	497b      	ldr	r1, [pc, #492]	@ (8004b0c <HAL_I2C_Mem_Read+0x224>)
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 fce1 	bl	80052e8 <I2C_WaitOnFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800492c:	2302      	movs	r3, #2
 800492e:	e207      	b.n	8004d40 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004936:	2b01      	cmp	r3, #1
 8004938:	d101      	bne.n	800493e <HAL_I2C_Mem_Read+0x56>
 800493a:	2302      	movs	r3, #2
 800493c:	e200      	b.n	8004d40 <HAL_I2C_Mem_Read+0x458>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b01      	cmp	r3, #1
 8004952:	d007      	beq.n	8004964 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0201 	orr.w	r2, r2, #1
 8004962:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004972:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2222      	movs	r2, #34	@ 0x22
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2240      	movs	r2, #64	@ 0x40
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800498e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004994:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4a5b      	ldr	r2, [pc, #364]	@ (8004b10 <HAL_I2C_Mem_Read+0x228>)
 80049a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049a6:	88f8      	ldrh	r0, [r7, #6]
 80049a8:	893a      	ldrh	r2, [r7, #8]
 80049aa:	8979      	ldrh	r1, [r7, #10]
 80049ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ae:	9301      	str	r3, [sp, #4]
 80049b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	4603      	mov	r3, r0
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 fbae 	bl	8005118 <I2C_RequestMemoryRead>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e1bc      	b.n	8004d40 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d113      	bne.n	80049f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ce:	2300      	movs	r3, #0
 80049d0:	623b      	str	r3, [r7, #32]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	623b      	str	r3, [r7, #32]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	623b      	str	r3, [r7, #32]
 80049e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	e190      	b.n	8004d18 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d11b      	bne.n	8004a36 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61fb      	str	r3, [r7, #28]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	61fb      	str	r3, [r7, #28]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	61fb      	str	r3, [r7, #28]
 8004a22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	e170      	b.n	8004d18 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d11b      	bne.n	8004a76 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61bb      	str	r3, [r7, #24]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	61bb      	str	r3, [r7, #24]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	61bb      	str	r3, [r7, #24]
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	e150      	b.n	8004d18 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a76:	2300      	movs	r3, #0
 8004a78:	617b      	str	r3, [r7, #20]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004a8c:	e144      	b.n	8004d18 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	f200 80f1 	bhi.w	8004c7a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d123      	bne.n	8004ae8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 fdc9 	bl	800563c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e145      	b.n	8004d40 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	691a      	ldr	r2, [r3, #16]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac6:	1c5a      	adds	r2, r3, #1
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ae6:	e117      	b.n	8004d18 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d14e      	bne.n	8004b8e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af6:	2200      	movs	r2, #0
 8004af8:	4906      	ldr	r1, [pc, #24]	@ (8004b14 <HAL_I2C_Mem_Read+0x22c>)
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 fbf4 	bl	80052e8 <I2C_WaitOnFlagUntilTimeout>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d008      	beq.n	8004b18 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e11a      	b.n	8004d40 <HAL_I2C_Mem_Read+0x458>
 8004b0a:	bf00      	nop
 8004b0c:	00100002 	.word	0x00100002
 8004b10:	ffff0000 	.word	0xffff0000
 8004b14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691a      	ldr	r2, [r3, #16]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b44:	3b01      	subs	r3, #1
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b8c:	e0c4      	b.n	8004d18 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b94:	2200      	movs	r2, #0
 8004b96:	496c      	ldr	r1, [pc, #432]	@ (8004d48 <HAL_I2C_Mem_Read+0x460>)
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 fba5 	bl	80052e8 <I2C_WaitOnFlagUntilTimeout>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e0cb      	b.n	8004d40 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	691a      	ldr	r2, [r3, #16]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bca:	1c5a      	adds	r2, r3, #1
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	4955      	ldr	r1, [pc, #340]	@ (8004d48 <HAL_I2C_Mem_Read+0x460>)
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f000 fb77 	bl	80052e8 <I2C_WaitOnFlagUntilTimeout>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e09d      	b.n	8004d40 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	691a      	ldr	r2, [r3, #16]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	691a      	ldr	r2, [r3, #16]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c50:	b2d2      	uxtb	r2, r2
 8004c52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c78:	e04e      	b.n	8004d18 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c7c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 fcdc 	bl	800563c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e058      	b.n	8004d40 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	691a      	ldr	r2, [r3, #16]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004caa:	3b01      	subs	r3, #1
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	f003 0304 	and.w	r3, r3, #4
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d124      	bne.n	8004d18 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d107      	bne.n	8004ce6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ce4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	691a      	ldr	r2, [r3, #16]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf0:	b2d2      	uxtb	r2, r2
 8004cf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf8:	1c5a      	adds	r2, r3, #1
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f47f aeb6 	bne.w	8004a8e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2220      	movs	r2, #32
 8004d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	e000      	b.n	8004d40 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004d3e:	2302      	movs	r3, #2
  }
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3728      	adds	r7, #40	@ 0x28
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	00010004 	.word	0x00010004

08004d4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af02      	add	r7, sp, #8
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	607a      	str	r2, [r7, #4]
 8004d56:	603b      	str	r3, [r7, #0]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d006      	beq.n	8004d76 <I2C_MasterRequestWrite+0x2a>
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d003      	beq.n	8004d76 <I2C_MasterRequestWrite+0x2a>
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d74:	d108      	bne.n	8004d88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	e00b      	b.n	8004da0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8c:	2b12      	cmp	r3, #18
 8004d8e:	d107      	bne.n	8004da0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f000 fa9b 	bl	80052e8 <I2C_WaitOnFlagUntilTimeout>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00d      	beq.n	8004dd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dc6:	d103      	bne.n	8004dd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e035      	b.n	8004e40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ddc:	d108      	bne.n	8004df0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dde:	897b      	ldrh	r3, [r7, #10]
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	461a      	mov	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004dec:	611a      	str	r2, [r3, #16]
 8004dee:	e01b      	b.n	8004e28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004df0:	897b      	ldrh	r3, [r7, #10]
 8004df2:	11db      	asrs	r3, r3, #7
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	f003 0306 	and.w	r3, r3, #6
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	f063 030f 	orn	r3, r3, #15
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	490e      	ldr	r1, [pc, #56]	@ (8004e48 <I2C_MasterRequestWrite+0xfc>)
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 fae4 	bl	80053dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e010      	b.n	8004e40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e1e:	897b      	ldrh	r3, [r7, #10]
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	4907      	ldr	r1, [pc, #28]	@ (8004e4c <I2C_MasterRequestWrite+0x100>)
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 fad4 	bl	80053dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	00010008 	.word	0x00010008
 8004e4c:	00010002 	.word	0x00010002

08004e50 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af02      	add	r7, sp, #8
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	607a      	str	r2, [r7, #4]
 8004e5a:	603b      	str	r3, [r7, #0]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e64:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e74:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d006      	beq.n	8004e8a <I2C_MasterRequestRead+0x3a>
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d003      	beq.n	8004e8a <I2C_MasterRequestRead+0x3a>
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e88:	d108      	bne.n	8004e9c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	e00b      	b.n	8004eb4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea0:	2b11      	cmp	r3, #17
 8004ea2:	d107      	bne.n	8004eb4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004eb2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 fa11 	bl	80052e8 <I2C_WaitOnFlagUntilTimeout>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00d      	beq.n	8004ee8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eda:	d103      	bne.n	8004ee4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ee2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e079      	b.n	8004fdc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ef0:	d108      	bne.n	8004f04 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ef2:	897b      	ldrh	r3, [r7, #10]
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	611a      	str	r2, [r3, #16]
 8004f02:	e05f      	b.n	8004fc4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f04:	897b      	ldrh	r3, [r7, #10]
 8004f06:	11db      	asrs	r3, r3, #7
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	f003 0306 	and.w	r3, r3, #6
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	f063 030f 	orn	r3, r3, #15
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	4930      	ldr	r1, [pc, #192]	@ (8004fe4 <I2C_MasterRequestRead+0x194>)
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 fa5a 	bl	80053dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e054      	b.n	8004fdc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f32:	897b      	ldrh	r3, [r7, #10]
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	4929      	ldr	r1, [pc, #164]	@ (8004fe8 <I2C_MasterRequestRead+0x198>)
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 fa4a 	bl	80053dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e044      	b.n	8004fdc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f52:	2300      	movs	r3, #0
 8004f54:	613b      	str	r3, [r7, #16]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f76:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 f9af 	bl	80052e8 <I2C_WaitOnFlagUntilTimeout>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00d      	beq.n	8004fac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f9e:	d103      	bne.n	8004fa8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fa6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e017      	b.n	8004fdc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004fac:	897b      	ldrh	r3, [r7, #10]
 8004fae:	11db      	asrs	r3, r3, #7
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	f003 0306 	and.w	r3, r3, #6
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	f063 030e 	orn	r3, r3, #14
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	4907      	ldr	r1, [pc, #28]	@ (8004fe8 <I2C_MasterRequestRead+0x198>)
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 fa06 	bl	80053dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3718      	adds	r7, #24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	00010008 	.word	0x00010008
 8004fe8:	00010002 	.word	0x00010002

08004fec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b088      	sub	sp, #32
 8004ff0:	af02      	add	r7, sp, #8
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	4608      	mov	r0, r1
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	817b      	strh	r3, [r7, #10]
 8004ffe:	460b      	mov	r3, r1
 8005000:	813b      	strh	r3, [r7, #8]
 8005002:	4613      	mov	r3, r2
 8005004:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005014:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	2200      	movs	r2, #0
 800501e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 f960 	bl	80052e8 <I2C_WaitOnFlagUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00d      	beq.n	800504a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005038:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800503c:	d103      	bne.n	8005046 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005044:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e05f      	b.n	800510a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800504a:	897b      	ldrh	r3, [r7, #10]
 800504c:	b2db      	uxtb	r3, r3
 800504e:	461a      	mov	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005058:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800505a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505c:	6a3a      	ldr	r2, [r7, #32]
 800505e:	492d      	ldr	r1, [pc, #180]	@ (8005114 <I2C_RequestMemoryWrite+0x128>)
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 f9bb 	bl	80053dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e04c      	b.n	800510a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005070:	2300      	movs	r3, #0
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	617b      	str	r3, [r7, #20]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005088:	6a39      	ldr	r1, [r7, #32]
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 fa46 	bl	800551c <I2C_WaitOnTXEFlagUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00d      	beq.n	80050b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509a:	2b04      	cmp	r3, #4
 800509c:	d107      	bne.n	80050ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e02b      	b.n	800510a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050b2:	88fb      	ldrh	r3, [r7, #6]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d105      	bne.n	80050c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050b8:	893b      	ldrh	r3, [r7, #8]
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	611a      	str	r2, [r3, #16]
 80050c2:	e021      	b.n	8005108 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050c4:	893b      	ldrh	r3, [r7, #8]
 80050c6:	0a1b      	lsrs	r3, r3, #8
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050d4:	6a39      	ldr	r1, [r7, #32]
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 fa20 	bl	800551c <I2C_WaitOnTXEFlagUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00d      	beq.n	80050fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d107      	bne.n	80050fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e005      	b.n	800510a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050fe:	893b      	ldrh	r3, [r7, #8]
 8005100:	b2da      	uxtb	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	00010002 	.word	0x00010002

08005118 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b088      	sub	sp, #32
 800511c:	af02      	add	r7, sp, #8
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	4608      	mov	r0, r1
 8005122:	4611      	mov	r1, r2
 8005124:	461a      	mov	r2, r3
 8005126:	4603      	mov	r3, r0
 8005128:	817b      	strh	r3, [r7, #10]
 800512a:	460b      	mov	r3, r1
 800512c:	813b      	strh	r3, [r7, #8]
 800512e:	4613      	mov	r3, r2
 8005130:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005140:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005150:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	2200      	movs	r2, #0
 800515a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 f8c2 	bl	80052e8 <I2C_WaitOnFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00d      	beq.n	8005186 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005174:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005178:	d103      	bne.n	8005182 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005180:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e0aa      	b.n	80052dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005186:	897b      	ldrh	r3, [r7, #10]
 8005188:	b2db      	uxtb	r3, r3
 800518a:	461a      	mov	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005194:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005198:	6a3a      	ldr	r2, [r7, #32]
 800519a:	4952      	ldr	r1, [pc, #328]	@ (80052e4 <I2C_RequestMemoryRead+0x1cc>)
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 f91d 	bl	80053dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e097      	b.n	80052dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ac:	2300      	movs	r3, #0
 80051ae:	617b      	str	r3, [r7, #20]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051c4:	6a39      	ldr	r1, [r7, #32]
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f000 f9a8 	bl	800551c <I2C_WaitOnTXEFlagUntilTimeout>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00d      	beq.n	80051ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d107      	bne.n	80051ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e076      	b.n	80052dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d105      	bne.n	8005200 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051f4:	893b      	ldrh	r3, [r7, #8]
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	611a      	str	r2, [r3, #16]
 80051fe:	e021      	b.n	8005244 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005200:	893b      	ldrh	r3, [r7, #8]
 8005202:	0a1b      	lsrs	r3, r3, #8
 8005204:	b29b      	uxth	r3, r3
 8005206:	b2da      	uxtb	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800520e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005210:	6a39      	ldr	r1, [r7, #32]
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 f982 	bl	800551c <I2C_WaitOnTXEFlagUntilTimeout>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00d      	beq.n	800523a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005222:	2b04      	cmp	r3, #4
 8005224:	d107      	bne.n	8005236 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005234:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e050      	b.n	80052dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800523a:	893b      	ldrh	r3, [r7, #8]
 800523c:	b2da      	uxtb	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005246:	6a39      	ldr	r1, [r7, #32]
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 f967 	bl	800551c <I2C_WaitOnTXEFlagUntilTimeout>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00d      	beq.n	8005270 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005258:	2b04      	cmp	r3, #4
 800525a:	d107      	bne.n	800526c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800526a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e035      	b.n	80052dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800527e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	2200      	movs	r2, #0
 8005288:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 f82b 	bl	80052e8 <I2C_WaitOnFlagUntilTimeout>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00d      	beq.n	80052b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052a6:	d103      	bne.n	80052b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e013      	b.n	80052dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80052b4:	897b      	ldrh	r3, [r7, #10]
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	f043 0301 	orr.w	r3, r3, #1
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c6:	6a3a      	ldr	r2, [r7, #32]
 80052c8:	4906      	ldr	r1, [pc, #24]	@ (80052e4 <I2C_RequestMemoryRead+0x1cc>)
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 f886 	bl	80053dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e000      	b.n	80052dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	00010002 	.word	0x00010002

080052e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	603b      	str	r3, [r7, #0]
 80052f4:	4613      	mov	r3, r2
 80052f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052f8:	e048      	b.n	800538c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005300:	d044      	beq.n	800538c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005302:	f7fd fc81 	bl	8002c08 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	429a      	cmp	r2, r3
 8005310:	d302      	bcc.n	8005318 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d139      	bne.n	800538c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	0c1b      	lsrs	r3, r3, #16
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b01      	cmp	r3, #1
 8005320:	d10d      	bne.n	800533e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	43da      	mvns	r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	4013      	ands	r3, r2
 800532e:	b29b      	uxth	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	bf0c      	ite	eq
 8005334:	2301      	moveq	r3, #1
 8005336:	2300      	movne	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	461a      	mov	r2, r3
 800533c:	e00c      	b.n	8005358 <I2C_WaitOnFlagUntilTimeout+0x70>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	43da      	mvns	r2, r3
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	4013      	ands	r3, r2
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	bf0c      	ite	eq
 8005350:	2301      	moveq	r3, #1
 8005352:	2300      	movne	r3, #0
 8005354:	b2db      	uxtb	r3, r3
 8005356:	461a      	mov	r2, r3
 8005358:	79fb      	ldrb	r3, [r7, #7]
 800535a:	429a      	cmp	r2, r3
 800535c:	d116      	bne.n	800538c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2220      	movs	r2, #32
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005378:	f043 0220 	orr.w	r2, r3, #32
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e023      	b.n	80053d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	0c1b      	lsrs	r3, r3, #16
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b01      	cmp	r3, #1
 8005394:	d10d      	bne.n	80053b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	43da      	mvns	r2, r3
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	4013      	ands	r3, r2
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	bf0c      	ite	eq
 80053a8:	2301      	moveq	r3, #1
 80053aa:	2300      	movne	r3, #0
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	461a      	mov	r2, r3
 80053b0:	e00c      	b.n	80053cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	43da      	mvns	r2, r3
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	4013      	ands	r3, r2
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	bf0c      	ite	eq
 80053c4:	2301      	moveq	r3, #1
 80053c6:	2300      	movne	r3, #0
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	461a      	mov	r2, r3
 80053cc:	79fb      	ldrb	r3, [r7, #7]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d093      	beq.n	80052fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
 80053e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053ea:	e071      	b.n	80054d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053fa:	d123      	bne.n	8005444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800540a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005414:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2220      	movs	r2, #32
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005430:	f043 0204 	orr.w	r2, r3, #4
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e067      	b.n	8005514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800544a:	d041      	beq.n	80054d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800544c:	f7fd fbdc 	bl	8002c08 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	429a      	cmp	r2, r3
 800545a:	d302      	bcc.n	8005462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d136      	bne.n	80054d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	0c1b      	lsrs	r3, r3, #16
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b01      	cmp	r3, #1
 800546a:	d10c      	bne.n	8005486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	43da      	mvns	r2, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4013      	ands	r3, r2
 8005478:	b29b      	uxth	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	bf14      	ite	ne
 800547e:	2301      	movne	r3, #1
 8005480:	2300      	moveq	r3, #0
 8005482:	b2db      	uxtb	r3, r3
 8005484:	e00b      	b.n	800549e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	43da      	mvns	r2, r3
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	4013      	ands	r3, r2
 8005492:	b29b      	uxth	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	bf14      	ite	ne
 8005498:	2301      	movne	r3, #1
 800549a:	2300      	moveq	r3, #0
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d016      	beq.n	80054d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2220      	movs	r2, #32
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054bc:	f043 0220 	orr.w	r2, r3, #32
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e021      	b.n	8005514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	0c1b      	lsrs	r3, r3, #16
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d10c      	bne.n	80054f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	43da      	mvns	r2, r3
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	4013      	ands	r3, r2
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	bf14      	ite	ne
 80054ec:	2301      	movne	r3, #1
 80054ee:	2300      	moveq	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	e00b      	b.n	800550c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	43da      	mvns	r2, r3
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	4013      	ands	r3, r2
 8005500:	b29b      	uxth	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	bf14      	ite	ne
 8005506:	2301      	movne	r3, #1
 8005508:	2300      	moveq	r3, #0
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	f47f af6d 	bne.w	80053ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005528:	e034      	b.n	8005594 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 f8e3 	bl	80056f6 <I2C_IsAcknowledgeFailed>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e034      	b.n	80055a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005540:	d028      	beq.n	8005594 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005542:	f7fd fb61 	bl	8002c08 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	429a      	cmp	r2, r3
 8005550:	d302      	bcc.n	8005558 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d11d      	bne.n	8005594 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005562:	2b80      	cmp	r3, #128	@ 0x80
 8005564:	d016      	beq.n	8005594 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2220      	movs	r2, #32
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005580:	f043 0220 	orr.w	r2, r3, #32
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e007      	b.n	80055a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800559e:	2b80      	cmp	r3, #128	@ 0x80
 80055a0:	d1c3      	bne.n	800552a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055b8:	e034      	b.n	8005624 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 f89b 	bl	80056f6 <I2C_IsAcknowledgeFailed>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e034      	b.n	8005634 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055d0:	d028      	beq.n	8005624 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d2:	f7fd fb19 	bl	8002c08 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d302      	bcc.n	80055e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d11d      	bne.n	8005624 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	f003 0304 	and.w	r3, r3, #4
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d016      	beq.n	8005624 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2220      	movs	r2, #32
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005610:	f043 0220 	orr.w	r2, r3, #32
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e007      	b.n	8005634 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	f003 0304 	and.w	r3, r3, #4
 800562e:	2b04      	cmp	r3, #4
 8005630:	d1c3      	bne.n	80055ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005648:	e049      	b.n	80056de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	f003 0310 	and.w	r3, r3, #16
 8005654:	2b10      	cmp	r3, #16
 8005656:	d119      	bne.n	800568c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f06f 0210 	mvn.w	r2, #16
 8005660:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e030      	b.n	80056ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800568c:	f7fd fabc 	bl	8002c08 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	429a      	cmp	r2, r3
 800569a:	d302      	bcc.n	80056a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d11d      	bne.n	80056de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ac:	2b40      	cmp	r3, #64	@ 0x40
 80056ae:	d016      	beq.n	80056de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ca:	f043 0220 	orr.w	r2, r3, #32
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e007      	b.n	80056ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e8:	2b40      	cmp	r3, #64	@ 0x40
 80056ea:	d1ae      	bne.n	800564a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b083      	sub	sp, #12
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005708:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800570c:	d11b      	bne.n	8005746 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005716:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2220      	movs	r2, #32
 8005722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005732:	f043 0204 	orr.w	r2, r3, #4
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e000      	b.n	8005748 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e0cc      	b.n	8005902 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005768:	4b68      	ldr	r3, [pc, #416]	@ (800590c <HAL_RCC_ClockConfig+0x1b8>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 030f 	and.w	r3, r3, #15
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	429a      	cmp	r2, r3
 8005774:	d90c      	bls.n	8005790 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005776:	4b65      	ldr	r3, [pc, #404]	@ (800590c <HAL_RCC_ClockConfig+0x1b8>)
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800577e:	4b63      	ldr	r3, [pc, #396]	@ (800590c <HAL_RCC_ClockConfig+0x1b8>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 030f 	and.w	r3, r3, #15
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	429a      	cmp	r2, r3
 800578a:	d001      	beq.n	8005790 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e0b8      	b.n	8005902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d020      	beq.n	80057de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d005      	beq.n	80057b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057a8:	4b59      	ldr	r3, [pc, #356]	@ (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	4a58      	ldr	r2, [pc, #352]	@ (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80057ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80057b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0308 	and.w	r3, r3, #8
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d005      	beq.n	80057cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057c0:	4b53      	ldr	r3, [pc, #332]	@ (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	4a52      	ldr	r2, [pc, #328]	@ (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80057c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80057ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057cc:	4b50      	ldr	r3, [pc, #320]	@ (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	494d      	ldr	r1, [pc, #308]	@ (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d044      	beq.n	8005874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d107      	bne.n	8005802 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057f2:	4b47      	ldr	r3, [pc, #284]	@ (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d119      	bne.n	8005832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e07f      	b.n	8005902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2b02      	cmp	r3, #2
 8005808:	d003      	beq.n	8005812 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800580e:	2b03      	cmp	r3, #3
 8005810:	d107      	bne.n	8005822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005812:	4b3f      	ldr	r3, [pc, #252]	@ (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d109      	bne.n	8005832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e06f      	b.n	8005902 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005822:	4b3b      	ldr	r3, [pc, #236]	@ (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e067      	b.n	8005902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005832:	4b37      	ldr	r3, [pc, #220]	@ (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f023 0203 	bic.w	r2, r3, #3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	4934      	ldr	r1, [pc, #208]	@ (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 8005840:	4313      	orrs	r3, r2
 8005842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005844:	f7fd f9e0 	bl	8002c08 <HAL_GetTick>
 8005848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800584a:	e00a      	b.n	8005862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800584c:	f7fd f9dc 	bl	8002c08 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800585a:	4293      	cmp	r3, r2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e04f      	b.n	8005902 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005862:	4b2b      	ldr	r3, [pc, #172]	@ (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 020c 	and.w	r2, r3, #12
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	429a      	cmp	r2, r3
 8005872:	d1eb      	bne.n	800584c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005874:	4b25      	ldr	r3, [pc, #148]	@ (800590c <HAL_RCC_ClockConfig+0x1b8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 030f 	and.w	r3, r3, #15
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d20c      	bcs.n	800589c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005882:	4b22      	ldr	r3, [pc, #136]	@ (800590c <HAL_RCC_ClockConfig+0x1b8>)
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800588a:	4b20      	ldr	r3, [pc, #128]	@ (800590c <HAL_RCC_ClockConfig+0x1b8>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 030f 	and.w	r3, r3, #15
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d001      	beq.n	800589c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e032      	b.n	8005902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d008      	beq.n	80058ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058a8:	4b19      	ldr	r3, [pc, #100]	@ (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	4916      	ldr	r1, [pc, #88]	@ (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0308 	and.w	r3, r3, #8
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058c6:	4b12      	ldr	r3, [pc, #72]	@ (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	490e      	ldr	r1, [pc, #56]	@ (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058da:	f000 f855 	bl	8005988 <HAL_RCC_GetSysClockFreq>
 80058de:	4602      	mov	r2, r0
 80058e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	091b      	lsrs	r3, r3, #4
 80058e6:	f003 030f 	and.w	r3, r3, #15
 80058ea:	490a      	ldr	r1, [pc, #40]	@ (8005914 <HAL_RCC_ClockConfig+0x1c0>)
 80058ec:	5ccb      	ldrb	r3, [r1, r3]
 80058ee:	fa22 f303 	lsr.w	r3, r2, r3
 80058f2:	4a09      	ldr	r2, [pc, #36]	@ (8005918 <HAL_RCC_ClockConfig+0x1c4>)
 80058f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80058f6:	4b09      	ldr	r3, [pc, #36]	@ (800591c <HAL_RCC_ClockConfig+0x1c8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fd f940 	bl	8002b80 <HAL_InitTick>

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	40023c00 	.word	0x40023c00
 8005910:	40023800 	.word	0x40023800
 8005914:	0800d0b4 	.word	0x0800d0b4
 8005918:	20000000 	.word	0x20000000
 800591c:	20000004 	.word	0x20000004

08005920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005920:	b480      	push	{r7}
 8005922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005924:	4b03      	ldr	r3, [pc, #12]	@ (8005934 <HAL_RCC_GetHCLKFreq+0x14>)
 8005926:	681b      	ldr	r3, [r3, #0]
}
 8005928:	4618      	mov	r0, r3
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	20000000 	.word	0x20000000

08005938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800593c:	f7ff fff0 	bl	8005920 <HAL_RCC_GetHCLKFreq>
 8005940:	4602      	mov	r2, r0
 8005942:	4b05      	ldr	r3, [pc, #20]	@ (8005958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	0a9b      	lsrs	r3, r3, #10
 8005948:	f003 0307 	and.w	r3, r3, #7
 800594c:	4903      	ldr	r1, [pc, #12]	@ (800595c <HAL_RCC_GetPCLK1Freq+0x24>)
 800594e:	5ccb      	ldrb	r3, [r1, r3]
 8005950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005954:	4618      	mov	r0, r3
 8005956:	bd80      	pop	{r7, pc}
 8005958:	40023800 	.word	0x40023800
 800595c:	0800d0c4 	.word	0x0800d0c4

08005960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005964:	f7ff ffdc 	bl	8005920 <HAL_RCC_GetHCLKFreq>
 8005968:	4602      	mov	r2, r0
 800596a:	4b05      	ldr	r3, [pc, #20]	@ (8005980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	0b5b      	lsrs	r3, r3, #13
 8005970:	f003 0307 	and.w	r3, r3, #7
 8005974:	4903      	ldr	r1, [pc, #12]	@ (8005984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005976:	5ccb      	ldrb	r3, [r1, r3]
 8005978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800597c:	4618      	mov	r0, r3
 800597e:	bd80      	pop	{r7, pc}
 8005980:	40023800 	.word	0x40023800
 8005984:	0800d0c4 	.word	0x0800d0c4

08005988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800598c:	b0ae      	sub	sp, #184	@ 0xb8
 800598e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800599c:	2300      	movs	r3, #0
 800599e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059ae:	4bcb      	ldr	r3, [pc, #812]	@ (8005cdc <HAL_RCC_GetSysClockFreq+0x354>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f003 030c 	and.w	r3, r3, #12
 80059b6:	2b0c      	cmp	r3, #12
 80059b8:	f200 8206 	bhi.w	8005dc8 <HAL_RCC_GetSysClockFreq+0x440>
 80059bc:	a201      	add	r2, pc, #4	@ (adr r2, 80059c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80059be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c2:	bf00      	nop
 80059c4:	080059f9 	.word	0x080059f9
 80059c8:	08005dc9 	.word	0x08005dc9
 80059cc:	08005dc9 	.word	0x08005dc9
 80059d0:	08005dc9 	.word	0x08005dc9
 80059d4:	08005a01 	.word	0x08005a01
 80059d8:	08005dc9 	.word	0x08005dc9
 80059dc:	08005dc9 	.word	0x08005dc9
 80059e0:	08005dc9 	.word	0x08005dc9
 80059e4:	08005a09 	.word	0x08005a09
 80059e8:	08005dc9 	.word	0x08005dc9
 80059ec:	08005dc9 	.word	0x08005dc9
 80059f0:	08005dc9 	.word	0x08005dc9
 80059f4:	08005bf9 	.word	0x08005bf9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059f8:	4bb9      	ldr	r3, [pc, #740]	@ (8005ce0 <HAL_RCC_GetSysClockFreq+0x358>)
 80059fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80059fe:	e1e7      	b.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a00:	4bb8      	ldr	r3, [pc, #736]	@ (8005ce4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005a02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005a06:	e1e3      	b.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a08:	4bb4      	ldr	r3, [pc, #720]	@ (8005cdc <HAL_RCC_GetSysClockFreq+0x354>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a14:	4bb1      	ldr	r3, [pc, #708]	@ (8005cdc <HAL_RCC_GetSysClockFreq+0x354>)
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d071      	beq.n	8005b04 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a20:	4bae      	ldr	r3, [pc, #696]	@ (8005cdc <HAL_RCC_GetSysClockFreq+0x354>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	099b      	lsrs	r3, r3, #6
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a2c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005a30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a46:	4622      	mov	r2, r4
 8005a48:	462b      	mov	r3, r5
 8005a4a:	f04f 0000 	mov.w	r0, #0
 8005a4e:	f04f 0100 	mov.w	r1, #0
 8005a52:	0159      	lsls	r1, r3, #5
 8005a54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a58:	0150      	lsls	r0, r2, #5
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	4621      	mov	r1, r4
 8005a60:	1a51      	subs	r1, r2, r1
 8005a62:	6439      	str	r1, [r7, #64]	@ 0x40
 8005a64:	4629      	mov	r1, r5
 8005a66:	eb63 0301 	sbc.w	r3, r3, r1
 8005a6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	f04f 0300 	mov.w	r3, #0
 8005a74:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005a78:	4649      	mov	r1, r9
 8005a7a:	018b      	lsls	r3, r1, #6
 8005a7c:	4641      	mov	r1, r8
 8005a7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a82:	4641      	mov	r1, r8
 8005a84:	018a      	lsls	r2, r1, #6
 8005a86:	4641      	mov	r1, r8
 8005a88:	1a51      	subs	r1, r2, r1
 8005a8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a8c:	4649      	mov	r1, r9
 8005a8e:	eb63 0301 	sbc.w	r3, r3, r1
 8005a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a94:	f04f 0200 	mov.w	r2, #0
 8005a98:	f04f 0300 	mov.w	r3, #0
 8005a9c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005aa0:	4649      	mov	r1, r9
 8005aa2:	00cb      	lsls	r3, r1, #3
 8005aa4:	4641      	mov	r1, r8
 8005aa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aaa:	4641      	mov	r1, r8
 8005aac:	00ca      	lsls	r2, r1, #3
 8005aae:	4610      	mov	r0, r2
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	4622      	mov	r2, r4
 8005ab6:	189b      	adds	r3, r3, r2
 8005ab8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aba:	462b      	mov	r3, r5
 8005abc:	460a      	mov	r2, r1
 8005abe:	eb42 0303 	adc.w	r3, r2, r3
 8005ac2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ac4:	f04f 0200 	mov.w	r2, #0
 8005ac8:	f04f 0300 	mov.w	r3, #0
 8005acc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	024b      	lsls	r3, r1, #9
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ada:	4621      	mov	r1, r4
 8005adc:	024a      	lsls	r2, r1, #9
 8005ade:	4610      	mov	r0, r2
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005aec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005af0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005af4:	f7fb f8f8 	bl	8000ce8 <__aeabi_uldivmod>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	4613      	mov	r3, r2
 8005afe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b02:	e067      	b.n	8005bd4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b04:	4b75      	ldr	r3, [pc, #468]	@ (8005cdc <HAL_RCC_GetSysClockFreq+0x354>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	099b      	lsrs	r3, r3, #6
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b10:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005b14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b1e:	2300      	movs	r3, #0
 8005b20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005b22:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005b26:	4622      	mov	r2, r4
 8005b28:	462b      	mov	r3, r5
 8005b2a:	f04f 0000 	mov.w	r0, #0
 8005b2e:	f04f 0100 	mov.w	r1, #0
 8005b32:	0159      	lsls	r1, r3, #5
 8005b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b38:	0150      	lsls	r0, r2, #5
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	4621      	mov	r1, r4
 8005b40:	1a51      	subs	r1, r2, r1
 8005b42:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005b44:	4629      	mov	r1, r5
 8005b46:	eb63 0301 	sbc.w	r3, r3, r1
 8005b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b4c:	f04f 0200 	mov.w	r2, #0
 8005b50:	f04f 0300 	mov.w	r3, #0
 8005b54:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005b58:	4649      	mov	r1, r9
 8005b5a:	018b      	lsls	r3, r1, #6
 8005b5c:	4641      	mov	r1, r8
 8005b5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b62:	4641      	mov	r1, r8
 8005b64:	018a      	lsls	r2, r1, #6
 8005b66:	4641      	mov	r1, r8
 8005b68:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b6c:	4649      	mov	r1, r9
 8005b6e:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b72:	f04f 0200 	mov.w	r2, #0
 8005b76:	f04f 0300 	mov.w	r3, #0
 8005b7a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b7e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b86:	4692      	mov	sl, r2
 8005b88:	469b      	mov	fp, r3
 8005b8a:	4623      	mov	r3, r4
 8005b8c:	eb1a 0303 	adds.w	r3, sl, r3
 8005b90:	623b      	str	r3, [r7, #32]
 8005b92:	462b      	mov	r3, r5
 8005b94:	eb4b 0303 	adc.w	r3, fp, r3
 8005b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b9a:	f04f 0200 	mov.w	r2, #0
 8005b9e:	f04f 0300 	mov.w	r3, #0
 8005ba2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005ba6:	4629      	mov	r1, r5
 8005ba8:	028b      	lsls	r3, r1, #10
 8005baa:	4621      	mov	r1, r4
 8005bac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bb0:	4621      	mov	r1, r4
 8005bb2:	028a      	lsls	r2, r1, #10
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	673b      	str	r3, [r7, #112]	@ 0x70
 8005bc0:	677a      	str	r2, [r7, #116]	@ 0x74
 8005bc2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005bc6:	f7fb f88f 	bl	8000ce8 <__aeabi_uldivmod>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	4613      	mov	r3, r2
 8005bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005bd4:	4b41      	ldr	r3, [pc, #260]	@ (8005cdc <HAL_RCC_GetSysClockFreq+0x354>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	0c1b      	lsrs	r3, r3, #16
 8005bda:	f003 0303 	and.w	r3, r3, #3
 8005bde:	3301      	adds	r3, #1
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005be6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005bea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005bf6:	e0eb      	b.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bf8:	4b38      	ldr	r3, [pc, #224]	@ (8005cdc <HAL_RCC_GetSysClockFreq+0x354>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c04:	4b35      	ldr	r3, [pc, #212]	@ (8005cdc <HAL_RCC_GetSysClockFreq+0x354>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d06b      	beq.n	8005ce8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c10:	4b32      	ldr	r3, [pc, #200]	@ (8005cdc <HAL_RCC_GetSysClockFreq+0x354>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	099b      	lsrs	r3, r3, #6
 8005c16:	2200      	movs	r2, #0
 8005c18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c22:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c24:	2300      	movs	r3, #0
 8005c26:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c28:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005c2c:	4622      	mov	r2, r4
 8005c2e:	462b      	mov	r3, r5
 8005c30:	f04f 0000 	mov.w	r0, #0
 8005c34:	f04f 0100 	mov.w	r1, #0
 8005c38:	0159      	lsls	r1, r3, #5
 8005c3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c3e:	0150      	lsls	r0, r2, #5
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	4621      	mov	r1, r4
 8005c46:	1a51      	subs	r1, r2, r1
 8005c48:	61b9      	str	r1, [r7, #24]
 8005c4a:	4629      	mov	r1, r5
 8005c4c:	eb63 0301 	sbc.w	r3, r3, r1
 8005c50:	61fb      	str	r3, [r7, #28]
 8005c52:	f04f 0200 	mov.w	r2, #0
 8005c56:	f04f 0300 	mov.w	r3, #0
 8005c5a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005c5e:	4659      	mov	r1, fp
 8005c60:	018b      	lsls	r3, r1, #6
 8005c62:	4651      	mov	r1, sl
 8005c64:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c68:	4651      	mov	r1, sl
 8005c6a:	018a      	lsls	r2, r1, #6
 8005c6c:	4651      	mov	r1, sl
 8005c6e:	ebb2 0801 	subs.w	r8, r2, r1
 8005c72:	4659      	mov	r1, fp
 8005c74:	eb63 0901 	sbc.w	r9, r3, r1
 8005c78:	f04f 0200 	mov.w	r2, #0
 8005c7c:	f04f 0300 	mov.w	r3, #0
 8005c80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c8c:	4690      	mov	r8, r2
 8005c8e:	4699      	mov	r9, r3
 8005c90:	4623      	mov	r3, r4
 8005c92:	eb18 0303 	adds.w	r3, r8, r3
 8005c96:	613b      	str	r3, [r7, #16]
 8005c98:	462b      	mov	r3, r5
 8005c9a:	eb49 0303 	adc.w	r3, r9, r3
 8005c9e:	617b      	str	r3, [r7, #20]
 8005ca0:	f04f 0200 	mov.w	r2, #0
 8005ca4:	f04f 0300 	mov.w	r3, #0
 8005ca8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005cac:	4629      	mov	r1, r5
 8005cae:	024b      	lsls	r3, r1, #9
 8005cb0:	4621      	mov	r1, r4
 8005cb2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005cb6:	4621      	mov	r1, r4
 8005cb8:	024a      	lsls	r2, r1, #9
 8005cba:	4610      	mov	r0, r2
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cc6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005cc8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ccc:	f7fb f80c 	bl	8000ce8 <__aeabi_uldivmod>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cda:	e065      	b.n	8005da8 <HAL_RCC_GetSysClockFreq+0x420>
 8005cdc:	40023800 	.word	0x40023800
 8005ce0:	00f42400 	.word	0x00f42400
 8005ce4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ce8:	4b3d      	ldr	r3, [pc, #244]	@ (8005de0 <HAL_RCC_GetSysClockFreq+0x458>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	099b      	lsrs	r3, r3, #6
 8005cee:	2200      	movs	r2, #0
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005cf8:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cfe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005d02:	4642      	mov	r2, r8
 8005d04:	464b      	mov	r3, r9
 8005d06:	f04f 0000 	mov.w	r0, #0
 8005d0a:	f04f 0100 	mov.w	r1, #0
 8005d0e:	0159      	lsls	r1, r3, #5
 8005d10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d14:	0150      	lsls	r0, r2, #5
 8005d16:	4602      	mov	r2, r0
 8005d18:	460b      	mov	r3, r1
 8005d1a:	4641      	mov	r1, r8
 8005d1c:	1a51      	subs	r1, r2, r1
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	4649      	mov	r1, r9
 8005d22:	eb63 0301 	sbc.w	r3, r3, r1
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	f04f 0200 	mov.w	r2, #0
 8005d2c:	f04f 0300 	mov.w	r3, #0
 8005d30:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005d34:	4659      	mov	r1, fp
 8005d36:	018b      	lsls	r3, r1, #6
 8005d38:	4651      	mov	r1, sl
 8005d3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d3e:	4651      	mov	r1, sl
 8005d40:	018a      	lsls	r2, r1, #6
 8005d42:	4651      	mov	r1, sl
 8005d44:	1a54      	subs	r4, r2, r1
 8005d46:	4659      	mov	r1, fp
 8005d48:	eb63 0501 	sbc.w	r5, r3, r1
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	f04f 0300 	mov.w	r3, #0
 8005d54:	00eb      	lsls	r3, r5, #3
 8005d56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d5a:	00e2      	lsls	r2, r4, #3
 8005d5c:	4614      	mov	r4, r2
 8005d5e:	461d      	mov	r5, r3
 8005d60:	4643      	mov	r3, r8
 8005d62:	18e3      	adds	r3, r4, r3
 8005d64:	603b      	str	r3, [r7, #0]
 8005d66:	464b      	mov	r3, r9
 8005d68:	eb45 0303 	adc.w	r3, r5, r3
 8005d6c:	607b      	str	r3, [r7, #4]
 8005d6e:	f04f 0200 	mov.w	r2, #0
 8005d72:	f04f 0300 	mov.w	r3, #0
 8005d76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d7a:	4629      	mov	r1, r5
 8005d7c:	028b      	lsls	r3, r1, #10
 8005d7e:	4621      	mov	r1, r4
 8005d80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d84:	4621      	mov	r1, r4
 8005d86:	028a      	lsls	r2, r1, #10
 8005d88:	4610      	mov	r0, r2
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d90:	2200      	movs	r2, #0
 8005d92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d94:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005d96:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d9a:	f7fa ffa5 	bl	8000ce8 <__aeabi_uldivmod>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	4613      	mov	r3, r2
 8005da4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005da8:	4b0d      	ldr	r3, [pc, #52]	@ (8005de0 <HAL_RCC_GetSysClockFreq+0x458>)
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	0f1b      	lsrs	r3, r3, #28
 8005dae:	f003 0307 	and.w	r3, r3, #7
 8005db2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005db6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005dba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005dc6:	e003      	b.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005dc8:	4b06      	ldr	r3, [pc, #24]	@ (8005de4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005dca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005dce:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	37b8      	adds	r7, #184	@ 0xb8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dde:	bf00      	nop
 8005de0:	40023800 	.word	0x40023800
 8005de4:	00f42400 	.word	0x00f42400

08005de8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e28d      	b.n	8006316 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 8083 	beq.w	8005f0e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005e08:	4b94      	ldr	r3, [pc, #592]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f003 030c 	and.w	r3, r3, #12
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d019      	beq.n	8005e48 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005e14:	4b91      	ldr	r3, [pc, #580]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f003 030c 	and.w	r3, r3, #12
        || \
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d106      	bne.n	8005e2e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005e20:	4b8e      	ldr	r3, [pc, #568]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e2c:	d00c      	beq.n	8005e48 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e2e:	4b8b      	ldr	r3, [pc, #556]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005e36:	2b0c      	cmp	r3, #12
 8005e38:	d112      	bne.n	8005e60 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e3a:	4b88      	ldr	r3, [pc, #544]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e46:	d10b      	bne.n	8005e60 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e48:	4b84      	ldr	r3, [pc, #528]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d05b      	beq.n	8005f0c <HAL_RCC_OscConfig+0x124>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d157      	bne.n	8005f0c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e25a      	b.n	8006316 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e68:	d106      	bne.n	8005e78 <HAL_RCC_OscConfig+0x90>
 8005e6a:	4b7c      	ldr	r3, [pc, #496]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a7b      	ldr	r2, [pc, #492]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	e01d      	b.n	8005eb4 <HAL_RCC_OscConfig+0xcc>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e80:	d10c      	bne.n	8005e9c <HAL_RCC_OscConfig+0xb4>
 8005e82:	4b76      	ldr	r3, [pc, #472]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a75      	ldr	r2, [pc, #468]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005e88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	4b73      	ldr	r3, [pc, #460]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a72      	ldr	r2, [pc, #456]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	e00b      	b.n	8005eb4 <HAL_RCC_OscConfig+0xcc>
 8005e9c:	4b6f      	ldr	r3, [pc, #444]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a6e      	ldr	r2, [pc, #440]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005ea2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ea6:	6013      	str	r3, [r2, #0]
 8005ea8:	4b6c      	ldr	r3, [pc, #432]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a6b      	ldr	r2, [pc, #428]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005eae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d013      	beq.n	8005ee4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ebc:	f7fc fea4 	bl	8002c08 <HAL_GetTick>
 8005ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ec4:	f7fc fea0 	bl	8002c08 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b64      	cmp	r3, #100	@ 0x64
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e21f      	b.n	8006316 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ed6:	4b61      	ldr	r3, [pc, #388]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0f0      	beq.n	8005ec4 <HAL_RCC_OscConfig+0xdc>
 8005ee2:	e014      	b.n	8005f0e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee4:	f7fc fe90 	bl	8002c08 <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005eec:	f7fc fe8c 	bl	8002c08 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b64      	cmp	r3, #100	@ 0x64
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e20b      	b.n	8006316 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005efe:	4b57      	ldr	r3, [pc, #348]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1f0      	bne.n	8005eec <HAL_RCC_OscConfig+0x104>
 8005f0a:	e000      	b.n	8005f0e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d06f      	beq.n	8005ffa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005f1a:	4b50      	ldr	r3, [pc, #320]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f003 030c 	and.w	r3, r3, #12
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d017      	beq.n	8005f56 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005f26:	4b4d      	ldr	r3, [pc, #308]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f003 030c 	and.w	r3, r3, #12
        || \
 8005f2e:	2b08      	cmp	r3, #8
 8005f30:	d105      	bne.n	8005f3e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005f32:	4b4a      	ldr	r3, [pc, #296]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00b      	beq.n	8005f56 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f3e:	4b47      	ldr	r3, [pc, #284]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005f46:	2b0c      	cmp	r3, #12
 8005f48:	d11c      	bne.n	8005f84 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f4a:	4b44      	ldr	r3, [pc, #272]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d116      	bne.n	8005f84 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f56:	4b41      	ldr	r3, [pc, #260]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d005      	beq.n	8005f6e <HAL_RCC_OscConfig+0x186>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d001      	beq.n	8005f6e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e1d3      	b.n	8006316 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f6e:	4b3b      	ldr	r3, [pc, #236]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	00db      	lsls	r3, r3, #3
 8005f7c:	4937      	ldr	r1, [pc, #220]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f82:	e03a      	b.n	8005ffa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d020      	beq.n	8005fce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f8c:	4b34      	ldr	r3, [pc, #208]	@ (8006060 <HAL_RCC_OscConfig+0x278>)
 8005f8e:	2201      	movs	r2, #1
 8005f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f92:	f7fc fe39 	bl	8002c08 <HAL_GetTick>
 8005f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f98:	e008      	b.n	8005fac <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f9a:	f7fc fe35 	bl	8002c08 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d901      	bls.n	8005fac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e1b4      	b.n	8006316 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fac:	4b2b      	ldr	r3, [pc, #172]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d0f0      	beq.n	8005f9a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fb8:	4b28      	ldr	r3, [pc, #160]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	00db      	lsls	r3, r3, #3
 8005fc6:	4925      	ldr	r1, [pc, #148]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	600b      	str	r3, [r1, #0]
 8005fcc:	e015      	b.n	8005ffa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fce:	4b24      	ldr	r3, [pc, #144]	@ (8006060 <HAL_RCC_OscConfig+0x278>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd4:	f7fc fe18 	bl	8002c08 <HAL_GetTick>
 8005fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fda:	e008      	b.n	8005fee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fdc:	f7fc fe14 	bl	8002c08 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e193      	b.n	8006316 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fee:	4b1b      	ldr	r3, [pc, #108]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1f0      	bne.n	8005fdc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0308 	and.w	r3, r3, #8
 8006002:	2b00      	cmp	r3, #0
 8006004:	d036      	beq.n	8006074 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d016      	beq.n	800603c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800600e:	4b15      	ldr	r3, [pc, #84]	@ (8006064 <HAL_RCC_OscConfig+0x27c>)
 8006010:	2201      	movs	r2, #1
 8006012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006014:	f7fc fdf8 	bl	8002c08 <HAL_GetTick>
 8006018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800601a:	e008      	b.n	800602e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800601c:	f7fc fdf4 	bl	8002c08 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e173      	b.n	8006316 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800602e:	4b0b      	ldr	r3, [pc, #44]	@ (800605c <HAL_RCC_OscConfig+0x274>)
 8006030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d0f0      	beq.n	800601c <HAL_RCC_OscConfig+0x234>
 800603a:	e01b      	b.n	8006074 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800603c:	4b09      	ldr	r3, [pc, #36]	@ (8006064 <HAL_RCC_OscConfig+0x27c>)
 800603e:	2200      	movs	r2, #0
 8006040:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006042:	f7fc fde1 	bl	8002c08 <HAL_GetTick>
 8006046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006048:	e00e      	b.n	8006068 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800604a:	f7fc fddd 	bl	8002c08 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	2b02      	cmp	r3, #2
 8006056:	d907      	bls.n	8006068 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e15c      	b.n	8006316 <HAL_RCC_OscConfig+0x52e>
 800605c:	40023800 	.word	0x40023800
 8006060:	42470000 	.word	0x42470000
 8006064:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006068:	4b8a      	ldr	r3, [pc, #552]	@ (8006294 <HAL_RCC_OscConfig+0x4ac>)
 800606a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1ea      	bne.n	800604a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 8097 	beq.w	80061b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006082:	2300      	movs	r3, #0
 8006084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006086:	4b83      	ldr	r3, [pc, #524]	@ (8006294 <HAL_RCC_OscConfig+0x4ac>)
 8006088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10f      	bne.n	80060b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006092:	2300      	movs	r3, #0
 8006094:	60bb      	str	r3, [r7, #8]
 8006096:	4b7f      	ldr	r3, [pc, #508]	@ (8006294 <HAL_RCC_OscConfig+0x4ac>)
 8006098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609a:	4a7e      	ldr	r2, [pc, #504]	@ (8006294 <HAL_RCC_OscConfig+0x4ac>)
 800609c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80060a2:	4b7c      	ldr	r3, [pc, #496]	@ (8006294 <HAL_RCC_OscConfig+0x4ac>)
 80060a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060aa:	60bb      	str	r3, [r7, #8]
 80060ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060ae:	2301      	movs	r3, #1
 80060b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060b2:	4b79      	ldr	r3, [pc, #484]	@ (8006298 <HAL_RCC_OscConfig+0x4b0>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d118      	bne.n	80060f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060be:	4b76      	ldr	r3, [pc, #472]	@ (8006298 <HAL_RCC_OscConfig+0x4b0>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a75      	ldr	r2, [pc, #468]	@ (8006298 <HAL_RCC_OscConfig+0x4b0>)
 80060c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060ca:	f7fc fd9d 	bl	8002c08 <HAL_GetTick>
 80060ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d0:	e008      	b.n	80060e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060d2:	f7fc fd99 	bl	8002c08 <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d901      	bls.n	80060e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e118      	b.n	8006316 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060e4:	4b6c      	ldr	r3, [pc, #432]	@ (8006298 <HAL_RCC_OscConfig+0x4b0>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d0f0      	beq.n	80060d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d106      	bne.n	8006106 <HAL_RCC_OscConfig+0x31e>
 80060f8:	4b66      	ldr	r3, [pc, #408]	@ (8006294 <HAL_RCC_OscConfig+0x4ac>)
 80060fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060fc:	4a65      	ldr	r2, [pc, #404]	@ (8006294 <HAL_RCC_OscConfig+0x4ac>)
 80060fe:	f043 0301 	orr.w	r3, r3, #1
 8006102:	6713      	str	r3, [r2, #112]	@ 0x70
 8006104:	e01c      	b.n	8006140 <HAL_RCC_OscConfig+0x358>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	2b05      	cmp	r3, #5
 800610c:	d10c      	bne.n	8006128 <HAL_RCC_OscConfig+0x340>
 800610e:	4b61      	ldr	r3, [pc, #388]	@ (8006294 <HAL_RCC_OscConfig+0x4ac>)
 8006110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006112:	4a60      	ldr	r2, [pc, #384]	@ (8006294 <HAL_RCC_OscConfig+0x4ac>)
 8006114:	f043 0304 	orr.w	r3, r3, #4
 8006118:	6713      	str	r3, [r2, #112]	@ 0x70
 800611a:	4b5e      	ldr	r3, [pc, #376]	@ (8006294 <HAL_RCC_OscConfig+0x4ac>)
 800611c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800611e:	4a5d      	ldr	r2, [pc, #372]	@ (8006294 <HAL_RCC_OscConfig+0x4ac>)
 8006120:	f043 0301 	orr.w	r3, r3, #1
 8006124:	6713      	str	r3, [r2, #112]	@ 0x70
 8006126:	e00b      	b.n	8006140 <HAL_RCC_OscConfig+0x358>
 8006128:	4b5a      	ldr	r3, [pc, #360]	@ (8006294 <HAL_RCC_OscConfig+0x4ac>)
 800612a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800612c:	4a59      	ldr	r2, [pc, #356]	@ (8006294 <HAL_RCC_OscConfig+0x4ac>)
 800612e:	f023 0301 	bic.w	r3, r3, #1
 8006132:	6713      	str	r3, [r2, #112]	@ 0x70
 8006134:	4b57      	ldr	r3, [pc, #348]	@ (8006294 <HAL_RCC_OscConfig+0x4ac>)
 8006136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006138:	4a56      	ldr	r2, [pc, #344]	@ (8006294 <HAL_RCC_OscConfig+0x4ac>)
 800613a:	f023 0304 	bic.w	r3, r3, #4
 800613e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d015      	beq.n	8006174 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006148:	f7fc fd5e 	bl	8002c08 <HAL_GetTick>
 800614c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800614e:	e00a      	b.n	8006166 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006150:	f7fc fd5a 	bl	8002c08 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800615e:	4293      	cmp	r3, r2
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e0d7      	b.n	8006316 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006166:	4b4b      	ldr	r3, [pc, #300]	@ (8006294 <HAL_RCC_OscConfig+0x4ac>)
 8006168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0ee      	beq.n	8006150 <HAL_RCC_OscConfig+0x368>
 8006172:	e014      	b.n	800619e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006174:	f7fc fd48 	bl	8002c08 <HAL_GetTick>
 8006178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800617a:	e00a      	b.n	8006192 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800617c:	f7fc fd44 	bl	8002c08 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800618a:	4293      	cmp	r3, r2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e0c1      	b.n	8006316 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006192:	4b40      	ldr	r3, [pc, #256]	@ (8006294 <HAL_RCC_OscConfig+0x4ac>)
 8006194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1ee      	bne.n	800617c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800619e:	7dfb      	ldrb	r3, [r7, #23]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d105      	bne.n	80061b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061a4:	4b3b      	ldr	r3, [pc, #236]	@ (8006294 <HAL_RCC_OscConfig+0x4ac>)
 80061a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a8:	4a3a      	ldr	r2, [pc, #232]	@ (8006294 <HAL_RCC_OscConfig+0x4ac>)
 80061aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 80ad 	beq.w	8006314 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061ba:	4b36      	ldr	r3, [pc, #216]	@ (8006294 <HAL_RCC_OscConfig+0x4ac>)
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f003 030c 	and.w	r3, r3, #12
 80061c2:	2b08      	cmp	r3, #8
 80061c4:	d060      	beq.n	8006288 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d145      	bne.n	800625a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061ce:	4b33      	ldr	r3, [pc, #204]	@ (800629c <HAL_RCC_OscConfig+0x4b4>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d4:	f7fc fd18 	bl	8002c08 <HAL_GetTick>
 80061d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061da:	e008      	b.n	80061ee <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061dc:	f7fc fd14 	bl	8002c08 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e093      	b.n	8006316 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ee:	4b29      	ldr	r3, [pc, #164]	@ (8006294 <HAL_RCC_OscConfig+0x4ac>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1f0      	bne.n	80061dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	69da      	ldr	r2, [r3, #28]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	431a      	orrs	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006208:	019b      	lsls	r3, r3, #6
 800620a:	431a      	orrs	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006210:	085b      	lsrs	r3, r3, #1
 8006212:	3b01      	subs	r3, #1
 8006214:	041b      	lsls	r3, r3, #16
 8006216:	431a      	orrs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621c:	061b      	lsls	r3, r3, #24
 800621e:	431a      	orrs	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006224:	071b      	lsls	r3, r3, #28
 8006226:	491b      	ldr	r1, [pc, #108]	@ (8006294 <HAL_RCC_OscConfig+0x4ac>)
 8006228:	4313      	orrs	r3, r2
 800622a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800622c:	4b1b      	ldr	r3, [pc, #108]	@ (800629c <HAL_RCC_OscConfig+0x4b4>)
 800622e:	2201      	movs	r2, #1
 8006230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006232:	f7fc fce9 	bl	8002c08 <HAL_GetTick>
 8006236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006238:	e008      	b.n	800624c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800623a:	f7fc fce5 	bl	8002c08 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b02      	cmp	r3, #2
 8006246:	d901      	bls.n	800624c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e064      	b.n	8006316 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800624c:	4b11      	ldr	r3, [pc, #68]	@ (8006294 <HAL_RCC_OscConfig+0x4ac>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0f0      	beq.n	800623a <HAL_RCC_OscConfig+0x452>
 8006258:	e05c      	b.n	8006314 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800625a:	4b10      	ldr	r3, [pc, #64]	@ (800629c <HAL_RCC_OscConfig+0x4b4>)
 800625c:	2200      	movs	r2, #0
 800625e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006260:	f7fc fcd2 	bl	8002c08 <HAL_GetTick>
 8006264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006266:	e008      	b.n	800627a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006268:	f7fc fcce 	bl	8002c08 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b02      	cmp	r3, #2
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e04d      	b.n	8006316 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800627a:	4b06      	ldr	r3, [pc, #24]	@ (8006294 <HAL_RCC_OscConfig+0x4ac>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1f0      	bne.n	8006268 <HAL_RCC_OscConfig+0x480>
 8006286:	e045      	b.n	8006314 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d107      	bne.n	80062a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e040      	b.n	8006316 <HAL_RCC_OscConfig+0x52e>
 8006294:	40023800 	.word	0x40023800
 8006298:	40007000 	.word	0x40007000
 800629c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062a0:	4b1f      	ldr	r3, [pc, #124]	@ (8006320 <HAL_RCC_OscConfig+0x538>)
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d030      	beq.n	8006310 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d129      	bne.n	8006310 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d122      	bne.n	8006310 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80062d0:	4013      	ands	r3, r2
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80062d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062d8:	4293      	cmp	r3, r2
 80062da:	d119      	bne.n	8006310 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e6:	085b      	lsrs	r3, r3, #1
 80062e8:	3b01      	subs	r3, #1
 80062ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d10f      	bne.n	8006310 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d107      	bne.n	8006310 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800630a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800630c:	429a      	cmp	r2, r3
 800630e:	d001      	beq.n	8006314 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e000      	b.n	8006316 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3718      	adds	r7, #24
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	40023800 	.word	0x40023800

08006324 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e041      	b.n	80063ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d106      	bne.n	8006350 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7fc fa9a 	bl	8002884 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2202      	movs	r2, #2
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	3304      	adds	r3, #4
 8006360:	4619      	mov	r1, r3
 8006362:	4610      	mov	r0, r2
 8006364:	f000 fa7e 	bl	8006864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
	...

080063c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d001      	beq.n	80063dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e04e      	b.n	800647a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68da      	ldr	r2, [r3, #12]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0201 	orr.w	r2, r2, #1
 80063f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a23      	ldr	r2, [pc, #140]	@ (8006488 <HAL_TIM_Base_Start_IT+0xc4>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d022      	beq.n	8006444 <HAL_TIM_Base_Start_IT+0x80>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006406:	d01d      	beq.n	8006444 <HAL_TIM_Base_Start_IT+0x80>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a1f      	ldr	r2, [pc, #124]	@ (800648c <HAL_TIM_Base_Start_IT+0xc8>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d018      	beq.n	8006444 <HAL_TIM_Base_Start_IT+0x80>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a1e      	ldr	r2, [pc, #120]	@ (8006490 <HAL_TIM_Base_Start_IT+0xcc>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d013      	beq.n	8006444 <HAL_TIM_Base_Start_IT+0x80>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a1c      	ldr	r2, [pc, #112]	@ (8006494 <HAL_TIM_Base_Start_IT+0xd0>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d00e      	beq.n	8006444 <HAL_TIM_Base_Start_IT+0x80>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a1b      	ldr	r2, [pc, #108]	@ (8006498 <HAL_TIM_Base_Start_IT+0xd4>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d009      	beq.n	8006444 <HAL_TIM_Base_Start_IT+0x80>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a19      	ldr	r2, [pc, #100]	@ (800649c <HAL_TIM_Base_Start_IT+0xd8>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d004      	beq.n	8006444 <HAL_TIM_Base_Start_IT+0x80>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a18      	ldr	r2, [pc, #96]	@ (80064a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d111      	bne.n	8006468 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f003 0307 	and.w	r3, r3, #7
 800644e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2b06      	cmp	r3, #6
 8006454:	d010      	beq.n	8006478 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f042 0201 	orr.w	r2, r2, #1
 8006464:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006466:	e007      	b.n	8006478 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0201 	orr.w	r2, r2, #1
 8006476:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	40010000 	.word	0x40010000
 800648c:	40000400 	.word	0x40000400
 8006490:	40000800 	.word	0x40000800
 8006494:	40000c00 	.word	0x40000c00
 8006498:	40010400 	.word	0x40010400
 800649c:	40014000 	.word	0x40014000
 80064a0:	40001800 	.word	0x40001800

080064a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d020      	beq.n	8006508 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d01b      	beq.n	8006508 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f06f 0202 	mvn.w	r2, #2
 80064d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	f003 0303 	and.w	r3, r3, #3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f999 	bl	8006826 <HAL_TIM_IC_CaptureCallback>
 80064f4:	e005      	b.n	8006502 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f98b 	bl	8006812 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f99c 	bl	800683a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f003 0304 	and.w	r3, r3, #4
 800650e:	2b00      	cmp	r3, #0
 8006510:	d020      	beq.n	8006554 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b00      	cmp	r3, #0
 800651a:	d01b      	beq.n	8006554 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f06f 0204 	mvn.w	r2, #4
 8006524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2202      	movs	r2, #2
 800652a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f973 	bl	8006826 <HAL_TIM_IC_CaptureCallback>
 8006540:	e005      	b.n	800654e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f965 	bl	8006812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f976 	bl	800683a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d020      	beq.n	80065a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f003 0308 	and.w	r3, r3, #8
 8006564:	2b00      	cmp	r3, #0
 8006566:	d01b      	beq.n	80065a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f06f 0208 	mvn.w	r2, #8
 8006570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2204      	movs	r2, #4
 8006576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	f003 0303 	and.w	r3, r3, #3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f94d 	bl	8006826 <HAL_TIM_IC_CaptureCallback>
 800658c:	e005      	b.n	800659a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f93f 	bl	8006812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 f950 	bl	800683a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f003 0310 	and.w	r3, r3, #16
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d020      	beq.n	80065ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f003 0310 	and.w	r3, r3, #16
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d01b      	beq.n	80065ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f06f 0210 	mvn.w	r2, #16
 80065bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2208      	movs	r2, #8
 80065c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f927 	bl	8006826 <HAL_TIM_IC_CaptureCallback>
 80065d8:	e005      	b.n	80065e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f919 	bl	8006812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f92a 	bl	800683a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00c      	beq.n	8006610 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d007      	beq.n	8006610 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f06f 0201 	mvn.w	r2, #1
 8006608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7fb fd16 	bl	800203c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00c      	beq.n	8006634 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006620:	2b00      	cmp	r3, #0
 8006622:	d007      	beq.n	8006634 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800662c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fae4 	bl	8006bfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00c      	beq.n	8006658 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006644:	2b00      	cmp	r3, #0
 8006646:	d007      	beq.n	8006658 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f8fb 	bl	800684e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f003 0320 	and.w	r3, r3, #32
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00c      	beq.n	800667c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f003 0320 	and.w	r3, r3, #32
 8006668:	2b00      	cmp	r3, #0
 800666a:	d007      	beq.n	800667c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f06f 0220 	mvn.w	r2, #32
 8006674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fab6 	bl	8006be8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800667c:	bf00      	nop
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006698:	2b01      	cmp	r3, #1
 800669a:	d101      	bne.n	80066a0 <HAL_TIM_ConfigClockSource+0x1c>
 800669c:	2302      	movs	r3, #2
 800669e:	e0b4      	b.n	800680a <HAL_TIM_ConfigClockSource+0x186>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2202      	movs	r2, #2
 80066ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80066be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066d8:	d03e      	beq.n	8006758 <HAL_TIM_ConfigClockSource+0xd4>
 80066da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066de:	f200 8087 	bhi.w	80067f0 <HAL_TIM_ConfigClockSource+0x16c>
 80066e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066e6:	f000 8086 	beq.w	80067f6 <HAL_TIM_ConfigClockSource+0x172>
 80066ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ee:	d87f      	bhi.n	80067f0 <HAL_TIM_ConfigClockSource+0x16c>
 80066f0:	2b70      	cmp	r3, #112	@ 0x70
 80066f2:	d01a      	beq.n	800672a <HAL_TIM_ConfigClockSource+0xa6>
 80066f4:	2b70      	cmp	r3, #112	@ 0x70
 80066f6:	d87b      	bhi.n	80067f0 <HAL_TIM_ConfigClockSource+0x16c>
 80066f8:	2b60      	cmp	r3, #96	@ 0x60
 80066fa:	d050      	beq.n	800679e <HAL_TIM_ConfigClockSource+0x11a>
 80066fc:	2b60      	cmp	r3, #96	@ 0x60
 80066fe:	d877      	bhi.n	80067f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006700:	2b50      	cmp	r3, #80	@ 0x50
 8006702:	d03c      	beq.n	800677e <HAL_TIM_ConfigClockSource+0xfa>
 8006704:	2b50      	cmp	r3, #80	@ 0x50
 8006706:	d873      	bhi.n	80067f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006708:	2b40      	cmp	r3, #64	@ 0x40
 800670a:	d058      	beq.n	80067be <HAL_TIM_ConfigClockSource+0x13a>
 800670c:	2b40      	cmp	r3, #64	@ 0x40
 800670e:	d86f      	bhi.n	80067f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006710:	2b30      	cmp	r3, #48	@ 0x30
 8006712:	d064      	beq.n	80067de <HAL_TIM_ConfigClockSource+0x15a>
 8006714:	2b30      	cmp	r3, #48	@ 0x30
 8006716:	d86b      	bhi.n	80067f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006718:	2b20      	cmp	r3, #32
 800671a:	d060      	beq.n	80067de <HAL_TIM_ConfigClockSource+0x15a>
 800671c:	2b20      	cmp	r3, #32
 800671e:	d867      	bhi.n	80067f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006720:	2b00      	cmp	r3, #0
 8006722:	d05c      	beq.n	80067de <HAL_TIM_ConfigClockSource+0x15a>
 8006724:	2b10      	cmp	r3, #16
 8006726:	d05a      	beq.n	80067de <HAL_TIM_ConfigClockSource+0x15a>
 8006728:	e062      	b.n	80067f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800673a:	f000 f9b9 	bl	8006ab0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800674c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	609a      	str	r2, [r3, #8]
      break;
 8006756:	e04f      	b.n	80067f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006768:	f000 f9a2 	bl	8006ab0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689a      	ldr	r2, [r3, #8]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800677a:	609a      	str	r2, [r3, #8]
      break;
 800677c:	e03c      	b.n	80067f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800678a:	461a      	mov	r2, r3
 800678c:	f000 f916 	bl	80069bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2150      	movs	r1, #80	@ 0x50
 8006796:	4618      	mov	r0, r3
 8006798:	f000 f96f 	bl	8006a7a <TIM_ITRx_SetConfig>
      break;
 800679c:	e02c      	b.n	80067f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067aa:	461a      	mov	r2, r3
 80067ac:	f000 f935 	bl	8006a1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2160      	movs	r1, #96	@ 0x60
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 f95f 	bl	8006a7a <TIM_ITRx_SetConfig>
      break;
 80067bc:	e01c      	b.n	80067f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ca:	461a      	mov	r2, r3
 80067cc:	f000 f8f6 	bl	80069bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2140      	movs	r1, #64	@ 0x40
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 f94f 	bl	8006a7a <TIM_ITRx_SetConfig>
      break;
 80067dc:	e00c      	b.n	80067f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4619      	mov	r1, r3
 80067e8:	4610      	mov	r0, r2
 80067ea:	f000 f946 	bl	8006a7a <TIM_ITRx_SetConfig>
      break;
 80067ee:	e003      	b.n	80067f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	73fb      	strb	r3, [r7, #15]
      break;
 80067f4:	e000      	b.n	80067f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006808:	7bfb      	ldrb	r3, [r7, #15]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006812:	b480      	push	{r7}
 8006814:	b083      	sub	sp, #12
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800682e:	bf00      	nop
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800683a:	b480      	push	{r7}
 800683c:	b083      	sub	sp, #12
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006842:	bf00      	nop
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
	...

08006864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a46      	ldr	r2, [pc, #280]	@ (8006990 <TIM_Base_SetConfig+0x12c>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d013      	beq.n	80068a4 <TIM_Base_SetConfig+0x40>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006882:	d00f      	beq.n	80068a4 <TIM_Base_SetConfig+0x40>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a43      	ldr	r2, [pc, #268]	@ (8006994 <TIM_Base_SetConfig+0x130>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d00b      	beq.n	80068a4 <TIM_Base_SetConfig+0x40>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a42      	ldr	r2, [pc, #264]	@ (8006998 <TIM_Base_SetConfig+0x134>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d007      	beq.n	80068a4 <TIM_Base_SetConfig+0x40>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a41      	ldr	r2, [pc, #260]	@ (800699c <TIM_Base_SetConfig+0x138>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d003      	beq.n	80068a4 <TIM_Base_SetConfig+0x40>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a40      	ldr	r2, [pc, #256]	@ (80069a0 <TIM_Base_SetConfig+0x13c>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d108      	bne.n	80068b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a35      	ldr	r2, [pc, #212]	@ (8006990 <TIM_Base_SetConfig+0x12c>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d02b      	beq.n	8006916 <TIM_Base_SetConfig+0xb2>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068c4:	d027      	beq.n	8006916 <TIM_Base_SetConfig+0xb2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a32      	ldr	r2, [pc, #200]	@ (8006994 <TIM_Base_SetConfig+0x130>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d023      	beq.n	8006916 <TIM_Base_SetConfig+0xb2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a31      	ldr	r2, [pc, #196]	@ (8006998 <TIM_Base_SetConfig+0x134>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d01f      	beq.n	8006916 <TIM_Base_SetConfig+0xb2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a30      	ldr	r2, [pc, #192]	@ (800699c <TIM_Base_SetConfig+0x138>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d01b      	beq.n	8006916 <TIM_Base_SetConfig+0xb2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a2f      	ldr	r2, [pc, #188]	@ (80069a0 <TIM_Base_SetConfig+0x13c>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d017      	beq.n	8006916 <TIM_Base_SetConfig+0xb2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a2e      	ldr	r2, [pc, #184]	@ (80069a4 <TIM_Base_SetConfig+0x140>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d013      	beq.n	8006916 <TIM_Base_SetConfig+0xb2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a2d      	ldr	r2, [pc, #180]	@ (80069a8 <TIM_Base_SetConfig+0x144>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d00f      	beq.n	8006916 <TIM_Base_SetConfig+0xb2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a2c      	ldr	r2, [pc, #176]	@ (80069ac <TIM_Base_SetConfig+0x148>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d00b      	beq.n	8006916 <TIM_Base_SetConfig+0xb2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a2b      	ldr	r2, [pc, #172]	@ (80069b0 <TIM_Base_SetConfig+0x14c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d007      	beq.n	8006916 <TIM_Base_SetConfig+0xb2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a2a      	ldr	r2, [pc, #168]	@ (80069b4 <TIM_Base_SetConfig+0x150>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d003      	beq.n	8006916 <TIM_Base_SetConfig+0xb2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a29      	ldr	r2, [pc, #164]	@ (80069b8 <TIM_Base_SetConfig+0x154>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d108      	bne.n	8006928 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800691c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	4313      	orrs	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	689a      	ldr	r2, [r3, #8]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a10      	ldr	r2, [pc, #64]	@ (8006990 <TIM_Base_SetConfig+0x12c>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d003      	beq.n	800695c <TIM_Base_SetConfig+0xf8>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a12      	ldr	r2, [pc, #72]	@ (80069a0 <TIM_Base_SetConfig+0x13c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d103      	bne.n	8006964 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	691a      	ldr	r2, [r3, #16]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b01      	cmp	r3, #1
 8006974:	d105      	bne.n	8006982 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	f023 0201 	bic.w	r2, r3, #1
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	611a      	str	r2, [r3, #16]
  }
}
 8006982:	bf00      	nop
 8006984:	3714      	adds	r7, #20
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	40010000 	.word	0x40010000
 8006994:	40000400 	.word	0x40000400
 8006998:	40000800 	.word	0x40000800
 800699c:	40000c00 	.word	0x40000c00
 80069a0:	40010400 	.word	0x40010400
 80069a4:	40014000 	.word	0x40014000
 80069a8:	40014400 	.word	0x40014400
 80069ac:	40014800 	.word	0x40014800
 80069b0:	40001800 	.word	0x40001800
 80069b4:	40001c00 	.word	0x40001c00
 80069b8:	40002000 	.word	0x40002000

080069bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069bc:	b480      	push	{r7}
 80069be:	b087      	sub	sp, #28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	f023 0201 	bic.w	r2, r3, #1
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	011b      	lsls	r3, r3, #4
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f023 030a 	bic.w	r3, r3, #10
 80069f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	621a      	str	r2, [r3, #32]
}
 8006a0e:	bf00      	nop
 8006a10:	371c      	adds	r7, #28
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b087      	sub	sp, #28
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	60f8      	str	r0, [r7, #12]
 8006a22:	60b9      	str	r1, [r7, #8]
 8006a24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6a1b      	ldr	r3, [r3, #32]
 8006a30:	f023 0210 	bic.w	r2, r3, #16
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	031b      	lsls	r3, r3, #12
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	011b      	lsls	r3, r3, #4
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	621a      	str	r2, [r3, #32]
}
 8006a6e:	bf00      	nop
 8006a70:	371c      	adds	r7, #28
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b085      	sub	sp, #20
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	f043 0307 	orr.w	r3, r3, #7
 8006a9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	609a      	str	r2, [r3, #8]
}
 8006aa4:	bf00      	nop
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
 8006abc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006aca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	021a      	lsls	r2, r3, #8
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	609a      	str	r2, [r3, #8]
}
 8006ae4:	bf00      	nop
 8006ae6:	371c      	adds	r7, #28
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d101      	bne.n	8006b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b04:	2302      	movs	r3, #2
 8006b06:	e05a      	b.n	8006bbe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a21      	ldr	r2, [pc, #132]	@ (8006bcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d022      	beq.n	8006b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b54:	d01d      	beq.n	8006b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a1d      	ldr	r2, [pc, #116]	@ (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d018      	beq.n	8006b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a1b      	ldr	r2, [pc, #108]	@ (8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d013      	beq.n	8006b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a1a      	ldr	r2, [pc, #104]	@ (8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d00e      	beq.n	8006b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a18      	ldr	r2, [pc, #96]	@ (8006bdc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d009      	beq.n	8006b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a17      	ldr	r2, [pc, #92]	@ (8006be0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d004      	beq.n	8006b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a15      	ldr	r2, [pc, #84]	@ (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d10c      	bne.n	8006bac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	40010000 	.word	0x40010000
 8006bd0:	40000400 	.word	0x40000400
 8006bd4:	40000800 	.word	0x40000800
 8006bd8:	40000c00 	.word	0x40000c00
 8006bdc:	40010400 	.word	0x40010400
 8006be0:	40014000 	.word	0x40014000
 8006be4:	40001800 	.word	0x40001800

08006be8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e042      	b.n	8006ca8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d106      	bne.n	8006c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7fb fe9e 	bl	8002978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2224      	movs	r2, #36	@ 0x24
 8006c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68da      	ldr	r2, [r3, #12]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 ff85 	bl	8007b64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	691a      	ldr	r2, [r3, #16]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	695a      	ldr	r2, [r3, #20]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68da      	ldr	r2, [r3, #12]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2220      	movs	r2, #32
 8006c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b08a      	sub	sp, #40	@ 0x28
 8006cb4:	af02      	add	r7, sp, #8
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	603b      	str	r3, [r7, #0]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b20      	cmp	r3, #32
 8006cce:	d175      	bne.n	8006dbc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d002      	beq.n	8006cdc <HAL_UART_Transmit+0x2c>
 8006cd6:	88fb      	ldrh	r3, [r7, #6]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e06e      	b.n	8006dbe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2221      	movs	r2, #33	@ 0x21
 8006cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cee:	f7fb ff8b 	bl	8002c08 <HAL_GetTick>
 8006cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	88fa      	ldrh	r2, [r7, #6]
 8006cf8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	88fa      	ldrh	r2, [r7, #6]
 8006cfe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d08:	d108      	bne.n	8006d1c <HAL_UART_Transmit+0x6c>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d104      	bne.n	8006d1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d12:	2300      	movs	r3, #0
 8006d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	61bb      	str	r3, [r7, #24]
 8006d1a:	e003      	b.n	8006d24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d20:	2300      	movs	r3, #0
 8006d22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d24:	e02e      	b.n	8006d84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	2180      	movs	r1, #128	@ 0x80
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f000 fc5d 	bl	80075f0 <UART_WaitOnFlagUntilTimeout>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d005      	beq.n	8006d48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2220      	movs	r2, #32
 8006d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e03a      	b.n	8006dbe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10b      	bne.n	8006d66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	3302      	adds	r3, #2
 8006d62:	61bb      	str	r3, [r7, #24]
 8006d64:	e007      	b.n	8006d76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	781a      	ldrb	r2, [r3, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	3301      	adds	r3, #1
 8006d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1cb      	bne.n	8006d26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	2200      	movs	r2, #0
 8006d96:	2140      	movs	r1, #64	@ 0x40
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f000 fc29 	bl	80075f0 <UART_WaitOnFlagUntilTimeout>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d005      	beq.n	8006db0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2220      	movs	r2, #32
 8006da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e006      	b.n	8006dbe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006db8:	2300      	movs	r3, #0
 8006dba:	e000      	b.n	8006dbe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006dbc:	2302      	movs	r3, #2
  }
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3720      	adds	r7, #32
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b08c      	sub	sp, #48	@ 0x30
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	60f8      	str	r0, [r7, #12]
 8006dce:	60b9      	str	r1, [r7, #8]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b20      	cmp	r3, #32
 8006dde:	d14a      	bne.n	8006e76 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d002      	beq.n	8006dec <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006de6:	88fb      	ldrh	r3, [r7, #6]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e043      	b.n	8006e78 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2201      	movs	r2, #1
 8006df4:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006dfc:	88fb      	ldrh	r3, [r7, #6]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	68b9      	ldr	r1, [r7, #8]
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f000 fc4e 	bl	80076a4 <UART_Start_Receive_DMA>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006e0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d12c      	bne.n	8006e70 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d125      	bne.n	8006e6a <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e1e:	2300      	movs	r3, #0
 8006e20:	613b      	str	r3, [r7, #16]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	613b      	str	r3, [r7, #16]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	613b      	str	r3, [r7, #16]
 8006e32:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	330c      	adds	r3, #12
 8006e3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	e853 3f00 	ldrex	r3, [r3]
 8006e42:	617b      	str	r3, [r7, #20]
   return(result);
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	f043 0310 	orr.w	r3, r3, #16
 8006e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	330c      	adds	r3, #12
 8006e52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e54:	627a      	str	r2, [r7, #36]	@ 0x24
 8006e56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e58:	6a39      	ldr	r1, [r7, #32]
 8006e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e5c:	e841 2300 	strex	r3, r2, [r1]
 8006e60:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1e5      	bne.n	8006e34 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8006e68:	e002      	b.n	8006e70 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006e70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006e74:	e000      	b.n	8006e78 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006e76:	2302      	movs	r3, #2
  }
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3730      	adds	r7, #48	@ 0x30
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b0ba      	sub	sp, #232	@ 0xe8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006eac:	2300      	movs	r3, #0
 8006eae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eb6:	f003 030f 	and.w	r3, r3, #15
 8006eba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006ebe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10f      	bne.n	8006ee6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eca:	f003 0320 	and.w	r3, r3, #32
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d009      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x66>
 8006ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ed6:	f003 0320 	and.w	r3, r3, #32
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fd81 	bl	80079e6 <UART_Receive_IT>
      return;
 8006ee4:	e25b      	b.n	800739e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006ee6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 80de 	beq.w	80070ac <HAL_UART_IRQHandler+0x22c>
 8006ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d106      	bne.n	8006f0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f00:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 80d1 	beq.w	80070ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00b      	beq.n	8006f2e <HAL_UART_IRQHandler+0xae>
 8006f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d005      	beq.n	8006f2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f26:	f043 0201 	orr.w	r2, r3, #1
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f32:	f003 0304 	and.w	r3, r3, #4
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00b      	beq.n	8006f52 <HAL_UART_IRQHandler+0xd2>
 8006f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d005      	beq.n	8006f52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f4a:	f043 0202 	orr.w	r2, r3, #2
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f56:	f003 0302 	and.w	r3, r3, #2
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00b      	beq.n	8006f76 <HAL_UART_IRQHandler+0xf6>
 8006f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d005      	beq.n	8006f76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f6e:	f043 0204 	orr.w	r2, r3, #4
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f7a:	f003 0308 	and.w	r3, r3, #8
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d011      	beq.n	8006fa6 <HAL_UART_IRQHandler+0x126>
 8006f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f86:	f003 0320 	and.w	r3, r3, #32
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d105      	bne.n	8006f9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d005      	beq.n	8006fa6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f9e:	f043 0208 	orr.w	r2, r3, #8
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f000 81f2 	beq.w	8007394 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fb4:	f003 0320 	and.w	r3, r3, #32
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d008      	beq.n	8006fce <HAL_UART_IRQHandler+0x14e>
 8006fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fc0:	f003 0320 	and.w	r3, r3, #32
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fd0c 	bl	80079e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	695b      	ldr	r3, [r3, #20]
 8006fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd8:	2b40      	cmp	r3, #64	@ 0x40
 8006fda:	bf0c      	ite	eq
 8006fdc:	2301      	moveq	r3, #1
 8006fde:	2300      	movne	r3, #0
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fea:	f003 0308 	and.w	r3, r3, #8
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d103      	bne.n	8006ffa <HAL_UART_IRQHandler+0x17a>
 8006ff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d04f      	beq.n	800709a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fc14 	bl	8007828 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800700a:	2b40      	cmp	r3, #64	@ 0x40
 800700c:	d141      	bne.n	8007092 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3314      	adds	r3, #20
 8007014:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007018:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800701c:	e853 3f00 	ldrex	r3, [r3]
 8007020:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007024:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007028:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800702c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3314      	adds	r3, #20
 8007036:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800703a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800703e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007042:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007046:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800704a:	e841 2300 	strex	r3, r2, [r1]
 800704e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007052:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1d9      	bne.n	800700e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800705e:	2b00      	cmp	r3, #0
 8007060:	d013      	beq.n	800708a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007066:	4a7e      	ldr	r2, [pc, #504]	@ (8007260 <HAL_UART_IRQHandler+0x3e0>)
 8007068:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800706e:	4618      	mov	r0, r3
 8007070:	f7fc fa92 	bl	8003598 <HAL_DMA_Abort_IT>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d016      	beq.n	80070a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800707e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007084:	4610      	mov	r0, r2
 8007086:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007088:	e00e      	b.n	80070a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f9a8 	bl	80073e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007090:	e00a      	b.n	80070a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f9a4 	bl	80073e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007098:	e006      	b.n	80070a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f9a0 	bl	80073e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80070a6:	e175      	b.n	8007394 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070a8:	bf00      	nop
    return;
 80070aa:	e173      	b.n	8007394 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	f040 814f 	bne.w	8007354 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80070b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070ba:	f003 0310 	and.w	r3, r3, #16
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 8148 	beq.w	8007354 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80070c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070c8:	f003 0310 	and.w	r3, r3, #16
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 8141 	beq.w	8007354 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070d2:	2300      	movs	r3, #0
 80070d4:	60bb      	str	r3, [r7, #8]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	60bb      	str	r3, [r7, #8]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	60bb      	str	r3, [r7, #8]
 80070e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070f2:	2b40      	cmp	r3, #64	@ 0x40
 80070f4:	f040 80b6 	bne.w	8007264 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007104:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 8145 	beq.w	8007398 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007112:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007116:	429a      	cmp	r2, r3
 8007118:	f080 813e 	bcs.w	8007398 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007122:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007128:	69db      	ldr	r3, [r3, #28]
 800712a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800712e:	f000 8088 	beq.w	8007242 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	330c      	adds	r3, #12
 8007138:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007140:	e853 3f00 	ldrex	r3, [r3]
 8007144:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007148:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800714c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007150:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	330c      	adds	r3, #12
 800715a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800715e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007162:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007166:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800716a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800716e:	e841 2300 	strex	r3, r2, [r1]
 8007172:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007176:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1d9      	bne.n	8007132 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	3314      	adds	r3, #20
 8007184:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007186:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007188:	e853 3f00 	ldrex	r3, [r3]
 800718c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800718e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007190:	f023 0301 	bic.w	r3, r3, #1
 8007194:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3314      	adds	r3, #20
 800719e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80071a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80071a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80071aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80071ae:	e841 2300 	strex	r3, r2, [r1]
 80071b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80071b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1e1      	bne.n	800717e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	3314      	adds	r3, #20
 80071c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071c4:	e853 3f00 	ldrex	r3, [r3]
 80071c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80071ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	3314      	adds	r3, #20
 80071da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80071de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80071e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80071e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80071e6:	e841 2300 	strex	r3, r2, [r1]
 80071ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80071ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1e3      	bne.n	80071ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2220      	movs	r2, #32
 80071f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	330c      	adds	r3, #12
 8007206:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800720a:	e853 3f00 	ldrex	r3, [r3]
 800720e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007210:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007212:	f023 0310 	bic.w	r3, r3, #16
 8007216:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	330c      	adds	r3, #12
 8007220:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007224:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007226:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007228:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800722a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800722c:	e841 2300 	strex	r3, r2, [r1]
 8007230:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1e3      	bne.n	8007200 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800723c:	4618      	mov	r0, r3
 800723e:	f7fc f93b 	bl	80034b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2202      	movs	r2, #2
 8007246:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007250:	b29b      	uxth	r3, r3
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	b29b      	uxth	r3, r3
 8007256:	4619      	mov	r1, r3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7fa ff39 	bl	80020d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800725e:	e09b      	b.n	8007398 <HAL_UART_IRQHandler+0x518>
 8007260:	080078ef 	.word	0x080078ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800726c:	b29b      	uxth	r3, r3
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007278:	b29b      	uxth	r3, r3
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 808e 	beq.w	800739c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007280:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 8089 	beq.w	800739c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	330c      	adds	r3, #12
 8007290:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007294:	e853 3f00 	ldrex	r3, [r3]
 8007298:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800729a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800729c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	330c      	adds	r3, #12
 80072aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80072ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80072b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072b6:	e841 2300 	strex	r3, r2, [r1]
 80072ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1e3      	bne.n	800728a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	3314      	adds	r3, #20
 80072c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072cc:	e853 3f00 	ldrex	r3, [r3]
 80072d0:	623b      	str	r3, [r7, #32]
   return(result);
 80072d2:	6a3b      	ldr	r3, [r7, #32]
 80072d4:	f023 0301 	bic.w	r3, r3, #1
 80072d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	3314      	adds	r3, #20
 80072e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80072e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80072e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072ee:	e841 2300 	strex	r3, r2, [r1]
 80072f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1e3      	bne.n	80072c2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2220      	movs	r2, #32
 80072fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	330c      	adds	r3, #12
 800730e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	e853 3f00 	ldrex	r3, [r3]
 8007316:	60fb      	str	r3, [r7, #12]
   return(result);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f023 0310 	bic.w	r3, r3, #16
 800731e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	330c      	adds	r3, #12
 8007328:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800732c:	61fa      	str	r2, [r7, #28]
 800732e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007330:	69b9      	ldr	r1, [r7, #24]
 8007332:	69fa      	ldr	r2, [r7, #28]
 8007334:	e841 2300 	strex	r3, r2, [r1]
 8007338:	617b      	str	r3, [r7, #20]
   return(result);
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1e3      	bne.n	8007308 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2202      	movs	r2, #2
 8007344:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007346:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7fa febf 	bl	80020d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007352:	e023      	b.n	800739c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800735c:	2b00      	cmp	r3, #0
 800735e:	d009      	beq.n	8007374 <HAL_UART_IRQHandler+0x4f4>
 8007360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007368:	2b00      	cmp	r3, #0
 800736a:	d003      	beq.n	8007374 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fad2 	bl	8007916 <UART_Transmit_IT>
    return;
 8007372:	e014      	b.n	800739e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00e      	beq.n	800739e <HAL_UART_IRQHandler+0x51e>
 8007380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007388:	2b00      	cmp	r3, #0
 800738a:	d008      	beq.n	800739e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fb12 	bl	80079b6 <UART_EndTransmit_IT>
    return;
 8007392:	e004      	b.n	800739e <HAL_UART_IRQHandler+0x51e>
    return;
 8007394:	bf00      	nop
 8007396:	e002      	b.n	800739e <HAL_UART_IRQHandler+0x51e>
      return;
 8007398:	bf00      	nop
 800739a:	e000      	b.n	800739e <HAL_UART_IRQHandler+0x51e>
      return;
 800739c:	bf00      	nop
  }
}
 800739e:	37e8      	adds	r7, #232	@ 0xe8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b09c      	sub	sp, #112	@ 0x70
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007400:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800740c:	2b00      	cmp	r3, #0
 800740e:	d172      	bne.n	80074f6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007410:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007412:	2200      	movs	r2, #0
 8007414:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007416:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	330c      	adds	r3, #12
 800741c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007426:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800742c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800742e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	330c      	adds	r3, #12
 8007434:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007436:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007438:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800743c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800743e:	e841 2300 	strex	r3, r2, [r1]
 8007442:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007444:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e5      	bne.n	8007416 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800744a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3314      	adds	r3, #20
 8007450:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007454:	e853 3f00 	ldrex	r3, [r3]
 8007458:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800745a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800745c:	f023 0301 	bic.w	r3, r3, #1
 8007460:	667b      	str	r3, [r7, #100]	@ 0x64
 8007462:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	3314      	adds	r3, #20
 8007468:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800746a:	647a      	str	r2, [r7, #68]	@ 0x44
 800746c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007470:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007472:	e841 2300 	strex	r3, r2, [r1]
 8007476:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1e5      	bne.n	800744a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800747e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3314      	adds	r3, #20
 8007484:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007488:	e853 3f00 	ldrex	r3, [r3]
 800748c:	623b      	str	r3, [r7, #32]
   return(result);
 800748e:	6a3b      	ldr	r3, [r7, #32]
 8007490:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007494:	663b      	str	r3, [r7, #96]	@ 0x60
 8007496:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	3314      	adds	r3, #20
 800749c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800749e:	633a      	str	r2, [r7, #48]	@ 0x30
 80074a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074a6:	e841 2300 	strex	r3, r2, [r1]
 80074aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1e5      	bne.n	800747e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80074b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074b4:	2220      	movs	r2, #32
 80074b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d119      	bne.n	80074f6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	330c      	adds	r3, #12
 80074c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	e853 3f00 	ldrex	r3, [r3]
 80074d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f023 0310 	bic.w	r3, r3, #16
 80074d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	330c      	adds	r3, #12
 80074e0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80074e2:	61fa      	str	r2, [r7, #28]
 80074e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e6:	69b9      	ldr	r1, [r7, #24]
 80074e8:	69fa      	ldr	r2, [r7, #28]
 80074ea:	e841 2300 	strex	r3, r2, [r1]
 80074ee:	617b      	str	r3, [r7, #20]
   return(result);
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1e5      	bne.n	80074c2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074f8:	2200      	movs	r2, #0
 80074fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007500:	2b01      	cmp	r3, #1
 8007502:	d106      	bne.n	8007512 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007504:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007506:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007508:	4619      	mov	r1, r3
 800750a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800750c:	f7fa fde0 	bl	80020d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007510:	e002      	b.n	8007518 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007512:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007514:	f7ff ff50 	bl	80073b8 <HAL_UART_RxCpltCallback>
}
 8007518:	bf00      	nop
 800751a:	3770      	adds	r7, #112	@ 0x70
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800752c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2201      	movs	r2, #1
 8007532:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007538:	2b01      	cmp	r3, #1
 800753a:	d108      	bne.n	800754e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007540:	085b      	lsrs	r3, r3, #1
 8007542:	b29b      	uxth	r3, r3
 8007544:	4619      	mov	r1, r3
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f7fa fdc2 	bl	80020d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800754c:	e002      	b.n	8007554 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f7ff ff3c 	bl	80073cc <HAL_UART_RxHalfCpltCallback>
}
 8007554:	bf00      	nop
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007564:	2300      	movs	r3, #0
 8007566:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800756c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	695b      	ldr	r3, [r3, #20]
 8007574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007578:	2b80      	cmp	r3, #128	@ 0x80
 800757a:	bf0c      	ite	eq
 800757c:	2301      	moveq	r3, #1
 800757e:	2300      	movne	r3, #0
 8007580:	b2db      	uxtb	r3, r3
 8007582:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800758a:	b2db      	uxtb	r3, r3
 800758c:	2b21      	cmp	r3, #33	@ 0x21
 800758e:	d108      	bne.n	80075a2 <UART_DMAError+0x46>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d005      	beq.n	80075a2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2200      	movs	r2, #0
 800759a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800759c:	68b8      	ldr	r0, [r7, #8]
 800759e:	f000 f91b 	bl	80077d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ac:	2b40      	cmp	r3, #64	@ 0x40
 80075ae:	bf0c      	ite	eq
 80075b0:	2301      	moveq	r3, #1
 80075b2:	2300      	movne	r3, #0
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b22      	cmp	r3, #34	@ 0x22
 80075c2:	d108      	bne.n	80075d6 <UART_DMAError+0x7a>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d005      	beq.n	80075d6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	2200      	movs	r2, #0
 80075ce:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80075d0:	68b8      	ldr	r0, [r7, #8]
 80075d2:	f000 f929 	bl	8007828 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075da:	f043 0210 	orr.w	r2, r3, #16
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075e2:	68b8      	ldr	r0, [r7, #8]
 80075e4:	f7ff fefc 	bl	80073e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075e8:	bf00      	nop
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b086      	sub	sp, #24
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	603b      	str	r3, [r7, #0]
 80075fc:	4613      	mov	r3, r2
 80075fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007600:	e03b      	b.n	800767a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007608:	d037      	beq.n	800767a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800760a:	f7fb fafd 	bl	8002c08 <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	6a3a      	ldr	r2, [r7, #32]
 8007616:	429a      	cmp	r2, r3
 8007618:	d302      	bcc.n	8007620 <UART_WaitOnFlagUntilTimeout+0x30>
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e03a      	b.n	800769a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f003 0304 	and.w	r3, r3, #4
 800762e:	2b00      	cmp	r3, #0
 8007630:	d023      	beq.n	800767a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	2b80      	cmp	r3, #128	@ 0x80
 8007636:	d020      	beq.n	800767a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	2b40      	cmp	r3, #64	@ 0x40
 800763c:	d01d      	beq.n	800767a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0308 	and.w	r3, r3, #8
 8007648:	2b08      	cmp	r3, #8
 800764a:	d116      	bne.n	800767a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800764c:	2300      	movs	r3, #0
 800764e:	617b      	str	r3, [r7, #20]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	617b      	str	r3, [r7, #20]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	617b      	str	r3, [r7, #20]
 8007660:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f000 f8e0 	bl	8007828 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2208      	movs	r2, #8
 800766c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e00f      	b.n	800769a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	4013      	ands	r3, r2
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	429a      	cmp	r2, r3
 8007688:	bf0c      	ite	eq
 800768a:	2301      	moveq	r3, #1
 800768c:	2300      	movne	r3, #0
 800768e:	b2db      	uxtb	r3, r3
 8007690:	461a      	mov	r2, r3
 8007692:	79fb      	ldrb	r3, [r7, #7]
 8007694:	429a      	cmp	r2, r3
 8007696:	d0b4      	beq.n	8007602 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3718      	adds	r7, #24
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
	...

080076a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b098      	sub	sp, #96	@ 0x60
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	4613      	mov	r3, r2
 80076b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	88fa      	ldrh	r2, [r7, #6]
 80076bc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2222      	movs	r2, #34	@ 0x22
 80076c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076d0:	4a3e      	ldr	r2, [pc, #248]	@ (80077cc <UART_Start_Receive_DMA+0x128>)
 80076d2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076d8:	4a3d      	ldr	r2, [pc, #244]	@ (80077d0 <UART_Start_Receive_DMA+0x12c>)
 80076da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076e0:	4a3c      	ldr	r2, [pc, #240]	@ (80077d4 <UART_Start_Receive_DMA+0x130>)
 80076e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076e8:	2200      	movs	r2, #0
 80076ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80076ec:	f107 0308 	add.w	r3, r7, #8
 80076f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	3304      	adds	r3, #4
 80076fc:	4619      	mov	r1, r3
 80076fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	88fb      	ldrh	r3, [r7, #6]
 8007704:	f7fb fe80 	bl	8003408 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007708:	2300      	movs	r3, #0
 800770a:	613b      	str	r3, [r7, #16]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	613b      	str	r3, [r7, #16]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	613b      	str	r3, [r7, #16]
 800771c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d019      	beq.n	800775a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	330c      	adds	r3, #12
 800772c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007730:	e853 3f00 	ldrex	r3, [r3]
 8007734:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800773c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	330c      	adds	r3, #12
 8007744:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007746:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007748:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800774c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800774e:	e841 2300 	strex	r3, r2, [r1]
 8007752:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1e5      	bne.n	8007726 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3314      	adds	r3, #20
 8007760:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007764:	e853 3f00 	ldrex	r3, [r3]
 8007768:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800776a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800776c:	f043 0301 	orr.w	r3, r3, #1
 8007770:	657b      	str	r3, [r7, #84]	@ 0x54
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3314      	adds	r3, #20
 8007778:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800777a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800777c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007780:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007782:	e841 2300 	strex	r3, r2, [r1]
 8007786:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1e5      	bne.n	800775a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3314      	adds	r3, #20
 8007794:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	e853 3f00 	ldrex	r3, [r3]
 800779c:	617b      	str	r3, [r7, #20]
   return(result);
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3314      	adds	r3, #20
 80077ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80077ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80077b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b2:	6a39      	ldr	r1, [r7, #32]
 80077b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077b6:	e841 2300 	strex	r3, r2, [r1]
 80077ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1e5      	bne.n	800778e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3760      	adds	r7, #96	@ 0x60
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	080073f5 	.word	0x080073f5
 80077d0:	08007521 	.word	0x08007521
 80077d4:	0800755d 	.word	0x0800755d

080077d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80077d8:	b480      	push	{r7}
 80077da:	b089      	sub	sp, #36	@ 0x24
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	330c      	adds	r3, #12
 80077e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	e853 3f00 	ldrex	r3, [r3]
 80077ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80077f6:	61fb      	str	r3, [r7, #28]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	330c      	adds	r3, #12
 80077fe:	69fa      	ldr	r2, [r7, #28]
 8007800:	61ba      	str	r2, [r7, #24]
 8007802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007804:	6979      	ldr	r1, [r7, #20]
 8007806:	69ba      	ldr	r2, [r7, #24]
 8007808:	e841 2300 	strex	r3, r2, [r1]
 800780c:	613b      	str	r3, [r7, #16]
   return(result);
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1e5      	bne.n	80077e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2220      	movs	r2, #32
 8007818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800781c:	bf00      	nop
 800781e:	3724      	adds	r7, #36	@ 0x24
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007828:	b480      	push	{r7}
 800782a:	b095      	sub	sp, #84	@ 0x54
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	330c      	adds	r3, #12
 8007836:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800783a:	e853 3f00 	ldrex	r3, [r3]
 800783e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007842:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007846:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	330c      	adds	r3, #12
 800784e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007850:	643a      	str	r2, [r7, #64]	@ 0x40
 8007852:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007854:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007856:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007858:	e841 2300 	strex	r3, r2, [r1]
 800785c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800785e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e5      	bne.n	8007830 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	3314      	adds	r3, #20
 800786a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786c:	6a3b      	ldr	r3, [r7, #32]
 800786e:	e853 3f00 	ldrex	r3, [r3]
 8007872:	61fb      	str	r3, [r7, #28]
   return(result);
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	f023 0301 	bic.w	r3, r3, #1
 800787a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3314      	adds	r3, #20
 8007882:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007884:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007886:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007888:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800788a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800788c:	e841 2300 	strex	r3, r2, [r1]
 8007890:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1e5      	bne.n	8007864 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800789c:	2b01      	cmp	r3, #1
 800789e:	d119      	bne.n	80078d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	330c      	adds	r3, #12
 80078a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	e853 3f00 	ldrex	r3, [r3]
 80078ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	f023 0310 	bic.w	r3, r3, #16
 80078b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	330c      	adds	r3, #12
 80078be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078c0:	61ba      	str	r2, [r7, #24]
 80078c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c4:	6979      	ldr	r1, [r7, #20]
 80078c6:	69ba      	ldr	r2, [r7, #24]
 80078c8:	e841 2300 	strex	r3, r2, [r1]
 80078cc:	613b      	str	r3, [r7, #16]
   return(result);
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1e5      	bne.n	80078a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2220      	movs	r2, #32
 80078d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80078e2:	bf00      	nop
 80078e4:	3754      	adds	r7, #84	@ 0x54
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr

080078ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b084      	sub	sp, #16
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f7ff fd69 	bl	80073e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800790e:	bf00      	nop
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007916:	b480      	push	{r7}
 8007918:	b085      	sub	sp, #20
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b21      	cmp	r3, #33	@ 0x21
 8007928:	d13e      	bne.n	80079a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007932:	d114      	bne.n	800795e <UART_Transmit_IT+0x48>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d110      	bne.n	800795e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a1b      	ldr	r3, [r3, #32]
 8007940:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	881b      	ldrh	r3, [r3, #0]
 8007946:	461a      	mov	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007950:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	1c9a      	adds	r2, r3, #2
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	621a      	str	r2, [r3, #32]
 800795c:	e008      	b.n	8007970 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	1c59      	adds	r1, r3, #1
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	6211      	str	r1, [r2, #32]
 8007968:	781a      	ldrb	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007974:	b29b      	uxth	r3, r3
 8007976:	3b01      	subs	r3, #1
 8007978:	b29b      	uxth	r3, r3
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	4619      	mov	r1, r3
 800797e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10f      	bne.n	80079a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68da      	ldr	r2, [r3, #12]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007992:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68da      	ldr	r2, [r3, #12]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	e000      	b.n	80079aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80079a8:	2302      	movs	r3, #2
  }
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b082      	sub	sp, #8
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68da      	ldr	r2, [r3, #12]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2220      	movs	r2, #32
 80079d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7ff fce4 	bl	80073a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b08c      	sub	sp, #48	@ 0x30
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b22      	cmp	r3, #34	@ 0x22
 80079f8:	f040 80ae 	bne.w	8007b58 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a04:	d117      	bne.n	8007a36 <UART_Receive_IT+0x50>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d113      	bne.n	8007a36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a16:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a2e:	1c9a      	adds	r2, r3, #2
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	629a      	str	r2, [r3, #40]	@ 0x28
 8007a34:	e026      	b.n	8007a84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a48:	d007      	beq.n	8007a5a <UART_Receive_IT+0x74>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10a      	bne.n	8007a68 <UART_Receive_IT+0x82>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d106      	bne.n	8007a68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	b2da      	uxtb	r2, r3
 8007a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a64:	701a      	strb	r2, [r3, #0]
 8007a66:	e008      	b.n	8007a7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a74:	b2da      	uxtb	r2, r3
 8007a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a7e:	1c5a      	adds	r2, r3, #1
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	4619      	mov	r1, r3
 8007a92:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d15d      	bne.n	8007b54 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68da      	ldr	r2, [r3, #12]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f022 0220 	bic.w	r2, r2, #32
 8007aa6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68da      	ldr	r2, [r3, #12]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007ab6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	695a      	ldr	r2, [r3, #20]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f022 0201 	bic.w	r2, r2, #1
 8007ac6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2220      	movs	r2, #32
 8007acc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d135      	bne.n	8007b4a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	330c      	adds	r3, #12
 8007aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	e853 3f00 	ldrex	r3, [r3]
 8007af2:	613b      	str	r3, [r7, #16]
   return(result);
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	f023 0310 	bic.w	r3, r3, #16
 8007afa:	627b      	str	r3, [r7, #36]	@ 0x24
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	330c      	adds	r3, #12
 8007b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b04:	623a      	str	r2, [r7, #32]
 8007b06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b08:	69f9      	ldr	r1, [r7, #28]
 8007b0a:	6a3a      	ldr	r2, [r7, #32]
 8007b0c:	e841 2300 	strex	r3, r2, [r1]
 8007b10:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1e5      	bne.n	8007ae4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0310 	and.w	r3, r3, #16
 8007b22:	2b10      	cmp	r3, #16
 8007b24:	d10a      	bne.n	8007b3c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b26:	2300      	movs	r3, #0
 8007b28:	60fb      	str	r3, [r7, #12]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	60fb      	str	r3, [r7, #12]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	60fb      	str	r3, [r7, #12]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7fa fac4 	bl	80020d0 <HAL_UARTEx_RxEventCallback>
 8007b48:	e002      	b.n	8007b50 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7ff fc34 	bl	80073b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	e002      	b.n	8007b5a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	e000      	b.n	8007b5a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007b58:	2302      	movs	r3, #2
  }
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3730      	adds	r7, #48	@ 0x30
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
	...

08007b64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b68:	b0c0      	sub	sp, #256	@ 0x100
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b80:	68d9      	ldr	r1, [r3, #12]
 8007b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	ea40 0301 	orr.w	r3, r0, r1
 8007b8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b92:	689a      	ldr	r2, [r3, #8]
 8007b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	431a      	orrs	r2, r3
 8007b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	431a      	orrs	r2, r3
 8007ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ba8:	69db      	ldr	r3, [r3, #28]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007bbc:	f021 010c 	bic.w	r1, r1, #12
 8007bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007bca:	430b      	orrs	r3, r1
 8007bcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bde:	6999      	ldr	r1, [r3, #24]
 8007be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	ea40 0301 	orr.w	r3, r0, r1
 8007bea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	4b8f      	ldr	r3, [pc, #572]	@ (8007e30 <UART_SetConfig+0x2cc>)
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d005      	beq.n	8007c04 <UART_SetConfig+0xa0>
 8007bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	4b8d      	ldr	r3, [pc, #564]	@ (8007e34 <UART_SetConfig+0x2d0>)
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d104      	bne.n	8007c0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c04:	f7fd feac 	bl	8005960 <HAL_RCC_GetPCLK2Freq>
 8007c08:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007c0c:	e003      	b.n	8007c16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c0e:	f7fd fe93 	bl	8005938 <HAL_RCC_GetPCLK1Freq>
 8007c12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c1a:	69db      	ldr	r3, [r3, #28]
 8007c1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c20:	f040 810c 	bne.w	8007e3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c2e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007c32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007c36:	4622      	mov	r2, r4
 8007c38:	462b      	mov	r3, r5
 8007c3a:	1891      	adds	r1, r2, r2
 8007c3c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007c3e:	415b      	adcs	r3, r3
 8007c40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007c46:	4621      	mov	r1, r4
 8007c48:	eb12 0801 	adds.w	r8, r2, r1
 8007c4c:	4629      	mov	r1, r5
 8007c4e:	eb43 0901 	adc.w	r9, r3, r1
 8007c52:	f04f 0200 	mov.w	r2, #0
 8007c56:	f04f 0300 	mov.w	r3, #0
 8007c5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c66:	4690      	mov	r8, r2
 8007c68:	4699      	mov	r9, r3
 8007c6a:	4623      	mov	r3, r4
 8007c6c:	eb18 0303 	adds.w	r3, r8, r3
 8007c70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007c74:	462b      	mov	r3, r5
 8007c76:	eb49 0303 	adc.w	r3, r9, r3
 8007c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c8a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007c8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007c92:	460b      	mov	r3, r1
 8007c94:	18db      	adds	r3, r3, r3
 8007c96:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c98:	4613      	mov	r3, r2
 8007c9a:	eb42 0303 	adc.w	r3, r2, r3
 8007c9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ca0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007ca4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007ca8:	f7f9 f81e 	bl	8000ce8 <__aeabi_uldivmod>
 8007cac:	4602      	mov	r2, r0
 8007cae:	460b      	mov	r3, r1
 8007cb0:	4b61      	ldr	r3, [pc, #388]	@ (8007e38 <UART_SetConfig+0x2d4>)
 8007cb2:	fba3 2302 	umull	r2, r3, r3, r2
 8007cb6:	095b      	lsrs	r3, r3, #5
 8007cb8:	011c      	lsls	r4, r3, #4
 8007cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007cc4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007cc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007ccc:	4642      	mov	r2, r8
 8007cce:	464b      	mov	r3, r9
 8007cd0:	1891      	adds	r1, r2, r2
 8007cd2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007cd4:	415b      	adcs	r3, r3
 8007cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007cdc:	4641      	mov	r1, r8
 8007cde:	eb12 0a01 	adds.w	sl, r2, r1
 8007ce2:	4649      	mov	r1, r9
 8007ce4:	eb43 0b01 	adc.w	fp, r3, r1
 8007ce8:	f04f 0200 	mov.w	r2, #0
 8007cec:	f04f 0300 	mov.w	r3, #0
 8007cf0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007cf4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007cf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cfc:	4692      	mov	sl, r2
 8007cfe:	469b      	mov	fp, r3
 8007d00:	4643      	mov	r3, r8
 8007d02:	eb1a 0303 	adds.w	r3, sl, r3
 8007d06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d0a:	464b      	mov	r3, r9
 8007d0c:	eb4b 0303 	adc.w	r3, fp, r3
 8007d10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d20:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007d24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	18db      	adds	r3, r3, r3
 8007d2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d2e:	4613      	mov	r3, r2
 8007d30:	eb42 0303 	adc.w	r3, r2, r3
 8007d34:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007d3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007d3e:	f7f8 ffd3 	bl	8000ce8 <__aeabi_uldivmod>
 8007d42:	4602      	mov	r2, r0
 8007d44:	460b      	mov	r3, r1
 8007d46:	4611      	mov	r1, r2
 8007d48:	4b3b      	ldr	r3, [pc, #236]	@ (8007e38 <UART_SetConfig+0x2d4>)
 8007d4a:	fba3 2301 	umull	r2, r3, r3, r1
 8007d4e:	095b      	lsrs	r3, r3, #5
 8007d50:	2264      	movs	r2, #100	@ 0x64
 8007d52:	fb02 f303 	mul.w	r3, r2, r3
 8007d56:	1acb      	subs	r3, r1, r3
 8007d58:	00db      	lsls	r3, r3, #3
 8007d5a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007d5e:	4b36      	ldr	r3, [pc, #216]	@ (8007e38 <UART_SetConfig+0x2d4>)
 8007d60:	fba3 2302 	umull	r2, r3, r3, r2
 8007d64:	095b      	lsrs	r3, r3, #5
 8007d66:	005b      	lsls	r3, r3, #1
 8007d68:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007d6c:	441c      	add	r4, r3
 8007d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d72:	2200      	movs	r2, #0
 8007d74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d78:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007d7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007d80:	4642      	mov	r2, r8
 8007d82:	464b      	mov	r3, r9
 8007d84:	1891      	adds	r1, r2, r2
 8007d86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007d88:	415b      	adcs	r3, r3
 8007d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007d90:	4641      	mov	r1, r8
 8007d92:	1851      	adds	r1, r2, r1
 8007d94:	6339      	str	r1, [r7, #48]	@ 0x30
 8007d96:	4649      	mov	r1, r9
 8007d98:	414b      	adcs	r3, r1
 8007d9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d9c:	f04f 0200 	mov.w	r2, #0
 8007da0:	f04f 0300 	mov.w	r3, #0
 8007da4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007da8:	4659      	mov	r1, fp
 8007daa:	00cb      	lsls	r3, r1, #3
 8007dac:	4651      	mov	r1, sl
 8007dae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007db2:	4651      	mov	r1, sl
 8007db4:	00ca      	lsls	r2, r1, #3
 8007db6:	4610      	mov	r0, r2
 8007db8:	4619      	mov	r1, r3
 8007dba:	4603      	mov	r3, r0
 8007dbc:	4642      	mov	r2, r8
 8007dbe:	189b      	adds	r3, r3, r2
 8007dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007dc4:	464b      	mov	r3, r9
 8007dc6:	460a      	mov	r2, r1
 8007dc8:	eb42 0303 	adc.w	r3, r2, r3
 8007dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ddc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007de0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007de4:	460b      	mov	r3, r1
 8007de6:	18db      	adds	r3, r3, r3
 8007de8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dea:	4613      	mov	r3, r2
 8007dec:	eb42 0303 	adc.w	r3, r2, r3
 8007df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007df2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007df6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007dfa:	f7f8 ff75 	bl	8000ce8 <__aeabi_uldivmod>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	460b      	mov	r3, r1
 8007e02:	4b0d      	ldr	r3, [pc, #52]	@ (8007e38 <UART_SetConfig+0x2d4>)
 8007e04:	fba3 1302 	umull	r1, r3, r3, r2
 8007e08:	095b      	lsrs	r3, r3, #5
 8007e0a:	2164      	movs	r1, #100	@ 0x64
 8007e0c:	fb01 f303 	mul.w	r3, r1, r3
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	00db      	lsls	r3, r3, #3
 8007e14:	3332      	adds	r3, #50	@ 0x32
 8007e16:	4a08      	ldr	r2, [pc, #32]	@ (8007e38 <UART_SetConfig+0x2d4>)
 8007e18:	fba2 2303 	umull	r2, r3, r2, r3
 8007e1c:	095b      	lsrs	r3, r3, #5
 8007e1e:	f003 0207 	and.w	r2, r3, #7
 8007e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4422      	add	r2, r4
 8007e2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e2c:	e106      	b.n	800803c <UART_SetConfig+0x4d8>
 8007e2e:	bf00      	nop
 8007e30:	40011000 	.word	0x40011000
 8007e34:	40011400 	.word	0x40011400
 8007e38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e40:	2200      	movs	r2, #0
 8007e42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e46:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007e4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007e4e:	4642      	mov	r2, r8
 8007e50:	464b      	mov	r3, r9
 8007e52:	1891      	adds	r1, r2, r2
 8007e54:	6239      	str	r1, [r7, #32]
 8007e56:	415b      	adcs	r3, r3
 8007e58:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e5e:	4641      	mov	r1, r8
 8007e60:	1854      	adds	r4, r2, r1
 8007e62:	4649      	mov	r1, r9
 8007e64:	eb43 0501 	adc.w	r5, r3, r1
 8007e68:	f04f 0200 	mov.w	r2, #0
 8007e6c:	f04f 0300 	mov.w	r3, #0
 8007e70:	00eb      	lsls	r3, r5, #3
 8007e72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e76:	00e2      	lsls	r2, r4, #3
 8007e78:	4614      	mov	r4, r2
 8007e7a:	461d      	mov	r5, r3
 8007e7c:	4643      	mov	r3, r8
 8007e7e:	18e3      	adds	r3, r4, r3
 8007e80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e84:	464b      	mov	r3, r9
 8007e86:	eb45 0303 	adc.w	r3, r5, r3
 8007e8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007e9e:	f04f 0200 	mov.w	r2, #0
 8007ea2:	f04f 0300 	mov.w	r3, #0
 8007ea6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007eaa:	4629      	mov	r1, r5
 8007eac:	008b      	lsls	r3, r1, #2
 8007eae:	4621      	mov	r1, r4
 8007eb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007eb4:	4621      	mov	r1, r4
 8007eb6:	008a      	lsls	r2, r1, #2
 8007eb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007ebc:	f7f8 ff14 	bl	8000ce8 <__aeabi_uldivmod>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	4b60      	ldr	r3, [pc, #384]	@ (8008048 <UART_SetConfig+0x4e4>)
 8007ec6:	fba3 2302 	umull	r2, r3, r3, r2
 8007eca:	095b      	lsrs	r3, r3, #5
 8007ecc:	011c      	lsls	r4, r3, #4
 8007ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ed8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007edc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007ee0:	4642      	mov	r2, r8
 8007ee2:	464b      	mov	r3, r9
 8007ee4:	1891      	adds	r1, r2, r2
 8007ee6:	61b9      	str	r1, [r7, #24]
 8007ee8:	415b      	adcs	r3, r3
 8007eea:	61fb      	str	r3, [r7, #28]
 8007eec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ef0:	4641      	mov	r1, r8
 8007ef2:	1851      	adds	r1, r2, r1
 8007ef4:	6139      	str	r1, [r7, #16]
 8007ef6:	4649      	mov	r1, r9
 8007ef8:	414b      	adcs	r3, r1
 8007efa:	617b      	str	r3, [r7, #20]
 8007efc:	f04f 0200 	mov.w	r2, #0
 8007f00:	f04f 0300 	mov.w	r3, #0
 8007f04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f08:	4659      	mov	r1, fp
 8007f0a:	00cb      	lsls	r3, r1, #3
 8007f0c:	4651      	mov	r1, sl
 8007f0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f12:	4651      	mov	r1, sl
 8007f14:	00ca      	lsls	r2, r1, #3
 8007f16:	4610      	mov	r0, r2
 8007f18:	4619      	mov	r1, r3
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	4642      	mov	r2, r8
 8007f1e:	189b      	adds	r3, r3, r2
 8007f20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f24:	464b      	mov	r3, r9
 8007f26:	460a      	mov	r2, r1
 8007f28:	eb42 0303 	adc.w	r3, r2, r3
 8007f2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007f3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007f3c:	f04f 0200 	mov.w	r2, #0
 8007f40:	f04f 0300 	mov.w	r3, #0
 8007f44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007f48:	4649      	mov	r1, r9
 8007f4a:	008b      	lsls	r3, r1, #2
 8007f4c:	4641      	mov	r1, r8
 8007f4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f52:	4641      	mov	r1, r8
 8007f54:	008a      	lsls	r2, r1, #2
 8007f56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007f5a:	f7f8 fec5 	bl	8000ce8 <__aeabi_uldivmod>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	460b      	mov	r3, r1
 8007f62:	4611      	mov	r1, r2
 8007f64:	4b38      	ldr	r3, [pc, #224]	@ (8008048 <UART_SetConfig+0x4e4>)
 8007f66:	fba3 2301 	umull	r2, r3, r3, r1
 8007f6a:	095b      	lsrs	r3, r3, #5
 8007f6c:	2264      	movs	r2, #100	@ 0x64
 8007f6e:	fb02 f303 	mul.w	r3, r2, r3
 8007f72:	1acb      	subs	r3, r1, r3
 8007f74:	011b      	lsls	r3, r3, #4
 8007f76:	3332      	adds	r3, #50	@ 0x32
 8007f78:	4a33      	ldr	r2, [pc, #204]	@ (8008048 <UART_SetConfig+0x4e4>)
 8007f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f7e:	095b      	lsrs	r3, r3, #5
 8007f80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007f84:	441c      	add	r4, r3
 8007f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007f90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007f94:	4642      	mov	r2, r8
 8007f96:	464b      	mov	r3, r9
 8007f98:	1891      	adds	r1, r2, r2
 8007f9a:	60b9      	str	r1, [r7, #8]
 8007f9c:	415b      	adcs	r3, r3
 8007f9e:	60fb      	str	r3, [r7, #12]
 8007fa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fa4:	4641      	mov	r1, r8
 8007fa6:	1851      	adds	r1, r2, r1
 8007fa8:	6039      	str	r1, [r7, #0]
 8007faa:	4649      	mov	r1, r9
 8007fac:	414b      	adcs	r3, r1
 8007fae:	607b      	str	r3, [r7, #4]
 8007fb0:	f04f 0200 	mov.w	r2, #0
 8007fb4:	f04f 0300 	mov.w	r3, #0
 8007fb8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007fbc:	4659      	mov	r1, fp
 8007fbe:	00cb      	lsls	r3, r1, #3
 8007fc0:	4651      	mov	r1, sl
 8007fc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fc6:	4651      	mov	r1, sl
 8007fc8:	00ca      	lsls	r2, r1, #3
 8007fca:	4610      	mov	r0, r2
 8007fcc:	4619      	mov	r1, r3
 8007fce:	4603      	mov	r3, r0
 8007fd0:	4642      	mov	r2, r8
 8007fd2:	189b      	adds	r3, r3, r2
 8007fd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007fd6:	464b      	mov	r3, r9
 8007fd8:	460a      	mov	r2, r1
 8007fda:	eb42 0303 	adc.w	r3, r2, r3
 8007fde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	663b      	str	r3, [r7, #96]	@ 0x60
 8007fea:	667a      	str	r2, [r7, #100]	@ 0x64
 8007fec:	f04f 0200 	mov.w	r2, #0
 8007ff0:	f04f 0300 	mov.w	r3, #0
 8007ff4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007ff8:	4649      	mov	r1, r9
 8007ffa:	008b      	lsls	r3, r1, #2
 8007ffc:	4641      	mov	r1, r8
 8007ffe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008002:	4641      	mov	r1, r8
 8008004:	008a      	lsls	r2, r1, #2
 8008006:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800800a:	f7f8 fe6d 	bl	8000ce8 <__aeabi_uldivmod>
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	4b0d      	ldr	r3, [pc, #52]	@ (8008048 <UART_SetConfig+0x4e4>)
 8008014:	fba3 1302 	umull	r1, r3, r3, r2
 8008018:	095b      	lsrs	r3, r3, #5
 800801a:	2164      	movs	r1, #100	@ 0x64
 800801c:	fb01 f303 	mul.w	r3, r1, r3
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	011b      	lsls	r3, r3, #4
 8008024:	3332      	adds	r3, #50	@ 0x32
 8008026:	4a08      	ldr	r2, [pc, #32]	@ (8008048 <UART_SetConfig+0x4e4>)
 8008028:	fba2 2303 	umull	r2, r3, r2, r3
 800802c:	095b      	lsrs	r3, r3, #5
 800802e:	f003 020f 	and.w	r2, r3, #15
 8008032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4422      	add	r2, r4
 800803a:	609a      	str	r2, [r3, #8]
}
 800803c:	bf00      	nop
 800803e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008042:	46bd      	mov	sp, r7
 8008044:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008048:	51eb851f 	.word	0x51eb851f

0800804c <malloc>:
 800804c:	4b02      	ldr	r3, [pc, #8]	@ (8008058 <malloc+0xc>)
 800804e:	4601      	mov	r1, r0
 8008050:	6818      	ldr	r0, [r3, #0]
 8008052:	f000 b82d 	b.w	80080b0 <_malloc_r>
 8008056:	bf00      	nop
 8008058:	20000018 	.word	0x20000018

0800805c <free>:
 800805c:	4b02      	ldr	r3, [pc, #8]	@ (8008068 <free+0xc>)
 800805e:	4601      	mov	r1, r0
 8008060:	6818      	ldr	r0, [r3, #0]
 8008062:	f002 b839 	b.w	800a0d8 <_free_r>
 8008066:	bf00      	nop
 8008068:	20000018 	.word	0x20000018

0800806c <sbrk_aligned>:
 800806c:	b570      	push	{r4, r5, r6, lr}
 800806e:	4e0f      	ldr	r6, [pc, #60]	@ (80080ac <sbrk_aligned+0x40>)
 8008070:	460c      	mov	r4, r1
 8008072:	6831      	ldr	r1, [r6, #0]
 8008074:	4605      	mov	r5, r0
 8008076:	b911      	cbnz	r1, 800807e <sbrk_aligned+0x12>
 8008078:	f001 f98a 	bl	8009390 <_sbrk_r>
 800807c:	6030      	str	r0, [r6, #0]
 800807e:	4621      	mov	r1, r4
 8008080:	4628      	mov	r0, r5
 8008082:	f001 f985 	bl	8009390 <_sbrk_r>
 8008086:	1c43      	adds	r3, r0, #1
 8008088:	d103      	bne.n	8008092 <sbrk_aligned+0x26>
 800808a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800808e:	4620      	mov	r0, r4
 8008090:	bd70      	pop	{r4, r5, r6, pc}
 8008092:	1cc4      	adds	r4, r0, #3
 8008094:	f024 0403 	bic.w	r4, r4, #3
 8008098:	42a0      	cmp	r0, r4
 800809a:	d0f8      	beq.n	800808e <sbrk_aligned+0x22>
 800809c:	1a21      	subs	r1, r4, r0
 800809e:	4628      	mov	r0, r5
 80080a0:	f001 f976 	bl	8009390 <_sbrk_r>
 80080a4:	3001      	adds	r0, #1
 80080a6:	d1f2      	bne.n	800808e <sbrk_aligned+0x22>
 80080a8:	e7ef      	b.n	800808a <sbrk_aligned+0x1e>
 80080aa:	bf00      	nop
 80080ac:	2000042c 	.word	0x2000042c

080080b0 <_malloc_r>:
 80080b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080b4:	1ccd      	adds	r5, r1, #3
 80080b6:	f025 0503 	bic.w	r5, r5, #3
 80080ba:	3508      	adds	r5, #8
 80080bc:	2d0c      	cmp	r5, #12
 80080be:	bf38      	it	cc
 80080c0:	250c      	movcc	r5, #12
 80080c2:	2d00      	cmp	r5, #0
 80080c4:	4606      	mov	r6, r0
 80080c6:	db01      	blt.n	80080cc <_malloc_r+0x1c>
 80080c8:	42a9      	cmp	r1, r5
 80080ca:	d904      	bls.n	80080d6 <_malloc_r+0x26>
 80080cc:	230c      	movs	r3, #12
 80080ce:	6033      	str	r3, [r6, #0]
 80080d0:	2000      	movs	r0, #0
 80080d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80081ac <_malloc_r+0xfc>
 80080da:	f000 f869 	bl	80081b0 <__malloc_lock>
 80080de:	f8d8 3000 	ldr.w	r3, [r8]
 80080e2:	461c      	mov	r4, r3
 80080e4:	bb44      	cbnz	r4, 8008138 <_malloc_r+0x88>
 80080e6:	4629      	mov	r1, r5
 80080e8:	4630      	mov	r0, r6
 80080ea:	f7ff ffbf 	bl	800806c <sbrk_aligned>
 80080ee:	1c43      	adds	r3, r0, #1
 80080f0:	4604      	mov	r4, r0
 80080f2:	d158      	bne.n	80081a6 <_malloc_r+0xf6>
 80080f4:	f8d8 4000 	ldr.w	r4, [r8]
 80080f8:	4627      	mov	r7, r4
 80080fa:	2f00      	cmp	r7, #0
 80080fc:	d143      	bne.n	8008186 <_malloc_r+0xd6>
 80080fe:	2c00      	cmp	r4, #0
 8008100:	d04b      	beq.n	800819a <_malloc_r+0xea>
 8008102:	6823      	ldr	r3, [r4, #0]
 8008104:	4639      	mov	r1, r7
 8008106:	4630      	mov	r0, r6
 8008108:	eb04 0903 	add.w	r9, r4, r3
 800810c:	f001 f940 	bl	8009390 <_sbrk_r>
 8008110:	4581      	cmp	r9, r0
 8008112:	d142      	bne.n	800819a <_malloc_r+0xea>
 8008114:	6821      	ldr	r1, [r4, #0]
 8008116:	1a6d      	subs	r5, r5, r1
 8008118:	4629      	mov	r1, r5
 800811a:	4630      	mov	r0, r6
 800811c:	f7ff ffa6 	bl	800806c <sbrk_aligned>
 8008120:	3001      	adds	r0, #1
 8008122:	d03a      	beq.n	800819a <_malloc_r+0xea>
 8008124:	6823      	ldr	r3, [r4, #0]
 8008126:	442b      	add	r3, r5
 8008128:	6023      	str	r3, [r4, #0]
 800812a:	f8d8 3000 	ldr.w	r3, [r8]
 800812e:	685a      	ldr	r2, [r3, #4]
 8008130:	bb62      	cbnz	r2, 800818c <_malloc_r+0xdc>
 8008132:	f8c8 7000 	str.w	r7, [r8]
 8008136:	e00f      	b.n	8008158 <_malloc_r+0xa8>
 8008138:	6822      	ldr	r2, [r4, #0]
 800813a:	1b52      	subs	r2, r2, r5
 800813c:	d420      	bmi.n	8008180 <_malloc_r+0xd0>
 800813e:	2a0b      	cmp	r2, #11
 8008140:	d917      	bls.n	8008172 <_malloc_r+0xc2>
 8008142:	1961      	adds	r1, r4, r5
 8008144:	42a3      	cmp	r3, r4
 8008146:	6025      	str	r5, [r4, #0]
 8008148:	bf18      	it	ne
 800814a:	6059      	strne	r1, [r3, #4]
 800814c:	6863      	ldr	r3, [r4, #4]
 800814e:	bf08      	it	eq
 8008150:	f8c8 1000 	streq.w	r1, [r8]
 8008154:	5162      	str	r2, [r4, r5]
 8008156:	604b      	str	r3, [r1, #4]
 8008158:	4630      	mov	r0, r6
 800815a:	f000 f82f 	bl	80081bc <__malloc_unlock>
 800815e:	f104 000b 	add.w	r0, r4, #11
 8008162:	1d23      	adds	r3, r4, #4
 8008164:	f020 0007 	bic.w	r0, r0, #7
 8008168:	1ac2      	subs	r2, r0, r3
 800816a:	bf1c      	itt	ne
 800816c:	1a1b      	subne	r3, r3, r0
 800816e:	50a3      	strne	r3, [r4, r2]
 8008170:	e7af      	b.n	80080d2 <_malloc_r+0x22>
 8008172:	6862      	ldr	r2, [r4, #4]
 8008174:	42a3      	cmp	r3, r4
 8008176:	bf0c      	ite	eq
 8008178:	f8c8 2000 	streq.w	r2, [r8]
 800817c:	605a      	strne	r2, [r3, #4]
 800817e:	e7eb      	b.n	8008158 <_malloc_r+0xa8>
 8008180:	4623      	mov	r3, r4
 8008182:	6864      	ldr	r4, [r4, #4]
 8008184:	e7ae      	b.n	80080e4 <_malloc_r+0x34>
 8008186:	463c      	mov	r4, r7
 8008188:	687f      	ldr	r7, [r7, #4]
 800818a:	e7b6      	b.n	80080fa <_malloc_r+0x4a>
 800818c:	461a      	mov	r2, r3
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	42a3      	cmp	r3, r4
 8008192:	d1fb      	bne.n	800818c <_malloc_r+0xdc>
 8008194:	2300      	movs	r3, #0
 8008196:	6053      	str	r3, [r2, #4]
 8008198:	e7de      	b.n	8008158 <_malloc_r+0xa8>
 800819a:	230c      	movs	r3, #12
 800819c:	6033      	str	r3, [r6, #0]
 800819e:	4630      	mov	r0, r6
 80081a0:	f000 f80c 	bl	80081bc <__malloc_unlock>
 80081a4:	e794      	b.n	80080d0 <_malloc_r+0x20>
 80081a6:	6005      	str	r5, [r0, #0]
 80081a8:	e7d6      	b.n	8008158 <_malloc_r+0xa8>
 80081aa:	bf00      	nop
 80081ac:	20000430 	.word	0x20000430

080081b0 <__malloc_lock>:
 80081b0:	4801      	ldr	r0, [pc, #4]	@ (80081b8 <__malloc_lock+0x8>)
 80081b2:	f001 b93a 	b.w	800942a <__retarget_lock_acquire_recursive>
 80081b6:	bf00      	nop
 80081b8:	20000574 	.word	0x20000574

080081bc <__malloc_unlock>:
 80081bc:	4801      	ldr	r0, [pc, #4]	@ (80081c4 <__malloc_unlock+0x8>)
 80081be:	f001 b935 	b.w	800942c <__retarget_lock_release_recursive>
 80081c2:	bf00      	nop
 80081c4:	20000574 	.word	0x20000574

080081c8 <__cvt>:
 80081c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081cc:	ec57 6b10 	vmov	r6, r7, d0
 80081d0:	2f00      	cmp	r7, #0
 80081d2:	460c      	mov	r4, r1
 80081d4:	4619      	mov	r1, r3
 80081d6:	463b      	mov	r3, r7
 80081d8:	bfbb      	ittet	lt
 80081da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80081de:	461f      	movlt	r7, r3
 80081e0:	2300      	movge	r3, #0
 80081e2:	232d      	movlt	r3, #45	@ 0x2d
 80081e4:	700b      	strb	r3, [r1, #0]
 80081e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80081ec:	4691      	mov	r9, r2
 80081ee:	f023 0820 	bic.w	r8, r3, #32
 80081f2:	bfbc      	itt	lt
 80081f4:	4632      	movlt	r2, r6
 80081f6:	4616      	movlt	r6, r2
 80081f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80081fc:	d005      	beq.n	800820a <__cvt+0x42>
 80081fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008202:	d100      	bne.n	8008206 <__cvt+0x3e>
 8008204:	3401      	adds	r4, #1
 8008206:	2102      	movs	r1, #2
 8008208:	e000      	b.n	800820c <__cvt+0x44>
 800820a:	2103      	movs	r1, #3
 800820c:	ab03      	add	r3, sp, #12
 800820e:	9301      	str	r3, [sp, #4]
 8008210:	ab02      	add	r3, sp, #8
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	ec47 6b10 	vmov	d0, r6, r7
 8008218:	4653      	mov	r3, sl
 800821a:	4622      	mov	r2, r4
 800821c:	f001 f998 	bl	8009550 <_dtoa_r>
 8008220:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008224:	4605      	mov	r5, r0
 8008226:	d119      	bne.n	800825c <__cvt+0x94>
 8008228:	f019 0f01 	tst.w	r9, #1
 800822c:	d00e      	beq.n	800824c <__cvt+0x84>
 800822e:	eb00 0904 	add.w	r9, r0, r4
 8008232:	2200      	movs	r2, #0
 8008234:	2300      	movs	r3, #0
 8008236:	4630      	mov	r0, r6
 8008238:	4639      	mov	r1, r7
 800823a:	f7f8 fc75 	bl	8000b28 <__aeabi_dcmpeq>
 800823e:	b108      	cbz	r0, 8008244 <__cvt+0x7c>
 8008240:	f8cd 900c 	str.w	r9, [sp, #12]
 8008244:	2230      	movs	r2, #48	@ 0x30
 8008246:	9b03      	ldr	r3, [sp, #12]
 8008248:	454b      	cmp	r3, r9
 800824a:	d31e      	bcc.n	800828a <__cvt+0xc2>
 800824c:	9b03      	ldr	r3, [sp, #12]
 800824e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008250:	1b5b      	subs	r3, r3, r5
 8008252:	4628      	mov	r0, r5
 8008254:	6013      	str	r3, [r2, #0]
 8008256:	b004      	add	sp, #16
 8008258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800825c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008260:	eb00 0904 	add.w	r9, r0, r4
 8008264:	d1e5      	bne.n	8008232 <__cvt+0x6a>
 8008266:	7803      	ldrb	r3, [r0, #0]
 8008268:	2b30      	cmp	r3, #48	@ 0x30
 800826a:	d10a      	bne.n	8008282 <__cvt+0xba>
 800826c:	2200      	movs	r2, #0
 800826e:	2300      	movs	r3, #0
 8008270:	4630      	mov	r0, r6
 8008272:	4639      	mov	r1, r7
 8008274:	f7f8 fc58 	bl	8000b28 <__aeabi_dcmpeq>
 8008278:	b918      	cbnz	r0, 8008282 <__cvt+0xba>
 800827a:	f1c4 0401 	rsb	r4, r4, #1
 800827e:	f8ca 4000 	str.w	r4, [sl]
 8008282:	f8da 3000 	ldr.w	r3, [sl]
 8008286:	4499      	add	r9, r3
 8008288:	e7d3      	b.n	8008232 <__cvt+0x6a>
 800828a:	1c59      	adds	r1, r3, #1
 800828c:	9103      	str	r1, [sp, #12]
 800828e:	701a      	strb	r2, [r3, #0]
 8008290:	e7d9      	b.n	8008246 <__cvt+0x7e>

08008292 <__exponent>:
 8008292:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008294:	2900      	cmp	r1, #0
 8008296:	bfba      	itte	lt
 8008298:	4249      	neglt	r1, r1
 800829a:	232d      	movlt	r3, #45	@ 0x2d
 800829c:	232b      	movge	r3, #43	@ 0x2b
 800829e:	2909      	cmp	r1, #9
 80082a0:	7002      	strb	r2, [r0, #0]
 80082a2:	7043      	strb	r3, [r0, #1]
 80082a4:	dd29      	ble.n	80082fa <__exponent+0x68>
 80082a6:	f10d 0307 	add.w	r3, sp, #7
 80082aa:	461d      	mov	r5, r3
 80082ac:	270a      	movs	r7, #10
 80082ae:	461a      	mov	r2, r3
 80082b0:	fbb1 f6f7 	udiv	r6, r1, r7
 80082b4:	fb07 1416 	mls	r4, r7, r6, r1
 80082b8:	3430      	adds	r4, #48	@ 0x30
 80082ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 80082be:	460c      	mov	r4, r1
 80082c0:	2c63      	cmp	r4, #99	@ 0x63
 80082c2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80082c6:	4631      	mov	r1, r6
 80082c8:	dcf1      	bgt.n	80082ae <__exponent+0x1c>
 80082ca:	3130      	adds	r1, #48	@ 0x30
 80082cc:	1e94      	subs	r4, r2, #2
 80082ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80082d2:	1c41      	adds	r1, r0, #1
 80082d4:	4623      	mov	r3, r4
 80082d6:	42ab      	cmp	r3, r5
 80082d8:	d30a      	bcc.n	80082f0 <__exponent+0x5e>
 80082da:	f10d 0309 	add.w	r3, sp, #9
 80082de:	1a9b      	subs	r3, r3, r2
 80082e0:	42ac      	cmp	r4, r5
 80082e2:	bf88      	it	hi
 80082e4:	2300      	movhi	r3, #0
 80082e6:	3302      	adds	r3, #2
 80082e8:	4403      	add	r3, r0
 80082ea:	1a18      	subs	r0, r3, r0
 80082ec:	b003      	add	sp, #12
 80082ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80082f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80082f8:	e7ed      	b.n	80082d6 <__exponent+0x44>
 80082fa:	2330      	movs	r3, #48	@ 0x30
 80082fc:	3130      	adds	r1, #48	@ 0x30
 80082fe:	7083      	strb	r3, [r0, #2]
 8008300:	70c1      	strb	r1, [r0, #3]
 8008302:	1d03      	adds	r3, r0, #4
 8008304:	e7f1      	b.n	80082ea <__exponent+0x58>
	...

08008308 <_printf_float>:
 8008308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800830c:	b08d      	sub	sp, #52	@ 0x34
 800830e:	460c      	mov	r4, r1
 8008310:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008314:	4616      	mov	r6, r2
 8008316:	461f      	mov	r7, r3
 8008318:	4605      	mov	r5, r0
 800831a:	f001 f801 	bl	8009320 <_localeconv_r>
 800831e:	6803      	ldr	r3, [r0, #0]
 8008320:	9304      	str	r3, [sp, #16]
 8008322:	4618      	mov	r0, r3
 8008324:	f7f7 ffd4 	bl	80002d0 <strlen>
 8008328:	2300      	movs	r3, #0
 800832a:	930a      	str	r3, [sp, #40]	@ 0x28
 800832c:	f8d8 3000 	ldr.w	r3, [r8]
 8008330:	9005      	str	r0, [sp, #20]
 8008332:	3307      	adds	r3, #7
 8008334:	f023 0307 	bic.w	r3, r3, #7
 8008338:	f103 0208 	add.w	r2, r3, #8
 800833c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008340:	f8d4 b000 	ldr.w	fp, [r4]
 8008344:	f8c8 2000 	str.w	r2, [r8]
 8008348:	e9d3 8900 	ldrd	r8, r9, [r3]
 800834c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008350:	9307      	str	r3, [sp, #28]
 8008352:	f8cd 8018 	str.w	r8, [sp, #24]
 8008356:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800835a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800835e:	4b9c      	ldr	r3, [pc, #624]	@ (80085d0 <_printf_float+0x2c8>)
 8008360:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008364:	f7f8 fc12 	bl	8000b8c <__aeabi_dcmpun>
 8008368:	bb70      	cbnz	r0, 80083c8 <_printf_float+0xc0>
 800836a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800836e:	4b98      	ldr	r3, [pc, #608]	@ (80085d0 <_printf_float+0x2c8>)
 8008370:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008374:	f7f8 fbec 	bl	8000b50 <__aeabi_dcmple>
 8008378:	bb30      	cbnz	r0, 80083c8 <_printf_float+0xc0>
 800837a:	2200      	movs	r2, #0
 800837c:	2300      	movs	r3, #0
 800837e:	4640      	mov	r0, r8
 8008380:	4649      	mov	r1, r9
 8008382:	f7f8 fbdb 	bl	8000b3c <__aeabi_dcmplt>
 8008386:	b110      	cbz	r0, 800838e <_printf_float+0x86>
 8008388:	232d      	movs	r3, #45	@ 0x2d
 800838a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800838e:	4a91      	ldr	r2, [pc, #580]	@ (80085d4 <_printf_float+0x2cc>)
 8008390:	4b91      	ldr	r3, [pc, #580]	@ (80085d8 <_printf_float+0x2d0>)
 8008392:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008396:	bf94      	ite	ls
 8008398:	4690      	movls	r8, r2
 800839a:	4698      	movhi	r8, r3
 800839c:	2303      	movs	r3, #3
 800839e:	6123      	str	r3, [r4, #16]
 80083a0:	f02b 0304 	bic.w	r3, fp, #4
 80083a4:	6023      	str	r3, [r4, #0]
 80083a6:	f04f 0900 	mov.w	r9, #0
 80083aa:	9700      	str	r7, [sp, #0]
 80083ac:	4633      	mov	r3, r6
 80083ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 80083b0:	4621      	mov	r1, r4
 80083b2:	4628      	mov	r0, r5
 80083b4:	f000 f9d2 	bl	800875c <_printf_common>
 80083b8:	3001      	adds	r0, #1
 80083ba:	f040 808d 	bne.w	80084d8 <_printf_float+0x1d0>
 80083be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083c2:	b00d      	add	sp, #52	@ 0x34
 80083c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c8:	4642      	mov	r2, r8
 80083ca:	464b      	mov	r3, r9
 80083cc:	4640      	mov	r0, r8
 80083ce:	4649      	mov	r1, r9
 80083d0:	f7f8 fbdc 	bl	8000b8c <__aeabi_dcmpun>
 80083d4:	b140      	cbz	r0, 80083e8 <_printf_float+0xe0>
 80083d6:	464b      	mov	r3, r9
 80083d8:	2b00      	cmp	r3, #0
 80083da:	bfbc      	itt	lt
 80083dc:	232d      	movlt	r3, #45	@ 0x2d
 80083de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80083e2:	4a7e      	ldr	r2, [pc, #504]	@ (80085dc <_printf_float+0x2d4>)
 80083e4:	4b7e      	ldr	r3, [pc, #504]	@ (80085e0 <_printf_float+0x2d8>)
 80083e6:	e7d4      	b.n	8008392 <_printf_float+0x8a>
 80083e8:	6863      	ldr	r3, [r4, #4]
 80083ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80083ee:	9206      	str	r2, [sp, #24]
 80083f0:	1c5a      	adds	r2, r3, #1
 80083f2:	d13b      	bne.n	800846c <_printf_float+0x164>
 80083f4:	2306      	movs	r3, #6
 80083f6:	6063      	str	r3, [r4, #4]
 80083f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80083fc:	2300      	movs	r3, #0
 80083fe:	6022      	str	r2, [r4, #0]
 8008400:	9303      	str	r3, [sp, #12]
 8008402:	ab0a      	add	r3, sp, #40	@ 0x28
 8008404:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008408:	ab09      	add	r3, sp, #36	@ 0x24
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	6861      	ldr	r1, [r4, #4]
 800840e:	ec49 8b10 	vmov	d0, r8, r9
 8008412:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008416:	4628      	mov	r0, r5
 8008418:	f7ff fed6 	bl	80081c8 <__cvt>
 800841c:	9b06      	ldr	r3, [sp, #24]
 800841e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008420:	2b47      	cmp	r3, #71	@ 0x47
 8008422:	4680      	mov	r8, r0
 8008424:	d129      	bne.n	800847a <_printf_float+0x172>
 8008426:	1cc8      	adds	r0, r1, #3
 8008428:	db02      	blt.n	8008430 <_printf_float+0x128>
 800842a:	6863      	ldr	r3, [r4, #4]
 800842c:	4299      	cmp	r1, r3
 800842e:	dd41      	ble.n	80084b4 <_printf_float+0x1ac>
 8008430:	f1aa 0a02 	sub.w	sl, sl, #2
 8008434:	fa5f fa8a 	uxtb.w	sl, sl
 8008438:	3901      	subs	r1, #1
 800843a:	4652      	mov	r2, sl
 800843c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008440:	9109      	str	r1, [sp, #36]	@ 0x24
 8008442:	f7ff ff26 	bl	8008292 <__exponent>
 8008446:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008448:	1813      	adds	r3, r2, r0
 800844a:	2a01      	cmp	r2, #1
 800844c:	4681      	mov	r9, r0
 800844e:	6123      	str	r3, [r4, #16]
 8008450:	dc02      	bgt.n	8008458 <_printf_float+0x150>
 8008452:	6822      	ldr	r2, [r4, #0]
 8008454:	07d2      	lsls	r2, r2, #31
 8008456:	d501      	bpl.n	800845c <_printf_float+0x154>
 8008458:	3301      	adds	r3, #1
 800845a:	6123      	str	r3, [r4, #16]
 800845c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008460:	2b00      	cmp	r3, #0
 8008462:	d0a2      	beq.n	80083aa <_printf_float+0xa2>
 8008464:	232d      	movs	r3, #45	@ 0x2d
 8008466:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800846a:	e79e      	b.n	80083aa <_printf_float+0xa2>
 800846c:	9a06      	ldr	r2, [sp, #24]
 800846e:	2a47      	cmp	r2, #71	@ 0x47
 8008470:	d1c2      	bne.n	80083f8 <_printf_float+0xf0>
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1c0      	bne.n	80083f8 <_printf_float+0xf0>
 8008476:	2301      	movs	r3, #1
 8008478:	e7bd      	b.n	80083f6 <_printf_float+0xee>
 800847a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800847e:	d9db      	bls.n	8008438 <_printf_float+0x130>
 8008480:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008484:	d118      	bne.n	80084b8 <_printf_float+0x1b0>
 8008486:	2900      	cmp	r1, #0
 8008488:	6863      	ldr	r3, [r4, #4]
 800848a:	dd0b      	ble.n	80084a4 <_printf_float+0x19c>
 800848c:	6121      	str	r1, [r4, #16]
 800848e:	b913      	cbnz	r3, 8008496 <_printf_float+0x18e>
 8008490:	6822      	ldr	r2, [r4, #0]
 8008492:	07d0      	lsls	r0, r2, #31
 8008494:	d502      	bpl.n	800849c <_printf_float+0x194>
 8008496:	3301      	adds	r3, #1
 8008498:	440b      	add	r3, r1
 800849a:	6123      	str	r3, [r4, #16]
 800849c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800849e:	f04f 0900 	mov.w	r9, #0
 80084a2:	e7db      	b.n	800845c <_printf_float+0x154>
 80084a4:	b913      	cbnz	r3, 80084ac <_printf_float+0x1a4>
 80084a6:	6822      	ldr	r2, [r4, #0]
 80084a8:	07d2      	lsls	r2, r2, #31
 80084aa:	d501      	bpl.n	80084b0 <_printf_float+0x1a8>
 80084ac:	3302      	adds	r3, #2
 80084ae:	e7f4      	b.n	800849a <_printf_float+0x192>
 80084b0:	2301      	movs	r3, #1
 80084b2:	e7f2      	b.n	800849a <_printf_float+0x192>
 80084b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80084b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084ba:	4299      	cmp	r1, r3
 80084bc:	db05      	blt.n	80084ca <_printf_float+0x1c2>
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	6121      	str	r1, [r4, #16]
 80084c2:	07d8      	lsls	r0, r3, #31
 80084c4:	d5ea      	bpl.n	800849c <_printf_float+0x194>
 80084c6:	1c4b      	adds	r3, r1, #1
 80084c8:	e7e7      	b.n	800849a <_printf_float+0x192>
 80084ca:	2900      	cmp	r1, #0
 80084cc:	bfd4      	ite	le
 80084ce:	f1c1 0202 	rsble	r2, r1, #2
 80084d2:	2201      	movgt	r2, #1
 80084d4:	4413      	add	r3, r2
 80084d6:	e7e0      	b.n	800849a <_printf_float+0x192>
 80084d8:	6823      	ldr	r3, [r4, #0]
 80084da:	055a      	lsls	r2, r3, #21
 80084dc:	d407      	bmi.n	80084ee <_printf_float+0x1e6>
 80084de:	6923      	ldr	r3, [r4, #16]
 80084e0:	4642      	mov	r2, r8
 80084e2:	4631      	mov	r1, r6
 80084e4:	4628      	mov	r0, r5
 80084e6:	47b8      	blx	r7
 80084e8:	3001      	adds	r0, #1
 80084ea:	d12b      	bne.n	8008544 <_printf_float+0x23c>
 80084ec:	e767      	b.n	80083be <_printf_float+0xb6>
 80084ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80084f2:	f240 80dd 	bls.w	80086b0 <_printf_float+0x3a8>
 80084f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80084fa:	2200      	movs	r2, #0
 80084fc:	2300      	movs	r3, #0
 80084fe:	f7f8 fb13 	bl	8000b28 <__aeabi_dcmpeq>
 8008502:	2800      	cmp	r0, #0
 8008504:	d033      	beq.n	800856e <_printf_float+0x266>
 8008506:	4a37      	ldr	r2, [pc, #220]	@ (80085e4 <_printf_float+0x2dc>)
 8008508:	2301      	movs	r3, #1
 800850a:	4631      	mov	r1, r6
 800850c:	4628      	mov	r0, r5
 800850e:	47b8      	blx	r7
 8008510:	3001      	adds	r0, #1
 8008512:	f43f af54 	beq.w	80083be <_printf_float+0xb6>
 8008516:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800851a:	4543      	cmp	r3, r8
 800851c:	db02      	blt.n	8008524 <_printf_float+0x21c>
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	07d8      	lsls	r0, r3, #31
 8008522:	d50f      	bpl.n	8008544 <_printf_float+0x23c>
 8008524:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008528:	4631      	mov	r1, r6
 800852a:	4628      	mov	r0, r5
 800852c:	47b8      	blx	r7
 800852e:	3001      	adds	r0, #1
 8008530:	f43f af45 	beq.w	80083be <_printf_float+0xb6>
 8008534:	f04f 0900 	mov.w	r9, #0
 8008538:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800853c:	f104 0a1a 	add.w	sl, r4, #26
 8008540:	45c8      	cmp	r8, r9
 8008542:	dc09      	bgt.n	8008558 <_printf_float+0x250>
 8008544:	6823      	ldr	r3, [r4, #0]
 8008546:	079b      	lsls	r3, r3, #30
 8008548:	f100 8103 	bmi.w	8008752 <_printf_float+0x44a>
 800854c:	68e0      	ldr	r0, [r4, #12]
 800854e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008550:	4298      	cmp	r0, r3
 8008552:	bfb8      	it	lt
 8008554:	4618      	movlt	r0, r3
 8008556:	e734      	b.n	80083c2 <_printf_float+0xba>
 8008558:	2301      	movs	r3, #1
 800855a:	4652      	mov	r2, sl
 800855c:	4631      	mov	r1, r6
 800855e:	4628      	mov	r0, r5
 8008560:	47b8      	blx	r7
 8008562:	3001      	adds	r0, #1
 8008564:	f43f af2b 	beq.w	80083be <_printf_float+0xb6>
 8008568:	f109 0901 	add.w	r9, r9, #1
 800856c:	e7e8      	b.n	8008540 <_printf_float+0x238>
 800856e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008570:	2b00      	cmp	r3, #0
 8008572:	dc39      	bgt.n	80085e8 <_printf_float+0x2e0>
 8008574:	4a1b      	ldr	r2, [pc, #108]	@ (80085e4 <_printf_float+0x2dc>)
 8008576:	2301      	movs	r3, #1
 8008578:	4631      	mov	r1, r6
 800857a:	4628      	mov	r0, r5
 800857c:	47b8      	blx	r7
 800857e:	3001      	adds	r0, #1
 8008580:	f43f af1d 	beq.w	80083be <_printf_float+0xb6>
 8008584:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008588:	ea59 0303 	orrs.w	r3, r9, r3
 800858c:	d102      	bne.n	8008594 <_printf_float+0x28c>
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	07d9      	lsls	r1, r3, #31
 8008592:	d5d7      	bpl.n	8008544 <_printf_float+0x23c>
 8008594:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008598:	4631      	mov	r1, r6
 800859a:	4628      	mov	r0, r5
 800859c:	47b8      	blx	r7
 800859e:	3001      	adds	r0, #1
 80085a0:	f43f af0d 	beq.w	80083be <_printf_float+0xb6>
 80085a4:	f04f 0a00 	mov.w	sl, #0
 80085a8:	f104 0b1a 	add.w	fp, r4, #26
 80085ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085ae:	425b      	negs	r3, r3
 80085b0:	4553      	cmp	r3, sl
 80085b2:	dc01      	bgt.n	80085b8 <_printf_float+0x2b0>
 80085b4:	464b      	mov	r3, r9
 80085b6:	e793      	b.n	80084e0 <_printf_float+0x1d8>
 80085b8:	2301      	movs	r3, #1
 80085ba:	465a      	mov	r2, fp
 80085bc:	4631      	mov	r1, r6
 80085be:	4628      	mov	r0, r5
 80085c0:	47b8      	blx	r7
 80085c2:	3001      	adds	r0, #1
 80085c4:	f43f aefb 	beq.w	80083be <_printf_float+0xb6>
 80085c8:	f10a 0a01 	add.w	sl, sl, #1
 80085cc:	e7ee      	b.n	80085ac <_printf_float+0x2a4>
 80085ce:	bf00      	nop
 80085d0:	7fefffff 	.word	0x7fefffff
 80085d4:	0800d0d4 	.word	0x0800d0d4
 80085d8:	0800d0d8 	.word	0x0800d0d8
 80085dc:	0800d0dc 	.word	0x0800d0dc
 80085e0:	0800d0e0 	.word	0x0800d0e0
 80085e4:	0800d0e4 	.word	0x0800d0e4
 80085e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80085ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80085ee:	4553      	cmp	r3, sl
 80085f0:	bfa8      	it	ge
 80085f2:	4653      	movge	r3, sl
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	4699      	mov	r9, r3
 80085f8:	dc36      	bgt.n	8008668 <_printf_float+0x360>
 80085fa:	f04f 0b00 	mov.w	fp, #0
 80085fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008602:	f104 021a 	add.w	r2, r4, #26
 8008606:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008608:	9306      	str	r3, [sp, #24]
 800860a:	eba3 0309 	sub.w	r3, r3, r9
 800860e:	455b      	cmp	r3, fp
 8008610:	dc31      	bgt.n	8008676 <_printf_float+0x36e>
 8008612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008614:	459a      	cmp	sl, r3
 8008616:	dc3a      	bgt.n	800868e <_printf_float+0x386>
 8008618:	6823      	ldr	r3, [r4, #0]
 800861a:	07da      	lsls	r2, r3, #31
 800861c:	d437      	bmi.n	800868e <_printf_float+0x386>
 800861e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008620:	ebaa 0903 	sub.w	r9, sl, r3
 8008624:	9b06      	ldr	r3, [sp, #24]
 8008626:	ebaa 0303 	sub.w	r3, sl, r3
 800862a:	4599      	cmp	r9, r3
 800862c:	bfa8      	it	ge
 800862e:	4699      	movge	r9, r3
 8008630:	f1b9 0f00 	cmp.w	r9, #0
 8008634:	dc33      	bgt.n	800869e <_printf_float+0x396>
 8008636:	f04f 0800 	mov.w	r8, #0
 800863a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800863e:	f104 0b1a 	add.w	fp, r4, #26
 8008642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008644:	ebaa 0303 	sub.w	r3, sl, r3
 8008648:	eba3 0309 	sub.w	r3, r3, r9
 800864c:	4543      	cmp	r3, r8
 800864e:	f77f af79 	ble.w	8008544 <_printf_float+0x23c>
 8008652:	2301      	movs	r3, #1
 8008654:	465a      	mov	r2, fp
 8008656:	4631      	mov	r1, r6
 8008658:	4628      	mov	r0, r5
 800865a:	47b8      	blx	r7
 800865c:	3001      	adds	r0, #1
 800865e:	f43f aeae 	beq.w	80083be <_printf_float+0xb6>
 8008662:	f108 0801 	add.w	r8, r8, #1
 8008666:	e7ec      	b.n	8008642 <_printf_float+0x33a>
 8008668:	4642      	mov	r2, r8
 800866a:	4631      	mov	r1, r6
 800866c:	4628      	mov	r0, r5
 800866e:	47b8      	blx	r7
 8008670:	3001      	adds	r0, #1
 8008672:	d1c2      	bne.n	80085fa <_printf_float+0x2f2>
 8008674:	e6a3      	b.n	80083be <_printf_float+0xb6>
 8008676:	2301      	movs	r3, #1
 8008678:	4631      	mov	r1, r6
 800867a:	4628      	mov	r0, r5
 800867c:	9206      	str	r2, [sp, #24]
 800867e:	47b8      	blx	r7
 8008680:	3001      	adds	r0, #1
 8008682:	f43f ae9c 	beq.w	80083be <_printf_float+0xb6>
 8008686:	9a06      	ldr	r2, [sp, #24]
 8008688:	f10b 0b01 	add.w	fp, fp, #1
 800868c:	e7bb      	b.n	8008606 <_printf_float+0x2fe>
 800868e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008692:	4631      	mov	r1, r6
 8008694:	4628      	mov	r0, r5
 8008696:	47b8      	blx	r7
 8008698:	3001      	adds	r0, #1
 800869a:	d1c0      	bne.n	800861e <_printf_float+0x316>
 800869c:	e68f      	b.n	80083be <_printf_float+0xb6>
 800869e:	9a06      	ldr	r2, [sp, #24]
 80086a0:	464b      	mov	r3, r9
 80086a2:	4442      	add	r2, r8
 80086a4:	4631      	mov	r1, r6
 80086a6:	4628      	mov	r0, r5
 80086a8:	47b8      	blx	r7
 80086aa:	3001      	adds	r0, #1
 80086ac:	d1c3      	bne.n	8008636 <_printf_float+0x32e>
 80086ae:	e686      	b.n	80083be <_printf_float+0xb6>
 80086b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80086b4:	f1ba 0f01 	cmp.w	sl, #1
 80086b8:	dc01      	bgt.n	80086be <_printf_float+0x3b6>
 80086ba:	07db      	lsls	r3, r3, #31
 80086bc:	d536      	bpl.n	800872c <_printf_float+0x424>
 80086be:	2301      	movs	r3, #1
 80086c0:	4642      	mov	r2, r8
 80086c2:	4631      	mov	r1, r6
 80086c4:	4628      	mov	r0, r5
 80086c6:	47b8      	blx	r7
 80086c8:	3001      	adds	r0, #1
 80086ca:	f43f ae78 	beq.w	80083be <_printf_float+0xb6>
 80086ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086d2:	4631      	mov	r1, r6
 80086d4:	4628      	mov	r0, r5
 80086d6:	47b8      	blx	r7
 80086d8:	3001      	adds	r0, #1
 80086da:	f43f ae70 	beq.w	80083be <_printf_float+0xb6>
 80086de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80086e2:	2200      	movs	r2, #0
 80086e4:	2300      	movs	r3, #0
 80086e6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80086ea:	f7f8 fa1d 	bl	8000b28 <__aeabi_dcmpeq>
 80086ee:	b9c0      	cbnz	r0, 8008722 <_printf_float+0x41a>
 80086f0:	4653      	mov	r3, sl
 80086f2:	f108 0201 	add.w	r2, r8, #1
 80086f6:	4631      	mov	r1, r6
 80086f8:	4628      	mov	r0, r5
 80086fa:	47b8      	blx	r7
 80086fc:	3001      	adds	r0, #1
 80086fe:	d10c      	bne.n	800871a <_printf_float+0x412>
 8008700:	e65d      	b.n	80083be <_printf_float+0xb6>
 8008702:	2301      	movs	r3, #1
 8008704:	465a      	mov	r2, fp
 8008706:	4631      	mov	r1, r6
 8008708:	4628      	mov	r0, r5
 800870a:	47b8      	blx	r7
 800870c:	3001      	adds	r0, #1
 800870e:	f43f ae56 	beq.w	80083be <_printf_float+0xb6>
 8008712:	f108 0801 	add.w	r8, r8, #1
 8008716:	45d0      	cmp	r8, sl
 8008718:	dbf3      	blt.n	8008702 <_printf_float+0x3fa>
 800871a:	464b      	mov	r3, r9
 800871c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008720:	e6df      	b.n	80084e2 <_printf_float+0x1da>
 8008722:	f04f 0800 	mov.w	r8, #0
 8008726:	f104 0b1a 	add.w	fp, r4, #26
 800872a:	e7f4      	b.n	8008716 <_printf_float+0x40e>
 800872c:	2301      	movs	r3, #1
 800872e:	4642      	mov	r2, r8
 8008730:	e7e1      	b.n	80086f6 <_printf_float+0x3ee>
 8008732:	2301      	movs	r3, #1
 8008734:	464a      	mov	r2, r9
 8008736:	4631      	mov	r1, r6
 8008738:	4628      	mov	r0, r5
 800873a:	47b8      	blx	r7
 800873c:	3001      	adds	r0, #1
 800873e:	f43f ae3e 	beq.w	80083be <_printf_float+0xb6>
 8008742:	f108 0801 	add.w	r8, r8, #1
 8008746:	68e3      	ldr	r3, [r4, #12]
 8008748:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800874a:	1a5b      	subs	r3, r3, r1
 800874c:	4543      	cmp	r3, r8
 800874e:	dcf0      	bgt.n	8008732 <_printf_float+0x42a>
 8008750:	e6fc      	b.n	800854c <_printf_float+0x244>
 8008752:	f04f 0800 	mov.w	r8, #0
 8008756:	f104 0919 	add.w	r9, r4, #25
 800875a:	e7f4      	b.n	8008746 <_printf_float+0x43e>

0800875c <_printf_common>:
 800875c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008760:	4616      	mov	r6, r2
 8008762:	4698      	mov	r8, r3
 8008764:	688a      	ldr	r2, [r1, #8]
 8008766:	690b      	ldr	r3, [r1, #16]
 8008768:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800876c:	4293      	cmp	r3, r2
 800876e:	bfb8      	it	lt
 8008770:	4613      	movlt	r3, r2
 8008772:	6033      	str	r3, [r6, #0]
 8008774:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008778:	4607      	mov	r7, r0
 800877a:	460c      	mov	r4, r1
 800877c:	b10a      	cbz	r2, 8008782 <_printf_common+0x26>
 800877e:	3301      	adds	r3, #1
 8008780:	6033      	str	r3, [r6, #0]
 8008782:	6823      	ldr	r3, [r4, #0]
 8008784:	0699      	lsls	r1, r3, #26
 8008786:	bf42      	ittt	mi
 8008788:	6833      	ldrmi	r3, [r6, #0]
 800878a:	3302      	addmi	r3, #2
 800878c:	6033      	strmi	r3, [r6, #0]
 800878e:	6825      	ldr	r5, [r4, #0]
 8008790:	f015 0506 	ands.w	r5, r5, #6
 8008794:	d106      	bne.n	80087a4 <_printf_common+0x48>
 8008796:	f104 0a19 	add.w	sl, r4, #25
 800879a:	68e3      	ldr	r3, [r4, #12]
 800879c:	6832      	ldr	r2, [r6, #0]
 800879e:	1a9b      	subs	r3, r3, r2
 80087a0:	42ab      	cmp	r3, r5
 80087a2:	dc26      	bgt.n	80087f2 <_printf_common+0x96>
 80087a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087a8:	6822      	ldr	r2, [r4, #0]
 80087aa:	3b00      	subs	r3, #0
 80087ac:	bf18      	it	ne
 80087ae:	2301      	movne	r3, #1
 80087b0:	0692      	lsls	r2, r2, #26
 80087b2:	d42b      	bmi.n	800880c <_printf_common+0xb0>
 80087b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087b8:	4641      	mov	r1, r8
 80087ba:	4638      	mov	r0, r7
 80087bc:	47c8      	blx	r9
 80087be:	3001      	adds	r0, #1
 80087c0:	d01e      	beq.n	8008800 <_printf_common+0xa4>
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	6922      	ldr	r2, [r4, #16]
 80087c6:	f003 0306 	and.w	r3, r3, #6
 80087ca:	2b04      	cmp	r3, #4
 80087cc:	bf02      	ittt	eq
 80087ce:	68e5      	ldreq	r5, [r4, #12]
 80087d0:	6833      	ldreq	r3, [r6, #0]
 80087d2:	1aed      	subeq	r5, r5, r3
 80087d4:	68a3      	ldr	r3, [r4, #8]
 80087d6:	bf0c      	ite	eq
 80087d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087dc:	2500      	movne	r5, #0
 80087de:	4293      	cmp	r3, r2
 80087e0:	bfc4      	itt	gt
 80087e2:	1a9b      	subgt	r3, r3, r2
 80087e4:	18ed      	addgt	r5, r5, r3
 80087e6:	2600      	movs	r6, #0
 80087e8:	341a      	adds	r4, #26
 80087ea:	42b5      	cmp	r5, r6
 80087ec:	d11a      	bne.n	8008824 <_printf_common+0xc8>
 80087ee:	2000      	movs	r0, #0
 80087f0:	e008      	b.n	8008804 <_printf_common+0xa8>
 80087f2:	2301      	movs	r3, #1
 80087f4:	4652      	mov	r2, sl
 80087f6:	4641      	mov	r1, r8
 80087f8:	4638      	mov	r0, r7
 80087fa:	47c8      	blx	r9
 80087fc:	3001      	adds	r0, #1
 80087fe:	d103      	bne.n	8008808 <_printf_common+0xac>
 8008800:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008808:	3501      	adds	r5, #1
 800880a:	e7c6      	b.n	800879a <_printf_common+0x3e>
 800880c:	18e1      	adds	r1, r4, r3
 800880e:	1c5a      	adds	r2, r3, #1
 8008810:	2030      	movs	r0, #48	@ 0x30
 8008812:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008816:	4422      	add	r2, r4
 8008818:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800881c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008820:	3302      	adds	r3, #2
 8008822:	e7c7      	b.n	80087b4 <_printf_common+0x58>
 8008824:	2301      	movs	r3, #1
 8008826:	4622      	mov	r2, r4
 8008828:	4641      	mov	r1, r8
 800882a:	4638      	mov	r0, r7
 800882c:	47c8      	blx	r9
 800882e:	3001      	adds	r0, #1
 8008830:	d0e6      	beq.n	8008800 <_printf_common+0xa4>
 8008832:	3601      	adds	r6, #1
 8008834:	e7d9      	b.n	80087ea <_printf_common+0x8e>
	...

08008838 <_printf_i>:
 8008838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800883c:	7e0f      	ldrb	r7, [r1, #24]
 800883e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008840:	2f78      	cmp	r7, #120	@ 0x78
 8008842:	4691      	mov	r9, r2
 8008844:	4680      	mov	r8, r0
 8008846:	460c      	mov	r4, r1
 8008848:	469a      	mov	sl, r3
 800884a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800884e:	d807      	bhi.n	8008860 <_printf_i+0x28>
 8008850:	2f62      	cmp	r7, #98	@ 0x62
 8008852:	d80a      	bhi.n	800886a <_printf_i+0x32>
 8008854:	2f00      	cmp	r7, #0
 8008856:	f000 80d2 	beq.w	80089fe <_printf_i+0x1c6>
 800885a:	2f58      	cmp	r7, #88	@ 0x58
 800885c:	f000 80b9 	beq.w	80089d2 <_printf_i+0x19a>
 8008860:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008864:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008868:	e03a      	b.n	80088e0 <_printf_i+0xa8>
 800886a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800886e:	2b15      	cmp	r3, #21
 8008870:	d8f6      	bhi.n	8008860 <_printf_i+0x28>
 8008872:	a101      	add	r1, pc, #4	@ (adr r1, 8008878 <_printf_i+0x40>)
 8008874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008878:	080088d1 	.word	0x080088d1
 800887c:	080088e5 	.word	0x080088e5
 8008880:	08008861 	.word	0x08008861
 8008884:	08008861 	.word	0x08008861
 8008888:	08008861 	.word	0x08008861
 800888c:	08008861 	.word	0x08008861
 8008890:	080088e5 	.word	0x080088e5
 8008894:	08008861 	.word	0x08008861
 8008898:	08008861 	.word	0x08008861
 800889c:	08008861 	.word	0x08008861
 80088a0:	08008861 	.word	0x08008861
 80088a4:	080089e5 	.word	0x080089e5
 80088a8:	0800890f 	.word	0x0800890f
 80088ac:	0800899f 	.word	0x0800899f
 80088b0:	08008861 	.word	0x08008861
 80088b4:	08008861 	.word	0x08008861
 80088b8:	08008a07 	.word	0x08008a07
 80088bc:	08008861 	.word	0x08008861
 80088c0:	0800890f 	.word	0x0800890f
 80088c4:	08008861 	.word	0x08008861
 80088c8:	08008861 	.word	0x08008861
 80088cc:	080089a7 	.word	0x080089a7
 80088d0:	6833      	ldr	r3, [r6, #0]
 80088d2:	1d1a      	adds	r2, r3, #4
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	6032      	str	r2, [r6, #0]
 80088d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088e0:	2301      	movs	r3, #1
 80088e2:	e09d      	b.n	8008a20 <_printf_i+0x1e8>
 80088e4:	6833      	ldr	r3, [r6, #0]
 80088e6:	6820      	ldr	r0, [r4, #0]
 80088e8:	1d19      	adds	r1, r3, #4
 80088ea:	6031      	str	r1, [r6, #0]
 80088ec:	0606      	lsls	r6, r0, #24
 80088ee:	d501      	bpl.n	80088f4 <_printf_i+0xbc>
 80088f0:	681d      	ldr	r5, [r3, #0]
 80088f2:	e003      	b.n	80088fc <_printf_i+0xc4>
 80088f4:	0645      	lsls	r5, r0, #25
 80088f6:	d5fb      	bpl.n	80088f0 <_printf_i+0xb8>
 80088f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80088fc:	2d00      	cmp	r5, #0
 80088fe:	da03      	bge.n	8008908 <_printf_i+0xd0>
 8008900:	232d      	movs	r3, #45	@ 0x2d
 8008902:	426d      	negs	r5, r5
 8008904:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008908:	4859      	ldr	r0, [pc, #356]	@ (8008a70 <_printf_i+0x238>)
 800890a:	230a      	movs	r3, #10
 800890c:	e011      	b.n	8008932 <_printf_i+0xfa>
 800890e:	6821      	ldr	r1, [r4, #0]
 8008910:	6833      	ldr	r3, [r6, #0]
 8008912:	0608      	lsls	r0, r1, #24
 8008914:	f853 5b04 	ldr.w	r5, [r3], #4
 8008918:	d402      	bmi.n	8008920 <_printf_i+0xe8>
 800891a:	0649      	lsls	r1, r1, #25
 800891c:	bf48      	it	mi
 800891e:	b2ad      	uxthmi	r5, r5
 8008920:	2f6f      	cmp	r7, #111	@ 0x6f
 8008922:	4853      	ldr	r0, [pc, #332]	@ (8008a70 <_printf_i+0x238>)
 8008924:	6033      	str	r3, [r6, #0]
 8008926:	bf14      	ite	ne
 8008928:	230a      	movne	r3, #10
 800892a:	2308      	moveq	r3, #8
 800892c:	2100      	movs	r1, #0
 800892e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008932:	6866      	ldr	r6, [r4, #4]
 8008934:	60a6      	str	r6, [r4, #8]
 8008936:	2e00      	cmp	r6, #0
 8008938:	bfa2      	ittt	ge
 800893a:	6821      	ldrge	r1, [r4, #0]
 800893c:	f021 0104 	bicge.w	r1, r1, #4
 8008940:	6021      	strge	r1, [r4, #0]
 8008942:	b90d      	cbnz	r5, 8008948 <_printf_i+0x110>
 8008944:	2e00      	cmp	r6, #0
 8008946:	d04b      	beq.n	80089e0 <_printf_i+0x1a8>
 8008948:	4616      	mov	r6, r2
 800894a:	fbb5 f1f3 	udiv	r1, r5, r3
 800894e:	fb03 5711 	mls	r7, r3, r1, r5
 8008952:	5dc7      	ldrb	r7, [r0, r7]
 8008954:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008958:	462f      	mov	r7, r5
 800895a:	42bb      	cmp	r3, r7
 800895c:	460d      	mov	r5, r1
 800895e:	d9f4      	bls.n	800894a <_printf_i+0x112>
 8008960:	2b08      	cmp	r3, #8
 8008962:	d10b      	bne.n	800897c <_printf_i+0x144>
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	07df      	lsls	r7, r3, #31
 8008968:	d508      	bpl.n	800897c <_printf_i+0x144>
 800896a:	6923      	ldr	r3, [r4, #16]
 800896c:	6861      	ldr	r1, [r4, #4]
 800896e:	4299      	cmp	r1, r3
 8008970:	bfde      	ittt	le
 8008972:	2330      	movle	r3, #48	@ 0x30
 8008974:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008978:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800897c:	1b92      	subs	r2, r2, r6
 800897e:	6122      	str	r2, [r4, #16]
 8008980:	f8cd a000 	str.w	sl, [sp]
 8008984:	464b      	mov	r3, r9
 8008986:	aa03      	add	r2, sp, #12
 8008988:	4621      	mov	r1, r4
 800898a:	4640      	mov	r0, r8
 800898c:	f7ff fee6 	bl	800875c <_printf_common>
 8008990:	3001      	adds	r0, #1
 8008992:	d14a      	bne.n	8008a2a <_printf_i+0x1f2>
 8008994:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008998:	b004      	add	sp, #16
 800899a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	f043 0320 	orr.w	r3, r3, #32
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	4833      	ldr	r0, [pc, #204]	@ (8008a74 <_printf_i+0x23c>)
 80089a8:	2778      	movs	r7, #120	@ 0x78
 80089aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	6831      	ldr	r1, [r6, #0]
 80089b2:	061f      	lsls	r7, r3, #24
 80089b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80089b8:	d402      	bmi.n	80089c0 <_printf_i+0x188>
 80089ba:	065f      	lsls	r7, r3, #25
 80089bc:	bf48      	it	mi
 80089be:	b2ad      	uxthmi	r5, r5
 80089c0:	6031      	str	r1, [r6, #0]
 80089c2:	07d9      	lsls	r1, r3, #31
 80089c4:	bf44      	itt	mi
 80089c6:	f043 0320 	orrmi.w	r3, r3, #32
 80089ca:	6023      	strmi	r3, [r4, #0]
 80089cc:	b11d      	cbz	r5, 80089d6 <_printf_i+0x19e>
 80089ce:	2310      	movs	r3, #16
 80089d0:	e7ac      	b.n	800892c <_printf_i+0xf4>
 80089d2:	4827      	ldr	r0, [pc, #156]	@ (8008a70 <_printf_i+0x238>)
 80089d4:	e7e9      	b.n	80089aa <_printf_i+0x172>
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	f023 0320 	bic.w	r3, r3, #32
 80089dc:	6023      	str	r3, [r4, #0]
 80089de:	e7f6      	b.n	80089ce <_printf_i+0x196>
 80089e0:	4616      	mov	r6, r2
 80089e2:	e7bd      	b.n	8008960 <_printf_i+0x128>
 80089e4:	6833      	ldr	r3, [r6, #0]
 80089e6:	6825      	ldr	r5, [r4, #0]
 80089e8:	6961      	ldr	r1, [r4, #20]
 80089ea:	1d18      	adds	r0, r3, #4
 80089ec:	6030      	str	r0, [r6, #0]
 80089ee:	062e      	lsls	r6, r5, #24
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	d501      	bpl.n	80089f8 <_printf_i+0x1c0>
 80089f4:	6019      	str	r1, [r3, #0]
 80089f6:	e002      	b.n	80089fe <_printf_i+0x1c6>
 80089f8:	0668      	lsls	r0, r5, #25
 80089fa:	d5fb      	bpl.n	80089f4 <_printf_i+0x1bc>
 80089fc:	8019      	strh	r1, [r3, #0]
 80089fe:	2300      	movs	r3, #0
 8008a00:	6123      	str	r3, [r4, #16]
 8008a02:	4616      	mov	r6, r2
 8008a04:	e7bc      	b.n	8008980 <_printf_i+0x148>
 8008a06:	6833      	ldr	r3, [r6, #0]
 8008a08:	1d1a      	adds	r2, r3, #4
 8008a0a:	6032      	str	r2, [r6, #0]
 8008a0c:	681e      	ldr	r6, [r3, #0]
 8008a0e:	6862      	ldr	r2, [r4, #4]
 8008a10:	2100      	movs	r1, #0
 8008a12:	4630      	mov	r0, r6
 8008a14:	f7f7 fc0c 	bl	8000230 <memchr>
 8008a18:	b108      	cbz	r0, 8008a1e <_printf_i+0x1e6>
 8008a1a:	1b80      	subs	r0, r0, r6
 8008a1c:	6060      	str	r0, [r4, #4]
 8008a1e:	6863      	ldr	r3, [r4, #4]
 8008a20:	6123      	str	r3, [r4, #16]
 8008a22:	2300      	movs	r3, #0
 8008a24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a28:	e7aa      	b.n	8008980 <_printf_i+0x148>
 8008a2a:	6923      	ldr	r3, [r4, #16]
 8008a2c:	4632      	mov	r2, r6
 8008a2e:	4649      	mov	r1, r9
 8008a30:	4640      	mov	r0, r8
 8008a32:	47d0      	blx	sl
 8008a34:	3001      	adds	r0, #1
 8008a36:	d0ad      	beq.n	8008994 <_printf_i+0x15c>
 8008a38:	6823      	ldr	r3, [r4, #0]
 8008a3a:	079b      	lsls	r3, r3, #30
 8008a3c:	d413      	bmi.n	8008a66 <_printf_i+0x22e>
 8008a3e:	68e0      	ldr	r0, [r4, #12]
 8008a40:	9b03      	ldr	r3, [sp, #12]
 8008a42:	4298      	cmp	r0, r3
 8008a44:	bfb8      	it	lt
 8008a46:	4618      	movlt	r0, r3
 8008a48:	e7a6      	b.n	8008998 <_printf_i+0x160>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	4632      	mov	r2, r6
 8008a4e:	4649      	mov	r1, r9
 8008a50:	4640      	mov	r0, r8
 8008a52:	47d0      	blx	sl
 8008a54:	3001      	adds	r0, #1
 8008a56:	d09d      	beq.n	8008994 <_printf_i+0x15c>
 8008a58:	3501      	adds	r5, #1
 8008a5a:	68e3      	ldr	r3, [r4, #12]
 8008a5c:	9903      	ldr	r1, [sp, #12]
 8008a5e:	1a5b      	subs	r3, r3, r1
 8008a60:	42ab      	cmp	r3, r5
 8008a62:	dcf2      	bgt.n	8008a4a <_printf_i+0x212>
 8008a64:	e7eb      	b.n	8008a3e <_printf_i+0x206>
 8008a66:	2500      	movs	r5, #0
 8008a68:	f104 0619 	add.w	r6, r4, #25
 8008a6c:	e7f5      	b.n	8008a5a <_printf_i+0x222>
 8008a6e:	bf00      	nop
 8008a70:	0800d0e6 	.word	0x0800d0e6
 8008a74:	0800d0f7 	.word	0x0800d0f7

08008a78 <_scanf_float>:
 8008a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a7c:	b087      	sub	sp, #28
 8008a7e:	4617      	mov	r7, r2
 8008a80:	9303      	str	r3, [sp, #12]
 8008a82:	688b      	ldr	r3, [r1, #8]
 8008a84:	1e5a      	subs	r2, r3, #1
 8008a86:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008a8a:	bf81      	itttt	hi
 8008a8c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008a90:	eb03 0b05 	addhi.w	fp, r3, r5
 8008a94:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008a98:	608b      	strhi	r3, [r1, #8]
 8008a9a:	680b      	ldr	r3, [r1, #0]
 8008a9c:	460a      	mov	r2, r1
 8008a9e:	f04f 0500 	mov.w	r5, #0
 8008aa2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008aa6:	f842 3b1c 	str.w	r3, [r2], #28
 8008aaa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008aae:	4680      	mov	r8, r0
 8008ab0:	460c      	mov	r4, r1
 8008ab2:	bf98      	it	ls
 8008ab4:	f04f 0b00 	movls.w	fp, #0
 8008ab8:	9201      	str	r2, [sp, #4]
 8008aba:	4616      	mov	r6, r2
 8008abc:	46aa      	mov	sl, r5
 8008abe:	46a9      	mov	r9, r5
 8008ac0:	9502      	str	r5, [sp, #8]
 8008ac2:	68a2      	ldr	r2, [r4, #8]
 8008ac4:	b152      	cbz	r2, 8008adc <_scanf_float+0x64>
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	2b4e      	cmp	r3, #78	@ 0x4e
 8008acc:	d864      	bhi.n	8008b98 <_scanf_float+0x120>
 8008ace:	2b40      	cmp	r3, #64	@ 0x40
 8008ad0:	d83c      	bhi.n	8008b4c <_scanf_float+0xd4>
 8008ad2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008ad6:	b2c8      	uxtb	r0, r1
 8008ad8:	280e      	cmp	r0, #14
 8008ada:	d93a      	bls.n	8008b52 <_scanf_float+0xda>
 8008adc:	f1b9 0f00 	cmp.w	r9, #0
 8008ae0:	d003      	beq.n	8008aea <_scanf_float+0x72>
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ae8:	6023      	str	r3, [r4, #0]
 8008aea:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008aee:	f1ba 0f01 	cmp.w	sl, #1
 8008af2:	f200 8117 	bhi.w	8008d24 <_scanf_float+0x2ac>
 8008af6:	9b01      	ldr	r3, [sp, #4]
 8008af8:	429e      	cmp	r6, r3
 8008afa:	f200 8108 	bhi.w	8008d0e <_scanf_float+0x296>
 8008afe:	2001      	movs	r0, #1
 8008b00:	b007      	add	sp, #28
 8008b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b06:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008b0a:	2a0d      	cmp	r2, #13
 8008b0c:	d8e6      	bhi.n	8008adc <_scanf_float+0x64>
 8008b0e:	a101      	add	r1, pc, #4	@ (adr r1, 8008b14 <_scanf_float+0x9c>)
 8008b10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008b14:	08008c5b 	.word	0x08008c5b
 8008b18:	08008add 	.word	0x08008add
 8008b1c:	08008add 	.word	0x08008add
 8008b20:	08008add 	.word	0x08008add
 8008b24:	08008cbb 	.word	0x08008cbb
 8008b28:	08008c93 	.word	0x08008c93
 8008b2c:	08008add 	.word	0x08008add
 8008b30:	08008add 	.word	0x08008add
 8008b34:	08008c69 	.word	0x08008c69
 8008b38:	08008add 	.word	0x08008add
 8008b3c:	08008add 	.word	0x08008add
 8008b40:	08008add 	.word	0x08008add
 8008b44:	08008add 	.word	0x08008add
 8008b48:	08008c21 	.word	0x08008c21
 8008b4c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008b50:	e7db      	b.n	8008b0a <_scanf_float+0x92>
 8008b52:	290e      	cmp	r1, #14
 8008b54:	d8c2      	bhi.n	8008adc <_scanf_float+0x64>
 8008b56:	a001      	add	r0, pc, #4	@ (adr r0, 8008b5c <_scanf_float+0xe4>)
 8008b58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008b5c:	08008c11 	.word	0x08008c11
 8008b60:	08008add 	.word	0x08008add
 8008b64:	08008c11 	.word	0x08008c11
 8008b68:	08008ca7 	.word	0x08008ca7
 8008b6c:	08008add 	.word	0x08008add
 8008b70:	08008bb9 	.word	0x08008bb9
 8008b74:	08008bf7 	.word	0x08008bf7
 8008b78:	08008bf7 	.word	0x08008bf7
 8008b7c:	08008bf7 	.word	0x08008bf7
 8008b80:	08008bf7 	.word	0x08008bf7
 8008b84:	08008bf7 	.word	0x08008bf7
 8008b88:	08008bf7 	.word	0x08008bf7
 8008b8c:	08008bf7 	.word	0x08008bf7
 8008b90:	08008bf7 	.word	0x08008bf7
 8008b94:	08008bf7 	.word	0x08008bf7
 8008b98:	2b6e      	cmp	r3, #110	@ 0x6e
 8008b9a:	d809      	bhi.n	8008bb0 <_scanf_float+0x138>
 8008b9c:	2b60      	cmp	r3, #96	@ 0x60
 8008b9e:	d8b2      	bhi.n	8008b06 <_scanf_float+0x8e>
 8008ba0:	2b54      	cmp	r3, #84	@ 0x54
 8008ba2:	d07b      	beq.n	8008c9c <_scanf_float+0x224>
 8008ba4:	2b59      	cmp	r3, #89	@ 0x59
 8008ba6:	d199      	bne.n	8008adc <_scanf_float+0x64>
 8008ba8:	2d07      	cmp	r5, #7
 8008baa:	d197      	bne.n	8008adc <_scanf_float+0x64>
 8008bac:	2508      	movs	r5, #8
 8008bae:	e02c      	b.n	8008c0a <_scanf_float+0x192>
 8008bb0:	2b74      	cmp	r3, #116	@ 0x74
 8008bb2:	d073      	beq.n	8008c9c <_scanf_float+0x224>
 8008bb4:	2b79      	cmp	r3, #121	@ 0x79
 8008bb6:	e7f6      	b.n	8008ba6 <_scanf_float+0x12e>
 8008bb8:	6821      	ldr	r1, [r4, #0]
 8008bba:	05c8      	lsls	r0, r1, #23
 8008bbc:	d51b      	bpl.n	8008bf6 <_scanf_float+0x17e>
 8008bbe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008bc2:	6021      	str	r1, [r4, #0]
 8008bc4:	f109 0901 	add.w	r9, r9, #1
 8008bc8:	f1bb 0f00 	cmp.w	fp, #0
 8008bcc:	d003      	beq.n	8008bd6 <_scanf_float+0x15e>
 8008bce:	3201      	adds	r2, #1
 8008bd0:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8008bd4:	60a2      	str	r2, [r4, #8]
 8008bd6:	68a3      	ldr	r3, [r4, #8]
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	60a3      	str	r3, [r4, #8]
 8008bdc:	6923      	ldr	r3, [r4, #16]
 8008bde:	3301      	adds	r3, #1
 8008be0:	6123      	str	r3, [r4, #16]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	3b01      	subs	r3, #1
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	607b      	str	r3, [r7, #4]
 8008bea:	f340 8087 	ble.w	8008cfc <_scanf_float+0x284>
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	603b      	str	r3, [r7, #0]
 8008bf4:	e765      	b.n	8008ac2 <_scanf_float+0x4a>
 8008bf6:	eb1a 0105 	adds.w	r1, sl, r5
 8008bfa:	f47f af6f 	bne.w	8008adc <_scanf_float+0x64>
 8008bfe:	6822      	ldr	r2, [r4, #0]
 8008c00:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008c04:	6022      	str	r2, [r4, #0]
 8008c06:	460d      	mov	r5, r1
 8008c08:	468a      	mov	sl, r1
 8008c0a:	f806 3b01 	strb.w	r3, [r6], #1
 8008c0e:	e7e2      	b.n	8008bd6 <_scanf_float+0x15e>
 8008c10:	6822      	ldr	r2, [r4, #0]
 8008c12:	0610      	lsls	r0, r2, #24
 8008c14:	f57f af62 	bpl.w	8008adc <_scanf_float+0x64>
 8008c18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c1c:	6022      	str	r2, [r4, #0]
 8008c1e:	e7f4      	b.n	8008c0a <_scanf_float+0x192>
 8008c20:	f1ba 0f00 	cmp.w	sl, #0
 8008c24:	d10e      	bne.n	8008c44 <_scanf_float+0x1cc>
 8008c26:	f1b9 0f00 	cmp.w	r9, #0
 8008c2a:	d10e      	bne.n	8008c4a <_scanf_float+0x1d2>
 8008c2c:	6822      	ldr	r2, [r4, #0]
 8008c2e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008c32:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008c36:	d108      	bne.n	8008c4a <_scanf_float+0x1d2>
 8008c38:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c3c:	6022      	str	r2, [r4, #0]
 8008c3e:	f04f 0a01 	mov.w	sl, #1
 8008c42:	e7e2      	b.n	8008c0a <_scanf_float+0x192>
 8008c44:	f1ba 0f02 	cmp.w	sl, #2
 8008c48:	d055      	beq.n	8008cf6 <_scanf_float+0x27e>
 8008c4a:	2d01      	cmp	r5, #1
 8008c4c:	d002      	beq.n	8008c54 <_scanf_float+0x1dc>
 8008c4e:	2d04      	cmp	r5, #4
 8008c50:	f47f af44 	bne.w	8008adc <_scanf_float+0x64>
 8008c54:	3501      	adds	r5, #1
 8008c56:	b2ed      	uxtb	r5, r5
 8008c58:	e7d7      	b.n	8008c0a <_scanf_float+0x192>
 8008c5a:	f1ba 0f01 	cmp.w	sl, #1
 8008c5e:	f47f af3d 	bne.w	8008adc <_scanf_float+0x64>
 8008c62:	f04f 0a02 	mov.w	sl, #2
 8008c66:	e7d0      	b.n	8008c0a <_scanf_float+0x192>
 8008c68:	b97d      	cbnz	r5, 8008c8a <_scanf_float+0x212>
 8008c6a:	f1b9 0f00 	cmp.w	r9, #0
 8008c6e:	f47f af38 	bne.w	8008ae2 <_scanf_float+0x6a>
 8008c72:	6822      	ldr	r2, [r4, #0]
 8008c74:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008c78:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008c7c:	f040 8108 	bne.w	8008e90 <_scanf_float+0x418>
 8008c80:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c84:	6022      	str	r2, [r4, #0]
 8008c86:	2501      	movs	r5, #1
 8008c88:	e7bf      	b.n	8008c0a <_scanf_float+0x192>
 8008c8a:	2d03      	cmp	r5, #3
 8008c8c:	d0e2      	beq.n	8008c54 <_scanf_float+0x1dc>
 8008c8e:	2d05      	cmp	r5, #5
 8008c90:	e7de      	b.n	8008c50 <_scanf_float+0x1d8>
 8008c92:	2d02      	cmp	r5, #2
 8008c94:	f47f af22 	bne.w	8008adc <_scanf_float+0x64>
 8008c98:	2503      	movs	r5, #3
 8008c9a:	e7b6      	b.n	8008c0a <_scanf_float+0x192>
 8008c9c:	2d06      	cmp	r5, #6
 8008c9e:	f47f af1d 	bne.w	8008adc <_scanf_float+0x64>
 8008ca2:	2507      	movs	r5, #7
 8008ca4:	e7b1      	b.n	8008c0a <_scanf_float+0x192>
 8008ca6:	6822      	ldr	r2, [r4, #0]
 8008ca8:	0591      	lsls	r1, r2, #22
 8008caa:	f57f af17 	bpl.w	8008adc <_scanf_float+0x64>
 8008cae:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008cb2:	6022      	str	r2, [r4, #0]
 8008cb4:	f8cd 9008 	str.w	r9, [sp, #8]
 8008cb8:	e7a7      	b.n	8008c0a <_scanf_float+0x192>
 8008cba:	6822      	ldr	r2, [r4, #0]
 8008cbc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008cc0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008cc4:	d006      	beq.n	8008cd4 <_scanf_float+0x25c>
 8008cc6:	0550      	lsls	r0, r2, #21
 8008cc8:	f57f af08 	bpl.w	8008adc <_scanf_float+0x64>
 8008ccc:	f1b9 0f00 	cmp.w	r9, #0
 8008cd0:	f000 80de 	beq.w	8008e90 <_scanf_float+0x418>
 8008cd4:	0591      	lsls	r1, r2, #22
 8008cd6:	bf58      	it	pl
 8008cd8:	9902      	ldrpl	r1, [sp, #8]
 8008cda:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008cde:	bf58      	it	pl
 8008ce0:	eba9 0101 	subpl.w	r1, r9, r1
 8008ce4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008ce8:	bf58      	it	pl
 8008cea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008cee:	6022      	str	r2, [r4, #0]
 8008cf0:	f04f 0900 	mov.w	r9, #0
 8008cf4:	e789      	b.n	8008c0a <_scanf_float+0x192>
 8008cf6:	f04f 0a03 	mov.w	sl, #3
 8008cfa:	e786      	b.n	8008c0a <_scanf_float+0x192>
 8008cfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008d00:	4639      	mov	r1, r7
 8008d02:	4640      	mov	r0, r8
 8008d04:	4798      	blx	r3
 8008d06:	2800      	cmp	r0, #0
 8008d08:	f43f aedb 	beq.w	8008ac2 <_scanf_float+0x4a>
 8008d0c:	e6e6      	b.n	8008adc <_scanf_float+0x64>
 8008d0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d16:	463a      	mov	r2, r7
 8008d18:	4640      	mov	r0, r8
 8008d1a:	4798      	blx	r3
 8008d1c:	6923      	ldr	r3, [r4, #16]
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	6123      	str	r3, [r4, #16]
 8008d22:	e6e8      	b.n	8008af6 <_scanf_float+0x7e>
 8008d24:	1e6b      	subs	r3, r5, #1
 8008d26:	2b06      	cmp	r3, #6
 8008d28:	d824      	bhi.n	8008d74 <_scanf_float+0x2fc>
 8008d2a:	2d02      	cmp	r5, #2
 8008d2c:	d836      	bhi.n	8008d9c <_scanf_float+0x324>
 8008d2e:	9b01      	ldr	r3, [sp, #4]
 8008d30:	429e      	cmp	r6, r3
 8008d32:	f67f aee4 	bls.w	8008afe <_scanf_float+0x86>
 8008d36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d3e:	463a      	mov	r2, r7
 8008d40:	4640      	mov	r0, r8
 8008d42:	4798      	blx	r3
 8008d44:	6923      	ldr	r3, [r4, #16]
 8008d46:	3b01      	subs	r3, #1
 8008d48:	6123      	str	r3, [r4, #16]
 8008d4a:	e7f0      	b.n	8008d2e <_scanf_float+0x2b6>
 8008d4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d50:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008d54:	463a      	mov	r2, r7
 8008d56:	4640      	mov	r0, r8
 8008d58:	4798      	blx	r3
 8008d5a:	6923      	ldr	r3, [r4, #16]
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	6123      	str	r3, [r4, #16]
 8008d60:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008d64:	fa5f fa8a 	uxtb.w	sl, sl
 8008d68:	f1ba 0f02 	cmp.w	sl, #2
 8008d6c:	d1ee      	bne.n	8008d4c <_scanf_float+0x2d4>
 8008d6e:	3d03      	subs	r5, #3
 8008d70:	b2ed      	uxtb	r5, r5
 8008d72:	1b76      	subs	r6, r6, r5
 8008d74:	6823      	ldr	r3, [r4, #0]
 8008d76:	05da      	lsls	r2, r3, #23
 8008d78:	d530      	bpl.n	8008ddc <_scanf_float+0x364>
 8008d7a:	055b      	lsls	r3, r3, #21
 8008d7c:	d511      	bpl.n	8008da2 <_scanf_float+0x32a>
 8008d7e:	9b01      	ldr	r3, [sp, #4]
 8008d80:	429e      	cmp	r6, r3
 8008d82:	f67f aebc 	bls.w	8008afe <_scanf_float+0x86>
 8008d86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d8e:	463a      	mov	r2, r7
 8008d90:	4640      	mov	r0, r8
 8008d92:	4798      	blx	r3
 8008d94:	6923      	ldr	r3, [r4, #16]
 8008d96:	3b01      	subs	r3, #1
 8008d98:	6123      	str	r3, [r4, #16]
 8008d9a:	e7f0      	b.n	8008d7e <_scanf_float+0x306>
 8008d9c:	46aa      	mov	sl, r5
 8008d9e:	46b3      	mov	fp, r6
 8008da0:	e7de      	b.n	8008d60 <_scanf_float+0x2e8>
 8008da2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008da6:	6923      	ldr	r3, [r4, #16]
 8008da8:	2965      	cmp	r1, #101	@ 0x65
 8008daa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008dae:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8008db2:	6123      	str	r3, [r4, #16]
 8008db4:	d00c      	beq.n	8008dd0 <_scanf_float+0x358>
 8008db6:	2945      	cmp	r1, #69	@ 0x45
 8008db8:	d00a      	beq.n	8008dd0 <_scanf_float+0x358>
 8008dba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008dbe:	463a      	mov	r2, r7
 8008dc0:	4640      	mov	r0, r8
 8008dc2:	4798      	blx	r3
 8008dc4:	6923      	ldr	r3, [r4, #16]
 8008dc6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	1eb5      	subs	r5, r6, #2
 8008dce:	6123      	str	r3, [r4, #16]
 8008dd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008dd4:	463a      	mov	r2, r7
 8008dd6:	4640      	mov	r0, r8
 8008dd8:	4798      	blx	r3
 8008dda:	462e      	mov	r6, r5
 8008ddc:	6822      	ldr	r2, [r4, #0]
 8008dde:	f012 0210 	ands.w	r2, r2, #16
 8008de2:	d001      	beq.n	8008de8 <_scanf_float+0x370>
 8008de4:	2000      	movs	r0, #0
 8008de6:	e68b      	b.n	8008b00 <_scanf_float+0x88>
 8008de8:	7032      	strb	r2, [r6, #0]
 8008dea:	6823      	ldr	r3, [r4, #0]
 8008dec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008df0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008df4:	d11c      	bne.n	8008e30 <_scanf_float+0x3b8>
 8008df6:	9b02      	ldr	r3, [sp, #8]
 8008df8:	454b      	cmp	r3, r9
 8008dfa:	eba3 0209 	sub.w	r2, r3, r9
 8008dfe:	d123      	bne.n	8008e48 <_scanf_float+0x3d0>
 8008e00:	9901      	ldr	r1, [sp, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	4640      	mov	r0, r8
 8008e06:	f002 fc67 	bl	800b6d8 <_strtod_r>
 8008e0a:	9b03      	ldr	r3, [sp, #12]
 8008e0c:	6821      	ldr	r1, [r4, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f011 0f02 	tst.w	r1, #2
 8008e14:	ec57 6b10 	vmov	r6, r7, d0
 8008e18:	f103 0204 	add.w	r2, r3, #4
 8008e1c:	d01f      	beq.n	8008e5e <_scanf_float+0x3e6>
 8008e1e:	9903      	ldr	r1, [sp, #12]
 8008e20:	600a      	str	r2, [r1, #0]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	e9c3 6700 	strd	r6, r7, [r3]
 8008e28:	68e3      	ldr	r3, [r4, #12]
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	60e3      	str	r3, [r4, #12]
 8008e2e:	e7d9      	b.n	8008de4 <_scanf_float+0x36c>
 8008e30:	9b04      	ldr	r3, [sp, #16]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d0e4      	beq.n	8008e00 <_scanf_float+0x388>
 8008e36:	9905      	ldr	r1, [sp, #20]
 8008e38:	230a      	movs	r3, #10
 8008e3a:	3101      	adds	r1, #1
 8008e3c:	4640      	mov	r0, r8
 8008e3e:	f002 fccb 	bl	800b7d8 <_strtol_r>
 8008e42:	9b04      	ldr	r3, [sp, #16]
 8008e44:	9e05      	ldr	r6, [sp, #20]
 8008e46:	1ac2      	subs	r2, r0, r3
 8008e48:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008e4c:	429e      	cmp	r6, r3
 8008e4e:	bf28      	it	cs
 8008e50:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008e54:	4910      	ldr	r1, [pc, #64]	@ (8008e98 <_scanf_float+0x420>)
 8008e56:	4630      	mov	r0, r6
 8008e58:	f000 f954 	bl	8009104 <siprintf>
 8008e5c:	e7d0      	b.n	8008e00 <_scanf_float+0x388>
 8008e5e:	f011 0f04 	tst.w	r1, #4
 8008e62:	9903      	ldr	r1, [sp, #12]
 8008e64:	600a      	str	r2, [r1, #0]
 8008e66:	d1dc      	bne.n	8008e22 <_scanf_float+0x3aa>
 8008e68:	681d      	ldr	r5, [r3, #0]
 8008e6a:	4632      	mov	r2, r6
 8008e6c:	463b      	mov	r3, r7
 8008e6e:	4630      	mov	r0, r6
 8008e70:	4639      	mov	r1, r7
 8008e72:	f7f7 fe8b 	bl	8000b8c <__aeabi_dcmpun>
 8008e76:	b128      	cbz	r0, 8008e84 <_scanf_float+0x40c>
 8008e78:	4808      	ldr	r0, [pc, #32]	@ (8008e9c <_scanf_float+0x424>)
 8008e7a:	f000 fad9 	bl	8009430 <nanf>
 8008e7e:	ed85 0a00 	vstr	s0, [r5]
 8008e82:	e7d1      	b.n	8008e28 <_scanf_float+0x3b0>
 8008e84:	4630      	mov	r0, r6
 8008e86:	4639      	mov	r1, r7
 8008e88:	f7f7 fede 	bl	8000c48 <__aeabi_d2f>
 8008e8c:	6028      	str	r0, [r5, #0]
 8008e8e:	e7cb      	b.n	8008e28 <_scanf_float+0x3b0>
 8008e90:	f04f 0900 	mov.w	r9, #0
 8008e94:	e629      	b.n	8008aea <_scanf_float+0x72>
 8008e96:	bf00      	nop
 8008e98:	0800d108 	.word	0x0800d108
 8008e9c:	0800d49d 	.word	0x0800d49d

08008ea0 <std>:
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	b510      	push	{r4, lr}
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	e9c0 3300 	strd	r3, r3, [r0]
 8008eaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008eae:	6083      	str	r3, [r0, #8]
 8008eb0:	8181      	strh	r1, [r0, #12]
 8008eb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8008eb4:	81c2      	strh	r2, [r0, #14]
 8008eb6:	6183      	str	r3, [r0, #24]
 8008eb8:	4619      	mov	r1, r3
 8008eba:	2208      	movs	r2, #8
 8008ebc:	305c      	adds	r0, #92	@ 0x5c
 8008ebe:	f000 fa19 	bl	80092f4 <memset>
 8008ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ef8 <std+0x58>)
 8008ec4:	6263      	str	r3, [r4, #36]	@ 0x24
 8008ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8008efc <std+0x5c>)
 8008ec8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008eca:	4b0d      	ldr	r3, [pc, #52]	@ (8008f00 <std+0x60>)
 8008ecc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ece:	4b0d      	ldr	r3, [pc, #52]	@ (8008f04 <std+0x64>)
 8008ed0:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8008f08 <std+0x68>)
 8008ed4:	6224      	str	r4, [r4, #32]
 8008ed6:	429c      	cmp	r4, r3
 8008ed8:	d006      	beq.n	8008ee8 <std+0x48>
 8008eda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008ede:	4294      	cmp	r4, r2
 8008ee0:	d002      	beq.n	8008ee8 <std+0x48>
 8008ee2:	33d0      	adds	r3, #208	@ 0xd0
 8008ee4:	429c      	cmp	r4, r3
 8008ee6:	d105      	bne.n	8008ef4 <std+0x54>
 8008ee8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ef0:	f000 ba9a 	b.w	8009428 <__retarget_lock_init_recursive>
 8008ef4:	bd10      	pop	{r4, pc}
 8008ef6:	bf00      	nop
 8008ef8:	08009145 	.word	0x08009145
 8008efc:	08009167 	.word	0x08009167
 8008f00:	0800919f 	.word	0x0800919f
 8008f04:	080091c3 	.word	0x080091c3
 8008f08:	20000434 	.word	0x20000434

08008f0c <stdio_exit_handler>:
 8008f0c:	4a02      	ldr	r2, [pc, #8]	@ (8008f18 <stdio_exit_handler+0xc>)
 8008f0e:	4903      	ldr	r1, [pc, #12]	@ (8008f1c <stdio_exit_handler+0x10>)
 8008f10:	4803      	ldr	r0, [pc, #12]	@ (8008f20 <stdio_exit_handler+0x14>)
 8008f12:	f000 b869 	b.w	8008fe8 <_fwalk_sglue>
 8008f16:	bf00      	nop
 8008f18:	2000000c 	.word	0x2000000c
 8008f1c:	0800be19 	.word	0x0800be19
 8008f20:	2000001c 	.word	0x2000001c

08008f24 <cleanup_stdio>:
 8008f24:	6841      	ldr	r1, [r0, #4]
 8008f26:	4b0c      	ldr	r3, [pc, #48]	@ (8008f58 <cleanup_stdio+0x34>)
 8008f28:	4299      	cmp	r1, r3
 8008f2a:	b510      	push	{r4, lr}
 8008f2c:	4604      	mov	r4, r0
 8008f2e:	d001      	beq.n	8008f34 <cleanup_stdio+0x10>
 8008f30:	f002 ff72 	bl	800be18 <_fflush_r>
 8008f34:	68a1      	ldr	r1, [r4, #8]
 8008f36:	4b09      	ldr	r3, [pc, #36]	@ (8008f5c <cleanup_stdio+0x38>)
 8008f38:	4299      	cmp	r1, r3
 8008f3a:	d002      	beq.n	8008f42 <cleanup_stdio+0x1e>
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	f002 ff6b 	bl	800be18 <_fflush_r>
 8008f42:	68e1      	ldr	r1, [r4, #12]
 8008f44:	4b06      	ldr	r3, [pc, #24]	@ (8008f60 <cleanup_stdio+0x3c>)
 8008f46:	4299      	cmp	r1, r3
 8008f48:	d004      	beq.n	8008f54 <cleanup_stdio+0x30>
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f50:	f002 bf62 	b.w	800be18 <_fflush_r>
 8008f54:	bd10      	pop	{r4, pc}
 8008f56:	bf00      	nop
 8008f58:	20000434 	.word	0x20000434
 8008f5c:	2000049c 	.word	0x2000049c
 8008f60:	20000504 	.word	0x20000504

08008f64 <global_stdio_init.part.0>:
 8008f64:	b510      	push	{r4, lr}
 8008f66:	4b0b      	ldr	r3, [pc, #44]	@ (8008f94 <global_stdio_init.part.0+0x30>)
 8008f68:	4c0b      	ldr	r4, [pc, #44]	@ (8008f98 <global_stdio_init.part.0+0x34>)
 8008f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8008f9c <global_stdio_init.part.0+0x38>)
 8008f6c:	601a      	str	r2, [r3, #0]
 8008f6e:	4620      	mov	r0, r4
 8008f70:	2200      	movs	r2, #0
 8008f72:	2104      	movs	r1, #4
 8008f74:	f7ff ff94 	bl	8008ea0 <std>
 8008f78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	2109      	movs	r1, #9
 8008f80:	f7ff ff8e 	bl	8008ea0 <std>
 8008f84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008f88:	2202      	movs	r2, #2
 8008f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f8e:	2112      	movs	r1, #18
 8008f90:	f7ff bf86 	b.w	8008ea0 <std>
 8008f94:	2000056c 	.word	0x2000056c
 8008f98:	20000434 	.word	0x20000434
 8008f9c:	08008f0d 	.word	0x08008f0d

08008fa0 <__sfp_lock_acquire>:
 8008fa0:	4801      	ldr	r0, [pc, #4]	@ (8008fa8 <__sfp_lock_acquire+0x8>)
 8008fa2:	f000 ba42 	b.w	800942a <__retarget_lock_acquire_recursive>
 8008fa6:	bf00      	nop
 8008fa8:	20000575 	.word	0x20000575

08008fac <__sfp_lock_release>:
 8008fac:	4801      	ldr	r0, [pc, #4]	@ (8008fb4 <__sfp_lock_release+0x8>)
 8008fae:	f000 ba3d 	b.w	800942c <__retarget_lock_release_recursive>
 8008fb2:	bf00      	nop
 8008fb4:	20000575 	.word	0x20000575

08008fb8 <__sinit>:
 8008fb8:	b510      	push	{r4, lr}
 8008fba:	4604      	mov	r4, r0
 8008fbc:	f7ff fff0 	bl	8008fa0 <__sfp_lock_acquire>
 8008fc0:	6a23      	ldr	r3, [r4, #32]
 8008fc2:	b11b      	cbz	r3, 8008fcc <__sinit+0x14>
 8008fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fc8:	f7ff bff0 	b.w	8008fac <__sfp_lock_release>
 8008fcc:	4b04      	ldr	r3, [pc, #16]	@ (8008fe0 <__sinit+0x28>)
 8008fce:	6223      	str	r3, [r4, #32]
 8008fd0:	4b04      	ldr	r3, [pc, #16]	@ (8008fe4 <__sinit+0x2c>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d1f5      	bne.n	8008fc4 <__sinit+0xc>
 8008fd8:	f7ff ffc4 	bl	8008f64 <global_stdio_init.part.0>
 8008fdc:	e7f2      	b.n	8008fc4 <__sinit+0xc>
 8008fde:	bf00      	nop
 8008fe0:	08008f25 	.word	0x08008f25
 8008fe4:	2000056c 	.word	0x2000056c

08008fe8 <_fwalk_sglue>:
 8008fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fec:	4607      	mov	r7, r0
 8008fee:	4688      	mov	r8, r1
 8008ff0:	4614      	mov	r4, r2
 8008ff2:	2600      	movs	r6, #0
 8008ff4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ff8:	f1b9 0901 	subs.w	r9, r9, #1
 8008ffc:	d505      	bpl.n	800900a <_fwalk_sglue+0x22>
 8008ffe:	6824      	ldr	r4, [r4, #0]
 8009000:	2c00      	cmp	r4, #0
 8009002:	d1f7      	bne.n	8008ff4 <_fwalk_sglue+0xc>
 8009004:	4630      	mov	r0, r6
 8009006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800900a:	89ab      	ldrh	r3, [r5, #12]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d907      	bls.n	8009020 <_fwalk_sglue+0x38>
 8009010:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009014:	3301      	adds	r3, #1
 8009016:	d003      	beq.n	8009020 <_fwalk_sglue+0x38>
 8009018:	4629      	mov	r1, r5
 800901a:	4638      	mov	r0, r7
 800901c:	47c0      	blx	r8
 800901e:	4306      	orrs	r6, r0
 8009020:	3568      	adds	r5, #104	@ 0x68
 8009022:	e7e9      	b.n	8008ff8 <_fwalk_sglue+0x10>

08009024 <iprintf>:
 8009024:	b40f      	push	{r0, r1, r2, r3}
 8009026:	b507      	push	{r0, r1, r2, lr}
 8009028:	4906      	ldr	r1, [pc, #24]	@ (8009044 <iprintf+0x20>)
 800902a:	ab04      	add	r3, sp, #16
 800902c:	6808      	ldr	r0, [r1, #0]
 800902e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009032:	6881      	ldr	r1, [r0, #8]
 8009034:	9301      	str	r3, [sp, #4]
 8009036:	f002 fd53 	bl	800bae0 <_vfiprintf_r>
 800903a:	b003      	add	sp, #12
 800903c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009040:	b004      	add	sp, #16
 8009042:	4770      	bx	lr
 8009044:	20000018 	.word	0x20000018

08009048 <_puts_r>:
 8009048:	6a03      	ldr	r3, [r0, #32]
 800904a:	b570      	push	{r4, r5, r6, lr}
 800904c:	6884      	ldr	r4, [r0, #8]
 800904e:	4605      	mov	r5, r0
 8009050:	460e      	mov	r6, r1
 8009052:	b90b      	cbnz	r3, 8009058 <_puts_r+0x10>
 8009054:	f7ff ffb0 	bl	8008fb8 <__sinit>
 8009058:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800905a:	07db      	lsls	r3, r3, #31
 800905c:	d405      	bmi.n	800906a <_puts_r+0x22>
 800905e:	89a3      	ldrh	r3, [r4, #12]
 8009060:	0598      	lsls	r0, r3, #22
 8009062:	d402      	bmi.n	800906a <_puts_r+0x22>
 8009064:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009066:	f000 f9e0 	bl	800942a <__retarget_lock_acquire_recursive>
 800906a:	89a3      	ldrh	r3, [r4, #12]
 800906c:	0719      	lsls	r1, r3, #28
 800906e:	d502      	bpl.n	8009076 <_puts_r+0x2e>
 8009070:	6923      	ldr	r3, [r4, #16]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d135      	bne.n	80090e2 <_puts_r+0x9a>
 8009076:	4621      	mov	r1, r4
 8009078:	4628      	mov	r0, r5
 800907a:	f000 f8e5 	bl	8009248 <__swsetup_r>
 800907e:	b380      	cbz	r0, 80090e2 <_puts_r+0x9a>
 8009080:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009084:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009086:	07da      	lsls	r2, r3, #31
 8009088:	d405      	bmi.n	8009096 <_puts_r+0x4e>
 800908a:	89a3      	ldrh	r3, [r4, #12]
 800908c:	059b      	lsls	r3, r3, #22
 800908e:	d402      	bmi.n	8009096 <_puts_r+0x4e>
 8009090:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009092:	f000 f9cb 	bl	800942c <__retarget_lock_release_recursive>
 8009096:	4628      	mov	r0, r5
 8009098:	bd70      	pop	{r4, r5, r6, pc}
 800909a:	2b00      	cmp	r3, #0
 800909c:	da04      	bge.n	80090a8 <_puts_r+0x60>
 800909e:	69a2      	ldr	r2, [r4, #24]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	dc17      	bgt.n	80090d4 <_puts_r+0x8c>
 80090a4:	290a      	cmp	r1, #10
 80090a6:	d015      	beq.n	80090d4 <_puts_r+0x8c>
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	1c5a      	adds	r2, r3, #1
 80090ac:	6022      	str	r2, [r4, #0]
 80090ae:	7019      	strb	r1, [r3, #0]
 80090b0:	68a3      	ldr	r3, [r4, #8]
 80090b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80090b6:	3b01      	subs	r3, #1
 80090b8:	60a3      	str	r3, [r4, #8]
 80090ba:	2900      	cmp	r1, #0
 80090bc:	d1ed      	bne.n	800909a <_puts_r+0x52>
 80090be:	2b00      	cmp	r3, #0
 80090c0:	da11      	bge.n	80090e6 <_puts_r+0x9e>
 80090c2:	4622      	mov	r2, r4
 80090c4:	210a      	movs	r1, #10
 80090c6:	4628      	mov	r0, r5
 80090c8:	f000 f87f 	bl	80091ca <__swbuf_r>
 80090cc:	3001      	adds	r0, #1
 80090ce:	d0d7      	beq.n	8009080 <_puts_r+0x38>
 80090d0:	250a      	movs	r5, #10
 80090d2:	e7d7      	b.n	8009084 <_puts_r+0x3c>
 80090d4:	4622      	mov	r2, r4
 80090d6:	4628      	mov	r0, r5
 80090d8:	f000 f877 	bl	80091ca <__swbuf_r>
 80090dc:	3001      	adds	r0, #1
 80090de:	d1e7      	bne.n	80090b0 <_puts_r+0x68>
 80090e0:	e7ce      	b.n	8009080 <_puts_r+0x38>
 80090e2:	3e01      	subs	r6, #1
 80090e4:	e7e4      	b.n	80090b0 <_puts_r+0x68>
 80090e6:	6823      	ldr	r3, [r4, #0]
 80090e8:	1c5a      	adds	r2, r3, #1
 80090ea:	6022      	str	r2, [r4, #0]
 80090ec:	220a      	movs	r2, #10
 80090ee:	701a      	strb	r2, [r3, #0]
 80090f0:	e7ee      	b.n	80090d0 <_puts_r+0x88>
	...

080090f4 <puts>:
 80090f4:	4b02      	ldr	r3, [pc, #8]	@ (8009100 <puts+0xc>)
 80090f6:	4601      	mov	r1, r0
 80090f8:	6818      	ldr	r0, [r3, #0]
 80090fa:	f7ff bfa5 	b.w	8009048 <_puts_r>
 80090fe:	bf00      	nop
 8009100:	20000018 	.word	0x20000018

08009104 <siprintf>:
 8009104:	b40e      	push	{r1, r2, r3}
 8009106:	b500      	push	{lr}
 8009108:	b09c      	sub	sp, #112	@ 0x70
 800910a:	ab1d      	add	r3, sp, #116	@ 0x74
 800910c:	9002      	str	r0, [sp, #8]
 800910e:	9006      	str	r0, [sp, #24]
 8009110:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009114:	4809      	ldr	r0, [pc, #36]	@ (800913c <siprintf+0x38>)
 8009116:	9107      	str	r1, [sp, #28]
 8009118:	9104      	str	r1, [sp, #16]
 800911a:	4909      	ldr	r1, [pc, #36]	@ (8009140 <siprintf+0x3c>)
 800911c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009120:	9105      	str	r1, [sp, #20]
 8009122:	6800      	ldr	r0, [r0, #0]
 8009124:	9301      	str	r3, [sp, #4]
 8009126:	a902      	add	r1, sp, #8
 8009128:	f002 fbb4 	bl	800b894 <_svfiprintf_r>
 800912c:	9b02      	ldr	r3, [sp, #8]
 800912e:	2200      	movs	r2, #0
 8009130:	701a      	strb	r2, [r3, #0]
 8009132:	b01c      	add	sp, #112	@ 0x70
 8009134:	f85d eb04 	ldr.w	lr, [sp], #4
 8009138:	b003      	add	sp, #12
 800913a:	4770      	bx	lr
 800913c:	20000018 	.word	0x20000018
 8009140:	ffff0208 	.word	0xffff0208

08009144 <__sread>:
 8009144:	b510      	push	{r4, lr}
 8009146:	460c      	mov	r4, r1
 8009148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800914c:	f000 f90e 	bl	800936c <_read_r>
 8009150:	2800      	cmp	r0, #0
 8009152:	bfab      	itete	ge
 8009154:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009156:	89a3      	ldrhlt	r3, [r4, #12]
 8009158:	181b      	addge	r3, r3, r0
 800915a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800915e:	bfac      	ite	ge
 8009160:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009162:	81a3      	strhlt	r3, [r4, #12]
 8009164:	bd10      	pop	{r4, pc}

08009166 <__swrite>:
 8009166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800916a:	461f      	mov	r7, r3
 800916c:	898b      	ldrh	r3, [r1, #12]
 800916e:	05db      	lsls	r3, r3, #23
 8009170:	4605      	mov	r5, r0
 8009172:	460c      	mov	r4, r1
 8009174:	4616      	mov	r6, r2
 8009176:	d505      	bpl.n	8009184 <__swrite+0x1e>
 8009178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800917c:	2302      	movs	r3, #2
 800917e:	2200      	movs	r2, #0
 8009180:	f000 f8e2 	bl	8009348 <_lseek_r>
 8009184:	89a3      	ldrh	r3, [r4, #12]
 8009186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800918a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800918e:	81a3      	strh	r3, [r4, #12]
 8009190:	4632      	mov	r2, r6
 8009192:	463b      	mov	r3, r7
 8009194:	4628      	mov	r0, r5
 8009196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800919a:	f000 b909 	b.w	80093b0 <_write_r>

0800919e <__sseek>:
 800919e:	b510      	push	{r4, lr}
 80091a0:	460c      	mov	r4, r1
 80091a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091a6:	f000 f8cf 	bl	8009348 <_lseek_r>
 80091aa:	1c43      	adds	r3, r0, #1
 80091ac:	89a3      	ldrh	r3, [r4, #12]
 80091ae:	bf15      	itete	ne
 80091b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80091b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80091b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80091ba:	81a3      	strheq	r3, [r4, #12]
 80091bc:	bf18      	it	ne
 80091be:	81a3      	strhne	r3, [r4, #12]
 80091c0:	bd10      	pop	{r4, pc}

080091c2 <__sclose>:
 80091c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091c6:	f000 b8af 	b.w	8009328 <_close_r>

080091ca <__swbuf_r>:
 80091ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091cc:	460e      	mov	r6, r1
 80091ce:	4614      	mov	r4, r2
 80091d0:	4605      	mov	r5, r0
 80091d2:	b118      	cbz	r0, 80091dc <__swbuf_r+0x12>
 80091d4:	6a03      	ldr	r3, [r0, #32]
 80091d6:	b90b      	cbnz	r3, 80091dc <__swbuf_r+0x12>
 80091d8:	f7ff feee 	bl	8008fb8 <__sinit>
 80091dc:	69a3      	ldr	r3, [r4, #24]
 80091de:	60a3      	str	r3, [r4, #8]
 80091e0:	89a3      	ldrh	r3, [r4, #12]
 80091e2:	071a      	lsls	r2, r3, #28
 80091e4:	d501      	bpl.n	80091ea <__swbuf_r+0x20>
 80091e6:	6923      	ldr	r3, [r4, #16]
 80091e8:	b943      	cbnz	r3, 80091fc <__swbuf_r+0x32>
 80091ea:	4621      	mov	r1, r4
 80091ec:	4628      	mov	r0, r5
 80091ee:	f000 f82b 	bl	8009248 <__swsetup_r>
 80091f2:	b118      	cbz	r0, 80091fc <__swbuf_r+0x32>
 80091f4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80091f8:	4638      	mov	r0, r7
 80091fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091fc:	6823      	ldr	r3, [r4, #0]
 80091fe:	6922      	ldr	r2, [r4, #16]
 8009200:	1a98      	subs	r0, r3, r2
 8009202:	6963      	ldr	r3, [r4, #20]
 8009204:	b2f6      	uxtb	r6, r6
 8009206:	4283      	cmp	r3, r0
 8009208:	4637      	mov	r7, r6
 800920a:	dc05      	bgt.n	8009218 <__swbuf_r+0x4e>
 800920c:	4621      	mov	r1, r4
 800920e:	4628      	mov	r0, r5
 8009210:	f002 fe02 	bl	800be18 <_fflush_r>
 8009214:	2800      	cmp	r0, #0
 8009216:	d1ed      	bne.n	80091f4 <__swbuf_r+0x2a>
 8009218:	68a3      	ldr	r3, [r4, #8]
 800921a:	3b01      	subs	r3, #1
 800921c:	60a3      	str	r3, [r4, #8]
 800921e:	6823      	ldr	r3, [r4, #0]
 8009220:	1c5a      	adds	r2, r3, #1
 8009222:	6022      	str	r2, [r4, #0]
 8009224:	701e      	strb	r6, [r3, #0]
 8009226:	6962      	ldr	r2, [r4, #20]
 8009228:	1c43      	adds	r3, r0, #1
 800922a:	429a      	cmp	r2, r3
 800922c:	d004      	beq.n	8009238 <__swbuf_r+0x6e>
 800922e:	89a3      	ldrh	r3, [r4, #12]
 8009230:	07db      	lsls	r3, r3, #31
 8009232:	d5e1      	bpl.n	80091f8 <__swbuf_r+0x2e>
 8009234:	2e0a      	cmp	r6, #10
 8009236:	d1df      	bne.n	80091f8 <__swbuf_r+0x2e>
 8009238:	4621      	mov	r1, r4
 800923a:	4628      	mov	r0, r5
 800923c:	f002 fdec 	bl	800be18 <_fflush_r>
 8009240:	2800      	cmp	r0, #0
 8009242:	d0d9      	beq.n	80091f8 <__swbuf_r+0x2e>
 8009244:	e7d6      	b.n	80091f4 <__swbuf_r+0x2a>
	...

08009248 <__swsetup_r>:
 8009248:	b538      	push	{r3, r4, r5, lr}
 800924a:	4b29      	ldr	r3, [pc, #164]	@ (80092f0 <__swsetup_r+0xa8>)
 800924c:	4605      	mov	r5, r0
 800924e:	6818      	ldr	r0, [r3, #0]
 8009250:	460c      	mov	r4, r1
 8009252:	b118      	cbz	r0, 800925c <__swsetup_r+0x14>
 8009254:	6a03      	ldr	r3, [r0, #32]
 8009256:	b90b      	cbnz	r3, 800925c <__swsetup_r+0x14>
 8009258:	f7ff feae 	bl	8008fb8 <__sinit>
 800925c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009260:	0719      	lsls	r1, r3, #28
 8009262:	d422      	bmi.n	80092aa <__swsetup_r+0x62>
 8009264:	06da      	lsls	r2, r3, #27
 8009266:	d407      	bmi.n	8009278 <__swsetup_r+0x30>
 8009268:	2209      	movs	r2, #9
 800926a:	602a      	str	r2, [r5, #0]
 800926c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009270:	81a3      	strh	r3, [r4, #12]
 8009272:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009276:	e033      	b.n	80092e0 <__swsetup_r+0x98>
 8009278:	0758      	lsls	r0, r3, #29
 800927a:	d512      	bpl.n	80092a2 <__swsetup_r+0x5a>
 800927c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800927e:	b141      	cbz	r1, 8009292 <__swsetup_r+0x4a>
 8009280:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009284:	4299      	cmp	r1, r3
 8009286:	d002      	beq.n	800928e <__swsetup_r+0x46>
 8009288:	4628      	mov	r0, r5
 800928a:	f000 ff25 	bl	800a0d8 <_free_r>
 800928e:	2300      	movs	r3, #0
 8009290:	6363      	str	r3, [r4, #52]	@ 0x34
 8009292:	89a3      	ldrh	r3, [r4, #12]
 8009294:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009298:	81a3      	strh	r3, [r4, #12]
 800929a:	2300      	movs	r3, #0
 800929c:	6063      	str	r3, [r4, #4]
 800929e:	6923      	ldr	r3, [r4, #16]
 80092a0:	6023      	str	r3, [r4, #0]
 80092a2:	89a3      	ldrh	r3, [r4, #12]
 80092a4:	f043 0308 	orr.w	r3, r3, #8
 80092a8:	81a3      	strh	r3, [r4, #12]
 80092aa:	6923      	ldr	r3, [r4, #16]
 80092ac:	b94b      	cbnz	r3, 80092c2 <__swsetup_r+0x7a>
 80092ae:	89a3      	ldrh	r3, [r4, #12]
 80092b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80092b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092b8:	d003      	beq.n	80092c2 <__swsetup_r+0x7a>
 80092ba:	4621      	mov	r1, r4
 80092bc:	4628      	mov	r0, r5
 80092be:	f002 fdf9 	bl	800beb4 <__smakebuf_r>
 80092c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092c6:	f013 0201 	ands.w	r2, r3, #1
 80092ca:	d00a      	beq.n	80092e2 <__swsetup_r+0x9a>
 80092cc:	2200      	movs	r2, #0
 80092ce:	60a2      	str	r2, [r4, #8]
 80092d0:	6962      	ldr	r2, [r4, #20]
 80092d2:	4252      	negs	r2, r2
 80092d4:	61a2      	str	r2, [r4, #24]
 80092d6:	6922      	ldr	r2, [r4, #16]
 80092d8:	b942      	cbnz	r2, 80092ec <__swsetup_r+0xa4>
 80092da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80092de:	d1c5      	bne.n	800926c <__swsetup_r+0x24>
 80092e0:	bd38      	pop	{r3, r4, r5, pc}
 80092e2:	0799      	lsls	r1, r3, #30
 80092e4:	bf58      	it	pl
 80092e6:	6962      	ldrpl	r2, [r4, #20]
 80092e8:	60a2      	str	r2, [r4, #8]
 80092ea:	e7f4      	b.n	80092d6 <__swsetup_r+0x8e>
 80092ec:	2000      	movs	r0, #0
 80092ee:	e7f7      	b.n	80092e0 <__swsetup_r+0x98>
 80092f0:	20000018 	.word	0x20000018

080092f4 <memset>:
 80092f4:	4402      	add	r2, r0
 80092f6:	4603      	mov	r3, r0
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d100      	bne.n	80092fe <memset+0xa>
 80092fc:	4770      	bx	lr
 80092fe:	f803 1b01 	strb.w	r1, [r3], #1
 8009302:	e7f9      	b.n	80092f8 <memset+0x4>

08009304 <strchr>:
 8009304:	b2c9      	uxtb	r1, r1
 8009306:	4603      	mov	r3, r0
 8009308:	4618      	mov	r0, r3
 800930a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800930e:	b112      	cbz	r2, 8009316 <strchr+0x12>
 8009310:	428a      	cmp	r2, r1
 8009312:	d1f9      	bne.n	8009308 <strchr+0x4>
 8009314:	4770      	bx	lr
 8009316:	2900      	cmp	r1, #0
 8009318:	bf18      	it	ne
 800931a:	2000      	movne	r0, #0
 800931c:	4770      	bx	lr
	...

08009320 <_localeconv_r>:
 8009320:	4800      	ldr	r0, [pc, #0]	@ (8009324 <_localeconv_r+0x4>)
 8009322:	4770      	bx	lr
 8009324:	20000158 	.word	0x20000158

08009328 <_close_r>:
 8009328:	b538      	push	{r3, r4, r5, lr}
 800932a:	4d06      	ldr	r5, [pc, #24]	@ (8009344 <_close_r+0x1c>)
 800932c:	2300      	movs	r3, #0
 800932e:	4604      	mov	r4, r0
 8009330:	4608      	mov	r0, r1
 8009332:	602b      	str	r3, [r5, #0]
 8009334:	f7f9 f9de 	bl	80026f4 <_close>
 8009338:	1c43      	adds	r3, r0, #1
 800933a:	d102      	bne.n	8009342 <_close_r+0x1a>
 800933c:	682b      	ldr	r3, [r5, #0]
 800933e:	b103      	cbz	r3, 8009342 <_close_r+0x1a>
 8009340:	6023      	str	r3, [r4, #0]
 8009342:	bd38      	pop	{r3, r4, r5, pc}
 8009344:	20000570 	.word	0x20000570

08009348 <_lseek_r>:
 8009348:	b538      	push	{r3, r4, r5, lr}
 800934a:	4d07      	ldr	r5, [pc, #28]	@ (8009368 <_lseek_r+0x20>)
 800934c:	4604      	mov	r4, r0
 800934e:	4608      	mov	r0, r1
 8009350:	4611      	mov	r1, r2
 8009352:	2200      	movs	r2, #0
 8009354:	602a      	str	r2, [r5, #0]
 8009356:	461a      	mov	r2, r3
 8009358:	f7f9 f9f3 	bl	8002742 <_lseek>
 800935c:	1c43      	adds	r3, r0, #1
 800935e:	d102      	bne.n	8009366 <_lseek_r+0x1e>
 8009360:	682b      	ldr	r3, [r5, #0]
 8009362:	b103      	cbz	r3, 8009366 <_lseek_r+0x1e>
 8009364:	6023      	str	r3, [r4, #0]
 8009366:	bd38      	pop	{r3, r4, r5, pc}
 8009368:	20000570 	.word	0x20000570

0800936c <_read_r>:
 800936c:	b538      	push	{r3, r4, r5, lr}
 800936e:	4d07      	ldr	r5, [pc, #28]	@ (800938c <_read_r+0x20>)
 8009370:	4604      	mov	r4, r0
 8009372:	4608      	mov	r0, r1
 8009374:	4611      	mov	r1, r2
 8009376:	2200      	movs	r2, #0
 8009378:	602a      	str	r2, [r5, #0]
 800937a:	461a      	mov	r2, r3
 800937c:	f7f9 f981 	bl	8002682 <_read>
 8009380:	1c43      	adds	r3, r0, #1
 8009382:	d102      	bne.n	800938a <_read_r+0x1e>
 8009384:	682b      	ldr	r3, [r5, #0]
 8009386:	b103      	cbz	r3, 800938a <_read_r+0x1e>
 8009388:	6023      	str	r3, [r4, #0]
 800938a:	bd38      	pop	{r3, r4, r5, pc}
 800938c:	20000570 	.word	0x20000570

08009390 <_sbrk_r>:
 8009390:	b538      	push	{r3, r4, r5, lr}
 8009392:	4d06      	ldr	r5, [pc, #24]	@ (80093ac <_sbrk_r+0x1c>)
 8009394:	2300      	movs	r3, #0
 8009396:	4604      	mov	r4, r0
 8009398:	4608      	mov	r0, r1
 800939a:	602b      	str	r3, [r5, #0]
 800939c:	f7f9 f9de 	bl	800275c <_sbrk>
 80093a0:	1c43      	adds	r3, r0, #1
 80093a2:	d102      	bne.n	80093aa <_sbrk_r+0x1a>
 80093a4:	682b      	ldr	r3, [r5, #0]
 80093a6:	b103      	cbz	r3, 80093aa <_sbrk_r+0x1a>
 80093a8:	6023      	str	r3, [r4, #0]
 80093aa:	bd38      	pop	{r3, r4, r5, pc}
 80093ac:	20000570 	.word	0x20000570

080093b0 <_write_r>:
 80093b0:	b538      	push	{r3, r4, r5, lr}
 80093b2:	4d07      	ldr	r5, [pc, #28]	@ (80093d0 <_write_r+0x20>)
 80093b4:	4604      	mov	r4, r0
 80093b6:	4608      	mov	r0, r1
 80093b8:	4611      	mov	r1, r2
 80093ba:	2200      	movs	r2, #0
 80093bc:	602a      	str	r2, [r5, #0]
 80093be:	461a      	mov	r2, r3
 80093c0:	f7f9 f97c 	bl	80026bc <_write>
 80093c4:	1c43      	adds	r3, r0, #1
 80093c6:	d102      	bne.n	80093ce <_write_r+0x1e>
 80093c8:	682b      	ldr	r3, [r5, #0]
 80093ca:	b103      	cbz	r3, 80093ce <_write_r+0x1e>
 80093cc:	6023      	str	r3, [r4, #0]
 80093ce:	bd38      	pop	{r3, r4, r5, pc}
 80093d0:	20000570 	.word	0x20000570

080093d4 <__errno>:
 80093d4:	4b01      	ldr	r3, [pc, #4]	@ (80093dc <__errno+0x8>)
 80093d6:	6818      	ldr	r0, [r3, #0]
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	20000018 	.word	0x20000018

080093e0 <__libc_init_array>:
 80093e0:	b570      	push	{r4, r5, r6, lr}
 80093e2:	4d0d      	ldr	r5, [pc, #52]	@ (8009418 <__libc_init_array+0x38>)
 80093e4:	4c0d      	ldr	r4, [pc, #52]	@ (800941c <__libc_init_array+0x3c>)
 80093e6:	1b64      	subs	r4, r4, r5
 80093e8:	10a4      	asrs	r4, r4, #2
 80093ea:	2600      	movs	r6, #0
 80093ec:	42a6      	cmp	r6, r4
 80093ee:	d109      	bne.n	8009404 <__libc_init_array+0x24>
 80093f0:	4d0b      	ldr	r5, [pc, #44]	@ (8009420 <__libc_init_array+0x40>)
 80093f2:	4c0c      	ldr	r4, [pc, #48]	@ (8009424 <__libc_init_array+0x44>)
 80093f4:	f003 fc88 	bl	800cd08 <_init>
 80093f8:	1b64      	subs	r4, r4, r5
 80093fa:	10a4      	asrs	r4, r4, #2
 80093fc:	2600      	movs	r6, #0
 80093fe:	42a6      	cmp	r6, r4
 8009400:	d105      	bne.n	800940e <__libc_init_array+0x2e>
 8009402:	bd70      	pop	{r4, r5, r6, pc}
 8009404:	f855 3b04 	ldr.w	r3, [r5], #4
 8009408:	4798      	blx	r3
 800940a:	3601      	adds	r6, #1
 800940c:	e7ee      	b.n	80093ec <__libc_init_array+0xc>
 800940e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009412:	4798      	blx	r3
 8009414:	3601      	adds	r6, #1
 8009416:	e7f2      	b.n	80093fe <__libc_init_array+0x1e>
 8009418:	0800d578 	.word	0x0800d578
 800941c:	0800d578 	.word	0x0800d578
 8009420:	0800d578 	.word	0x0800d578
 8009424:	0800d57c 	.word	0x0800d57c

08009428 <__retarget_lock_init_recursive>:
 8009428:	4770      	bx	lr

0800942a <__retarget_lock_acquire_recursive>:
 800942a:	4770      	bx	lr

0800942c <__retarget_lock_release_recursive>:
 800942c:	4770      	bx	lr
	...

08009430 <nanf>:
 8009430:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009438 <nanf+0x8>
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	7fc00000 	.word	0x7fc00000

0800943c <quorem>:
 800943c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009440:	6903      	ldr	r3, [r0, #16]
 8009442:	690c      	ldr	r4, [r1, #16]
 8009444:	42a3      	cmp	r3, r4
 8009446:	4607      	mov	r7, r0
 8009448:	db7e      	blt.n	8009548 <quorem+0x10c>
 800944a:	3c01      	subs	r4, #1
 800944c:	f101 0814 	add.w	r8, r1, #20
 8009450:	00a3      	lsls	r3, r4, #2
 8009452:	f100 0514 	add.w	r5, r0, #20
 8009456:	9300      	str	r3, [sp, #0]
 8009458:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800945c:	9301      	str	r3, [sp, #4]
 800945e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009462:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009466:	3301      	adds	r3, #1
 8009468:	429a      	cmp	r2, r3
 800946a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800946e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009472:	d32e      	bcc.n	80094d2 <quorem+0x96>
 8009474:	f04f 0a00 	mov.w	sl, #0
 8009478:	46c4      	mov	ip, r8
 800947a:	46ae      	mov	lr, r5
 800947c:	46d3      	mov	fp, sl
 800947e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009482:	b298      	uxth	r0, r3
 8009484:	fb06 a000 	mla	r0, r6, r0, sl
 8009488:	0c02      	lsrs	r2, r0, #16
 800948a:	0c1b      	lsrs	r3, r3, #16
 800948c:	fb06 2303 	mla	r3, r6, r3, r2
 8009490:	f8de 2000 	ldr.w	r2, [lr]
 8009494:	b280      	uxth	r0, r0
 8009496:	b292      	uxth	r2, r2
 8009498:	1a12      	subs	r2, r2, r0
 800949a:	445a      	add	r2, fp
 800949c:	f8de 0000 	ldr.w	r0, [lr]
 80094a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80094aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80094ae:	b292      	uxth	r2, r2
 80094b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80094b4:	45e1      	cmp	r9, ip
 80094b6:	f84e 2b04 	str.w	r2, [lr], #4
 80094ba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80094be:	d2de      	bcs.n	800947e <quorem+0x42>
 80094c0:	9b00      	ldr	r3, [sp, #0]
 80094c2:	58eb      	ldr	r3, [r5, r3]
 80094c4:	b92b      	cbnz	r3, 80094d2 <quorem+0x96>
 80094c6:	9b01      	ldr	r3, [sp, #4]
 80094c8:	3b04      	subs	r3, #4
 80094ca:	429d      	cmp	r5, r3
 80094cc:	461a      	mov	r2, r3
 80094ce:	d32f      	bcc.n	8009530 <quorem+0xf4>
 80094d0:	613c      	str	r4, [r7, #16]
 80094d2:	4638      	mov	r0, r7
 80094d4:	f001 f90e 	bl	800a6f4 <__mcmp>
 80094d8:	2800      	cmp	r0, #0
 80094da:	db25      	blt.n	8009528 <quorem+0xec>
 80094dc:	4629      	mov	r1, r5
 80094de:	2000      	movs	r0, #0
 80094e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80094e4:	f8d1 c000 	ldr.w	ip, [r1]
 80094e8:	fa1f fe82 	uxth.w	lr, r2
 80094ec:	fa1f f38c 	uxth.w	r3, ip
 80094f0:	eba3 030e 	sub.w	r3, r3, lr
 80094f4:	4403      	add	r3, r0
 80094f6:	0c12      	lsrs	r2, r2, #16
 80094f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80094fc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009500:	b29b      	uxth	r3, r3
 8009502:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009506:	45c1      	cmp	r9, r8
 8009508:	f841 3b04 	str.w	r3, [r1], #4
 800950c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009510:	d2e6      	bcs.n	80094e0 <quorem+0xa4>
 8009512:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009516:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800951a:	b922      	cbnz	r2, 8009526 <quorem+0xea>
 800951c:	3b04      	subs	r3, #4
 800951e:	429d      	cmp	r5, r3
 8009520:	461a      	mov	r2, r3
 8009522:	d30b      	bcc.n	800953c <quorem+0x100>
 8009524:	613c      	str	r4, [r7, #16]
 8009526:	3601      	adds	r6, #1
 8009528:	4630      	mov	r0, r6
 800952a:	b003      	add	sp, #12
 800952c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009530:	6812      	ldr	r2, [r2, #0]
 8009532:	3b04      	subs	r3, #4
 8009534:	2a00      	cmp	r2, #0
 8009536:	d1cb      	bne.n	80094d0 <quorem+0x94>
 8009538:	3c01      	subs	r4, #1
 800953a:	e7c6      	b.n	80094ca <quorem+0x8e>
 800953c:	6812      	ldr	r2, [r2, #0]
 800953e:	3b04      	subs	r3, #4
 8009540:	2a00      	cmp	r2, #0
 8009542:	d1ef      	bne.n	8009524 <quorem+0xe8>
 8009544:	3c01      	subs	r4, #1
 8009546:	e7ea      	b.n	800951e <quorem+0xe2>
 8009548:	2000      	movs	r0, #0
 800954a:	e7ee      	b.n	800952a <quorem+0xee>
 800954c:	0000      	movs	r0, r0
	...

08009550 <_dtoa_r>:
 8009550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009554:	69c7      	ldr	r7, [r0, #28]
 8009556:	b099      	sub	sp, #100	@ 0x64
 8009558:	ed8d 0b02 	vstr	d0, [sp, #8]
 800955c:	ec55 4b10 	vmov	r4, r5, d0
 8009560:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009562:	9109      	str	r1, [sp, #36]	@ 0x24
 8009564:	4683      	mov	fp, r0
 8009566:	920e      	str	r2, [sp, #56]	@ 0x38
 8009568:	9313      	str	r3, [sp, #76]	@ 0x4c
 800956a:	b97f      	cbnz	r7, 800958c <_dtoa_r+0x3c>
 800956c:	2010      	movs	r0, #16
 800956e:	f7fe fd6d 	bl	800804c <malloc>
 8009572:	4602      	mov	r2, r0
 8009574:	f8cb 001c 	str.w	r0, [fp, #28]
 8009578:	b920      	cbnz	r0, 8009584 <_dtoa_r+0x34>
 800957a:	4ba7      	ldr	r3, [pc, #668]	@ (8009818 <_dtoa_r+0x2c8>)
 800957c:	21ef      	movs	r1, #239	@ 0xef
 800957e:	48a7      	ldr	r0, [pc, #668]	@ (800981c <_dtoa_r+0x2cc>)
 8009580:	f002 fd3a 	bl	800bff8 <__assert_func>
 8009584:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009588:	6007      	str	r7, [r0, #0]
 800958a:	60c7      	str	r7, [r0, #12]
 800958c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009590:	6819      	ldr	r1, [r3, #0]
 8009592:	b159      	cbz	r1, 80095ac <_dtoa_r+0x5c>
 8009594:	685a      	ldr	r2, [r3, #4]
 8009596:	604a      	str	r2, [r1, #4]
 8009598:	2301      	movs	r3, #1
 800959a:	4093      	lsls	r3, r2
 800959c:	608b      	str	r3, [r1, #8]
 800959e:	4658      	mov	r0, fp
 80095a0:	f000 fe24 	bl	800a1ec <_Bfree>
 80095a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80095a8:	2200      	movs	r2, #0
 80095aa:	601a      	str	r2, [r3, #0]
 80095ac:	1e2b      	subs	r3, r5, #0
 80095ae:	bfb9      	ittee	lt
 80095b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80095b4:	9303      	strlt	r3, [sp, #12]
 80095b6:	2300      	movge	r3, #0
 80095b8:	6033      	strge	r3, [r6, #0]
 80095ba:	9f03      	ldr	r7, [sp, #12]
 80095bc:	4b98      	ldr	r3, [pc, #608]	@ (8009820 <_dtoa_r+0x2d0>)
 80095be:	bfbc      	itt	lt
 80095c0:	2201      	movlt	r2, #1
 80095c2:	6032      	strlt	r2, [r6, #0]
 80095c4:	43bb      	bics	r3, r7
 80095c6:	d112      	bne.n	80095ee <_dtoa_r+0x9e>
 80095c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80095ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80095ce:	6013      	str	r3, [r2, #0]
 80095d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80095d4:	4323      	orrs	r3, r4
 80095d6:	f000 854d 	beq.w	800a074 <_dtoa_r+0xb24>
 80095da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80095dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009834 <_dtoa_r+0x2e4>
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f000 854f 	beq.w	800a084 <_dtoa_r+0xb34>
 80095e6:	f10a 0303 	add.w	r3, sl, #3
 80095ea:	f000 bd49 	b.w	800a080 <_dtoa_r+0xb30>
 80095ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095f2:	2200      	movs	r2, #0
 80095f4:	ec51 0b17 	vmov	r0, r1, d7
 80095f8:	2300      	movs	r3, #0
 80095fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80095fe:	f7f7 fa93 	bl	8000b28 <__aeabi_dcmpeq>
 8009602:	4680      	mov	r8, r0
 8009604:	b158      	cbz	r0, 800961e <_dtoa_r+0xce>
 8009606:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009608:	2301      	movs	r3, #1
 800960a:	6013      	str	r3, [r2, #0]
 800960c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800960e:	b113      	cbz	r3, 8009616 <_dtoa_r+0xc6>
 8009610:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009612:	4b84      	ldr	r3, [pc, #528]	@ (8009824 <_dtoa_r+0x2d4>)
 8009614:	6013      	str	r3, [r2, #0]
 8009616:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009838 <_dtoa_r+0x2e8>
 800961a:	f000 bd33 	b.w	800a084 <_dtoa_r+0xb34>
 800961e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009622:	aa16      	add	r2, sp, #88	@ 0x58
 8009624:	a917      	add	r1, sp, #92	@ 0x5c
 8009626:	4658      	mov	r0, fp
 8009628:	f001 f984 	bl	800a934 <__d2b>
 800962c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009630:	4681      	mov	r9, r0
 8009632:	2e00      	cmp	r6, #0
 8009634:	d077      	beq.n	8009726 <_dtoa_r+0x1d6>
 8009636:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009638:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800963c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009640:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009644:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009648:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800964c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009650:	4619      	mov	r1, r3
 8009652:	2200      	movs	r2, #0
 8009654:	4b74      	ldr	r3, [pc, #464]	@ (8009828 <_dtoa_r+0x2d8>)
 8009656:	f7f6 fe47 	bl	80002e8 <__aeabi_dsub>
 800965a:	a369      	add	r3, pc, #420	@ (adr r3, 8009800 <_dtoa_r+0x2b0>)
 800965c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009660:	f7f6 fffa 	bl	8000658 <__aeabi_dmul>
 8009664:	a368      	add	r3, pc, #416	@ (adr r3, 8009808 <_dtoa_r+0x2b8>)
 8009666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966a:	f7f6 fe3f 	bl	80002ec <__adddf3>
 800966e:	4604      	mov	r4, r0
 8009670:	4630      	mov	r0, r6
 8009672:	460d      	mov	r5, r1
 8009674:	f7f6 ff86 	bl	8000584 <__aeabi_i2d>
 8009678:	a365      	add	r3, pc, #404	@ (adr r3, 8009810 <_dtoa_r+0x2c0>)
 800967a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967e:	f7f6 ffeb 	bl	8000658 <__aeabi_dmul>
 8009682:	4602      	mov	r2, r0
 8009684:	460b      	mov	r3, r1
 8009686:	4620      	mov	r0, r4
 8009688:	4629      	mov	r1, r5
 800968a:	f7f6 fe2f 	bl	80002ec <__adddf3>
 800968e:	4604      	mov	r4, r0
 8009690:	460d      	mov	r5, r1
 8009692:	f7f7 fa91 	bl	8000bb8 <__aeabi_d2iz>
 8009696:	2200      	movs	r2, #0
 8009698:	4607      	mov	r7, r0
 800969a:	2300      	movs	r3, #0
 800969c:	4620      	mov	r0, r4
 800969e:	4629      	mov	r1, r5
 80096a0:	f7f7 fa4c 	bl	8000b3c <__aeabi_dcmplt>
 80096a4:	b140      	cbz	r0, 80096b8 <_dtoa_r+0x168>
 80096a6:	4638      	mov	r0, r7
 80096a8:	f7f6 ff6c 	bl	8000584 <__aeabi_i2d>
 80096ac:	4622      	mov	r2, r4
 80096ae:	462b      	mov	r3, r5
 80096b0:	f7f7 fa3a 	bl	8000b28 <__aeabi_dcmpeq>
 80096b4:	b900      	cbnz	r0, 80096b8 <_dtoa_r+0x168>
 80096b6:	3f01      	subs	r7, #1
 80096b8:	2f16      	cmp	r7, #22
 80096ba:	d851      	bhi.n	8009760 <_dtoa_r+0x210>
 80096bc:	4b5b      	ldr	r3, [pc, #364]	@ (800982c <_dtoa_r+0x2dc>)
 80096be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80096c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096ca:	f7f7 fa37 	bl	8000b3c <__aeabi_dcmplt>
 80096ce:	2800      	cmp	r0, #0
 80096d0:	d048      	beq.n	8009764 <_dtoa_r+0x214>
 80096d2:	3f01      	subs	r7, #1
 80096d4:	2300      	movs	r3, #0
 80096d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80096d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80096da:	1b9b      	subs	r3, r3, r6
 80096dc:	1e5a      	subs	r2, r3, #1
 80096de:	bf44      	itt	mi
 80096e0:	f1c3 0801 	rsbmi	r8, r3, #1
 80096e4:	2300      	movmi	r3, #0
 80096e6:	9208      	str	r2, [sp, #32]
 80096e8:	bf54      	ite	pl
 80096ea:	f04f 0800 	movpl.w	r8, #0
 80096ee:	9308      	strmi	r3, [sp, #32]
 80096f0:	2f00      	cmp	r7, #0
 80096f2:	db39      	blt.n	8009768 <_dtoa_r+0x218>
 80096f4:	9b08      	ldr	r3, [sp, #32]
 80096f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80096f8:	443b      	add	r3, r7
 80096fa:	9308      	str	r3, [sp, #32]
 80096fc:	2300      	movs	r3, #0
 80096fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009702:	2b09      	cmp	r3, #9
 8009704:	d864      	bhi.n	80097d0 <_dtoa_r+0x280>
 8009706:	2b05      	cmp	r3, #5
 8009708:	bfc4      	itt	gt
 800970a:	3b04      	subgt	r3, #4
 800970c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800970e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009710:	f1a3 0302 	sub.w	r3, r3, #2
 8009714:	bfcc      	ite	gt
 8009716:	2400      	movgt	r4, #0
 8009718:	2401      	movle	r4, #1
 800971a:	2b03      	cmp	r3, #3
 800971c:	d863      	bhi.n	80097e6 <_dtoa_r+0x296>
 800971e:	e8df f003 	tbb	[pc, r3]
 8009722:	372a      	.short	0x372a
 8009724:	5535      	.short	0x5535
 8009726:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800972a:	441e      	add	r6, r3
 800972c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009730:	2b20      	cmp	r3, #32
 8009732:	bfc1      	itttt	gt
 8009734:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009738:	409f      	lslgt	r7, r3
 800973a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800973e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009742:	bfd6      	itet	le
 8009744:	f1c3 0320 	rsble	r3, r3, #32
 8009748:	ea47 0003 	orrgt.w	r0, r7, r3
 800974c:	fa04 f003 	lslle.w	r0, r4, r3
 8009750:	f7f6 ff08 	bl	8000564 <__aeabi_ui2d>
 8009754:	2201      	movs	r2, #1
 8009756:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800975a:	3e01      	subs	r6, #1
 800975c:	9214      	str	r2, [sp, #80]	@ 0x50
 800975e:	e777      	b.n	8009650 <_dtoa_r+0x100>
 8009760:	2301      	movs	r3, #1
 8009762:	e7b8      	b.n	80096d6 <_dtoa_r+0x186>
 8009764:	9012      	str	r0, [sp, #72]	@ 0x48
 8009766:	e7b7      	b.n	80096d8 <_dtoa_r+0x188>
 8009768:	427b      	negs	r3, r7
 800976a:	930a      	str	r3, [sp, #40]	@ 0x28
 800976c:	2300      	movs	r3, #0
 800976e:	eba8 0807 	sub.w	r8, r8, r7
 8009772:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009774:	e7c4      	b.n	8009700 <_dtoa_r+0x1b0>
 8009776:	2300      	movs	r3, #0
 8009778:	930b      	str	r3, [sp, #44]	@ 0x2c
 800977a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800977c:	2b00      	cmp	r3, #0
 800977e:	dc35      	bgt.n	80097ec <_dtoa_r+0x29c>
 8009780:	2301      	movs	r3, #1
 8009782:	9300      	str	r3, [sp, #0]
 8009784:	9307      	str	r3, [sp, #28]
 8009786:	461a      	mov	r2, r3
 8009788:	920e      	str	r2, [sp, #56]	@ 0x38
 800978a:	e00b      	b.n	80097a4 <_dtoa_r+0x254>
 800978c:	2301      	movs	r3, #1
 800978e:	e7f3      	b.n	8009778 <_dtoa_r+0x228>
 8009790:	2300      	movs	r3, #0
 8009792:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009794:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009796:	18fb      	adds	r3, r7, r3
 8009798:	9300      	str	r3, [sp, #0]
 800979a:	3301      	adds	r3, #1
 800979c:	2b01      	cmp	r3, #1
 800979e:	9307      	str	r3, [sp, #28]
 80097a0:	bfb8      	it	lt
 80097a2:	2301      	movlt	r3, #1
 80097a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80097a8:	2100      	movs	r1, #0
 80097aa:	2204      	movs	r2, #4
 80097ac:	f102 0514 	add.w	r5, r2, #20
 80097b0:	429d      	cmp	r5, r3
 80097b2:	d91f      	bls.n	80097f4 <_dtoa_r+0x2a4>
 80097b4:	6041      	str	r1, [r0, #4]
 80097b6:	4658      	mov	r0, fp
 80097b8:	f000 fcd8 	bl	800a16c <_Balloc>
 80097bc:	4682      	mov	sl, r0
 80097be:	2800      	cmp	r0, #0
 80097c0:	d13c      	bne.n	800983c <_dtoa_r+0x2ec>
 80097c2:	4b1b      	ldr	r3, [pc, #108]	@ (8009830 <_dtoa_r+0x2e0>)
 80097c4:	4602      	mov	r2, r0
 80097c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80097ca:	e6d8      	b.n	800957e <_dtoa_r+0x2e>
 80097cc:	2301      	movs	r3, #1
 80097ce:	e7e0      	b.n	8009792 <_dtoa_r+0x242>
 80097d0:	2401      	movs	r4, #1
 80097d2:	2300      	movs	r3, #0
 80097d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80097d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80097d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80097dc:	9300      	str	r3, [sp, #0]
 80097de:	9307      	str	r3, [sp, #28]
 80097e0:	2200      	movs	r2, #0
 80097e2:	2312      	movs	r3, #18
 80097e4:	e7d0      	b.n	8009788 <_dtoa_r+0x238>
 80097e6:	2301      	movs	r3, #1
 80097e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097ea:	e7f5      	b.n	80097d8 <_dtoa_r+0x288>
 80097ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	9307      	str	r3, [sp, #28]
 80097f2:	e7d7      	b.n	80097a4 <_dtoa_r+0x254>
 80097f4:	3101      	adds	r1, #1
 80097f6:	0052      	lsls	r2, r2, #1
 80097f8:	e7d8      	b.n	80097ac <_dtoa_r+0x25c>
 80097fa:	bf00      	nop
 80097fc:	f3af 8000 	nop.w
 8009800:	636f4361 	.word	0x636f4361
 8009804:	3fd287a7 	.word	0x3fd287a7
 8009808:	8b60c8b3 	.word	0x8b60c8b3
 800980c:	3fc68a28 	.word	0x3fc68a28
 8009810:	509f79fb 	.word	0x509f79fb
 8009814:	3fd34413 	.word	0x3fd34413
 8009818:	0800d11a 	.word	0x0800d11a
 800981c:	0800d131 	.word	0x0800d131
 8009820:	7ff00000 	.word	0x7ff00000
 8009824:	0800d0e5 	.word	0x0800d0e5
 8009828:	3ff80000 	.word	0x3ff80000
 800982c:	0800d228 	.word	0x0800d228
 8009830:	0800d189 	.word	0x0800d189
 8009834:	0800d116 	.word	0x0800d116
 8009838:	0800d0e4 	.word	0x0800d0e4
 800983c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009840:	6018      	str	r0, [r3, #0]
 8009842:	9b07      	ldr	r3, [sp, #28]
 8009844:	2b0e      	cmp	r3, #14
 8009846:	f200 80a4 	bhi.w	8009992 <_dtoa_r+0x442>
 800984a:	2c00      	cmp	r4, #0
 800984c:	f000 80a1 	beq.w	8009992 <_dtoa_r+0x442>
 8009850:	2f00      	cmp	r7, #0
 8009852:	dd33      	ble.n	80098bc <_dtoa_r+0x36c>
 8009854:	4bad      	ldr	r3, [pc, #692]	@ (8009b0c <_dtoa_r+0x5bc>)
 8009856:	f007 020f 	and.w	r2, r7, #15
 800985a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800985e:	ed93 7b00 	vldr	d7, [r3]
 8009862:	05f8      	lsls	r0, r7, #23
 8009864:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009868:	ea4f 1427 	mov.w	r4, r7, asr #4
 800986c:	d516      	bpl.n	800989c <_dtoa_r+0x34c>
 800986e:	4ba8      	ldr	r3, [pc, #672]	@ (8009b10 <_dtoa_r+0x5c0>)
 8009870:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009874:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009878:	f7f7 f818 	bl	80008ac <__aeabi_ddiv>
 800987c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009880:	f004 040f 	and.w	r4, r4, #15
 8009884:	2603      	movs	r6, #3
 8009886:	4da2      	ldr	r5, [pc, #648]	@ (8009b10 <_dtoa_r+0x5c0>)
 8009888:	b954      	cbnz	r4, 80098a0 <_dtoa_r+0x350>
 800988a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800988e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009892:	f7f7 f80b 	bl	80008ac <__aeabi_ddiv>
 8009896:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800989a:	e028      	b.n	80098ee <_dtoa_r+0x39e>
 800989c:	2602      	movs	r6, #2
 800989e:	e7f2      	b.n	8009886 <_dtoa_r+0x336>
 80098a0:	07e1      	lsls	r1, r4, #31
 80098a2:	d508      	bpl.n	80098b6 <_dtoa_r+0x366>
 80098a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098ac:	f7f6 fed4 	bl	8000658 <__aeabi_dmul>
 80098b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098b4:	3601      	adds	r6, #1
 80098b6:	1064      	asrs	r4, r4, #1
 80098b8:	3508      	adds	r5, #8
 80098ba:	e7e5      	b.n	8009888 <_dtoa_r+0x338>
 80098bc:	f000 80d2 	beq.w	8009a64 <_dtoa_r+0x514>
 80098c0:	427c      	negs	r4, r7
 80098c2:	4b92      	ldr	r3, [pc, #584]	@ (8009b0c <_dtoa_r+0x5bc>)
 80098c4:	4d92      	ldr	r5, [pc, #584]	@ (8009b10 <_dtoa_r+0x5c0>)
 80098c6:	f004 020f 	and.w	r2, r4, #15
 80098ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098d6:	f7f6 febf 	bl	8000658 <__aeabi_dmul>
 80098da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098de:	1124      	asrs	r4, r4, #4
 80098e0:	2300      	movs	r3, #0
 80098e2:	2602      	movs	r6, #2
 80098e4:	2c00      	cmp	r4, #0
 80098e6:	f040 80b2 	bne.w	8009a4e <_dtoa_r+0x4fe>
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d1d3      	bne.n	8009896 <_dtoa_r+0x346>
 80098ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80098f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f000 80b7 	beq.w	8009a68 <_dtoa_r+0x518>
 80098fa:	4b86      	ldr	r3, [pc, #536]	@ (8009b14 <_dtoa_r+0x5c4>)
 80098fc:	2200      	movs	r2, #0
 80098fe:	4620      	mov	r0, r4
 8009900:	4629      	mov	r1, r5
 8009902:	f7f7 f91b 	bl	8000b3c <__aeabi_dcmplt>
 8009906:	2800      	cmp	r0, #0
 8009908:	f000 80ae 	beq.w	8009a68 <_dtoa_r+0x518>
 800990c:	9b07      	ldr	r3, [sp, #28]
 800990e:	2b00      	cmp	r3, #0
 8009910:	f000 80aa 	beq.w	8009a68 <_dtoa_r+0x518>
 8009914:	9b00      	ldr	r3, [sp, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	dd37      	ble.n	800998a <_dtoa_r+0x43a>
 800991a:	1e7b      	subs	r3, r7, #1
 800991c:	9304      	str	r3, [sp, #16]
 800991e:	4620      	mov	r0, r4
 8009920:	4b7d      	ldr	r3, [pc, #500]	@ (8009b18 <_dtoa_r+0x5c8>)
 8009922:	2200      	movs	r2, #0
 8009924:	4629      	mov	r1, r5
 8009926:	f7f6 fe97 	bl	8000658 <__aeabi_dmul>
 800992a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800992e:	9c00      	ldr	r4, [sp, #0]
 8009930:	3601      	adds	r6, #1
 8009932:	4630      	mov	r0, r6
 8009934:	f7f6 fe26 	bl	8000584 <__aeabi_i2d>
 8009938:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800993c:	f7f6 fe8c 	bl	8000658 <__aeabi_dmul>
 8009940:	4b76      	ldr	r3, [pc, #472]	@ (8009b1c <_dtoa_r+0x5cc>)
 8009942:	2200      	movs	r2, #0
 8009944:	f7f6 fcd2 	bl	80002ec <__adddf3>
 8009948:	4605      	mov	r5, r0
 800994a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800994e:	2c00      	cmp	r4, #0
 8009950:	f040 808d 	bne.w	8009a6e <_dtoa_r+0x51e>
 8009954:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009958:	4b71      	ldr	r3, [pc, #452]	@ (8009b20 <_dtoa_r+0x5d0>)
 800995a:	2200      	movs	r2, #0
 800995c:	f7f6 fcc4 	bl	80002e8 <__aeabi_dsub>
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009968:	462a      	mov	r2, r5
 800996a:	4633      	mov	r3, r6
 800996c:	f7f7 f904 	bl	8000b78 <__aeabi_dcmpgt>
 8009970:	2800      	cmp	r0, #0
 8009972:	f040 828b 	bne.w	8009e8c <_dtoa_r+0x93c>
 8009976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800997a:	462a      	mov	r2, r5
 800997c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009980:	f7f7 f8dc 	bl	8000b3c <__aeabi_dcmplt>
 8009984:	2800      	cmp	r0, #0
 8009986:	f040 8128 	bne.w	8009bda <_dtoa_r+0x68a>
 800998a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800998e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009992:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009994:	2b00      	cmp	r3, #0
 8009996:	f2c0 815a 	blt.w	8009c4e <_dtoa_r+0x6fe>
 800999a:	2f0e      	cmp	r7, #14
 800999c:	f300 8157 	bgt.w	8009c4e <_dtoa_r+0x6fe>
 80099a0:	4b5a      	ldr	r3, [pc, #360]	@ (8009b0c <_dtoa_r+0x5bc>)
 80099a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80099a6:	ed93 7b00 	vldr	d7, [r3]
 80099aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	ed8d 7b00 	vstr	d7, [sp]
 80099b2:	da03      	bge.n	80099bc <_dtoa_r+0x46c>
 80099b4:	9b07      	ldr	r3, [sp, #28]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	f340 8101 	ble.w	8009bbe <_dtoa_r+0x66e>
 80099bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80099c0:	4656      	mov	r6, sl
 80099c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099c6:	4620      	mov	r0, r4
 80099c8:	4629      	mov	r1, r5
 80099ca:	f7f6 ff6f 	bl	80008ac <__aeabi_ddiv>
 80099ce:	f7f7 f8f3 	bl	8000bb8 <__aeabi_d2iz>
 80099d2:	4680      	mov	r8, r0
 80099d4:	f7f6 fdd6 	bl	8000584 <__aeabi_i2d>
 80099d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099dc:	f7f6 fe3c 	bl	8000658 <__aeabi_dmul>
 80099e0:	4602      	mov	r2, r0
 80099e2:	460b      	mov	r3, r1
 80099e4:	4620      	mov	r0, r4
 80099e6:	4629      	mov	r1, r5
 80099e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80099ec:	f7f6 fc7c 	bl	80002e8 <__aeabi_dsub>
 80099f0:	f806 4b01 	strb.w	r4, [r6], #1
 80099f4:	9d07      	ldr	r5, [sp, #28]
 80099f6:	eba6 040a 	sub.w	r4, r6, sl
 80099fa:	42a5      	cmp	r5, r4
 80099fc:	4602      	mov	r2, r0
 80099fe:	460b      	mov	r3, r1
 8009a00:	f040 8117 	bne.w	8009c32 <_dtoa_r+0x6e2>
 8009a04:	f7f6 fc72 	bl	80002ec <__adddf3>
 8009a08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	460d      	mov	r5, r1
 8009a10:	f7f7 f8b2 	bl	8000b78 <__aeabi_dcmpgt>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	f040 80f9 	bne.w	8009c0c <_dtoa_r+0x6bc>
 8009a1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a1e:	4620      	mov	r0, r4
 8009a20:	4629      	mov	r1, r5
 8009a22:	f7f7 f881 	bl	8000b28 <__aeabi_dcmpeq>
 8009a26:	b118      	cbz	r0, 8009a30 <_dtoa_r+0x4e0>
 8009a28:	f018 0f01 	tst.w	r8, #1
 8009a2c:	f040 80ee 	bne.w	8009c0c <_dtoa_r+0x6bc>
 8009a30:	4649      	mov	r1, r9
 8009a32:	4658      	mov	r0, fp
 8009a34:	f000 fbda 	bl	800a1ec <_Bfree>
 8009a38:	2300      	movs	r3, #0
 8009a3a:	7033      	strb	r3, [r6, #0]
 8009a3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a3e:	3701      	adds	r7, #1
 8009a40:	601f      	str	r7, [r3, #0]
 8009a42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f000 831d 	beq.w	800a084 <_dtoa_r+0xb34>
 8009a4a:	601e      	str	r6, [r3, #0]
 8009a4c:	e31a      	b.n	800a084 <_dtoa_r+0xb34>
 8009a4e:	07e2      	lsls	r2, r4, #31
 8009a50:	d505      	bpl.n	8009a5e <_dtoa_r+0x50e>
 8009a52:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a56:	f7f6 fdff 	bl	8000658 <__aeabi_dmul>
 8009a5a:	3601      	adds	r6, #1
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	1064      	asrs	r4, r4, #1
 8009a60:	3508      	adds	r5, #8
 8009a62:	e73f      	b.n	80098e4 <_dtoa_r+0x394>
 8009a64:	2602      	movs	r6, #2
 8009a66:	e742      	b.n	80098ee <_dtoa_r+0x39e>
 8009a68:	9c07      	ldr	r4, [sp, #28]
 8009a6a:	9704      	str	r7, [sp, #16]
 8009a6c:	e761      	b.n	8009932 <_dtoa_r+0x3e2>
 8009a6e:	4b27      	ldr	r3, [pc, #156]	@ (8009b0c <_dtoa_r+0x5bc>)
 8009a70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009a72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a76:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a7a:	4454      	add	r4, sl
 8009a7c:	2900      	cmp	r1, #0
 8009a7e:	d053      	beq.n	8009b28 <_dtoa_r+0x5d8>
 8009a80:	4928      	ldr	r1, [pc, #160]	@ (8009b24 <_dtoa_r+0x5d4>)
 8009a82:	2000      	movs	r0, #0
 8009a84:	f7f6 ff12 	bl	80008ac <__aeabi_ddiv>
 8009a88:	4633      	mov	r3, r6
 8009a8a:	462a      	mov	r2, r5
 8009a8c:	f7f6 fc2c 	bl	80002e8 <__aeabi_dsub>
 8009a90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a94:	4656      	mov	r6, sl
 8009a96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a9a:	f7f7 f88d 	bl	8000bb8 <__aeabi_d2iz>
 8009a9e:	4605      	mov	r5, r0
 8009aa0:	f7f6 fd70 	bl	8000584 <__aeabi_i2d>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009aac:	f7f6 fc1c 	bl	80002e8 <__aeabi_dsub>
 8009ab0:	3530      	adds	r5, #48	@ 0x30
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009aba:	f806 5b01 	strb.w	r5, [r6], #1
 8009abe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009ac2:	f7f7 f83b 	bl	8000b3c <__aeabi_dcmplt>
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	d171      	bne.n	8009bae <_dtoa_r+0x65e>
 8009aca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ace:	4911      	ldr	r1, [pc, #68]	@ (8009b14 <_dtoa_r+0x5c4>)
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	f7f6 fc09 	bl	80002e8 <__aeabi_dsub>
 8009ad6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009ada:	f7f7 f82f 	bl	8000b3c <__aeabi_dcmplt>
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	f040 8095 	bne.w	8009c0e <_dtoa_r+0x6be>
 8009ae4:	42a6      	cmp	r6, r4
 8009ae6:	f43f af50 	beq.w	800998a <_dtoa_r+0x43a>
 8009aea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009aee:	4b0a      	ldr	r3, [pc, #40]	@ (8009b18 <_dtoa_r+0x5c8>)
 8009af0:	2200      	movs	r2, #0
 8009af2:	f7f6 fdb1 	bl	8000658 <__aeabi_dmul>
 8009af6:	4b08      	ldr	r3, [pc, #32]	@ (8009b18 <_dtoa_r+0x5c8>)
 8009af8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009afc:	2200      	movs	r2, #0
 8009afe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b02:	f7f6 fda9 	bl	8000658 <__aeabi_dmul>
 8009b06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b0a:	e7c4      	b.n	8009a96 <_dtoa_r+0x546>
 8009b0c:	0800d228 	.word	0x0800d228
 8009b10:	0800d200 	.word	0x0800d200
 8009b14:	3ff00000 	.word	0x3ff00000
 8009b18:	40240000 	.word	0x40240000
 8009b1c:	401c0000 	.word	0x401c0000
 8009b20:	40140000 	.word	0x40140000
 8009b24:	3fe00000 	.word	0x3fe00000
 8009b28:	4631      	mov	r1, r6
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	f7f6 fd94 	bl	8000658 <__aeabi_dmul>
 8009b30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009b34:	9415      	str	r4, [sp, #84]	@ 0x54
 8009b36:	4656      	mov	r6, sl
 8009b38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b3c:	f7f7 f83c 	bl	8000bb8 <__aeabi_d2iz>
 8009b40:	4605      	mov	r5, r0
 8009b42:	f7f6 fd1f 	bl	8000584 <__aeabi_i2d>
 8009b46:	4602      	mov	r2, r0
 8009b48:	460b      	mov	r3, r1
 8009b4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b4e:	f7f6 fbcb 	bl	80002e8 <__aeabi_dsub>
 8009b52:	3530      	adds	r5, #48	@ 0x30
 8009b54:	f806 5b01 	strb.w	r5, [r6], #1
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	42a6      	cmp	r6, r4
 8009b5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b62:	f04f 0200 	mov.w	r2, #0
 8009b66:	d124      	bne.n	8009bb2 <_dtoa_r+0x662>
 8009b68:	4bac      	ldr	r3, [pc, #688]	@ (8009e1c <_dtoa_r+0x8cc>)
 8009b6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009b6e:	f7f6 fbbd 	bl	80002ec <__adddf3>
 8009b72:	4602      	mov	r2, r0
 8009b74:	460b      	mov	r3, r1
 8009b76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b7a:	f7f6 fffd 	bl	8000b78 <__aeabi_dcmpgt>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	d145      	bne.n	8009c0e <_dtoa_r+0x6be>
 8009b82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009b86:	49a5      	ldr	r1, [pc, #660]	@ (8009e1c <_dtoa_r+0x8cc>)
 8009b88:	2000      	movs	r0, #0
 8009b8a:	f7f6 fbad 	bl	80002e8 <__aeabi_dsub>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	460b      	mov	r3, r1
 8009b92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b96:	f7f6 ffd1 	bl	8000b3c <__aeabi_dcmplt>
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	f43f aef5 	beq.w	800998a <_dtoa_r+0x43a>
 8009ba0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009ba2:	1e73      	subs	r3, r6, #1
 8009ba4:	9315      	str	r3, [sp, #84]	@ 0x54
 8009ba6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009baa:	2b30      	cmp	r3, #48	@ 0x30
 8009bac:	d0f8      	beq.n	8009ba0 <_dtoa_r+0x650>
 8009bae:	9f04      	ldr	r7, [sp, #16]
 8009bb0:	e73e      	b.n	8009a30 <_dtoa_r+0x4e0>
 8009bb2:	4b9b      	ldr	r3, [pc, #620]	@ (8009e20 <_dtoa_r+0x8d0>)
 8009bb4:	f7f6 fd50 	bl	8000658 <__aeabi_dmul>
 8009bb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bbc:	e7bc      	b.n	8009b38 <_dtoa_r+0x5e8>
 8009bbe:	d10c      	bne.n	8009bda <_dtoa_r+0x68a>
 8009bc0:	4b98      	ldr	r3, [pc, #608]	@ (8009e24 <_dtoa_r+0x8d4>)
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009bc8:	f7f6 fd46 	bl	8000658 <__aeabi_dmul>
 8009bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bd0:	f7f6 ffc8 	bl	8000b64 <__aeabi_dcmpge>
 8009bd4:	2800      	cmp	r0, #0
 8009bd6:	f000 8157 	beq.w	8009e88 <_dtoa_r+0x938>
 8009bda:	2400      	movs	r4, #0
 8009bdc:	4625      	mov	r5, r4
 8009bde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009be0:	43db      	mvns	r3, r3
 8009be2:	9304      	str	r3, [sp, #16]
 8009be4:	4656      	mov	r6, sl
 8009be6:	2700      	movs	r7, #0
 8009be8:	4621      	mov	r1, r4
 8009bea:	4658      	mov	r0, fp
 8009bec:	f000 fafe 	bl	800a1ec <_Bfree>
 8009bf0:	2d00      	cmp	r5, #0
 8009bf2:	d0dc      	beq.n	8009bae <_dtoa_r+0x65e>
 8009bf4:	b12f      	cbz	r7, 8009c02 <_dtoa_r+0x6b2>
 8009bf6:	42af      	cmp	r7, r5
 8009bf8:	d003      	beq.n	8009c02 <_dtoa_r+0x6b2>
 8009bfa:	4639      	mov	r1, r7
 8009bfc:	4658      	mov	r0, fp
 8009bfe:	f000 faf5 	bl	800a1ec <_Bfree>
 8009c02:	4629      	mov	r1, r5
 8009c04:	4658      	mov	r0, fp
 8009c06:	f000 faf1 	bl	800a1ec <_Bfree>
 8009c0a:	e7d0      	b.n	8009bae <_dtoa_r+0x65e>
 8009c0c:	9704      	str	r7, [sp, #16]
 8009c0e:	4633      	mov	r3, r6
 8009c10:	461e      	mov	r6, r3
 8009c12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c16:	2a39      	cmp	r2, #57	@ 0x39
 8009c18:	d107      	bne.n	8009c2a <_dtoa_r+0x6da>
 8009c1a:	459a      	cmp	sl, r3
 8009c1c:	d1f8      	bne.n	8009c10 <_dtoa_r+0x6c0>
 8009c1e:	9a04      	ldr	r2, [sp, #16]
 8009c20:	3201      	adds	r2, #1
 8009c22:	9204      	str	r2, [sp, #16]
 8009c24:	2230      	movs	r2, #48	@ 0x30
 8009c26:	f88a 2000 	strb.w	r2, [sl]
 8009c2a:	781a      	ldrb	r2, [r3, #0]
 8009c2c:	3201      	adds	r2, #1
 8009c2e:	701a      	strb	r2, [r3, #0]
 8009c30:	e7bd      	b.n	8009bae <_dtoa_r+0x65e>
 8009c32:	4b7b      	ldr	r3, [pc, #492]	@ (8009e20 <_dtoa_r+0x8d0>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	f7f6 fd0f 	bl	8000658 <__aeabi_dmul>
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	4604      	mov	r4, r0
 8009c40:	460d      	mov	r5, r1
 8009c42:	f7f6 ff71 	bl	8000b28 <__aeabi_dcmpeq>
 8009c46:	2800      	cmp	r0, #0
 8009c48:	f43f aebb 	beq.w	80099c2 <_dtoa_r+0x472>
 8009c4c:	e6f0      	b.n	8009a30 <_dtoa_r+0x4e0>
 8009c4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009c50:	2a00      	cmp	r2, #0
 8009c52:	f000 80db 	beq.w	8009e0c <_dtoa_r+0x8bc>
 8009c56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c58:	2a01      	cmp	r2, #1
 8009c5a:	f300 80bf 	bgt.w	8009ddc <_dtoa_r+0x88c>
 8009c5e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009c60:	2a00      	cmp	r2, #0
 8009c62:	f000 80b7 	beq.w	8009dd4 <_dtoa_r+0x884>
 8009c66:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009c6a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009c6c:	4646      	mov	r6, r8
 8009c6e:	9a08      	ldr	r2, [sp, #32]
 8009c70:	2101      	movs	r1, #1
 8009c72:	441a      	add	r2, r3
 8009c74:	4658      	mov	r0, fp
 8009c76:	4498      	add	r8, r3
 8009c78:	9208      	str	r2, [sp, #32]
 8009c7a:	f000 fbb5 	bl	800a3e8 <__i2b>
 8009c7e:	4605      	mov	r5, r0
 8009c80:	b15e      	cbz	r6, 8009c9a <_dtoa_r+0x74a>
 8009c82:	9b08      	ldr	r3, [sp, #32]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	dd08      	ble.n	8009c9a <_dtoa_r+0x74a>
 8009c88:	42b3      	cmp	r3, r6
 8009c8a:	9a08      	ldr	r2, [sp, #32]
 8009c8c:	bfa8      	it	ge
 8009c8e:	4633      	movge	r3, r6
 8009c90:	eba8 0803 	sub.w	r8, r8, r3
 8009c94:	1af6      	subs	r6, r6, r3
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	9308      	str	r3, [sp, #32]
 8009c9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c9c:	b1f3      	cbz	r3, 8009cdc <_dtoa_r+0x78c>
 8009c9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f000 80b7 	beq.w	8009e14 <_dtoa_r+0x8c4>
 8009ca6:	b18c      	cbz	r4, 8009ccc <_dtoa_r+0x77c>
 8009ca8:	4629      	mov	r1, r5
 8009caa:	4622      	mov	r2, r4
 8009cac:	4658      	mov	r0, fp
 8009cae:	f000 fc5b 	bl	800a568 <__pow5mult>
 8009cb2:	464a      	mov	r2, r9
 8009cb4:	4601      	mov	r1, r0
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	4658      	mov	r0, fp
 8009cba:	f000 fbab 	bl	800a414 <__multiply>
 8009cbe:	4649      	mov	r1, r9
 8009cc0:	9004      	str	r0, [sp, #16]
 8009cc2:	4658      	mov	r0, fp
 8009cc4:	f000 fa92 	bl	800a1ec <_Bfree>
 8009cc8:	9b04      	ldr	r3, [sp, #16]
 8009cca:	4699      	mov	r9, r3
 8009ccc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cce:	1b1a      	subs	r2, r3, r4
 8009cd0:	d004      	beq.n	8009cdc <_dtoa_r+0x78c>
 8009cd2:	4649      	mov	r1, r9
 8009cd4:	4658      	mov	r0, fp
 8009cd6:	f000 fc47 	bl	800a568 <__pow5mult>
 8009cda:	4681      	mov	r9, r0
 8009cdc:	2101      	movs	r1, #1
 8009cde:	4658      	mov	r0, fp
 8009ce0:	f000 fb82 	bl	800a3e8 <__i2b>
 8009ce4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f000 81cf 	beq.w	800a08c <_dtoa_r+0xb3c>
 8009cee:	461a      	mov	r2, r3
 8009cf0:	4601      	mov	r1, r0
 8009cf2:	4658      	mov	r0, fp
 8009cf4:	f000 fc38 	bl	800a568 <__pow5mult>
 8009cf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	f300 8095 	bgt.w	8009e2c <_dtoa_r+0x8dc>
 8009d02:	9b02      	ldr	r3, [sp, #8]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	f040 8087 	bne.w	8009e18 <_dtoa_r+0x8c8>
 8009d0a:	9b03      	ldr	r3, [sp, #12]
 8009d0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f040 8089 	bne.w	8009e28 <_dtoa_r+0x8d8>
 8009d16:	9b03      	ldr	r3, [sp, #12]
 8009d18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009d1c:	0d1b      	lsrs	r3, r3, #20
 8009d1e:	051b      	lsls	r3, r3, #20
 8009d20:	b12b      	cbz	r3, 8009d2e <_dtoa_r+0x7de>
 8009d22:	9b08      	ldr	r3, [sp, #32]
 8009d24:	3301      	adds	r3, #1
 8009d26:	9308      	str	r3, [sp, #32]
 8009d28:	f108 0801 	add.w	r8, r8, #1
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f000 81b0 	beq.w	800a098 <_dtoa_r+0xb48>
 8009d38:	6923      	ldr	r3, [r4, #16]
 8009d3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d3e:	6918      	ldr	r0, [r3, #16]
 8009d40:	f000 fb06 	bl	800a350 <__hi0bits>
 8009d44:	f1c0 0020 	rsb	r0, r0, #32
 8009d48:	9b08      	ldr	r3, [sp, #32]
 8009d4a:	4418      	add	r0, r3
 8009d4c:	f010 001f 	ands.w	r0, r0, #31
 8009d50:	d077      	beq.n	8009e42 <_dtoa_r+0x8f2>
 8009d52:	f1c0 0320 	rsb	r3, r0, #32
 8009d56:	2b04      	cmp	r3, #4
 8009d58:	dd6b      	ble.n	8009e32 <_dtoa_r+0x8e2>
 8009d5a:	9b08      	ldr	r3, [sp, #32]
 8009d5c:	f1c0 001c 	rsb	r0, r0, #28
 8009d60:	4403      	add	r3, r0
 8009d62:	4480      	add	r8, r0
 8009d64:	4406      	add	r6, r0
 8009d66:	9308      	str	r3, [sp, #32]
 8009d68:	f1b8 0f00 	cmp.w	r8, #0
 8009d6c:	dd05      	ble.n	8009d7a <_dtoa_r+0x82a>
 8009d6e:	4649      	mov	r1, r9
 8009d70:	4642      	mov	r2, r8
 8009d72:	4658      	mov	r0, fp
 8009d74:	f000 fc52 	bl	800a61c <__lshift>
 8009d78:	4681      	mov	r9, r0
 8009d7a:	9b08      	ldr	r3, [sp, #32]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	dd05      	ble.n	8009d8c <_dtoa_r+0x83c>
 8009d80:	4621      	mov	r1, r4
 8009d82:	461a      	mov	r2, r3
 8009d84:	4658      	mov	r0, fp
 8009d86:	f000 fc49 	bl	800a61c <__lshift>
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d059      	beq.n	8009e46 <_dtoa_r+0x8f6>
 8009d92:	4621      	mov	r1, r4
 8009d94:	4648      	mov	r0, r9
 8009d96:	f000 fcad 	bl	800a6f4 <__mcmp>
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	da53      	bge.n	8009e46 <_dtoa_r+0x8f6>
 8009d9e:	1e7b      	subs	r3, r7, #1
 8009da0:	9304      	str	r3, [sp, #16]
 8009da2:	4649      	mov	r1, r9
 8009da4:	2300      	movs	r3, #0
 8009da6:	220a      	movs	r2, #10
 8009da8:	4658      	mov	r0, fp
 8009daa:	f000 fa41 	bl	800a230 <__multadd>
 8009dae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009db0:	4681      	mov	r9, r0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f000 8172 	beq.w	800a09c <_dtoa_r+0xb4c>
 8009db8:	2300      	movs	r3, #0
 8009dba:	4629      	mov	r1, r5
 8009dbc:	220a      	movs	r2, #10
 8009dbe:	4658      	mov	r0, fp
 8009dc0:	f000 fa36 	bl	800a230 <__multadd>
 8009dc4:	9b00      	ldr	r3, [sp, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	4605      	mov	r5, r0
 8009dca:	dc67      	bgt.n	8009e9c <_dtoa_r+0x94c>
 8009dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	dc41      	bgt.n	8009e56 <_dtoa_r+0x906>
 8009dd2:	e063      	b.n	8009e9c <_dtoa_r+0x94c>
 8009dd4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009dd6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009dda:	e746      	b.n	8009c6a <_dtoa_r+0x71a>
 8009ddc:	9b07      	ldr	r3, [sp, #28]
 8009dde:	1e5c      	subs	r4, r3, #1
 8009de0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009de2:	42a3      	cmp	r3, r4
 8009de4:	bfbf      	itttt	lt
 8009de6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009de8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009dea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009dec:	1ae3      	sublt	r3, r4, r3
 8009dee:	bfb4      	ite	lt
 8009df0:	18d2      	addlt	r2, r2, r3
 8009df2:	1b1c      	subge	r4, r3, r4
 8009df4:	9b07      	ldr	r3, [sp, #28]
 8009df6:	bfbc      	itt	lt
 8009df8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009dfa:	2400      	movlt	r4, #0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	bfb5      	itete	lt
 8009e00:	eba8 0603 	sublt.w	r6, r8, r3
 8009e04:	9b07      	ldrge	r3, [sp, #28]
 8009e06:	2300      	movlt	r3, #0
 8009e08:	4646      	movge	r6, r8
 8009e0a:	e730      	b.n	8009c6e <_dtoa_r+0x71e>
 8009e0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009e0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009e10:	4646      	mov	r6, r8
 8009e12:	e735      	b.n	8009c80 <_dtoa_r+0x730>
 8009e14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e16:	e75c      	b.n	8009cd2 <_dtoa_r+0x782>
 8009e18:	2300      	movs	r3, #0
 8009e1a:	e788      	b.n	8009d2e <_dtoa_r+0x7de>
 8009e1c:	3fe00000 	.word	0x3fe00000
 8009e20:	40240000 	.word	0x40240000
 8009e24:	40140000 	.word	0x40140000
 8009e28:	9b02      	ldr	r3, [sp, #8]
 8009e2a:	e780      	b.n	8009d2e <_dtoa_r+0x7de>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e30:	e782      	b.n	8009d38 <_dtoa_r+0x7e8>
 8009e32:	d099      	beq.n	8009d68 <_dtoa_r+0x818>
 8009e34:	9a08      	ldr	r2, [sp, #32]
 8009e36:	331c      	adds	r3, #28
 8009e38:	441a      	add	r2, r3
 8009e3a:	4498      	add	r8, r3
 8009e3c:	441e      	add	r6, r3
 8009e3e:	9208      	str	r2, [sp, #32]
 8009e40:	e792      	b.n	8009d68 <_dtoa_r+0x818>
 8009e42:	4603      	mov	r3, r0
 8009e44:	e7f6      	b.n	8009e34 <_dtoa_r+0x8e4>
 8009e46:	9b07      	ldr	r3, [sp, #28]
 8009e48:	9704      	str	r7, [sp, #16]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	dc20      	bgt.n	8009e90 <_dtoa_r+0x940>
 8009e4e:	9300      	str	r3, [sp, #0]
 8009e50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e52:	2b02      	cmp	r3, #2
 8009e54:	dd1e      	ble.n	8009e94 <_dtoa_r+0x944>
 8009e56:	9b00      	ldr	r3, [sp, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f47f aec0 	bne.w	8009bde <_dtoa_r+0x68e>
 8009e5e:	4621      	mov	r1, r4
 8009e60:	2205      	movs	r2, #5
 8009e62:	4658      	mov	r0, fp
 8009e64:	f000 f9e4 	bl	800a230 <__multadd>
 8009e68:	4601      	mov	r1, r0
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	4648      	mov	r0, r9
 8009e6e:	f000 fc41 	bl	800a6f4 <__mcmp>
 8009e72:	2800      	cmp	r0, #0
 8009e74:	f77f aeb3 	ble.w	8009bde <_dtoa_r+0x68e>
 8009e78:	4656      	mov	r6, sl
 8009e7a:	2331      	movs	r3, #49	@ 0x31
 8009e7c:	f806 3b01 	strb.w	r3, [r6], #1
 8009e80:	9b04      	ldr	r3, [sp, #16]
 8009e82:	3301      	adds	r3, #1
 8009e84:	9304      	str	r3, [sp, #16]
 8009e86:	e6ae      	b.n	8009be6 <_dtoa_r+0x696>
 8009e88:	9c07      	ldr	r4, [sp, #28]
 8009e8a:	9704      	str	r7, [sp, #16]
 8009e8c:	4625      	mov	r5, r4
 8009e8e:	e7f3      	b.n	8009e78 <_dtoa_r+0x928>
 8009e90:	9b07      	ldr	r3, [sp, #28]
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	f000 8104 	beq.w	800a0a4 <_dtoa_r+0xb54>
 8009e9c:	2e00      	cmp	r6, #0
 8009e9e:	dd05      	ble.n	8009eac <_dtoa_r+0x95c>
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	4632      	mov	r2, r6
 8009ea4:	4658      	mov	r0, fp
 8009ea6:	f000 fbb9 	bl	800a61c <__lshift>
 8009eaa:	4605      	mov	r5, r0
 8009eac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d05a      	beq.n	8009f68 <_dtoa_r+0xa18>
 8009eb2:	6869      	ldr	r1, [r5, #4]
 8009eb4:	4658      	mov	r0, fp
 8009eb6:	f000 f959 	bl	800a16c <_Balloc>
 8009eba:	4606      	mov	r6, r0
 8009ebc:	b928      	cbnz	r0, 8009eca <_dtoa_r+0x97a>
 8009ebe:	4b84      	ldr	r3, [pc, #528]	@ (800a0d0 <_dtoa_r+0xb80>)
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009ec6:	f7ff bb5a 	b.w	800957e <_dtoa_r+0x2e>
 8009eca:	692a      	ldr	r2, [r5, #16]
 8009ecc:	3202      	adds	r2, #2
 8009ece:	0092      	lsls	r2, r2, #2
 8009ed0:	f105 010c 	add.w	r1, r5, #12
 8009ed4:	300c      	adds	r0, #12
 8009ed6:	f002 f877 	bl	800bfc8 <memcpy>
 8009eda:	2201      	movs	r2, #1
 8009edc:	4631      	mov	r1, r6
 8009ede:	4658      	mov	r0, fp
 8009ee0:	f000 fb9c 	bl	800a61c <__lshift>
 8009ee4:	f10a 0301 	add.w	r3, sl, #1
 8009ee8:	9307      	str	r3, [sp, #28]
 8009eea:	9b00      	ldr	r3, [sp, #0]
 8009eec:	4453      	add	r3, sl
 8009eee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ef0:	9b02      	ldr	r3, [sp, #8]
 8009ef2:	f003 0301 	and.w	r3, r3, #1
 8009ef6:	462f      	mov	r7, r5
 8009ef8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009efa:	4605      	mov	r5, r0
 8009efc:	9b07      	ldr	r3, [sp, #28]
 8009efe:	4621      	mov	r1, r4
 8009f00:	3b01      	subs	r3, #1
 8009f02:	4648      	mov	r0, r9
 8009f04:	9300      	str	r3, [sp, #0]
 8009f06:	f7ff fa99 	bl	800943c <quorem>
 8009f0a:	4639      	mov	r1, r7
 8009f0c:	9002      	str	r0, [sp, #8]
 8009f0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009f12:	4648      	mov	r0, r9
 8009f14:	f000 fbee 	bl	800a6f4 <__mcmp>
 8009f18:	462a      	mov	r2, r5
 8009f1a:	9008      	str	r0, [sp, #32]
 8009f1c:	4621      	mov	r1, r4
 8009f1e:	4658      	mov	r0, fp
 8009f20:	f000 fc04 	bl	800a72c <__mdiff>
 8009f24:	68c2      	ldr	r2, [r0, #12]
 8009f26:	4606      	mov	r6, r0
 8009f28:	bb02      	cbnz	r2, 8009f6c <_dtoa_r+0xa1c>
 8009f2a:	4601      	mov	r1, r0
 8009f2c:	4648      	mov	r0, r9
 8009f2e:	f000 fbe1 	bl	800a6f4 <__mcmp>
 8009f32:	4602      	mov	r2, r0
 8009f34:	4631      	mov	r1, r6
 8009f36:	4658      	mov	r0, fp
 8009f38:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f3a:	f000 f957 	bl	800a1ec <_Bfree>
 8009f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f42:	9e07      	ldr	r6, [sp, #28]
 8009f44:	ea43 0102 	orr.w	r1, r3, r2
 8009f48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f4a:	4319      	orrs	r1, r3
 8009f4c:	d110      	bne.n	8009f70 <_dtoa_r+0xa20>
 8009f4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f52:	d029      	beq.n	8009fa8 <_dtoa_r+0xa58>
 8009f54:	9b08      	ldr	r3, [sp, #32]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	dd02      	ble.n	8009f60 <_dtoa_r+0xa10>
 8009f5a:	9b02      	ldr	r3, [sp, #8]
 8009f5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009f60:	9b00      	ldr	r3, [sp, #0]
 8009f62:	f883 8000 	strb.w	r8, [r3]
 8009f66:	e63f      	b.n	8009be8 <_dtoa_r+0x698>
 8009f68:	4628      	mov	r0, r5
 8009f6a:	e7bb      	b.n	8009ee4 <_dtoa_r+0x994>
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	e7e1      	b.n	8009f34 <_dtoa_r+0x9e4>
 8009f70:	9b08      	ldr	r3, [sp, #32]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	db04      	blt.n	8009f80 <_dtoa_r+0xa30>
 8009f76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009f78:	430b      	orrs	r3, r1
 8009f7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009f7c:	430b      	orrs	r3, r1
 8009f7e:	d120      	bne.n	8009fc2 <_dtoa_r+0xa72>
 8009f80:	2a00      	cmp	r2, #0
 8009f82:	dded      	ble.n	8009f60 <_dtoa_r+0xa10>
 8009f84:	4649      	mov	r1, r9
 8009f86:	2201      	movs	r2, #1
 8009f88:	4658      	mov	r0, fp
 8009f8a:	f000 fb47 	bl	800a61c <__lshift>
 8009f8e:	4621      	mov	r1, r4
 8009f90:	4681      	mov	r9, r0
 8009f92:	f000 fbaf 	bl	800a6f4 <__mcmp>
 8009f96:	2800      	cmp	r0, #0
 8009f98:	dc03      	bgt.n	8009fa2 <_dtoa_r+0xa52>
 8009f9a:	d1e1      	bne.n	8009f60 <_dtoa_r+0xa10>
 8009f9c:	f018 0f01 	tst.w	r8, #1
 8009fa0:	d0de      	beq.n	8009f60 <_dtoa_r+0xa10>
 8009fa2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009fa6:	d1d8      	bne.n	8009f5a <_dtoa_r+0xa0a>
 8009fa8:	9a00      	ldr	r2, [sp, #0]
 8009faa:	2339      	movs	r3, #57	@ 0x39
 8009fac:	7013      	strb	r3, [r2, #0]
 8009fae:	4633      	mov	r3, r6
 8009fb0:	461e      	mov	r6, r3
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009fb8:	2a39      	cmp	r2, #57	@ 0x39
 8009fba:	d052      	beq.n	800a062 <_dtoa_r+0xb12>
 8009fbc:	3201      	adds	r2, #1
 8009fbe:	701a      	strb	r2, [r3, #0]
 8009fc0:	e612      	b.n	8009be8 <_dtoa_r+0x698>
 8009fc2:	2a00      	cmp	r2, #0
 8009fc4:	dd07      	ble.n	8009fd6 <_dtoa_r+0xa86>
 8009fc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009fca:	d0ed      	beq.n	8009fa8 <_dtoa_r+0xa58>
 8009fcc:	9a00      	ldr	r2, [sp, #0]
 8009fce:	f108 0301 	add.w	r3, r8, #1
 8009fd2:	7013      	strb	r3, [r2, #0]
 8009fd4:	e608      	b.n	8009be8 <_dtoa_r+0x698>
 8009fd6:	9b07      	ldr	r3, [sp, #28]
 8009fd8:	9a07      	ldr	r2, [sp, #28]
 8009fda:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009fde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d028      	beq.n	800a036 <_dtoa_r+0xae6>
 8009fe4:	4649      	mov	r1, r9
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	220a      	movs	r2, #10
 8009fea:	4658      	mov	r0, fp
 8009fec:	f000 f920 	bl	800a230 <__multadd>
 8009ff0:	42af      	cmp	r7, r5
 8009ff2:	4681      	mov	r9, r0
 8009ff4:	f04f 0300 	mov.w	r3, #0
 8009ff8:	f04f 020a 	mov.w	r2, #10
 8009ffc:	4639      	mov	r1, r7
 8009ffe:	4658      	mov	r0, fp
 800a000:	d107      	bne.n	800a012 <_dtoa_r+0xac2>
 800a002:	f000 f915 	bl	800a230 <__multadd>
 800a006:	4607      	mov	r7, r0
 800a008:	4605      	mov	r5, r0
 800a00a:	9b07      	ldr	r3, [sp, #28]
 800a00c:	3301      	adds	r3, #1
 800a00e:	9307      	str	r3, [sp, #28]
 800a010:	e774      	b.n	8009efc <_dtoa_r+0x9ac>
 800a012:	f000 f90d 	bl	800a230 <__multadd>
 800a016:	4629      	mov	r1, r5
 800a018:	4607      	mov	r7, r0
 800a01a:	2300      	movs	r3, #0
 800a01c:	220a      	movs	r2, #10
 800a01e:	4658      	mov	r0, fp
 800a020:	f000 f906 	bl	800a230 <__multadd>
 800a024:	4605      	mov	r5, r0
 800a026:	e7f0      	b.n	800a00a <_dtoa_r+0xaba>
 800a028:	9b00      	ldr	r3, [sp, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	bfcc      	ite	gt
 800a02e:	461e      	movgt	r6, r3
 800a030:	2601      	movle	r6, #1
 800a032:	4456      	add	r6, sl
 800a034:	2700      	movs	r7, #0
 800a036:	4649      	mov	r1, r9
 800a038:	2201      	movs	r2, #1
 800a03a:	4658      	mov	r0, fp
 800a03c:	f000 faee 	bl	800a61c <__lshift>
 800a040:	4621      	mov	r1, r4
 800a042:	4681      	mov	r9, r0
 800a044:	f000 fb56 	bl	800a6f4 <__mcmp>
 800a048:	2800      	cmp	r0, #0
 800a04a:	dcb0      	bgt.n	8009fae <_dtoa_r+0xa5e>
 800a04c:	d102      	bne.n	800a054 <_dtoa_r+0xb04>
 800a04e:	f018 0f01 	tst.w	r8, #1
 800a052:	d1ac      	bne.n	8009fae <_dtoa_r+0xa5e>
 800a054:	4633      	mov	r3, r6
 800a056:	461e      	mov	r6, r3
 800a058:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a05c:	2a30      	cmp	r2, #48	@ 0x30
 800a05e:	d0fa      	beq.n	800a056 <_dtoa_r+0xb06>
 800a060:	e5c2      	b.n	8009be8 <_dtoa_r+0x698>
 800a062:	459a      	cmp	sl, r3
 800a064:	d1a4      	bne.n	8009fb0 <_dtoa_r+0xa60>
 800a066:	9b04      	ldr	r3, [sp, #16]
 800a068:	3301      	adds	r3, #1
 800a06a:	9304      	str	r3, [sp, #16]
 800a06c:	2331      	movs	r3, #49	@ 0x31
 800a06e:	f88a 3000 	strb.w	r3, [sl]
 800a072:	e5b9      	b.n	8009be8 <_dtoa_r+0x698>
 800a074:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a076:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a0d4 <_dtoa_r+0xb84>
 800a07a:	b11b      	cbz	r3, 800a084 <_dtoa_r+0xb34>
 800a07c:	f10a 0308 	add.w	r3, sl, #8
 800a080:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a082:	6013      	str	r3, [r2, #0]
 800a084:	4650      	mov	r0, sl
 800a086:	b019      	add	sp, #100	@ 0x64
 800a088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a08c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a08e:	2b01      	cmp	r3, #1
 800a090:	f77f ae37 	ble.w	8009d02 <_dtoa_r+0x7b2>
 800a094:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a096:	930a      	str	r3, [sp, #40]	@ 0x28
 800a098:	2001      	movs	r0, #1
 800a09a:	e655      	b.n	8009d48 <_dtoa_r+0x7f8>
 800a09c:	9b00      	ldr	r3, [sp, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	f77f aed6 	ble.w	8009e50 <_dtoa_r+0x900>
 800a0a4:	4656      	mov	r6, sl
 800a0a6:	4621      	mov	r1, r4
 800a0a8:	4648      	mov	r0, r9
 800a0aa:	f7ff f9c7 	bl	800943c <quorem>
 800a0ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a0b2:	f806 8b01 	strb.w	r8, [r6], #1
 800a0b6:	9b00      	ldr	r3, [sp, #0]
 800a0b8:	eba6 020a 	sub.w	r2, r6, sl
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	ddb3      	ble.n	800a028 <_dtoa_r+0xad8>
 800a0c0:	4649      	mov	r1, r9
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	220a      	movs	r2, #10
 800a0c6:	4658      	mov	r0, fp
 800a0c8:	f000 f8b2 	bl	800a230 <__multadd>
 800a0cc:	4681      	mov	r9, r0
 800a0ce:	e7ea      	b.n	800a0a6 <_dtoa_r+0xb56>
 800a0d0:	0800d189 	.word	0x0800d189
 800a0d4:	0800d10d 	.word	0x0800d10d

0800a0d8 <_free_r>:
 800a0d8:	b538      	push	{r3, r4, r5, lr}
 800a0da:	4605      	mov	r5, r0
 800a0dc:	2900      	cmp	r1, #0
 800a0de:	d041      	beq.n	800a164 <_free_r+0x8c>
 800a0e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0e4:	1f0c      	subs	r4, r1, #4
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	bfb8      	it	lt
 800a0ea:	18e4      	addlt	r4, r4, r3
 800a0ec:	f7fe f860 	bl	80081b0 <__malloc_lock>
 800a0f0:	4a1d      	ldr	r2, [pc, #116]	@ (800a168 <_free_r+0x90>)
 800a0f2:	6813      	ldr	r3, [r2, #0]
 800a0f4:	b933      	cbnz	r3, 800a104 <_free_r+0x2c>
 800a0f6:	6063      	str	r3, [r4, #4]
 800a0f8:	6014      	str	r4, [r2, #0]
 800a0fa:	4628      	mov	r0, r5
 800a0fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a100:	f7fe b85c 	b.w	80081bc <__malloc_unlock>
 800a104:	42a3      	cmp	r3, r4
 800a106:	d908      	bls.n	800a11a <_free_r+0x42>
 800a108:	6820      	ldr	r0, [r4, #0]
 800a10a:	1821      	adds	r1, r4, r0
 800a10c:	428b      	cmp	r3, r1
 800a10e:	bf01      	itttt	eq
 800a110:	6819      	ldreq	r1, [r3, #0]
 800a112:	685b      	ldreq	r3, [r3, #4]
 800a114:	1809      	addeq	r1, r1, r0
 800a116:	6021      	streq	r1, [r4, #0]
 800a118:	e7ed      	b.n	800a0f6 <_free_r+0x1e>
 800a11a:	461a      	mov	r2, r3
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	b10b      	cbz	r3, 800a124 <_free_r+0x4c>
 800a120:	42a3      	cmp	r3, r4
 800a122:	d9fa      	bls.n	800a11a <_free_r+0x42>
 800a124:	6811      	ldr	r1, [r2, #0]
 800a126:	1850      	adds	r0, r2, r1
 800a128:	42a0      	cmp	r0, r4
 800a12a:	d10b      	bne.n	800a144 <_free_r+0x6c>
 800a12c:	6820      	ldr	r0, [r4, #0]
 800a12e:	4401      	add	r1, r0
 800a130:	1850      	adds	r0, r2, r1
 800a132:	4283      	cmp	r3, r0
 800a134:	6011      	str	r1, [r2, #0]
 800a136:	d1e0      	bne.n	800a0fa <_free_r+0x22>
 800a138:	6818      	ldr	r0, [r3, #0]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	6053      	str	r3, [r2, #4]
 800a13e:	4408      	add	r0, r1
 800a140:	6010      	str	r0, [r2, #0]
 800a142:	e7da      	b.n	800a0fa <_free_r+0x22>
 800a144:	d902      	bls.n	800a14c <_free_r+0x74>
 800a146:	230c      	movs	r3, #12
 800a148:	602b      	str	r3, [r5, #0]
 800a14a:	e7d6      	b.n	800a0fa <_free_r+0x22>
 800a14c:	6820      	ldr	r0, [r4, #0]
 800a14e:	1821      	adds	r1, r4, r0
 800a150:	428b      	cmp	r3, r1
 800a152:	bf04      	itt	eq
 800a154:	6819      	ldreq	r1, [r3, #0]
 800a156:	685b      	ldreq	r3, [r3, #4]
 800a158:	6063      	str	r3, [r4, #4]
 800a15a:	bf04      	itt	eq
 800a15c:	1809      	addeq	r1, r1, r0
 800a15e:	6021      	streq	r1, [r4, #0]
 800a160:	6054      	str	r4, [r2, #4]
 800a162:	e7ca      	b.n	800a0fa <_free_r+0x22>
 800a164:	bd38      	pop	{r3, r4, r5, pc}
 800a166:	bf00      	nop
 800a168:	20000430 	.word	0x20000430

0800a16c <_Balloc>:
 800a16c:	b570      	push	{r4, r5, r6, lr}
 800a16e:	69c6      	ldr	r6, [r0, #28]
 800a170:	4604      	mov	r4, r0
 800a172:	460d      	mov	r5, r1
 800a174:	b976      	cbnz	r6, 800a194 <_Balloc+0x28>
 800a176:	2010      	movs	r0, #16
 800a178:	f7fd ff68 	bl	800804c <malloc>
 800a17c:	4602      	mov	r2, r0
 800a17e:	61e0      	str	r0, [r4, #28]
 800a180:	b920      	cbnz	r0, 800a18c <_Balloc+0x20>
 800a182:	4b18      	ldr	r3, [pc, #96]	@ (800a1e4 <_Balloc+0x78>)
 800a184:	4818      	ldr	r0, [pc, #96]	@ (800a1e8 <_Balloc+0x7c>)
 800a186:	216b      	movs	r1, #107	@ 0x6b
 800a188:	f001 ff36 	bl	800bff8 <__assert_func>
 800a18c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a190:	6006      	str	r6, [r0, #0]
 800a192:	60c6      	str	r6, [r0, #12]
 800a194:	69e6      	ldr	r6, [r4, #28]
 800a196:	68f3      	ldr	r3, [r6, #12]
 800a198:	b183      	cbz	r3, 800a1bc <_Balloc+0x50>
 800a19a:	69e3      	ldr	r3, [r4, #28]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1a2:	b9b8      	cbnz	r0, 800a1d4 <_Balloc+0x68>
 800a1a4:	2101      	movs	r1, #1
 800a1a6:	fa01 f605 	lsl.w	r6, r1, r5
 800a1aa:	1d72      	adds	r2, r6, #5
 800a1ac:	0092      	lsls	r2, r2, #2
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	f001 ff40 	bl	800c034 <_calloc_r>
 800a1b4:	b160      	cbz	r0, 800a1d0 <_Balloc+0x64>
 800a1b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1ba:	e00e      	b.n	800a1da <_Balloc+0x6e>
 800a1bc:	2221      	movs	r2, #33	@ 0x21
 800a1be:	2104      	movs	r1, #4
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	f001 ff37 	bl	800c034 <_calloc_r>
 800a1c6:	69e3      	ldr	r3, [r4, #28]
 800a1c8:	60f0      	str	r0, [r6, #12]
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1e4      	bne.n	800a19a <_Balloc+0x2e>
 800a1d0:	2000      	movs	r0, #0
 800a1d2:	bd70      	pop	{r4, r5, r6, pc}
 800a1d4:	6802      	ldr	r2, [r0, #0]
 800a1d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1da:	2300      	movs	r3, #0
 800a1dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1e0:	e7f7      	b.n	800a1d2 <_Balloc+0x66>
 800a1e2:	bf00      	nop
 800a1e4:	0800d11a 	.word	0x0800d11a
 800a1e8:	0800d19a 	.word	0x0800d19a

0800a1ec <_Bfree>:
 800a1ec:	b570      	push	{r4, r5, r6, lr}
 800a1ee:	69c6      	ldr	r6, [r0, #28]
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	460c      	mov	r4, r1
 800a1f4:	b976      	cbnz	r6, 800a214 <_Bfree+0x28>
 800a1f6:	2010      	movs	r0, #16
 800a1f8:	f7fd ff28 	bl	800804c <malloc>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	61e8      	str	r0, [r5, #28]
 800a200:	b920      	cbnz	r0, 800a20c <_Bfree+0x20>
 800a202:	4b09      	ldr	r3, [pc, #36]	@ (800a228 <_Bfree+0x3c>)
 800a204:	4809      	ldr	r0, [pc, #36]	@ (800a22c <_Bfree+0x40>)
 800a206:	218f      	movs	r1, #143	@ 0x8f
 800a208:	f001 fef6 	bl	800bff8 <__assert_func>
 800a20c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a210:	6006      	str	r6, [r0, #0]
 800a212:	60c6      	str	r6, [r0, #12]
 800a214:	b13c      	cbz	r4, 800a226 <_Bfree+0x3a>
 800a216:	69eb      	ldr	r3, [r5, #28]
 800a218:	6862      	ldr	r2, [r4, #4]
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a220:	6021      	str	r1, [r4, #0]
 800a222:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a226:	bd70      	pop	{r4, r5, r6, pc}
 800a228:	0800d11a 	.word	0x0800d11a
 800a22c:	0800d19a 	.word	0x0800d19a

0800a230 <__multadd>:
 800a230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a234:	690d      	ldr	r5, [r1, #16]
 800a236:	4607      	mov	r7, r0
 800a238:	460c      	mov	r4, r1
 800a23a:	461e      	mov	r6, r3
 800a23c:	f101 0c14 	add.w	ip, r1, #20
 800a240:	2000      	movs	r0, #0
 800a242:	f8dc 3000 	ldr.w	r3, [ip]
 800a246:	b299      	uxth	r1, r3
 800a248:	fb02 6101 	mla	r1, r2, r1, r6
 800a24c:	0c1e      	lsrs	r6, r3, #16
 800a24e:	0c0b      	lsrs	r3, r1, #16
 800a250:	fb02 3306 	mla	r3, r2, r6, r3
 800a254:	b289      	uxth	r1, r1
 800a256:	3001      	adds	r0, #1
 800a258:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a25c:	4285      	cmp	r5, r0
 800a25e:	f84c 1b04 	str.w	r1, [ip], #4
 800a262:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a266:	dcec      	bgt.n	800a242 <__multadd+0x12>
 800a268:	b30e      	cbz	r6, 800a2ae <__multadd+0x7e>
 800a26a:	68a3      	ldr	r3, [r4, #8]
 800a26c:	42ab      	cmp	r3, r5
 800a26e:	dc19      	bgt.n	800a2a4 <__multadd+0x74>
 800a270:	6861      	ldr	r1, [r4, #4]
 800a272:	4638      	mov	r0, r7
 800a274:	3101      	adds	r1, #1
 800a276:	f7ff ff79 	bl	800a16c <_Balloc>
 800a27a:	4680      	mov	r8, r0
 800a27c:	b928      	cbnz	r0, 800a28a <__multadd+0x5a>
 800a27e:	4602      	mov	r2, r0
 800a280:	4b0c      	ldr	r3, [pc, #48]	@ (800a2b4 <__multadd+0x84>)
 800a282:	480d      	ldr	r0, [pc, #52]	@ (800a2b8 <__multadd+0x88>)
 800a284:	21ba      	movs	r1, #186	@ 0xba
 800a286:	f001 feb7 	bl	800bff8 <__assert_func>
 800a28a:	6922      	ldr	r2, [r4, #16]
 800a28c:	3202      	adds	r2, #2
 800a28e:	f104 010c 	add.w	r1, r4, #12
 800a292:	0092      	lsls	r2, r2, #2
 800a294:	300c      	adds	r0, #12
 800a296:	f001 fe97 	bl	800bfc8 <memcpy>
 800a29a:	4621      	mov	r1, r4
 800a29c:	4638      	mov	r0, r7
 800a29e:	f7ff ffa5 	bl	800a1ec <_Bfree>
 800a2a2:	4644      	mov	r4, r8
 800a2a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2a8:	3501      	adds	r5, #1
 800a2aa:	615e      	str	r6, [r3, #20]
 800a2ac:	6125      	str	r5, [r4, #16]
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2b4:	0800d189 	.word	0x0800d189
 800a2b8:	0800d19a 	.word	0x0800d19a

0800a2bc <__s2b>:
 800a2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2c0:	460c      	mov	r4, r1
 800a2c2:	4615      	mov	r5, r2
 800a2c4:	461f      	mov	r7, r3
 800a2c6:	2209      	movs	r2, #9
 800a2c8:	3308      	adds	r3, #8
 800a2ca:	4606      	mov	r6, r0
 800a2cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	db09      	blt.n	800a2ec <__s2b+0x30>
 800a2d8:	4630      	mov	r0, r6
 800a2da:	f7ff ff47 	bl	800a16c <_Balloc>
 800a2de:	b940      	cbnz	r0, 800a2f2 <__s2b+0x36>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	4b19      	ldr	r3, [pc, #100]	@ (800a348 <__s2b+0x8c>)
 800a2e4:	4819      	ldr	r0, [pc, #100]	@ (800a34c <__s2b+0x90>)
 800a2e6:	21d3      	movs	r1, #211	@ 0xd3
 800a2e8:	f001 fe86 	bl	800bff8 <__assert_func>
 800a2ec:	0052      	lsls	r2, r2, #1
 800a2ee:	3101      	adds	r1, #1
 800a2f0:	e7f0      	b.n	800a2d4 <__s2b+0x18>
 800a2f2:	9b08      	ldr	r3, [sp, #32]
 800a2f4:	6143      	str	r3, [r0, #20]
 800a2f6:	2d09      	cmp	r5, #9
 800a2f8:	f04f 0301 	mov.w	r3, #1
 800a2fc:	6103      	str	r3, [r0, #16]
 800a2fe:	dd16      	ble.n	800a32e <__s2b+0x72>
 800a300:	f104 0909 	add.w	r9, r4, #9
 800a304:	46c8      	mov	r8, r9
 800a306:	442c      	add	r4, r5
 800a308:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a30c:	4601      	mov	r1, r0
 800a30e:	3b30      	subs	r3, #48	@ 0x30
 800a310:	220a      	movs	r2, #10
 800a312:	4630      	mov	r0, r6
 800a314:	f7ff ff8c 	bl	800a230 <__multadd>
 800a318:	45a0      	cmp	r8, r4
 800a31a:	d1f5      	bne.n	800a308 <__s2b+0x4c>
 800a31c:	f1a5 0408 	sub.w	r4, r5, #8
 800a320:	444c      	add	r4, r9
 800a322:	1b2d      	subs	r5, r5, r4
 800a324:	1963      	adds	r3, r4, r5
 800a326:	42bb      	cmp	r3, r7
 800a328:	db04      	blt.n	800a334 <__s2b+0x78>
 800a32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a32e:	340a      	adds	r4, #10
 800a330:	2509      	movs	r5, #9
 800a332:	e7f6      	b.n	800a322 <__s2b+0x66>
 800a334:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a338:	4601      	mov	r1, r0
 800a33a:	3b30      	subs	r3, #48	@ 0x30
 800a33c:	220a      	movs	r2, #10
 800a33e:	4630      	mov	r0, r6
 800a340:	f7ff ff76 	bl	800a230 <__multadd>
 800a344:	e7ee      	b.n	800a324 <__s2b+0x68>
 800a346:	bf00      	nop
 800a348:	0800d189 	.word	0x0800d189
 800a34c:	0800d19a 	.word	0x0800d19a

0800a350 <__hi0bits>:
 800a350:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a354:	4603      	mov	r3, r0
 800a356:	bf36      	itet	cc
 800a358:	0403      	lslcc	r3, r0, #16
 800a35a:	2000      	movcs	r0, #0
 800a35c:	2010      	movcc	r0, #16
 800a35e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a362:	bf3c      	itt	cc
 800a364:	021b      	lslcc	r3, r3, #8
 800a366:	3008      	addcc	r0, #8
 800a368:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a36c:	bf3c      	itt	cc
 800a36e:	011b      	lslcc	r3, r3, #4
 800a370:	3004      	addcc	r0, #4
 800a372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a376:	bf3c      	itt	cc
 800a378:	009b      	lslcc	r3, r3, #2
 800a37a:	3002      	addcc	r0, #2
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	db05      	blt.n	800a38c <__hi0bits+0x3c>
 800a380:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a384:	f100 0001 	add.w	r0, r0, #1
 800a388:	bf08      	it	eq
 800a38a:	2020      	moveq	r0, #32
 800a38c:	4770      	bx	lr

0800a38e <__lo0bits>:
 800a38e:	6803      	ldr	r3, [r0, #0]
 800a390:	4602      	mov	r2, r0
 800a392:	f013 0007 	ands.w	r0, r3, #7
 800a396:	d00b      	beq.n	800a3b0 <__lo0bits+0x22>
 800a398:	07d9      	lsls	r1, r3, #31
 800a39a:	d421      	bmi.n	800a3e0 <__lo0bits+0x52>
 800a39c:	0798      	lsls	r0, r3, #30
 800a39e:	bf49      	itett	mi
 800a3a0:	085b      	lsrmi	r3, r3, #1
 800a3a2:	089b      	lsrpl	r3, r3, #2
 800a3a4:	2001      	movmi	r0, #1
 800a3a6:	6013      	strmi	r3, [r2, #0]
 800a3a8:	bf5c      	itt	pl
 800a3aa:	6013      	strpl	r3, [r2, #0]
 800a3ac:	2002      	movpl	r0, #2
 800a3ae:	4770      	bx	lr
 800a3b0:	b299      	uxth	r1, r3
 800a3b2:	b909      	cbnz	r1, 800a3b8 <__lo0bits+0x2a>
 800a3b4:	0c1b      	lsrs	r3, r3, #16
 800a3b6:	2010      	movs	r0, #16
 800a3b8:	b2d9      	uxtb	r1, r3
 800a3ba:	b909      	cbnz	r1, 800a3c0 <__lo0bits+0x32>
 800a3bc:	3008      	adds	r0, #8
 800a3be:	0a1b      	lsrs	r3, r3, #8
 800a3c0:	0719      	lsls	r1, r3, #28
 800a3c2:	bf04      	itt	eq
 800a3c4:	091b      	lsreq	r3, r3, #4
 800a3c6:	3004      	addeq	r0, #4
 800a3c8:	0799      	lsls	r1, r3, #30
 800a3ca:	bf04      	itt	eq
 800a3cc:	089b      	lsreq	r3, r3, #2
 800a3ce:	3002      	addeq	r0, #2
 800a3d0:	07d9      	lsls	r1, r3, #31
 800a3d2:	d403      	bmi.n	800a3dc <__lo0bits+0x4e>
 800a3d4:	085b      	lsrs	r3, r3, #1
 800a3d6:	f100 0001 	add.w	r0, r0, #1
 800a3da:	d003      	beq.n	800a3e4 <__lo0bits+0x56>
 800a3dc:	6013      	str	r3, [r2, #0]
 800a3de:	4770      	bx	lr
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	4770      	bx	lr
 800a3e4:	2020      	movs	r0, #32
 800a3e6:	4770      	bx	lr

0800a3e8 <__i2b>:
 800a3e8:	b510      	push	{r4, lr}
 800a3ea:	460c      	mov	r4, r1
 800a3ec:	2101      	movs	r1, #1
 800a3ee:	f7ff febd 	bl	800a16c <_Balloc>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	b928      	cbnz	r0, 800a402 <__i2b+0x1a>
 800a3f6:	4b05      	ldr	r3, [pc, #20]	@ (800a40c <__i2b+0x24>)
 800a3f8:	4805      	ldr	r0, [pc, #20]	@ (800a410 <__i2b+0x28>)
 800a3fa:	f240 1145 	movw	r1, #325	@ 0x145
 800a3fe:	f001 fdfb 	bl	800bff8 <__assert_func>
 800a402:	2301      	movs	r3, #1
 800a404:	6144      	str	r4, [r0, #20]
 800a406:	6103      	str	r3, [r0, #16]
 800a408:	bd10      	pop	{r4, pc}
 800a40a:	bf00      	nop
 800a40c:	0800d189 	.word	0x0800d189
 800a410:	0800d19a 	.word	0x0800d19a

0800a414 <__multiply>:
 800a414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a418:	4614      	mov	r4, r2
 800a41a:	690a      	ldr	r2, [r1, #16]
 800a41c:	6923      	ldr	r3, [r4, #16]
 800a41e:	429a      	cmp	r2, r3
 800a420:	bfa8      	it	ge
 800a422:	4623      	movge	r3, r4
 800a424:	460f      	mov	r7, r1
 800a426:	bfa4      	itt	ge
 800a428:	460c      	movge	r4, r1
 800a42a:	461f      	movge	r7, r3
 800a42c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a430:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a434:	68a3      	ldr	r3, [r4, #8]
 800a436:	6861      	ldr	r1, [r4, #4]
 800a438:	eb0a 0609 	add.w	r6, sl, r9
 800a43c:	42b3      	cmp	r3, r6
 800a43e:	b085      	sub	sp, #20
 800a440:	bfb8      	it	lt
 800a442:	3101      	addlt	r1, #1
 800a444:	f7ff fe92 	bl	800a16c <_Balloc>
 800a448:	b930      	cbnz	r0, 800a458 <__multiply+0x44>
 800a44a:	4602      	mov	r2, r0
 800a44c:	4b44      	ldr	r3, [pc, #272]	@ (800a560 <__multiply+0x14c>)
 800a44e:	4845      	ldr	r0, [pc, #276]	@ (800a564 <__multiply+0x150>)
 800a450:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a454:	f001 fdd0 	bl	800bff8 <__assert_func>
 800a458:	f100 0514 	add.w	r5, r0, #20
 800a45c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a460:	462b      	mov	r3, r5
 800a462:	2200      	movs	r2, #0
 800a464:	4543      	cmp	r3, r8
 800a466:	d321      	bcc.n	800a4ac <__multiply+0x98>
 800a468:	f107 0114 	add.w	r1, r7, #20
 800a46c:	f104 0214 	add.w	r2, r4, #20
 800a470:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a474:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a478:	9302      	str	r3, [sp, #8]
 800a47a:	1b13      	subs	r3, r2, r4
 800a47c:	3b15      	subs	r3, #21
 800a47e:	f023 0303 	bic.w	r3, r3, #3
 800a482:	3304      	adds	r3, #4
 800a484:	f104 0715 	add.w	r7, r4, #21
 800a488:	42ba      	cmp	r2, r7
 800a48a:	bf38      	it	cc
 800a48c:	2304      	movcc	r3, #4
 800a48e:	9301      	str	r3, [sp, #4]
 800a490:	9b02      	ldr	r3, [sp, #8]
 800a492:	9103      	str	r1, [sp, #12]
 800a494:	428b      	cmp	r3, r1
 800a496:	d80c      	bhi.n	800a4b2 <__multiply+0x9e>
 800a498:	2e00      	cmp	r6, #0
 800a49a:	dd03      	ble.n	800a4a4 <__multiply+0x90>
 800a49c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d05b      	beq.n	800a55c <__multiply+0x148>
 800a4a4:	6106      	str	r6, [r0, #16]
 800a4a6:	b005      	add	sp, #20
 800a4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ac:	f843 2b04 	str.w	r2, [r3], #4
 800a4b0:	e7d8      	b.n	800a464 <__multiply+0x50>
 800a4b2:	f8b1 a000 	ldrh.w	sl, [r1]
 800a4b6:	f1ba 0f00 	cmp.w	sl, #0
 800a4ba:	d024      	beq.n	800a506 <__multiply+0xf2>
 800a4bc:	f104 0e14 	add.w	lr, r4, #20
 800a4c0:	46a9      	mov	r9, r5
 800a4c2:	f04f 0c00 	mov.w	ip, #0
 800a4c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a4ca:	f8d9 3000 	ldr.w	r3, [r9]
 800a4ce:	fa1f fb87 	uxth.w	fp, r7
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	fb0a 330b 	mla	r3, sl, fp, r3
 800a4d8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a4dc:	f8d9 7000 	ldr.w	r7, [r9]
 800a4e0:	4463      	add	r3, ip
 800a4e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a4e6:	fb0a c70b 	mla	r7, sl, fp, ip
 800a4ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a4f4:	4572      	cmp	r2, lr
 800a4f6:	f849 3b04 	str.w	r3, [r9], #4
 800a4fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a4fe:	d8e2      	bhi.n	800a4c6 <__multiply+0xb2>
 800a500:	9b01      	ldr	r3, [sp, #4]
 800a502:	f845 c003 	str.w	ip, [r5, r3]
 800a506:	9b03      	ldr	r3, [sp, #12]
 800a508:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a50c:	3104      	adds	r1, #4
 800a50e:	f1b9 0f00 	cmp.w	r9, #0
 800a512:	d021      	beq.n	800a558 <__multiply+0x144>
 800a514:	682b      	ldr	r3, [r5, #0]
 800a516:	f104 0c14 	add.w	ip, r4, #20
 800a51a:	46ae      	mov	lr, r5
 800a51c:	f04f 0a00 	mov.w	sl, #0
 800a520:	f8bc b000 	ldrh.w	fp, [ip]
 800a524:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a528:	fb09 770b 	mla	r7, r9, fp, r7
 800a52c:	4457      	add	r7, sl
 800a52e:	b29b      	uxth	r3, r3
 800a530:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a534:	f84e 3b04 	str.w	r3, [lr], #4
 800a538:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a53c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a540:	f8be 3000 	ldrh.w	r3, [lr]
 800a544:	fb09 330a 	mla	r3, r9, sl, r3
 800a548:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a54c:	4562      	cmp	r2, ip
 800a54e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a552:	d8e5      	bhi.n	800a520 <__multiply+0x10c>
 800a554:	9f01      	ldr	r7, [sp, #4]
 800a556:	51eb      	str	r3, [r5, r7]
 800a558:	3504      	adds	r5, #4
 800a55a:	e799      	b.n	800a490 <__multiply+0x7c>
 800a55c:	3e01      	subs	r6, #1
 800a55e:	e79b      	b.n	800a498 <__multiply+0x84>
 800a560:	0800d189 	.word	0x0800d189
 800a564:	0800d19a 	.word	0x0800d19a

0800a568 <__pow5mult>:
 800a568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a56c:	4615      	mov	r5, r2
 800a56e:	f012 0203 	ands.w	r2, r2, #3
 800a572:	4607      	mov	r7, r0
 800a574:	460e      	mov	r6, r1
 800a576:	d007      	beq.n	800a588 <__pow5mult+0x20>
 800a578:	4c25      	ldr	r4, [pc, #148]	@ (800a610 <__pow5mult+0xa8>)
 800a57a:	3a01      	subs	r2, #1
 800a57c:	2300      	movs	r3, #0
 800a57e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a582:	f7ff fe55 	bl	800a230 <__multadd>
 800a586:	4606      	mov	r6, r0
 800a588:	10ad      	asrs	r5, r5, #2
 800a58a:	d03d      	beq.n	800a608 <__pow5mult+0xa0>
 800a58c:	69fc      	ldr	r4, [r7, #28]
 800a58e:	b97c      	cbnz	r4, 800a5b0 <__pow5mult+0x48>
 800a590:	2010      	movs	r0, #16
 800a592:	f7fd fd5b 	bl	800804c <malloc>
 800a596:	4602      	mov	r2, r0
 800a598:	61f8      	str	r0, [r7, #28]
 800a59a:	b928      	cbnz	r0, 800a5a8 <__pow5mult+0x40>
 800a59c:	4b1d      	ldr	r3, [pc, #116]	@ (800a614 <__pow5mult+0xac>)
 800a59e:	481e      	ldr	r0, [pc, #120]	@ (800a618 <__pow5mult+0xb0>)
 800a5a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a5a4:	f001 fd28 	bl	800bff8 <__assert_func>
 800a5a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5ac:	6004      	str	r4, [r0, #0]
 800a5ae:	60c4      	str	r4, [r0, #12]
 800a5b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a5b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a5b8:	b94c      	cbnz	r4, 800a5ce <__pow5mult+0x66>
 800a5ba:	f240 2171 	movw	r1, #625	@ 0x271
 800a5be:	4638      	mov	r0, r7
 800a5c0:	f7ff ff12 	bl	800a3e8 <__i2b>
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5ca:	4604      	mov	r4, r0
 800a5cc:	6003      	str	r3, [r0, #0]
 800a5ce:	f04f 0900 	mov.w	r9, #0
 800a5d2:	07eb      	lsls	r3, r5, #31
 800a5d4:	d50a      	bpl.n	800a5ec <__pow5mult+0x84>
 800a5d6:	4631      	mov	r1, r6
 800a5d8:	4622      	mov	r2, r4
 800a5da:	4638      	mov	r0, r7
 800a5dc:	f7ff ff1a 	bl	800a414 <__multiply>
 800a5e0:	4631      	mov	r1, r6
 800a5e2:	4680      	mov	r8, r0
 800a5e4:	4638      	mov	r0, r7
 800a5e6:	f7ff fe01 	bl	800a1ec <_Bfree>
 800a5ea:	4646      	mov	r6, r8
 800a5ec:	106d      	asrs	r5, r5, #1
 800a5ee:	d00b      	beq.n	800a608 <__pow5mult+0xa0>
 800a5f0:	6820      	ldr	r0, [r4, #0]
 800a5f2:	b938      	cbnz	r0, 800a604 <__pow5mult+0x9c>
 800a5f4:	4622      	mov	r2, r4
 800a5f6:	4621      	mov	r1, r4
 800a5f8:	4638      	mov	r0, r7
 800a5fa:	f7ff ff0b 	bl	800a414 <__multiply>
 800a5fe:	6020      	str	r0, [r4, #0]
 800a600:	f8c0 9000 	str.w	r9, [r0]
 800a604:	4604      	mov	r4, r0
 800a606:	e7e4      	b.n	800a5d2 <__pow5mult+0x6a>
 800a608:	4630      	mov	r0, r6
 800a60a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a60e:	bf00      	nop
 800a610:	0800d1f4 	.word	0x0800d1f4
 800a614:	0800d11a 	.word	0x0800d11a
 800a618:	0800d19a 	.word	0x0800d19a

0800a61c <__lshift>:
 800a61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a620:	460c      	mov	r4, r1
 800a622:	6849      	ldr	r1, [r1, #4]
 800a624:	6923      	ldr	r3, [r4, #16]
 800a626:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a62a:	68a3      	ldr	r3, [r4, #8]
 800a62c:	4607      	mov	r7, r0
 800a62e:	4691      	mov	r9, r2
 800a630:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a634:	f108 0601 	add.w	r6, r8, #1
 800a638:	42b3      	cmp	r3, r6
 800a63a:	db0b      	blt.n	800a654 <__lshift+0x38>
 800a63c:	4638      	mov	r0, r7
 800a63e:	f7ff fd95 	bl	800a16c <_Balloc>
 800a642:	4605      	mov	r5, r0
 800a644:	b948      	cbnz	r0, 800a65a <__lshift+0x3e>
 800a646:	4602      	mov	r2, r0
 800a648:	4b28      	ldr	r3, [pc, #160]	@ (800a6ec <__lshift+0xd0>)
 800a64a:	4829      	ldr	r0, [pc, #164]	@ (800a6f0 <__lshift+0xd4>)
 800a64c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a650:	f001 fcd2 	bl	800bff8 <__assert_func>
 800a654:	3101      	adds	r1, #1
 800a656:	005b      	lsls	r3, r3, #1
 800a658:	e7ee      	b.n	800a638 <__lshift+0x1c>
 800a65a:	2300      	movs	r3, #0
 800a65c:	f100 0114 	add.w	r1, r0, #20
 800a660:	f100 0210 	add.w	r2, r0, #16
 800a664:	4618      	mov	r0, r3
 800a666:	4553      	cmp	r3, sl
 800a668:	db33      	blt.n	800a6d2 <__lshift+0xb6>
 800a66a:	6920      	ldr	r0, [r4, #16]
 800a66c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a670:	f104 0314 	add.w	r3, r4, #20
 800a674:	f019 091f 	ands.w	r9, r9, #31
 800a678:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a67c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a680:	d02b      	beq.n	800a6da <__lshift+0xbe>
 800a682:	f1c9 0e20 	rsb	lr, r9, #32
 800a686:	468a      	mov	sl, r1
 800a688:	2200      	movs	r2, #0
 800a68a:	6818      	ldr	r0, [r3, #0]
 800a68c:	fa00 f009 	lsl.w	r0, r0, r9
 800a690:	4310      	orrs	r0, r2
 800a692:	f84a 0b04 	str.w	r0, [sl], #4
 800a696:	f853 2b04 	ldr.w	r2, [r3], #4
 800a69a:	459c      	cmp	ip, r3
 800a69c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a6a0:	d8f3      	bhi.n	800a68a <__lshift+0x6e>
 800a6a2:	ebac 0304 	sub.w	r3, ip, r4
 800a6a6:	3b15      	subs	r3, #21
 800a6a8:	f023 0303 	bic.w	r3, r3, #3
 800a6ac:	3304      	adds	r3, #4
 800a6ae:	f104 0015 	add.w	r0, r4, #21
 800a6b2:	4584      	cmp	ip, r0
 800a6b4:	bf38      	it	cc
 800a6b6:	2304      	movcc	r3, #4
 800a6b8:	50ca      	str	r2, [r1, r3]
 800a6ba:	b10a      	cbz	r2, 800a6c0 <__lshift+0xa4>
 800a6bc:	f108 0602 	add.w	r6, r8, #2
 800a6c0:	3e01      	subs	r6, #1
 800a6c2:	4638      	mov	r0, r7
 800a6c4:	612e      	str	r6, [r5, #16]
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	f7ff fd90 	bl	800a1ec <_Bfree>
 800a6cc:	4628      	mov	r0, r5
 800a6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	e7c5      	b.n	800a666 <__lshift+0x4a>
 800a6da:	3904      	subs	r1, #4
 800a6dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6e4:	459c      	cmp	ip, r3
 800a6e6:	d8f9      	bhi.n	800a6dc <__lshift+0xc0>
 800a6e8:	e7ea      	b.n	800a6c0 <__lshift+0xa4>
 800a6ea:	bf00      	nop
 800a6ec:	0800d189 	.word	0x0800d189
 800a6f0:	0800d19a 	.word	0x0800d19a

0800a6f4 <__mcmp>:
 800a6f4:	690a      	ldr	r2, [r1, #16]
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	6900      	ldr	r0, [r0, #16]
 800a6fa:	1a80      	subs	r0, r0, r2
 800a6fc:	b530      	push	{r4, r5, lr}
 800a6fe:	d10e      	bne.n	800a71e <__mcmp+0x2a>
 800a700:	3314      	adds	r3, #20
 800a702:	3114      	adds	r1, #20
 800a704:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a708:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a70c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a710:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a714:	4295      	cmp	r5, r2
 800a716:	d003      	beq.n	800a720 <__mcmp+0x2c>
 800a718:	d205      	bcs.n	800a726 <__mcmp+0x32>
 800a71a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a71e:	bd30      	pop	{r4, r5, pc}
 800a720:	42a3      	cmp	r3, r4
 800a722:	d3f3      	bcc.n	800a70c <__mcmp+0x18>
 800a724:	e7fb      	b.n	800a71e <__mcmp+0x2a>
 800a726:	2001      	movs	r0, #1
 800a728:	e7f9      	b.n	800a71e <__mcmp+0x2a>
	...

0800a72c <__mdiff>:
 800a72c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a730:	4689      	mov	r9, r1
 800a732:	4606      	mov	r6, r0
 800a734:	4611      	mov	r1, r2
 800a736:	4648      	mov	r0, r9
 800a738:	4614      	mov	r4, r2
 800a73a:	f7ff ffdb 	bl	800a6f4 <__mcmp>
 800a73e:	1e05      	subs	r5, r0, #0
 800a740:	d112      	bne.n	800a768 <__mdiff+0x3c>
 800a742:	4629      	mov	r1, r5
 800a744:	4630      	mov	r0, r6
 800a746:	f7ff fd11 	bl	800a16c <_Balloc>
 800a74a:	4602      	mov	r2, r0
 800a74c:	b928      	cbnz	r0, 800a75a <__mdiff+0x2e>
 800a74e:	4b3f      	ldr	r3, [pc, #252]	@ (800a84c <__mdiff+0x120>)
 800a750:	f240 2137 	movw	r1, #567	@ 0x237
 800a754:	483e      	ldr	r0, [pc, #248]	@ (800a850 <__mdiff+0x124>)
 800a756:	f001 fc4f 	bl	800bff8 <__assert_func>
 800a75a:	2301      	movs	r3, #1
 800a75c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a760:	4610      	mov	r0, r2
 800a762:	b003      	add	sp, #12
 800a764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a768:	bfbc      	itt	lt
 800a76a:	464b      	movlt	r3, r9
 800a76c:	46a1      	movlt	r9, r4
 800a76e:	4630      	mov	r0, r6
 800a770:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a774:	bfba      	itte	lt
 800a776:	461c      	movlt	r4, r3
 800a778:	2501      	movlt	r5, #1
 800a77a:	2500      	movge	r5, #0
 800a77c:	f7ff fcf6 	bl	800a16c <_Balloc>
 800a780:	4602      	mov	r2, r0
 800a782:	b918      	cbnz	r0, 800a78c <__mdiff+0x60>
 800a784:	4b31      	ldr	r3, [pc, #196]	@ (800a84c <__mdiff+0x120>)
 800a786:	f240 2145 	movw	r1, #581	@ 0x245
 800a78a:	e7e3      	b.n	800a754 <__mdiff+0x28>
 800a78c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a790:	6926      	ldr	r6, [r4, #16]
 800a792:	60c5      	str	r5, [r0, #12]
 800a794:	f109 0310 	add.w	r3, r9, #16
 800a798:	f109 0514 	add.w	r5, r9, #20
 800a79c:	f104 0e14 	add.w	lr, r4, #20
 800a7a0:	f100 0b14 	add.w	fp, r0, #20
 800a7a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a7a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a7ac:	9301      	str	r3, [sp, #4]
 800a7ae:	46d9      	mov	r9, fp
 800a7b0:	f04f 0c00 	mov.w	ip, #0
 800a7b4:	9b01      	ldr	r3, [sp, #4]
 800a7b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a7ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a7be:	9301      	str	r3, [sp, #4]
 800a7c0:	fa1f f38a 	uxth.w	r3, sl
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	b283      	uxth	r3, r0
 800a7c8:	1acb      	subs	r3, r1, r3
 800a7ca:	0c00      	lsrs	r0, r0, #16
 800a7cc:	4463      	add	r3, ip
 800a7ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a7d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a7dc:	4576      	cmp	r6, lr
 800a7de:	f849 3b04 	str.w	r3, [r9], #4
 800a7e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a7e6:	d8e5      	bhi.n	800a7b4 <__mdiff+0x88>
 800a7e8:	1b33      	subs	r3, r6, r4
 800a7ea:	3b15      	subs	r3, #21
 800a7ec:	f023 0303 	bic.w	r3, r3, #3
 800a7f0:	3415      	adds	r4, #21
 800a7f2:	3304      	adds	r3, #4
 800a7f4:	42a6      	cmp	r6, r4
 800a7f6:	bf38      	it	cc
 800a7f8:	2304      	movcc	r3, #4
 800a7fa:	441d      	add	r5, r3
 800a7fc:	445b      	add	r3, fp
 800a7fe:	461e      	mov	r6, r3
 800a800:	462c      	mov	r4, r5
 800a802:	4544      	cmp	r4, r8
 800a804:	d30e      	bcc.n	800a824 <__mdiff+0xf8>
 800a806:	f108 0103 	add.w	r1, r8, #3
 800a80a:	1b49      	subs	r1, r1, r5
 800a80c:	f021 0103 	bic.w	r1, r1, #3
 800a810:	3d03      	subs	r5, #3
 800a812:	45a8      	cmp	r8, r5
 800a814:	bf38      	it	cc
 800a816:	2100      	movcc	r1, #0
 800a818:	440b      	add	r3, r1
 800a81a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a81e:	b191      	cbz	r1, 800a846 <__mdiff+0x11a>
 800a820:	6117      	str	r7, [r2, #16]
 800a822:	e79d      	b.n	800a760 <__mdiff+0x34>
 800a824:	f854 1b04 	ldr.w	r1, [r4], #4
 800a828:	46e6      	mov	lr, ip
 800a82a:	0c08      	lsrs	r0, r1, #16
 800a82c:	fa1c fc81 	uxtah	ip, ip, r1
 800a830:	4471      	add	r1, lr
 800a832:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a836:	b289      	uxth	r1, r1
 800a838:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a83c:	f846 1b04 	str.w	r1, [r6], #4
 800a840:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a844:	e7dd      	b.n	800a802 <__mdiff+0xd6>
 800a846:	3f01      	subs	r7, #1
 800a848:	e7e7      	b.n	800a81a <__mdiff+0xee>
 800a84a:	bf00      	nop
 800a84c:	0800d189 	.word	0x0800d189
 800a850:	0800d19a 	.word	0x0800d19a

0800a854 <__ulp>:
 800a854:	b082      	sub	sp, #8
 800a856:	ed8d 0b00 	vstr	d0, [sp]
 800a85a:	9a01      	ldr	r2, [sp, #4]
 800a85c:	4b0f      	ldr	r3, [pc, #60]	@ (800a89c <__ulp+0x48>)
 800a85e:	4013      	ands	r3, r2
 800a860:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a864:	2b00      	cmp	r3, #0
 800a866:	dc08      	bgt.n	800a87a <__ulp+0x26>
 800a868:	425b      	negs	r3, r3
 800a86a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a86e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a872:	da04      	bge.n	800a87e <__ulp+0x2a>
 800a874:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a878:	4113      	asrs	r3, r2
 800a87a:	2200      	movs	r2, #0
 800a87c:	e008      	b.n	800a890 <__ulp+0x3c>
 800a87e:	f1a2 0314 	sub.w	r3, r2, #20
 800a882:	2b1e      	cmp	r3, #30
 800a884:	bfda      	itte	le
 800a886:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a88a:	40da      	lsrle	r2, r3
 800a88c:	2201      	movgt	r2, #1
 800a88e:	2300      	movs	r3, #0
 800a890:	4619      	mov	r1, r3
 800a892:	4610      	mov	r0, r2
 800a894:	ec41 0b10 	vmov	d0, r0, r1
 800a898:	b002      	add	sp, #8
 800a89a:	4770      	bx	lr
 800a89c:	7ff00000 	.word	0x7ff00000

0800a8a0 <__b2d>:
 800a8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a4:	6906      	ldr	r6, [r0, #16]
 800a8a6:	f100 0814 	add.w	r8, r0, #20
 800a8aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a8ae:	1f37      	subs	r7, r6, #4
 800a8b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a8b4:	4610      	mov	r0, r2
 800a8b6:	f7ff fd4b 	bl	800a350 <__hi0bits>
 800a8ba:	f1c0 0320 	rsb	r3, r0, #32
 800a8be:	280a      	cmp	r0, #10
 800a8c0:	600b      	str	r3, [r1, #0]
 800a8c2:	491b      	ldr	r1, [pc, #108]	@ (800a930 <__b2d+0x90>)
 800a8c4:	dc15      	bgt.n	800a8f2 <__b2d+0x52>
 800a8c6:	f1c0 0c0b 	rsb	ip, r0, #11
 800a8ca:	fa22 f30c 	lsr.w	r3, r2, ip
 800a8ce:	45b8      	cmp	r8, r7
 800a8d0:	ea43 0501 	orr.w	r5, r3, r1
 800a8d4:	bf34      	ite	cc
 800a8d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a8da:	2300      	movcs	r3, #0
 800a8dc:	3015      	adds	r0, #21
 800a8de:	fa02 f000 	lsl.w	r0, r2, r0
 800a8e2:	fa23 f30c 	lsr.w	r3, r3, ip
 800a8e6:	4303      	orrs	r3, r0
 800a8e8:	461c      	mov	r4, r3
 800a8ea:	ec45 4b10 	vmov	d0, r4, r5
 800a8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8f2:	45b8      	cmp	r8, r7
 800a8f4:	bf3a      	itte	cc
 800a8f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a8fa:	f1a6 0708 	subcc.w	r7, r6, #8
 800a8fe:	2300      	movcs	r3, #0
 800a900:	380b      	subs	r0, #11
 800a902:	d012      	beq.n	800a92a <__b2d+0x8a>
 800a904:	f1c0 0120 	rsb	r1, r0, #32
 800a908:	fa23 f401 	lsr.w	r4, r3, r1
 800a90c:	4082      	lsls	r2, r0
 800a90e:	4322      	orrs	r2, r4
 800a910:	4547      	cmp	r7, r8
 800a912:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a916:	bf8c      	ite	hi
 800a918:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a91c:	2200      	movls	r2, #0
 800a91e:	4083      	lsls	r3, r0
 800a920:	40ca      	lsrs	r2, r1
 800a922:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a926:	4313      	orrs	r3, r2
 800a928:	e7de      	b.n	800a8e8 <__b2d+0x48>
 800a92a:	ea42 0501 	orr.w	r5, r2, r1
 800a92e:	e7db      	b.n	800a8e8 <__b2d+0x48>
 800a930:	3ff00000 	.word	0x3ff00000

0800a934 <__d2b>:
 800a934:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a938:	460f      	mov	r7, r1
 800a93a:	2101      	movs	r1, #1
 800a93c:	ec59 8b10 	vmov	r8, r9, d0
 800a940:	4616      	mov	r6, r2
 800a942:	f7ff fc13 	bl	800a16c <_Balloc>
 800a946:	4604      	mov	r4, r0
 800a948:	b930      	cbnz	r0, 800a958 <__d2b+0x24>
 800a94a:	4602      	mov	r2, r0
 800a94c:	4b23      	ldr	r3, [pc, #140]	@ (800a9dc <__d2b+0xa8>)
 800a94e:	4824      	ldr	r0, [pc, #144]	@ (800a9e0 <__d2b+0xac>)
 800a950:	f240 310f 	movw	r1, #783	@ 0x30f
 800a954:	f001 fb50 	bl	800bff8 <__assert_func>
 800a958:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a95c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a960:	b10d      	cbz	r5, 800a966 <__d2b+0x32>
 800a962:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a966:	9301      	str	r3, [sp, #4]
 800a968:	f1b8 0300 	subs.w	r3, r8, #0
 800a96c:	d023      	beq.n	800a9b6 <__d2b+0x82>
 800a96e:	4668      	mov	r0, sp
 800a970:	9300      	str	r3, [sp, #0]
 800a972:	f7ff fd0c 	bl	800a38e <__lo0bits>
 800a976:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a97a:	b1d0      	cbz	r0, 800a9b2 <__d2b+0x7e>
 800a97c:	f1c0 0320 	rsb	r3, r0, #32
 800a980:	fa02 f303 	lsl.w	r3, r2, r3
 800a984:	430b      	orrs	r3, r1
 800a986:	40c2      	lsrs	r2, r0
 800a988:	6163      	str	r3, [r4, #20]
 800a98a:	9201      	str	r2, [sp, #4]
 800a98c:	9b01      	ldr	r3, [sp, #4]
 800a98e:	61a3      	str	r3, [r4, #24]
 800a990:	2b00      	cmp	r3, #0
 800a992:	bf0c      	ite	eq
 800a994:	2201      	moveq	r2, #1
 800a996:	2202      	movne	r2, #2
 800a998:	6122      	str	r2, [r4, #16]
 800a99a:	b1a5      	cbz	r5, 800a9c6 <__d2b+0x92>
 800a99c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a9a0:	4405      	add	r5, r0
 800a9a2:	603d      	str	r5, [r7, #0]
 800a9a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a9a8:	6030      	str	r0, [r6, #0]
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	b003      	add	sp, #12
 800a9ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9b2:	6161      	str	r1, [r4, #20]
 800a9b4:	e7ea      	b.n	800a98c <__d2b+0x58>
 800a9b6:	a801      	add	r0, sp, #4
 800a9b8:	f7ff fce9 	bl	800a38e <__lo0bits>
 800a9bc:	9b01      	ldr	r3, [sp, #4]
 800a9be:	6163      	str	r3, [r4, #20]
 800a9c0:	3020      	adds	r0, #32
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	e7e8      	b.n	800a998 <__d2b+0x64>
 800a9c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a9ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a9ce:	6038      	str	r0, [r7, #0]
 800a9d0:	6918      	ldr	r0, [r3, #16]
 800a9d2:	f7ff fcbd 	bl	800a350 <__hi0bits>
 800a9d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a9da:	e7e5      	b.n	800a9a8 <__d2b+0x74>
 800a9dc:	0800d189 	.word	0x0800d189
 800a9e0:	0800d19a 	.word	0x0800d19a

0800a9e4 <__ratio>:
 800a9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e8:	b085      	sub	sp, #20
 800a9ea:	e9cd 1000 	strd	r1, r0, [sp]
 800a9ee:	a902      	add	r1, sp, #8
 800a9f0:	f7ff ff56 	bl	800a8a0 <__b2d>
 800a9f4:	9800      	ldr	r0, [sp, #0]
 800a9f6:	a903      	add	r1, sp, #12
 800a9f8:	ec55 4b10 	vmov	r4, r5, d0
 800a9fc:	f7ff ff50 	bl	800a8a0 <__b2d>
 800aa00:	9b01      	ldr	r3, [sp, #4]
 800aa02:	6919      	ldr	r1, [r3, #16]
 800aa04:	9b00      	ldr	r3, [sp, #0]
 800aa06:	691b      	ldr	r3, [r3, #16]
 800aa08:	1ac9      	subs	r1, r1, r3
 800aa0a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800aa0e:	1a9b      	subs	r3, r3, r2
 800aa10:	ec5b ab10 	vmov	sl, fp, d0
 800aa14:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	bfce      	itee	gt
 800aa1c:	462a      	movgt	r2, r5
 800aa1e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aa22:	465a      	movle	r2, fp
 800aa24:	462f      	mov	r7, r5
 800aa26:	46d9      	mov	r9, fp
 800aa28:	bfcc      	ite	gt
 800aa2a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aa2e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800aa32:	464b      	mov	r3, r9
 800aa34:	4652      	mov	r2, sl
 800aa36:	4620      	mov	r0, r4
 800aa38:	4639      	mov	r1, r7
 800aa3a:	f7f5 ff37 	bl	80008ac <__aeabi_ddiv>
 800aa3e:	ec41 0b10 	vmov	d0, r0, r1
 800aa42:	b005      	add	sp, #20
 800aa44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa48 <__copybits>:
 800aa48:	3901      	subs	r1, #1
 800aa4a:	b570      	push	{r4, r5, r6, lr}
 800aa4c:	1149      	asrs	r1, r1, #5
 800aa4e:	6914      	ldr	r4, [r2, #16]
 800aa50:	3101      	adds	r1, #1
 800aa52:	f102 0314 	add.w	r3, r2, #20
 800aa56:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aa5a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aa5e:	1f05      	subs	r5, r0, #4
 800aa60:	42a3      	cmp	r3, r4
 800aa62:	d30c      	bcc.n	800aa7e <__copybits+0x36>
 800aa64:	1aa3      	subs	r3, r4, r2
 800aa66:	3b11      	subs	r3, #17
 800aa68:	f023 0303 	bic.w	r3, r3, #3
 800aa6c:	3211      	adds	r2, #17
 800aa6e:	42a2      	cmp	r2, r4
 800aa70:	bf88      	it	hi
 800aa72:	2300      	movhi	r3, #0
 800aa74:	4418      	add	r0, r3
 800aa76:	2300      	movs	r3, #0
 800aa78:	4288      	cmp	r0, r1
 800aa7a:	d305      	bcc.n	800aa88 <__copybits+0x40>
 800aa7c:	bd70      	pop	{r4, r5, r6, pc}
 800aa7e:	f853 6b04 	ldr.w	r6, [r3], #4
 800aa82:	f845 6f04 	str.w	r6, [r5, #4]!
 800aa86:	e7eb      	b.n	800aa60 <__copybits+0x18>
 800aa88:	f840 3b04 	str.w	r3, [r0], #4
 800aa8c:	e7f4      	b.n	800aa78 <__copybits+0x30>

0800aa8e <__any_on>:
 800aa8e:	f100 0214 	add.w	r2, r0, #20
 800aa92:	6900      	ldr	r0, [r0, #16]
 800aa94:	114b      	asrs	r3, r1, #5
 800aa96:	4298      	cmp	r0, r3
 800aa98:	b510      	push	{r4, lr}
 800aa9a:	db11      	blt.n	800aac0 <__any_on+0x32>
 800aa9c:	dd0a      	ble.n	800aab4 <__any_on+0x26>
 800aa9e:	f011 011f 	ands.w	r1, r1, #31
 800aaa2:	d007      	beq.n	800aab4 <__any_on+0x26>
 800aaa4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aaa8:	fa24 f001 	lsr.w	r0, r4, r1
 800aaac:	fa00 f101 	lsl.w	r1, r0, r1
 800aab0:	428c      	cmp	r4, r1
 800aab2:	d10b      	bne.n	800aacc <__any_on+0x3e>
 800aab4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d803      	bhi.n	800aac4 <__any_on+0x36>
 800aabc:	2000      	movs	r0, #0
 800aabe:	bd10      	pop	{r4, pc}
 800aac0:	4603      	mov	r3, r0
 800aac2:	e7f7      	b.n	800aab4 <__any_on+0x26>
 800aac4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aac8:	2900      	cmp	r1, #0
 800aaca:	d0f5      	beq.n	800aab8 <__any_on+0x2a>
 800aacc:	2001      	movs	r0, #1
 800aace:	e7f6      	b.n	800aabe <__any_on+0x30>

0800aad0 <sulp>:
 800aad0:	b570      	push	{r4, r5, r6, lr}
 800aad2:	4604      	mov	r4, r0
 800aad4:	460d      	mov	r5, r1
 800aad6:	ec45 4b10 	vmov	d0, r4, r5
 800aada:	4616      	mov	r6, r2
 800aadc:	f7ff feba 	bl	800a854 <__ulp>
 800aae0:	ec51 0b10 	vmov	r0, r1, d0
 800aae4:	b17e      	cbz	r6, 800ab06 <sulp+0x36>
 800aae6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aaea:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	dd09      	ble.n	800ab06 <sulp+0x36>
 800aaf2:	051b      	lsls	r3, r3, #20
 800aaf4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800aaf8:	2400      	movs	r4, #0
 800aafa:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800aafe:	4622      	mov	r2, r4
 800ab00:	462b      	mov	r3, r5
 800ab02:	f7f5 fda9 	bl	8000658 <__aeabi_dmul>
 800ab06:	ec41 0b10 	vmov	d0, r0, r1
 800ab0a:	bd70      	pop	{r4, r5, r6, pc}
 800ab0c:	0000      	movs	r0, r0
	...

0800ab10 <_strtod_l>:
 800ab10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab14:	b09f      	sub	sp, #124	@ 0x7c
 800ab16:	460c      	mov	r4, r1
 800ab18:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ab1e:	9005      	str	r0, [sp, #20]
 800ab20:	f04f 0a00 	mov.w	sl, #0
 800ab24:	f04f 0b00 	mov.w	fp, #0
 800ab28:	460a      	mov	r2, r1
 800ab2a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab2c:	7811      	ldrb	r1, [r2, #0]
 800ab2e:	292b      	cmp	r1, #43	@ 0x2b
 800ab30:	d04a      	beq.n	800abc8 <_strtod_l+0xb8>
 800ab32:	d838      	bhi.n	800aba6 <_strtod_l+0x96>
 800ab34:	290d      	cmp	r1, #13
 800ab36:	d832      	bhi.n	800ab9e <_strtod_l+0x8e>
 800ab38:	2908      	cmp	r1, #8
 800ab3a:	d832      	bhi.n	800aba2 <_strtod_l+0x92>
 800ab3c:	2900      	cmp	r1, #0
 800ab3e:	d03b      	beq.n	800abb8 <_strtod_l+0xa8>
 800ab40:	2200      	movs	r2, #0
 800ab42:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ab44:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ab46:	782a      	ldrb	r2, [r5, #0]
 800ab48:	2a30      	cmp	r2, #48	@ 0x30
 800ab4a:	f040 80b3 	bne.w	800acb4 <_strtod_l+0x1a4>
 800ab4e:	786a      	ldrb	r2, [r5, #1]
 800ab50:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ab54:	2a58      	cmp	r2, #88	@ 0x58
 800ab56:	d16e      	bne.n	800ac36 <_strtod_l+0x126>
 800ab58:	9302      	str	r3, [sp, #8]
 800ab5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab5c:	9301      	str	r3, [sp, #4]
 800ab5e:	ab1a      	add	r3, sp, #104	@ 0x68
 800ab60:	9300      	str	r3, [sp, #0]
 800ab62:	4a8e      	ldr	r2, [pc, #568]	@ (800ad9c <_strtod_l+0x28c>)
 800ab64:	9805      	ldr	r0, [sp, #20]
 800ab66:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ab68:	a919      	add	r1, sp, #100	@ 0x64
 800ab6a:	f001 fadf 	bl	800c12c <__gethex>
 800ab6e:	f010 060f 	ands.w	r6, r0, #15
 800ab72:	4604      	mov	r4, r0
 800ab74:	d005      	beq.n	800ab82 <_strtod_l+0x72>
 800ab76:	2e06      	cmp	r6, #6
 800ab78:	d128      	bne.n	800abcc <_strtod_l+0xbc>
 800ab7a:	3501      	adds	r5, #1
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	9519      	str	r5, [sp, #100]	@ 0x64
 800ab80:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f040 858e 	bne.w	800b6a6 <_strtod_l+0xb96>
 800ab8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab8c:	b1cb      	cbz	r3, 800abc2 <_strtod_l+0xb2>
 800ab8e:	4652      	mov	r2, sl
 800ab90:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ab94:	ec43 2b10 	vmov	d0, r2, r3
 800ab98:	b01f      	add	sp, #124	@ 0x7c
 800ab9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab9e:	2920      	cmp	r1, #32
 800aba0:	d1ce      	bne.n	800ab40 <_strtod_l+0x30>
 800aba2:	3201      	adds	r2, #1
 800aba4:	e7c1      	b.n	800ab2a <_strtod_l+0x1a>
 800aba6:	292d      	cmp	r1, #45	@ 0x2d
 800aba8:	d1ca      	bne.n	800ab40 <_strtod_l+0x30>
 800abaa:	2101      	movs	r1, #1
 800abac:	910b      	str	r1, [sp, #44]	@ 0x2c
 800abae:	1c51      	adds	r1, r2, #1
 800abb0:	9119      	str	r1, [sp, #100]	@ 0x64
 800abb2:	7852      	ldrb	r2, [r2, #1]
 800abb4:	2a00      	cmp	r2, #0
 800abb6:	d1c5      	bne.n	800ab44 <_strtod_l+0x34>
 800abb8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800abba:	9419      	str	r4, [sp, #100]	@ 0x64
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	f040 8570 	bne.w	800b6a2 <_strtod_l+0xb92>
 800abc2:	4652      	mov	r2, sl
 800abc4:	465b      	mov	r3, fp
 800abc6:	e7e5      	b.n	800ab94 <_strtod_l+0x84>
 800abc8:	2100      	movs	r1, #0
 800abca:	e7ef      	b.n	800abac <_strtod_l+0x9c>
 800abcc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800abce:	b13a      	cbz	r2, 800abe0 <_strtod_l+0xd0>
 800abd0:	2135      	movs	r1, #53	@ 0x35
 800abd2:	a81c      	add	r0, sp, #112	@ 0x70
 800abd4:	f7ff ff38 	bl	800aa48 <__copybits>
 800abd8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800abda:	9805      	ldr	r0, [sp, #20]
 800abdc:	f7ff fb06 	bl	800a1ec <_Bfree>
 800abe0:	3e01      	subs	r6, #1
 800abe2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800abe4:	2e04      	cmp	r6, #4
 800abe6:	d806      	bhi.n	800abf6 <_strtod_l+0xe6>
 800abe8:	e8df f006 	tbb	[pc, r6]
 800abec:	201d0314 	.word	0x201d0314
 800abf0:	14          	.byte	0x14
 800abf1:	00          	.byte	0x00
 800abf2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800abf6:	05e1      	lsls	r1, r4, #23
 800abf8:	bf48      	it	mi
 800abfa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800abfe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac02:	0d1b      	lsrs	r3, r3, #20
 800ac04:	051b      	lsls	r3, r3, #20
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d1bb      	bne.n	800ab82 <_strtod_l+0x72>
 800ac0a:	f7fe fbe3 	bl	80093d4 <__errno>
 800ac0e:	2322      	movs	r3, #34	@ 0x22
 800ac10:	6003      	str	r3, [r0, #0]
 800ac12:	e7b6      	b.n	800ab82 <_strtod_l+0x72>
 800ac14:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ac18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ac1c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ac20:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ac24:	e7e7      	b.n	800abf6 <_strtod_l+0xe6>
 800ac26:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ada4 <_strtod_l+0x294>
 800ac2a:	e7e4      	b.n	800abf6 <_strtod_l+0xe6>
 800ac2c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ac30:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ac34:	e7df      	b.n	800abf6 <_strtod_l+0xe6>
 800ac36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac38:	1c5a      	adds	r2, r3, #1
 800ac3a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac3c:	785b      	ldrb	r3, [r3, #1]
 800ac3e:	2b30      	cmp	r3, #48	@ 0x30
 800ac40:	d0f9      	beq.n	800ac36 <_strtod_l+0x126>
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d09d      	beq.n	800ab82 <_strtod_l+0x72>
 800ac46:	2301      	movs	r3, #1
 800ac48:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac4c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac4e:	2300      	movs	r3, #0
 800ac50:	9308      	str	r3, [sp, #32]
 800ac52:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac54:	461f      	mov	r7, r3
 800ac56:	220a      	movs	r2, #10
 800ac58:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ac5a:	7805      	ldrb	r5, [r0, #0]
 800ac5c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ac60:	b2d9      	uxtb	r1, r3
 800ac62:	2909      	cmp	r1, #9
 800ac64:	d928      	bls.n	800acb8 <_strtod_l+0x1a8>
 800ac66:	494e      	ldr	r1, [pc, #312]	@ (800ada0 <_strtod_l+0x290>)
 800ac68:	2201      	movs	r2, #1
 800ac6a:	f001 f979 	bl	800bf60 <strncmp>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d032      	beq.n	800acd8 <_strtod_l+0x1c8>
 800ac72:	2000      	movs	r0, #0
 800ac74:	462a      	mov	r2, r5
 800ac76:	4681      	mov	r9, r0
 800ac78:	463d      	mov	r5, r7
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2a65      	cmp	r2, #101	@ 0x65
 800ac7e:	d001      	beq.n	800ac84 <_strtod_l+0x174>
 800ac80:	2a45      	cmp	r2, #69	@ 0x45
 800ac82:	d114      	bne.n	800acae <_strtod_l+0x19e>
 800ac84:	b91d      	cbnz	r5, 800ac8e <_strtod_l+0x17e>
 800ac86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac88:	4302      	orrs	r2, r0
 800ac8a:	d095      	beq.n	800abb8 <_strtod_l+0xa8>
 800ac8c:	2500      	movs	r5, #0
 800ac8e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ac90:	1c62      	adds	r2, r4, #1
 800ac92:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac94:	7862      	ldrb	r2, [r4, #1]
 800ac96:	2a2b      	cmp	r2, #43	@ 0x2b
 800ac98:	d077      	beq.n	800ad8a <_strtod_l+0x27a>
 800ac9a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ac9c:	d07b      	beq.n	800ad96 <_strtod_l+0x286>
 800ac9e:	f04f 0c00 	mov.w	ip, #0
 800aca2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800aca6:	2909      	cmp	r1, #9
 800aca8:	f240 8082 	bls.w	800adb0 <_strtod_l+0x2a0>
 800acac:	9419      	str	r4, [sp, #100]	@ 0x64
 800acae:	f04f 0800 	mov.w	r8, #0
 800acb2:	e0a2      	b.n	800adfa <_strtod_l+0x2ea>
 800acb4:	2300      	movs	r3, #0
 800acb6:	e7c7      	b.n	800ac48 <_strtod_l+0x138>
 800acb8:	2f08      	cmp	r7, #8
 800acba:	bfd5      	itete	le
 800acbc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800acbe:	9908      	ldrgt	r1, [sp, #32]
 800acc0:	fb02 3301 	mlale	r3, r2, r1, r3
 800acc4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800acc8:	f100 0001 	add.w	r0, r0, #1
 800accc:	bfd4      	ite	le
 800acce:	930a      	strle	r3, [sp, #40]	@ 0x28
 800acd0:	9308      	strgt	r3, [sp, #32]
 800acd2:	3701      	adds	r7, #1
 800acd4:	9019      	str	r0, [sp, #100]	@ 0x64
 800acd6:	e7bf      	b.n	800ac58 <_strtod_l+0x148>
 800acd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acda:	1c5a      	adds	r2, r3, #1
 800acdc:	9219      	str	r2, [sp, #100]	@ 0x64
 800acde:	785a      	ldrb	r2, [r3, #1]
 800ace0:	b37f      	cbz	r7, 800ad42 <_strtod_l+0x232>
 800ace2:	4681      	mov	r9, r0
 800ace4:	463d      	mov	r5, r7
 800ace6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800acea:	2b09      	cmp	r3, #9
 800acec:	d912      	bls.n	800ad14 <_strtod_l+0x204>
 800acee:	2301      	movs	r3, #1
 800acf0:	e7c4      	b.n	800ac7c <_strtod_l+0x16c>
 800acf2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acf4:	1c5a      	adds	r2, r3, #1
 800acf6:	9219      	str	r2, [sp, #100]	@ 0x64
 800acf8:	785a      	ldrb	r2, [r3, #1]
 800acfa:	3001      	adds	r0, #1
 800acfc:	2a30      	cmp	r2, #48	@ 0x30
 800acfe:	d0f8      	beq.n	800acf2 <_strtod_l+0x1e2>
 800ad00:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ad04:	2b08      	cmp	r3, #8
 800ad06:	f200 84d3 	bhi.w	800b6b0 <_strtod_l+0xba0>
 800ad0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad0c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad0e:	4681      	mov	r9, r0
 800ad10:	2000      	movs	r0, #0
 800ad12:	4605      	mov	r5, r0
 800ad14:	3a30      	subs	r2, #48	@ 0x30
 800ad16:	f100 0301 	add.w	r3, r0, #1
 800ad1a:	d02a      	beq.n	800ad72 <_strtod_l+0x262>
 800ad1c:	4499      	add	r9, r3
 800ad1e:	eb00 0c05 	add.w	ip, r0, r5
 800ad22:	462b      	mov	r3, r5
 800ad24:	210a      	movs	r1, #10
 800ad26:	4563      	cmp	r3, ip
 800ad28:	d10d      	bne.n	800ad46 <_strtod_l+0x236>
 800ad2a:	1c69      	adds	r1, r5, #1
 800ad2c:	4401      	add	r1, r0
 800ad2e:	4428      	add	r0, r5
 800ad30:	2808      	cmp	r0, #8
 800ad32:	dc16      	bgt.n	800ad62 <_strtod_l+0x252>
 800ad34:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ad36:	230a      	movs	r3, #10
 800ad38:	fb03 2300 	mla	r3, r3, r0, r2
 800ad3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad3e:	2300      	movs	r3, #0
 800ad40:	e018      	b.n	800ad74 <_strtod_l+0x264>
 800ad42:	4638      	mov	r0, r7
 800ad44:	e7da      	b.n	800acfc <_strtod_l+0x1ec>
 800ad46:	2b08      	cmp	r3, #8
 800ad48:	f103 0301 	add.w	r3, r3, #1
 800ad4c:	dc03      	bgt.n	800ad56 <_strtod_l+0x246>
 800ad4e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ad50:	434e      	muls	r6, r1
 800ad52:	960a      	str	r6, [sp, #40]	@ 0x28
 800ad54:	e7e7      	b.n	800ad26 <_strtod_l+0x216>
 800ad56:	2b10      	cmp	r3, #16
 800ad58:	bfde      	ittt	le
 800ad5a:	9e08      	ldrle	r6, [sp, #32]
 800ad5c:	434e      	mulle	r6, r1
 800ad5e:	9608      	strle	r6, [sp, #32]
 800ad60:	e7e1      	b.n	800ad26 <_strtod_l+0x216>
 800ad62:	280f      	cmp	r0, #15
 800ad64:	dceb      	bgt.n	800ad3e <_strtod_l+0x22e>
 800ad66:	9808      	ldr	r0, [sp, #32]
 800ad68:	230a      	movs	r3, #10
 800ad6a:	fb03 2300 	mla	r3, r3, r0, r2
 800ad6e:	9308      	str	r3, [sp, #32]
 800ad70:	e7e5      	b.n	800ad3e <_strtod_l+0x22e>
 800ad72:	4629      	mov	r1, r5
 800ad74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad76:	1c50      	adds	r0, r2, #1
 800ad78:	9019      	str	r0, [sp, #100]	@ 0x64
 800ad7a:	7852      	ldrb	r2, [r2, #1]
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	460d      	mov	r5, r1
 800ad80:	e7b1      	b.n	800ace6 <_strtod_l+0x1d6>
 800ad82:	f04f 0900 	mov.w	r9, #0
 800ad86:	2301      	movs	r3, #1
 800ad88:	e77d      	b.n	800ac86 <_strtod_l+0x176>
 800ad8a:	f04f 0c00 	mov.w	ip, #0
 800ad8e:	1ca2      	adds	r2, r4, #2
 800ad90:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad92:	78a2      	ldrb	r2, [r4, #2]
 800ad94:	e785      	b.n	800aca2 <_strtod_l+0x192>
 800ad96:	f04f 0c01 	mov.w	ip, #1
 800ad9a:	e7f8      	b.n	800ad8e <_strtod_l+0x27e>
 800ad9c:	0800d308 	.word	0x0800d308
 800ada0:	0800d2f0 	.word	0x0800d2f0
 800ada4:	7ff00000 	.word	0x7ff00000
 800ada8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800adaa:	1c51      	adds	r1, r2, #1
 800adac:	9119      	str	r1, [sp, #100]	@ 0x64
 800adae:	7852      	ldrb	r2, [r2, #1]
 800adb0:	2a30      	cmp	r2, #48	@ 0x30
 800adb2:	d0f9      	beq.n	800ada8 <_strtod_l+0x298>
 800adb4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800adb8:	2908      	cmp	r1, #8
 800adba:	f63f af78 	bhi.w	800acae <_strtod_l+0x19e>
 800adbe:	3a30      	subs	r2, #48	@ 0x30
 800adc0:	920e      	str	r2, [sp, #56]	@ 0x38
 800adc2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800adc4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800adc6:	f04f 080a 	mov.w	r8, #10
 800adca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800adcc:	1c56      	adds	r6, r2, #1
 800adce:	9619      	str	r6, [sp, #100]	@ 0x64
 800add0:	7852      	ldrb	r2, [r2, #1]
 800add2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800add6:	f1be 0f09 	cmp.w	lr, #9
 800adda:	d939      	bls.n	800ae50 <_strtod_l+0x340>
 800addc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800adde:	1a76      	subs	r6, r6, r1
 800ade0:	2e08      	cmp	r6, #8
 800ade2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ade6:	dc03      	bgt.n	800adf0 <_strtod_l+0x2e0>
 800ade8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800adea:	4588      	cmp	r8, r1
 800adec:	bfa8      	it	ge
 800adee:	4688      	movge	r8, r1
 800adf0:	f1bc 0f00 	cmp.w	ip, #0
 800adf4:	d001      	beq.n	800adfa <_strtod_l+0x2ea>
 800adf6:	f1c8 0800 	rsb	r8, r8, #0
 800adfa:	2d00      	cmp	r5, #0
 800adfc:	d14e      	bne.n	800ae9c <_strtod_l+0x38c>
 800adfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ae00:	4308      	orrs	r0, r1
 800ae02:	f47f aebe 	bne.w	800ab82 <_strtod_l+0x72>
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f47f aed6 	bne.w	800abb8 <_strtod_l+0xa8>
 800ae0c:	2a69      	cmp	r2, #105	@ 0x69
 800ae0e:	d028      	beq.n	800ae62 <_strtod_l+0x352>
 800ae10:	dc25      	bgt.n	800ae5e <_strtod_l+0x34e>
 800ae12:	2a49      	cmp	r2, #73	@ 0x49
 800ae14:	d025      	beq.n	800ae62 <_strtod_l+0x352>
 800ae16:	2a4e      	cmp	r2, #78	@ 0x4e
 800ae18:	f47f aece 	bne.w	800abb8 <_strtod_l+0xa8>
 800ae1c:	499b      	ldr	r1, [pc, #620]	@ (800b08c <_strtod_l+0x57c>)
 800ae1e:	a819      	add	r0, sp, #100	@ 0x64
 800ae20:	f001 fba6 	bl	800c570 <__match>
 800ae24:	2800      	cmp	r0, #0
 800ae26:	f43f aec7 	beq.w	800abb8 <_strtod_l+0xa8>
 800ae2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	2b28      	cmp	r3, #40	@ 0x28
 800ae30:	d12e      	bne.n	800ae90 <_strtod_l+0x380>
 800ae32:	4997      	ldr	r1, [pc, #604]	@ (800b090 <_strtod_l+0x580>)
 800ae34:	aa1c      	add	r2, sp, #112	@ 0x70
 800ae36:	a819      	add	r0, sp, #100	@ 0x64
 800ae38:	f001 fbae 	bl	800c598 <__hexnan>
 800ae3c:	2805      	cmp	r0, #5
 800ae3e:	d127      	bne.n	800ae90 <_strtod_l+0x380>
 800ae40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ae42:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ae46:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ae4a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ae4e:	e698      	b.n	800ab82 <_strtod_l+0x72>
 800ae50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ae52:	fb08 2101 	mla	r1, r8, r1, r2
 800ae56:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ae5a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae5c:	e7b5      	b.n	800adca <_strtod_l+0x2ba>
 800ae5e:	2a6e      	cmp	r2, #110	@ 0x6e
 800ae60:	e7da      	b.n	800ae18 <_strtod_l+0x308>
 800ae62:	498c      	ldr	r1, [pc, #560]	@ (800b094 <_strtod_l+0x584>)
 800ae64:	a819      	add	r0, sp, #100	@ 0x64
 800ae66:	f001 fb83 	bl	800c570 <__match>
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	f43f aea4 	beq.w	800abb8 <_strtod_l+0xa8>
 800ae70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae72:	4989      	ldr	r1, [pc, #548]	@ (800b098 <_strtod_l+0x588>)
 800ae74:	3b01      	subs	r3, #1
 800ae76:	a819      	add	r0, sp, #100	@ 0x64
 800ae78:	9319      	str	r3, [sp, #100]	@ 0x64
 800ae7a:	f001 fb79 	bl	800c570 <__match>
 800ae7e:	b910      	cbnz	r0, 800ae86 <_strtod_l+0x376>
 800ae80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae82:	3301      	adds	r3, #1
 800ae84:	9319      	str	r3, [sp, #100]	@ 0x64
 800ae86:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b0a8 <_strtod_l+0x598>
 800ae8a:	f04f 0a00 	mov.w	sl, #0
 800ae8e:	e678      	b.n	800ab82 <_strtod_l+0x72>
 800ae90:	4882      	ldr	r0, [pc, #520]	@ (800b09c <_strtod_l+0x58c>)
 800ae92:	f001 f8a9 	bl	800bfe8 <nan>
 800ae96:	ec5b ab10 	vmov	sl, fp, d0
 800ae9a:	e672      	b.n	800ab82 <_strtod_l+0x72>
 800ae9c:	eba8 0309 	sub.w	r3, r8, r9
 800aea0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aea2:	9309      	str	r3, [sp, #36]	@ 0x24
 800aea4:	2f00      	cmp	r7, #0
 800aea6:	bf08      	it	eq
 800aea8:	462f      	moveq	r7, r5
 800aeaa:	2d10      	cmp	r5, #16
 800aeac:	462c      	mov	r4, r5
 800aeae:	bfa8      	it	ge
 800aeb0:	2410      	movge	r4, #16
 800aeb2:	f7f5 fb57 	bl	8000564 <__aeabi_ui2d>
 800aeb6:	2d09      	cmp	r5, #9
 800aeb8:	4682      	mov	sl, r0
 800aeba:	468b      	mov	fp, r1
 800aebc:	dc13      	bgt.n	800aee6 <_strtod_l+0x3d6>
 800aebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	f43f ae5e 	beq.w	800ab82 <_strtod_l+0x72>
 800aec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aec8:	dd78      	ble.n	800afbc <_strtod_l+0x4ac>
 800aeca:	2b16      	cmp	r3, #22
 800aecc:	dc5f      	bgt.n	800af8e <_strtod_l+0x47e>
 800aece:	4974      	ldr	r1, [pc, #464]	@ (800b0a0 <_strtod_l+0x590>)
 800aed0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aed4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aed8:	4652      	mov	r2, sl
 800aeda:	465b      	mov	r3, fp
 800aedc:	f7f5 fbbc 	bl	8000658 <__aeabi_dmul>
 800aee0:	4682      	mov	sl, r0
 800aee2:	468b      	mov	fp, r1
 800aee4:	e64d      	b.n	800ab82 <_strtod_l+0x72>
 800aee6:	4b6e      	ldr	r3, [pc, #440]	@ (800b0a0 <_strtod_l+0x590>)
 800aee8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aeec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800aef0:	f7f5 fbb2 	bl	8000658 <__aeabi_dmul>
 800aef4:	4682      	mov	sl, r0
 800aef6:	9808      	ldr	r0, [sp, #32]
 800aef8:	468b      	mov	fp, r1
 800aefa:	f7f5 fb33 	bl	8000564 <__aeabi_ui2d>
 800aefe:	4602      	mov	r2, r0
 800af00:	460b      	mov	r3, r1
 800af02:	4650      	mov	r0, sl
 800af04:	4659      	mov	r1, fp
 800af06:	f7f5 f9f1 	bl	80002ec <__adddf3>
 800af0a:	2d0f      	cmp	r5, #15
 800af0c:	4682      	mov	sl, r0
 800af0e:	468b      	mov	fp, r1
 800af10:	ddd5      	ble.n	800aebe <_strtod_l+0x3ae>
 800af12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af14:	1b2c      	subs	r4, r5, r4
 800af16:	441c      	add	r4, r3
 800af18:	2c00      	cmp	r4, #0
 800af1a:	f340 8096 	ble.w	800b04a <_strtod_l+0x53a>
 800af1e:	f014 030f 	ands.w	r3, r4, #15
 800af22:	d00a      	beq.n	800af3a <_strtod_l+0x42a>
 800af24:	495e      	ldr	r1, [pc, #376]	@ (800b0a0 <_strtod_l+0x590>)
 800af26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af2a:	4652      	mov	r2, sl
 800af2c:	465b      	mov	r3, fp
 800af2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af32:	f7f5 fb91 	bl	8000658 <__aeabi_dmul>
 800af36:	4682      	mov	sl, r0
 800af38:	468b      	mov	fp, r1
 800af3a:	f034 040f 	bics.w	r4, r4, #15
 800af3e:	d073      	beq.n	800b028 <_strtod_l+0x518>
 800af40:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800af44:	dd48      	ble.n	800afd8 <_strtod_l+0x4c8>
 800af46:	2400      	movs	r4, #0
 800af48:	46a0      	mov	r8, r4
 800af4a:	940a      	str	r4, [sp, #40]	@ 0x28
 800af4c:	46a1      	mov	r9, r4
 800af4e:	9a05      	ldr	r2, [sp, #20]
 800af50:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b0a8 <_strtod_l+0x598>
 800af54:	2322      	movs	r3, #34	@ 0x22
 800af56:	6013      	str	r3, [r2, #0]
 800af58:	f04f 0a00 	mov.w	sl, #0
 800af5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f43f ae0f 	beq.w	800ab82 <_strtod_l+0x72>
 800af64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800af66:	9805      	ldr	r0, [sp, #20]
 800af68:	f7ff f940 	bl	800a1ec <_Bfree>
 800af6c:	9805      	ldr	r0, [sp, #20]
 800af6e:	4649      	mov	r1, r9
 800af70:	f7ff f93c 	bl	800a1ec <_Bfree>
 800af74:	9805      	ldr	r0, [sp, #20]
 800af76:	4641      	mov	r1, r8
 800af78:	f7ff f938 	bl	800a1ec <_Bfree>
 800af7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800af7e:	9805      	ldr	r0, [sp, #20]
 800af80:	f7ff f934 	bl	800a1ec <_Bfree>
 800af84:	9805      	ldr	r0, [sp, #20]
 800af86:	4621      	mov	r1, r4
 800af88:	f7ff f930 	bl	800a1ec <_Bfree>
 800af8c:	e5f9      	b.n	800ab82 <_strtod_l+0x72>
 800af8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af90:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800af94:	4293      	cmp	r3, r2
 800af96:	dbbc      	blt.n	800af12 <_strtod_l+0x402>
 800af98:	4c41      	ldr	r4, [pc, #260]	@ (800b0a0 <_strtod_l+0x590>)
 800af9a:	f1c5 050f 	rsb	r5, r5, #15
 800af9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800afa2:	4652      	mov	r2, sl
 800afa4:	465b      	mov	r3, fp
 800afa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afaa:	f7f5 fb55 	bl	8000658 <__aeabi_dmul>
 800afae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afb0:	1b5d      	subs	r5, r3, r5
 800afb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800afb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800afba:	e78f      	b.n	800aedc <_strtod_l+0x3cc>
 800afbc:	3316      	adds	r3, #22
 800afbe:	dba8      	blt.n	800af12 <_strtod_l+0x402>
 800afc0:	4b37      	ldr	r3, [pc, #220]	@ (800b0a0 <_strtod_l+0x590>)
 800afc2:	eba9 0808 	sub.w	r8, r9, r8
 800afc6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800afca:	e9d8 2300 	ldrd	r2, r3, [r8]
 800afce:	4650      	mov	r0, sl
 800afd0:	4659      	mov	r1, fp
 800afd2:	f7f5 fc6b 	bl	80008ac <__aeabi_ddiv>
 800afd6:	e783      	b.n	800aee0 <_strtod_l+0x3d0>
 800afd8:	4b32      	ldr	r3, [pc, #200]	@ (800b0a4 <_strtod_l+0x594>)
 800afda:	9308      	str	r3, [sp, #32]
 800afdc:	2300      	movs	r3, #0
 800afde:	1124      	asrs	r4, r4, #4
 800afe0:	4650      	mov	r0, sl
 800afe2:	4659      	mov	r1, fp
 800afe4:	461e      	mov	r6, r3
 800afe6:	2c01      	cmp	r4, #1
 800afe8:	dc21      	bgt.n	800b02e <_strtod_l+0x51e>
 800afea:	b10b      	cbz	r3, 800aff0 <_strtod_l+0x4e0>
 800afec:	4682      	mov	sl, r0
 800afee:	468b      	mov	fp, r1
 800aff0:	492c      	ldr	r1, [pc, #176]	@ (800b0a4 <_strtod_l+0x594>)
 800aff2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800aff6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800affa:	4652      	mov	r2, sl
 800affc:	465b      	mov	r3, fp
 800affe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b002:	f7f5 fb29 	bl	8000658 <__aeabi_dmul>
 800b006:	4b28      	ldr	r3, [pc, #160]	@ (800b0a8 <_strtod_l+0x598>)
 800b008:	460a      	mov	r2, r1
 800b00a:	400b      	ands	r3, r1
 800b00c:	4927      	ldr	r1, [pc, #156]	@ (800b0ac <_strtod_l+0x59c>)
 800b00e:	428b      	cmp	r3, r1
 800b010:	4682      	mov	sl, r0
 800b012:	d898      	bhi.n	800af46 <_strtod_l+0x436>
 800b014:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b018:	428b      	cmp	r3, r1
 800b01a:	bf86      	itte	hi
 800b01c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b0b0 <_strtod_l+0x5a0>
 800b020:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800b024:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b028:	2300      	movs	r3, #0
 800b02a:	9308      	str	r3, [sp, #32]
 800b02c:	e07a      	b.n	800b124 <_strtod_l+0x614>
 800b02e:	07e2      	lsls	r2, r4, #31
 800b030:	d505      	bpl.n	800b03e <_strtod_l+0x52e>
 800b032:	9b08      	ldr	r3, [sp, #32]
 800b034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b038:	f7f5 fb0e 	bl	8000658 <__aeabi_dmul>
 800b03c:	2301      	movs	r3, #1
 800b03e:	9a08      	ldr	r2, [sp, #32]
 800b040:	3208      	adds	r2, #8
 800b042:	3601      	adds	r6, #1
 800b044:	1064      	asrs	r4, r4, #1
 800b046:	9208      	str	r2, [sp, #32]
 800b048:	e7cd      	b.n	800afe6 <_strtod_l+0x4d6>
 800b04a:	d0ed      	beq.n	800b028 <_strtod_l+0x518>
 800b04c:	4264      	negs	r4, r4
 800b04e:	f014 020f 	ands.w	r2, r4, #15
 800b052:	d00a      	beq.n	800b06a <_strtod_l+0x55a>
 800b054:	4b12      	ldr	r3, [pc, #72]	@ (800b0a0 <_strtod_l+0x590>)
 800b056:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b05a:	4650      	mov	r0, sl
 800b05c:	4659      	mov	r1, fp
 800b05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b062:	f7f5 fc23 	bl	80008ac <__aeabi_ddiv>
 800b066:	4682      	mov	sl, r0
 800b068:	468b      	mov	fp, r1
 800b06a:	1124      	asrs	r4, r4, #4
 800b06c:	d0dc      	beq.n	800b028 <_strtod_l+0x518>
 800b06e:	2c1f      	cmp	r4, #31
 800b070:	dd20      	ble.n	800b0b4 <_strtod_l+0x5a4>
 800b072:	2400      	movs	r4, #0
 800b074:	46a0      	mov	r8, r4
 800b076:	940a      	str	r4, [sp, #40]	@ 0x28
 800b078:	46a1      	mov	r9, r4
 800b07a:	9a05      	ldr	r2, [sp, #20]
 800b07c:	2322      	movs	r3, #34	@ 0x22
 800b07e:	f04f 0a00 	mov.w	sl, #0
 800b082:	f04f 0b00 	mov.w	fp, #0
 800b086:	6013      	str	r3, [r2, #0]
 800b088:	e768      	b.n	800af5c <_strtod_l+0x44c>
 800b08a:	bf00      	nop
 800b08c:	0800d0e1 	.word	0x0800d0e1
 800b090:	0800d2f4 	.word	0x0800d2f4
 800b094:	0800d0d9 	.word	0x0800d0d9
 800b098:	0800d110 	.word	0x0800d110
 800b09c:	0800d49d 	.word	0x0800d49d
 800b0a0:	0800d228 	.word	0x0800d228
 800b0a4:	0800d200 	.word	0x0800d200
 800b0a8:	7ff00000 	.word	0x7ff00000
 800b0ac:	7ca00000 	.word	0x7ca00000
 800b0b0:	7fefffff 	.word	0x7fefffff
 800b0b4:	f014 0310 	ands.w	r3, r4, #16
 800b0b8:	bf18      	it	ne
 800b0ba:	236a      	movne	r3, #106	@ 0x6a
 800b0bc:	4ea9      	ldr	r6, [pc, #676]	@ (800b364 <_strtod_l+0x854>)
 800b0be:	9308      	str	r3, [sp, #32]
 800b0c0:	4650      	mov	r0, sl
 800b0c2:	4659      	mov	r1, fp
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	07e2      	lsls	r2, r4, #31
 800b0c8:	d504      	bpl.n	800b0d4 <_strtod_l+0x5c4>
 800b0ca:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b0ce:	f7f5 fac3 	bl	8000658 <__aeabi_dmul>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	1064      	asrs	r4, r4, #1
 800b0d6:	f106 0608 	add.w	r6, r6, #8
 800b0da:	d1f4      	bne.n	800b0c6 <_strtod_l+0x5b6>
 800b0dc:	b10b      	cbz	r3, 800b0e2 <_strtod_l+0x5d2>
 800b0de:	4682      	mov	sl, r0
 800b0e0:	468b      	mov	fp, r1
 800b0e2:	9b08      	ldr	r3, [sp, #32]
 800b0e4:	b1b3      	cbz	r3, 800b114 <_strtod_l+0x604>
 800b0e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b0ea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	4659      	mov	r1, fp
 800b0f2:	dd0f      	ble.n	800b114 <_strtod_l+0x604>
 800b0f4:	2b1f      	cmp	r3, #31
 800b0f6:	dd55      	ble.n	800b1a4 <_strtod_l+0x694>
 800b0f8:	2b34      	cmp	r3, #52	@ 0x34
 800b0fa:	bfde      	ittt	le
 800b0fc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800b100:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b104:	4093      	lslle	r3, r2
 800b106:	f04f 0a00 	mov.w	sl, #0
 800b10a:	bfcc      	ite	gt
 800b10c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b110:	ea03 0b01 	andle.w	fp, r3, r1
 800b114:	2200      	movs	r2, #0
 800b116:	2300      	movs	r3, #0
 800b118:	4650      	mov	r0, sl
 800b11a:	4659      	mov	r1, fp
 800b11c:	f7f5 fd04 	bl	8000b28 <__aeabi_dcmpeq>
 800b120:	2800      	cmp	r0, #0
 800b122:	d1a6      	bne.n	800b072 <_strtod_l+0x562>
 800b124:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b126:	9300      	str	r3, [sp, #0]
 800b128:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b12a:	9805      	ldr	r0, [sp, #20]
 800b12c:	462b      	mov	r3, r5
 800b12e:	463a      	mov	r2, r7
 800b130:	f7ff f8c4 	bl	800a2bc <__s2b>
 800b134:	900a      	str	r0, [sp, #40]	@ 0x28
 800b136:	2800      	cmp	r0, #0
 800b138:	f43f af05 	beq.w	800af46 <_strtod_l+0x436>
 800b13c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b13e:	2a00      	cmp	r2, #0
 800b140:	eba9 0308 	sub.w	r3, r9, r8
 800b144:	bfa8      	it	ge
 800b146:	2300      	movge	r3, #0
 800b148:	9312      	str	r3, [sp, #72]	@ 0x48
 800b14a:	2400      	movs	r4, #0
 800b14c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b150:	9316      	str	r3, [sp, #88]	@ 0x58
 800b152:	46a0      	mov	r8, r4
 800b154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b156:	9805      	ldr	r0, [sp, #20]
 800b158:	6859      	ldr	r1, [r3, #4]
 800b15a:	f7ff f807 	bl	800a16c <_Balloc>
 800b15e:	4681      	mov	r9, r0
 800b160:	2800      	cmp	r0, #0
 800b162:	f43f aef4 	beq.w	800af4e <_strtod_l+0x43e>
 800b166:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b168:	691a      	ldr	r2, [r3, #16]
 800b16a:	3202      	adds	r2, #2
 800b16c:	f103 010c 	add.w	r1, r3, #12
 800b170:	0092      	lsls	r2, r2, #2
 800b172:	300c      	adds	r0, #12
 800b174:	f000 ff28 	bl	800bfc8 <memcpy>
 800b178:	ec4b ab10 	vmov	d0, sl, fp
 800b17c:	9805      	ldr	r0, [sp, #20]
 800b17e:	aa1c      	add	r2, sp, #112	@ 0x70
 800b180:	a91b      	add	r1, sp, #108	@ 0x6c
 800b182:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b186:	f7ff fbd5 	bl	800a934 <__d2b>
 800b18a:	901a      	str	r0, [sp, #104]	@ 0x68
 800b18c:	2800      	cmp	r0, #0
 800b18e:	f43f aede 	beq.w	800af4e <_strtod_l+0x43e>
 800b192:	9805      	ldr	r0, [sp, #20]
 800b194:	2101      	movs	r1, #1
 800b196:	f7ff f927 	bl	800a3e8 <__i2b>
 800b19a:	4680      	mov	r8, r0
 800b19c:	b948      	cbnz	r0, 800b1b2 <_strtod_l+0x6a2>
 800b19e:	f04f 0800 	mov.w	r8, #0
 800b1a2:	e6d4      	b.n	800af4e <_strtod_l+0x43e>
 800b1a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b1a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b1ac:	ea03 0a0a 	and.w	sl, r3, sl
 800b1b0:	e7b0      	b.n	800b114 <_strtod_l+0x604>
 800b1b2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b1b4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b1b6:	2d00      	cmp	r5, #0
 800b1b8:	bfab      	itete	ge
 800b1ba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b1bc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b1be:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b1c0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b1c2:	bfac      	ite	ge
 800b1c4:	18ef      	addge	r7, r5, r3
 800b1c6:	1b5e      	sublt	r6, r3, r5
 800b1c8:	9b08      	ldr	r3, [sp, #32]
 800b1ca:	1aed      	subs	r5, r5, r3
 800b1cc:	4415      	add	r5, r2
 800b1ce:	4b66      	ldr	r3, [pc, #408]	@ (800b368 <_strtod_l+0x858>)
 800b1d0:	3d01      	subs	r5, #1
 800b1d2:	429d      	cmp	r5, r3
 800b1d4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b1d8:	da50      	bge.n	800b27c <_strtod_l+0x76c>
 800b1da:	1b5b      	subs	r3, r3, r5
 800b1dc:	2b1f      	cmp	r3, #31
 800b1de:	eba2 0203 	sub.w	r2, r2, r3
 800b1e2:	f04f 0101 	mov.w	r1, #1
 800b1e6:	dc3d      	bgt.n	800b264 <_strtod_l+0x754>
 800b1e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b1ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1f2:	18bd      	adds	r5, r7, r2
 800b1f4:	9b08      	ldr	r3, [sp, #32]
 800b1f6:	42af      	cmp	r7, r5
 800b1f8:	4416      	add	r6, r2
 800b1fa:	441e      	add	r6, r3
 800b1fc:	463b      	mov	r3, r7
 800b1fe:	bfa8      	it	ge
 800b200:	462b      	movge	r3, r5
 800b202:	42b3      	cmp	r3, r6
 800b204:	bfa8      	it	ge
 800b206:	4633      	movge	r3, r6
 800b208:	2b00      	cmp	r3, #0
 800b20a:	bfc2      	ittt	gt
 800b20c:	1aed      	subgt	r5, r5, r3
 800b20e:	1af6      	subgt	r6, r6, r3
 800b210:	1aff      	subgt	r7, r7, r3
 800b212:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b214:	2b00      	cmp	r3, #0
 800b216:	dd16      	ble.n	800b246 <_strtod_l+0x736>
 800b218:	4641      	mov	r1, r8
 800b21a:	9805      	ldr	r0, [sp, #20]
 800b21c:	461a      	mov	r2, r3
 800b21e:	f7ff f9a3 	bl	800a568 <__pow5mult>
 800b222:	4680      	mov	r8, r0
 800b224:	2800      	cmp	r0, #0
 800b226:	d0ba      	beq.n	800b19e <_strtod_l+0x68e>
 800b228:	4601      	mov	r1, r0
 800b22a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b22c:	9805      	ldr	r0, [sp, #20]
 800b22e:	f7ff f8f1 	bl	800a414 <__multiply>
 800b232:	900e      	str	r0, [sp, #56]	@ 0x38
 800b234:	2800      	cmp	r0, #0
 800b236:	f43f ae8a 	beq.w	800af4e <_strtod_l+0x43e>
 800b23a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b23c:	9805      	ldr	r0, [sp, #20]
 800b23e:	f7fe ffd5 	bl	800a1ec <_Bfree>
 800b242:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b244:	931a      	str	r3, [sp, #104]	@ 0x68
 800b246:	2d00      	cmp	r5, #0
 800b248:	dc1d      	bgt.n	800b286 <_strtod_l+0x776>
 800b24a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	dd23      	ble.n	800b298 <_strtod_l+0x788>
 800b250:	4649      	mov	r1, r9
 800b252:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b254:	9805      	ldr	r0, [sp, #20]
 800b256:	f7ff f987 	bl	800a568 <__pow5mult>
 800b25a:	4681      	mov	r9, r0
 800b25c:	b9e0      	cbnz	r0, 800b298 <_strtod_l+0x788>
 800b25e:	f04f 0900 	mov.w	r9, #0
 800b262:	e674      	b.n	800af4e <_strtod_l+0x43e>
 800b264:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b268:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b26c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b270:	35e2      	adds	r5, #226	@ 0xe2
 800b272:	fa01 f305 	lsl.w	r3, r1, r5
 800b276:	9310      	str	r3, [sp, #64]	@ 0x40
 800b278:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b27a:	e7ba      	b.n	800b1f2 <_strtod_l+0x6e2>
 800b27c:	2300      	movs	r3, #0
 800b27e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b280:	2301      	movs	r3, #1
 800b282:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b284:	e7b5      	b.n	800b1f2 <_strtod_l+0x6e2>
 800b286:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b288:	9805      	ldr	r0, [sp, #20]
 800b28a:	462a      	mov	r2, r5
 800b28c:	f7ff f9c6 	bl	800a61c <__lshift>
 800b290:	901a      	str	r0, [sp, #104]	@ 0x68
 800b292:	2800      	cmp	r0, #0
 800b294:	d1d9      	bne.n	800b24a <_strtod_l+0x73a>
 800b296:	e65a      	b.n	800af4e <_strtod_l+0x43e>
 800b298:	2e00      	cmp	r6, #0
 800b29a:	dd07      	ble.n	800b2ac <_strtod_l+0x79c>
 800b29c:	4649      	mov	r1, r9
 800b29e:	9805      	ldr	r0, [sp, #20]
 800b2a0:	4632      	mov	r2, r6
 800b2a2:	f7ff f9bb 	bl	800a61c <__lshift>
 800b2a6:	4681      	mov	r9, r0
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	d0d8      	beq.n	800b25e <_strtod_l+0x74e>
 800b2ac:	2f00      	cmp	r7, #0
 800b2ae:	dd08      	ble.n	800b2c2 <_strtod_l+0x7b2>
 800b2b0:	4641      	mov	r1, r8
 800b2b2:	9805      	ldr	r0, [sp, #20]
 800b2b4:	463a      	mov	r2, r7
 800b2b6:	f7ff f9b1 	bl	800a61c <__lshift>
 800b2ba:	4680      	mov	r8, r0
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	f43f ae46 	beq.w	800af4e <_strtod_l+0x43e>
 800b2c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2c4:	9805      	ldr	r0, [sp, #20]
 800b2c6:	464a      	mov	r2, r9
 800b2c8:	f7ff fa30 	bl	800a72c <__mdiff>
 800b2cc:	4604      	mov	r4, r0
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	f43f ae3d 	beq.w	800af4e <_strtod_l+0x43e>
 800b2d4:	68c3      	ldr	r3, [r0, #12]
 800b2d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b2d8:	2300      	movs	r3, #0
 800b2da:	60c3      	str	r3, [r0, #12]
 800b2dc:	4641      	mov	r1, r8
 800b2de:	f7ff fa09 	bl	800a6f4 <__mcmp>
 800b2e2:	2800      	cmp	r0, #0
 800b2e4:	da46      	bge.n	800b374 <_strtod_l+0x864>
 800b2e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2e8:	ea53 030a 	orrs.w	r3, r3, sl
 800b2ec:	d16c      	bne.n	800b3c8 <_strtod_l+0x8b8>
 800b2ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d168      	bne.n	800b3c8 <_strtod_l+0x8b8>
 800b2f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b2fa:	0d1b      	lsrs	r3, r3, #20
 800b2fc:	051b      	lsls	r3, r3, #20
 800b2fe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b302:	d961      	bls.n	800b3c8 <_strtod_l+0x8b8>
 800b304:	6963      	ldr	r3, [r4, #20]
 800b306:	b913      	cbnz	r3, 800b30e <_strtod_l+0x7fe>
 800b308:	6923      	ldr	r3, [r4, #16]
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	dd5c      	ble.n	800b3c8 <_strtod_l+0x8b8>
 800b30e:	4621      	mov	r1, r4
 800b310:	2201      	movs	r2, #1
 800b312:	9805      	ldr	r0, [sp, #20]
 800b314:	f7ff f982 	bl	800a61c <__lshift>
 800b318:	4641      	mov	r1, r8
 800b31a:	4604      	mov	r4, r0
 800b31c:	f7ff f9ea 	bl	800a6f4 <__mcmp>
 800b320:	2800      	cmp	r0, #0
 800b322:	dd51      	ble.n	800b3c8 <_strtod_l+0x8b8>
 800b324:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b328:	9a08      	ldr	r2, [sp, #32]
 800b32a:	0d1b      	lsrs	r3, r3, #20
 800b32c:	051b      	lsls	r3, r3, #20
 800b32e:	2a00      	cmp	r2, #0
 800b330:	d06b      	beq.n	800b40a <_strtod_l+0x8fa>
 800b332:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b336:	d868      	bhi.n	800b40a <_strtod_l+0x8fa>
 800b338:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b33c:	f67f ae9d 	bls.w	800b07a <_strtod_l+0x56a>
 800b340:	4b0a      	ldr	r3, [pc, #40]	@ (800b36c <_strtod_l+0x85c>)
 800b342:	4650      	mov	r0, sl
 800b344:	4659      	mov	r1, fp
 800b346:	2200      	movs	r2, #0
 800b348:	f7f5 f986 	bl	8000658 <__aeabi_dmul>
 800b34c:	4b08      	ldr	r3, [pc, #32]	@ (800b370 <_strtod_l+0x860>)
 800b34e:	400b      	ands	r3, r1
 800b350:	4682      	mov	sl, r0
 800b352:	468b      	mov	fp, r1
 800b354:	2b00      	cmp	r3, #0
 800b356:	f47f ae05 	bne.w	800af64 <_strtod_l+0x454>
 800b35a:	9a05      	ldr	r2, [sp, #20]
 800b35c:	2322      	movs	r3, #34	@ 0x22
 800b35e:	6013      	str	r3, [r2, #0]
 800b360:	e600      	b.n	800af64 <_strtod_l+0x454>
 800b362:	bf00      	nop
 800b364:	0800d320 	.word	0x0800d320
 800b368:	fffffc02 	.word	0xfffffc02
 800b36c:	39500000 	.word	0x39500000
 800b370:	7ff00000 	.word	0x7ff00000
 800b374:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b378:	d165      	bne.n	800b446 <_strtod_l+0x936>
 800b37a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b37c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b380:	b35a      	cbz	r2, 800b3da <_strtod_l+0x8ca>
 800b382:	4a9f      	ldr	r2, [pc, #636]	@ (800b600 <_strtod_l+0xaf0>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d12b      	bne.n	800b3e0 <_strtod_l+0x8d0>
 800b388:	9b08      	ldr	r3, [sp, #32]
 800b38a:	4651      	mov	r1, sl
 800b38c:	b303      	cbz	r3, 800b3d0 <_strtod_l+0x8c0>
 800b38e:	4b9d      	ldr	r3, [pc, #628]	@ (800b604 <_strtod_l+0xaf4>)
 800b390:	465a      	mov	r2, fp
 800b392:	4013      	ands	r3, r2
 800b394:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b398:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b39c:	d81b      	bhi.n	800b3d6 <_strtod_l+0x8c6>
 800b39e:	0d1b      	lsrs	r3, r3, #20
 800b3a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b3a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b3a8:	4299      	cmp	r1, r3
 800b3aa:	d119      	bne.n	800b3e0 <_strtod_l+0x8d0>
 800b3ac:	4b96      	ldr	r3, [pc, #600]	@ (800b608 <_strtod_l+0xaf8>)
 800b3ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d102      	bne.n	800b3ba <_strtod_l+0x8aa>
 800b3b4:	3101      	adds	r1, #1
 800b3b6:	f43f adca 	beq.w	800af4e <_strtod_l+0x43e>
 800b3ba:	4b92      	ldr	r3, [pc, #584]	@ (800b604 <_strtod_l+0xaf4>)
 800b3bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3be:	401a      	ands	r2, r3
 800b3c0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b3c4:	f04f 0a00 	mov.w	sl, #0
 800b3c8:	9b08      	ldr	r3, [sp, #32]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d1b8      	bne.n	800b340 <_strtod_l+0x830>
 800b3ce:	e5c9      	b.n	800af64 <_strtod_l+0x454>
 800b3d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b3d4:	e7e8      	b.n	800b3a8 <_strtod_l+0x898>
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	e7e6      	b.n	800b3a8 <_strtod_l+0x898>
 800b3da:	ea53 030a 	orrs.w	r3, r3, sl
 800b3de:	d0a1      	beq.n	800b324 <_strtod_l+0x814>
 800b3e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b3e2:	b1db      	cbz	r3, 800b41c <_strtod_l+0x90c>
 800b3e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3e6:	4213      	tst	r3, r2
 800b3e8:	d0ee      	beq.n	800b3c8 <_strtod_l+0x8b8>
 800b3ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3ec:	9a08      	ldr	r2, [sp, #32]
 800b3ee:	4650      	mov	r0, sl
 800b3f0:	4659      	mov	r1, fp
 800b3f2:	b1bb      	cbz	r3, 800b424 <_strtod_l+0x914>
 800b3f4:	f7ff fb6c 	bl	800aad0 <sulp>
 800b3f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3fc:	ec53 2b10 	vmov	r2, r3, d0
 800b400:	f7f4 ff74 	bl	80002ec <__adddf3>
 800b404:	4682      	mov	sl, r0
 800b406:	468b      	mov	fp, r1
 800b408:	e7de      	b.n	800b3c8 <_strtod_l+0x8b8>
 800b40a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b40e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b412:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b416:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b41a:	e7d5      	b.n	800b3c8 <_strtod_l+0x8b8>
 800b41c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b41e:	ea13 0f0a 	tst.w	r3, sl
 800b422:	e7e1      	b.n	800b3e8 <_strtod_l+0x8d8>
 800b424:	f7ff fb54 	bl	800aad0 <sulp>
 800b428:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b42c:	ec53 2b10 	vmov	r2, r3, d0
 800b430:	f7f4 ff5a 	bl	80002e8 <__aeabi_dsub>
 800b434:	2200      	movs	r2, #0
 800b436:	2300      	movs	r3, #0
 800b438:	4682      	mov	sl, r0
 800b43a:	468b      	mov	fp, r1
 800b43c:	f7f5 fb74 	bl	8000b28 <__aeabi_dcmpeq>
 800b440:	2800      	cmp	r0, #0
 800b442:	d0c1      	beq.n	800b3c8 <_strtod_l+0x8b8>
 800b444:	e619      	b.n	800b07a <_strtod_l+0x56a>
 800b446:	4641      	mov	r1, r8
 800b448:	4620      	mov	r0, r4
 800b44a:	f7ff facb 	bl	800a9e4 <__ratio>
 800b44e:	ec57 6b10 	vmov	r6, r7, d0
 800b452:	2200      	movs	r2, #0
 800b454:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b458:	4630      	mov	r0, r6
 800b45a:	4639      	mov	r1, r7
 800b45c:	f7f5 fb78 	bl	8000b50 <__aeabi_dcmple>
 800b460:	2800      	cmp	r0, #0
 800b462:	d06f      	beq.n	800b544 <_strtod_l+0xa34>
 800b464:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b466:	2b00      	cmp	r3, #0
 800b468:	d17a      	bne.n	800b560 <_strtod_l+0xa50>
 800b46a:	f1ba 0f00 	cmp.w	sl, #0
 800b46e:	d158      	bne.n	800b522 <_strtod_l+0xa12>
 800b470:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b472:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b476:	2b00      	cmp	r3, #0
 800b478:	d15a      	bne.n	800b530 <_strtod_l+0xa20>
 800b47a:	4b64      	ldr	r3, [pc, #400]	@ (800b60c <_strtod_l+0xafc>)
 800b47c:	2200      	movs	r2, #0
 800b47e:	4630      	mov	r0, r6
 800b480:	4639      	mov	r1, r7
 800b482:	f7f5 fb5b 	bl	8000b3c <__aeabi_dcmplt>
 800b486:	2800      	cmp	r0, #0
 800b488:	d159      	bne.n	800b53e <_strtod_l+0xa2e>
 800b48a:	4630      	mov	r0, r6
 800b48c:	4639      	mov	r1, r7
 800b48e:	4b60      	ldr	r3, [pc, #384]	@ (800b610 <_strtod_l+0xb00>)
 800b490:	2200      	movs	r2, #0
 800b492:	f7f5 f8e1 	bl	8000658 <__aeabi_dmul>
 800b496:	4606      	mov	r6, r0
 800b498:	460f      	mov	r7, r1
 800b49a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b49e:	9606      	str	r6, [sp, #24]
 800b4a0:	9307      	str	r3, [sp, #28]
 800b4a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4a6:	4d57      	ldr	r5, [pc, #348]	@ (800b604 <_strtod_l+0xaf4>)
 800b4a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b4ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4ae:	401d      	ands	r5, r3
 800b4b0:	4b58      	ldr	r3, [pc, #352]	@ (800b614 <_strtod_l+0xb04>)
 800b4b2:	429d      	cmp	r5, r3
 800b4b4:	f040 80b2 	bne.w	800b61c <_strtod_l+0xb0c>
 800b4b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b4be:	ec4b ab10 	vmov	d0, sl, fp
 800b4c2:	f7ff f9c7 	bl	800a854 <__ulp>
 800b4c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4ca:	ec51 0b10 	vmov	r0, r1, d0
 800b4ce:	f7f5 f8c3 	bl	8000658 <__aeabi_dmul>
 800b4d2:	4652      	mov	r2, sl
 800b4d4:	465b      	mov	r3, fp
 800b4d6:	f7f4 ff09 	bl	80002ec <__adddf3>
 800b4da:	460b      	mov	r3, r1
 800b4dc:	4949      	ldr	r1, [pc, #292]	@ (800b604 <_strtod_l+0xaf4>)
 800b4de:	4a4e      	ldr	r2, [pc, #312]	@ (800b618 <_strtod_l+0xb08>)
 800b4e0:	4019      	ands	r1, r3
 800b4e2:	4291      	cmp	r1, r2
 800b4e4:	4682      	mov	sl, r0
 800b4e6:	d942      	bls.n	800b56e <_strtod_l+0xa5e>
 800b4e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b4ea:	4b47      	ldr	r3, [pc, #284]	@ (800b608 <_strtod_l+0xaf8>)
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d103      	bne.n	800b4f8 <_strtod_l+0x9e8>
 800b4f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	f43f ad2b 	beq.w	800af4e <_strtod_l+0x43e>
 800b4f8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b608 <_strtod_l+0xaf8>
 800b4fc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b500:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b502:	9805      	ldr	r0, [sp, #20]
 800b504:	f7fe fe72 	bl	800a1ec <_Bfree>
 800b508:	9805      	ldr	r0, [sp, #20]
 800b50a:	4649      	mov	r1, r9
 800b50c:	f7fe fe6e 	bl	800a1ec <_Bfree>
 800b510:	9805      	ldr	r0, [sp, #20]
 800b512:	4641      	mov	r1, r8
 800b514:	f7fe fe6a 	bl	800a1ec <_Bfree>
 800b518:	9805      	ldr	r0, [sp, #20]
 800b51a:	4621      	mov	r1, r4
 800b51c:	f7fe fe66 	bl	800a1ec <_Bfree>
 800b520:	e618      	b.n	800b154 <_strtod_l+0x644>
 800b522:	f1ba 0f01 	cmp.w	sl, #1
 800b526:	d103      	bne.n	800b530 <_strtod_l+0xa20>
 800b528:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	f43f ada5 	beq.w	800b07a <_strtod_l+0x56a>
 800b530:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b5e0 <_strtod_l+0xad0>
 800b534:	4f35      	ldr	r7, [pc, #212]	@ (800b60c <_strtod_l+0xafc>)
 800b536:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b53a:	2600      	movs	r6, #0
 800b53c:	e7b1      	b.n	800b4a2 <_strtod_l+0x992>
 800b53e:	4f34      	ldr	r7, [pc, #208]	@ (800b610 <_strtod_l+0xb00>)
 800b540:	2600      	movs	r6, #0
 800b542:	e7aa      	b.n	800b49a <_strtod_l+0x98a>
 800b544:	4b32      	ldr	r3, [pc, #200]	@ (800b610 <_strtod_l+0xb00>)
 800b546:	4630      	mov	r0, r6
 800b548:	4639      	mov	r1, r7
 800b54a:	2200      	movs	r2, #0
 800b54c:	f7f5 f884 	bl	8000658 <__aeabi_dmul>
 800b550:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b552:	4606      	mov	r6, r0
 800b554:	460f      	mov	r7, r1
 800b556:	2b00      	cmp	r3, #0
 800b558:	d09f      	beq.n	800b49a <_strtod_l+0x98a>
 800b55a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b55e:	e7a0      	b.n	800b4a2 <_strtod_l+0x992>
 800b560:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b5e8 <_strtod_l+0xad8>
 800b564:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b568:	ec57 6b17 	vmov	r6, r7, d7
 800b56c:	e799      	b.n	800b4a2 <_strtod_l+0x992>
 800b56e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b572:	9b08      	ldr	r3, [sp, #32]
 800b574:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1c1      	bne.n	800b500 <_strtod_l+0x9f0>
 800b57c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b580:	0d1b      	lsrs	r3, r3, #20
 800b582:	051b      	lsls	r3, r3, #20
 800b584:	429d      	cmp	r5, r3
 800b586:	d1bb      	bne.n	800b500 <_strtod_l+0x9f0>
 800b588:	4630      	mov	r0, r6
 800b58a:	4639      	mov	r1, r7
 800b58c:	f7f5 fbc4 	bl	8000d18 <__aeabi_d2lz>
 800b590:	f7f5 f834 	bl	80005fc <__aeabi_l2d>
 800b594:	4602      	mov	r2, r0
 800b596:	460b      	mov	r3, r1
 800b598:	4630      	mov	r0, r6
 800b59a:	4639      	mov	r1, r7
 800b59c:	f7f4 fea4 	bl	80002e8 <__aeabi_dsub>
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b5a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b5ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5ae:	ea46 060a 	orr.w	r6, r6, sl
 800b5b2:	431e      	orrs	r6, r3
 800b5b4:	d06f      	beq.n	800b696 <_strtod_l+0xb86>
 800b5b6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b5f0 <_strtod_l+0xae0>)
 800b5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5bc:	f7f5 fabe 	bl	8000b3c <__aeabi_dcmplt>
 800b5c0:	2800      	cmp	r0, #0
 800b5c2:	f47f accf 	bne.w	800af64 <_strtod_l+0x454>
 800b5c6:	a30c      	add	r3, pc, #48	@ (adr r3, 800b5f8 <_strtod_l+0xae8>)
 800b5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5d0:	f7f5 fad2 	bl	8000b78 <__aeabi_dcmpgt>
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	d093      	beq.n	800b500 <_strtod_l+0x9f0>
 800b5d8:	e4c4      	b.n	800af64 <_strtod_l+0x454>
 800b5da:	bf00      	nop
 800b5dc:	f3af 8000 	nop.w
 800b5e0:	00000000 	.word	0x00000000
 800b5e4:	bff00000 	.word	0xbff00000
 800b5e8:	00000000 	.word	0x00000000
 800b5ec:	3ff00000 	.word	0x3ff00000
 800b5f0:	94a03595 	.word	0x94a03595
 800b5f4:	3fdfffff 	.word	0x3fdfffff
 800b5f8:	35afe535 	.word	0x35afe535
 800b5fc:	3fe00000 	.word	0x3fe00000
 800b600:	000fffff 	.word	0x000fffff
 800b604:	7ff00000 	.word	0x7ff00000
 800b608:	7fefffff 	.word	0x7fefffff
 800b60c:	3ff00000 	.word	0x3ff00000
 800b610:	3fe00000 	.word	0x3fe00000
 800b614:	7fe00000 	.word	0x7fe00000
 800b618:	7c9fffff 	.word	0x7c9fffff
 800b61c:	9b08      	ldr	r3, [sp, #32]
 800b61e:	b323      	cbz	r3, 800b66a <_strtod_l+0xb5a>
 800b620:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b624:	d821      	bhi.n	800b66a <_strtod_l+0xb5a>
 800b626:	a328      	add	r3, pc, #160	@ (adr r3, 800b6c8 <_strtod_l+0xbb8>)
 800b628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62c:	4630      	mov	r0, r6
 800b62e:	4639      	mov	r1, r7
 800b630:	f7f5 fa8e 	bl	8000b50 <__aeabi_dcmple>
 800b634:	b1a0      	cbz	r0, 800b660 <_strtod_l+0xb50>
 800b636:	4639      	mov	r1, r7
 800b638:	4630      	mov	r0, r6
 800b63a:	f7f5 fae5 	bl	8000c08 <__aeabi_d2uiz>
 800b63e:	2801      	cmp	r0, #1
 800b640:	bf38      	it	cc
 800b642:	2001      	movcc	r0, #1
 800b644:	f7f4 ff8e 	bl	8000564 <__aeabi_ui2d>
 800b648:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b64a:	4606      	mov	r6, r0
 800b64c:	460f      	mov	r7, r1
 800b64e:	b9fb      	cbnz	r3, 800b690 <_strtod_l+0xb80>
 800b650:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b654:	9014      	str	r0, [sp, #80]	@ 0x50
 800b656:	9315      	str	r3, [sp, #84]	@ 0x54
 800b658:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b65c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b660:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b662:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b666:	1b5b      	subs	r3, r3, r5
 800b668:	9311      	str	r3, [sp, #68]	@ 0x44
 800b66a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b66e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b672:	f7ff f8ef 	bl	800a854 <__ulp>
 800b676:	4650      	mov	r0, sl
 800b678:	ec53 2b10 	vmov	r2, r3, d0
 800b67c:	4659      	mov	r1, fp
 800b67e:	f7f4 ffeb 	bl	8000658 <__aeabi_dmul>
 800b682:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b686:	f7f4 fe31 	bl	80002ec <__adddf3>
 800b68a:	4682      	mov	sl, r0
 800b68c:	468b      	mov	fp, r1
 800b68e:	e770      	b.n	800b572 <_strtod_l+0xa62>
 800b690:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b694:	e7e0      	b.n	800b658 <_strtod_l+0xb48>
 800b696:	a30e      	add	r3, pc, #56	@ (adr r3, 800b6d0 <_strtod_l+0xbc0>)
 800b698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69c:	f7f5 fa4e 	bl	8000b3c <__aeabi_dcmplt>
 800b6a0:	e798      	b.n	800b5d4 <_strtod_l+0xac4>
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b6a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6aa:	6013      	str	r3, [r2, #0]
 800b6ac:	f7ff ba6d 	b.w	800ab8a <_strtod_l+0x7a>
 800b6b0:	2a65      	cmp	r2, #101	@ 0x65
 800b6b2:	f43f ab66 	beq.w	800ad82 <_strtod_l+0x272>
 800b6b6:	2a45      	cmp	r2, #69	@ 0x45
 800b6b8:	f43f ab63 	beq.w	800ad82 <_strtod_l+0x272>
 800b6bc:	2301      	movs	r3, #1
 800b6be:	f7ff bb9e 	b.w	800adfe <_strtod_l+0x2ee>
 800b6c2:	bf00      	nop
 800b6c4:	f3af 8000 	nop.w
 800b6c8:	ffc00000 	.word	0xffc00000
 800b6cc:	41dfffff 	.word	0x41dfffff
 800b6d0:	94a03595 	.word	0x94a03595
 800b6d4:	3fcfffff 	.word	0x3fcfffff

0800b6d8 <_strtod_r>:
 800b6d8:	4b01      	ldr	r3, [pc, #4]	@ (800b6e0 <_strtod_r+0x8>)
 800b6da:	f7ff ba19 	b.w	800ab10 <_strtod_l>
 800b6de:	bf00      	nop
 800b6e0:	20000068 	.word	0x20000068

0800b6e4 <_strtol_l.constprop.0>:
 800b6e4:	2b24      	cmp	r3, #36	@ 0x24
 800b6e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6ea:	4686      	mov	lr, r0
 800b6ec:	4690      	mov	r8, r2
 800b6ee:	d801      	bhi.n	800b6f4 <_strtol_l.constprop.0+0x10>
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d106      	bne.n	800b702 <_strtol_l.constprop.0+0x1e>
 800b6f4:	f7fd fe6e 	bl	80093d4 <__errno>
 800b6f8:	2316      	movs	r3, #22
 800b6fa:	6003      	str	r3, [r0, #0]
 800b6fc:	2000      	movs	r0, #0
 800b6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b702:	4834      	ldr	r0, [pc, #208]	@ (800b7d4 <_strtol_l.constprop.0+0xf0>)
 800b704:	460d      	mov	r5, r1
 800b706:	462a      	mov	r2, r5
 800b708:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b70c:	5d06      	ldrb	r6, [r0, r4]
 800b70e:	f016 0608 	ands.w	r6, r6, #8
 800b712:	d1f8      	bne.n	800b706 <_strtol_l.constprop.0+0x22>
 800b714:	2c2d      	cmp	r4, #45	@ 0x2d
 800b716:	d12d      	bne.n	800b774 <_strtol_l.constprop.0+0x90>
 800b718:	782c      	ldrb	r4, [r5, #0]
 800b71a:	2601      	movs	r6, #1
 800b71c:	1c95      	adds	r5, r2, #2
 800b71e:	f033 0210 	bics.w	r2, r3, #16
 800b722:	d109      	bne.n	800b738 <_strtol_l.constprop.0+0x54>
 800b724:	2c30      	cmp	r4, #48	@ 0x30
 800b726:	d12a      	bne.n	800b77e <_strtol_l.constprop.0+0x9a>
 800b728:	782a      	ldrb	r2, [r5, #0]
 800b72a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b72e:	2a58      	cmp	r2, #88	@ 0x58
 800b730:	d125      	bne.n	800b77e <_strtol_l.constprop.0+0x9a>
 800b732:	786c      	ldrb	r4, [r5, #1]
 800b734:	2310      	movs	r3, #16
 800b736:	3502      	adds	r5, #2
 800b738:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b73c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800b740:	2200      	movs	r2, #0
 800b742:	fbbc f9f3 	udiv	r9, ip, r3
 800b746:	4610      	mov	r0, r2
 800b748:	fb03 ca19 	mls	sl, r3, r9, ip
 800b74c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b750:	2f09      	cmp	r7, #9
 800b752:	d81b      	bhi.n	800b78c <_strtol_l.constprop.0+0xa8>
 800b754:	463c      	mov	r4, r7
 800b756:	42a3      	cmp	r3, r4
 800b758:	dd27      	ble.n	800b7aa <_strtol_l.constprop.0+0xc6>
 800b75a:	1c57      	adds	r7, r2, #1
 800b75c:	d007      	beq.n	800b76e <_strtol_l.constprop.0+0x8a>
 800b75e:	4581      	cmp	r9, r0
 800b760:	d320      	bcc.n	800b7a4 <_strtol_l.constprop.0+0xc0>
 800b762:	d101      	bne.n	800b768 <_strtol_l.constprop.0+0x84>
 800b764:	45a2      	cmp	sl, r4
 800b766:	db1d      	blt.n	800b7a4 <_strtol_l.constprop.0+0xc0>
 800b768:	fb00 4003 	mla	r0, r0, r3, r4
 800b76c:	2201      	movs	r2, #1
 800b76e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b772:	e7eb      	b.n	800b74c <_strtol_l.constprop.0+0x68>
 800b774:	2c2b      	cmp	r4, #43	@ 0x2b
 800b776:	bf04      	itt	eq
 800b778:	782c      	ldrbeq	r4, [r5, #0]
 800b77a:	1c95      	addeq	r5, r2, #2
 800b77c:	e7cf      	b.n	800b71e <_strtol_l.constprop.0+0x3a>
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d1da      	bne.n	800b738 <_strtol_l.constprop.0+0x54>
 800b782:	2c30      	cmp	r4, #48	@ 0x30
 800b784:	bf0c      	ite	eq
 800b786:	2308      	moveq	r3, #8
 800b788:	230a      	movne	r3, #10
 800b78a:	e7d5      	b.n	800b738 <_strtol_l.constprop.0+0x54>
 800b78c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b790:	2f19      	cmp	r7, #25
 800b792:	d801      	bhi.n	800b798 <_strtol_l.constprop.0+0xb4>
 800b794:	3c37      	subs	r4, #55	@ 0x37
 800b796:	e7de      	b.n	800b756 <_strtol_l.constprop.0+0x72>
 800b798:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b79c:	2f19      	cmp	r7, #25
 800b79e:	d804      	bhi.n	800b7aa <_strtol_l.constprop.0+0xc6>
 800b7a0:	3c57      	subs	r4, #87	@ 0x57
 800b7a2:	e7d8      	b.n	800b756 <_strtol_l.constprop.0+0x72>
 800b7a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b7a8:	e7e1      	b.n	800b76e <_strtol_l.constprop.0+0x8a>
 800b7aa:	1c53      	adds	r3, r2, #1
 800b7ac:	d108      	bne.n	800b7c0 <_strtol_l.constprop.0+0xdc>
 800b7ae:	2322      	movs	r3, #34	@ 0x22
 800b7b0:	f8ce 3000 	str.w	r3, [lr]
 800b7b4:	4660      	mov	r0, ip
 800b7b6:	f1b8 0f00 	cmp.w	r8, #0
 800b7ba:	d0a0      	beq.n	800b6fe <_strtol_l.constprop.0+0x1a>
 800b7bc:	1e69      	subs	r1, r5, #1
 800b7be:	e006      	b.n	800b7ce <_strtol_l.constprop.0+0xea>
 800b7c0:	b106      	cbz	r6, 800b7c4 <_strtol_l.constprop.0+0xe0>
 800b7c2:	4240      	negs	r0, r0
 800b7c4:	f1b8 0f00 	cmp.w	r8, #0
 800b7c8:	d099      	beq.n	800b6fe <_strtol_l.constprop.0+0x1a>
 800b7ca:	2a00      	cmp	r2, #0
 800b7cc:	d1f6      	bne.n	800b7bc <_strtol_l.constprop.0+0xd8>
 800b7ce:	f8c8 1000 	str.w	r1, [r8]
 800b7d2:	e794      	b.n	800b6fe <_strtol_l.constprop.0+0x1a>
 800b7d4:	0800d349 	.word	0x0800d349

0800b7d8 <_strtol_r>:
 800b7d8:	f7ff bf84 	b.w	800b6e4 <_strtol_l.constprop.0>

0800b7dc <__ssputs_r>:
 800b7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7e0:	688e      	ldr	r6, [r1, #8]
 800b7e2:	461f      	mov	r7, r3
 800b7e4:	42be      	cmp	r6, r7
 800b7e6:	680b      	ldr	r3, [r1, #0]
 800b7e8:	4682      	mov	sl, r0
 800b7ea:	460c      	mov	r4, r1
 800b7ec:	4690      	mov	r8, r2
 800b7ee:	d82d      	bhi.n	800b84c <__ssputs_r+0x70>
 800b7f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b7f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b7f8:	d026      	beq.n	800b848 <__ssputs_r+0x6c>
 800b7fa:	6965      	ldr	r5, [r4, #20]
 800b7fc:	6909      	ldr	r1, [r1, #16]
 800b7fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b802:	eba3 0901 	sub.w	r9, r3, r1
 800b806:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b80a:	1c7b      	adds	r3, r7, #1
 800b80c:	444b      	add	r3, r9
 800b80e:	106d      	asrs	r5, r5, #1
 800b810:	429d      	cmp	r5, r3
 800b812:	bf38      	it	cc
 800b814:	461d      	movcc	r5, r3
 800b816:	0553      	lsls	r3, r2, #21
 800b818:	d527      	bpl.n	800b86a <__ssputs_r+0x8e>
 800b81a:	4629      	mov	r1, r5
 800b81c:	f7fc fc48 	bl	80080b0 <_malloc_r>
 800b820:	4606      	mov	r6, r0
 800b822:	b360      	cbz	r0, 800b87e <__ssputs_r+0xa2>
 800b824:	6921      	ldr	r1, [r4, #16]
 800b826:	464a      	mov	r2, r9
 800b828:	f000 fbce 	bl	800bfc8 <memcpy>
 800b82c:	89a3      	ldrh	r3, [r4, #12]
 800b82e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b832:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b836:	81a3      	strh	r3, [r4, #12]
 800b838:	6126      	str	r6, [r4, #16]
 800b83a:	6165      	str	r5, [r4, #20]
 800b83c:	444e      	add	r6, r9
 800b83e:	eba5 0509 	sub.w	r5, r5, r9
 800b842:	6026      	str	r6, [r4, #0]
 800b844:	60a5      	str	r5, [r4, #8]
 800b846:	463e      	mov	r6, r7
 800b848:	42be      	cmp	r6, r7
 800b84a:	d900      	bls.n	800b84e <__ssputs_r+0x72>
 800b84c:	463e      	mov	r6, r7
 800b84e:	6820      	ldr	r0, [r4, #0]
 800b850:	4632      	mov	r2, r6
 800b852:	4641      	mov	r1, r8
 800b854:	f000 fb6a 	bl	800bf2c <memmove>
 800b858:	68a3      	ldr	r3, [r4, #8]
 800b85a:	1b9b      	subs	r3, r3, r6
 800b85c:	60a3      	str	r3, [r4, #8]
 800b85e:	6823      	ldr	r3, [r4, #0]
 800b860:	4433      	add	r3, r6
 800b862:	6023      	str	r3, [r4, #0]
 800b864:	2000      	movs	r0, #0
 800b866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b86a:	462a      	mov	r2, r5
 800b86c:	f000 ff41 	bl	800c6f2 <_realloc_r>
 800b870:	4606      	mov	r6, r0
 800b872:	2800      	cmp	r0, #0
 800b874:	d1e0      	bne.n	800b838 <__ssputs_r+0x5c>
 800b876:	6921      	ldr	r1, [r4, #16]
 800b878:	4650      	mov	r0, sl
 800b87a:	f7fe fc2d 	bl	800a0d8 <_free_r>
 800b87e:	230c      	movs	r3, #12
 800b880:	f8ca 3000 	str.w	r3, [sl]
 800b884:	89a3      	ldrh	r3, [r4, #12]
 800b886:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b88a:	81a3      	strh	r3, [r4, #12]
 800b88c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b890:	e7e9      	b.n	800b866 <__ssputs_r+0x8a>
	...

0800b894 <_svfiprintf_r>:
 800b894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b898:	4698      	mov	r8, r3
 800b89a:	898b      	ldrh	r3, [r1, #12]
 800b89c:	061b      	lsls	r3, r3, #24
 800b89e:	b09d      	sub	sp, #116	@ 0x74
 800b8a0:	4607      	mov	r7, r0
 800b8a2:	460d      	mov	r5, r1
 800b8a4:	4614      	mov	r4, r2
 800b8a6:	d510      	bpl.n	800b8ca <_svfiprintf_r+0x36>
 800b8a8:	690b      	ldr	r3, [r1, #16]
 800b8aa:	b973      	cbnz	r3, 800b8ca <_svfiprintf_r+0x36>
 800b8ac:	2140      	movs	r1, #64	@ 0x40
 800b8ae:	f7fc fbff 	bl	80080b0 <_malloc_r>
 800b8b2:	6028      	str	r0, [r5, #0]
 800b8b4:	6128      	str	r0, [r5, #16]
 800b8b6:	b930      	cbnz	r0, 800b8c6 <_svfiprintf_r+0x32>
 800b8b8:	230c      	movs	r3, #12
 800b8ba:	603b      	str	r3, [r7, #0]
 800b8bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b8c0:	b01d      	add	sp, #116	@ 0x74
 800b8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c6:	2340      	movs	r3, #64	@ 0x40
 800b8c8:	616b      	str	r3, [r5, #20]
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8ce:	2320      	movs	r3, #32
 800b8d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b8d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8d8:	2330      	movs	r3, #48	@ 0x30
 800b8da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ba78 <_svfiprintf_r+0x1e4>
 800b8de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b8e2:	f04f 0901 	mov.w	r9, #1
 800b8e6:	4623      	mov	r3, r4
 800b8e8:	469a      	mov	sl, r3
 800b8ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8ee:	b10a      	cbz	r2, 800b8f4 <_svfiprintf_r+0x60>
 800b8f0:	2a25      	cmp	r2, #37	@ 0x25
 800b8f2:	d1f9      	bne.n	800b8e8 <_svfiprintf_r+0x54>
 800b8f4:	ebba 0b04 	subs.w	fp, sl, r4
 800b8f8:	d00b      	beq.n	800b912 <_svfiprintf_r+0x7e>
 800b8fa:	465b      	mov	r3, fp
 800b8fc:	4622      	mov	r2, r4
 800b8fe:	4629      	mov	r1, r5
 800b900:	4638      	mov	r0, r7
 800b902:	f7ff ff6b 	bl	800b7dc <__ssputs_r>
 800b906:	3001      	adds	r0, #1
 800b908:	f000 80a7 	beq.w	800ba5a <_svfiprintf_r+0x1c6>
 800b90c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b90e:	445a      	add	r2, fp
 800b910:	9209      	str	r2, [sp, #36]	@ 0x24
 800b912:	f89a 3000 	ldrb.w	r3, [sl]
 800b916:	2b00      	cmp	r3, #0
 800b918:	f000 809f 	beq.w	800ba5a <_svfiprintf_r+0x1c6>
 800b91c:	2300      	movs	r3, #0
 800b91e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b922:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b926:	f10a 0a01 	add.w	sl, sl, #1
 800b92a:	9304      	str	r3, [sp, #16]
 800b92c:	9307      	str	r3, [sp, #28]
 800b92e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b932:	931a      	str	r3, [sp, #104]	@ 0x68
 800b934:	4654      	mov	r4, sl
 800b936:	2205      	movs	r2, #5
 800b938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b93c:	484e      	ldr	r0, [pc, #312]	@ (800ba78 <_svfiprintf_r+0x1e4>)
 800b93e:	f7f4 fc77 	bl	8000230 <memchr>
 800b942:	9a04      	ldr	r2, [sp, #16]
 800b944:	b9d8      	cbnz	r0, 800b97e <_svfiprintf_r+0xea>
 800b946:	06d0      	lsls	r0, r2, #27
 800b948:	bf44      	itt	mi
 800b94a:	2320      	movmi	r3, #32
 800b94c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b950:	0711      	lsls	r1, r2, #28
 800b952:	bf44      	itt	mi
 800b954:	232b      	movmi	r3, #43	@ 0x2b
 800b956:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b95a:	f89a 3000 	ldrb.w	r3, [sl]
 800b95e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b960:	d015      	beq.n	800b98e <_svfiprintf_r+0xfa>
 800b962:	9a07      	ldr	r2, [sp, #28]
 800b964:	4654      	mov	r4, sl
 800b966:	2000      	movs	r0, #0
 800b968:	f04f 0c0a 	mov.w	ip, #10
 800b96c:	4621      	mov	r1, r4
 800b96e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b972:	3b30      	subs	r3, #48	@ 0x30
 800b974:	2b09      	cmp	r3, #9
 800b976:	d94b      	bls.n	800ba10 <_svfiprintf_r+0x17c>
 800b978:	b1b0      	cbz	r0, 800b9a8 <_svfiprintf_r+0x114>
 800b97a:	9207      	str	r2, [sp, #28]
 800b97c:	e014      	b.n	800b9a8 <_svfiprintf_r+0x114>
 800b97e:	eba0 0308 	sub.w	r3, r0, r8
 800b982:	fa09 f303 	lsl.w	r3, r9, r3
 800b986:	4313      	orrs	r3, r2
 800b988:	9304      	str	r3, [sp, #16]
 800b98a:	46a2      	mov	sl, r4
 800b98c:	e7d2      	b.n	800b934 <_svfiprintf_r+0xa0>
 800b98e:	9b03      	ldr	r3, [sp, #12]
 800b990:	1d19      	adds	r1, r3, #4
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	9103      	str	r1, [sp, #12]
 800b996:	2b00      	cmp	r3, #0
 800b998:	bfbb      	ittet	lt
 800b99a:	425b      	neglt	r3, r3
 800b99c:	f042 0202 	orrlt.w	r2, r2, #2
 800b9a0:	9307      	strge	r3, [sp, #28]
 800b9a2:	9307      	strlt	r3, [sp, #28]
 800b9a4:	bfb8      	it	lt
 800b9a6:	9204      	strlt	r2, [sp, #16]
 800b9a8:	7823      	ldrb	r3, [r4, #0]
 800b9aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800b9ac:	d10a      	bne.n	800b9c4 <_svfiprintf_r+0x130>
 800b9ae:	7863      	ldrb	r3, [r4, #1]
 800b9b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9b2:	d132      	bne.n	800ba1a <_svfiprintf_r+0x186>
 800b9b4:	9b03      	ldr	r3, [sp, #12]
 800b9b6:	1d1a      	adds	r2, r3, #4
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	9203      	str	r2, [sp, #12]
 800b9bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b9c0:	3402      	adds	r4, #2
 800b9c2:	9305      	str	r3, [sp, #20]
 800b9c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ba88 <_svfiprintf_r+0x1f4>
 800b9c8:	7821      	ldrb	r1, [r4, #0]
 800b9ca:	2203      	movs	r2, #3
 800b9cc:	4650      	mov	r0, sl
 800b9ce:	f7f4 fc2f 	bl	8000230 <memchr>
 800b9d2:	b138      	cbz	r0, 800b9e4 <_svfiprintf_r+0x150>
 800b9d4:	9b04      	ldr	r3, [sp, #16]
 800b9d6:	eba0 000a 	sub.w	r0, r0, sl
 800b9da:	2240      	movs	r2, #64	@ 0x40
 800b9dc:	4082      	lsls	r2, r0
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	3401      	adds	r4, #1
 800b9e2:	9304      	str	r3, [sp, #16]
 800b9e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9e8:	4824      	ldr	r0, [pc, #144]	@ (800ba7c <_svfiprintf_r+0x1e8>)
 800b9ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b9ee:	2206      	movs	r2, #6
 800b9f0:	f7f4 fc1e 	bl	8000230 <memchr>
 800b9f4:	2800      	cmp	r0, #0
 800b9f6:	d036      	beq.n	800ba66 <_svfiprintf_r+0x1d2>
 800b9f8:	4b21      	ldr	r3, [pc, #132]	@ (800ba80 <_svfiprintf_r+0x1ec>)
 800b9fa:	bb1b      	cbnz	r3, 800ba44 <_svfiprintf_r+0x1b0>
 800b9fc:	9b03      	ldr	r3, [sp, #12]
 800b9fe:	3307      	adds	r3, #7
 800ba00:	f023 0307 	bic.w	r3, r3, #7
 800ba04:	3308      	adds	r3, #8
 800ba06:	9303      	str	r3, [sp, #12]
 800ba08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba0a:	4433      	add	r3, r6
 800ba0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba0e:	e76a      	b.n	800b8e6 <_svfiprintf_r+0x52>
 800ba10:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba14:	460c      	mov	r4, r1
 800ba16:	2001      	movs	r0, #1
 800ba18:	e7a8      	b.n	800b96c <_svfiprintf_r+0xd8>
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	3401      	adds	r4, #1
 800ba1e:	9305      	str	r3, [sp, #20]
 800ba20:	4619      	mov	r1, r3
 800ba22:	f04f 0c0a 	mov.w	ip, #10
 800ba26:	4620      	mov	r0, r4
 800ba28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba2c:	3a30      	subs	r2, #48	@ 0x30
 800ba2e:	2a09      	cmp	r2, #9
 800ba30:	d903      	bls.n	800ba3a <_svfiprintf_r+0x1a6>
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d0c6      	beq.n	800b9c4 <_svfiprintf_r+0x130>
 800ba36:	9105      	str	r1, [sp, #20]
 800ba38:	e7c4      	b.n	800b9c4 <_svfiprintf_r+0x130>
 800ba3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba3e:	4604      	mov	r4, r0
 800ba40:	2301      	movs	r3, #1
 800ba42:	e7f0      	b.n	800ba26 <_svfiprintf_r+0x192>
 800ba44:	ab03      	add	r3, sp, #12
 800ba46:	9300      	str	r3, [sp, #0]
 800ba48:	462a      	mov	r2, r5
 800ba4a:	4b0e      	ldr	r3, [pc, #56]	@ (800ba84 <_svfiprintf_r+0x1f0>)
 800ba4c:	a904      	add	r1, sp, #16
 800ba4e:	4638      	mov	r0, r7
 800ba50:	f7fc fc5a 	bl	8008308 <_printf_float>
 800ba54:	1c42      	adds	r2, r0, #1
 800ba56:	4606      	mov	r6, r0
 800ba58:	d1d6      	bne.n	800ba08 <_svfiprintf_r+0x174>
 800ba5a:	89ab      	ldrh	r3, [r5, #12]
 800ba5c:	065b      	lsls	r3, r3, #25
 800ba5e:	f53f af2d 	bmi.w	800b8bc <_svfiprintf_r+0x28>
 800ba62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ba64:	e72c      	b.n	800b8c0 <_svfiprintf_r+0x2c>
 800ba66:	ab03      	add	r3, sp, #12
 800ba68:	9300      	str	r3, [sp, #0]
 800ba6a:	462a      	mov	r2, r5
 800ba6c:	4b05      	ldr	r3, [pc, #20]	@ (800ba84 <_svfiprintf_r+0x1f0>)
 800ba6e:	a904      	add	r1, sp, #16
 800ba70:	4638      	mov	r0, r7
 800ba72:	f7fc fee1 	bl	8008838 <_printf_i>
 800ba76:	e7ed      	b.n	800ba54 <_svfiprintf_r+0x1c0>
 800ba78:	0800d449 	.word	0x0800d449
 800ba7c:	0800d453 	.word	0x0800d453
 800ba80:	08008309 	.word	0x08008309
 800ba84:	0800b7dd 	.word	0x0800b7dd
 800ba88:	0800d44f 	.word	0x0800d44f

0800ba8c <__sfputc_r>:
 800ba8c:	6893      	ldr	r3, [r2, #8]
 800ba8e:	3b01      	subs	r3, #1
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	b410      	push	{r4}
 800ba94:	6093      	str	r3, [r2, #8]
 800ba96:	da08      	bge.n	800baaa <__sfputc_r+0x1e>
 800ba98:	6994      	ldr	r4, [r2, #24]
 800ba9a:	42a3      	cmp	r3, r4
 800ba9c:	db01      	blt.n	800baa2 <__sfputc_r+0x16>
 800ba9e:	290a      	cmp	r1, #10
 800baa0:	d103      	bne.n	800baaa <__sfputc_r+0x1e>
 800baa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baa6:	f7fd bb90 	b.w	80091ca <__swbuf_r>
 800baaa:	6813      	ldr	r3, [r2, #0]
 800baac:	1c58      	adds	r0, r3, #1
 800baae:	6010      	str	r0, [r2, #0]
 800bab0:	7019      	strb	r1, [r3, #0]
 800bab2:	4608      	mov	r0, r1
 800bab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bab8:	4770      	bx	lr

0800baba <__sfputs_r>:
 800baba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800babc:	4606      	mov	r6, r0
 800babe:	460f      	mov	r7, r1
 800bac0:	4614      	mov	r4, r2
 800bac2:	18d5      	adds	r5, r2, r3
 800bac4:	42ac      	cmp	r4, r5
 800bac6:	d101      	bne.n	800bacc <__sfputs_r+0x12>
 800bac8:	2000      	movs	r0, #0
 800baca:	e007      	b.n	800badc <__sfputs_r+0x22>
 800bacc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bad0:	463a      	mov	r2, r7
 800bad2:	4630      	mov	r0, r6
 800bad4:	f7ff ffda 	bl	800ba8c <__sfputc_r>
 800bad8:	1c43      	adds	r3, r0, #1
 800bada:	d1f3      	bne.n	800bac4 <__sfputs_r+0xa>
 800badc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bae0 <_vfiprintf_r>:
 800bae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae4:	460d      	mov	r5, r1
 800bae6:	b09d      	sub	sp, #116	@ 0x74
 800bae8:	4614      	mov	r4, r2
 800baea:	4698      	mov	r8, r3
 800baec:	4606      	mov	r6, r0
 800baee:	b118      	cbz	r0, 800baf8 <_vfiprintf_r+0x18>
 800baf0:	6a03      	ldr	r3, [r0, #32]
 800baf2:	b90b      	cbnz	r3, 800baf8 <_vfiprintf_r+0x18>
 800baf4:	f7fd fa60 	bl	8008fb8 <__sinit>
 800baf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bafa:	07d9      	lsls	r1, r3, #31
 800bafc:	d405      	bmi.n	800bb0a <_vfiprintf_r+0x2a>
 800bafe:	89ab      	ldrh	r3, [r5, #12]
 800bb00:	059a      	lsls	r2, r3, #22
 800bb02:	d402      	bmi.n	800bb0a <_vfiprintf_r+0x2a>
 800bb04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb06:	f7fd fc90 	bl	800942a <__retarget_lock_acquire_recursive>
 800bb0a:	89ab      	ldrh	r3, [r5, #12]
 800bb0c:	071b      	lsls	r3, r3, #28
 800bb0e:	d501      	bpl.n	800bb14 <_vfiprintf_r+0x34>
 800bb10:	692b      	ldr	r3, [r5, #16]
 800bb12:	b99b      	cbnz	r3, 800bb3c <_vfiprintf_r+0x5c>
 800bb14:	4629      	mov	r1, r5
 800bb16:	4630      	mov	r0, r6
 800bb18:	f7fd fb96 	bl	8009248 <__swsetup_r>
 800bb1c:	b170      	cbz	r0, 800bb3c <_vfiprintf_r+0x5c>
 800bb1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb20:	07dc      	lsls	r4, r3, #31
 800bb22:	d504      	bpl.n	800bb2e <_vfiprintf_r+0x4e>
 800bb24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb28:	b01d      	add	sp, #116	@ 0x74
 800bb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb2e:	89ab      	ldrh	r3, [r5, #12]
 800bb30:	0598      	lsls	r0, r3, #22
 800bb32:	d4f7      	bmi.n	800bb24 <_vfiprintf_r+0x44>
 800bb34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb36:	f7fd fc79 	bl	800942c <__retarget_lock_release_recursive>
 800bb3a:	e7f3      	b.n	800bb24 <_vfiprintf_r+0x44>
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb40:	2320      	movs	r3, #32
 800bb42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb46:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb4a:	2330      	movs	r3, #48	@ 0x30
 800bb4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bcfc <_vfiprintf_r+0x21c>
 800bb50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb54:	f04f 0901 	mov.w	r9, #1
 800bb58:	4623      	mov	r3, r4
 800bb5a:	469a      	mov	sl, r3
 800bb5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb60:	b10a      	cbz	r2, 800bb66 <_vfiprintf_r+0x86>
 800bb62:	2a25      	cmp	r2, #37	@ 0x25
 800bb64:	d1f9      	bne.n	800bb5a <_vfiprintf_r+0x7a>
 800bb66:	ebba 0b04 	subs.w	fp, sl, r4
 800bb6a:	d00b      	beq.n	800bb84 <_vfiprintf_r+0xa4>
 800bb6c:	465b      	mov	r3, fp
 800bb6e:	4622      	mov	r2, r4
 800bb70:	4629      	mov	r1, r5
 800bb72:	4630      	mov	r0, r6
 800bb74:	f7ff ffa1 	bl	800baba <__sfputs_r>
 800bb78:	3001      	adds	r0, #1
 800bb7a:	f000 80a7 	beq.w	800bccc <_vfiprintf_r+0x1ec>
 800bb7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb80:	445a      	add	r2, fp
 800bb82:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb84:	f89a 3000 	ldrb.w	r3, [sl]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	f000 809f 	beq.w	800bccc <_vfiprintf_r+0x1ec>
 800bb8e:	2300      	movs	r3, #0
 800bb90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bb94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb98:	f10a 0a01 	add.w	sl, sl, #1
 800bb9c:	9304      	str	r3, [sp, #16]
 800bb9e:	9307      	str	r3, [sp, #28]
 800bba0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bba4:	931a      	str	r3, [sp, #104]	@ 0x68
 800bba6:	4654      	mov	r4, sl
 800bba8:	2205      	movs	r2, #5
 800bbaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbae:	4853      	ldr	r0, [pc, #332]	@ (800bcfc <_vfiprintf_r+0x21c>)
 800bbb0:	f7f4 fb3e 	bl	8000230 <memchr>
 800bbb4:	9a04      	ldr	r2, [sp, #16]
 800bbb6:	b9d8      	cbnz	r0, 800bbf0 <_vfiprintf_r+0x110>
 800bbb8:	06d1      	lsls	r1, r2, #27
 800bbba:	bf44      	itt	mi
 800bbbc:	2320      	movmi	r3, #32
 800bbbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbc2:	0713      	lsls	r3, r2, #28
 800bbc4:	bf44      	itt	mi
 800bbc6:	232b      	movmi	r3, #43	@ 0x2b
 800bbc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbcc:	f89a 3000 	ldrb.w	r3, [sl]
 800bbd0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbd2:	d015      	beq.n	800bc00 <_vfiprintf_r+0x120>
 800bbd4:	9a07      	ldr	r2, [sp, #28]
 800bbd6:	4654      	mov	r4, sl
 800bbd8:	2000      	movs	r0, #0
 800bbda:	f04f 0c0a 	mov.w	ip, #10
 800bbde:	4621      	mov	r1, r4
 800bbe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbe4:	3b30      	subs	r3, #48	@ 0x30
 800bbe6:	2b09      	cmp	r3, #9
 800bbe8:	d94b      	bls.n	800bc82 <_vfiprintf_r+0x1a2>
 800bbea:	b1b0      	cbz	r0, 800bc1a <_vfiprintf_r+0x13a>
 800bbec:	9207      	str	r2, [sp, #28]
 800bbee:	e014      	b.n	800bc1a <_vfiprintf_r+0x13a>
 800bbf0:	eba0 0308 	sub.w	r3, r0, r8
 800bbf4:	fa09 f303 	lsl.w	r3, r9, r3
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	9304      	str	r3, [sp, #16]
 800bbfc:	46a2      	mov	sl, r4
 800bbfe:	e7d2      	b.n	800bba6 <_vfiprintf_r+0xc6>
 800bc00:	9b03      	ldr	r3, [sp, #12]
 800bc02:	1d19      	adds	r1, r3, #4
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	9103      	str	r1, [sp, #12]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	bfbb      	ittet	lt
 800bc0c:	425b      	neglt	r3, r3
 800bc0e:	f042 0202 	orrlt.w	r2, r2, #2
 800bc12:	9307      	strge	r3, [sp, #28]
 800bc14:	9307      	strlt	r3, [sp, #28]
 800bc16:	bfb8      	it	lt
 800bc18:	9204      	strlt	r2, [sp, #16]
 800bc1a:	7823      	ldrb	r3, [r4, #0]
 800bc1c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc1e:	d10a      	bne.n	800bc36 <_vfiprintf_r+0x156>
 800bc20:	7863      	ldrb	r3, [r4, #1]
 800bc22:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc24:	d132      	bne.n	800bc8c <_vfiprintf_r+0x1ac>
 800bc26:	9b03      	ldr	r3, [sp, #12]
 800bc28:	1d1a      	adds	r2, r3, #4
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	9203      	str	r2, [sp, #12]
 800bc2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc32:	3402      	adds	r4, #2
 800bc34:	9305      	str	r3, [sp, #20]
 800bc36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bd0c <_vfiprintf_r+0x22c>
 800bc3a:	7821      	ldrb	r1, [r4, #0]
 800bc3c:	2203      	movs	r2, #3
 800bc3e:	4650      	mov	r0, sl
 800bc40:	f7f4 faf6 	bl	8000230 <memchr>
 800bc44:	b138      	cbz	r0, 800bc56 <_vfiprintf_r+0x176>
 800bc46:	9b04      	ldr	r3, [sp, #16]
 800bc48:	eba0 000a 	sub.w	r0, r0, sl
 800bc4c:	2240      	movs	r2, #64	@ 0x40
 800bc4e:	4082      	lsls	r2, r0
 800bc50:	4313      	orrs	r3, r2
 800bc52:	3401      	adds	r4, #1
 800bc54:	9304      	str	r3, [sp, #16]
 800bc56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc5a:	4829      	ldr	r0, [pc, #164]	@ (800bd00 <_vfiprintf_r+0x220>)
 800bc5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc60:	2206      	movs	r2, #6
 800bc62:	f7f4 fae5 	bl	8000230 <memchr>
 800bc66:	2800      	cmp	r0, #0
 800bc68:	d03f      	beq.n	800bcea <_vfiprintf_r+0x20a>
 800bc6a:	4b26      	ldr	r3, [pc, #152]	@ (800bd04 <_vfiprintf_r+0x224>)
 800bc6c:	bb1b      	cbnz	r3, 800bcb6 <_vfiprintf_r+0x1d6>
 800bc6e:	9b03      	ldr	r3, [sp, #12]
 800bc70:	3307      	adds	r3, #7
 800bc72:	f023 0307 	bic.w	r3, r3, #7
 800bc76:	3308      	adds	r3, #8
 800bc78:	9303      	str	r3, [sp, #12]
 800bc7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc7c:	443b      	add	r3, r7
 800bc7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc80:	e76a      	b.n	800bb58 <_vfiprintf_r+0x78>
 800bc82:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc86:	460c      	mov	r4, r1
 800bc88:	2001      	movs	r0, #1
 800bc8a:	e7a8      	b.n	800bbde <_vfiprintf_r+0xfe>
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	3401      	adds	r4, #1
 800bc90:	9305      	str	r3, [sp, #20]
 800bc92:	4619      	mov	r1, r3
 800bc94:	f04f 0c0a 	mov.w	ip, #10
 800bc98:	4620      	mov	r0, r4
 800bc9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc9e:	3a30      	subs	r2, #48	@ 0x30
 800bca0:	2a09      	cmp	r2, #9
 800bca2:	d903      	bls.n	800bcac <_vfiprintf_r+0x1cc>
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d0c6      	beq.n	800bc36 <_vfiprintf_r+0x156>
 800bca8:	9105      	str	r1, [sp, #20]
 800bcaa:	e7c4      	b.n	800bc36 <_vfiprintf_r+0x156>
 800bcac:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcb0:	4604      	mov	r4, r0
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	e7f0      	b.n	800bc98 <_vfiprintf_r+0x1b8>
 800bcb6:	ab03      	add	r3, sp, #12
 800bcb8:	9300      	str	r3, [sp, #0]
 800bcba:	462a      	mov	r2, r5
 800bcbc:	4b12      	ldr	r3, [pc, #72]	@ (800bd08 <_vfiprintf_r+0x228>)
 800bcbe:	a904      	add	r1, sp, #16
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	f7fc fb21 	bl	8008308 <_printf_float>
 800bcc6:	4607      	mov	r7, r0
 800bcc8:	1c78      	adds	r0, r7, #1
 800bcca:	d1d6      	bne.n	800bc7a <_vfiprintf_r+0x19a>
 800bccc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcce:	07d9      	lsls	r1, r3, #31
 800bcd0:	d405      	bmi.n	800bcde <_vfiprintf_r+0x1fe>
 800bcd2:	89ab      	ldrh	r3, [r5, #12]
 800bcd4:	059a      	lsls	r2, r3, #22
 800bcd6:	d402      	bmi.n	800bcde <_vfiprintf_r+0x1fe>
 800bcd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcda:	f7fd fba7 	bl	800942c <__retarget_lock_release_recursive>
 800bcde:	89ab      	ldrh	r3, [r5, #12]
 800bce0:	065b      	lsls	r3, r3, #25
 800bce2:	f53f af1f 	bmi.w	800bb24 <_vfiprintf_r+0x44>
 800bce6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bce8:	e71e      	b.n	800bb28 <_vfiprintf_r+0x48>
 800bcea:	ab03      	add	r3, sp, #12
 800bcec:	9300      	str	r3, [sp, #0]
 800bcee:	462a      	mov	r2, r5
 800bcf0:	4b05      	ldr	r3, [pc, #20]	@ (800bd08 <_vfiprintf_r+0x228>)
 800bcf2:	a904      	add	r1, sp, #16
 800bcf4:	4630      	mov	r0, r6
 800bcf6:	f7fc fd9f 	bl	8008838 <_printf_i>
 800bcfa:	e7e4      	b.n	800bcc6 <_vfiprintf_r+0x1e6>
 800bcfc:	0800d449 	.word	0x0800d449
 800bd00:	0800d453 	.word	0x0800d453
 800bd04:	08008309 	.word	0x08008309
 800bd08:	0800babb 	.word	0x0800babb
 800bd0c:	0800d44f 	.word	0x0800d44f

0800bd10 <__sflush_r>:
 800bd10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd18:	0716      	lsls	r6, r2, #28
 800bd1a:	4605      	mov	r5, r0
 800bd1c:	460c      	mov	r4, r1
 800bd1e:	d454      	bmi.n	800bdca <__sflush_r+0xba>
 800bd20:	684b      	ldr	r3, [r1, #4]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	dc02      	bgt.n	800bd2c <__sflush_r+0x1c>
 800bd26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	dd48      	ble.n	800bdbe <__sflush_r+0xae>
 800bd2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd2e:	2e00      	cmp	r6, #0
 800bd30:	d045      	beq.n	800bdbe <__sflush_r+0xae>
 800bd32:	2300      	movs	r3, #0
 800bd34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bd38:	682f      	ldr	r7, [r5, #0]
 800bd3a:	6a21      	ldr	r1, [r4, #32]
 800bd3c:	602b      	str	r3, [r5, #0]
 800bd3e:	d030      	beq.n	800bda2 <__sflush_r+0x92>
 800bd40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bd42:	89a3      	ldrh	r3, [r4, #12]
 800bd44:	0759      	lsls	r1, r3, #29
 800bd46:	d505      	bpl.n	800bd54 <__sflush_r+0x44>
 800bd48:	6863      	ldr	r3, [r4, #4]
 800bd4a:	1ad2      	subs	r2, r2, r3
 800bd4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bd4e:	b10b      	cbz	r3, 800bd54 <__sflush_r+0x44>
 800bd50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bd52:	1ad2      	subs	r2, r2, r3
 800bd54:	2300      	movs	r3, #0
 800bd56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd58:	6a21      	ldr	r1, [r4, #32]
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	47b0      	blx	r6
 800bd5e:	1c43      	adds	r3, r0, #1
 800bd60:	89a3      	ldrh	r3, [r4, #12]
 800bd62:	d106      	bne.n	800bd72 <__sflush_r+0x62>
 800bd64:	6829      	ldr	r1, [r5, #0]
 800bd66:	291d      	cmp	r1, #29
 800bd68:	d82b      	bhi.n	800bdc2 <__sflush_r+0xb2>
 800bd6a:	4a2a      	ldr	r2, [pc, #168]	@ (800be14 <__sflush_r+0x104>)
 800bd6c:	410a      	asrs	r2, r1
 800bd6e:	07d6      	lsls	r6, r2, #31
 800bd70:	d427      	bmi.n	800bdc2 <__sflush_r+0xb2>
 800bd72:	2200      	movs	r2, #0
 800bd74:	6062      	str	r2, [r4, #4]
 800bd76:	04d9      	lsls	r1, r3, #19
 800bd78:	6922      	ldr	r2, [r4, #16]
 800bd7a:	6022      	str	r2, [r4, #0]
 800bd7c:	d504      	bpl.n	800bd88 <__sflush_r+0x78>
 800bd7e:	1c42      	adds	r2, r0, #1
 800bd80:	d101      	bne.n	800bd86 <__sflush_r+0x76>
 800bd82:	682b      	ldr	r3, [r5, #0]
 800bd84:	b903      	cbnz	r3, 800bd88 <__sflush_r+0x78>
 800bd86:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd8a:	602f      	str	r7, [r5, #0]
 800bd8c:	b1b9      	cbz	r1, 800bdbe <__sflush_r+0xae>
 800bd8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd92:	4299      	cmp	r1, r3
 800bd94:	d002      	beq.n	800bd9c <__sflush_r+0x8c>
 800bd96:	4628      	mov	r0, r5
 800bd98:	f7fe f99e 	bl	800a0d8 <_free_r>
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	6363      	str	r3, [r4, #52]	@ 0x34
 800bda0:	e00d      	b.n	800bdbe <__sflush_r+0xae>
 800bda2:	2301      	movs	r3, #1
 800bda4:	4628      	mov	r0, r5
 800bda6:	47b0      	blx	r6
 800bda8:	4602      	mov	r2, r0
 800bdaa:	1c50      	adds	r0, r2, #1
 800bdac:	d1c9      	bne.n	800bd42 <__sflush_r+0x32>
 800bdae:	682b      	ldr	r3, [r5, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d0c6      	beq.n	800bd42 <__sflush_r+0x32>
 800bdb4:	2b1d      	cmp	r3, #29
 800bdb6:	d001      	beq.n	800bdbc <__sflush_r+0xac>
 800bdb8:	2b16      	cmp	r3, #22
 800bdba:	d11e      	bne.n	800bdfa <__sflush_r+0xea>
 800bdbc:	602f      	str	r7, [r5, #0]
 800bdbe:	2000      	movs	r0, #0
 800bdc0:	e022      	b.n	800be08 <__sflush_r+0xf8>
 800bdc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdc6:	b21b      	sxth	r3, r3
 800bdc8:	e01b      	b.n	800be02 <__sflush_r+0xf2>
 800bdca:	690f      	ldr	r7, [r1, #16]
 800bdcc:	2f00      	cmp	r7, #0
 800bdce:	d0f6      	beq.n	800bdbe <__sflush_r+0xae>
 800bdd0:	0793      	lsls	r3, r2, #30
 800bdd2:	680e      	ldr	r6, [r1, #0]
 800bdd4:	bf08      	it	eq
 800bdd6:	694b      	ldreq	r3, [r1, #20]
 800bdd8:	600f      	str	r7, [r1, #0]
 800bdda:	bf18      	it	ne
 800bddc:	2300      	movne	r3, #0
 800bdde:	eba6 0807 	sub.w	r8, r6, r7
 800bde2:	608b      	str	r3, [r1, #8]
 800bde4:	f1b8 0f00 	cmp.w	r8, #0
 800bde8:	dde9      	ble.n	800bdbe <__sflush_r+0xae>
 800bdea:	6a21      	ldr	r1, [r4, #32]
 800bdec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bdee:	4643      	mov	r3, r8
 800bdf0:	463a      	mov	r2, r7
 800bdf2:	4628      	mov	r0, r5
 800bdf4:	47b0      	blx	r6
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	dc08      	bgt.n	800be0c <__sflush_r+0xfc>
 800bdfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be02:	81a3      	strh	r3, [r4, #12]
 800be04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be0c:	4407      	add	r7, r0
 800be0e:	eba8 0800 	sub.w	r8, r8, r0
 800be12:	e7e7      	b.n	800bde4 <__sflush_r+0xd4>
 800be14:	dfbffffe 	.word	0xdfbffffe

0800be18 <_fflush_r>:
 800be18:	b538      	push	{r3, r4, r5, lr}
 800be1a:	690b      	ldr	r3, [r1, #16]
 800be1c:	4605      	mov	r5, r0
 800be1e:	460c      	mov	r4, r1
 800be20:	b913      	cbnz	r3, 800be28 <_fflush_r+0x10>
 800be22:	2500      	movs	r5, #0
 800be24:	4628      	mov	r0, r5
 800be26:	bd38      	pop	{r3, r4, r5, pc}
 800be28:	b118      	cbz	r0, 800be32 <_fflush_r+0x1a>
 800be2a:	6a03      	ldr	r3, [r0, #32]
 800be2c:	b90b      	cbnz	r3, 800be32 <_fflush_r+0x1a>
 800be2e:	f7fd f8c3 	bl	8008fb8 <__sinit>
 800be32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d0f3      	beq.n	800be22 <_fflush_r+0xa>
 800be3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800be3c:	07d0      	lsls	r0, r2, #31
 800be3e:	d404      	bmi.n	800be4a <_fflush_r+0x32>
 800be40:	0599      	lsls	r1, r3, #22
 800be42:	d402      	bmi.n	800be4a <_fflush_r+0x32>
 800be44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be46:	f7fd faf0 	bl	800942a <__retarget_lock_acquire_recursive>
 800be4a:	4628      	mov	r0, r5
 800be4c:	4621      	mov	r1, r4
 800be4e:	f7ff ff5f 	bl	800bd10 <__sflush_r>
 800be52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be54:	07da      	lsls	r2, r3, #31
 800be56:	4605      	mov	r5, r0
 800be58:	d4e4      	bmi.n	800be24 <_fflush_r+0xc>
 800be5a:	89a3      	ldrh	r3, [r4, #12]
 800be5c:	059b      	lsls	r3, r3, #22
 800be5e:	d4e1      	bmi.n	800be24 <_fflush_r+0xc>
 800be60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be62:	f7fd fae3 	bl	800942c <__retarget_lock_release_recursive>
 800be66:	e7dd      	b.n	800be24 <_fflush_r+0xc>

0800be68 <__swhatbuf_r>:
 800be68:	b570      	push	{r4, r5, r6, lr}
 800be6a:	460c      	mov	r4, r1
 800be6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be70:	2900      	cmp	r1, #0
 800be72:	b096      	sub	sp, #88	@ 0x58
 800be74:	4615      	mov	r5, r2
 800be76:	461e      	mov	r6, r3
 800be78:	da0d      	bge.n	800be96 <__swhatbuf_r+0x2e>
 800be7a:	89a3      	ldrh	r3, [r4, #12]
 800be7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800be80:	f04f 0100 	mov.w	r1, #0
 800be84:	bf14      	ite	ne
 800be86:	2340      	movne	r3, #64	@ 0x40
 800be88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800be8c:	2000      	movs	r0, #0
 800be8e:	6031      	str	r1, [r6, #0]
 800be90:	602b      	str	r3, [r5, #0]
 800be92:	b016      	add	sp, #88	@ 0x58
 800be94:	bd70      	pop	{r4, r5, r6, pc}
 800be96:	466a      	mov	r2, sp
 800be98:	f000 f874 	bl	800bf84 <_fstat_r>
 800be9c:	2800      	cmp	r0, #0
 800be9e:	dbec      	blt.n	800be7a <__swhatbuf_r+0x12>
 800bea0:	9901      	ldr	r1, [sp, #4]
 800bea2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bea6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800beaa:	4259      	negs	r1, r3
 800beac:	4159      	adcs	r1, r3
 800beae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800beb2:	e7eb      	b.n	800be8c <__swhatbuf_r+0x24>

0800beb4 <__smakebuf_r>:
 800beb4:	898b      	ldrh	r3, [r1, #12]
 800beb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800beb8:	079d      	lsls	r5, r3, #30
 800beba:	4606      	mov	r6, r0
 800bebc:	460c      	mov	r4, r1
 800bebe:	d507      	bpl.n	800bed0 <__smakebuf_r+0x1c>
 800bec0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bec4:	6023      	str	r3, [r4, #0]
 800bec6:	6123      	str	r3, [r4, #16]
 800bec8:	2301      	movs	r3, #1
 800beca:	6163      	str	r3, [r4, #20]
 800becc:	b003      	add	sp, #12
 800bece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bed0:	ab01      	add	r3, sp, #4
 800bed2:	466a      	mov	r2, sp
 800bed4:	f7ff ffc8 	bl	800be68 <__swhatbuf_r>
 800bed8:	9f00      	ldr	r7, [sp, #0]
 800beda:	4605      	mov	r5, r0
 800bedc:	4639      	mov	r1, r7
 800bede:	4630      	mov	r0, r6
 800bee0:	f7fc f8e6 	bl	80080b0 <_malloc_r>
 800bee4:	b948      	cbnz	r0, 800befa <__smakebuf_r+0x46>
 800bee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beea:	059a      	lsls	r2, r3, #22
 800beec:	d4ee      	bmi.n	800becc <__smakebuf_r+0x18>
 800beee:	f023 0303 	bic.w	r3, r3, #3
 800bef2:	f043 0302 	orr.w	r3, r3, #2
 800bef6:	81a3      	strh	r3, [r4, #12]
 800bef8:	e7e2      	b.n	800bec0 <__smakebuf_r+0xc>
 800befa:	89a3      	ldrh	r3, [r4, #12]
 800befc:	6020      	str	r0, [r4, #0]
 800befe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf02:	81a3      	strh	r3, [r4, #12]
 800bf04:	9b01      	ldr	r3, [sp, #4]
 800bf06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bf0a:	b15b      	cbz	r3, 800bf24 <__smakebuf_r+0x70>
 800bf0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf10:	4630      	mov	r0, r6
 800bf12:	f000 f849 	bl	800bfa8 <_isatty_r>
 800bf16:	b128      	cbz	r0, 800bf24 <__smakebuf_r+0x70>
 800bf18:	89a3      	ldrh	r3, [r4, #12]
 800bf1a:	f023 0303 	bic.w	r3, r3, #3
 800bf1e:	f043 0301 	orr.w	r3, r3, #1
 800bf22:	81a3      	strh	r3, [r4, #12]
 800bf24:	89a3      	ldrh	r3, [r4, #12]
 800bf26:	431d      	orrs	r5, r3
 800bf28:	81a5      	strh	r5, [r4, #12]
 800bf2a:	e7cf      	b.n	800becc <__smakebuf_r+0x18>

0800bf2c <memmove>:
 800bf2c:	4288      	cmp	r0, r1
 800bf2e:	b510      	push	{r4, lr}
 800bf30:	eb01 0402 	add.w	r4, r1, r2
 800bf34:	d902      	bls.n	800bf3c <memmove+0x10>
 800bf36:	4284      	cmp	r4, r0
 800bf38:	4623      	mov	r3, r4
 800bf3a:	d807      	bhi.n	800bf4c <memmove+0x20>
 800bf3c:	1e43      	subs	r3, r0, #1
 800bf3e:	42a1      	cmp	r1, r4
 800bf40:	d008      	beq.n	800bf54 <memmove+0x28>
 800bf42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf4a:	e7f8      	b.n	800bf3e <memmove+0x12>
 800bf4c:	4402      	add	r2, r0
 800bf4e:	4601      	mov	r1, r0
 800bf50:	428a      	cmp	r2, r1
 800bf52:	d100      	bne.n	800bf56 <memmove+0x2a>
 800bf54:	bd10      	pop	{r4, pc}
 800bf56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf5e:	e7f7      	b.n	800bf50 <memmove+0x24>

0800bf60 <strncmp>:
 800bf60:	b510      	push	{r4, lr}
 800bf62:	b16a      	cbz	r2, 800bf80 <strncmp+0x20>
 800bf64:	3901      	subs	r1, #1
 800bf66:	1884      	adds	r4, r0, r2
 800bf68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf6c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d103      	bne.n	800bf7c <strncmp+0x1c>
 800bf74:	42a0      	cmp	r0, r4
 800bf76:	d001      	beq.n	800bf7c <strncmp+0x1c>
 800bf78:	2a00      	cmp	r2, #0
 800bf7a:	d1f5      	bne.n	800bf68 <strncmp+0x8>
 800bf7c:	1ad0      	subs	r0, r2, r3
 800bf7e:	bd10      	pop	{r4, pc}
 800bf80:	4610      	mov	r0, r2
 800bf82:	e7fc      	b.n	800bf7e <strncmp+0x1e>

0800bf84 <_fstat_r>:
 800bf84:	b538      	push	{r3, r4, r5, lr}
 800bf86:	4d07      	ldr	r5, [pc, #28]	@ (800bfa4 <_fstat_r+0x20>)
 800bf88:	2300      	movs	r3, #0
 800bf8a:	4604      	mov	r4, r0
 800bf8c:	4608      	mov	r0, r1
 800bf8e:	4611      	mov	r1, r2
 800bf90:	602b      	str	r3, [r5, #0]
 800bf92:	f7f6 fbbb 	bl	800270c <_fstat>
 800bf96:	1c43      	adds	r3, r0, #1
 800bf98:	d102      	bne.n	800bfa0 <_fstat_r+0x1c>
 800bf9a:	682b      	ldr	r3, [r5, #0]
 800bf9c:	b103      	cbz	r3, 800bfa0 <_fstat_r+0x1c>
 800bf9e:	6023      	str	r3, [r4, #0]
 800bfa0:	bd38      	pop	{r3, r4, r5, pc}
 800bfa2:	bf00      	nop
 800bfa4:	20000570 	.word	0x20000570

0800bfa8 <_isatty_r>:
 800bfa8:	b538      	push	{r3, r4, r5, lr}
 800bfaa:	4d06      	ldr	r5, [pc, #24]	@ (800bfc4 <_isatty_r+0x1c>)
 800bfac:	2300      	movs	r3, #0
 800bfae:	4604      	mov	r4, r0
 800bfb0:	4608      	mov	r0, r1
 800bfb2:	602b      	str	r3, [r5, #0]
 800bfb4:	f7f6 fbba 	bl	800272c <_isatty>
 800bfb8:	1c43      	adds	r3, r0, #1
 800bfba:	d102      	bne.n	800bfc2 <_isatty_r+0x1a>
 800bfbc:	682b      	ldr	r3, [r5, #0]
 800bfbe:	b103      	cbz	r3, 800bfc2 <_isatty_r+0x1a>
 800bfc0:	6023      	str	r3, [r4, #0]
 800bfc2:	bd38      	pop	{r3, r4, r5, pc}
 800bfc4:	20000570 	.word	0x20000570

0800bfc8 <memcpy>:
 800bfc8:	440a      	add	r2, r1
 800bfca:	4291      	cmp	r1, r2
 800bfcc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800bfd0:	d100      	bne.n	800bfd4 <memcpy+0xc>
 800bfd2:	4770      	bx	lr
 800bfd4:	b510      	push	{r4, lr}
 800bfd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfda:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfde:	4291      	cmp	r1, r2
 800bfe0:	d1f9      	bne.n	800bfd6 <memcpy+0xe>
 800bfe2:	bd10      	pop	{r4, pc}
 800bfe4:	0000      	movs	r0, r0
	...

0800bfe8 <nan>:
 800bfe8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bff0 <nan+0x8>
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	00000000 	.word	0x00000000
 800bff4:	7ff80000 	.word	0x7ff80000

0800bff8 <__assert_func>:
 800bff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bffa:	4614      	mov	r4, r2
 800bffc:	461a      	mov	r2, r3
 800bffe:	4b09      	ldr	r3, [pc, #36]	@ (800c024 <__assert_func+0x2c>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	4605      	mov	r5, r0
 800c004:	68d8      	ldr	r0, [r3, #12]
 800c006:	b954      	cbnz	r4, 800c01e <__assert_func+0x26>
 800c008:	4b07      	ldr	r3, [pc, #28]	@ (800c028 <__assert_func+0x30>)
 800c00a:	461c      	mov	r4, r3
 800c00c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c010:	9100      	str	r1, [sp, #0]
 800c012:	462b      	mov	r3, r5
 800c014:	4905      	ldr	r1, [pc, #20]	@ (800c02c <__assert_func+0x34>)
 800c016:	f000 fba7 	bl	800c768 <fiprintf>
 800c01a:	f000 fbb7 	bl	800c78c <abort>
 800c01e:	4b04      	ldr	r3, [pc, #16]	@ (800c030 <__assert_func+0x38>)
 800c020:	e7f4      	b.n	800c00c <__assert_func+0x14>
 800c022:	bf00      	nop
 800c024:	20000018 	.word	0x20000018
 800c028:	0800d49d 	.word	0x0800d49d
 800c02c:	0800d46f 	.word	0x0800d46f
 800c030:	0800d462 	.word	0x0800d462

0800c034 <_calloc_r>:
 800c034:	b570      	push	{r4, r5, r6, lr}
 800c036:	fba1 5402 	umull	r5, r4, r1, r2
 800c03a:	b93c      	cbnz	r4, 800c04c <_calloc_r+0x18>
 800c03c:	4629      	mov	r1, r5
 800c03e:	f7fc f837 	bl	80080b0 <_malloc_r>
 800c042:	4606      	mov	r6, r0
 800c044:	b928      	cbnz	r0, 800c052 <_calloc_r+0x1e>
 800c046:	2600      	movs	r6, #0
 800c048:	4630      	mov	r0, r6
 800c04a:	bd70      	pop	{r4, r5, r6, pc}
 800c04c:	220c      	movs	r2, #12
 800c04e:	6002      	str	r2, [r0, #0]
 800c050:	e7f9      	b.n	800c046 <_calloc_r+0x12>
 800c052:	462a      	mov	r2, r5
 800c054:	4621      	mov	r1, r4
 800c056:	f7fd f94d 	bl	80092f4 <memset>
 800c05a:	e7f5      	b.n	800c048 <_calloc_r+0x14>

0800c05c <rshift>:
 800c05c:	6903      	ldr	r3, [r0, #16]
 800c05e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c062:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c066:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c06a:	f100 0414 	add.w	r4, r0, #20
 800c06e:	dd45      	ble.n	800c0fc <rshift+0xa0>
 800c070:	f011 011f 	ands.w	r1, r1, #31
 800c074:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c078:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c07c:	d10c      	bne.n	800c098 <rshift+0x3c>
 800c07e:	f100 0710 	add.w	r7, r0, #16
 800c082:	4629      	mov	r1, r5
 800c084:	42b1      	cmp	r1, r6
 800c086:	d334      	bcc.n	800c0f2 <rshift+0x96>
 800c088:	1a9b      	subs	r3, r3, r2
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	1eea      	subs	r2, r5, #3
 800c08e:	4296      	cmp	r6, r2
 800c090:	bf38      	it	cc
 800c092:	2300      	movcc	r3, #0
 800c094:	4423      	add	r3, r4
 800c096:	e015      	b.n	800c0c4 <rshift+0x68>
 800c098:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c09c:	f1c1 0820 	rsb	r8, r1, #32
 800c0a0:	40cf      	lsrs	r7, r1
 800c0a2:	f105 0e04 	add.w	lr, r5, #4
 800c0a6:	46a1      	mov	r9, r4
 800c0a8:	4576      	cmp	r6, lr
 800c0aa:	46f4      	mov	ip, lr
 800c0ac:	d815      	bhi.n	800c0da <rshift+0x7e>
 800c0ae:	1a9a      	subs	r2, r3, r2
 800c0b0:	0092      	lsls	r2, r2, #2
 800c0b2:	3a04      	subs	r2, #4
 800c0b4:	3501      	adds	r5, #1
 800c0b6:	42ae      	cmp	r6, r5
 800c0b8:	bf38      	it	cc
 800c0ba:	2200      	movcc	r2, #0
 800c0bc:	18a3      	adds	r3, r4, r2
 800c0be:	50a7      	str	r7, [r4, r2]
 800c0c0:	b107      	cbz	r7, 800c0c4 <rshift+0x68>
 800c0c2:	3304      	adds	r3, #4
 800c0c4:	1b1a      	subs	r2, r3, r4
 800c0c6:	42a3      	cmp	r3, r4
 800c0c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c0cc:	bf08      	it	eq
 800c0ce:	2300      	moveq	r3, #0
 800c0d0:	6102      	str	r2, [r0, #16]
 800c0d2:	bf08      	it	eq
 800c0d4:	6143      	streq	r3, [r0, #20]
 800c0d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0da:	f8dc c000 	ldr.w	ip, [ip]
 800c0de:	fa0c fc08 	lsl.w	ip, ip, r8
 800c0e2:	ea4c 0707 	orr.w	r7, ip, r7
 800c0e6:	f849 7b04 	str.w	r7, [r9], #4
 800c0ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c0ee:	40cf      	lsrs	r7, r1
 800c0f0:	e7da      	b.n	800c0a8 <rshift+0x4c>
 800c0f2:	f851 cb04 	ldr.w	ip, [r1], #4
 800c0f6:	f847 cf04 	str.w	ip, [r7, #4]!
 800c0fa:	e7c3      	b.n	800c084 <rshift+0x28>
 800c0fc:	4623      	mov	r3, r4
 800c0fe:	e7e1      	b.n	800c0c4 <rshift+0x68>

0800c100 <__hexdig_fun>:
 800c100:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c104:	2b09      	cmp	r3, #9
 800c106:	d802      	bhi.n	800c10e <__hexdig_fun+0xe>
 800c108:	3820      	subs	r0, #32
 800c10a:	b2c0      	uxtb	r0, r0
 800c10c:	4770      	bx	lr
 800c10e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c112:	2b05      	cmp	r3, #5
 800c114:	d801      	bhi.n	800c11a <__hexdig_fun+0x1a>
 800c116:	3847      	subs	r0, #71	@ 0x47
 800c118:	e7f7      	b.n	800c10a <__hexdig_fun+0xa>
 800c11a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c11e:	2b05      	cmp	r3, #5
 800c120:	d801      	bhi.n	800c126 <__hexdig_fun+0x26>
 800c122:	3827      	subs	r0, #39	@ 0x27
 800c124:	e7f1      	b.n	800c10a <__hexdig_fun+0xa>
 800c126:	2000      	movs	r0, #0
 800c128:	4770      	bx	lr
	...

0800c12c <__gethex>:
 800c12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c130:	b085      	sub	sp, #20
 800c132:	468a      	mov	sl, r1
 800c134:	9302      	str	r3, [sp, #8]
 800c136:	680b      	ldr	r3, [r1, #0]
 800c138:	9001      	str	r0, [sp, #4]
 800c13a:	4690      	mov	r8, r2
 800c13c:	1c9c      	adds	r4, r3, #2
 800c13e:	46a1      	mov	r9, r4
 800c140:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c144:	2830      	cmp	r0, #48	@ 0x30
 800c146:	d0fa      	beq.n	800c13e <__gethex+0x12>
 800c148:	eba9 0303 	sub.w	r3, r9, r3
 800c14c:	f1a3 0b02 	sub.w	fp, r3, #2
 800c150:	f7ff ffd6 	bl	800c100 <__hexdig_fun>
 800c154:	4605      	mov	r5, r0
 800c156:	2800      	cmp	r0, #0
 800c158:	d168      	bne.n	800c22c <__gethex+0x100>
 800c15a:	49a0      	ldr	r1, [pc, #640]	@ (800c3dc <__gethex+0x2b0>)
 800c15c:	2201      	movs	r2, #1
 800c15e:	4648      	mov	r0, r9
 800c160:	f7ff fefe 	bl	800bf60 <strncmp>
 800c164:	4607      	mov	r7, r0
 800c166:	2800      	cmp	r0, #0
 800c168:	d167      	bne.n	800c23a <__gethex+0x10e>
 800c16a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c16e:	4626      	mov	r6, r4
 800c170:	f7ff ffc6 	bl	800c100 <__hexdig_fun>
 800c174:	2800      	cmp	r0, #0
 800c176:	d062      	beq.n	800c23e <__gethex+0x112>
 800c178:	4623      	mov	r3, r4
 800c17a:	7818      	ldrb	r0, [r3, #0]
 800c17c:	2830      	cmp	r0, #48	@ 0x30
 800c17e:	4699      	mov	r9, r3
 800c180:	f103 0301 	add.w	r3, r3, #1
 800c184:	d0f9      	beq.n	800c17a <__gethex+0x4e>
 800c186:	f7ff ffbb 	bl	800c100 <__hexdig_fun>
 800c18a:	fab0 f580 	clz	r5, r0
 800c18e:	096d      	lsrs	r5, r5, #5
 800c190:	f04f 0b01 	mov.w	fp, #1
 800c194:	464a      	mov	r2, r9
 800c196:	4616      	mov	r6, r2
 800c198:	3201      	adds	r2, #1
 800c19a:	7830      	ldrb	r0, [r6, #0]
 800c19c:	f7ff ffb0 	bl	800c100 <__hexdig_fun>
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	d1f8      	bne.n	800c196 <__gethex+0x6a>
 800c1a4:	498d      	ldr	r1, [pc, #564]	@ (800c3dc <__gethex+0x2b0>)
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	f7ff fed9 	bl	800bf60 <strncmp>
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	d13f      	bne.n	800c232 <__gethex+0x106>
 800c1b2:	b944      	cbnz	r4, 800c1c6 <__gethex+0x9a>
 800c1b4:	1c74      	adds	r4, r6, #1
 800c1b6:	4622      	mov	r2, r4
 800c1b8:	4616      	mov	r6, r2
 800c1ba:	3201      	adds	r2, #1
 800c1bc:	7830      	ldrb	r0, [r6, #0]
 800c1be:	f7ff ff9f 	bl	800c100 <__hexdig_fun>
 800c1c2:	2800      	cmp	r0, #0
 800c1c4:	d1f8      	bne.n	800c1b8 <__gethex+0x8c>
 800c1c6:	1ba4      	subs	r4, r4, r6
 800c1c8:	00a7      	lsls	r7, r4, #2
 800c1ca:	7833      	ldrb	r3, [r6, #0]
 800c1cc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c1d0:	2b50      	cmp	r3, #80	@ 0x50
 800c1d2:	d13e      	bne.n	800c252 <__gethex+0x126>
 800c1d4:	7873      	ldrb	r3, [r6, #1]
 800c1d6:	2b2b      	cmp	r3, #43	@ 0x2b
 800c1d8:	d033      	beq.n	800c242 <__gethex+0x116>
 800c1da:	2b2d      	cmp	r3, #45	@ 0x2d
 800c1dc:	d034      	beq.n	800c248 <__gethex+0x11c>
 800c1de:	1c71      	adds	r1, r6, #1
 800c1e0:	2400      	movs	r4, #0
 800c1e2:	7808      	ldrb	r0, [r1, #0]
 800c1e4:	f7ff ff8c 	bl	800c100 <__hexdig_fun>
 800c1e8:	1e43      	subs	r3, r0, #1
 800c1ea:	b2db      	uxtb	r3, r3
 800c1ec:	2b18      	cmp	r3, #24
 800c1ee:	d830      	bhi.n	800c252 <__gethex+0x126>
 800c1f0:	f1a0 0210 	sub.w	r2, r0, #16
 800c1f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c1f8:	f7ff ff82 	bl	800c100 <__hexdig_fun>
 800c1fc:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800c200:	fa5f fc8c 	uxtb.w	ip, ip
 800c204:	f1bc 0f18 	cmp.w	ip, #24
 800c208:	f04f 030a 	mov.w	r3, #10
 800c20c:	d91e      	bls.n	800c24c <__gethex+0x120>
 800c20e:	b104      	cbz	r4, 800c212 <__gethex+0xe6>
 800c210:	4252      	negs	r2, r2
 800c212:	4417      	add	r7, r2
 800c214:	f8ca 1000 	str.w	r1, [sl]
 800c218:	b1ed      	cbz	r5, 800c256 <__gethex+0x12a>
 800c21a:	f1bb 0f00 	cmp.w	fp, #0
 800c21e:	bf0c      	ite	eq
 800c220:	2506      	moveq	r5, #6
 800c222:	2500      	movne	r5, #0
 800c224:	4628      	mov	r0, r5
 800c226:	b005      	add	sp, #20
 800c228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c22c:	2500      	movs	r5, #0
 800c22e:	462c      	mov	r4, r5
 800c230:	e7b0      	b.n	800c194 <__gethex+0x68>
 800c232:	2c00      	cmp	r4, #0
 800c234:	d1c7      	bne.n	800c1c6 <__gethex+0x9a>
 800c236:	4627      	mov	r7, r4
 800c238:	e7c7      	b.n	800c1ca <__gethex+0x9e>
 800c23a:	464e      	mov	r6, r9
 800c23c:	462f      	mov	r7, r5
 800c23e:	2501      	movs	r5, #1
 800c240:	e7c3      	b.n	800c1ca <__gethex+0x9e>
 800c242:	2400      	movs	r4, #0
 800c244:	1cb1      	adds	r1, r6, #2
 800c246:	e7cc      	b.n	800c1e2 <__gethex+0xb6>
 800c248:	2401      	movs	r4, #1
 800c24a:	e7fb      	b.n	800c244 <__gethex+0x118>
 800c24c:	fb03 0002 	mla	r0, r3, r2, r0
 800c250:	e7ce      	b.n	800c1f0 <__gethex+0xc4>
 800c252:	4631      	mov	r1, r6
 800c254:	e7de      	b.n	800c214 <__gethex+0xe8>
 800c256:	eba6 0309 	sub.w	r3, r6, r9
 800c25a:	3b01      	subs	r3, #1
 800c25c:	4629      	mov	r1, r5
 800c25e:	2b07      	cmp	r3, #7
 800c260:	dc0a      	bgt.n	800c278 <__gethex+0x14c>
 800c262:	9801      	ldr	r0, [sp, #4]
 800c264:	f7fd ff82 	bl	800a16c <_Balloc>
 800c268:	4604      	mov	r4, r0
 800c26a:	b940      	cbnz	r0, 800c27e <__gethex+0x152>
 800c26c:	4b5c      	ldr	r3, [pc, #368]	@ (800c3e0 <__gethex+0x2b4>)
 800c26e:	4602      	mov	r2, r0
 800c270:	21e4      	movs	r1, #228	@ 0xe4
 800c272:	485c      	ldr	r0, [pc, #368]	@ (800c3e4 <__gethex+0x2b8>)
 800c274:	f7ff fec0 	bl	800bff8 <__assert_func>
 800c278:	3101      	adds	r1, #1
 800c27a:	105b      	asrs	r3, r3, #1
 800c27c:	e7ef      	b.n	800c25e <__gethex+0x132>
 800c27e:	f100 0a14 	add.w	sl, r0, #20
 800c282:	2300      	movs	r3, #0
 800c284:	4655      	mov	r5, sl
 800c286:	469b      	mov	fp, r3
 800c288:	45b1      	cmp	r9, r6
 800c28a:	d337      	bcc.n	800c2fc <__gethex+0x1d0>
 800c28c:	f845 bb04 	str.w	fp, [r5], #4
 800c290:	eba5 050a 	sub.w	r5, r5, sl
 800c294:	10ad      	asrs	r5, r5, #2
 800c296:	6125      	str	r5, [r4, #16]
 800c298:	4658      	mov	r0, fp
 800c29a:	f7fe f859 	bl	800a350 <__hi0bits>
 800c29e:	016d      	lsls	r5, r5, #5
 800c2a0:	f8d8 6000 	ldr.w	r6, [r8]
 800c2a4:	1a2d      	subs	r5, r5, r0
 800c2a6:	42b5      	cmp	r5, r6
 800c2a8:	dd54      	ble.n	800c354 <__gethex+0x228>
 800c2aa:	1bad      	subs	r5, r5, r6
 800c2ac:	4629      	mov	r1, r5
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	f7fe fbed 	bl	800aa8e <__any_on>
 800c2b4:	4681      	mov	r9, r0
 800c2b6:	b178      	cbz	r0, 800c2d8 <__gethex+0x1ac>
 800c2b8:	1e6b      	subs	r3, r5, #1
 800c2ba:	1159      	asrs	r1, r3, #5
 800c2bc:	f003 021f 	and.w	r2, r3, #31
 800c2c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c2c4:	f04f 0901 	mov.w	r9, #1
 800c2c8:	fa09 f202 	lsl.w	r2, r9, r2
 800c2cc:	420a      	tst	r2, r1
 800c2ce:	d003      	beq.n	800c2d8 <__gethex+0x1ac>
 800c2d0:	454b      	cmp	r3, r9
 800c2d2:	dc36      	bgt.n	800c342 <__gethex+0x216>
 800c2d4:	f04f 0902 	mov.w	r9, #2
 800c2d8:	4629      	mov	r1, r5
 800c2da:	4620      	mov	r0, r4
 800c2dc:	f7ff febe 	bl	800c05c <rshift>
 800c2e0:	442f      	add	r7, r5
 800c2e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c2e6:	42bb      	cmp	r3, r7
 800c2e8:	da42      	bge.n	800c370 <__gethex+0x244>
 800c2ea:	9801      	ldr	r0, [sp, #4]
 800c2ec:	4621      	mov	r1, r4
 800c2ee:	f7fd ff7d 	bl	800a1ec <_Bfree>
 800c2f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	6013      	str	r3, [r2, #0]
 800c2f8:	25a3      	movs	r5, #163	@ 0xa3
 800c2fa:	e793      	b.n	800c224 <__gethex+0xf8>
 800c2fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c300:	2a2e      	cmp	r2, #46	@ 0x2e
 800c302:	d012      	beq.n	800c32a <__gethex+0x1fe>
 800c304:	2b20      	cmp	r3, #32
 800c306:	d104      	bne.n	800c312 <__gethex+0x1e6>
 800c308:	f845 bb04 	str.w	fp, [r5], #4
 800c30c:	f04f 0b00 	mov.w	fp, #0
 800c310:	465b      	mov	r3, fp
 800c312:	7830      	ldrb	r0, [r6, #0]
 800c314:	9303      	str	r3, [sp, #12]
 800c316:	f7ff fef3 	bl	800c100 <__hexdig_fun>
 800c31a:	9b03      	ldr	r3, [sp, #12]
 800c31c:	f000 000f 	and.w	r0, r0, #15
 800c320:	4098      	lsls	r0, r3
 800c322:	ea4b 0b00 	orr.w	fp, fp, r0
 800c326:	3304      	adds	r3, #4
 800c328:	e7ae      	b.n	800c288 <__gethex+0x15c>
 800c32a:	45b1      	cmp	r9, r6
 800c32c:	d8ea      	bhi.n	800c304 <__gethex+0x1d8>
 800c32e:	492b      	ldr	r1, [pc, #172]	@ (800c3dc <__gethex+0x2b0>)
 800c330:	9303      	str	r3, [sp, #12]
 800c332:	2201      	movs	r2, #1
 800c334:	4630      	mov	r0, r6
 800c336:	f7ff fe13 	bl	800bf60 <strncmp>
 800c33a:	9b03      	ldr	r3, [sp, #12]
 800c33c:	2800      	cmp	r0, #0
 800c33e:	d1e1      	bne.n	800c304 <__gethex+0x1d8>
 800c340:	e7a2      	b.n	800c288 <__gethex+0x15c>
 800c342:	1ea9      	subs	r1, r5, #2
 800c344:	4620      	mov	r0, r4
 800c346:	f7fe fba2 	bl	800aa8e <__any_on>
 800c34a:	2800      	cmp	r0, #0
 800c34c:	d0c2      	beq.n	800c2d4 <__gethex+0x1a8>
 800c34e:	f04f 0903 	mov.w	r9, #3
 800c352:	e7c1      	b.n	800c2d8 <__gethex+0x1ac>
 800c354:	da09      	bge.n	800c36a <__gethex+0x23e>
 800c356:	1b75      	subs	r5, r6, r5
 800c358:	4621      	mov	r1, r4
 800c35a:	9801      	ldr	r0, [sp, #4]
 800c35c:	462a      	mov	r2, r5
 800c35e:	f7fe f95d 	bl	800a61c <__lshift>
 800c362:	1b7f      	subs	r7, r7, r5
 800c364:	4604      	mov	r4, r0
 800c366:	f100 0a14 	add.w	sl, r0, #20
 800c36a:	f04f 0900 	mov.w	r9, #0
 800c36e:	e7b8      	b.n	800c2e2 <__gethex+0x1b6>
 800c370:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c374:	42bd      	cmp	r5, r7
 800c376:	dd6f      	ble.n	800c458 <__gethex+0x32c>
 800c378:	1bed      	subs	r5, r5, r7
 800c37a:	42ae      	cmp	r6, r5
 800c37c:	dc34      	bgt.n	800c3e8 <__gethex+0x2bc>
 800c37e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c382:	2b02      	cmp	r3, #2
 800c384:	d022      	beq.n	800c3cc <__gethex+0x2a0>
 800c386:	2b03      	cmp	r3, #3
 800c388:	d024      	beq.n	800c3d4 <__gethex+0x2a8>
 800c38a:	2b01      	cmp	r3, #1
 800c38c:	d115      	bne.n	800c3ba <__gethex+0x28e>
 800c38e:	42ae      	cmp	r6, r5
 800c390:	d113      	bne.n	800c3ba <__gethex+0x28e>
 800c392:	2e01      	cmp	r6, #1
 800c394:	d10b      	bne.n	800c3ae <__gethex+0x282>
 800c396:	9a02      	ldr	r2, [sp, #8]
 800c398:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c39c:	6013      	str	r3, [r2, #0]
 800c39e:	2301      	movs	r3, #1
 800c3a0:	6123      	str	r3, [r4, #16]
 800c3a2:	f8ca 3000 	str.w	r3, [sl]
 800c3a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3a8:	2562      	movs	r5, #98	@ 0x62
 800c3aa:	601c      	str	r4, [r3, #0]
 800c3ac:	e73a      	b.n	800c224 <__gethex+0xf8>
 800c3ae:	1e71      	subs	r1, r6, #1
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	f7fe fb6c 	bl	800aa8e <__any_on>
 800c3b6:	2800      	cmp	r0, #0
 800c3b8:	d1ed      	bne.n	800c396 <__gethex+0x26a>
 800c3ba:	9801      	ldr	r0, [sp, #4]
 800c3bc:	4621      	mov	r1, r4
 800c3be:	f7fd ff15 	bl	800a1ec <_Bfree>
 800c3c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	6013      	str	r3, [r2, #0]
 800c3c8:	2550      	movs	r5, #80	@ 0x50
 800c3ca:	e72b      	b.n	800c224 <__gethex+0xf8>
 800c3cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d1f3      	bne.n	800c3ba <__gethex+0x28e>
 800c3d2:	e7e0      	b.n	800c396 <__gethex+0x26a>
 800c3d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d1dd      	bne.n	800c396 <__gethex+0x26a>
 800c3da:	e7ee      	b.n	800c3ba <__gethex+0x28e>
 800c3dc:	0800d2f0 	.word	0x0800d2f0
 800c3e0:	0800d189 	.word	0x0800d189
 800c3e4:	0800d49e 	.word	0x0800d49e
 800c3e8:	1e6f      	subs	r7, r5, #1
 800c3ea:	f1b9 0f00 	cmp.w	r9, #0
 800c3ee:	d130      	bne.n	800c452 <__gethex+0x326>
 800c3f0:	b127      	cbz	r7, 800c3fc <__gethex+0x2d0>
 800c3f2:	4639      	mov	r1, r7
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	f7fe fb4a 	bl	800aa8e <__any_on>
 800c3fa:	4681      	mov	r9, r0
 800c3fc:	117a      	asrs	r2, r7, #5
 800c3fe:	2301      	movs	r3, #1
 800c400:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c404:	f007 071f 	and.w	r7, r7, #31
 800c408:	40bb      	lsls	r3, r7
 800c40a:	4213      	tst	r3, r2
 800c40c:	4629      	mov	r1, r5
 800c40e:	4620      	mov	r0, r4
 800c410:	bf18      	it	ne
 800c412:	f049 0902 	orrne.w	r9, r9, #2
 800c416:	f7ff fe21 	bl	800c05c <rshift>
 800c41a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c41e:	1b76      	subs	r6, r6, r5
 800c420:	2502      	movs	r5, #2
 800c422:	f1b9 0f00 	cmp.w	r9, #0
 800c426:	d047      	beq.n	800c4b8 <__gethex+0x38c>
 800c428:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c42c:	2b02      	cmp	r3, #2
 800c42e:	d015      	beq.n	800c45c <__gethex+0x330>
 800c430:	2b03      	cmp	r3, #3
 800c432:	d017      	beq.n	800c464 <__gethex+0x338>
 800c434:	2b01      	cmp	r3, #1
 800c436:	d109      	bne.n	800c44c <__gethex+0x320>
 800c438:	f019 0f02 	tst.w	r9, #2
 800c43c:	d006      	beq.n	800c44c <__gethex+0x320>
 800c43e:	f8da 3000 	ldr.w	r3, [sl]
 800c442:	ea49 0903 	orr.w	r9, r9, r3
 800c446:	f019 0f01 	tst.w	r9, #1
 800c44a:	d10e      	bne.n	800c46a <__gethex+0x33e>
 800c44c:	f045 0510 	orr.w	r5, r5, #16
 800c450:	e032      	b.n	800c4b8 <__gethex+0x38c>
 800c452:	f04f 0901 	mov.w	r9, #1
 800c456:	e7d1      	b.n	800c3fc <__gethex+0x2d0>
 800c458:	2501      	movs	r5, #1
 800c45a:	e7e2      	b.n	800c422 <__gethex+0x2f6>
 800c45c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c45e:	f1c3 0301 	rsb	r3, r3, #1
 800c462:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c464:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c466:	2b00      	cmp	r3, #0
 800c468:	d0f0      	beq.n	800c44c <__gethex+0x320>
 800c46a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c46e:	f104 0314 	add.w	r3, r4, #20
 800c472:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c476:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c47a:	f04f 0c00 	mov.w	ip, #0
 800c47e:	4618      	mov	r0, r3
 800c480:	f853 2b04 	ldr.w	r2, [r3], #4
 800c484:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800c488:	d01b      	beq.n	800c4c2 <__gethex+0x396>
 800c48a:	3201      	adds	r2, #1
 800c48c:	6002      	str	r2, [r0, #0]
 800c48e:	2d02      	cmp	r5, #2
 800c490:	f104 0314 	add.w	r3, r4, #20
 800c494:	d13c      	bne.n	800c510 <__gethex+0x3e4>
 800c496:	f8d8 2000 	ldr.w	r2, [r8]
 800c49a:	3a01      	subs	r2, #1
 800c49c:	42b2      	cmp	r2, r6
 800c49e:	d109      	bne.n	800c4b4 <__gethex+0x388>
 800c4a0:	1171      	asrs	r1, r6, #5
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c4a8:	f006 061f 	and.w	r6, r6, #31
 800c4ac:	fa02 f606 	lsl.w	r6, r2, r6
 800c4b0:	421e      	tst	r6, r3
 800c4b2:	d13a      	bne.n	800c52a <__gethex+0x3fe>
 800c4b4:	f045 0520 	orr.w	r5, r5, #32
 800c4b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4ba:	601c      	str	r4, [r3, #0]
 800c4bc:	9b02      	ldr	r3, [sp, #8]
 800c4be:	601f      	str	r7, [r3, #0]
 800c4c0:	e6b0      	b.n	800c224 <__gethex+0xf8>
 800c4c2:	4299      	cmp	r1, r3
 800c4c4:	f843 cc04 	str.w	ip, [r3, #-4]
 800c4c8:	d8d9      	bhi.n	800c47e <__gethex+0x352>
 800c4ca:	68a3      	ldr	r3, [r4, #8]
 800c4cc:	459b      	cmp	fp, r3
 800c4ce:	db17      	blt.n	800c500 <__gethex+0x3d4>
 800c4d0:	6861      	ldr	r1, [r4, #4]
 800c4d2:	9801      	ldr	r0, [sp, #4]
 800c4d4:	3101      	adds	r1, #1
 800c4d6:	f7fd fe49 	bl	800a16c <_Balloc>
 800c4da:	4681      	mov	r9, r0
 800c4dc:	b918      	cbnz	r0, 800c4e6 <__gethex+0x3ba>
 800c4de:	4b1a      	ldr	r3, [pc, #104]	@ (800c548 <__gethex+0x41c>)
 800c4e0:	4602      	mov	r2, r0
 800c4e2:	2184      	movs	r1, #132	@ 0x84
 800c4e4:	e6c5      	b.n	800c272 <__gethex+0x146>
 800c4e6:	6922      	ldr	r2, [r4, #16]
 800c4e8:	3202      	adds	r2, #2
 800c4ea:	f104 010c 	add.w	r1, r4, #12
 800c4ee:	0092      	lsls	r2, r2, #2
 800c4f0:	300c      	adds	r0, #12
 800c4f2:	f7ff fd69 	bl	800bfc8 <memcpy>
 800c4f6:	4621      	mov	r1, r4
 800c4f8:	9801      	ldr	r0, [sp, #4]
 800c4fa:	f7fd fe77 	bl	800a1ec <_Bfree>
 800c4fe:	464c      	mov	r4, r9
 800c500:	6923      	ldr	r3, [r4, #16]
 800c502:	1c5a      	adds	r2, r3, #1
 800c504:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c508:	6122      	str	r2, [r4, #16]
 800c50a:	2201      	movs	r2, #1
 800c50c:	615a      	str	r2, [r3, #20]
 800c50e:	e7be      	b.n	800c48e <__gethex+0x362>
 800c510:	6922      	ldr	r2, [r4, #16]
 800c512:	455a      	cmp	r2, fp
 800c514:	dd0b      	ble.n	800c52e <__gethex+0x402>
 800c516:	2101      	movs	r1, #1
 800c518:	4620      	mov	r0, r4
 800c51a:	f7ff fd9f 	bl	800c05c <rshift>
 800c51e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c522:	3701      	adds	r7, #1
 800c524:	42bb      	cmp	r3, r7
 800c526:	f6ff aee0 	blt.w	800c2ea <__gethex+0x1be>
 800c52a:	2501      	movs	r5, #1
 800c52c:	e7c2      	b.n	800c4b4 <__gethex+0x388>
 800c52e:	f016 061f 	ands.w	r6, r6, #31
 800c532:	d0fa      	beq.n	800c52a <__gethex+0x3fe>
 800c534:	4453      	add	r3, sl
 800c536:	f1c6 0620 	rsb	r6, r6, #32
 800c53a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c53e:	f7fd ff07 	bl	800a350 <__hi0bits>
 800c542:	42b0      	cmp	r0, r6
 800c544:	dbe7      	blt.n	800c516 <__gethex+0x3ea>
 800c546:	e7f0      	b.n	800c52a <__gethex+0x3fe>
 800c548:	0800d189 	.word	0x0800d189

0800c54c <L_shift>:
 800c54c:	f1c2 0208 	rsb	r2, r2, #8
 800c550:	0092      	lsls	r2, r2, #2
 800c552:	b570      	push	{r4, r5, r6, lr}
 800c554:	f1c2 0620 	rsb	r6, r2, #32
 800c558:	6843      	ldr	r3, [r0, #4]
 800c55a:	6804      	ldr	r4, [r0, #0]
 800c55c:	fa03 f506 	lsl.w	r5, r3, r6
 800c560:	432c      	orrs	r4, r5
 800c562:	40d3      	lsrs	r3, r2
 800c564:	6004      	str	r4, [r0, #0]
 800c566:	f840 3f04 	str.w	r3, [r0, #4]!
 800c56a:	4288      	cmp	r0, r1
 800c56c:	d3f4      	bcc.n	800c558 <L_shift+0xc>
 800c56e:	bd70      	pop	{r4, r5, r6, pc}

0800c570 <__match>:
 800c570:	b530      	push	{r4, r5, lr}
 800c572:	6803      	ldr	r3, [r0, #0]
 800c574:	3301      	adds	r3, #1
 800c576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c57a:	b914      	cbnz	r4, 800c582 <__match+0x12>
 800c57c:	6003      	str	r3, [r0, #0]
 800c57e:	2001      	movs	r0, #1
 800c580:	bd30      	pop	{r4, r5, pc}
 800c582:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c586:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c58a:	2d19      	cmp	r5, #25
 800c58c:	bf98      	it	ls
 800c58e:	3220      	addls	r2, #32
 800c590:	42a2      	cmp	r2, r4
 800c592:	d0f0      	beq.n	800c576 <__match+0x6>
 800c594:	2000      	movs	r0, #0
 800c596:	e7f3      	b.n	800c580 <__match+0x10>

0800c598 <__hexnan>:
 800c598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c59c:	680b      	ldr	r3, [r1, #0]
 800c59e:	6801      	ldr	r1, [r0, #0]
 800c5a0:	115e      	asrs	r6, r3, #5
 800c5a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c5a6:	f013 031f 	ands.w	r3, r3, #31
 800c5aa:	b087      	sub	sp, #28
 800c5ac:	bf18      	it	ne
 800c5ae:	3604      	addne	r6, #4
 800c5b0:	2500      	movs	r5, #0
 800c5b2:	1f37      	subs	r7, r6, #4
 800c5b4:	4682      	mov	sl, r0
 800c5b6:	4690      	mov	r8, r2
 800c5b8:	9301      	str	r3, [sp, #4]
 800c5ba:	f846 5c04 	str.w	r5, [r6, #-4]
 800c5be:	46b9      	mov	r9, r7
 800c5c0:	463c      	mov	r4, r7
 800c5c2:	9502      	str	r5, [sp, #8]
 800c5c4:	46ab      	mov	fp, r5
 800c5c6:	784a      	ldrb	r2, [r1, #1]
 800c5c8:	1c4b      	adds	r3, r1, #1
 800c5ca:	9303      	str	r3, [sp, #12]
 800c5cc:	b342      	cbz	r2, 800c620 <__hexnan+0x88>
 800c5ce:	4610      	mov	r0, r2
 800c5d0:	9105      	str	r1, [sp, #20]
 800c5d2:	9204      	str	r2, [sp, #16]
 800c5d4:	f7ff fd94 	bl	800c100 <__hexdig_fun>
 800c5d8:	2800      	cmp	r0, #0
 800c5da:	d151      	bne.n	800c680 <__hexnan+0xe8>
 800c5dc:	9a04      	ldr	r2, [sp, #16]
 800c5de:	9905      	ldr	r1, [sp, #20]
 800c5e0:	2a20      	cmp	r2, #32
 800c5e2:	d818      	bhi.n	800c616 <__hexnan+0x7e>
 800c5e4:	9b02      	ldr	r3, [sp, #8]
 800c5e6:	459b      	cmp	fp, r3
 800c5e8:	dd13      	ble.n	800c612 <__hexnan+0x7a>
 800c5ea:	454c      	cmp	r4, r9
 800c5ec:	d206      	bcs.n	800c5fc <__hexnan+0x64>
 800c5ee:	2d07      	cmp	r5, #7
 800c5f0:	dc04      	bgt.n	800c5fc <__hexnan+0x64>
 800c5f2:	462a      	mov	r2, r5
 800c5f4:	4649      	mov	r1, r9
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	f7ff ffa8 	bl	800c54c <L_shift>
 800c5fc:	4544      	cmp	r4, r8
 800c5fe:	d952      	bls.n	800c6a6 <__hexnan+0x10e>
 800c600:	2300      	movs	r3, #0
 800c602:	f1a4 0904 	sub.w	r9, r4, #4
 800c606:	f844 3c04 	str.w	r3, [r4, #-4]
 800c60a:	f8cd b008 	str.w	fp, [sp, #8]
 800c60e:	464c      	mov	r4, r9
 800c610:	461d      	mov	r5, r3
 800c612:	9903      	ldr	r1, [sp, #12]
 800c614:	e7d7      	b.n	800c5c6 <__hexnan+0x2e>
 800c616:	2a29      	cmp	r2, #41	@ 0x29
 800c618:	d157      	bne.n	800c6ca <__hexnan+0x132>
 800c61a:	3102      	adds	r1, #2
 800c61c:	f8ca 1000 	str.w	r1, [sl]
 800c620:	f1bb 0f00 	cmp.w	fp, #0
 800c624:	d051      	beq.n	800c6ca <__hexnan+0x132>
 800c626:	454c      	cmp	r4, r9
 800c628:	d206      	bcs.n	800c638 <__hexnan+0xa0>
 800c62a:	2d07      	cmp	r5, #7
 800c62c:	dc04      	bgt.n	800c638 <__hexnan+0xa0>
 800c62e:	462a      	mov	r2, r5
 800c630:	4649      	mov	r1, r9
 800c632:	4620      	mov	r0, r4
 800c634:	f7ff ff8a 	bl	800c54c <L_shift>
 800c638:	4544      	cmp	r4, r8
 800c63a:	d936      	bls.n	800c6aa <__hexnan+0x112>
 800c63c:	f1a8 0204 	sub.w	r2, r8, #4
 800c640:	4623      	mov	r3, r4
 800c642:	f853 1b04 	ldr.w	r1, [r3], #4
 800c646:	f842 1f04 	str.w	r1, [r2, #4]!
 800c64a:	429f      	cmp	r7, r3
 800c64c:	d2f9      	bcs.n	800c642 <__hexnan+0xaa>
 800c64e:	1b3b      	subs	r3, r7, r4
 800c650:	f023 0303 	bic.w	r3, r3, #3
 800c654:	3304      	adds	r3, #4
 800c656:	3401      	adds	r4, #1
 800c658:	3e03      	subs	r6, #3
 800c65a:	42b4      	cmp	r4, r6
 800c65c:	bf88      	it	hi
 800c65e:	2304      	movhi	r3, #4
 800c660:	4443      	add	r3, r8
 800c662:	2200      	movs	r2, #0
 800c664:	f843 2b04 	str.w	r2, [r3], #4
 800c668:	429f      	cmp	r7, r3
 800c66a:	d2fb      	bcs.n	800c664 <__hexnan+0xcc>
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	b91b      	cbnz	r3, 800c678 <__hexnan+0xe0>
 800c670:	4547      	cmp	r7, r8
 800c672:	d128      	bne.n	800c6c6 <__hexnan+0x12e>
 800c674:	2301      	movs	r3, #1
 800c676:	603b      	str	r3, [r7, #0]
 800c678:	2005      	movs	r0, #5
 800c67a:	b007      	add	sp, #28
 800c67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c680:	3501      	adds	r5, #1
 800c682:	2d08      	cmp	r5, #8
 800c684:	f10b 0b01 	add.w	fp, fp, #1
 800c688:	dd06      	ble.n	800c698 <__hexnan+0x100>
 800c68a:	4544      	cmp	r4, r8
 800c68c:	d9c1      	bls.n	800c612 <__hexnan+0x7a>
 800c68e:	2300      	movs	r3, #0
 800c690:	f844 3c04 	str.w	r3, [r4, #-4]
 800c694:	2501      	movs	r5, #1
 800c696:	3c04      	subs	r4, #4
 800c698:	6822      	ldr	r2, [r4, #0]
 800c69a:	f000 000f 	and.w	r0, r0, #15
 800c69e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c6a2:	6020      	str	r0, [r4, #0]
 800c6a4:	e7b5      	b.n	800c612 <__hexnan+0x7a>
 800c6a6:	2508      	movs	r5, #8
 800c6a8:	e7b3      	b.n	800c612 <__hexnan+0x7a>
 800c6aa:	9b01      	ldr	r3, [sp, #4]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d0dd      	beq.n	800c66c <__hexnan+0xd4>
 800c6b0:	f1c3 0320 	rsb	r3, r3, #32
 800c6b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c6b8:	40da      	lsrs	r2, r3
 800c6ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c6be:	4013      	ands	r3, r2
 800c6c0:	f846 3c04 	str.w	r3, [r6, #-4]
 800c6c4:	e7d2      	b.n	800c66c <__hexnan+0xd4>
 800c6c6:	3f04      	subs	r7, #4
 800c6c8:	e7d0      	b.n	800c66c <__hexnan+0xd4>
 800c6ca:	2004      	movs	r0, #4
 800c6cc:	e7d5      	b.n	800c67a <__hexnan+0xe2>

0800c6ce <__ascii_mbtowc>:
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	b901      	cbnz	r1, 800c6d4 <__ascii_mbtowc+0x6>
 800c6d2:	a901      	add	r1, sp, #4
 800c6d4:	b142      	cbz	r2, 800c6e8 <__ascii_mbtowc+0x1a>
 800c6d6:	b14b      	cbz	r3, 800c6ec <__ascii_mbtowc+0x1e>
 800c6d8:	7813      	ldrb	r3, [r2, #0]
 800c6da:	600b      	str	r3, [r1, #0]
 800c6dc:	7812      	ldrb	r2, [r2, #0]
 800c6de:	1e10      	subs	r0, r2, #0
 800c6e0:	bf18      	it	ne
 800c6e2:	2001      	movne	r0, #1
 800c6e4:	b002      	add	sp, #8
 800c6e6:	4770      	bx	lr
 800c6e8:	4610      	mov	r0, r2
 800c6ea:	e7fb      	b.n	800c6e4 <__ascii_mbtowc+0x16>
 800c6ec:	f06f 0001 	mvn.w	r0, #1
 800c6f0:	e7f8      	b.n	800c6e4 <__ascii_mbtowc+0x16>

0800c6f2 <_realloc_r>:
 800c6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f6:	4680      	mov	r8, r0
 800c6f8:	4615      	mov	r5, r2
 800c6fa:	460c      	mov	r4, r1
 800c6fc:	b921      	cbnz	r1, 800c708 <_realloc_r+0x16>
 800c6fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c702:	4611      	mov	r1, r2
 800c704:	f7fb bcd4 	b.w	80080b0 <_malloc_r>
 800c708:	b92a      	cbnz	r2, 800c716 <_realloc_r+0x24>
 800c70a:	f7fd fce5 	bl	800a0d8 <_free_r>
 800c70e:	2400      	movs	r4, #0
 800c710:	4620      	mov	r0, r4
 800c712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c716:	f000 f840 	bl	800c79a <_malloc_usable_size_r>
 800c71a:	4285      	cmp	r5, r0
 800c71c:	4606      	mov	r6, r0
 800c71e:	d802      	bhi.n	800c726 <_realloc_r+0x34>
 800c720:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c724:	d8f4      	bhi.n	800c710 <_realloc_r+0x1e>
 800c726:	4629      	mov	r1, r5
 800c728:	4640      	mov	r0, r8
 800c72a:	f7fb fcc1 	bl	80080b0 <_malloc_r>
 800c72e:	4607      	mov	r7, r0
 800c730:	2800      	cmp	r0, #0
 800c732:	d0ec      	beq.n	800c70e <_realloc_r+0x1c>
 800c734:	42b5      	cmp	r5, r6
 800c736:	462a      	mov	r2, r5
 800c738:	4621      	mov	r1, r4
 800c73a:	bf28      	it	cs
 800c73c:	4632      	movcs	r2, r6
 800c73e:	f7ff fc43 	bl	800bfc8 <memcpy>
 800c742:	4621      	mov	r1, r4
 800c744:	4640      	mov	r0, r8
 800c746:	f7fd fcc7 	bl	800a0d8 <_free_r>
 800c74a:	463c      	mov	r4, r7
 800c74c:	e7e0      	b.n	800c710 <_realloc_r+0x1e>

0800c74e <__ascii_wctomb>:
 800c74e:	4603      	mov	r3, r0
 800c750:	4608      	mov	r0, r1
 800c752:	b141      	cbz	r1, 800c766 <__ascii_wctomb+0x18>
 800c754:	2aff      	cmp	r2, #255	@ 0xff
 800c756:	d904      	bls.n	800c762 <__ascii_wctomb+0x14>
 800c758:	228a      	movs	r2, #138	@ 0x8a
 800c75a:	601a      	str	r2, [r3, #0]
 800c75c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c760:	4770      	bx	lr
 800c762:	700a      	strb	r2, [r1, #0]
 800c764:	2001      	movs	r0, #1
 800c766:	4770      	bx	lr

0800c768 <fiprintf>:
 800c768:	b40e      	push	{r1, r2, r3}
 800c76a:	b503      	push	{r0, r1, lr}
 800c76c:	4601      	mov	r1, r0
 800c76e:	ab03      	add	r3, sp, #12
 800c770:	4805      	ldr	r0, [pc, #20]	@ (800c788 <fiprintf+0x20>)
 800c772:	f853 2b04 	ldr.w	r2, [r3], #4
 800c776:	6800      	ldr	r0, [r0, #0]
 800c778:	9301      	str	r3, [sp, #4]
 800c77a:	f7ff f9b1 	bl	800bae0 <_vfiprintf_r>
 800c77e:	b002      	add	sp, #8
 800c780:	f85d eb04 	ldr.w	lr, [sp], #4
 800c784:	b003      	add	sp, #12
 800c786:	4770      	bx	lr
 800c788:	20000018 	.word	0x20000018

0800c78c <abort>:
 800c78c:	b508      	push	{r3, lr}
 800c78e:	2006      	movs	r0, #6
 800c790:	f000 f834 	bl	800c7fc <raise>
 800c794:	2001      	movs	r0, #1
 800c796:	f7f5 ff69 	bl	800266c <_exit>

0800c79a <_malloc_usable_size_r>:
 800c79a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c79e:	1f18      	subs	r0, r3, #4
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	bfbc      	itt	lt
 800c7a4:	580b      	ldrlt	r3, [r1, r0]
 800c7a6:	18c0      	addlt	r0, r0, r3
 800c7a8:	4770      	bx	lr

0800c7aa <_raise_r>:
 800c7aa:	291f      	cmp	r1, #31
 800c7ac:	b538      	push	{r3, r4, r5, lr}
 800c7ae:	4605      	mov	r5, r0
 800c7b0:	460c      	mov	r4, r1
 800c7b2:	d904      	bls.n	800c7be <_raise_r+0x14>
 800c7b4:	2316      	movs	r3, #22
 800c7b6:	6003      	str	r3, [r0, #0]
 800c7b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c7bc:	bd38      	pop	{r3, r4, r5, pc}
 800c7be:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c7c0:	b112      	cbz	r2, 800c7c8 <_raise_r+0x1e>
 800c7c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7c6:	b94b      	cbnz	r3, 800c7dc <_raise_r+0x32>
 800c7c8:	4628      	mov	r0, r5
 800c7ca:	f000 f831 	bl	800c830 <_getpid_r>
 800c7ce:	4622      	mov	r2, r4
 800c7d0:	4601      	mov	r1, r0
 800c7d2:	4628      	mov	r0, r5
 800c7d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7d8:	f000 b818 	b.w	800c80c <_kill_r>
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d00a      	beq.n	800c7f6 <_raise_r+0x4c>
 800c7e0:	1c59      	adds	r1, r3, #1
 800c7e2:	d103      	bne.n	800c7ec <_raise_r+0x42>
 800c7e4:	2316      	movs	r3, #22
 800c7e6:	6003      	str	r3, [r0, #0]
 800c7e8:	2001      	movs	r0, #1
 800c7ea:	e7e7      	b.n	800c7bc <_raise_r+0x12>
 800c7ec:	2100      	movs	r1, #0
 800c7ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c7f2:	4620      	mov	r0, r4
 800c7f4:	4798      	blx	r3
 800c7f6:	2000      	movs	r0, #0
 800c7f8:	e7e0      	b.n	800c7bc <_raise_r+0x12>
	...

0800c7fc <raise>:
 800c7fc:	4b02      	ldr	r3, [pc, #8]	@ (800c808 <raise+0xc>)
 800c7fe:	4601      	mov	r1, r0
 800c800:	6818      	ldr	r0, [r3, #0]
 800c802:	f7ff bfd2 	b.w	800c7aa <_raise_r>
 800c806:	bf00      	nop
 800c808:	20000018 	.word	0x20000018

0800c80c <_kill_r>:
 800c80c:	b538      	push	{r3, r4, r5, lr}
 800c80e:	4d07      	ldr	r5, [pc, #28]	@ (800c82c <_kill_r+0x20>)
 800c810:	2300      	movs	r3, #0
 800c812:	4604      	mov	r4, r0
 800c814:	4608      	mov	r0, r1
 800c816:	4611      	mov	r1, r2
 800c818:	602b      	str	r3, [r5, #0]
 800c81a:	f7f5 ff17 	bl	800264c <_kill>
 800c81e:	1c43      	adds	r3, r0, #1
 800c820:	d102      	bne.n	800c828 <_kill_r+0x1c>
 800c822:	682b      	ldr	r3, [r5, #0]
 800c824:	b103      	cbz	r3, 800c828 <_kill_r+0x1c>
 800c826:	6023      	str	r3, [r4, #0]
 800c828:	bd38      	pop	{r3, r4, r5, pc}
 800c82a:	bf00      	nop
 800c82c:	20000570 	.word	0x20000570

0800c830 <_getpid_r>:
 800c830:	f7f5 bf04 	b.w	800263c <_getpid>

0800c834 <atan2>:
 800c834:	f000 b800 	b.w	800c838 <__ieee754_atan2>

0800c838 <__ieee754_atan2>:
 800c838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c83c:	ec57 6b11 	vmov	r6, r7, d1
 800c840:	4273      	negs	r3, r6
 800c842:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800c9c0 <__ieee754_atan2+0x188>
 800c846:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800c84a:	4333      	orrs	r3, r6
 800c84c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c850:	4543      	cmp	r3, r8
 800c852:	ec51 0b10 	vmov	r0, r1, d0
 800c856:	4635      	mov	r5, r6
 800c858:	d809      	bhi.n	800c86e <__ieee754_atan2+0x36>
 800c85a:	4244      	negs	r4, r0
 800c85c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c860:	4304      	orrs	r4, r0
 800c862:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c866:	4544      	cmp	r4, r8
 800c868:	468e      	mov	lr, r1
 800c86a:	4681      	mov	r9, r0
 800c86c:	d907      	bls.n	800c87e <__ieee754_atan2+0x46>
 800c86e:	4632      	mov	r2, r6
 800c870:	463b      	mov	r3, r7
 800c872:	f7f3 fd3b 	bl	80002ec <__adddf3>
 800c876:	ec41 0b10 	vmov	d0, r0, r1
 800c87a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c87e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800c882:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800c886:	4334      	orrs	r4, r6
 800c888:	d103      	bne.n	800c892 <__ieee754_atan2+0x5a>
 800c88a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c88e:	f000 b89b 	b.w	800c9c8 <atan>
 800c892:	17bc      	asrs	r4, r7, #30
 800c894:	f004 0402 	and.w	r4, r4, #2
 800c898:	ea53 0909 	orrs.w	r9, r3, r9
 800c89c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c8a0:	d107      	bne.n	800c8b2 <__ieee754_atan2+0x7a>
 800c8a2:	2c02      	cmp	r4, #2
 800c8a4:	d05f      	beq.n	800c966 <__ieee754_atan2+0x12e>
 800c8a6:	2c03      	cmp	r4, #3
 800c8a8:	d1e5      	bne.n	800c876 <__ieee754_atan2+0x3e>
 800c8aa:	a141      	add	r1, pc, #260	@ (adr r1, 800c9b0 <__ieee754_atan2+0x178>)
 800c8ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8b0:	e7e1      	b.n	800c876 <__ieee754_atan2+0x3e>
 800c8b2:	4315      	orrs	r5, r2
 800c8b4:	d106      	bne.n	800c8c4 <__ieee754_atan2+0x8c>
 800c8b6:	f1be 0f00 	cmp.w	lr, #0
 800c8ba:	da5f      	bge.n	800c97c <__ieee754_atan2+0x144>
 800c8bc:	a13e      	add	r1, pc, #248	@ (adr r1, 800c9b8 <__ieee754_atan2+0x180>)
 800c8be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8c2:	e7d8      	b.n	800c876 <__ieee754_atan2+0x3e>
 800c8c4:	4542      	cmp	r2, r8
 800c8c6:	d10f      	bne.n	800c8e8 <__ieee754_atan2+0xb0>
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800c8ce:	d107      	bne.n	800c8e0 <__ieee754_atan2+0xa8>
 800c8d0:	2c02      	cmp	r4, #2
 800c8d2:	d84c      	bhi.n	800c96e <__ieee754_atan2+0x136>
 800c8d4:	4b34      	ldr	r3, [pc, #208]	@ (800c9a8 <__ieee754_atan2+0x170>)
 800c8d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c8da:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c8de:	e7ca      	b.n	800c876 <__ieee754_atan2+0x3e>
 800c8e0:	2c02      	cmp	r4, #2
 800c8e2:	d848      	bhi.n	800c976 <__ieee754_atan2+0x13e>
 800c8e4:	4b31      	ldr	r3, [pc, #196]	@ (800c9ac <__ieee754_atan2+0x174>)
 800c8e6:	e7f6      	b.n	800c8d6 <__ieee754_atan2+0x9e>
 800c8e8:	4543      	cmp	r3, r8
 800c8ea:	d0e4      	beq.n	800c8b6 <__ieee754_atan2+0x7e>
 800c8ec:	1a9b      	subs	r3, r3, r2
 800c8ee:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800c8f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c8f6:	da1e      	bge.n	800c936 <__ieee754_atan2+0xfe>
 800c8f8:	2f00      	cmp	r7, #0
 800c8fa:	da01      	bge.n	800c900 <__ieee754_atan2+0xc8>
 800c8fc:	323c      	adds	r2, #60	@ 0x3c
 800c8fe:	db1e      	blt.n	800c93e <__ieee754_atan2+0x106>
 800c900:	4632      	mov	r2, r6
 800c902:	463b      	mov	r3, r7
 800c904:	f7f3 ffd2 	bl	80008ac <__aeabi_ddiv>
 800c908:	ec41 0b10 	vmov	d0, r0, r1
 800c90c:	f000 f9f4 	bl	800ccf8 <fabs>
 800c910:	f000 f85a 	bl	800c9c8 <atan>
 800c914:	ec51 0b10 	vmov	r0, r1, d0
 800c918:	2c01      	cmp	r4, #1
 800c91a:	d013      	beq.n	800c944 <__ieee754_atan2+0x10c>
 800c91c:	2c02      	cmp	r4, #2
 800c91e:	d015      	beq.n	800c94c <__ieee754_atan2+0x114>
 800c920:	2c00      	cmp	r4, #0
 800c922:	d0a8      	beq.n	800c876 <__ieee754_atan2+0x3e>
 800c924:	a318      	add	r3, pc, #96	@ (adr r3, 800c988 <__ieee754_atan2+0x150>)
 800c926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92a:	f7f3 fcdd 	bl	80002e8 <__aeabi_dsub>
 800c92e:	a318      	add	r3, pc, #96	@ (adr r3, 800c990 <__ieee754_atan2+0x158>)
 800c930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c934:	e014      	b.n	800c960 <__ieee754_atan2+0x128>
 800c936:	a118      	add	r1, pc, #96	@ (adr r1, 800c998 <__ieee754_atan2+0x160>)
 800c938:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c93c:	e7ec      	b.n	800c918 <__ieee754_atan2+0xe0>
 800c93e:	2000      	movs	r0, #0
 800c940:	2100      	movs	r1, #0
 800c942:	e7e9      	b.n	800c918 <__ieee754_atan2+0xe0>
 800c944:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c948:	4619      	mov	r1, r3
 800c94a:	e794      	b.n	800c876 <__ieee754_atan2+0x3e>
 800c94c:	a30e      	add	r3, pc, #56	@ (adr r3, 800c988 <__ieee754_atan2+0x150>)
 800c94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c952:	f7f3 fcc9 	bl	80002e8 <__aeabi_dsub>
 800c956:	4602      	mov	r2, r0
 800c958:	460b      	mov	r3, r1
 800c95a:	a10d      	add	r1, pc, #52	@ (adr r1, 800c990 <__ieee754_atan2+0x158>)
 800c95c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c960:	f7f3 fcc2 	bl	80002e8 <__aeabi_dsub>
 800c964:	e787      	b.n	800c876 <__ieee754_atan2+0x3e>
 800c966:	a10a      	add	r1, pc, #40	@ (adr r1, 800c990 <__ieee754_atan2+0x158>)
 800c968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c96c:	e783      	b.n	800c876 <__ieee754_atan2+0x3e>
 800c96e:	a10c      	add	r1, pc, #48	@ (adr r1, 800c9a0 <__ieee754_atan2+0x168>)
 800c970:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c974:	e77f      	b.n	800c876 <__ieee754_atan2+0x3e>
 800c976:	2000      	movs	r0, #0
 800c978:	2100      	movs	r1, #0
 800c97a:	e77c      	b.n	800c876 <__ieee754_atan2+0x3e>
 800c97c:	a106      	add	r1, pc, #24	@ (adr r1, 800c998 <__ieee754_atan2+0x160>)
 800c97e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c982:	e778      	b.n	800c876 <__ieee754_atan2+0x3e>
 800c984:	f3af 8000 	nop.w
 800c988:	33145c07 	.word	0x33145c07
 800c98c:	3ca1a626 	.word	0x3ca1a626
 800c990:	54442d18 	.word	0x54442d18
 800c994:	400921fb 	.word	0x400921fb
 800c998:	54442d18 	.word	0x54442d18
 800c99c:	3ff921fb 	.word	0x3ff921fb
 800c9a0:	54442d18 	.word	0x54442d18
 800c9a4:	3fe921fb 	.word	0x3fe921fb
 800c9a8:	0800d518 	.word	0x0800d518
 800c9ac:	0800d500 	.word	0x0800d500
 800c9b0:	54442d18 	.word	0x54442d18
 800c9b4:	c00921fb 	.word	0xc00921fb
 800c9b8:	54442d18 	.word	0x54442d18
 800c9bc:	bff921fb 	.word	0xbff921fb
 800c9c0:	7ff00000 	.word	0x7ff00000
 800c9c4:	00000000 	.word	0x00000000

0800c9c8 <atan>:
 800c9c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9cc:	ec55 4b10 	vmov	r4, r5, d0
 800c9d0:	4bbf      	ldr	r3, [pc, #764]	@ (800ccd0 <atan+0x308>)
 800c9d2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800c9d6:	429e      	cmp	r6, r3
 800c9d8:	46ab      	mov	fp, r5
 800c9da:	d918      	bls.n	800ca0e <atan+0x46>
 800c9dc:	4bbd      	ldr	r3, [pc, #756]	@ (800ccd4 <atan+0x30c>)
 800c9de:	429e      	cmp	r6, r3
 800c9e0:	d801      	bhi.n	800c9e6 <atan+0x1e>
 800c9e2:	d109      	bne.n	800c9f8 <atan+0x30>
 800c9e4:	b144      	cbz	r4, 800c9f8 <atan+0x30>
 800c9e6:	4622      	mov	r2, r4
 800c9e8:	462b      	mov	r3, r5
 800c9ea:	4620      	mov	r0, r4
 800c9ec:	4629      	mov	r1, r5
 800c9ee:	f7f3 fc7d 	bl	80002ec <__adddf3>
 800c9f2:	4604      	mov	r4, r0
 800c9f4:	460d      	mov	r5, r1
 800c9f6:	e006      	b.n	800ca06 <atan+0x3e>
 800c9f8:	f1bb 0f00 	cmp.w	fp, #0
 800c9fc:	f340 812b 	ble.w	800cc56 <atan+0x28e>
 800ca00:	a597      	add	r5, pc, #604	@ (adr r5, 800cc60 <atan+0x298>)
 800ca02:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ca06:	ec45 4b10 	vmov	d0, r4, r5
 800ca0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca0e:	4bb2      	ldr	r3, [pc, #712]	@ (800ccd8 <atan+0x310>)
 800ca10:	429e      	cmp	r6, r3
 800ca12:	d813      	bhi.n	800ca3c <atan+0x74>
 800ca14:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800ca18:	429e      	cmp	r6, r3
 800ca1a:	d80c      	bhi.n	800ca36 <atan+0x6e>
 800ca1c:	a392      	add	r3, pc, #584	@ (adr r3, 800cc68 <atan+0x2a0>)
 800ca1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca22:	4620      	mov	r0, r4
 800ca24:	4629      	mov	r1, r5
 800ca26:	f7f3 fc61 	bl	80002ec <__adddf3>
 800ca2a:	4bac      	ldr	r3, [pc, #688]	@ (800ccdc <atan+0x314>)
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	f7f4 f8a3 	bl	8000b78 <__aeabi_dcmpgt>
 800ca32:	2800      	cmp	r0, #0
 800ca34:	d1e7      	bne.n	800ca06 <atan+0x3e>
 800ca36:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ca3a:	e029      	b.n	800ca90 <atan+0xc8>
 800ca3c:	f000 f95c 	bl	800ccf8 <fabs>
 800ca40:	4ba7      	ldr	r3, [pc, #668]	@ (800cce0 <atan+0x318>)
 800ca42:	429e      	cmp	r6, r3
 800ca44:	ec55 4b10 	vmov	r4, r5, d0
 800ca48:	f200 80bc 	bhi.w	800cbc4 <atan+0x1fc>
 800ca4c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800ca50:	429e      	cmp	r6, r3
 800ca52:	f200 809e 	bhi.w	800cb92 <atan+0x1ca>
 800ca56:	4622      	mov	r2, r4
 800ca58:	462b      	mov	r3, r5
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	4629      	mov	r1, r5
 800ca5e:	f7f3 fc45 	bl	80002ec <__adddf3>
 800ca62:	4b9e      	ldr	r3, [pc, #632]	@ (800ccdc <atan+0x314>)
 800ca64:	2200      	movs	r2, #0
 800ca66:	f7f3 fc3f 	bl	80002e8 <__aeabi_dsub>
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	4606      	mov	r6, r0
 800ca6e:	460f      	mov	r7, r1
 800ca70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ca74:	4620      	mov	r0, r4
 800ca76:	4629      	mov	r1, r5
 800ca78:	f7f3 fc38 	bl	80002ec <__adddf3>
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	460b      	mov	r3, r1
 800ca80:	4630      	mov	r0, r6
 800ca82:	4639      	mov	r1, r7
 800ca84:	f7f3 ff12 	bl	80008ac <__aeabi_ddiv>
 800ca88:	f04f 0a00 	mov.w	sl, #0
 800ca8c:	4604      	mov	r4, r0
 800ca8e:	460d      	mov	r5, r1
 800ca90:	4622      	mov	r2, r4
 800ca92:	462b      	mov	r3, r5
 800ca94:	4620      	mov	r0, r4
 800ca96:	4629      	mov	r1, r5
 800ca98:	f7f3 fdde 	bl	8000658 <__aeabi_dmul>
 800ca9c:	4602      	mov	r2, r0
 800ca9e:	460b      	mov	r3, r1
 800caa0:	4680      	mov	r8, r0
 800caa2:	4689      	mov	r9, r1
 800caa4:	f7f3 fdd8 	bl	8000658 <__aeabi_dmul>
 800caa8:	a371      	add	r3, pc, #452	@ (adr r3, 800cc70 <atan+0x2a8>)
 800caaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caae:	4606      	mov	r6, r0
 800cab0:	460f      	mov	r7, r1
 800cab2:	f7f3 fdd1 	bl	8000658 <__aeabi_dmul>
 800cab6:	a370      	add	r3, pc, #448	@ (adr r3, 800cc78 <atan+0x2b0>)
 800cab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cabc:	f7f3 fc16 	bl	80002ec <__adddf3>
 800cac0:	4632      	mov	r2, r6
 800cac2:	463b      	mov	r3, r7
 800cac4:	f7f3 fdc8 	bl	8000658 <__aeabi_dmul>
 800cac8:	a36d      	add	r3, pc, #436	@ (adr r3, 800cc80 <atan+0x2b8>)
 800caca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cace:	f7f3 fc0d 	bl	80002ec <__adddf3>
 800cad2:	4632      	mov	r2, r6
 800cad4:	463b      	mov	r3, r7
 800cad6:	f7f3 fdbf 	bl	8000658 <__aeabi_dmul>
 800cada:	a36b      	add	r3, pc, #428	@ (adr r3, 800cc88 <atan+0x2c0>)
 800cadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae0:	f7f3 fc04 	bl	80002ec <__adddf3>
 800cae4:	4632      	mov	r2, r6
 800cae6:	463b      	mov	r3, r7
 800cae8:	f7f3 fdb6 	bl	8000658 <__aeabi_dmul>
 800caec:	a368      	add	r3, pc, #416	@ (adr r3, 800cc90 <atan+0x2c8>)
 800caee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf2:	f7f3 fbfb 	bl	80002ec <__adddf3>
 800caf6:	4632      	mov	r2, r6
 800caf8:	463b      	mov	r3, r7
 800cafa:	f7f3 fdad 	bl	8000658 <__aeabi_dmul>
 800cafe:	a366      	add	r3, pc, #408	@ (adr r3, 800cc98 <atan+0x2d0>)
 800cb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb04:	f7f3 fbf2 	bl	80002ec <__adddf3>
 800cb08:	4642      	mov	r2, r8
 800cb0a:	464b      	mov	r3, r9
 800cb0c:	f7f3 fda4 	bl	8000658 <__aeabi_dmul>
 800cb10:	a363      	add	r3, pc, #396	@ (adr r3, 800cca0 <atan+0x2d8>)
 800cb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb16:	4680      	mov	r8, r0
 800cb18:	4689      	mov	r9, r1
 800cb1a:	4630      	mov	r0, r6
 800cb1c:	4639      	mov	r1, r7
 800cb1e:	f7f3 fd9b 	bl	8000658 <__aeabi_dmul>
 800cb22:	a361      	add	r3, pc, #388	@ (adr r3, 800cca8 <atan+0x2e0>)
 800cb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb28:	f7f3 fbde 	bl	80002e8 <__aeabi_dsub>
 800cb2c:	4632      	mov	r2, r6
 800cb2e:	463b      	mov	r3, r7
 800cb30:	f7f3 fd92 	bl	8000658 <__aeabi_dmul>
 800cb34:	a35e      	add	r3, pc, #376	@ (adr r3, 800ccb0 <atan+0x2e8>)
 800cb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3a:	f7f3 fbd5 	bl	80002e8 <__aeabi_dsub>
 800cb3e:	4632      	mov	r2, r6
 800cb40:	463b      	mov	r3, r7
 800cb42:	f7f3 fd89 	bl	8000658 <__aeabi_dmul>
 800cb46:	a35c      	add	r3, pc, #368	@ (adr r3, 800ccb8 <atan+0x2f0>)
 800cb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb4c:	f7f3 fbcc 	bl	80002e8 <__aeabi_dsub>
 800cb50:	4632      	mov	r2, r6
 800cb52:	463b      	mov	r3, r7
 800cb54:	f7f3 fd80 	bl	8000658 <__aeabi_dmul>
 800cb58:	a359      	add	r3, pc, #356	@ (adr r3, 800ccc0 <atan+0x2f8>)
 800cb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5e:	f7f3 fbc3 	bl	80002e8 <__aeabi_dsub>
 800cb62:	4632      	mov	r2, r6
 800cb64:	463b      	mov	r3, r7
 800cb66:	f7f3 fd77 	bl	8000658 <__aeabi_dmul>
 800cb6a:	4602      	mov	r2, r0
 800cb6c:	460b      	mov	r3, r1
 800cb6e:	4640      	mov	r0, r8
 800cb70:	4649      	mov	r1, r9
 800cb72:	f7f3 fbbb 	bl	80002ec <__adddf3>
 800cb76:	4622      	mov	r2, r4
 800cb78:	462b      	mov	r3, r5
 800cb7a:	f7f3 fd6d 	bl	8000658 <__aeabi_dmul>
 800cb7e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800cb82:	4602      	mov	r2, r0
 800cb84:	460b      	mov	r3, r1
 800cb86:	d148      	bne.n	800cc1a <atan+0x252>
 800cb88:	4620      	mov	r0, r4
 800cb8a:	4629      	mov	r1, r5
 800cb8c:	f7f3 fbac 	bl	80002e8 <__aeabi_dsub>
 800cb90:	e72f      	b.n	800c9f2 <atan+0x2a>
 800cb92:	4b52      	ldr	r3, [pc, #328]	@ (800ccdc <atan+0x314>)
 800cb94:	2200      	movs	r2, #0
 800cb96:	4620      	mov	r0, r4
 800cb98:	4629      	mov	r1, r5
 800cb9a:	f7f3 fba5 	bl	80002e8 <__aeabi_dsub>
 800cb9e:	4b4f      	ldr	r3, [pc, #316]	@ (800ccdc <atan+0x314>)
 800cba0:	4606      	mov	r6, r0
 800cba2:	460f      	mov	r7, r1
 800cba4:	2200      	movs	r2, #0
 800cba6:	4620      	mov	r0, r4
 800cba8:	4629      	mov	r1, r5
 800cbaa:	f7f3 fb9f 	bl	80002ec <__adddf3>
 800cbae:	4602      	mov	r2, r0
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	4630      	mov	r0, r6
 800cbb4:	4639      	mov	r1, r7
 800cbb6:	f7f3 fe79 	bl	80008ac <__aeabi_ddiv>
 800cbba:	f04f 0a01 	mov.w	sl, #1
 800cbbe:	4604      	mov	r4, r0
 800cbc0:	460d      	mov	r5, r1
 800cbc2:	e765      	b.n	800ca90 <atan+0xc8>
 800cbc4:	4b47      	ldr	r3, [pc, #284]	@ (800cce4 <atan+0x31c>)
 800cbc6:	429e      	cmp	r6, r3
 800cbc8:	d21c      	bcs.n	800cc04 <atan+0x23c>
 800cbca:	4b47      	ldr	r3, [pc, #284]	@ (800cce8 <atan+0x320>)
 800cbcc:	2200      	movs	r2, #0
 800cbce:	4620      	mov	r0, r4
 800cbd0:	4629      	mov	r1, r5
 800cbd2:	f7f3 fb89 	bl	80002e8 <__aeabi_dsub>
 800cbd6:	4b44      	ldr	r3, [pc, #272]	@ (800cce8 <atan+0x320>)
 800cbd8:	4606      	mov	r6, r0
 800cbda:	460f      	mov	r7, r1
 800cbdc:	2200      	movs	r2, #0
 800cbde:	4620      	mov	r0, r4
 800cbe0:	4629      	mov	r1, r5
 800cbe2:	f7f3 fd39 	bl	8000658 <__aeabi_dmul>
 800cbe6:	4b3d      	ldr	r3, [pc, #244]	@ (800ccdc <atan+0x314>)
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f7f3 fb7f 	bl	80002ec <__adddf3>
 800cbee:	4602      	mov	r2, r0
 800cbf0:	460b      	mov	r3, r1
 800cbf2:	4630      	mov	r0, r6
 800cbf4:	4639      	mov	r1, r7
 800cbf6:	f7f3 fe59 	bl	80008ac <__aeabi_ddiv>
 800cbfa:	f04f 0a02 	mov.w	sl, #2
 800cbfe:	4604      	mov	r4, r0
 800cc00:	460d      	mov	r5, r1
 800cc02:	e745      	b.n	800ca90 <atan+0xc8>
 800cc04:	4622      	mov	r2, r4
 800cc06:	462b      	mov	r3, r5
 800cc08:	4938      	ldr	r1, [pc, #224]	@ (800ccec <atan+0x324>)
 800cc0a:	2000      	movs	r0, #0
 800cc0c:	f7f3 fe4e 	bl	80008ac <__aeabi_ddiv>
 800cc10:	f04f 0a03 	mov.w	sl, #3
 800cc14:	4604      	mov	r4, r0
 800cc16:	460d      	mov	r5, r1
 800cc18:	e73a      	b.n	800ca90 <atan+0xc8>
 800cc1a:	4b35      	ldr	r3, [pc, #212]	@ (800ccf0 <atan+0x328>)
 800cc1c:	4e35      	ldr	r6, [pc, #212]	@ (800ccf4 <atan+0x32c>)
 800cc1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc26:	f7f3 fb5f 	bl	80002e8 <__aeabi_dsub>
 800cc2a:	4622      	mov	r2, r4
 800cc2c:	462b      	mov	r3, r5
 800cc2e:	f7f3 fb5b 	bl	80002e8 <__aeabi_dsub>
 800cc32:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cc36:	4602      	mov	r2, r0
 800cc38:	460b      	mov	r3, r1
 800cc3a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cc3e:	f7f3 fb53 	bl	80002e8 <__aeabi_dsub>
 800cc42:	f1bb 0f00 	cmp.w	fp, #0
 800cc46:	4604      	mov	r4, r0
 800cc48:	460d      	mov	r5, r1
 800cc4a:	f6bf aedc 	bge.w	800ca06 <atan+0x3e>
 800cc4e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cc52:	461d      	mov	r5, r3
 800cc54:	e6d7      	b.n	800ca06 <atan+0x3e>
 800cc56:	a51c      	add	r5, pc, #112	@ (adr r5, 800ccc8 <atan+0x300>)
 800cc58:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cc5c:	e6d3      	b.n	800ca06 <atan+0x3e>
 800cc5e:	bf00      	nop
 800cc60:	54442d18 	.word	0x54442d18
 800cc64:	3ff921fb 	.word	0x3ff921fb
 800cc68:	8800759c 	.word	0x8800759c
 800cc6c:	7e37e43c 	.word	0x7e37e43c
 800cc70:	e322da11 	.word	0xe322da11
 800cc74:	3f90ad3a 	.word	0x3f90ad3a
 800cc78:	24760deb 	.word	0x24760deb
 800cc7c:	3fa97b4b 	.word	0x3fa97b4b
 800cc80:	a0d03d51 	.word	0xa0d03d51
 800cc84:	3fb10d66 	.word	0x3fb10d66
 800cc88:	c54c206e 	.word	0xc54c206e
 800cc8c:	3fb745cd 	.word	0x3fb745cd
 800cc90:	920083ff 	.word	0x920083ff
 800cc94:	3fc24924 	.word	0x3fc24924
 800cc98:	5555550d 	.word	0x5555550d
 800cc9c:	3fd55555 	.word	0x3fd55555
 800cca0:	2c6a6c2f 	.word	0x2c6a6c2f
 800cca4:	bfa2b444 	.word	0xbfa2b444
 800cca8:	52defd9a 	.word	0x52defd9a
 800ccac:	3fadde2d 	.word	0x3fadde2d
 800ccb0:	af749a6d 	.word	0xaf749a6d
 800ccb4:	3fb3b0f2 	.word	0x3fb3b0f2
 800ccb8:	fe231671 	.word	0xfe231671
 800ccbc:	3fbc71c6 	.word	0x3fbc71c6
 800ccc0:	9998ebc4 	.word	0x9998ebc4
 800ccc4:	3fc99999 	.word	0x3fc99999
 800ccc8:	54442d18 	.word	0x54442d18
 800cccc:	bff921fb 	.word	0xbff921fb
 800ccd0:	440fffff 	.word	0x440fffff
 800ccd4:	7ff00000 	.word	0x7ff00000
 800ccd8:	3fdbffff 	.word	0x3fdbffff
 800ccdc:	3ff00000 	.word	0x3ff00000
 800cce0:	3ff2ffff 	.word	0x3ff2ffff
 800cce4:	40038000 	.word	0x40038000
 800cce8:	3ff80000 	.word	0x3ff80000
 800ccec:	bff00000 	.word	0xbff00000
 800ccf0:	0800d530 	.word	0x0800d530
 800ccf4:	0800d550 	.word	0x0800d550

0800ccf8 <fabs>:
 800ccf8:	ec51 0b10 	vmov	r0, r1, d0
 800ccfc:	4602      	mov	r2, r0
 800ccfe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cd02:	ec43 2b10 	vmov	d0, r2, r3
 800cd06:	4770      	bx	lr

0800cd08 <_init>:
 800cd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd0a:	bf00      	nop
 800cd0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd0e:	bc08      	pop	{r3}
 800cd10:	469e      	mov	lr, r3
 800cd12:	4770      	bx	lr

0800cd14 <_fini>:
 800cd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd16:	bf00      	nop
 800cd18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd1a:	bc08      	pop	{r3}
 800cd1c:	469e      	mov	lr, r3
 800cd1e:	4770      	bx	lr
