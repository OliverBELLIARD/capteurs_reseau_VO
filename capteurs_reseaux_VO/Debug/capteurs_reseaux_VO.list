
capteurs_reseaux_VO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f14  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  080050e4  080050e4  000060e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005298  08005298  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005298  08005298  00006298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052a0  080052a0  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052a0  080052a0  000062a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052a4  080052a4  000062a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080052a8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000068  08005310  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08005310  000072d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1e8  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002066  00000000  00000000  00013280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  000152e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000869  00000000  00000000  00015dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b10  00000000  00000000  00016631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f24d  00000000  00000000  00039141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccb9f  00000000  00000000  0004838e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114f2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003400  00000000  00000000  00114f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00118370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080050cc 	.word	0x080050cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080050cc 	.word	0x080050cc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ce:	f000 b9b5 	b.w	800063c <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000364:	f000 b96a 	b.w	800063c <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	460c      	mov	r4, r1
 8000388:	2b00      	cmp	r3, #0
 800038a:	d14e      	bne.n	800042a <__udivmoddi4+0xaa>
 800038c:	4694      	mov	ip, r2
 800038e:	458c      	cmp	ip, r1
 8000390:	4686      	mov	lr, r0
 8000392:	fab2 f282 	clz	r2, r2
 8000396:	d962      	bls.n	800045e <__udivmoddi4+0xde>
 8000398:	b14a      	cbz	r2, 80003ae <__udivmoddi4+0x2e>
 800039a:	f1c2 0320 	rsb	r3, r2, #32
 800039e:	4091      	lsls	r1, r2
 80003a0:	fa20 f303 	lsr.w	r3, r0, r3
 80003a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003a8:	4319      	orrs	r1, r3
 80003aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f f68c 	uxth.w	r6, ip
 80003b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003be:	fb07 1114 	mls	r1, r7, r4, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb04 f106 	mul.w	r1, r4, r6
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80003d6:	f080 8112 	bcs.w	80005fe <__udivmoddi4+0x27e>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 810f 	bls.w	80005fe <__udivmoddi4+0x27e>
 80003e0:	3c02      	subs	r4, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	fa1f f38e 	uxth.w	r3, lr
 80003ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ee:	fb07 1110 	mls	r1, r7, r0, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb00 f606 	mul.w	r6, r0, r6
 80003fa:	429e      	cmp	r6, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x94>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000406:	f080 80fc 	bcs.w	8000602 <__udivmoddi4+0x282>
 800040a:	429e      	cmp	r6, r3
 800040c:	f240 80f9 	bls.w	8000602 <__udivmoddi4+0x282>
 8000410:	4463      	add	r3, ip
 8000412:	3802      	subs	r0, #2
 8000414:	1b9b      	subs	r3, r3, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	2100      	movs	r1, #0
 800041c:	b11d      	cbz	r5, 8000426 <__udivmoddi4+0xa6>
 800041e:	40d3      	lsrs	r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	e9c5 3200 	strd	r3, r2, [r5]
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d905      	bls.n	800043a <__udivmoddi4+0xba>
 800042e:	b10d      	cbz	r5, 8000434 <__udivmoddi4+0xb4>
 8000430:	e9c5 0100 	strd	r0, r1, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	4608      	mov	r0, r1
 8000438:	e7f5      	b.n	8000426 <__udivmoddi4+0xa6>
 800043a:	fab3 f183 	clz	r1, r3
 800043e:	2900      	cmp	r1, #0
 8000440:	d146      	bne.n	80004d0 <__udivmoddi4+0x150>
 8000442:	42a3      	cmp	r3, r4
 8000444:	d302      	bcc.n	800044c <__udivmoddi4+0xcc>
 8000446:	4290      	cmp	r0, r2
 8000448:	f0c0 80f0 	bcc.w	800062c <__udivmoddi4+0x2ac>
 800044c:	1a86      	subs	r6, r0, r2
 800044e:	eb64 0303 	sbc.w	r3, r4, r3
 8000452:	2001      	movs	r0, #1
 8000454:	2d00      	cmp	r5, #0
 8000456:	d0e6      	beq.n	8000426 <__udivmoddi4+0xa6>
 8000458:	e9c5 6300 	strd	r6, r3, [r5]
 800045c:	e7e3      	b.n	8000426 <__udivmoddi4+0xa6>
 800045e:	2a00      	cmp	r2, #0
 8000460:	f040 8090 	bne.w	8000584 <__udivmoddi4+0x204>
 8000464:	eba1 040c 	sub.w	r4, r1, ip
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa1f f78c 	uxth.w	r7, ip
 8000470:	2101      	movs	r1, #1
 8000472:	fbb4 f6f8 	udiv	r6, r4, r8
 8000476:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800047a:	fb08 4416 	mls	r4, r8, r6, r4
 800047e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000482:	fb07 f006 	mul.w	r0, r7, r6
 8000486:	4298      	cmp	r0, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x11c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x11a>
 8000494:	4298      	cmp	r0, r3
 8000496:	f200 80cd 	bhi.w	8000634 <__udivmoddi4+0x2b4>
 800049a:	4626      	mov	r6, r4
 800049c:	1a1c      	subs	r4, r3, r0
 800049e:	fa1f f38e 	uxth.w	r3, lr
 80004a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004a6:	fb08 4410 	mls	r4, r8, r0, r4
 80004aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ae:	fb00 f707 	mul.w	r7, r0, r7
 80004b2:	429f      	cmp	r7, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x148>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004be:	d202      	bcs.n	80004c6 <__udivmoddi4+0x146>
 80004c0:	429f      	cmp	r7, r3
 80004c2:	f200 80b0 	bhi.w	8000626 <__udivmoddi4+0x2a6>
 80004c6:	4620      	mov	r0, r4
 80004c8:	1bdb      	subs	r3, r3, r7
 80004ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ce:	e7a5      	b.n	800041c <__udivmoddi4+0x9c>
 80004d0:	f1c1 0620 	rsb	r6, r1, #32
 80004d4:	408b      	lsls	r3, r1
 80004d6:	fa22 f706 	lsr.w	r7, r2, r6
 80004da:	431f      	orrs	r7, r3
 80004dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004e0:	fa04 f301 	lsl.w	r3, r4, r1
 80004e4:	ea43 030c 	orr.w	r3, r3, ip
 80004e8:	40f4      	lsrs	r4, r6
 80004ea:	fa00 f801 	lsl.w	r8, r0, r1
 80004ee:	0c38      	lsrs	r0, r7, #16
 80004f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004f4:	fbb4 fef0 	udiv	lr, r4, r0
 80004f8:	fa1f fc87 	uxth.w	ip, r7
 80004fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000500:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000504:	fb0e f90c 	mul.w	r9, lr, ip
 8000508:	45a1      	cmp	r9, r4
 800050a:	fa02 f201 	lsl.w	r2, r2, r1
 800050e:	d90a      	bls.n	8000526 <__udivmoddi4+0x1a6>
 8000510:	193c      	adds	r4, r7, r4
 8000512:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000516:	f080 8084 	bcs.w	8000622 <__udivmoddi4+0x2a2>
 800051a:	45a1      	cmp	r9, r4
 800051c:	f240 8081 	bls.w	8000622 <__udivmoddi4+0x2a2>
 8000520:	f1ae 0e02 	sub.w	lr, lr, #2
 8000524:	443c      	add	r4, r7
 8000526:	eba4 0409 	sub.w	r4, r4, r9
 800052a:	fa1f f983 	uxth.w	r9, r3
 800052e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000532:	fb00 4413 	mls	r4, r0, r3, r4
 8000536:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800053a:	fb03 fc0c 	mul.w	ip, r3, ip
 800053e:	45a4      	cmp	ip, r4
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x1d2>
 8000542:	193c      	adds	r4, r7, r4
 8000544:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000548:	d267      	bcs.n	800061a <__udivmoddi4+0x29a>
 800054a:	45a4      	cmp	ip, r4
 800054c:	d965      	bls.n	800061a <__udivmoddi4+0x29a>
 800054e:	3b02      	subs	r3, #2
 8000550:	443c      	add	r4, r7
 8000552:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000556:	fba0 9302 	umull	r9, r3, r0, r2
 800055a:	eba4 040c 	sub.w	r4, r4, ip
 800055e:	429c      	cmp	r4, r3
 8000560:	46ce      	mov	lr, r9
 8000562:	469c      	mov	ip, r3
 8000564:	d351      	bcc.n	800060a <__udivmoddi4+0x28a>
 8000566:	d04e      	beq.n	8000606 <__udivmoddi4+0x286>
 8000568:	b155      	cbz	r5, 8000580 <__udivmoddi4+0x200>
 800056a:	ebb8 030e 	subs.w	r3, r8, lr
 800056e:	eb64 040c 	sbc.w	r4, r4, ip
 8000572:	fa04 f606 	lsl.w	r6, r4, r6
 8000576:	40cb      	lsrs	r3, r1
 8000578:	431e      	orrs	r6, r3
 800057a:	40cc      	lsrs	r4, r1
 800057c:	e9c5 6400 	strd	r6, r4, [r5]
 8000580:	2100      	movs	r1, #0
 8000582:	e750      	b.n	8000426 <__udivmoddi4+0xa6>
 8000584:	f1c2 0320 	rsb	r3, r2, #32
 8000588:	fa20 f103 	lsr.w	r1, r0, r3
 800058c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000590:	fa24 f303 	lsr.w	r3, r4, r3
 8000594:	4094      	lsls	r4, r2
 8000596:	430c      	orrs	r4, r1
 8000598:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800059c:	fa00 fe02 	lsl.w	lr, r0, r2
 80005a0:	fa1f f78c 	uxth.w	r7, ip
 80005a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005a8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ac:	0c23      	lsrs	r3, r4, #16
 80005ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005b2:	fb00 f107 	mul.w	r1, r0, r7
 80005b6:	4299      	cmp	r1, r3
 80005b8:	d908      	bls.n	80005cc <__udivmoddi4+0x24c>
 80005ba:	eb1c 0303 	adds.w	r3, ip, r3
 80005be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005c2:	d22c      	bcs.n	800061e <__udivmoddi4+0x29e>
 80005c4:	4299      	cmp	r1, r3
 80005c6:	d92a      	bls.n	800061e <__udivmoddi4+0x29e>
 80005c8:	3802      	subs	r0, #2
 80005ca:	4463      	add	r3, ip
 80005cc:	1a5b      	subs	r3, r3, r1
 80005ce:	b2a4      	uxth	r4, r4
 80005d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005d4:	fb08 3311 	mls	r3, r8, r1, r3
 80005d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005dc:	fb01 f307 	mul.w	r3, r1, r7
 80005e0:	42a3      	cmp	r3, r4
 80005e2:	d908      	bls.n	80005f6 <__udivmoddi4+0x276>
 80005e4:	eb1c 0404 	adds.w	r4, ip, r4
 80005e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005ec:	d213      	bcs.n	8000616 <__udivmoddi4+0x296>
 80005ee:	42a3      	cmp	r3, r4
 80005f0:	d911      	bls.n	8000616 <__udivmoddi4+0x296>
 80005f2:	3902      	subs	r1, #2
 80005f4:	4464      	add	r4, ip
 80005f6:	1ae4      	subs	r4, r4, r3
 80005f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005fc:	e739      	b.n	8000472 <__udivmoddi4+0xf2>
 80005fe:	4604      	mov	r4, r0
 8000600:	e6f0      	b.n	80003e4 <__udivmoddi4+0x64>
 8000602:	4608      	mov	r0, r1
 8000604:	e706      	b.n	8000414 <__udivmoddi4+0x94>
 8000606:	45c8      	cmp	r8, r9
 8000608:	d2ae      	bcs.n	8000568 <__udivmoddi4+0x1e8>
 800060a:	ebb9 0e02 	subs.w	lr, r9, r2
 800060e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000612:	3801      	subs	r0, #1
 8000614:	e7a8      	b.n	8000568 <__udivmoddi4+0x1e8>
 8000616:	4631      	mov	r1, r6
 8000618:	e7ed      	b.n	80005f6 <__udivmoddi4+0x276>
 800061a:	4603      	mov	r3, r0
 800061c:	e799      	b.n	8000552 <__udivmoddi4+0x1d2>
 800061e:	4630      	mov	r0, r6
 8000620:	e7d4      	b.n	80005cc <__udivmoddi4+0x24c>
 8000622:	46d6      	mov	lr, sl
 8000624:	e77f      	b.n	8000526 <__udivmoddi4+0x1a6>
 8000626:	4463      	add	r3, ip
 8000628:	3802      	subs	r0, #2
 800062a:	e74d      	b.n	80004c8 <__udivmoddi4+0x148>
 800062c:	4606      	mov	r6, r0
 800062e:	4623      	mov	r3, r4
 8000630:	4608      	mov	r0, r1
 8000632:	e70f      	b.n	8000454 <__udivmoddi4+0xd4>
 8000634:	3e02      	subs	r6, #2
 8000636:	4463      	add	r3, ip
 8000638:	e730      	b.n	800049c <__udivmoddi4+0x11c>
 800063a:	bf00      	nop

0800063c <__aeabi_idiv0>:
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop

08000640 <BMP280_Check_id>:
#include "i2c.h"
#include "BMP280_driver.h"


int BMP280_Check_id(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af02      	add	r7, sp, #8
	uint8_t buff[BUFF_SIZE];
	HAL_StatusTypeDef ret; 		// I2C operations status

	buff[0] = BMP280_REG_ID;
 8000646:	23d0      	movs	r3, #208	@ 0xd0
 8000648:	713b      	strb	r3, [r7, #4]

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buff, 1, HAL_MAX_DELAY);
 800064a:	1d3a      	adds	r2, r7, #4
 800064c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2301      	movs	r3, #1
 8000654:	21ee      	movs	r1, #238	@ 0xee
 8000656:	4815      	ldr	r0, [pc, #84]	@ (80006ac <BMP280_Check_id+0x6c>)
 8000658:	f001 fcf0 	bl	800203c <HAL_I2C_Master_Transmit>
 800065c:	4603      	mov	r3, r0
 800065e:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d004      	beq.n	8000670 <BMP280_Check_id+0x30>
		printf("I2C Transmit failure\r\n");
 8000666:	4812      	ldr	r0, [pc, #72]	@ (80006b0 <BMP280_Check_id+0x70>)
 8000668:	f003 ff7a 	bl	8004560 <puts>
		return EXIT_FAILURE;
 800066c:	2301      	movs	r3, #1
 800066e:	e018      	b.n	80006a2 <BMP280_Check_id+0x62>
	}
	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buff, 1, HAL_MAX_DELAY);
 8000670:	1d3a      	adds	r2, r7, #4
 8000672:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	2301      	movs	r3, #1
 800067a:	21ee      	movs	r1, #238	@ 0xee
 800067c:	480b      	ldr	r0, [pc, #44]	@ (80006ac <BMP280_Check_id+0x6c>)
 800067e:	f001 fddb 	bl	8002238 <HAL_I2C_Master_Receive>
 8000682:	4603      	mov	r3, r0
 8000684:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d004      	beq.n	8000696 <BMP280_Check_id+0x56>
		printf("I2C Receive failure\r\n");
 800068c:	4809      	ldr	r0, [pc, #36]	@ (80006b4 <BMP280_Check_id+0x74>)
 800068e:	f003 ff67 	bl	8004560 <puts>
		return EXIT_FAILURE;
 8000692:	2301      	movs	r3, #1
 8000694:	e005      	b.n	80006a2 <BMP280_Check_id+0x62>
	}

	printf("BMP280 ID: 0x%X\r\n", buff[0]);
 8000696:	793b      	ldrb	r3, [r7, #4]
 8000698:	4619      	mov	r1, r3
 800069a:	4807      	ldr	r0, [pc, #28]	@ (80006b8 <BMP280_Check_id+0x78>)
 800069c:	f003 fef8 	bl	8004490 <iprintf>

	return EXIT_SUCCESS;
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200000a0 	.word	0x200000a0
 80006b0:	080050e4 	.word	0x080050e4
 80006b4:	080050fc 	.word	0x080050fc
 80006b8:	08005114 	.word	0x08005114

080006bc <BMP280_Config>:

int BMP280_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af02      	add	r7, sp, #8
	uint8_t buff[BUFF_SIZE];
	HAL_StatusTypeDef ret; 		// I2C operations status

	buff[0]= BMP280_REG_MODE;
 80006c2:	23f4      	movs	r3, #244	@ 0xf4
 80006c4:	713b      	strb	r3, [r7, #4]
	buff[1]= BMP280_CONFIG;
 80006c6:	2357      	movs	r3, #87	@ 0x57
 80006c8:	717b      	strb	r3, [r7, #5]

	ret = HAL_I2C_Master_Transmit(&hi2c1,BMP280_ADDR, buff, 2, HAL_MAX_DELAY);
 80006ca:	1d3a      	adds	r2, r7, #4
 80006cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2302      	movs	r3, #2
 80006d4:	21ee      	movs	r1, #238	@ 0xee
 80006d6:	4816      	ldr	r0, [pc, #88]	@ (8000730 <BMP280_Config+0x74>)
 80006d8:	f001 fcb0 	bl	800203c <HAL_I2C_Master_Transmit>
 80006dc:	4603      	mov	r3, r0
 80006de:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d004      	beq.n	80006f0 <BMP280_Config+0x34>
		printf("I2C Transmit failure\r\n");
 80006e6:	4813      	ldr	r0, [pc, #76]	@ (8000734 <BMP280_Config+0x78>)
 80006e8:	f003 ff3a 	bl	8004560 <puts>
		return EXIT_FAILURE;
 80006ec:	2301      	movs	r3, #1
 80006ee:	e01b      	b.n	8000728 <BMP280_Config+0x6c>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buff, 1, HAL_MAX_DELAY);
 80006f0:	1d3a      	adds	r2, r7, #4
 80006f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	2301      	movs	r3, #1
 80006fa:	21ee      	movs	r1, #238	@ 0xee
 80006fc:	480c      	ldr	r0, [pc, #48]	@ (8000730 <BMP280_Config+0x74>)
 80006fe:	f001 fd9b 	bl	8002238 <HAL_I2C_Master_Receive>
 8000702:	4603      	mov	r3, r0
 8000704:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d004      	beq.n	8000716 <BMP280_Config+0x5a>
		printf("I2C Receive failure\r\n");
 800070c:	480a      	ldr	r0, [pc, #40]	@ (8000738 <BMP280_Config+0x7c>)
 800070e:	f003 ff27 	bl	8004560 <puts>
		return EXIT_FAILURE;
 8000712:	2301      	movs	r3, #1
 8000714:	e008      	b.n	8000728 <BMP280_Config+0x6c>
	}

	if(buff[0] == BMP280_CONFIG){
 8000716:	793b      	ldrb	r3, [r7, #4]
 8000718:	2b57      	cmp	r3, #87	@ 0x57
 800071a:	d104      	bne.n	8000726 <BMP280_Config+0x6a>
		printf("La config envoyée reçue avec succès\r\n");
 800071c:	4807      	ldr	r0, [pc, #28]	@ (800073c <BMP280_Config+0x80>)
 800071e:	f003 ff1f 	bl	8004560 <puts>
		return EXIT_SUCCESS;
 8000722:	2300      	movs	r3, #0
 8000724:	e000      	b.n	8000728 <BMP280_Config+0x6c>
	}

	return EXIT_SUCCESS;
 8000726:	2300      	movs	r3, #0
}
 8000728:	4618      	mov	r0, r3
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200000a0 	.word	0x200000a0
 8000734:	080050e4 	.word	0x080050e4
 8000738:	080050fc 	.word	0x080050fc
 800073c:	08005128 	.word	0x08005128

08000740 <BMP280_calibration>:
BMP280_S32_t t_fine;
/*
 * Update the calibration parameters.
 */
void BMP280_calibration(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08c      	sub	sp, #48	@ 0x30
 8000744:	af02      	add	r7, sp, #8
	uint8_t buff[BUFF_SIZE];
	uint8_t receive_buf[24];
	HAL_StatusTypeDef ret; 		// I2C operations status

	buff[0]= BMP280_REG_CALIBRATION;
 8000746:	2388      	movs	r3, #136	@ 0x88
 8000748:	763b      	strb	r3, [r7, #24]

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buff, 1, HAL_MAX_DELAY);
 800074a:	f107 0218 	add.w	r2, r7, #24
 800074e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	2301      	movs	r3, #1
 8000756:	21ee      	movs	r1, #238	@ 0xee
 8000758:	4853      	ldr	r0, [pc, #332]	@ (80008a8 <BMP280_calibration+0x168>)
 800075a:	f001 fc6f 	bl	800203c <HAL_I2C_Master_Transmit>
 800075e:	4603      	mov	r3, r0
 8000760:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if(ret != HAL_OK){
 8000764:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000768:	2b00      	cmp	r3, #0
 800076a:	d002      	beq.n	8000772 <BMP280_calibration+0x32>
		printf("I2C Transmit failure\r\n");
 800076c:	484f      	ldr	r0, [pc, #316]	@ (80008ac <BMP280_calibration+0x16c>)
 800076e:	f003 fef7 	bl	8004560 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, receive_buf, 24, HAL_MAX_DELAY);
 8000772:	463a      	mov	r2, r7
 8000774:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2318      	movs	r3, #24
 800077c:	21ee      	movs	r1, #238	@ 0xee
 800077e:	484a      	ldr	r0, [pc, #296]	@ (80008a8 <BMP280_calibration+0x168>)
 8000780:	f001 fd5a 	bl	8002238 <HAL_I2C_Master_Receive>
 8000784:	4603      	mov	r3, r0
 8000786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if(ret != HAL_OK){
 800078a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800078e:	2b00      	cmp	r3, #0
 8000790:	d002      	beq.n	8000798 <BMP280_calibration+0x58>
		printf("I2C Receive failure\r\n");
 8000792:	4847      	ldr	r0, [pc, #284]	@ (80008b0 <BMP280_calibration+0x170>)
 8000794:	f003 fee4 	bl	8004560 <puts>
	}

	printf("Current calibration values:\r\n");
 8000798:	4846      	ldr	r0, [pc, #280]	@ (80008b4 <BMP280_calibration+0x174>)
 800079a:	f003 fee1 	bl	8004560 <puts>
	for(int i=0;i<24;i++){
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80007a2:	e00b      	b.n	80007bc <BMP280_calibration+0x7c>
		printf("calib %2d = 0x%x\r\n",i, receive_buf[i]);
 80007a4:	463a      	mov	r2, r7
 80007a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a8:	4413      	add	r3, r2
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80007b0:	4841      	ldr	r0, [pc, #260]	@ (80008b8 <BMP280_calibration+0x178>)
 80007b2:	f003 fe6d 	bl	8004490 <iprintf>
	for(int i=0;i<24;i++){
 80007b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b8:	3301      	adds	r3, #1
 80007ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80007bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007be:	2b17      	cmp	r3, #23
 80007c0:	ddf0      	ble.n	80007a4 <BMP280_calibration+0x64>
	}

	dig_T1 = receive_buf[0]|(receive_buf[1]<<8);
 80007c2:	783b      	ldrb	r3, [r7, #0]
 80007c4:	b21a      	sxth	r2, r3
 80007c6:	787b      	ldrb	r3, [r7, #1]
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b21b      	sxth	r3, r3
 80007cc:	4313      	orrs	r3, r2
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	4b3a      	ldr	r3, [pc, #232]	@ (80008bc <BMP280_calibration+0x17c>)
 80007d4:	801a      	strh	r2, [r3, #0]
	dig_T2 = receive_buf[2]|(receive_buf[3]<<8);
 80007d6:	78bb      	ldrb	r3, [r7, #2]
 80007d8:	b21a      	sxth	r2, r3
 80007da:	78fb      	ldrb	r3, [r7, #3]
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	b21b      	sxth	r3, r3
 80007e0:	4313      	orrs	r3, r2
 80007e2:	b21a      	sxth	r2, r3
 80007e4:	4b36      	ldr	r3, [pc, #216]	@ (80008c0 <BMP280_calibration+0x180>)
 80007e6:	801a      	strh	r2, [r3, #0]
	dig_T3 = receive_buf[4]|(receive_buf[5]<<8);
 80007e8:	793b      	ldrb	r3, [r7, #4]
 80007ea:	b21a      	sxth	r2, r3
 80007ec:	797b      	ldrb	r3, [r7, #5]
 80007ee:	021b      	lsls	r3, r3, #8
 80007f0:	b21b      	sxth	r3, r3
 80007f2:	4313      	orrs	r3, r2
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	4b33      	ldr	r3, [pc, #204]	@ (80008c4 <BMP280_calibration+0x184>)
 80007f8:	801a      	strh	r2, [r3, #0]
	dig_P1 = receive_buf[6]|(receive_buf[7]<<8);
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	b21a      	sxth	r2, r3
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	021b      	lsls	r3, r3, #8
 8000802:	b21b      	sxth	r3, r3
 8000804:	4313      	orrs	r3, r2
 8000806:	b21b      	sxth	r3, r3
 8000808:	b29a      	uxth	r2, r3
 800080a:	4b2f      	ldr	r3, [pc, #188]	@ (80008c8 <BMP280_calibration+0x188>)
 800080c:	801a      	strh	r2, [r3, #0]
	dig_P2 = receive_buf[8]|(receive_buf[9]<<8);
 800080e:	7a3b      	ldrb	r3, [r7, #8]
 8000810:	b21a      	sxth	r2, r3
 8000812:	7a7b      	ldrb	r3, [r7, #9]
 8000814:	021b      	lsls	r3, r3, #8
 8000816:	b21b      	sxth	r3, r3
 8000818:	4313      	orrs	r3, r2
 800081a:	b21a      	sxth	r2, r3
 800081c:	4b2b      	ldr	r3, [pc, #172]	@ (80008cc <BMP280_calibration+0x18c>)
 800081e:	801a      	strh	r2, [r3, #0]
	dig_P3 = receive_buf[10]|(receive_buf[11]<<8);
 8000820:	7abb      	ldrb	r3, [r7, #10]
 8000822:	b21a      	sxth	r2, r3
 8000824:	7afb      	ldrb	r3, [r7, #11]
 8000826:	021b      	lsls	r3, r3, #8
 8000828:	b21b      	sxth	r3, r3
 800082a:	4313      	orrs	r3, r2
 800082c:	b21a      	sxth	r2, r3
 800082e:	4b28      	ldr	r3, [pc, #160]	@ (80008d0 <BMP280_calibration+0x190>)
 8000830:	801a      	strh	r2, [r3, #0]
	dig_P4 = receive_buf[12]|(receive_buf[13]<<8);
 8000832:	7b3b      	ldrb	r3, [r7, #12]
 8000834:	b21a      	sxth	r2, r3
 8000836:	7b7b      	ldrb	r3, [r7, #13]
 8000838:	021b      	lsls	r3, r3, #8
 800083a:	b21b      	sxth	r3, r3
 800083c:	4313      	orrs	r3, r2
 800083e:	b21a      	sxth	r2, r3
 8000840:	4b24      	ldr	r3, [pc, #144]	@ (80008d4 <BMP280_calibration+0x194>)
 8000842:	801a      	strh	r2, [r3, #0]
	dig_P5 = receive_buf[14]|(receive_buf[15]<<8);
 8000844:	7bbb      	ldrb	r3, [r7, #14]
 8000846:	b21a      	sxth	r2, r3
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	021b      	lsls	r3, r3, #8
 800084c:	b21b      	sxth	r3, r3
 800084e:	4313      	orrs	r3, r2
 8000850:	b21a      	sxth	r2, r3
 8000852:	4b21      	ldr	r3, [pc, #132]	@ (80008d8 <BMP280_calibration+0x198>)
 8000854:	801a      	strh	r2, [r3, #0]
	dig_P6 = receive_buf[16]|(receive_buf[17]<<8);
 8000856:	7c3b      	ldrb	r3, [r7, #16]
 8000858:	b21a      	sxth	r2, r3
 800085a:	7c7b      	ldrb	r3, [r7, #17]
 800085c:	021b      	lsls	r3, r3, #8
 800085e:	b21b      	sxth	r3, r3
 8000860:	4313      	orrs	r3, r2
 8000862:	b21a      	sxth	r2, r3
 8000864:	4b1d      	ldr	r3, [pc, #116]	@ (80008dc <BMP280_calibration+0x19c>)
 8000866:	801a      	strh	r2, [r3, #0]
	dig_P7 = receive_buf[18]|(receive_buf[19]<<8);
 8000868:	7cbb      	ldrb	r3, [r7, #18]
 800086a:	b21a      	sxth	r2, r3
 800086c:	7cfb      	ldrb	r3, [r7, #19]
 800086e:	021b      	lsls	r3, r3, #8
 8000870:	b21b      	sxth	r3, r3
 8000872:	4313      	orrs	r3, r2
 8000874:	b21a      	sxth	r2, r3
 8000876:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <BMP280_calibration+0x1a0>)
 8000878:	801a      	strh	r2, [r3, #0]
	dig_P8 = receive_buf[20]|(receive_buf[21]<<8);
 800087a:	7d3b      	ldrb	r3, [r7, #20]
 800087c:	b21a      	sxth	r2, r3
 800087e:	7d7b      	ldrb	r3, [r7, #21]
 8000880:	021b      	lsls	r3, r3, #8
 8000882:	b21b      	sxth	r3, r3
 8000884:	4313      	orrs	r3, r2
 8000886:	b21a      	sxth	r2, r3
 8000888:	4b16      	ldr	r3, [pc, #88]	@ (80008e4 <BMP280_calibration+0x1a4>)
 800088a:	801a      	strh	r2, [r3, #0]
	dig_P9 = receive_buf[22]|(receive_buf[23]<<8);
 800088c:	7dbb      	ldrb	r3, [r7, #22]
 800088e:	b21a      	sxth	r2, r3
 8000890:	7dfb      	ldrb	r3, [r7, #23]
 8000892:	021b      	lsls	r3, r3, #8
 8000894:	b21b      	sxth	r3, r3
 8000896:	4313      	orrs	r3, r2
 8000898:	b21a      	sxth	r2, r3
 800089a:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <BMP280_calibration+0x1a8>)
 800089c:	801a      	strh	r2, [r3, #0]
}
 800089e:	bf00      	nop
 80008a0:	3728      	adds	r7, #40	@ 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000a0 	.word	0x200000a0
 80008ac:	080050e4 	.word	0x080050e4
 80008b0:	080050fc 	.word	0x080050fc
 80008b4:	08005150 	.word	0x08005150
 80008b8:	08005170 	.word	0x08005170
 80008bc:	20000084 	.word	0x20000084
 80008c0:	20000086 	.word	0x20000086
 80008c4:	20000088 	.word	0x20000088
 80008c8:	2000008a 	.word	0x2000008a
 80008cc:	2000008c 	.word	0x2000008c
 80008d0:	2000008e 	.word	0x2000008e
 80008d4:	20000090 	.word	0x20000090
 80008d8:	20000092 	.word	0x20000092
 80008dc:	20000094 	.word	0x20000094
 80008e0:	20000096 	.word	0x20000096
 80008e4:	20000098 	.word	0x20000098
 80008e8:	2000009a 	.word	0x2000009a

080008ec <BMP280_compensate_T_int32>:

/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
 * t_fine carries fine temperature as global value
 */
BMP280_S32_t BMP280_compensate_T_int32(BMP280_S32_t adc_T)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b087      	sub	sp, #28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	BMP280_S32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((BMP280_S32_t)dig_T1<<1))) * ((BMP280_S32_t)dig_T2)) >> 11;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	10da      	asrs	r2, r3, #3
 80008f8:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <BMP280_compensate_T_int32+0x74>)
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	1ad3      	subs	r3, r2, r3
 8000900:	4a18      	ldr	r2, [pc, #96]	@ (8000964 <BMP280_compensate_T_int32+0x78>)
 8000902:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000906:	fb02 f303 	mul.w	r3, r2, r3
 800090a:	12db      	asrs	r3, r3, #11
 800090c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((BMP280_S32_t)dig_T1)) * ((adc_T>>4) - ((BMP280_S32_t)dig_T1))) >> 12) * ((BMP280_S32_t)dig_T3)) >> 14;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	111b      	asrs	r3, r3, #4
 8000912:	4a13      	ldr	r2, [pc, #76]	@ (8000960 <BMP280_compensate_T_int32+0x74>)
 8000914:	8812      	ldrh	r2, [r2, #0]
 8000916:	1a9b      	subs	r3, r3, r2
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	1112      	asrs	r2, r2, #4
 800091c:	4910      	ldr	r1, [pc, #64]	@ (8000960 <BMP280_compensate_T_int32+0x74>)
 800091e:	8809      	ldrh	r1, [r1, #0]
 8000920:	1a52      	subs	r2, r2, r1
 8000922:	fb02 f303 	mul.w	r3, r2, r3
 8000926:	131b      	asrs	r3, r3, #12
 8000928:	4a0f      	ldr	r2, [pc, #60]	@ (8000968 <BMP280_compensate_T_int32+0x7c>)
 800092a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800092e:	fb02 f303 	mul.w	r3, r2, r3
 8000932:	139b      	asrs	r3, r3, #14
 8000934:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000936:	697a      	ldr	r2, [r7, #20]
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	4413      	add	r3, r2
 800093c:	4a0b      	ldr	r2, [pc, #44]	@ (800096c <BMP280_compensate_T_int32+0x80>)
 800093e:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8000940:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <BMP280_compensate_T_int32+0x80>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4613      	mov	r3, r2
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	4413      	add	r3, r2
 800094a:	3380      	adds	r3, #128	@ 0x80
 800094c:	121b      	asrs	r3, r3, #8
 800094e:	60fb      	str	r3, [r7, #12]

	return T;
 8000950:	68fb      	ldr	r3, [r7, #12]
}
 8000952:	4618      	mov	r0, r3
 8000954:	371c      	adds	r7, #28
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000084 	.word	0x20000084
 8000964:	20000086 	.word	0x20000086
 8000968:	20000088 	.word	0x20000088
 800096c:	2000009c 	.word	0x2000009c

08000970 <BMP280_compensate_P_int64>:

/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
 * Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
 */
BMP280_U32_t BMP280_compensate_P_int64(BMP280_S32_t adc_P)
{
 8000970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000974:	b0ca      	sub	sp, #296	@ 0x128
 8000976:	af00      	add	r7, sp, #0
 8000978:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	BMP280_S64_t var1, var2, p;
	var1 = ((BMP280_S64_t)t_fine) - 128000;
 800097c:	4baf      	ldr	r3, [pc, #700]	@ (8000c3c <BMP280_compensate_P_int64+0x2cc>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	17da      	asrs	r2, r3, #31
 8000982:	461c      	mov	r4, r3
 8000984:	4615      	mov	r5, r2
 8000986:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800098a:	f145 3bff 	adc.w	fp, r5, #4294967295	@ 0xffffffff
 800098e:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (BMP280_S64_t)dig_P6;
 8000992:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000996:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800099a:	fb03 f102 	mul.w	r1, r3, r2
 800099e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80009a6:	fb02 f303 	mul.w	r3, r2, r3
 80009aa:	18ca      	adds	r2, r1, r3
 80009ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80009b0:	fba3 8903 	umull	r8, r9, r3, r3
 80009b4:	eb02 0309 	add.w	r3, r2, r9
 80009b8:	4699      	mov	r9, r3
 80009ba:	4ba1      	ldr	r3, [pc, #644]	@ (8000c40 <BMP280_compensate_P_int64+0x2d0>)
 80009bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009c0:	b21b      	sxth	r3, r3
 80009c2:	17da      	asrs	r2, r3, #31
 80009c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80009c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80009cc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80009d0:	4603      	mov	r3, r0
 80009d2:	fb03 f209 	mul.w	r2, r3, r9
 80009d6:	460b      	mov	r3, r1
 80009d8:	fb08 f303 	mul.w	r3, r8, r3
 80009dc:	4413      	add	r3, r2
 80009de:	4602      	mov	r2, r0
 80009e0:	fba8 1202 	umull	r1, r2, r8, r2
 80009e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80009e8:	460a      	mov	r2, r1
 80009ea:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80009ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80009f2:	4413      	add	r3, r2
 80009f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80009f8:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80009fc:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000a00:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(BMP280_S64_t)dig_P5)<<17);
 8000a04:	4b8f      	ldr	r3, [pc, #572]	@ (8000c44 <BMP280_compensate_P_int64+0x2d4>)
 8000a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0a:	b21b      	sxth	r3, r3
 8000a0c:	17da      	asrs	r2, r3, #31
 8000a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000a12:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000a16:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a1a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000a1e:	462a      	mov	r2, r5
 8000a20:	fb02 f203 	mul.w	r2, r2, r3
 8000a24:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000a28:	4621      	mov	r1, r4
 8000a2a:	fb01 f303 	mul.w	r3, r1, r3
 8000a2e:	441a      	add	r2, r3
 8000a30:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a34:	4621      	mov	r1, r4
 8000a36:	fba3 1301 	umull	r1, r3, r3, r1
 8000a3a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000a3e:	460b      	mov	r3, r1
 8000a40:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000a48:	18d3      	adds	r3, r2, r3
 8000a4a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000a4e:	f04f 0000 	mov.w	r0, #0
 8000a52:	f04f 0100 	mov.w	r1, #0
 8000a56:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000a5a:	462b      	mov	r3, r5
 8000a5c:	0459      	lsls	r1, r3, #17
 8000a5e:	4623      	mov	r3, r4
 8000a60:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000a64:	4623      	mov	r3, r4
 8000a66:	0458      	lsls	r0, r3, #17
 8000a68:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000a6c:	1814      	adds	r4, r2, r0
 8000a6e:	643c      	str	r4, [r7, #64]	@ 0x40
 8000a70:	414b      	adcs	r3, r1
 8000a72:	647b      	str	r3, [r7, #68]	@ 0x44
 8000a74:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000a78:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((BMP280_S64_t)dig_P4)<<35);
 8000a7c:	4b72      	ldr	r3, [pc, #456]	@ (8000c48 <BMP280_compensate_P_int64+0x2d8>)
 8000a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a82:	b21b      	sxth	r3, r3
 8000a84:	17da      	asrs	r2, r3, #31
 8000a86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000a8a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000a8e:	f04f 0000 	mov.w	r0, #0
 8000a92:	f04f 0100 	mov.w	r1, #0
 8000a96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000a9a:	00d9      	lsls	r1, r3, #3
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000aa2:	1814      	adds	r4, r2, r0
 8000aa4:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000aa6:	414b      	adcs	r3, r1
 8000aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000aaa:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000aae:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (BMP280_S64_t)dig_P3)>>8) + ((var1 * (BMP280_S64_t)dig_P2)<<12);
 8000ab2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000ab6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000aba:	fb03 f102 	mul.w	r1, r3, r2
 8000abe:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000ac2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000ac6:	fb02 f303 	mul.w	r3, r2, r3
 8000aca:	18ca      	adds	r2, r1, r3
 8000acc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000ad0:	fba3 1303 	umull	r1, r3, r3, r3
 8000ad4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000ad8:	460b      	mov	r3, r1
 8000ada:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000ae2:	18d3      	adds	r3, r2, r3
 8000ae4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000ae8:	4b58      	ldr	r3, [pc, #352]	@ (8000c4c <BMP280_compensate_P_int64+0x2dc>)
 8000aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aee:	b21b      	sxth	r3, r3
 8000af0:	17da      	asrs	r2, r3, #31
 8000af2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000af6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000afa:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000afe:	462b      	mov	r3, r5
 8000b00:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000b04:	4642      	mov	r2, r8
 8000b06:	fb02 f203 	mul.w	r2, r2, r3
 8000b0a:	464b      	mov	r3, r9
 8000b0c:	4621      	mov	r1, r4
 8000b0e:	fb01 f303 	mul.w	r3, r1, r3
 8000b12:	4413      	add	r3, r2
 8000b14:	4622      	mov	r2, r4
 8000b16:	4641      	mov	r1, r8
 8000b18:	fba2 1201 	umull	r1, r2, r2, r1
 8000b1c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000b20:	460a      	mov	r2, r1
 8000b22:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000b26:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000b2a:	4413      	add	r3, r2
 8000b2c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	f04f 0100 	mov.w	r1, #0
 8000b38:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000b3c:	4623      	mov	r3, r4
 8000b3e:	0a18      	lsrs	r0, r3, #8
 8000b40:	462b      	mov	r3, r5
 8000b42:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000b46:	462b      	mov	r3, r5
 8000b48:	1219      	asrs	r1, r3, #8
 8000b4a:	4b41      	ldr	r3, [pc, #260]	@ (8000c50 <BMP280_compensate_P_int64+0x2e0>)
 8000b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b50:	b21b      	sxth	r3, r3
 8000b52:	17da      	asrs	r2, r3, #31
 8000b54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000b58:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000b5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b60:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000b64:	464a      	mov	r2, r9
 8000b66:	fb02 f203 	mul.w	r2, r2, r3
 8000b6a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000b6e:	4644      	mov	r4, r8
 8000b70:	fb04 f303 	mul.w	r3, r4, r3
 8000b74:	441a      	add	r2, r3
 8000b76:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b7a:	4644      	mov	r4, r8
 8000b7c:	fba3 4304 	umull	r4, r3, r3, r4
 8000b80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000b84:	4623      	mov	r3, r4
 8000b86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000b8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000b8e:	18d3      	adds	r3, r2, r3
 8000b90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000b94:	f04f 0200 	mov.w	r2, #0
 8000b98:	f04f 0300 	mov.w	r3, #0
 8000b9c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000ba0:	464c      	mov	r4, r9
 8000ba2:	0323      	lsls	r3, r4, #12
 8000ba4:	4644      	mov	r4, r8
 8000ba6:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000baa:	4644      	mov	r4, r8
 8000bac:	0322      	lsls	r2, r4, #12
 8000bae:	1884      	adds	r4, r0, r2
 8000bb0:	633c      	str	r4, [r7, #48]	@ 0x30
 8000bb2:	eb41 0303 	adc.w	r3, r1, r3
 8000bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8000bb8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000bbc:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((BMP280_S64_t)1)<<47)+var1))*((BMP280_S64_t)dig_P1)>>33;
 8000bc0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000bc4:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000bc8:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000bcc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000bd0:	4b20      	ldr	r3, [pc, #128]	@ (8000c54 <BMP280_compensate_P_int64+0x2e4>)
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000bdc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000be0:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000be4:	462b      	mov	r3, r5
 8000be6:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000bea:	4642      	mov	r2, r8
 8000bec:	fb02 f203 	mul.w	r2, r2, r3
 8000bf0:	464b      	mov	r3, r9
 8000bf2:	4621      	mov	r1, r4
 8000bf4:	fb01 f303 	mul.w	r3, r1, r3
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4622      	mov	r2, r4
 8000bfc:	4641      	mov	r1, r8
 8000bfe:	fba2 1201 	umull	r1, r2, r2, r1
 8000c02:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000c06:	460a      	mov	r2, r1
 8000c08:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000c0c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c10:	4413      	add	r3, r2
 8000c12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000c16:	f04f 0200 	mov.w	r2, #0
 8000c1a:	f04f 0300 	mov.w	r3, #0
 8000c1e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000c22:	4629      	mov	r1, r5
 8000c24:	104a      	asrs	r2, r1, #1
 8000c26:	4629      	mov	r1, r5
 8000c28:	17cb      	asrs	r3, r1, #31
 8000c2a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8000c2e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c32:	4313      	orrs	r3, r2
 8000c34:	d110      	bne.n	8000c58 <BMP280_compensate_P_int64+0x2e8>
	{
		return EXIT_FAILURE; // avoid exception caused by division by zero
 8000c36:	2301      	movs	r3, #1
 8000c38:	e154      	b.n	8000ee4 <BMP280_compensate_P_int64+0x574>
 8000c3a:	bf00      	nop
 8000c3c:	2000009c 	.word	0x2000009c
 8000c40:	20000094 	.word	0x20000094
 8000c44:	20000092 	.word	0x20000092
 8000c48:	20000090 	.word	0x20000090
 8000c4c:	2000008e 	.word	0x2000008e
 8000c50:	2000008c 	.word	0x2000008c
 8000c54:	2000008a 	.word	0x2000008a
	}

	p = 1048576-adc_P;
 8000c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000c5c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000c60:	17da      	asrs	r2, r3, #31
 8000c62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000c66:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000c6a:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8000c6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000c72:	105b      	asrs	r3, r3, #1
 8000c74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000c78:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000c7c:	07db      	lsls	r3, r3, #31
 8000c7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000c82:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000c86:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000c8a:	4621      	mov	r1, r4
 8000c8c:	1a89      	subs	r1, r1, r2
 8000c8e:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000c90:	4629      	mov	r1, r5
 8000c92:	eb61 0303 	sbc.w	r3, r1, r3
 8000c96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000c98:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000c9c:	4622      	mov	r2, r4
 8000c9e:	462b      	mov	r3, r5
 8000ca0:	1891      	adds	r1, r2, r2
 8000ca2:	6239      	str	r1, [r7, #32]
 8000ca4:	415b      	adcs	r3, r3
 8000ca6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ca8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000cac:	4621      	mov	r1, r4
 8000cae:	1851      	adds	r1, r2, r1
 8000cb0:	61b9      	str	r1, [r7, #24]
 8000cb2:	4629      	mov	r1, r5
 8000cb4:	414b      	adcs	r3, r1
 8000cb6:	61fb      	str	r3, [r7, #28]
 8000cb8:	f04f 0200 	mov.w	r2, #0
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000cc4:	4649      	mov	r1, r9
 8000cc6:	018b      	lsls	r3, r1, #6
 8000cc8:	4641      	mov	r1, r8
 8000cca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000cce:	4641      	mov	r1, r8
 8000cd0:	018a      	lsls	r2, r1, #6
 8000cd2:	4641      	mov	r1, r8
 8000cd4:	1889      	adds	r1, r1, r2
 8000cd6:	6139      	str	r1, [r7, #16]
 8000cd8:	4649      	mov	r1, r9
 8000cda:	eb43 0101 	adc.w	r1, r3, r1
 8000cde:	6179      	str	r1, [r7, #20]
 8000ce0:	f04f 0200 	mov.w	r2, #0
 8000ce4:	f04f 0300 	mov.w	r3, #0
 8000ce8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000cec:	4649      	mov	r1, r9
 8000cee:	008b      	lsls	r3, r1, #2
 8000cf0:	4641      	mov	r1, r8
 8000cf2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000cf6:	4641      	mov	r1, r8
 8000cf8:	008a      	lsls	r2, r1, #2
 8000cfa:	4610      	mov	r0, r2
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4603      	mov	r3, r0
 8000d00:	4622      	mov	r2, r4
 8000d02:	189b      	adds	r3, r3, r2
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	460b      	mov	r3, r1
 8000d08:	462a      	mov	r2, r5
 8000d0a:	eb42 0303 	adc.w	r3, r2, r3
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	f04f 0200 	mov.w	r2, #0
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000d1c:	4649      	mov	r1, r9
 8000d1e:	008b      	lsls	r3, r1, #2
 8000d20:	4641      	mov	r1, r8
 8000d22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d26:	4641      	mov	r1, r8
 8000d28:	008a      	lsls	r2, r1, #2
 8000d2a:	4610      	mov	r0, r2
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4622      	mov	r2, r4
 8000d32:	189b      	adds	r3, r3, r2
 8000d34:	673b      	str	r3, [r7, #112]	@ 0x70
 8000d36:	462b      	mov	r3, r5
 8000d38:	460a      	mov	r2, r1
 8000d3a:	eb42 0303 	adc.w	r3, r2, r3
 8000d3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d40:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000d44:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000d48:	f7ff fab2 	bl	80002b0 <__aeabi_ldivmod>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	460b      	mov	r3, r1
 8000d50:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((BMP280_S64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000d54:	4b66      	ldr	r3, [pc, #408]	@ (8000ef0 <BMP280_compensate_P_int64+0x580>)
 8000d56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d5a:	b21b      	sxth	r3, r3
 8000d5c:	17da      	asrs	r2, r3, #31
 8000d5e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000d60:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000d62:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000d66:	f04f 0000 	mov.w	r0, #0
 8000d6a:	f04f 0100 	mov.w	r1, #0
 8000d6e:	0b50      	lsrs	r0, r2, #13
 8000d70:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000d74:	1359      	asrs	r1, r3, #13
 8000d76:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000d7a:	462b      	mov	r3, r5
 8000d7c:	fb00 f203 	mul.w	r2, r0, r3
 8000d80:	4623      	mov	r3, r4
 8000d82:	fb03 f301 	mul.w	r3, r3, r1
 8000d86:	4413      	add	r3, r2
 8000d88:	4622      	mov	r2, r4
 8000d8a:	fba2 1200 	umull	r1, r2, r2, r0
 8000d8e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000d92:	460a      	mov	r2, r1
 8000d94:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000d98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000d9c:	4413      	add	r3, r2
 8000d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000da2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000da6:	f04f 0000 	mov.w	r0, #0
 8000daa:	f04f 0100 	mov.w	r1, #0
 8000dae:	0b50      	lsrs	r0, r2, #13
 8000db0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000db4:	1359      	asrs	r1, r3, #13
 8000db6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000dba:	462b      	mov	r3, r5
 8000dbc:	fb00 f203 	mul.w	r2, r0, r3
 8000dc0:	4623      	mov	r3, r4
 8000dc2:	fb03 f301 	mul.w	r3, r3, r1
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4622      	mov	r2, r4
 8000dca:	fba2 1200 	umull	r1, r2, r2, r0
 8000dce:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000dd2:	460a      	mov	r2, r1
 8000dd4:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000dd8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000ddc:	4413      	add	r3, r2
 8000dde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000de2:	f04f 0200 	mov.w	r2, #0
 8000de6:	f04f 0300 	mov.w	r3, #0
 8000dea:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000dee:	4621      	mov	r1, r4
 8000df0:	0e4a      	lsrs	r2, r1, #25
 8000df2:	4629      	mov	r1, r5
 8000df4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000df8:	4629      	mov	r1, r5
 8000dfa:	164b      	asrs	r3, r1, #25
 8000dfc:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((BMP280_S64_t)dig_P8) * p) >> 19;
 8000e00:	4b3c      	ldr	r3, [pc, #240]	@ (8000ef4 <BMP280_compensate_P_int64+0x584>)
 8000e02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e06:	b21b      	sxth	r3, r3
 8000e08:	17da      	asrs	r2, r3, #31
 8000e0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8000e0c:	667a      	str	r2, [r7, #100]	@ 0x64
 8000e0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e12:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000e16:	462a      	mov	r2, r5
 8000e18:	fb02 f203 	mul.w	r2, r2, r3
 8000e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e20:	4621      	mov	r1, r4
 8000e22:	fb01 f303 	mul.w	r3, r1, r3
 8000e26:	4413      	add	r3, r2
 8000e28:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000e2c:	4621      	mov	r1, r4
 8000e2e:	fba2 1201 	umull	r1, r2, r2, r1
 8000e32:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000e36:	460a      	mov	r2, r1
 8000e38:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8000e3c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000e40:	4413      	add	r3, r2
 8000e42:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000e46:	f04f 0200 	mov.w	r2, #0
 8000e4a:	f04f 0300 	mov.w	r3, #0
 8000e4e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000e52:	4621      	mov	r1, r4
 8000e54:	0cca      	lsrs	r2, r1, #19
 8000e56:	4629      	mov	r1, r5
 8000e58:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000e5c:	4629      	mov	r1, r5
 8000e5e:	14cb      	asrs	r3, r1, #19
 8000e60:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((BMP280_S64_t)dig_P7)<<4);
 8000e64:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8000e68:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000e6c:	1884      	adds	r4, r0, r2
 8000e6e:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000e70:	eb41 0303 	adc.w	r3, r1, r3
 8000e74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000e76:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000e7a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000e7e:	4621      	mov	r1, r4
 8000e80:	1889      	adds	r1, r1, r2
 8000e82:	6539      	str	r1, [r7, #80]	@ 0x50
 8000e84:	4629      	mov	r1, r5
 8000e86:	eb43 0101 	adc.w	r1, r3, r1
 8000e8a:	6579      	str	r1, [r7, #84]	@ 0x54
 8000e8c:	f04f 0000 	mov.w	r0, #0
 8000e90:	f04f 0100 	mov.w	r1, #0
 8000e94:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000e98:	4623      	mov	r3, r4
 8000e9a:	0a18      	lsrs	r0, r3, #8
 8000e9c:	462b      	mov	r3, r5
 8000e9e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ea2:	462b      	mov	r3, r5
 8000ea4:	1219      	asrs	r1, r3, #8
 8000ea6:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <BMP280_compensate_P_int64+0x588>)
 8000ea8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	17da      	asrs	r2, r3, #31
 8000eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000eb2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000eb4:	f04f 0200 	mov.w	r2, #0
 8000eb8:	f04f 0300 	mov.w	r3, #0
 8000ebc:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8000ec0:	464c      	mov	r4, r9
 8000ec2:	0123      	lsls	r3, r4, #4
 8000ec4:	4644      	mov	r4, r8
 8000ec6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000eca:	4644      	mov	r4, r8
 8000ecc:	0122      	lsls	r2, r4, #4
 8000ece:	1884      	adds	r4, r0, r2
 8000ed0:	603c      	str	r4, [r7, #0]
 8000ed2:	eb41 0303 	adc.w	r3, r1, r3
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000edc:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (BMP280_U32_t)p;
 8000ee0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8000eea:	46bd      	mov	sp, r7
 8000eec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000ef0:	2000009a 	.word	0x2000009a
 8000ef4:	20000098 	.word	0x20000098
 8000ef8:	20000096 	.word	0x20000096

08000efc <BMP280_Read_Reg>:
	} else {
		return EXIT_SUCCESS;
	}
}

uint8_t* BMP280_Read_Reg(uint8_t reg, uint8_t length) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af02      	add	r7, sp, #8
 8000f02:	4603      	mov	r3, r0
 8000f04:	460a      	mov	r2, r1
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	71bb      	strb	r3, [r7, #6]
	uint8_t *buf;
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 8000f0c:	1dfa      	adds	r2, r7, #7
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2301      	movs	r3, #1
 8000f16:	21ee      	movs	r1, #238	@ 0xee
 8000f18:	4813      	ldr	r0, [pc, #76]	@ (8000f68 <BMP280_Read_Reg+0x6c>)
 8000f1a:	f001 f88f 	bl	800203c <HAL_I2C_Master_Transmit>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d002      	beq.n	8000f2e <BMP280_Read_Reg+0x32>
		printf("Problem with I2C Transmit\r\n");
 8000f28:	4810      	ldr	r0, [pc, #64]	@ (8000f6c <BMP280_Read_Reg+0x70>)
 8000f2a:	f003 fb19 	bl	8004560 <puts>
	}

	buf = (uint8_t*) malloc(length);
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f003 f92d 	bl	8004190 <malloc>
 8000f36:	4603      	mov	r3, r0
 8000f38:	60bb      	str	r3, [r7, #8]
	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, length,
 8000f3a:	79bb      	ldrb	r3, [r7, #6]
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f42:	9200      	str	r2, [sp, #0]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	21ee      	movs	r1, #238	@ 0xee
 8000f48:	4807      	ldr	r0, [pc, #28]	@ (8000f68 <BMP280_Read_Reg+0x6c>)
 8000f4a:	f001 f975 	bl	8002238 <HAL_I2C_Master_Receive>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	if (ret != 0) {
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d002      	beq.n	8000f5e <BMP280_Read_Reg+0x62>
		printf("Problem with I2C Receive\r\n");
 8000f58:	4805      	ldr	r0, [pc, #20]	@ (8000f70 <BMP280_Read_Reg+0x74>)
 8000f5a:	f003 fb01 	bl	8004560 <puts>
	}

	return buf;
 8000f5e:	68bb      	ldr	r3, [r7, #8]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200000a0 	.word	0x200000a0
 8000f6c:	08005184 	.word	0x08005184
 8000f70:	080051a0 	.word	0x080051a0

08000f74 <BMP280_get_temperature>:

BMP280_S32_t BMP280_get_temperature() {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_T;

	buf = BMP280_Read_Reg(BMP280_REG_TEMP_MSB, BMP280_LEN_TEMP);
 8000f7a:	2103      	movs	r1, #3
 8000f7c:	20fa      	movs	r0, #250	@ 0xfa
 8000f7e:	f7ff ffbd 	bl	8000efc <BMP280_Read_Reg>
 8000f82:	6078      	str	r0, [r7, #4]

	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	031a      	lsls	r2, r3, #12
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	011b      	lsls	r3, r3, #4
 8000f92:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	3202      	adds	r2, #2
 8000f98:	7812      	ldrb	r2, [r2, #0]
 8000f9a:	0912      	lsrs	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	603b      	str	r3, [r7, #0]

	free(buf);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f003 f8fc 	bl	80041a0 <free>

	printf("Temperature: ");
 8000fa8:	480e      	ldr	r0, [pc, #56]	@ (8000fe4 <BMP280_get_temperature+0x70>)
 8000faa:	f003 fa71 	bl	8004490 <iprintf>
	printf("0X%05lX", adc_T);
 8000fae:	6839      	ldr	r1, [r7, #0]
 8000fb0:	480d      	ldr	r0, [pc, #52]	@ (8000fe8 <BMP280_get_temperature+0x74>)
 8000fb2:	f003 fa6d 	bl	8004490 <iprintf>
	printf("\r\n");
 8000fb6:	480d      	ldr	r0, [pc, #52]	@ (8000fec <BMP280_get_temperature+0x78>)
 8000fb8:	f003 fad2 	bl	8004560 <puts>

	adc_T = BMP280_compensate_T_int32(adc_T);
 8000fbc:	6838      	ldr	r0, [r7, #0]
 8000fbe:	f7ff fc95 	bl	80008ec <BMP280_compensate_T_int32>
 8000fc2:	6038      	str	r0, [r7, #0]
	printf("Compensated temperature: ");
 8000fc4:	480a      	ldr	r0, [pc, #40]	@ (8000ff0 <BMP280_get_temperature+0x7c>)
 8000fc6:	f003 fa63 	bl	8004490 <iprintf>
	printf("0X%05lX", adc_T);
 8000fca:	6839      	ldr	r1, [r7, #0]
 8000fcc:	4806      	ldr	r0, [pc, #24]	@ (8000fe8 <BMP280_get_temperature+0x74>)
 8000fce:	f003 fa5f 	bl	8004490 <iprintf>
	printf("\r\n");
 8000fd2:	4806      	ldr	r0, [pc, #24]	@ (8000fec <BMP280_get_temperature+0x78>)
 8000fd4:	f003 fac4 	bl	8004560 <puts>

	return adc_T;
 8000fd8:	683b      	ldr	r3, [r7, #0]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	080051bc 	.word	0x080051bc
 8000fe8:	080051cc 	.word	0x080051cc
 8000fec:	080051d4 	.word	0x080051d4
 8000ff0:	080051d8 	.word	0x080051d8

08000ff4 <BMP280_get_pressure>:

BMP280_S32_t BMP280_get_pressure() {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_P;

	buf = BMP280_Read_Reg(BMP280_REG_PRES_MSB, BMP280_LEN_PRES);
 8000ffa:	2103      	movs	r1, #3
 8000ffc:	20f7      	movs	r0, #247	@ 0xf7
 8000ffe:	f7ff ff7d 	bl	8000efc <BMP280_Read_Reg>
 8001002:	6078      	str	r0, [r7, #4]

	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	031a      	lsls	r2, r3, #12
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3301      	adds	r3, #1
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	011b      	lsls	r3, r3, #4
 8001012:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	3202      	adds	r2, #2
 8001018:	7812      	ldrb	r2, [r2, #0]
 800101a:	0912      	lsrs	r2, r2, #4
 800101c:	b2d2      	uxtb	r2, r2
	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 800101e:	4313      	orrs	r3, r2
 8001020:	603b      	str	r3, [r7, #0]

	free(buf);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f003 f8bc 	bl	80041a0 <free>

	printf("Pressure:    0x");
 8001028:	480e      	ldr	r0, [pc, #56]	@ (8001064 <BMP280_get_pressure+0x70>)
 800102a:	f003 fa31 	bl	8004490 <iprintf>
	printf("%05lX", adc_P);
 800102e:	6839      	ldr	r1, [r7, #0]
 8001030:	480d      	ldr	r0, [pc, #52]	@ (8001068 <BMP280_get_pressure+0x74>)
 8001032:	f003 fa2d 	bl	8004490 <iprintf>
	printf("\r\n");
 8001036:	480d      	ldr	r0, [pc, #52]	@ (800106c <BMP280_get_pressure+0x78>)
 8001038:	f003 fa92 	bl	8004560 <puts>

	adc_P = BMP280_compensate_P_int64(adc_P);
 800103c:	6838      	ldr	r0, [r7, #0]
 800103e:	f7ff fc97 	bl	8000970 <BMP280_compensate_P_int64>
 8001042:	4603      	mov	r3, r0
 8001044:	603b      	str	r3, [r7, #0]
	printf("Compensated pressure:    0x");
 8001046:	480a      	ldr	r0, [pc, #40]	@ (8001070 <BMP280_get_pressure+0x7c>)
 8001048:	f003 fa22 	bl	8004490 <iprintf>
	printf("%05lX", adc_P);
 800104c:	6839      	ldr	r1, [r7, #0]
 800104e:	4806      	ldr	r0, [pc, #24]	@ (8001068 <BMP280_get_pressure+0x74>)
 8001050:	f003 fa1e 	bl	8004490 <iprintf>
	printf("\r\n");
 8001054:	4805      	ldr	r0, [pc, #20]	@ (800106c <BMP280_get_pressure+0x78>)
 8001056:	f003 fa83 	bl	8004560 <puts>

	return adc_P;
 800105a:	683b      	ldr	r3, [r7, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	080051f4 	.word	0x080051f4
 8001068:	08005204 	.word	0x08005204
 800106c:	080051d4 	.word	0x080051d4
 8001070:	0800520c 	.word	0x0800520c

08001074 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	@ 0x28
 8001078:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	4b2d      	ldr	r3, [pc, #180]	@ (8001144 <MX_GPIO_Init+0xd0>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	4a2c      	ldr	r2, [pc, #176]	@ (8001144 <MX_GPIO_Init+0xd0>)
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	6313      	str	r3, [r2, #48]	@ 0x30
 800109a:	4b2a      	ldr	r3, [pc, #168]	@ (8001144 <MX_GPIO_Init+0xd0>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4b26      	ldr	r3, [pc, #152]	@ (8001144 <MX_GPIO_Init+0xd0>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	4a25      	ldr	r2, [pc, #148]	@ (8001144 <MX_GPIO_Init+0xd0>)
 80010b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b6:	4b23      	ldr	r3, [pc, #140]	@ (8001144 <MX_GPIO_Init+0xd0>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001144 <MX_GPIO_Init+0xd0>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001144 <MX_GPIO_Init+0xd0>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001144 <MX_GPIO_Init+0xd0>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <MX_GPIO_Init+0xd0>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	4a17      	ldr	r2, [pc, #92]	@ (8001144 <MX_GPIO_Init+0xd0>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <MX_GPIO_Init+0xd0>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2120      	movs	r1, #32
 80010fe:	4812      	ldr	r0, [pc, #72]	@ (8001148 <MX_GPIO_Init+0xd4>)
 8001100:	f000 fe3e 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001104:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800110a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800110e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	480c      	ldr	r0, [pc, #48]	@ (800114c <MX_GPIO_Init+0xd8>)
 800111c:	f000 fc9c 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001120:	2320      	movs	r3, #32
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	4804      	ldr	r0, [pc, #16]	@ (8001148 <MX_GPIO_Init+0xd4>)
 8001138:	f000 fc8e 	bl	8001a58 <HAL_GPIO_Init>

}
 800113c:	bf00      	nop
 800113e:	3728      	adds	r7, #40	@ 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40023800 	.word	0x40023800
 8001148:	40020000 	.word	0x40020000
 800114c:	40020800 	.word	0x40020800

08001150 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001154:	4b12      	ldr	r3, [pc, #72]	@ (80011a0 <MX_I2C1_Init+0x50>)
 8001156:	4a13      	ldr	r2, [pc, #76]	@ (80011a4 <MX_I2C1_Init+0x54>)
 8001158:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800115a:	4b11      	ldr	r3, [pc, #68]	@ (80011a0 <MX_I2C1_Init+0x50>)
 800115c:	4a12      	ldr	r2, [pc, #72]	@ (80011a8 <MX_I2C1_Init+0x58>)
 800115e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001160:	4b0f      	ldr	r3, [pc, #60]	@ (80011a0 <MX_I2C1_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001166:	4b0e      	ldr	r3, [pc, #56]	@ (80011a0 <MX_I2C1_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800116c:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <MX_I2C1_Init+0x50>)
 800116e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001172:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001174:	4b0a      	ldr	r3, [pc, #40]	@ (80011a0 <MX_I2C1_Init+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800117a:	4b09      	ldr	r3, [pc, #36]	@ (80011a0 <MX_I2C1_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001180:	4b07      	ldr	r3, [pc, #28]	@ (80011a0 <MX_I2C1_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001186:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <MX_I2C1_Init+0x50>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800118c:	4804      	ldr	r0, [pc, #16]	@ (80011a0 <MX_I2C1_Init+0x50>)
 800118e:	f000 fe11 	bl	8001db4 <HAL_I2C_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001198:	f000 f8fa 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200000a0 	.word	0x200000a0
 80011a4:	40005400 	.word	0x40005400
 80011a8:	000186a0 	.word	0x000186a0

080011ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a19      	ldr	r2, [pc, #100]	@ (8001230 <HAL_I2C_MspInit+0x84>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d12c      	bne.n	8001228 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <HAL_I2C_MspInit+0x88>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a17      	ldr	r2, [pc, #92]	@ (8001234 <HAL_I2C_MspInit+0x88>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <HAL_I2C_MspInit+0x88>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f0:	2312      	movs	r3, #18
 80011f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f8:	2303      	movs	r3, #3
 80011fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011fc:	2304      	movs	r3, #4
 80011fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	480c      	ldr	r0, [pc, #48]	@ (8001238 <HAL_I2C_MspInit+0x8c>)
 8001208:	f000 fc26 	bl	8001a58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <HAL_I2C_MspInit+0x88>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001214:	4a07      	ldr	r2, [pc, #28]	@ (8001234 <HAL_I2C_MspInit+0x88>)
 8001216:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800121a:	6413      	str	r3, [r2, #64]	@ 0x40
 800121c:	4b05      	ldr	r3, [pc, #20]	@ (8001234 <HAL_I2C_MspInit+0x88>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001220:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001228:	bf00      	nop
 800122a:	3728      	adds	r7, #40	@ 0x28
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40005400 	.word	0x40005400
 8001234:	40023800 	.word	0x40023800
 8001238:	40020400 	.word	0x40020400

0800123c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001244:	1d39      	adds	r1, r7, #4
 8001246:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800124a:	2201      	movs	r2, #1
 800124c:	4807      	ldr	r0, [pc, #28]	@ (800126c <__io_putchar+0x30>)
 800124e:	f002 fbe3 	bl	8003a18 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001252:	1d39      	adds	r1, r7, #4
 8001254:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001258:	2201      	movs	r2, #1
 800125a:	4805      	ldr	r0, [pc, #20]	@ (8001270 <__io_putchar+0x34>)
 800125c:	f002 fbdc 	bl	8003a18 <HAL_UART_Transmit>

	return ch;
 8001260:	687b      	ldr	r3, [r7, #4]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000140 	.word	0x20000140
 8001270:	200000f8 	.word	0x200000f8

08001274 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001278:	f000 fa96 	bl	80017a8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800127c:	f000 f81a 	bl	80012b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001280:	f7ff fef8 	bl	8001074 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001284:	f000 f9c0 	bl	8001608 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8001288:	f7ff ff62 	bl	8001150 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 800128c:	f000 f992 	bl	80015b4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	printf("\r\n=== TP Capteurs & Reseaux ===\r\n");
 8001290:	4807      	ldr	r0, [pc, #28]	@ (80012b0 <main+0x3c>)
 8001292:	f003 f965 	bl	8004560 <puts>

	BMP280_Check_id();			// Identification du BMP280
 8001296:	f7ff f9d3 	bl	8000640 <BMP280_Check_id>
	BMP280_Config();			// Configuration du BMP280
 800129a:	f7ff fa0f 	bl	80006bc <BMP280_Config>
	BMP280_calibration();		// Mise à jour des paramètres d'étalonage
 800129e:	f7ff fa4f 	bl	8000740 <BMP280_calibration>
	BMP280_get_temperature();	// Acquisition de la température
 80012a2:	f7ff fe67 	bl	8000f74 <BMP280_get_temperature>
	BMP280_get_pressure();		// Acquisition de la pression
 80012a6:	f7ff fea5 	bl	8000ff4 <BMP280_get_pressure>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80012aa:	bf00      	nop
 80012ac:	e7fd      	b.n	80012aa <main+0x36>
 80012ae:	bf00      	nop
 80012b0:	08005228 	.word	0x08005228

080012b4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b094      	sub	sp, #80	@ 0x50
 80012b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	2234      	movs	r2, #52	@ 0x34
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 fa2c 	bl	8004720 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c8:	f107 0308 	add.w	r3, r7, #8
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001388 <SystemClock_Config+0xd4>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	4a29      	ldr	r2, [pc, #164]	@ (8001388 <SystemClock_Config+0xd4>)
 80012e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e8:	4b27      	ldr	r3, [pc, #156]	@ (8001388 <SystemClock_Config+0xd4>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012f4:	2300      	movs	r3, #0
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	4b24      	ldr	r3, [pc, #144]	@ (800138c <SystemClock_Config+0xd8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001300:	4a22      	ldr	r2, [pc, #136]	@ (800138c <SystemClock_Config+0xd8>)
 8001302:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	4b20      	ldr	r3, [pc, #128]	@ (800138c <SystemClock_Config+0xd8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001314:	2302      	movs	r3, #2
 8001316:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001318:	2301      	movs	r3, #1
 800131a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800131c:	2310      	movs	r3, #16
 800131e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001320:	2302      	movs	r3, #2
 8001322:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001324:	2300      	movs	r3, #0
 8001326:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001328:	2310      	movs	r3, #16
 800132a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 800132c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001330:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001332:	2304      	movs	r3, #4
 8001334:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001336:	2302      	movs	r3, #2
 8001338:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800133a:	2302      	movs	r3, #2
 800133c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	4618      	mov	r0, r3
 8001344:	f002 f87a 	bl	800343c <HAL_RCC_OscConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 800134e:	f000 f81f 	bl	8001390 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001352:	230f      	movs	r3, #15
 8001354:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001356:	2302      	movs	r3, #2
 8001358:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800135e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001362:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	2102      	movs	r1, #2
 800136e:	4618      	mov	r0, r3
 8001370:	f001 fd1a 	bl	8002da8 <HAL_RCC_ClockConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0xca>
	{
		Error_Handler();
 800137a:	f000 f809 	bl	8001390 <Error_Handler>
	}
}
 800137e:	bf00      	nop
 8001380:	3750      	adds	r7, #80	@ 0x50
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800
 800138c:	40007000 	.word	0x40007000

08001390 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001394:	b672      	cpsid	i
}
 8001396:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <Error_Handler+0x8>

0800139c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <HAL_MspInit+0x4c>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013aa:	4a0f      	ldr	r2, [pc, #60]	@ (80013e8 <HAL_MspInit+0x4c>)
 80013ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013b2:	4b0d      	ldr	r3, [pc, #52]	@ (80013e8 <HAL_MspInit+0x4c>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <HAL_MspInit+0x4c>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c6:	4a08      	ldr	r2, [pc, #32]	@ (80013e8 <HAL_MspInit+0x4c>)
 80013c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ce:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <HAL_MspInit+0x4c>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013da:	2007      	movs	r0, #7
 80013dc:	f000 fb08 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800

080013ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <NMI_Handler+0x4>

080013f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <HardFault_Handler+0x4>

080013fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <MemManage_Handler+0x4>

08001404 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <UsageFault_Handler+0x4>

08001414 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001442:	f000 fa03 	bl	800184c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}

0800144a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	e00a      	b.n	8001472 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800145c:	f3af 8000 	nop.w
 8001460:	4601      	mov	r1, r0
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	1c5a      	adds	r2, r3, #1
 8001466:	60ba      	str	r2, [r7, #8]
 8001468:	b2ca      	uxtb	r2, r1
 800146a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	3301      	adds	r3, #1
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	429a      	cmp	r2, r3
 8001478:	dbf0      	blt.n	800145c <_read+0x12>
  }

  return len;
 800147a:	687b      	ldr	r3, [r7, #4]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	e009      	b.n	80014aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	1c5a      	adds	r2, r3, #1
 800149a:	60ba      	str	r2, [r7, #8]
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fecc 	bl	800123c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	3301      	adds	r3, #1
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	dbf1      	blt.n	8001496 <_write+0x12>
  }
  return len;
 80014b2:	687b      	ldr	r3, [r7, #4]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <_close>:

int _close(int file)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014e4:	605a      	str	r2, [r3, #4]
  return 0;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <_isatty>:

int _isatty(int file)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014fc:	2301      	movs	r3, #1
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800150a:	b480      	push	{r7}
 800150c:	b085      	sub	sp, #20
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800152c:	4a14      	ldr	r2, [pc, #80]	@ (8001580 <_sbrk+0x5c>)
 800152e:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <_sbrk+0x60>)
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001538:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001540:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <_sbrk+0x64>)
 8001542:	4a12      	ldr	r2, [pc, #72]	@ (800158c <_sbrk+0x68>)
 8001544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001546:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	429a      	cmp	r2, r3
 8001552:	d207      	bcs.n	8001564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001554:	f003 f942 	bl	80047dc <__errno>
 8001558:	4603      	mov	r3, r0
 800155a:	220c      	movs	r2, #12
 800155c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001562:	e009      	b.n	8001578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001564:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156a:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	4a05      	ldr	r2, [pc, #20]	@ (8001588 <_sbrk+0x64>)
 8001574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001576:	68fb      	ldr	r3, [r7, #12]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20020000 	.word	0x20020000
 8001584:	00000400 	.word	0x00000400
 8001588:	200000f4 	.word	0x200000f4
 800158c:	200002d8 	.word	0x200002d8

08001590 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001594:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <SystemInit+0x20>)
 8001596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800159a:	4a05      	ldr	r2, [pc, #20]	@ (80015b0 <SystemInit+0x20>)
 800159c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015b8:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <MX_USART1_UART_Init+0x4c>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	@ (8001604 <MX_USART1_UART_Init+0x50>)
 80015bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <MX_USART1_UART_Init+0x4c>)
 80015c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <MX_USART1_UART_Init+0x4c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <MX_USART1_UART_Init+0x4c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001600 <MX_USART1_UART_Init+0x4c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015d8:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <MX_USART1_UART_Init+0x4c>)
 80015da:	220c      	movs	r2, #12
 80015dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015de:	4b08      	ldr	r3, [pc, #32]	@ (8001600 <MX_USART1_UART_Init+0x4c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e4:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <MX_USART1_UART_Init+0x4c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ea:	4805      	ldr	r0, [pc, #20]	@ (8001600 <MX_USART1_UART_Init+0x4c>)
 80015ec:	f002 f9c4 	bl	8003978 <HAL_UART_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015f6:	f7ff fecb 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200000f8 	.word	0x200000f8
 8001604:	40011000 	.word	0x40011000

08001608 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800160c:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 800160e:	4a12      	ldr	r2, [pc, #72]	@ (8001658 <MX_USART2_UART_Init+0x50>)
 8001610:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001612:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 8001614:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001618:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800161a:	4b0e      	ldr	r3, [pc, #56]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001620:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001626:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800162c:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 800162e:	220c      	movs	r2, #12
 8001630:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001632:	4b08      	ldr	r3, [pc, #32]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001638:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800163e:	4805      	ldr	r0, [pc, #20]	@ (8001654 <MX_USART2_UART_Init+0x4c>)
 8001640:	f002 f99a 	bl	8003978 <HAL_UART_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800164a:	f7ff fea1 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000140 	.word	0x20000140
 8001658:	40004400 	.word	0x40004400

0800165c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08c      	sub	sp, #48	@ 0x30
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 031c 	add.w	r3, r7, #28
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a32      	ldr	r2, [pc, #200]	@ (8001744 <HAL_UART_MspInit+0xe8>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d12d      	bne.n	80016da <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
 8001682:	4b31      	ldr	r3, [pc, #196]	@ (8001748 <HAL_UART_MspInit+0xec>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001686:	4a30      	ldr	r2, [pc, #192]	@ (8001748 <HAL_UART_MspInit+0xec>)
 8001688:	f043 0310 	orr.w	r3, r3, #16
 800168c:	6453      	str	r3, [r2, #68]	@ 0x44
 800168e:	4b2e      	ldr	r3, [pc, #184]	@ (8001748 <HAL_UART_MspInit+0xec>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001692:	f003 0310 	and.w	r3, r3, #16
 8001696:	61bb      	str	r3, [r7, #24]
 8001698:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	4b2a      	ldr	r3, [pc, #168]	@ (8001748 <HAL_UART_MspInit+0xec>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	4a29      	ldr	r2, [pc, #164]	@ (8001748 <HAL_UART_MspInit+0xec>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016aa:	4b27      	ldr	r3, [pc, #156]	@ (8001748 <HAL_UART_MspInit+0xec>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016b6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c4:	2303      	movs	r3, #3
 80016c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016c8:	2307      	movs	r3, #7
 80016ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016cc:	f107 031c 	add.w	r3, r7, #28
 80016d0:	4619      	mov	r1, r3
 80016d2:	481e      	ldr	r0, [pc, #120]	@ (800174c <HAL_UART_MspInit+0xf0>)
 80016d4:	f000 f9c0 	bl	8001a58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016d8:	e030      	b.n	800173c <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a1c      	ldr	r2, [pc, #112]	@ (8001750 <HAL_UART_MspInit+0xf4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d12b      	bne.n	800173c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	4b17      	ldr	r3, [pc, #92]	@ (8001748 <HAL_UART_MspInit+0xec>)
 80016ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ec:	4a16      	ldr	r2, [pc, #88]	@ (8001748 <HAL_UART_MspInit+0xec>)
 80016ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f4:	4b14      	ldr	r3, [pc, #80]	@ (8001748 <HAL_UART_MspInit+0xec>)
 80016f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <HAL_UART_MspInit+0xec>)
 8001706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001708:	4a0f      	ldr	r2, [pc, #60]	@ (8001748 <HAL_UART_MspInit+0xec>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001710:	4b0d      	ldr	r3, [pc, #52]	@ (8001748 <HAL_UART_MspInit+0xec>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800171c:	230c      	movs	r3, #12
 800171e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800172c:	2307      	movs	r3, #7
 800172e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4619      	mov	r1, r3
 8001736:	4805      	ldr	r0, [pc, #20]	@ (800174c <HAL_UART_MspInit+0xf0>)
 8001738:	f000 f98e 	bl	8001a58 <HAL_GPIO_Init>
}
 800173c:	bf00      	nop
 800173e:	3730      	adds	r7, #48	@ 0x30
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40011000 	.word	0x40011000
 8001748:	40023800 	.word	0x40023800
 800174c:	40020000 	.word	0x40020000
 8001750:	40004400 	.word	0x40004400

08001754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001754:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800178c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001758:	f7ff ff1a 	bl	8001590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800175c:	480c      	ldr	r0, [pc, #48]	@ (8001790 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800175e:	490d      	ldr	r1, [pc, #52]	@ (8001794 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001760:	4a0d      	ldr	r2, [pc, #52]	@ (8001798 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001764:	e002      	b.n	800176c <LoopCopyDataInit>

08001766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176a:	3304      	adds	r3, #4

0800176c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800176c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001770:	d3f9      	bcc.n	8001766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001772:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001774:	4c0a      	ldr	r4, [pc, #40]	@ (80017a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001778:	e001      	b.n	800177e <LoopFillZerobss>

0800177a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800177c:	3204      	adds	r2, #4

0800177e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001780:	d3fb      	bcc.n	800177a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001782:	f003 f831 	bl	80047e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001786:	f7ff fd75 	bl	8001274 <main>
  bx  lr    
 800178a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800178c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001794:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001798:	080052a8 	.word	0x080052a8
  ldr r2, =_sbss
 800179c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80017a0:	200002d8 	.word	0x200002d8

080017a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a4:	e7fe      	b.n	80017a4 <ADC_IRQHandler>
	...

080017a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017ac:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0d      	ldr	r2, [pc, #52]	@ (80017e8 <HAL_Init+0x40>)
 80017b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017b8:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0a      	ldr	r2, [pc, #40]	@ (80017e8 <HAL_Init+0x40>)
 80017be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c4:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <HAL_Init+0x40>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a07      	ldr	r2, [pc, #28]	@ (80017e8 <HAL_Init+0x40>)
 80017ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d0:	2003      	movs	r0, #3
 80017d2:	f000 f90d 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017d6:	2000      	movs	r0, #0
 80017d8:	f000 f808 	bl	80017ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017dc:	f7ff fdde 	bl	800139c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023c00 	.word	0x40023c00

080017ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f4:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <HAL_InitTick+0x54>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <HAL_InitTick+0x58>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4619      	mov	r1, r3
 80017fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001802:	fbb3 f3f1 	udiv	r3, r3, r1
 8001806:	fbb2 f3f3 	udiv	r3, r2, r3
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f917 	bl	8001a3e <HAL_SYSTICK_Config>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e00e      	b.n	8001838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b0f      	cmp	r3, #15
 800181e:	d80a      	bhi.n	8001836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001820:	2200      	movs	r2, #0
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001828:	f000 f8ed 	bl	8001a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800182c:	4a06      	ldr	r2, [pc, #24]	@ (8001848 <HAL_InitTick+0x5c>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	e000      	b.n	8001838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000000 	.word	0x20000000
 8001844:	20000008 	.word	0x20000008
 8001848:	20000004 	.word	0x20000004

0800184c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <HAL_IncTick+0x20>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <HAL_IncTick+0x24>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4413      	add	r3, r2
 800185c:	4a04      	ldr	r2, [pc, #16]	@ (8001870 <HAL_IncTick+0x24>)
 800185e:	6013      	str	r3, [r2, #0]
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000008 	.word	0x20000008
 8001870:	20000188 	.word	0x20000188

08001874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return uwTick;
 8001878:	4b03      	ldr	r3, [pc, #12]	@ (8001888 <HAL_GetTick+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000188 	.word	0x20000188

0800188c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800189c:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018a8:	4013      	ands	r3, r2
 80018aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018be:	4a04      	ldr	r2, [pc, #16]	@ (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	60d3      	str	r3, [r2, #12]
}
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d8:	4b04      	ldr	r3, [pc, #16]	@ (80018ec <__NVIC_GetPriorityGrouping+0x18>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	0a1b      	lsrs	r3, r3, #8
 80018de:	f003 0307 	and.w	r3, r3, #7
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	@ (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	@ (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	@ 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f1c3 0307 	rsb	r3, r3, #7
 800195e:	2b04      	cmp	r3, #4
 8001960:	bf28      	it	cs
 8001962:	2304      	movcs	r3, #4
 8001964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3304      	adds	r3, #4
 800196a:	2b06      	cmp	r3, #6
 800196c:	d902      	bls.n	8001974 <NVIC_EncodePriority+0x30>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3b03      	subs	r3, #3
 8001972:	e000      	b.n	8001976 <NVIC_EncodePriority+0x32>
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800198c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43d9      	mvns	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	4313      	orrs	r3, r2
         );
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	@ 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019bc:	d301      	bcc.n	80019c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019be:	2301      	movs	r3, #1
 80019c0:	e00f      	b.n	80019e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c2:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <SysTick_Config+0x40>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ca:	210f      	movs	r1, #15
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019d0:	f7ff ff8e 	bl	80018f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d4:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <SysTick_Config+0x40>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019da:	4b04      	ldr	r3, [pc, #16]	@ (80019ec <SysTick_Config+0x40>)
 80019dc:	2207      	movs	r2, #7
 80019de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff47 	bl	800188c <__NVIC_SetPriorityGrouping>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a18:	f7ff ff5c 	bl	80018d4 <__NVIC_GetPriorityGrouping>
 8001a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	68b9      	ldr	r1, [r7, #8]
 8001a22:	6978      	ldr	r0, [r7, #20]
 8001a24:	f7ff ff8e 	bl	8001944 <NVIC_EncodePriority>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff5d 	bl	80018f0 <__NVIC_SetPriority>
}
 8001a36:	bf00      	nop
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ffb0 	bl	80019ac <SysTick_Config>
 8001a4c:	4603      	mov	r3, r0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	@ 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	e165      	b.n	8001d40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a74:	2201      	movs	r2, #1
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	f040 8154 	bne.w	8001d3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d005      	beq.n	8001aaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d130      	bne.n	8001b0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f003 0201 	and.w	r2, r3, #1
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d017      	beq.n	8001b48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	2203      	movs	r2, #3
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d123      	bne.n	8001b9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	08da      	lsrs	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3208      	adds	r2, #8
 8001b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	220f      	movs	r2, #15
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	08da      	lsrs	r2, r3, #3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3208      	adds	r2, #8
 8001b96:	69b9      	ldr	r1, [r7, #24]
 8001b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0203 	and.w	r2, r3, #3
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 80ae 	beq.w	8001d3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	4b5d      	ldr	r3, [pc, #372]	@ (8001d58 <HAL_GPIO_Init+0x300>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be6:	4a5c      	ldr	r2, [pc, #368]	@ (8001d58 <HAL_GPIO_Init+0x300>)
 8001be8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bee:	4b5a      	ldr	r3, [pc, #360]	@ (8001d58 <HAL_GPIO_Init+0x300>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bfa:	4a58      	ldr	r2, [pc, #352]	@ (8001d5c <HAL_GPIO_Init+0x304>)
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	089b      	lsrs	r3, r3, #2
 8001c00:	3302      	adds	r3, #2
 8001c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	220f      	movs	r2, #15
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4f      	ldr	r2, [pc, #316]	@ (8001d60 <HAL_GPIO_Init+0x308>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d025      	beq.n	8001c72 <HAL_GPIO_Init+0x21a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4e      	ldr	r2, [pc, #312]	@ (8001d64 <HAL_GPIO_Init+0x30c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d01f      	beq.n	8001c6e <HAL_GPIO_Init+0x216>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a4d      	ldr	r2, [pc, #308]	@ (8001d68 <HAL_GPIO_Init+0x310>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d019      	beq.n	8001c6a <HAL_GPIO_Init+0x212>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4c      	ldr	r2, [pc, #304]	@ (8001d6c <HAL_GPIO_Init+0x314>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d013      	beq.n	8001c66 <HAL_GPIO_Init+0x20e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a4b      	ldr	r2, [pc, #300]	@ (8001d70 <HAL_GPIO_Init+0x318>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d00d      	beq.n	8001c62 <HAL_GPIO_Init+0x20a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a4a      	ldr	r2, [pc, #296]	@ (8001d74 <HAL_GPIO_Init+0x31c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d007      	beq.n	8001c5e <HAL_GPIO_Init+0x206>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a49      	ldr	r2, [pc, #292]	@ (8001d78 <HAL_GPIO_Init+0x320>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d101      	bne.n	8001c5a <HAL_GPIO_Init+0x202>
 8001c56:	2306      	movs	r3, #6
 8001c58:	e00c      	b.n	8001c74 <HAL_GPIO_Init+0x21c>
 8001c5a:	2307      	movs	r3, #7
 8001c5c:	e00a      	b.n	8001c74 <HAL_GPIO_Init+0x21c>
 8001c5e:	2305      	movs	r3, #5
 8001c60:	e008      	b.n	8001c74 <HAL_GPIO_Init+0x21c>
 8001c62:	2304      	movs	r3, #4
 8001c64:	e006      	b.n	8001c74 <HAL_GPIO_Init+0x21c>
 8001c66:	2303      	movs	r3, #3
 8001c68:	e004      	b.n	8001c74 <HAL_GPIO_Init+0x21c>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e002      	b.n	8001c74 <HAL_GPIO_Init+0x21c>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <HAL_GPIO_Init+0x21c>
 8001c72:	2300      	movs	r3, #0
 8001c74:	69fa      	ldr	r2, [r7, #28]
 8001c76:	f002 0203 	and.w	r2, r2, #3
 8001c7a:	0092      	lsls	r2, r2, #2
 8001c7c:	4093      	lsls	r3, r2
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c84:	4935      	ldr	r1, [pc, #212]	@ (8001d5c <HAL_GPIO_Init+0x304>)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c92:	4b3a      	ldr	r3, [pc, #232]	@ (8001d7c <HAL_GPIO_Init+0x324>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cb6:	4a31      	ldr	r2, [pc, #196]	@ (8001d7c <HAL_GPIO_Init+0x324>)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cbc:	4b2f      	ldr	r3, [pc, #188]	@ (8001d7c <HAL_GPIO_Init+0x324>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ce0:	4a26      	ldr	r2, [pc, #152]	@ (8001d7c <HAL_GPIO_Init+0x324>)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ce6:	4b25      	ldr	r3, [pc, #148]	@ (8001d7c <HAL_GPIO_Init+0x324>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001d7c <HAL_GPIO_Init+0x324>)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d10:	4b1a      	ldr	r3, [pc, #104]	@ (8001d7c <HAL_GPIO_Init+0x324>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d34:	4a11      	ldr	r2, [pc, #68]	@ (8001d7c <HAL_GPIO_Init+0x324>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	61fb      	str	r3, [r7, #28]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	2b0f      	cmp	r3, #15
 8001d44:	f67f ae96 	bls.w	8001a74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	3724      	adds	r7, #36	@ 0x24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40013800 	.word	0x40013800
 8001d60:	40020000 	.word	0x40020000
 8001d64:	40020400 	.word	0x40020400
 8001d68:	40020800 	.word	0x40020800
 8001d6c:	40020c00 	.word	0x40020c00
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40021400 	.word	0x40021400
 8001d78:	40021800 	.word	0x40021800
 8001d7c:	40013c00 	.word	0x40013c00

08001d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	807b      	strh	r3, [r7, #2]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d90:	787b      	ldrb	r3, [r7, #1]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d96:	887a      	ldrh	r2, [r7, #2]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d9c:	e003      	b.n	8001da6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d9e:	887b      	ldrh	r3, [r7, #2]
 8001da0:	041a      	lsls	r2, r3, #16
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	619a      	str	r2, [r3, #24]
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e12b      	b.n	800201e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d106      	bne.n	8001de0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff f9e6 	bl	80011ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2224      	movs	r2, #36	@ 0x24
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0201 	bic.w	r2, r2, #1
 8001df6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e18:	f001 f8b8 	bl	8002f8c <HAL_RCC_GetPCLK1Freq>
 8001e1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	4a81      	ldr	r2, [pc, #516]	@ (8002028 <HAL_I2C_Init+0x274>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d807      	bhi.n	8001e38 <HAL_I2C_Init+0x84>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4a80      	ldr	r2, [pc, #512]	@ (800202c <HAL_I2C_Init+0x278>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	bf94      	ite	ls
 8001e30:	2301      	movls	r3, #1
 8001e32:	2300      	movhi	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	e006      	b.n	8001e46 <HAL_I2C_Init+0x92>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4a7d      	ldr	r2, [pc, #500]	@ (8002030 <HAL_I2C_Init+0x27c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	bf94      	ite	ls
 8001e40:	2301      	movls	r3, #1
 8001e42:	2300      	movhi	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e0e7      	b.n	800201e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4a78      	ldr	r2, [pc, #480]	@ (8002034 <HAL_I2C_Init+0x280>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	0c9b      	lsrs	r3, r3, #18
 8001e58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	4a6a      	ldr	r2, [pc, #424]	@ (8002028 <HAL_I2C_Init+0x274>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d802      	bhi.n	8001e88 <HAL_I2C_Init+0xd4>
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	3301      	adds	r3, #1
 8001e86:	e009      	b.n	8001e9c <HAL_I2C_Init+0xe8>
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e8e:	fb02 f303 	mul.w	r3, r2, r3
 8001e92:	4a69      	ldr	r2, [pc, #420]	@ (8002038 <HAL_I2C_Init+0x284>)
 8001e94:	fba2 2303 	umull	r2, r3, r2, r3
 8001e98:	099b      	lsrs	r3, r3, #6
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6812      	ldr	r2, [r2, #0]
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001eae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	495c      	ldr	r1, [pc, #368]	@ (8002028 <HAL_I2C_Init+0x274>)
 8001eb8:	428b      	cmp	r3, r1
 8001eba:	d819      	bhi.n	8001ef0 <HAL_I2C_Init+0x13c>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	1e59      	subs	r1, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eca:	1c59      	adds	r1, r3, #1
 8001ecc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ed0:	400b      	ands	r3, r1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00a      	beq.n	8001eec <HAL_I2C_Init+0x138>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	1e59      	subs	r1, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eea:	e051      	b.n	8001f90 <HAL_I2C_Init+0x1dc>
 8001eec:	2304      	movs	r3, #4
 8001eee:	e04f      	b.n	8001f90 <HAL_I2C_Init+0x1dc>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d111      	bne.n	8001f1c <HAL_I2C_Init+0x168>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1e58      	subs	r0, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6859      	ldr	r1, [r3, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	440b      	add	r3, r1
 8001f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	bf0c      	ite	eq
 8001f14:	2301      	moveq	r3, #1
 8001f16:	2300      	movne	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	e012      	b.n	8001f42 <HAL_I2C_Init+0x18e>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1e58      	subs	r0, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6859      	ldr	r1, [r3, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	0099      	lsls	r1, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f32:	3301      	adds	r3, #1
 8001f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf0c      	ite	eq
 8001f3c:	2301      	moveq	r3, #1
 8001f3e:	2300      	movne	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_I2C_Init+0x196>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e022      	b.n	8001f90 <HAL_I2C_Init+0x1dc>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10e      	bne.n	8001f70 <HAL_I2C_Init+0x1bc>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1e58      	subs	r0, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6859      	ldr	r1, [r3, #4]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	440b      	add	r3, r1
 8001f60:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f64:	3301      	adds	r3, #1
 8001f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f6e:	e00f      	b.n	8001f90 <HAL_I2C_Init+0x1dc>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1e58      	subs	r0, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6859      	ldr	r1, [r3, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	0099      	lsls	r1, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f86:	3301      	adds	r3, #1
 8001f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	6809      	ldr	r1, [r1, #0]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69da      	ldr	r2, [r3, #28]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001fbe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6911      	ldr	r1, [r2, #16]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68d2      	ldr	r2, [r2, #12]
 8001fca:	4311      	orrs	r1, r2
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695a      	ldr	r2, [r3, #20]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2220      	movs	r2, #32
 800200a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	000186a0 	.word	0x000186a0
 800202c:	001e847f 	.word	0x001e847f
 8002030:	003d08ff 	.word	0x003d08ff
 8002034:	431bde83 	.word	0x431bde83
 8002038:	10624dd3 	.word	0x10624dd3

0800203c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b088      	sub	sp, #32
 8002040:	af02      	add	r7, sp, #8
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	461a      	mov	r2, r3
 8002048:	460b      	mov	r3, r1
 800204a:	817b      	strh	r3, [r7, #10]
 800204c:	4613      	mov	r3, r2
 800204e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002050:	f7ff fc10 	bl	8001874 <HAL_GetTick>
 8002054:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b20      	cmp	r3, #32
 8002060:	f040 80e0 	bne.w	8002224 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	2319      	movs	r3, #25
 800206a:	2201      	movs	r2, #1
 800206c:	4970      	ldr	r1, [pc, #448]	@ (8002230 <HAL_I2C_Master_Transmit+0x1f4>)
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 fc64 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800207a:	2302      	movs	r3, #2
 800207c:	e0d3      	b.n	8002226 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_I2C_Master_Transmit+0x50>
 8002088:	2302      	movs	r3, #2
 800208a:	e0cc      	b.n	8002226 <HAL_I2C_Master_Transmit+0x1ea>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d007      	beq.n	80020b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 0201 	orr.w	r2, r2, #1
 80020b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2221      	movs	r2, #33	@ 0x21
 80020c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2210      	movs	r2, #16
 80020ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	893a      	ldrh	r2, [r7, #8]
 80020e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4a50      	ldr	r2, [pc, #320]	@ (8002234 <HAL_I2C_Master_Transmit+0x1f8>)
 80020f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020f4:	8979      	ldrh	r1, [r7, #10]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	6a3a      	ldr	r2, [r7, #32]
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 face 	bl	800269c <I2C_MasterRequestWrite>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e08d      	b.n	8002226 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002120:	e066      	b.n	80021f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	6a39      	ldr	r1, [r7, #32]
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 fd22 	bl	8002b70 <I2C_WaitOnTXEFlagUntilTimeout>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00d      	beq.n	800214e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	2b04      	cmp	r3, #4
 8002138:	d107      	bne.n	800214a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002148:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e06b      	b.n	8002226 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002152:	781a      	ldrb	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002168:	b29b      	uxth	r3, r3
 800216a:	3b01      	subs	r3, #1
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002176:	3b01      	subs	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b04      	cmp	r3, #4
 800218a:	d11b      	bne.n	80021c4 <HAL_I2C_Master_Transmit+0x188>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002190:	2b00      	cmp	r3, #0
 8002192:	d017      	beq.n	80021c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002198:	781a      	ldrb	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a4:	1c5a      	adds	r2, r3, #1
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021bc:	3b01      	subs	r3, #1
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	6a39      	ldr	r1, [r7, #32]
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 fd19 	bl	8002c00 <I2C_WaitOnBTFFlagUntilTimeout>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00d      	beq.n	80021f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d107      	bne.n	80021ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e01a      	b.n	8002226 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d194      	bne.n	8002122 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	e000      	b.n	8002226 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002224:	2302      	movs	r3, #2
  }
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	00100002 	.word	0x00100002
 8002234:	ffff0000 	.word	0xffff0000

08002238 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08c      	sub	sp, #48	@ 0x30
 800223c:	af02      	add	r7, sp, #8
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	461a      	mov	r2, r3
 8002244:	460b      	mov	r3, r1
 8002246:	817b      	strh	r3, [r7, #10]
 8002248:	4613      	mov	r3, r2
 800224a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800224c:	f7ff fb12 	bl	8001874 <HAL_GetTick>
 8002250:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b20      	cmp	r3, #32
 800225c:	f040 8217 	bne.w	800268e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	2319      	movs	r3, #25
 8002266:	2201      	movs	r2, #1
 8002268:	497c      	ldr	r1, [pc, #496]	@ (800245c <HAL_I2C_Master_Receive+0x224>)
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 fb66 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002276:	2302      	movs	r3, #2
 8002278:	e20a      	b.n	8002690 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_I2C_Master_Receive+0x50>
 8002284:	2302      	movs	r3, #2
 8002286:	e203      	b.n	8002690 <HAL_I2C_Master_Receive+0x458>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b01      	cmp	r3, #1
 800229c:	d007      	beq.n	80022ae <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 0201 	orr.w	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2222      	movs	r2, #34	@ 0x22
 80022c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2210      	movs	r2, #16
 80022ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	893a      	ldrh	r2, [r7, #8]
 80022de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4a5c      	ldr	r2, [pc, #368]	@ (8002460 <HAL_I2C_Master_Receive+0x228>)
 80022ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022f0:	8979      	ldrh	r1, [r7, #10]
 80022f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 fa52 	bl	80027a0 <I2C_MasterRequestRead>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e1c4      	b.n	8002690 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800230a:	2b00      	cmp	r3, #0
 800230c:	d113      	bne.n	8002336 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800230e:	2300      	movs	r3, #0
 8002310:	623b      	str	r3, [r7, #32]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	623b      	str	r3, [r7, #32]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	623b      	str	r3, [r7, #32]
 8002322:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	e198      	b.n	8002668 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800233a:	2b01      	cmp	r3, #1
 800233c:	d11b      	bne.n	8002376 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800234c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	e178      	b.n	8002668 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800237a:	2b02      	cmp	r3, #2
 800237c:	d11b      	bne.n	80023b6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800238c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800239c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800239e:	2300      	movs	r3, #0
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	e158      	b.n	8002668 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80023c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023dc:	e144      	b.n	8002668 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	f200 80f1 	bhi.w	80025ca <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d123      	bne.n	8002438 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 fc4b 	bl	8002c90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e145      	b.n	8002690 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002420:	3b01      	subs	r3, #1
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800242c:	b29b      	uxth	r3, r3
 800242e:	3b01      	subs	r3, #1
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002436:	e117      	b.n	8002668 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800243c:	2b02      	cmp	r3, #2
 800243e:	d14e      	bne.n	80024de <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002446:	2200      	movs	r2, #0
 8002448:	4906      	ldr	r1, [pc, #24]	@ (8002464 <HAL_I2C_Master_Receive+0x22c>)
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 fa76 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d008      	beq.n	8002468 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e11a      	b.n	8002690 <HAL_I2C_Master_Receive+0x458>
 800245a:	bf00      	nop
 800245c:	00100002 	.word	0x00100002
 8002460:	ffff0000 	.word	0xffff0000
 8002464:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002476:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	691a      	ldr	r2, [r3, #16]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024dc:	e0c4      	b.n	8002668 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e4:	2200      	movs	r2, #0
 80024e6:	496c      	ldr	r1, [pc, #432]	@ (8002698 <HAL_I2C_Master_Receive+0x460>)
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 fa27 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0cb      	b.n	8002690 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002506:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691a      	ldr	r2, [r3, #16]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002530:	b29b      	uxth	r3, r3
 8002532:	3b01      	subs	r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800253a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002540:	2200      	movs	r2, #0
 8002542:	4955      	ldr	r1, [pc, #340]	@ (8002698 <HAL_I2C_Master_Receive+0x460>)
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 f9f9 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e09d      	b.n	8002690 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002562:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	691a      	ldr	r2, [r3, #16]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002576:	1c5a      	adds	r2, r3, #1
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800258c:	b29b      	uxth	r3, r3
 800258e:	3b01      	subs	r3, #1
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025c8:	e04e      	b.n	8002668 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 fb5e 	bl	8002c90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e058      	b.n	8002690 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002606:	b29b      	uxth	r3, r3
 8002608:	3b01      	subs	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b04      	cmp	r3, #4
 800261c:	d124      	bne.n	8002668 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002622:	2b03      	cmp	r3, #3
 8002624:	d107      	bne.n	8002636 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002634:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002652:	3b01      	subs	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800265e:	b29b      	uxth	r3, r3
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800266c:	2b00      	cmp	r3, #0
 800266e:	f47f aeb6 	bne.w	80023de <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2220      	movs	r2, #32
 8002676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	e000      	b.n	8002690 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800268e:	2302      	movs	r3, #2
  }
}
 8002690:	4618      	mov	r0, r3
 8002692:	3728      	adds	r7, #40	@ 0x28
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	00010004 	.word	0x00010004

0800269c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b088      	sub	sp, #32
 80026a0:	af02      	add	r7, sp, #8
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	607a      	str	r2, [r7, #4]
 80026a6:	603b      	str	r3, [r7, #0]
 80026a8:	460b      	mov	r3, r1
 80026aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d006      	beq.n	80026c6 <I2C_MasterRequestWrite+0x2a>
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d003      	beq.n	80026c6 <I2C_MasterRequestWrite+0x2a>
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026c4:	d108      	bne.n	80026d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	e00b      	b.n	80026f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026dc:	2b12      	cmp	r3, #18
 80026de:	d107      	bne.n	80026f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 f91d 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00d      	beq.n	8002724 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002712:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002716:	d103      	bne.n	8002720 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800271e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e035      	b.n	8002790 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800272c:	d108      	bne.n	8002740 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800272e:	897b      	ldrh	r3, [r7, #10]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800273c:	611a      	str	r2, [r3, #16]
 800273e:	e01b      	b.n	8002778 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002740:	897b      	ldrh	r3, [r7, #10]
 8002742:	11db      	asrs	r3, r3, #7
 8002744:	b2db      	uxtb	r3, r3
 8002746:	f003 0306 	and.w	r3, r3, #6
 800274a:	b2db      	uxtb	r3, r3
 800274c:	f063 030f 	orn	r3, r3, #15
 8002750:	b2da      	uxtb	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	490e      	ldr	r1, [pc, #56]	@ (8002798 <I2C_MasterRequestWrite+0xfc>)
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f966 	bl	8002a30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e010      	b.n	8002790 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800276e:	897b      	ldrh	r3, [r7, #10]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	4907      	ldr	r1, [pc, #28]	@ (800279c <I2C_MasterRequestWrite+0x100>)
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 f956 	bl	8002a30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	00010008 	.word	0x00010008
 800279c:	00010002 	.word	0x00010002

080027a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	460b      	mov	r3, r1
 80027ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d006      	beq.n	80027da <I2C_MasterRequestRead+0x3a>
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d003      	beq.n	80027da <I2C_MasterRequestRead+0x3a>
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027d8:	d108      	bne.n	80027ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	e00b      	b.n	8002804 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f0:	2b11      	cmp	r3, #17
 80027f2:	d107      	bne.n	8002804 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002802:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f893 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00d      	beq.n	8002838 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002826:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800282a:	d103      	bne.n	8002834 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002832:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e079      	b.n	800292c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002840:	d108      	bne.n	8002854 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002842:	897b      	ldrh	r3, [r7, #10]
 8002844:	b2db      	uxtb	r3, r3
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	b2da      	uxtb	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	611a      	str	r2, [r3, #16]
 8002852:	e05f      	b.n	8002914 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002854:	897b      	ldrh	r3, [r7, #10]
 8002856:	11db      	asrs	r3, r3, #7
 8002858:	b2db      	uxtb	r3, r3
 800285a:	f003 0306 	and.w	r3, r3, #6
 800285e:	b2db      	uxtb	r3, r3
 8002860:	f063 030f 	orn	r3, r3, #15
 8002864:	b2da      	uxtb	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	4930      	ldr	r1, [pc, #192]	@ (8002934 <I2C_MasterRequestRead+0x194>)
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f8dc 	bl	8002a30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e054      	b.n	800292c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002882:	897b      	ldrh	r3, [r7, #10]
 8002884:	b2da      	uxtb	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	4929      	ldr	r1, [pc, #164]	@ (8002938 <I2C_MasterRequestRead+0x198>)
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 f8cc 	bl	8002a30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e044      	b.n	800292c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028c6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f831 	bl	800293c <I2C_WaitOnFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00d      	beq.n	80028fc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028ee:	d103      	bne.n	80028f8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028f6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e017      	b.n	800292c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80028fc:	897b      	ldrh	r3, [r7, #10]
 80028fe:	11db      	asrs	r3, r3, #7
 8002900:	b2db      	uxtb	r3, r3
 8002902:	f003 0306 	and.w	r3, r3, #6
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f063 030e 	orn	r3, r3, #14
 800290c:	b2da      	uxtb	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	4907      	ldr	r1, [pc, #28]	@ (8002938 <I2C_MasterRequestRead+0x198>)
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 f888 	bl	8002a30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	00010008 	.word	0x00010008
 8002938:	00010002 	.word	0x00010002

0800293c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800294c:	e048      	b.n	80029e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002954:	d044      	beq.n	80029e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002956:	f7fe ff8d 	bl	8001874 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d302      	bcc.n	800296c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d139      	bne.n	80029e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	0c1b      	lsrs	r3, r3, #16
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b01      	cmp	r3, #1
 8002974:	d10d      	bne.n	8002992 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	43da      	mvns	r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	4013      	ands	r3, r2
 8002982:	b29b      	uxth	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	bf0c      	ite	eq
 8002988:	2301      	moveq	r3, #1
 800298a:	2300      	movne	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	e00c      	b.n	80029ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	43da      	mvns	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	4013      	ands	r3, r2
 800299e:	b29b      	uxth	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	461a      	mov	r2, r3
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d116      	bne.n	80029e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	f043 0220 	orr.w	r2, r3, #32
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e023      	b.n	8002a28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	0c1b      	lsrs	r3, r3, #16
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d10d      	bne.n	8002a06 <I2C_WaitOnFlagUntilTimeout+0xca>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	43da      	mvns	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	4013      	ands	r3, r2
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	bf0c      	ite	eq
 80029fc:	2301      	moveq	r3, #1
 80029fe:	2300      	movne	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	e00c      	b.n	8002a20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	43da      	mvns	r2, r3
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	4013      	ands	r3, r2
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	bf0c      	ite	eq
 8002a18:	2301      	moveq	r3, #1
 8002a1a:	2300      	movne	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d093      	beq.n	800294e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a3e:	e071      	b.n	8002b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a4e:	d123      	bne.n	8002a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a5e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a84:	f043 0204 	orr.w	r2, r3, #4
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e067      	b.n	8002b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a9e:	d041      	beq.n	8002b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa0:	f7fe fee8 	bl	8001874 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d302      	bcc.n	8002ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d136      	bne.n	8002b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	0c1b      	lsrs	r3, r3, #16
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d10c      	bne.n	8002ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	43da      	mvns	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4013      	ands	r3, r2
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	bf14      	ite	ne
 8002ad2:	2301      	movne	r3, #1
 8002ad4:	2300      	moveq	r3, #0
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	e00b      	b.n	8002af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	43da      	mvns	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf14      	ite	ne
 8002aec:	2301      	movne	r3, #1
 8002aee:	2300      	moveq	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d016      	beq.n	8002b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b10:	f043 0220 	orr.w	r2, r3, #32
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e021      	b.n	8002b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	0c1b      	lsrs	r3, r3, #16
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d10c      	bne.n	8002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	43da      	mvns	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	bf14      	ite	ne
 8002b40:	2301      	movne	r3, #1
 8002b42:	2300      	moveq	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	e00b      	b.n	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	43da      	mvns	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4013      	ands	r3, r2
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	bf14      	ite	ne
 8002b5a:	2301      	movne	r3, #1
 8002b5c:	2300      	moveq	r3, #0
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f47f af6d 	bne.w	8002a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b7c:	e034      	b.n	8002be8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 f8e3 	bl	8002d4a <I2C_IsAcknowledgeFailed>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e034      	b.n	8002bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b94:	d028      	beq.n	8002be8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b96:	f7fe fe6d 	bl	8001874 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d302      	bcc.n	8002bac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d11d      	bne.n	8002be8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb6:	2b80      	cmp	r3, #128	@ 0x80
 8002bb8:	d016      	beq.n	8002be8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	f043 0220 	orr.w	r2, r3, #32
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e007      	b.n	8002bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf2:	2b80      	cmp	r3, #128	@ 0x80
 8002bf4:	d1c3      	bne.n	8002b7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c0c:	e034      	b.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f89b 	bl	8002d4a <I2C_IsAcknowledgeFailed>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e034      	b.n	8002c88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c24:	d028      	beq.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c26:	f7fe fe25 	bl	8001874 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d302      	bcc.n	8002c3c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d11d      	bne.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d016      	beq.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c64:	f043 0220 	orr.w	r2, r3, #32
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e007      	b.n	8002c88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d1c3      	bne.n	8002c0e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c9c:	e049      	b.n	8002d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b10      	cmp	r3, #16
 8002caa:	d119      	bne.n	8002ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0210 	mvn.w	r2, #16
 8002cb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e030      	b.n	8002d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce0:	f7fe fdc8 	bl	8001874 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d302      	bcc.n	8002cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d11d      	bne.n	8002d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d00:	2b40      	cmp	r3, #64	@ 0x40
 8002d02:	d016      	beq.n	8002d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	f043 0220 	orr.w	r2, r3, #32
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e007      	b.n	8002d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3c:	2b40      	cmp	r3, #64	@ 0x40
 8002d3e:	d1ae      	bne.n	8002c9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d60:	d11b      	bne.n	8002d9a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d6a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	f043 0204 	orr.w	r2, r3, #4
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0cc      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b68      	ldr	r3, [pc, #416]	@ (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d90c      	bls.n	8002de4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b65      	ldr	r3, [pc, #404]	@ (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	4b63      	ldr	r3, [pc, #396]	@ (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0b8      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d020      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dfc:	4b59      	ldr	r3, [pc, #356]	@ (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4a58      	ldr	r2, [pc, #352]	@ (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e14:	4b53      	ldr	r3, [pc, #332]	@ (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	4a52      	ldr	r2, [pc, #328]	@ (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e20:	4b50      	ldr	r3, [pc, #320]	@ (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	494d      	ldr	r1, [pc, #308]	@ (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d044      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	4b47      	ldr	r3, [pc, #284]	@ (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d119      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e07f      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d003      	beq.n	8002e66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d107      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e66:	4b3f      	ldr	r3, [pc, #252]	@ (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e06f      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e76:	4b3b      	ldr	r3, [pc, #236]	@ (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e067      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e86:	4b37      	ldr	r3, [pc, #220]	@ (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f023 0203 	bic.w	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4934      	ldr	r1, [pc, #208]	@ (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e98:	f7fe fcec 	bl	8001874 <HAL_GetTick>
 8002e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea0:	f7fe fce8 	bl	8001874 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e04f      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb6:	4b2b      	ldr	r3, [pc, #172]	@ (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 020c 	and.w	r2, r3, #12
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d1eb      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b25      	ldr	r3, [pc, #148]	@ (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d20c      	bcs.n	8002ef0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b22      	ldr	r3, [pc, #136]	@ (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b20      	ldr	r3, [pc, #128]	@ (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e032      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002efc:	4b19      	ldr	r3, [pc, #100]	@ (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4916      	ldr	r1, [pc, #88]	@ (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d009      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f1a:	4b12      	ldr	r3, [pc, #72]	@ (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	490e      	ldr	r1, [pc, #56]	@ (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f2e:	f000 f855 	bl	8002fdc <HAL_RCC_GetSysClockFreq>
 8002f32:	4602      	mov	r2, r0
 8002f34:	4b0b      	ldr	r3, [pc, #44]	@ (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	490a      	ldr	r1, [pc, #40]	@ (8002f68 <HAL_RCC_ClockConfig+0x1c0>)
 8002f40:	5ccb      	ldrb	r3, [r1, r3]
 8002f42:	fa22 f303 	lsr.w	r3, r2, r3
 8002f46:	4a09      	ldr	r2, [pc, #36]	@ (8002f6c <HAL_RCC_ClockConfig+0x1c4>)
 8002f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f4a:	4b09      	ldr	r3, [pc, #36]	@ (8002f70 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe fc4c 	bl	80017ec <HAL_InitTick>

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40023c00 	.word	0x40023c00
 8002f64:	40023800 	.word	0x40023800
 8002f68:	0800524c 	.word	0x0800524c
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	20000004 	.word	0x20000004

08002f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f78:	4b03      	ldr	r3, [pc, #12]	@ (8002f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000000 	.word	0x20000000

08002f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f90:	f7ff fff0 	bl	8002f74 <HAL_RCC_GetHCLKFreq>
 8002f94:	4602      	mov	r2, r0
 8002f96:	4b05      	ldr	r3, [pc, #20]	@ (8002fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	0a9b      	lsrs	r3, r3, #10
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	4903      	ldr	r1, [pc, #12]	@ (8002fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa2:	5ccb      	ldrb	r3, [r1, r3]
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	0800525c 	.word	0x0800525c

08002fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fb8:	f7ff ffdc 	bl	8002f74 <HAL_RCC_GetHCLKFreq>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	4b05      	ldr	r3, [pc, #20]	@ (8002fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	0b5b      	lsrs	r3, r3, #13
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	4903      	ldr	r1, [pc, #12]	@ (8002fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fca:	5ccb      	ldrb	r3, [r1, r3]
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	0800525c 	.word	0x0800525c

08002fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fe0:	b0ae      	sub	sp, #184	@ 0xb8
 8002fe2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003002:	4bcb      	ldr	r3, [pc, #812]	@ (8003330 <HAL_RCC_GetSysClockFreq+0x354>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	2b0c      	cmp	r3, #12
 800300c:	f200 8206 	bhi.w	800341c <HAL_RCC_GetSysClockFreq+0x440>
 8003010:	a201      	add	r2, pc, #4	@ (adr r2, 8003018 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003016:	bf00      	nop
 8003018:	0800304d 	.word	0x0800304d
 800301c:	0800341d 	.word	0x0800341d
 8003020:	0800341d 	.word	0x0800341d
 8003024:	0800341d 	.word	0x0800341d
 8003028:	08003055 	.word	0x08003055
 800302c:	0800341d 	.word	0x0800341d
 8003030:	0800341d 	.word	0x0800341d
 8003034:	0800341d 	.word	0x0800341d
 8003038:	0800305d 	.word	0x0800305d
 800303c:	0800341d 	.word	0x0800341d
 8003040:	0800341d 	.word	0x0800341d
 8003044:	0800341d 	.word	0x0800341d
 8003048:	0800324d 	.word	0x0800324d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800304c:	4bb9      	ldr	r3, [pc, #740]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x358>)
 800304e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003052:	e1e7      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003054:	4bb8      	ldr	r3, [pc, #736]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003056:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800305a:	e1e3      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800305c:	4bb4      	ldr	r3, [pc, #720]	@ (8003330 <HAL_RCC_GetSysClockFreq+0x354>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003064:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003068:	4bb1      	ldr	r3, [pc, #708]	@ (8003330 <HAL_RCC_GetSysClockFreq+0x354>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d071      	beq.n	8003158 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003074:	4bae      	ldr	r3, [pc, #696]	@ (8003330 <HAL_RCC_GetSysClockFreq+0x354>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	099b      	lsrs	r3, r3, #6
 800307a:	2200      	movs	r2, #0
 800307c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003080:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003084:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800308c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003090:	2300      	movs	r3, #0
 8003092:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003096:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800309a:	4622      	mov	r2, r4
 800309c:	462b      	mov	r3, r5
 800309e:	f04f 0000 	mov.w	r0, #0
 80030a2:	f04f 0100 	mov.w	r1, #0
 80030a6:	0159      	lsls	r1, r3, #5
 80030a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ac:	0150      	lsls	r0, r2, #5
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4621      	mov	r1, r4
 80030b4:	1a51      	subs	r1, r2, r1
 80030b6:	6439      	str	r1, [r7, #64]	@ 0x40
 80030b8:	4629      	mov	r1, r5
 80030ba:	eb63 0301 	sbc.w	r3, r3, r1
 80030be:	647b      	str	r3, [r7, #68]	@ 0x44
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	f04f 0300 	mov.w	r3, #0
 80030c8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80030cc:	4649      	mov	r1, r9
 80030ce:	018b      	lsls	r3, r1, #6
 80030d0:	4641      	mov	r1, r8
 80030d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030d6:	4641      	mov	r1, r8
 80030d8:	018a      	lsls	r2, r1, #6
 80030da:	4641      	mov	r1, r8
 80030dc:	1a51      	subs	r1, r2, r1
 80030de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80030e0:	4649      	mov	r1, r9
 80030e2:	eb63 0301 	sbc.w	r3, r3, r1
 80030e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80030f4:	4649      	mov	r1, r9
 80030f6:	00cb      	lsls	r3, r1, #3
 80030f8:	4641      	mov	r1, r8
 80030fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030fe:	4641      	mov	r1, r8
 8003100:	00ca      	lsls	r2, r1, #3
 8003102:	4610      	mov	r0, r2
 8003104:	4619      	mov	r1, r3
 8003106:	4603      	mov	r3, r0
 8003108:	4622      	mov	r2, r4
 800310a:	189b      	adds	r3, r3, r2
 800310c:	633b      	str	r3, [r7, #48]	@ 0x30
 800310e:	462b      	mov	r3, r5
 8003110:	460a      	mov	r2, r1
 8003112:	eb42 0303 	adc.w	r3, r2, r3
 8003116:	637b      	str	r3, [r7, #52]	@ 0x34
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003124:	4629      	mov	r1, r5
 8003126:	024b      	lsls	r3, r1, #9
 8003128:	4621      	mov	r1, r4
 800312a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800312e:	4621      	mov	r1, r4
 8003130:	024a      	lsls	r2, r1, #9
 8003132:	4610      	mov	r0, r2
 8003134:	4619      	mov	r1, r3
 8003136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800313a:	2200      	movs	r2, #0
 800313c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003140:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003144:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003148:	f7fd f902 	bl	8000350 <__aeabi_uldivmod>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4613      	mov	r3, r2
 8003152:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003156:	e067      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003158:	4b75      	ldr	r3, [pc, #468]	@ (8003330 <HAL_RCC_GetSysClockFreq+0x354>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	099b      	lsrs	r3, r3, #6
 800315e:	2200      	movs	r2, #0
 8003160:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003164:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003168:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800316c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003170:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003172:	2300      	movs	r3, #0
 8003174:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003176:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800317a:	4622      	mov	r2, r4
 800317c:	462b      	mov	r3, r5
 800317e:	f04f 0000 	mov.w	r0, #0
 8003182:	f04f 0100 	mov.w	r1, #0
 8003186:	0159      	lsls	r1, r3, #5
 8003188:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800318c:	0150      	lsls	r0, r2, #5
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4621      	mov	r1, r4
 8003194:	1a51      	subs	r1, r2, r1
 8003196:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003198:	4629      	mov	r1, r5
 800319a:	eb63 0301 	sbc.w	r3, r3, r1
 800319e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80031ac:	4649      	mov	r1, r9
 80031ae:	018b      	lsls	r3, r1, #6
 80031b0:	4641      	mov	r1, r8
 80031b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031b6:	4641      	mov	r1, r8
 80031b8:	018a      	lsls	r2, r1, #6
 80031ba:	4641      	mov	r1, r8
 80031bc:	ebb2 0a01 	subs.w	sl, r2, r1
 80031c0:	4649      	mov	r1, r9
 80031c2:	eb63 0b01 	sbc.w	fp, r3, r1
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031da:	4692      	mov	sl, r2
 80031dc:	469b      	mov	fp, r3
 80031de:	4623      	mov	r3, r4
 80031e0:	eb1a 0303 	adds.w	r3, sl, r3
 80031e4:	623b      	str	r3, [r7, #32]
 80031e6:	462b      	mov	r3, r5
 80031e8:	eb4b 0303 	adc.w	r3, fp, r3
 80031ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80031fa:	4629      	mov	r1, r5
 80031fc:	028b      	lsls	r3, r1, #10
 80031fe:	4621      	mov	r1, r4
 8003200:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003204:	4621      	mov	r1, r4
 8003206:	028a      	lsls	r2, r1, #10
 8003208:	4610      	mov	r0, r2
 800320a:	4619      	mov	r1, r3
 800320c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003210:	2200      	movs	r2, #0
 8003212:	673b      	str	r3, [r7, #112]	@ 0x70
 8003214:	677a      	str	r2, [r7, #116]	@ 0x74
 8003216:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800321a:	f7fd f899 	bl	8000350 <__aeabi_uldivmod>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4613      	mov	r3, r2
 8003224:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003228:	4b41      	ldr	r3, [pc, #260]	@ (8003330 <HAL_RCC_GetSysClockFreq+0x354>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	0c1b      	lsrs	r3, r3, #16
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	3301      	adds	r3, #1
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800323a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800323e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003242:	fbb2 f3f3 	udiv	r3, r2, r3
 8003246:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800324a:	e0eb      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800324c:	4b38      	ldr	r3, [pc, #224]	@ (8003330 <HAL_RCC_GetSysClockFreq+0x354>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003254:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003258:	4b35      	ldr	r3, [pc, #212]	@ (8003330 <HAL_RCC_GetSysClockFreq+0x354>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d06b      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003264:	4b32      	ldr	r3, [pc, #200]	@ (8003330 <HAL_RCC_GetSysClockFreq+0x354>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	099b      	lsrs	r3, r3, #6
 800326a:	2200      	movs	r2, #0
 800326c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800326e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003270:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003276:	663b      	str	r3, [r7, #96]	@ 0x60
 8003278:	2300      	movs	r3, #0
 800327a:	667b      	str	r3, [r7, #100]	@ 0x64
 800327c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003280:	4622      	mov	r2, r4
 8003282:	462b      	mov	r3, r5
 8003284:	f04f 0000 	mov.w	r0, #0
 8003288:	f04f 0100 	mov.w	r1, #0
 800328c:	0159      	lsls	r1, r3, #5
 800328e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003292:	0150      	lsls	r0, r2, #5
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4621      	mov	r1, r4
 800329a:	1a51      	subs	r1, r2, r1
 800329c:	61b9      	str	r1, [r7, #24]
 800329e:	4629      	mov	r1, r5
 80032a0:	eb63 0301 	sbc.w	r3, r3, r1
 80032a4:	61fb      	str	r3, [r7, #28]
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80032b2:	4659      	mov	r1, fp
 80032b4:	018b      	lsls	r3, r1, #6
 80032b6:	4651      	mov	r1, sl
 80032b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032bc:	4651      	mov	r1, sl
 80032be:	018a      	lsls	r2, r1, #6
 80032c0:	4651      	mov	r1, sl
 80032c2:	ebb2 0801 	subs.w	r8, r2, r1
 80032c6:	4659      	mov	r1, fp
 80032c8:	eb63 0901 	sbc.w	r9, r3, r1
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032e0:	4690      	mov	r8, r2
 80032e2:	4699      	mov	r9, r3
 80032e4:	4623      	mov	r3, r4
 80032e6:	eb18 0303 	adds.w	r3, r8, r3
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	462b      	mov	r3, r5
 80032ee:	eb49 0303 	adc.w	r3, r9, r3
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003300:	4629      	mov	r1, r5
 8003302:	024b      	lsls	r3, r1, #9
 8003304:	4621      	mov	r1, r4
 8003306:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800330a:	4621      	mov	r1, r4
 800330c:	024a      	lsls	r2, r1, #9
 800330e:	4610      	mov	r0, r2
 8003310:	4619      	mov	r1, r3
 8003312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003316:	2200      	movs	r2, #0
 8003318:	65bb      	str	r3, [r7, #88]	@ 0x58
 800331a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800331c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003320:	f7fd f816 	bl	8000350 <__aeabi_uldivmod>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4613      	mov	r3, r2
 800332a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800332e:	e065      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x420>
 8003330:	40023800 	.word	0x40023800
 8003334:	00f42400 	.word	0x00f42400
 8003338:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800333c:	4b3d      	ldr	r3, [pc, #244]	@ (8003434 <HAL_RCC_GetSysClockFreq+0x458>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	099b      	lsrs	r3, r3, #6
 8003342:	2200      	movs	r2, #0
 8003344:	4618      	mov	r0, r3
 8003346:	4611      	mov	r1, r2
 8003348:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800334c:	653b      	str	r3, [r7, #80]	@ 0x50
 800334e:	2300      	movs	r3, #0
 8003350:	657b      	str	r3, [r7, #84]	@ 0x54
 8003352:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003356:	4642      	mov	r2, r8
 8003358:	464b      	mov	r3, r9
 800335a:	f04f 0000 	mov.w	r0, #0
 800335e:	f04f 0100 	mov.w	r1, #0
 8003362:	0159      	lsls	r1, r3, #5
 8003364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003368:	0150      	lsls	r0, r2, #5
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4641      	mov	r1, r8
 8003370:	1a51      	subs	r1, r2, r1
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	4649      	mov	r1, r9
 8003376:	eb63 0301 	sbc.w	r3, r3, r1
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003388:	4659      	mov	r1, fp
 800338a:	018b      	lsls	r3, r1, #6
 800338c:	4651      	mov	r1, sl
 800338e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003392:	4651      	mov	r1, sl
 8003394:	018a      	lsls	r2, r1, #6
 8003396:	4651      	mov	r1, sl
 8003398:	1a54      	subs	r4, r2, r1
 800339a:	4659      	mov	r1, fp
 800339c:	eb63 0501 	sbc.w	r5, r3, r1
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	00eb      	lsls	r3, r5, #3
 80033aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033ae:	00e2      	lsls	r2, r4, #3
 80033b0:	4614      	mov	r4, r2
 80033b2:	461d      	mov	r5, r3
 80033b4:	4643      	mov	r3, r8
 80033b6:	18e3      	adds	r3, r4, r3
 80033b8:	603b      	str	r3, [r7, #0]
 80033ba:	464b      	mov	r3, r9
 80033bc:	eb45 0303 	adc.w	r3, r5, r3
 80033c0:	607b      	str	r3, [r7, #4]
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033ce:	4629      	mov	r1, r5
 80033d0:	028b      	lsls	r3, r1, #10
 80033d2:	4621      	mov	r1, r4
 80033d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033d8:	4621      	mov	r1, r4
 80033da:	028a      	lsls	r2, r1, #10
 80033dc:	4610      	mov	r0, r2
 80033de:	4619      	mov	r1, r3
 80033e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033e4:	2200      	movs	r2, #0
 80033e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033e8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80033ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80033ee:	f7fc ffaf 	bl	8000350 <__aeabi_uldivmod>
 80033f2:	4602      	mov	r2, r0
 80033f4:	460b      	mov	r3, r1
 80033f6:	4613      	mov	r3, r2
 80033f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80033fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003434 <HAL_RCC_GetSysClockFreq+0x458>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	0f1b      	lsrs	r3, r3, #28
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800340a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800340e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003412:	fbb2 f3f3 	udiv	r3, r2, r3
 8003416:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800341a:	e003      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800341c:	4b06      	ldr	r3, [pc, #24]	@ (8003438 <HAL_RCC_GetSysClockFreq+0x45c>)
 800341e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003422:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003424:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003428:	4618      	mov	r0, r3
 800342a:	37b8      	adds	r7, #184	@ 0xb8
 800342c:	46bd      	mov	sp, r7
 800342e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003432:	bf00      	nop
 8003434:	40023800 	.word	0x40023800
 8003438:	00f42400 	.word	0x00f42400

0800343c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e28d      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 8083 	beq.w	8003562 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800345c:	4b94      	ldr	r3, [pc, #592]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	2b04      	cmp	r3, #4
 8003466:	d019      	beq.n	800349c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003468:	4b91      	ldr	r3, [pc, #580]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003470:	2b08      	cmp	r3, #8
 8003472:	d106      	bne.n	8003482 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003474:	4b8e      	ldr	r3, [pc, #568]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800347c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003480:	d00c      	beq.n	800349c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003482:	4b8b      	ldr	r3, [pc, #556]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800348a:	2b0c      	cmp	r3, #12
 800348c:	d112      	bne.n	80034b4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800348e:	4b88      	ldr	r3, [pc, #544]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003496:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800349a:	d10b      	bne.n	80034b4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800349c:	4b84      	ldr	r3, [pc, #528]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d05b      	beq.n	8003560 <HAL_RCC_OscConfig+0x124>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d157      	bne.n	8003560 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e25a      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034bc:	d106      	bne.n	80034cc <HAL_RCC_OscConfig+0x90>
 80034be:	4b7c      	ldr	r3, [pc, #496]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a7b      	ldr	r2, [pc, #492]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 80034c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	e01d      	b.n	8003508 <HAL_RCC_OscConfig+0xcc>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCC_OscConfig+0xb4>
 80034d6:	4b76      	ldr	r3, [pc, #472]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a75      	ldr	r2, [pc, #468]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 80034dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	4b73      	ldr	r3, [pc, #460]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a72      	ldr	r2, [pc, #456]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 80034e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	e00b      	b.n	8003508 <HAL_RCC_OscConfig+0xcc>
 80034f0:	4b6f      	ldr	r3, [pc, #444]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a6e      	ldr	r2, [pc, #440]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 80034f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034fa:	6013      	str	r3, [r2, #0]
 80034fc:	4b6c      	ldr	r3, [pc, #432]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a6b      	ldr	r2, [pc, #428]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003502:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d013      	beq.n	8003538 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7fe f9b0 	bl	8001874 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003518:	f7fe f9ac 	bl	8001874 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b64      	cmp	r3, #100	@ 0x64
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e21f      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352a:	4b61      	ldr	r3, [pc, #388]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f0      	beq.n	8003518 <HAL_RCC_OscConfig+0xdc>
 8003536:	e014      	b.n	8003562 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7fe f99c 	bl	8001874 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003540:	f7fe f998 	bl	8001874 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b64      	cmp	r3, #100	@ 0x64
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e20b      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003552:	4b57      	ldr	r3, [pc, #348]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0x104>
 800355e:	e000      	b.n	8003562 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d06f      	beq.n	800364e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800356e:	4b50      	ldr	r3, [pc, #320]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	2b00      	cmp	r3, #0
 8003578:	d017      	beq.n	80035aa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800357a:	4b4d      	ldr	r3, [pc, #308]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003582:	2b08      	cmp	r3, #8
 8003584:	d105      	bne.n	8003592 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003586:	4b4a      	ldr	r3, [pc, #296]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00b      	beq.n	80035aa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003592:	4b47      	ldr	r3, [pc, #284]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800359a:	2b0c      	cmp	r3, #12
 800359c:	d11c      	bne.n	80035d8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800359e:	4b44      	ldr	r3, [pc, #272]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d116      	bne.n	80035d8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035aa:	4b41      	ldr	r3, [pc, #260]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d005      	beq.n	80035c2 <HAL_RCC_OscConfig+0x186>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d001      	beq.n	80035c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e1d3      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c2:	4b3b      	ldr	r3, [pc, #236]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4937      	ldr	r1, [pc, #220]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d6:	e03a      	b.n	800364e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d020      	beq.n	8003622 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e0:	4b34      	ldr	r3, [pc, #208]	@ (80036b4 <HAL_RCC_OscConfig+0x278>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e6:	f7fe f945 	bl	8001874 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ee:	f7fe f941 	bl	8001874 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e1b4      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003600:	4b2b      	ldr	r3, [pc, #172]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800360c:	4b28      	ldr	r3, [pc, #160]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4925      	ldr	r1, [pc, #148]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 800361c:	4313      	orrs	r3, r2
 800361e:	600b      	str	r3, [r1, #0]
 8003620:	e015      	b.n	800364e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003622:	4b24      	ldr	r3, [pc, #144]	@ (80036b4 <HAL_RCC_OscConfig+0x278>)
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003628:	f7fe f924 	bl	8001874 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003630:	f7fe f920 	bl	8001874 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e193      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003642:	4b1b      	ldr	r3, [pc, #108]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d036      	beq.n	80036c8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d016      	beq.n	8003690 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003662:	4b15      	ldr	r3, [pc, #84]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 8003664:	2201      	movs	r2, #1
 8003666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003668:	f7fe f904 	bl	8001874 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003670:	f7fe f900 	bl	8001874 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e173      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003682:	4b0b      	ldr	r3, [pc, #44]	@ (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0x234>
 800368e:	e01b      	b.n	80036c8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003690:	4b09      	ldr	r3, [pc, #36]	@ (80036b8 <HAL_RCC_OscConfig+0x27c>)
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003696:	f7fe f8ed 	bl	8001874 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800369c:	e00e      	b.n	80036bc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800369e:	f7fe f8e9 	bl	8001874 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d907      	bls.n	80036bc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e15c      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
 80036b0:	40023800 	.word	0x40023800
 80036b4:	42470000 	.word	0x42470000
 80036b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036bc:	4b8a      	ldr	r3, [pc, #552]	@ (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 80036be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1ea      	bne.n	800369e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8097 	beq.w	8003804 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d6:	2300      	movs	r3, #0
 80036d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036da:	4b83      	ldr	r3, [pc, #524]	@ (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10f      	bne.n	8003706 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	4b7f      	ldr	r3, [pc, #508]	@ (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ee:	4a7e      	ldr	r2, [pc, #504]	@ (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 80036f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80036f6:	4b7c      	ldr	r3, [pc, #496]	@ (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036fe:	60bb      	str	r3, [r7, #8]
 8003700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003702:	2301      	movs	r3, #1
 8003704:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003706:	4b79      	ldr	r3, [pc, #484]	@ (80038ec <HAL_RCC_OscConfig+0x4b0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800370e:	2b00      	cmp	r3, #0
 8003710:	d118      	bne.n	8003744 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003712:	4b76      	ldr	r3, [pc, #472]	@ (80038ec <HAL_RCC_OscConfig+0x4b0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a75      	ldr	r2, [pc, #468]	@ (80038ec <HAL_RCC_OscConfig+0x4b0>)
 8003718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800371c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800371e:	f7fe f8a9 	bl	8001874 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003726:	f7fe f8a5 	bl	8001874 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e118      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003738:	4b6c      	ldr	r3, [pc, #432]	@ (80038ec <HAL_RCC_OscConfig+0x4b0>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0f0      	beq.n	8003726 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d106      	bne.n	800375a <HAL_RCC_OscConfig+0x31e>
 800374c:	4b66      	ldr	r3, [pc, #408]	@ (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 800374e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003750:	4a65      	ldr	r2, [pc, #404]	@ (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	6713      	str	r3, [r2, #112]	@ 0x70
 8003758:	e01c      	b.n	8003794 <HAL_RCC_OscConfig+0x358>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b05      	cmp	r3, #5
 8003760:	d10c      	bne.n	800377c <HAL_RCC_OscConfig+0x340>
 8003762:	4b61      	ldr	r3, [pc, #388]	@ (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 8003764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003766:	4a60      	ldr	r2, [pc, #384]	@ (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 8003768:	f043 0304 	orr.w	r3, r3, #4
 800376c:	6713      	str	r3, [r2, #112]	@ 0x70
 800376e:	4b5e      	ldr	r3, [pc, #376]	@ (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 8003770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003772:	4a5d      	ldr	r2, [pc, #372]	@ (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	6713      	str	r3, [r2, #112]	@ 0x70
 800377a:	e00b      	b.n	8003794 <HAL_RCC_OscConfig+0x358>
 800377c:	4b5a      	ldr	r3, [pc, #360]	@ (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003780:	4a59      	ldr	r2, [pc, #356]	@ (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 8003782:	f023 0301 	bic.w	r3, r3, #1
 8003786:	6713      	str	r3, [r2, #112]	@ 0x70
 8003788:	4b57      	ldr	r3, [pc, #348]	@ (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 800378a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378c:	4a56      	ldr	r2, [pc, #344]	@ (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 800378e:	f023 0304 	bic.w	r3, r3, #4
 8003792:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d015      	beq.n	80037c8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379c:	f7fe f86a 	bl	8001874 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a2:	e00a      	b.n	80037ba <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a4:	f7fe f866 	bl	8001874 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e0d7      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ba:	4b4b      	ldr	r3, [pc, #300]	@ (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 80037bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0ee      	beq.n	80037a4 <HAL_RCC_OscConfig+0x368>
 80037c6:	e014      	b.n	80037f2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c8:	f7fe f854 	bl	8001874 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ce:	e00a      	b.n	80037e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d0:	f7fe f850 	bl	8001874 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037de:	4293      	cmp	r3, r2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e0c1      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e6:	4b40      	ldr	r3, [pc, #256]	@ (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1ee      	bne.n	80037d0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037f2:	7dfb      	ldrb	r3, [r7, #23]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d105      	bne.n	8003804 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f8:	4b3b      	ldr	r3, [pc, #236]	@ (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 80037fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fc:	4a3a      	ldr	r2, [pc, #232]	@ (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 80037fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003802:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80ad 	beq.w	8003968 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800380e:	4b36      	ldr	r3, [pc, #216]	@ (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 030c 	and.w	r3, r3, #12
 8003816:	2b08      	cmp	r3, #8
 8003818:	d060      	beq.n	80038dc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d145      	bne.n	80038ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003822:	4b33      	ldr	r3, [pc, #204]	@ (80038f0 <HAL_RCC_OscConfig+0x4b4>)
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fe f824 	bl	8001874 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003830:	f7fe f820 	bl	8001874 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e093      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003842:	4b29      	ldr	r3, [pc, #164]	@ (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69da      	ldr	r2, [r3, #28]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385c:	019b      	lsls	r3, r3, #6
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	3b01      	subs	r3, #1
 8003868:	041b      	lsls	r3, r3, #16
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003870:	061b      	lsls	r3, r3, #24
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003878:	071b      	lsls	r3, r3, #28
 800387a:	491b      	ldr	r1, [pc, #108]	@ (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 800387c:	4313      	orrs	r3, r2
 800387e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003880:	4b1b      	ldr	r3, [pc, #108]	@ (80038f0 <HAL_RCC_OscConfig+0x4b4>)
 8003882:	2201      	movs	r2, #1
 8003884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003886:	f7fd fff5 	bl	8001874 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388e:	f7fd fff1 	bl	8001874 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e064      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a0:	4b11      	ldr	r3, [pc, #68]	@ (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <HAL_RCC_OscConfig+0x452>
 80038ac:	e05c      	b.n	8003968 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ae:	4b10      	ldr	r3, [pc, #64]	@ (80038f0 <HAL_RCC_OscConfig+0x4b4>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fd ffde 	bl	8001874 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038bc:	f7fd ffda 	bl	8001874 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e04d      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ce:	4b06      	ldr	r3, [pc, #24]	@ (80038e8 <HAL_RCC_OscConfig+0x4ac>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x480>
 80038da:	e045      	b.n	8003968 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d107      	bne.n	80038f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e040      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
 80038e8:	40023800 	.word	0x40023800
 80038ec:	40007000 	.word	0x40007000
 80038f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003974 <HAL_RCC_OscConfig+0x538>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d030      	beq.n	8003964 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800390c:	429a      	cmp	r2, r3
 800390e:	d129      	bne.n	8003964 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391a:	429a      	cmp	r2, r3
 800391c:	d122      	bne.n	8003964 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003924:	4013      	ands	r3, r2
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800392a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800392c:	4293      	cmp	r3, r2
 800392e:	d119      	bne.n	8003964 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393a:	085b      	lsrs	r3, r3, #1
 800393c:	3b01      	subs	r3, #1
 800393e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003940:	429a      	cmp	r2, r3
 8003942:	d10f      	bne.n	8003964 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003950:	429a      	cmp	r2, r3
 8003952:	d107      	bne.n	8003964 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003960:	429a      	cmp	r2, r3
 8003962:	d001      	beq.n	8003968 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40023800 	.word	0x40023800

08003978 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e042      	b.n	8003a10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fd fe5c 	bl	800165c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2224      	movs	r2, #36	@ 0x24
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f973 	bl	8003ca8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08a      	sub	sp, #40	@ 0x28
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	4613      	mov	r3, r2
 8003a26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d175      	bne.n	8003b24 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HAL_UART_Transmit+0x2c>
 8003a3e:	88fb      	ldrh	r3, [r7, #6]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e06e      	b.n	8003b26 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2221      	movs	r2, #33	@ 0x21
 8003a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a56:	f7fd ff0d 	bl	8001874 <HAL_GetTick>
 8003a5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	88fa      	ldrh	r2, [r7, #6]
 8003a60:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	88fa      	ldrh	r2, [r7, #6]
 8003a66:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a70:	d108      	bne.n	8003a84 <HAL_UART_Transmit+0x6c>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d104      	bne.n	8003a84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	61bb      	str	r3, [r7, #24]
 8003a82:	e003      	b.n	8003a8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a8c:	e02e      	b.n	8003aec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2200      	movs	r2, #0
 8003a96:	2180      	movs	r1, #128	@ 0x80
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f848 	bl	8003b2e <UART_WaitOnFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e03a      	b.n	8003b26 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10b      	bne.n	8003ace <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ac4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	3302      	adds	r3, #2
 8003aca:	61bb      	str	r3, [r7, #24]
 8003acc:	e007      	b.n	8003ade <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	781a      	ldrb	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	3301      	adds	r3, #1
 8003adc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1cb      	bne.n	8003a8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	2200      	movs	r2, #0
 8003afe:	2140      	movs	r1, #64	@ 0x40
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f814 	bl	8003b2e <UART_WaitOnFlagUntilTimeout>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d005      	beq.n	8003b18 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e006      	b.n	8003b26 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	e000      	b.n	8003b26 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b24:	2302      	movs	r3, #2
  }
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3720      	adds	r7, #32
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b086      	sub	sp, #24
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	603b      	str	r3, [r7, #0]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b3e:	e03b      	b.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b46:	d037      	beq.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b48:	f7fd fe94 	bl	8001874 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	6a3a      	ldr	r2, [r7, #32]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d302      	bcc.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x30>
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e03a      	b.n	8003bd8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d023      	beq.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b80      	cmp	r3, #128	@ 0x80
 8003b74:	d020      	beq.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b40      	cmp	r3, #64	@ 0x40
 8003b7a:	d01d      	beq.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b08      	cmp	r3, #8
 8003b88:	d116      	bne.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f81d 	bl	8003be0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2208      	movs	r2, #8
 8003baa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e00f      	b.n	8003bd8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	bf0c      	ite	eq
 8003bc8:	2301      	moveq	r3, #1
 8003bca:	2300      	movne	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	461a      	mov	r2, r3
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d0b4      	beq.n	8003b40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b095      	sub	sp, #84	@ 0x54
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	330c      	adds	r3, #12
 8003bee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bf2:	e853 3f00 	ldrex	r3, [r3]
 8003bf6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	330c      	adds	r3, #12
 8003c06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c08:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c10:	e841 2300 	strex	r3, r2, [r1]
 8003c14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e5      	bne.n	8003be8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3314      	adds	r3, #20
 8003c22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	e853 3f00 	ldrex	r3, [r3]
 8003c2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f023 0301 	bic.w	r3, r3, #1
 8003c32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3314      	adds	r3, #20
 8003c3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c44:	e841 2300 	strex	r3, r2, [r1]
 8003c48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e5      	bne.n	8003c1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d119      	bne.n	8003c8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	330c      	adds	r3, #12
 8003c5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	e853 3f00 	ldrex	r3, [r3]
 8003c66:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f023 0310 	bic.w	r3, r3, #16
 8003c6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	330c      	adds	r3, #12
 8003c76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c78:	61ba      	str	r2, [r7, #24]
 8003c7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7c:	6979      	ldr	r1, [r7, #20]
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	e841 2300 	strex	r3, r2, [r1]
 8003c84:	613b      	str	r3, [r7, #16]
   return(result);
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1e5      	bne.n	8003c58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c9a:	bf00      	nop
 8003c9c:	3754      	adds	r7, #84	@ 0x54
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
	...

08003ca8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cac:	b0c0      	sub	sp, #256	@ 0x100
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc4:	68d9      	ldr	r1, [r3, #12]
 8003cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	ea40 0301 	orr.w	r3, r0, r1
 8003cd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d00:	f021 010c 	bic.w	r1, r1, #12
 8003d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d0e:	430b      	orrs	r3, r1
 8003d10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d22:	6999      	ldr	r1, [r3, #24]
 8003d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	ea40 0301 	orr.w	r3, r0, r1
 8003d2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4b8f      	ldr	r3, [pc, #572]	@ (8003f74 <UART_SetConfig+0x2cc>)
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d005      	beq.n	8003d48 <UART_SetConfig+0xa0>
 8003d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	4b8d      	ldr	r3, [pc, #564]	@ (8003f78 <UART_SetConfig+0x2d0>)
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d104      	bne.n	8003d52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d48:	f7ff f934 	bl	8002fb4 <HAL_RCC_GetPCLK2Freq>
 8003d4c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d50:	e003      	b.n	8003d5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d52:	f7ff f91b 	bl	8002f8c <HAL_RCC_GetPCLK1Freq>
 8003d56:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d64:	f040 810c 	bne.w	8003f80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d72:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d7a:	4622      	mov	r2, r4
 8003d7c:	462b      	mov	r3, r5
 8003d7e:	1891      	adds	r1, r2, r2
 8003d80:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d82:	415b      	adcs	r3, r3
 8003d84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	eb12 0801 	adds.w	r8, r2, r1
 8003d90:	4629      	mov	r1, r5
 8003d92:	eb43 0901 	adc.w	r9, r3, r1
 8003d96:	f04f 0200 	mov.w	r2, #0
 8003d9a:	f04f 0300 	mov.w	r3, #0
 8003d9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003da2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003da6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003daa:	4690      	mov	r8, r2
 8003dac:	4699      	mov	r9, r3
 8003dae:	4623      	mov	r3, r4
 8003db0:	eb18 0303 	adds.w	r3, r8, r3
 8003db4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003db8:	462b      	mov	r3, r5
 8003dba:	eb49 0303 	adc.w	r3, r9, r3
 8003dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003dce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003dd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	18db      	adds	r3, r3, r3
 8003dda:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ddc:	4613      	mov	r3, r2
 8003dde:	eb42 0303 	adc.w	r3, r2, r3
 8003de2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003de4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003de8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003dec:	f7fc fab0 	bl	8000350 <__aeabi_uldivmod>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	4b61      	ldr	r3, [pc, #388]	@ (8003f7c <UART_SetConfig+0x2d4>)
 8003df6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	011c      	lsls	r4, r3, #4
 8003dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e02:	2200      	movs	r2, #0
 8003e04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e10:	4642      	mov	r2, r8
 8003e12:	464b      	mov	r3, r9
 8003e14:	1891      	adds	r1, r2, r2
 8003e16:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e18:	415b      	adcs	r3, r3
 8003e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e20:	4641      	mov	r1, r8
 8003e22:	eb12 0a01 	adds.w	sl, r2, r1
 8003e26:	4649      	mov	r1, r9
 8003e28:	eb43 0b01 	adc.w	fp, r3, r1
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e40:	4692      	mov	sl, r2
 8003e42:	469b      	mov	fp, r3
 8003e44:	4643      	mov	r3, r8
 8003e46:	eb1a 0303 	adds.w	r3, sl, r3
 8003e4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e4e:	464b      	mov	r3, r9
 8003e50:	eb4b 0303 	adc.w	r3, fp, r3
 8003e54:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e64:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	18db      	adds	r3, r3, r3
 8003e70:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e72:	4613      	mov	r3, r2
 8003e74:	eb42 0303 	adc.w	r3, r2, r3
 8003e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e82:	f7fc fa65 	bl	8000350 <__aeabi_uldivmod>
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f7c <UART_SetConfig+0x2d4>)
 8003e8e:	fba3 2301 	umull	r2, r3, r3, r1
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	2264      	movs	r2, #100	@ 0x64
 8003e96:	fb02 f303 	mul.w	r3, r2, r3
 8003e9a:	1acb      	subs	r3, r1, r3
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ea2:	4b36      	ldr	r3, [pc, #216]	@ (8003f7c <UART_SetConfig+0x2d4>)
 8003ea4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ea8:	095b      	lsrs	r3, r3, #5
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003eb0:	441c      	add	r4, r3
 8003eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ebc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ec0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ec4:	4642      	mov	r2, r8
 8003ec6:	464b      	mov	r3, r9
 8003ec8:	1891      	adds	r1, r2, r2
 8003eca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ecc:	415b      	adcs	r3, r3
 8003ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ed0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ed4:	4641      	mov	r1, r8
 8003ed6:	1851      	adds	r1, r2, r1
 8003ed8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003eda:	4649      	mov	r1, r9
 8003edc:	414b      	adcs	r3, r1
 8003ede:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003eec:	4659      	mov	r1, fp
 8003eee:	00cb      	lsls	r3, r1, #3
 8003ef0:	4651      	mov	r1, sl
 8003ef2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ef6:	4651      	mov	r1, sl
 8003ef8:	00ca      	lsls	r2, r1, #3
 8003efa:	4610      	mov	r0, r2
 8003efc:	4619      	mov	r1, r3
 8003efe:	4603      	mov	r3, r0
 8003f00:	4642      	mov	r2, r8
 8003f02:	189b      	adds	r3, r3, r2
 8003f04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f08:	464b      	mov	r3, r9
 8003f0a:	460a      	mov	r2, r1
 8003f0c:	eb42 0303 	adc.w	r3, r2, r3
 8003f10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f20:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f28:	460b      	mov	r3, r1
 8003f2a:	18db      	adds	r3, r3, r3
 8003f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f2e:	4613      	mov	r3, r2
 8003f30:	eb42 0303 	adc.w	r3, r2, r3
 8003f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f3e:	f7fc fa07 	bl	8000350 <__aeabi_uldivmod>
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4b0d      	ldr	r3, [pc, #52]	@ (8003f7c <UART_SetConfig+0x2d4>)
 8003f48:	fba3 1302 	umull	r1, r3, r3, r2
 8003f4c:	095b      	lsrs	r3, r3, #5
 8003f4e:	2164      	movs	r1, #100	@ 0x64
 8003f50:	fb01 f303 	mul.w	r3, r1, r3
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	3332      	adds	r3, #50	@ 0x32
 8003f5a:	4a08      	ldr	r2, [pc, #32]	@ (8003f7c <UART_SetConfig+0x2d4>)
 8003f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f60:	095b      	lsrs	r3, r3, #5
 8003f62:	f003 0207 	and.w	r2, r3, #7
 8003f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4422      	add	r2, r4
 8003f6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f70:	e106      	b.n	8004180 <UART_SetConfig+0x4d8>
 8003f72:	bf00      	nop
 8003f74:	40011000 	.word	0x40011000
 8003f78:	40011400 	.word	0x40011400
 8003f7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f84:	2200      	movs	r2, #0
 8003f86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f8a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f92:	4642      	mov	r2, r8
 8003f94:	464b      	mov	r3, r9
 8003f96:	1891      	adds	r1, r2, r2
 8003f98:	6239      	str	r1, [r7, #32]
 8003f9a:	415b      	adcs	r3, r3
 8003f9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fa2:	4641      	mov	r1, r8
 8003fa4:	1854      	adds	r4, r2, r1
 8003fa6:	4649      	mov	r1, r9
 8003fa8:	eb43 0501 	adc.w	r5, r3, r1
 8003fac:	f04f 0200 	mov.w	r2, #0
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	00eb      	lsls	r3, r5, #3
 8003fb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fba:	00e2      	lsls	r2, r4, #3
 8003fbc:	4614      	mov	r4, r2
 8003fbe:	461d      	mov	r5, r3
 8003fc0:	4643      	mov	r3, r8
 8003fc2:	18e3      	adds	r3, r4, r3
 8003fc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fc8:	464b      	mov	r3, r9
 8003fca:	eb45 0303 	adc.w	r3, r5, r3
 8003fce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fde:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003fee:	4629      	mov	r1, r5
 8003ff0:	008b      	lsls	r3, r1, #2
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ff8:	4621      	mov	r1, r4
 8003ffa:	008a      	lsls	r2, r1, #2
 8003ffc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004000:	f7fc f9a6 	bl	8000350 <__aeabi_uldivmod>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4b60      	ldr	r3, [pc, #384]	@ (800418c <UART_SetConfig+0x4e4>)
 800400a:	fba3 2302 	umull	r2, r3, r3, r2
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	011c      	lsls	r4, r3, #4
 8004012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004016:	2200      	movs	r2, #0
 8004018:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800401c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004020:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004024:	4642      	mov	r2, r8
 8004026:	464b      	mov	r3, r9
 8004028:	1891      	adds	r1, r2, r2
 800402a:	61b9      	str	r1, [r7, #24]
 800402c:	415b      	adcs	r3, r3
 800402e:	61fb      	str	r3, [r7, #28]
 8004030:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004034:	4641      	mov	r1, r8
 8004036:	1851      	adds	r1, r2, r1
 8004038:	6139      	str	r1, [r7, #16]
 800403a:	4649      	mov	r1, r9
 800403c:	414b      	adcs	r3, r1
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800404c:	4659      	mov	r1, fp
 800404e:	00cb      	lsls	r3, r1, #3
 8004050:	4651      	mov	r1, sl
 8004052:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004056:	4651      	mov	r1, sl
 8004058:	00ca      	lsls	r2, r1, #3
 800405a:	4610      	mov	r0, r2
 800405c:	4619      	mov	r1, r3
 800405e:	4603      	mov	r3, r0
 8004060:	4642      	mov	r2, r8
 8004062:	189b      	adds	r3, r3, r2
 8004064:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004068:	464b      	mov	r3, r9
 800406a:	460a      	mov	r2, r1
 800406c:	eb42 0303 	adc.w	r3, r2, r3
 8004070:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800407e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800408c:	4649      	mov	r1, r9
 800408e:	008b      	lsls	r3, r1, #2
 8004090:	4641      	mov	r1, r8
 8004092:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004096:	4641      	mov	r1, r8
 8004098:	008a      	lsls	r2, r1, #2
 800409a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800409e:	f7fc f957 	bl	8000350 <__aeabi_uldivmod>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4611      	mov	r1, r2
 80040a8:	4b38      	ldr	r3, [pc, #224]	@ (800418c <UART_SetConfig+0x4e4>)
 80040aa:	fba3 2301 	umull	r2, r3, r3, r1
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	2264      	movs	r2, #100	@ 0x64
 80040b2:	fb02 f303 	mul.w	r3, r2, r3
 80040b6:	1acb      	subs	r3, r1, r3
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	3332      	adds	r3, #50	@ 0x32
 80040bc:	4a33      	ldr	r2, [pc, #204]	@ (800418c <UART_SetConfig+0x4e4>)
 80040be:	fba2 2303 	umull	r2, r3, r2, r3
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040c8:	441c      	add	r4, r3
 80040ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ce:	2200      	movs	r2, #0
 80040d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80040d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80040d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80040d8:	4642      	mov	r2, r8
 80040da:	464b      	mov	r3, r9
 80040dc:	1891      	adds	r1, r2, r2
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	415b      	adcs	r3, r3
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040e8:	4641      	mov	r1, r8
 80040ea:	1851      	adds	r1, r2, r1
 80040ec:	6039      	str	r1, [r7, #0]
 80040ee:	4649      	mov	r1, r9
 80040f0:	414b      	adcs	r3, r1
 80040f2:	607b      	str	r3, [r7, #4]
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004100:	4659      	mov	r1, fp
 8004102:	00cb      	lsls	r3, r1, #3
 8004104:	4651      	mov	r1, sl
 8004106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800410a:	4651      	mov	r1, sl
 800410c:	00ca      	lsls	r2, r1, #3
 800410e:	4610      	mov	r0, r2
 8004110:	4619      	mov	r1, r3
 8004112:	4603      	mov	r3, r0
 8004114:	4642      	mov	r2, r8
 8004116:	189b      	adds	r3, r3, r2
 8004118:	66bb      	str	r3, [r7, #104]	@ 0x68
 800411a:	464b      	mov	r3, r9
 800411c:	460a      	mov	r2, r1
 800411e:	eb42 0303 	adc.w	r3, r2, r3
 8004122:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	663b      	str	r3, [r7, #96]	@ 0x60
 800412e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004130:	f04f 0200 	mov.w	r2, #0
 8004134:	f04f 0300 	mov.w	r3, #0
 8004138:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800413c:	4649      	mov	r1, r9
 800413e:	008b      	lsls	r3, r1, #2
 8004140:	4641      	mov	r1, r8
 8004142:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004146:	4641      	mov	r1, r8
 8004148:	008a      	lsls	r2, r1, #2
 800414a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800414e:	f7fc f8ff 	bl	8000350 <__aeabi_uldivmod>
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	4b0d      	ldr	r3, [pc, #52]	@ (800418c <UART_SetConfig+0x4e4>)
 8004158:	fba3 1302 	umull	r1, r3, r3, r2
 800415c:	095b      	lsrs	r3, r3, #5
 800415e:	2164      	movs	r1, #100	@ 0x64
 8004160:	fb01 f303 	mul.w	r3, r1, r3
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	3332      	adds	r3, #50	@ 0x32
 800416a:	4a08      	ldr	r2, [pc, #32]	@ (800418c <UART_SetConfig+0x4e4>)
 800416c:	fba2 2303 	umull	r2, r3, r2, r3
 8004170:	095b      	lsrs	r3, r3, #5
 8004172:	f003 020f 	and.w	r2, r3, #15
 8004176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4422      	add	r2, r4
 800417e:	609a      	str	r2, [r3, #8]
}
 8004180:	bf00      	nop
 8004182:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004186:	46bd      	mov	sp, r7
 8004188:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800418c:	51eb851f 	.word	0x51eb851f

08004190 <malloc>:
 8004190:	4b02      	ldr	r3, [pc, #8]	@ (800419c <malloc+0xc>)
 8004192:	4601      	mov	r1, r0
 8004194:	6818      	ldr	r0, [r3, #0]
 8004196:	f000 b82d 	b.w	80041f4 <_malloc_r>
 800419a:	bf00      	nop
 800419c:	20000018 	.word	0x20000018

080041a0 <free>:
 80041a0:	4b02      	ldr	r3, [pc, #8]	@ (80041ac <free+0xc>)
 80041a2:	4601      	mov	r1, r0
 80041a4:	6818      	ldr	r0, [r3, #0]
 80041a6:	f000 bb47 	b.w	8004838 <_free_r>
 80041aa:	bf00      	nop
 80041ac:	20000018 	.word	0x20000018

080041b0 <sbrk_aligned>:
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	4e0f      	ldr	r6, [pc, #60]	@ (80041f0 <sbrk_aligned+0x40>)
 80041b4:	460c      	mov	r4, r1
 80041b6:	6831      	ldr	r1, [r6, #0]
 80041b8:	4605      	mov	r5, r0
 80041ba:	b911      	cbnz	r1, 80041c2 <sbrk_aligned+0x12>
 80041bc:	f000 faec 	bl	8004798 <_sbrk_r>
 80041c0:	6030      	str	r0, [r6, #0]
 80041c2:	4621      	mov	r1, r4
 80041c4:	4628      	mov	r0, r5
 80041c6:	f000 fae7 	bl	8004798 <_sbrk_r>
 80041ca:	1c43      	adds	r3, r0, #1
 80041cc:	d103      	bne.n	80041d6 <sbrk_aligned+0x26>
 80041ce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80041d2:	4620      	mov	r0, r4
 80041d4:	bd70      	pop	{r4, r5, r6, pc}
 80041d6:	1cc4      	adds	r4, r0, #3
 80041d8:	f024 0403 	bic.w	r4, r4, #3
 80041dc:	42a0      	cmp	r0, r4
 80041de:	d0f8      	beq.n	80041d2 <sbrk_aligned+0x22>
 80041e0:	1a21      	subs	r1, r4, r0
 80041e2:	4628      	mov	r0, r5
 80041e4:	f000 fad8 	bl	8004798 <_sbrk_r>
 80041e8:	3001      	adds	r0, #1
 80041ea:	d1f2      	bne.n	80041d2 <sbrk_aligned+0x22>
 80041ec:	e7ef      	b.n	80041ce <sbrk_aligned+0x1e>
 80041ee:	bf00      	nop
 80041f0:	2000018c 	.word	0x2000018c

080041f4 <_malloc_r>:
 80041f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041f8:	1ccd      	adds	r5, r1, #3
 80041fa:	f025 0503 	bic.w	r5, r5, #3
 80041fe:	3508      	adds	r5, #8
 8004200:	2d0c      	cmp	r5, #12
 8004202:	bf38      	it	cc
 8004204:	250c      	movcc	r5, #12
 8004206:	2d00      	cmp	r5, #0
 8004208:	4606      	mov	r6, r0
 800420a:	db01      	blt.n	8004210 <_malloc_r+0x1c>
 800420c:	42a9      	cmp	r1, r5
 800420e:	d904      	bls.n	800421a <_malloc_r+0x26>
 8004210:	230c      	movs	r3, #12
 8004212:	6033      	str	r3, [r6, #0]
 8004214:	2000      	movs	r0, #0
 8004216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800421a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80042f0 <_malloc_r+0xfc>
 800421e:	f000 f869 	bl	80042f4 <__malloc_lock>
 8004222:	f8d8 3000 	ldr.w	r3, [r8]
 8004226:	461c      	mov	r4, r3
 8004228:	bb44      	cbnz	r4, 800427c <_malloc_r+0x88>
 800422a:	4629      	mov	r1, r5
 800422c:	4630      	mov	r0, r6
 800422e:	f7ff ffbf 	bl	80041b0 <sbrk_aligned>
 8004232:	1c43      	adds	r3, r0, #1
 8004234:	4604      	mov	r4, r0
 8004236:	d158      	bne.n	80042ea <_malloc_r+0xf6>
 8004238:	f8d8 4000 	ldr.w	r4, [r8]
 800423c:	4627      	mov	r7, r4
 800423e:	2f00      	cmp	r7, #0
 8004240:	d143      	bne.n	80042ca <_malloc_r+0xd6>
 8004242:	2c00      	cmp	r4, #0
 8004244:	d04b      	beq.n	80042de <_malloc_r+0xea>
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	4639      	mov	r1, r7
 800424a:	4630      	mov	r0, r6
 800424c:	eb04 0903 	add.w	r9, r4, r3
 8004250:	f000 faa2 	bl	8004798 <_sbrk_r>
 8004254:	4581      	cmp	r9, r0
 8004256:	d142      	bne.n	80042de <_malloc_r+0xea>
 8004258:	6821      	ldr	r1, [r4, #0]
 800425a:	1a6d      	subs	r5, r5, r1
 800425c:	4629      	mov	r1, r5
 800425e:	4630      	mov	r0, r6
 8004260:	f7ff ffa6 	bl	80041b0 <sbrk_aligned>
 8004264:	3001      	adds	r0, #1
 8004266:	d03a      	beq.n	80042de <_malloc_r+0xea>
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	442b      	add	r3, r5
 800426c:	6023      	str	r3, [r4, #0]
 800426e:	f8d8 3000 	ldr.w	r3, [r8]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	bb62      	cbnz	r2, 80042d0 <_malloc_r+0xdc>
 8004276:	f8c8 7000 	str.w	r7, [r8]
 800427a:	e00f      	b.n	800429c <_malloc_r+0xa8>
 800427c:	6822      	ldr	r2, [r4, #0]
 800427e:	1b52      	subs	r2, r2, r5
 8004280:	d420      	bmi.n	80042c4 <_malloc_r+0xd0>
 8004282:	2a0b      	cmp	r2, #11
 8004284:	d917      	bls.n	80042b6 <_malloc_r+0xc2>
 8004286:	1961      	adds	r1, r4, r5
 8004288:	42a3      	cmp	r3, r4
 800428a:	6025      	str	r5, [r4, #0]
 800428c:	bf18      	it	ne
 800428e:	6059      	strne	r1, [r3, #4]
 8004290:	6863      	ldr	r3, [r4, #4]
 8004292:	bf08      	it	eq
 8004294:	f8c8 1000 	streq.w	r1, [r8]
 8004298:	5162      	str	r2, [r4, r5]
 800429a:	604b      	str	r3, [r1, #4]
 800429c:	4630      	mov	r0, r6
 800429e:	f000 f82f 	bl	8004300 <__malloc_unlock>
 80042a2:	f104 000b 	add.w	r0, r4, #11
 80042a6:	1d23      	adds	r3, r4, #4
 80042a8:	f020 0007 	bic.w	r0, r0, #7
 80042ac:	1ac2      	subs	r2, r0, r3
 80042ae:	bf1c      	itt	ne
 80042b0:	1a1b      	subne	r3, r3, r0
 80042b2:	50a3      	strne	r3, [r4, r2]
 80042b4:	e7af      	b.n	8004216 <_malloc_r+0x22>
 80042b6:	6862      	ldr	r2, [r4, #4]
 80042b8:	42a3      	cmp	r3, r4
 80042ba:	bf0c      	ite	eq
 80042bc:	f8c8 2000 	streq.w	r2, [r8]
 80042c0:	605a      	strne	r2, [r3, #4]
 80042c2:	e7eb      	b.n	800429c <_malloc_r+0xa8>
 80042c4:	4623      	mov	r3, r4
 80042c6:	6864      	ldr	r4, [r4, #4]
 80042c8:	e7ae      	b.n	8004228 <_malloc_r+0x34>
 80042ca:	463c      	mov	r4, r7
 80042cc:	687f      	ldr	r7, [r7, #4]
 80042ce:	e7b6      	b.n	800423e <_malloc_r+0x4a>
 80042d0:	461a      	mov	r2, r3
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	42a3      	cmp	r3, r4
 80042d6:	d1fb      	bne.n	80042d0 <_malloc_r+0xdc>
 80042d8:	2300      	movs	r3, #0
 80042da:	6053      	str	r3, [r2, #4]
 80042dc:	e7de      	b.n	800429c <_malloc_r+0xa8>
 80042de:	230c      	movs	r3, #12
 80042e0:	6033      	str	r3, [r6, #0]
 80042e2:	4630      	mov	r0, r6
 80042e4:	f000 f80c 	bl	8004300 <__malloc_unlock>
 80042e8:	e794      	b.n	8004214 <_malloc_r+0x20>
 80042ea:	6005      	str	r5, [r0, #0]
 80042ec:	e7d6      	b.n	800429c <_malloc_r+0xa8>
 80042ee:	bf00      	nop
 80042f0:	20000190 	.word	0x20000190

080042f4 <__malloc_lock>:
 80042f4:	4801      	ldr	r0, [pc, #4]	@ (80042fc <__malloc_lock+0x8>)
 80042f6:	f000 ba9c 	b.w	8004832 <__retarget_lock_acquire_recursive>
 80042fa:	bf00      	nop
 80042fc:	200002d4 	.word	0x200002d4

08004300 <__malloc_unlock>:
 8004300:	4801      	ldr	r0, [pc, #4]	@ (8004308 <__malloc_unlock+0x8>)
 8004302:	f000 ba97 	b.w	8004834 <__retarget_lock_release_recursive>
 8004306:	bf00      	nop
 8004308:	200002d4 	.word	0x200002d4

0800430c <std>:
 800430c:	2300      	movs	r3, #0
 800430e:	b510      	push	{r4, lr}
 8004310:	4604      	mov	r4, r0
 8004312:	e9c0 3300 	strd	r3, r3, [r0]
 8004316:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800431a:	6083      	str	r3, [r0, #8]
 800431c:	8181      	strh	r1, [r0, #12]
 800431e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004320:	81c2      	strh	r2, [r0, #14]
 8004322:	6183      	str	r3, [r0, #24]
 8004324:	4619      	mov	r1, r3
 8004326:	2208      	movs	r2, #8
 8004328:	305c      	adds	r0, #92	@ 0x5c
 800432a:	f000 f9f9 	bl	8004720 <memset>
 800432e:	4b0d      	ldr	r3, [pc, #52]	@ (8004364 <std+0x58>)
 8004330:	6263      	str	r3, [r4, #36]	@ 0x24
 8004332:	4b0d      	ldr	r3, [pc, #52]	@ (8004368 <std+0x5c>)
 8004334:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004336:	4b0d      	ldr	r3, [pc, #52]	@ (800436c <std+0x60>)
 8004338:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800433a:	4b0d      	ldr	r3, [pc, #52]	@ (8004370 <std+0x64>)
 800433c:	6323      	str	r3, [r4, #48]	@ 0x30
 800433e:	4b0d      	ldr	r3, [pc, #52]	@ (8004374 <std+0x68>)
 8004340:	6224      	str	r4, [r4, #32]
 8004342:	429c      	cmp	r4, r3
 8004344:	d006      	beq.n	8004354 <std+0x48>
 8004346:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800434a:	4294      	cmp	r4, r2
 800434c:	d002      	beq.n	8004354 <std+0x48>
 800434e:	33d0      	adds	r3, #208	@ 0xd0
 8004350:	429c      	cmp	r4, r3
 8004352:	d105      	bne.n	8004360 <std+0x54>
 8004354:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800435c:	f000 ba68 	b.w	8004830 <__retarget_lock_init_recursive>
 8004360:	bd10      	pop	{r4, pc}
 8004362:	bf00      	nop
 8004364:	08004571 	.word	0x08004571
 8004368:	08004593 	.word	0x08004593
 800436c:	080045cb 	.word	0x080045cb
 8004370:	080045ef 	.word	0x080045ef
 8004374:	20000194 	.word	0x20000194

08004378 <stdio_exit_handler>:
 8004378:	4a02      	ldr	r2, [pc, #8]	@ (8004384 <stdio_exit_handler+0xc>)
 800437a:	4903      	ldr	r1, [pc, #12]	@ (8004388 <stdio_exit_handler+0x10>)
 800437c:	4803      	ldr	r0, [pc, #12]	@ (800438c <stdio_exit_handler+0x14>)
 800437e:	f000 b869 	b.w	8004454 <_fwalk_sglue>
 8004382:	bf00      	nop
 8004384:	2000000c 	.word	0x2000000c
 8004388:	08004f75 	.word	0x08004f75
 800438c:	2000001c 	.word	0x2000001c

08004390 <cleanup_stdio>:
 8004390:	6841      	ldr	r1, [r0, #4]
 8004392:	4b0c      	ldr	r3, [pc, #48]	@ (80043c4 <cleanup_stdio+0x34>)
 8004394:	4299      	cmp	r1, r3
 8004396:	b510      	push	{r4, lr}
 8004398:	4604      	mov	r4, r0
 800439a:	d001      	beq.n	80043a0 <cleanup_stdio+0x10>
 800439c:	f000 fdea 	bl	8004f74 <_fflush_r>
 80043a0:	68a1      	ldr	r1, [r4, #8]
 80043a2:	4b09      	ldr	r3, [pc, #36]	@ (80043c8 <cleanup_stdio+0x38>)
 80043a4:	4299      	cmp	r1, r3
 80043a6:	d002      	beq.n	80043ae <cleanup_stdio+0x1e>
 80043a8:	4620      	mov	r0, r4
 80043aa:	f000 fde3 	bl	8004f74 <_fflush_r>
 80043ae:	68e1      	ldr	r1, [r4, #12]
 80043b0:	4b06      	ldr	r3, [pc, #24]	@ (80043cc <cleanup_stdio+0x3c>)
 80043b2:	4299      	cmp	r1, r3
 80043b4:	d004      	beq.n	80043c0 <cleanup_stdio+0x30>
 80043b6:	4620      	mov	r0, r4
 80043b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043bc:	f000 bdda 	b.w	8004f74 <_fflush_r>
 80043c0:	bd10      	pop	{r4, pc}
 80043c2:	bf00      	nop
 80043c4:	20000194 	.word	0x20000194
 80043c8:	200001fc 	.word	0x200001fc
 80043cc:	20000264 	.word	0x20000264

080043d0 <global_stdio_init.part.0>:
 80043d0:	b510      	push	{r4, lr}
 80043d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004400 <global_stdio_init.part.0+0x30>)
 80043d4:	4c0b      	ldr	r4, [pc, #44]	@ (8004404 <global_stdio_init.part.0+0x34>)
 80043d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004408 <global_stdio_init.part.0+0x38>)
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	4620      	mov	r0, r4
 80043dc:	2200      	movs	r2, #0
 80043de:	2104      	movs	r1, #4
 80043e0:	f7ff ff94 	bl	800430c <std>
 80043e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80043e8:	2201      	movs	r2, #1
 80043ea:	2109      	movs	r1, #9
 80043ec:	f7ff ff8e 	bl	800430c <std>
 80043f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80043f4:	2202      	movs	r2, #2
 80043f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043fa:	2112      	movs	r1, #18
 80043fc:	f7ff bf86 	b.w	800430c <std>
 8004400:	200002cc 	.word	0x200002cc
 8004404:	20000194 	.word	0x20000194
 8004408:	08004379 	.word	0x08004379

0800440c <__sfp_lock_acquire>:
 800440c:	4801      	ldr	r0, [pc, #4]	@ (8004414 <__sfp_lock_acquire+0x8>)
 800440e:	f000 ba10 	b.w	8004832 <__retarget_lock_acquire_recursive>
 8004412:	bf00      	nop
 8004414:	200002d5 	.word	0x200002d5

08004418 <__sfp_lock_release>:
 8004418:	4801      	ldr	r0, [pc, #4]	@ (8004420 <__sfp_lock_release+0x8>)
 800441a:	f000 ba0b 	b.w	8004834 <__retarget_lock_release_recursive>
 800441e:	bf00      	nop
 8004420:	200002d5 	.word	0x200002d5

08004424 <__sinit>:
 8004424:	b510      	push	{r4, lr}
 8004426:	4604      	mov	r4, r0
 8004428:	f7ff fff0 	bl	800440c <__sfp_lock_acquire>
 800442c:	6a23      	ldr	r3, [r4, #32]
 800442e:	b11b      	cbz	r3, 8004438 <__sinit+0x14>
 8004430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004434:	f7ff bff0 	b.w	8004418 <__sfp_lock_release>
 8004438:	4b04      	ldr	r3, [pc, #16]	@ (800444c <__sinit+0x28>)
 800443a:	6223      	str	r3, [r4, #32]
 800443c:	4b04      	ldr	r3, [pc, #16]	@ (8004450 <__sinit+0x2c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1f5      	bne.n	8004430 <__sinit+0xc>
 8004444:	f7ff ffc4 	bl	80043d0 <global_stdio_init.part.0>
 8004448:	e7f2      	b.n	8004430 <__sinit+0xc>
 800444a:	bf00      	nop
 800444c:	08004391 	.word	0x08004391
 8004450:	200002cc 	.word	0x200002cc

08004454 <_fwalk_sglue>:
 8004454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004458:	4607      	mov	r7, r0
 800445a:	4688      	mov	r8, r1
 800445c:	4614      	mov	r4, r2
 800445e:	2600      	movs	r6, #0
 8004460:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004464:	f1b9 0901 	subs.w	r9, r9, #1
 8004468:	d505      	bpl.n	8004476 <_fwalk_sglue+0x22>
 800446a:	6824      	ldr	r4, [r4, #0]
 800446c:	2c00      	cmp	r4, #0
 800446e:	d1f7      	bne.n	8004460 <_fwalk_sglue+0xc>
 8004470:	4630      	mov	r0, r6
 8004472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004476:	89ab      	ldrh	r3, [r5, #12]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d907      	bls.n	800448c <_fwalk_sglue+0x38>
 800447c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004480:	3301      	adds	r3, #1
 8004482:	d003      	beq.n	800448c <_fwalk_sglue+0x38>
 8004484:	4629      	mov	r1, r5
 8004486:	4638      	mov	r0, r7
 8004488:	47c0      	blx	r8
 800448a:	4306      	orrs	r6, r0
 800448c:	3568      	adds	r5, #104	@ 0x68
 800448e:	e7e9      	b.n	8004464 <_fwalk_sglue+0x10>

08004490 <iprintf>:
 8004490:	b40f      	push	{r0, r1, r2, r3}
 8004492:	b507      	push	{r0, r1, r2, lr}
 8004494:	4906      	ldr	r1, [pc, #24]	@ (80044b0 <iprintf+0x20>)
 8004496:	ab04      	add	r3, sp, #16
 8004498:	6808      	ldr	r0, [r1, #0]
 800449a:	f853 2b04 	ldr.w	r2, [r3], #4
 800449e:	6881      	ldr	r1, [r0, #8]
 80044a0:	9301      	str	r3, [sp, #4]
 80044a2:	f000 fa3d 	bl	8004920 <_vfiprintf_r>
 80044a6:	b003      	add	sp, #12
 80044a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80044ac:	b004      	add	sp, #16
 80044ae:	4770      	bx	lr
 80044b0:	20000018 	.word	0x20000018

080044b4 <_puts_r>:
 80044b4:	6a03      	ldr	r3, [r0, #32]
 80044b6:	b570      	push	{r4, r5, r6, lr}
 80044b8:	6884      	ldr	r4, [r0, #8]
 80044ba:	4605      	mov	r5, r0
 80044bc:	460e      	mov	r6, r1
 80044be:	b90b      	cbnz	r3, 80044c4 <_puts_r+0x10>
 80044c0:	f7ff ffb0 	bl	8004424 <__sinit>
 80044c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044c6:	07db      	lsls	r3, r3, #31
 80044c8:	d405      	bmi.n	80044d6 <_puts_r+0x22>
 80044ca:	89a3      	ldrh	r3, [r4, #12]
 80044cc:	0598      	lsls	r0, r3, #22
 80044ce:	d402      	bmi.n	80044d6 <_puts_r+0x22>
 80044d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044d2:	f000 f9ae 	bl	8004832 <__retarget_lock_acquire_recursive>
 80044d6:	89a3      	ldrh	r3, [r4, #12]
 80044d8:	0719      	lsls	r1, r3, #28
 80044da:	d502      	bpl.n	80044e2 <_puts_r+0x2e>
 80044dc:	6923      	ldr	r3, [r4, #16]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d135      	bne.n	800454e <_puts_r+0x9a>
 80044e2:	4621      	mov	r1, r4
 80044e4:	4628      	mov	r0, r5
 80044e6:	f000 f8c5 	bl	8004674 <__swsetup_r>
 80044ea:	b380      	cbz	r0, 800454e <_puts_r+0x9a>
 80044ec:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80044f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044f2:	07da      	lsls	r2, r3, #31
 80044f4:	d405      	bmi.n	8004502 <_puts_r+0x4e>
 80044f6:	89a3      	ldrh	r3, [r4, #12]
 80044f8:	059b      	lsls	r3, r3, #22
 80044fa:	d402      	bmi.n	8004502 <_puts_r+0x4e>
 80044fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044fe:	f000 f999 	bl	8004834 <__retarget_lock_release_recursive>
 8004502:	4628      	mov	r0, r5
 8004504:	bd70      	pop	{r4, r5, r6, pc}
 8004506:	2b00      	cmp	r3, #0
 8004508:	da04      	bge.n	8004514 <_puts_r+0x60>
 800450a:	69a2      	ldr	r2, [r4, #24]
 800450c:	429a      	cmp	r2, r3
 800450e:	dc17      	bgt.n	8004540 <_puts_r+0x8c>
 8004510:	290a      	cmp	r1, #10
 8004512:	d015      	beq.n	8004540 <_puts_r+0x8c>
 8004514:	6823      	ldr	r3, [r4, #0]
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	6022      	str	r2, [r4, #0]
 800451a:	7019      	strb	r1, [r3, #0]
 800451c:	68a3      	ldr	r3, [r4, #8]
 800451e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004522:	3b01      	subs	r3, #1
 8004524:	60a3      	str	r3, [r4, #8]
 8004526:	2900      	cmp	r1, #0
 8004528:	d1ed      	bne.n	8004506 <_puts_r+0x52>
 800452a:	2b00      	cmp	r3, #0
 800452c:	da11      	bge.n	8004552 <_puts_r+0x9e>
 800452e:	4622      	mov	r2, r4
 8004530:	210a      	movs	r1, #10
 8004532:	4628      	mov	r0, r5
 8004534:	f000 f85f 	bl	80045f6 <__swbuf_r>
 8004538:	3001      	adds	r0, #1
 800453a:	d0d7      	beq.n	80044ec <_puts_r+0x38>
 800453c:	250a      	movs	r5, #10
 800453e:	e7d7      	b.n	80044f0 <_puts_r+0x3c>
 8004540:	4622      	mov	r2, r4
 8004542:	4628      	mov	r0, r5
 8004544:	f000 f857 	bl	80045f6 <__swbuf_r>
 8004548:	3001      	adds	r0, #1
 800454a:	d1e7      	bne.n	800451c <_puts_r+0x68>
 800454c:	e7ce      	b.n	80044ec <_puts_r+0x38>
 800454e:	3e01      	subs	r6, #1
 8004550:	e7e4      	b.n	800451c <_puts_r+0x68>
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	6022      	str	r2, [r4, #0]
 8004558:	220a      	movs	r2, #10
 800455a:	701a      	strb	r2, [r3, #0]
 800455c:	e7ee      	b.n	800453c <_puts_r+0x88>
	...

08004560 <puts>:
 8004560:	4b02      	ldr	r3, [pc, #8]	@ (800456c <puts+0xc>)
 8004562:	4601      	mov	r1, r0
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	f7ff bfa5 	b.w	80044b4 <_puts_r>
 800456a:	bf00      	nop
 800456c:	20000018 	.word	0x20000018

08004570 <__sread>:
 8004570:	b510      	push	{r4, lr}
 8004572:	460c      	mov	r4, r1
 8004574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004578:	f000 f8fc 	bl	8004774 <_read_r>
 800457c:	2800      	cmp	r0, #0
 800457e:	bfab      	itete	ge
 8004580:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004582:	89a3      	ldrhlt	r3, [r4, #12]
 8004584:	181b      	addge	r3, r3, r0
 8004586:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800458a:	bfac      	ite	ge
 800458c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800458e:	81a3      	strhlt	r3, [r4, #12]
 8004590:	bd10      	pop	{r4, pc}

08004592 <__swrite>:
 8004592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004596:	461f      	mov	r7, r3
 8004598:	898b      	ldrh	r3, [r1, #12]
 800459a:	05db      	lsls	r3, r3, #23
 800459c:	4605      	mov	r5, r0
 800459e:	460c      	mov	r4, r1
 80045a0:	4616      	mov	r6, r2
 80045a2:	d505      	bpl.n	80045b0 <__swrite+0x1e>
 80045a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045a8:	2302      	movs	r3, #2
 80045aa:	2200      	movs	r2, #0
 80045ac:	f000 f8d0 	bl	8004750 <_lseek_r>
 80045b0:	89a3      	ldrh	r3, [r4, #12]
 80045b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045ba:	81a3      	strh	r3, [r4, #12]
 80045bc:	4632      	mov	r2, r6
 80045be:	463b      	mov	r3, r7
 80045c0:	4628      	mov	r0, r5
 80045c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045c6:	f000 b8f7 	b.w	80047b8 <_write_r>

080045ca <__sseek>:
 80045ca:	b510      	push	{r4, lr}
 80045cc:	460c      	mov	r4, r1
 80045ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045d2:	f000 f8bd 	bl	8004750 <_lseek_r>
 80045d6:	1c43      	adds	r3, r0, #1
 80045d8:	89a3      	ldrh	r3, [r4, #12]
 80045da:	bf15      	itete	ne
 80045dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80045de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80045e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80045e6:	81a3      	strheq	r3, [r4, #12]
 80045e8:	bf18      	it	ne
 80045ea:	81a3      	strhne	r3, [r4, #12]
 80045ec:	bd10      	pop	{r4, pc}

080045ee <__sclose>:
 80045ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045f2:	f000 b89d 	b.w	8004730 <_close_r>

080045f6 <__swbuf_r>:
 80045f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f8:	460e      	mov	r6, r1
 80045fa:	4614      	mov	r4, r2
 80045fc:	4605      	mov	r5, r0
 80045fe:	b118      	cbz	r0, 8004608 <__swbuf_r+0x12>
 8004600:	6a03      	ldr	r3, [r0, #32]
 8004602:	b90b      	cbnz	r3, 8004608 <__swbuf_r+0x12>
 8004604:	f7ff ff0e 	bl	8004424 <__sinit>
 8004608:	69a3      	ldr	r3, [r4, #24]
 800460a:	60a3      	str	r3, [r4, #8]
 800460c:	89a3      	ldrh	r3, [r4, #12]
 800460e:	071a      	lsls	r2, r3, #28
 8004610:	d501      	bpl.n	8004616 <__swbuf_r+0x20>
 8004612:	6923      	ldr	r3, [r4, #16]
 8004614:	b943      	cbnz	r3, 8004628 <__swbuf_r+0x32>
 8004616:	4621      	mov	r1, r4
 8004618:	4628      	mov	r0, r5
 800461a:	f000 f82b 	bl	8004674 <__swsetup_r>
 800461e:	b118      	cbz	r0, 8004628 <__swbuf_r+0x32>
 8004620:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004624:	4638      	mov	r0, r7
 8004626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	6922      	ldr	r2, [r4, #16]
 800462c:	1a98      	subs	r0, r3, r2
 800462e:	6963      	ldr	r3, [r4, #20]
 8004630:	b2f6      	uxtb	r6, r6
 8004632:	4283      	cmp	r3, r0
 8004634:	4637      	mov	r7, r6
 8004636:	dc05      	bgt.n	8004644 <__swbuf_r+0x4e>
 8004638:	4621      	mov	r1, r4
 800463a:	4628      	mov	r0, r5
 800463c:	f000 fc9a 	bl	8004f74 <_fflush_r>
 8004640:	2800      	cmp	r0, #0
 8004642:	d1ed      	bne.n	8004620 <__swbuf_r+0x2a>
 8004644:	68a3      	ldr	r3, [r4, #8]
 8004646:	3b01      	subs	r3, #1
 8004648:	60a3      	str	r3, [r4, #8]
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	6022      	str	r2, [r4, #0]
 8004650:	701e      	strb	r6, [r3, #0]
 8004652:	6962      	ldr	r2, [r4, #20]
 8004654:	1c43      	adds	r3, r0, #1
 8004656:	429a      	cmp	r2, r3
 8004658:	d004      	beq.n	8004664 <__swbuf_r+0x6e>
 800465a:	89a3      	ldrh	r3, [r4, #12]
 800465c:	07db      	lsls	r3, r3, #31
 800465e:	d5e1      	bpl.n	8004624 <__swbuf_r+0x2e>
 8004660:	2e0a      	cmp	r6, #10
 8004662:	d1df      	bne.n	8004624 <__swbuf_r+0x2e>
 8004664:	4621      	mov	r1, r4
 8004666:	4628      	mov	r0, r5
 8004668:	f000 fc84 	bl	8004f74 <_fflush_r>
 800466c:	2800      	cmp	r0, #0
 800466e:	d0d9      	beq.n	8004624 <__swbuf_r+0x2e>
 8004670:	e7d6      	b.n	8004620 <__swbuf_r+0x2a>
	...

08004674 <__swsetup_r>:
 8004674:	b538      	push	{r3, r4, r5, lr}
 8004676:	4b29      	ldr	r3, [pc, #164]	@ (800471c <__swsetup_r+0xa8>)
 8004678:	4605      	mov	r5, r0
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	460c      	mov	r4, r1
 800467e:	b118      	cbz	r0, 8004688 <__swsetup_r+0x14>
 8004680:	6a03      	ldr	r3, [r0, #32]
 8004682:	b90b      	cbnz	r3, 8004688 <__swsetup_r+0x14>
 8004684:	f7ff fece 	bl	8004424 <__sinit>
 8004688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800468c:	0719      	lsls	r1, r3, #28
 800468e:	d422      	bmi.n	80046d6 <__swsetup_r+0x62>
 8004690:	06da      	lsls	r2, r3, #27
 8004692:	d407      	bmi.n	80046a4 <__swsetup_r+0x30>
 8004694:	2209      	movs	r2, #9
 8004696:	602a      	str	r2, [r5, #0]
 8004698:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800469c:	81a3      	strh	r3, [r4, #12]
 800469e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80046a2:	e033      	b.n	800470c <__swsetup_r+0x98>
 80046a4:	0758      	lsls	r0, r3, #29
 80046a6:	d512      	bpl.n	80046ce <__swsetup_r+0x5a>
 80046a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80046aa:	b141      	cbz	r1, 80046be <__swsetup_r+0x4a>
 80046ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80046b0:	4299      	cmp	r1, r3
 80046b2:	d002      	beq.n	80046ba <__swsetup_r+0x46>
 80046b4:	4628      	mov	r0, r5
 80046b6:	f000 f8bf 	bl	8004838 <_free_r>
 80046ba:	2300      	movs	r3, #0
 80046bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80046be:	89a3      	ldrh	r3, [r4, #12]
 80046c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80046c4:	81a3      	strh	r3, [r4, #12]
 80046c6:	2300      	movs	r3, #0
 80046c8:	6063      	str	r3, [r4, #4]
 80046ca:	6923      	ldr	r3, [r4, #16]
 80046cc:	6023      	str	r3, [r4, #0]
 80046ce:	89a3      	ldrh	r3, [r4, #12]
 80046d0:	f043 0308 	orr.w	r3, r3, #8
 80046d4:	81a3      	strh	r3, [r4, #12]
 80046d6:	6923      	ldr	r3, [r4, #16]
 80046d8:	b94b      	cbnz	r3, 80046ee <__swsetup_r+0x7a>
 80046da:	89a3      	ldrh	r3, [r4, #12]
 80046dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80046e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046e4:	d003      	beq.n	80046ee <__swsetup_r+0x7a>
 80046e6:	4621      	mov	r1, r4
 80046e8:	4628      	mov	r0, r5
 80046ea:	f000 fc91 	bl	8005010 <__smakebuf_r>
 80046ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046f2:	f013 0201 	ands.w	r2, r3, #1
 80046f6:	d00a      	beq.n	800470e <__swsetup_r+0x9a>
 80046f8:	2200      	movs	r2, #0
 80046fa:	60a2      	str	r2, [r4, #8]
 80046fc:	6962      	ldr	r2, [r4, #20]
 80046fe:	4252      	negs	r2, r2
 8004700:	61a2      	str	r2, [r4, #24]
 8004702:	6922      	ldr	r2, [r4, #16]
 8004704:	b942      	cbnz	r2, 8004718 <__swsetup_r+0xa4>
 8004706:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800470a:	d1c5      	bne.n	8004698 <__swsetup_r+0x24>
 800470c:	bd38      	pop	{r3, r4, r5, pc}
 800470e:	0799      	lsls	r1, r3, #30
 8004710:	bf58      	it	pl
 8004712:	6962      	ldrpl	r2, [r4, #20]
 8004714:	60a2      	str	r2, [r4, #8]
 8004716:	e7f4      	b.n	8004702 <__swsetup_r+0x8e>
 8004718:	2000      	movs	r0, #0
 800471a:	e7f7      	b.n	800470c <__swsetup_r+0x98>
 800471c:	20000018 	.word	0x20000018

08004720 <memset>:
 8004720:	4402      	add	r2, r0
 8004722:	4603      	mov	r3, r0
 8004724:	4293      	cmp	r3, r2
 8004726:	d100      	bne.n	800472a <memset+0xa>
 8004728:	4770      	bx	lr
 800472a:	f803 1b01 	strb.w	r1, [r3], #1
 800472e:	e7f9      	b.n	8004724 <memset+0x4>

08004730 <_close_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	4d06      	ldr	r5, [pc, #24]	@ (800474c <_close_r+0x1c>)
 8004734:	2300      	movs	r3, #0
 8004736:	4604      	mov	r4, r0
 8004738:	4608      	mov	r0, r1
 800473a:	602b      	str	r3, [r5, #0]
 800473c:	f7fc febe 	bl	80014bc <_close>
 8004740:	1c43      	adds	r3, r0, #1
 8004742:	d102      	bne.n	800474a <_close_r+0x1a>
 8004744:	682b      	ldr	r3, [r5, #0]
 8004746:	b103      	cbz	r3, 800474a <_close_r+0x1a>
 8004748:	6023      	str	r3, [r4, #0]
 800474a:	bd38      	pop	{r3, r4, r5, pc}
 800474c:	200002d0 	.word	0x200002d0

08004750 <_lseek_r>:
 8004750:	b538      	push	{r3, r4, r5, lr}
 8004752:	4d07      	ldr	r5, [pc, #28]	@ (8004770 <_lseek_r+0x20>)
 8004754:	4604      	mov	r4, r0
 8004756:	4608      	mov	r0, r1
 8004758:	4611      	mov	r1, r2
 800475a:	2200      	movs	r2, #0
 800475c:	602a      	str	r2, [r5, #0]
 800475e:	461a      	mov	r2, r3
 8004760:	f7fc fed3 	bl	800150a <_lseek>
 8004764:	1c43      	adds	r3, r0, #1
 8004766:	d102      	bne.n	800476e <_lseek_r+0x1e>
 8004768:	682b      	ldr	r3, [r5, #0]
 800476a:	b103      	cbz	r3, 800476e <_lseek_r+0x1e>
 800476c:	6023      	str	r3, [r4, #0]
 800476e:	bd38      	pop	{r3, r4, r5, pc}
 8004770:	200002d0 	.word	0x200002d0

08004774 <_read_r>:
 8004774:	b538      	push	{r3, r4, r5, lr}
 8004776:	4d07      	ldr	r5, [pc, #28]	@ (8004794 <_read_r+0x20>)
 8004778:	4604      	mov	r4, r0
 800477a:	4608      	mov	r0, r1
 800477c:	4611      	mov	r1, r2
 800477e:	2200      	movs	r2, #0
 8004780:	602a      	str	r2, [r5, #0]
 8004782:	461a      	mov	r2, r3
 8004784:	f7fc fe61 	bl	800144a <_read>
 8004788:	1c43      	adds	r3, r0, #1
 800478a:	d102      	bne.n	8004792 <_read_r+0x1e>
 800478c:	682b      	ldr	r3, [r5, #0]
 800478e:	b103      	cbz	r3, 8004792 <_read_r+0x1e>
 8004790:	6023      	str	r3, [r4, #0]
 8004792:	bd38      	pop	{r3, r4, r5, pc}
 8004794:	200002d0 	.word	0x200002d0

08004798 <_sbrk_r>:
 8004798:	b538      	push	{r3, r4, r5, lr}
 800479a:	4d06      	ldr	r5, [pc, #24]	@ (80047b4 <_sbrk_r+0x1c>)
 800479c:	2300      	movs	r3, #0
 800479e:	4604      	mov	r4, r0
 80047a0:	4608      	mov	r0, r1
 80047a2:	602b      	str	r3, [r5, #0]
 80047a4:	f7fc febe 	bl	8001524 <_sbrk>
 80047a8:	1c43      	adds	r3, r0, #1
 80047aa:	d102      	bne.n	80047b2 <_sbrk_r+0x1a>
 80047ac:	682b      	ldr	r3, [r5, #0]
 80047ae:	b103      	cbz	r3, 80047b2 <_sbrk_r+0x1a>
 80047b0:	6023      	str	r3, [r4, #0]
 80047b2:	bd38      	pop	{r3, r4, r5, pc}
 80047b4:	200002d0 	.word	0x200002d0

080047b8 <_write_r>:
 80047b8:	b538      	push	{r3, r4, r5, lr}
 80047ba:	4d07      	ldr	r5, [pc, #28]	@ (80047d8 <_write_r+0x20>)
 80047bc:	4604      	mov	r4, r0
 80047be:	4608      	mov	r0, r1
 80047c0:	4611      	mov	r1, r2
 80047c2:	2200      	movs	r2, #0
 80047c4:	602a      	str	r2, [r5, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	f7fc fe5c 	bl	8001484 <_write>
 80047cc:	1c43      	adds	r3, r0, #1
 80047ce:	d102      	bne.n	80047d6 <_write_r+0x1e>
 80047d0:	682b      	ldr	r3, [r5, #0]
 80047d2:	b103      	cbz	r3, 80047d6 <_write_r+0x1e>
 80047d4:	6023      	str	r3, [r4, #0]
 80047d6:	bd38      	pop	{r3, r4, r5, pc}
 80047d8:	200002d0 	.word	0x200002d0

080047dc <__errno>:
 80047dc:	4b01      	ldr	r3, [pc, #4]	@ (80047e4 <__errno+0x8>)
 80047de:	6818      	ldr	r0, [r3, #0]
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	20000018 	.word	0x20000018

080047e8 <__libc_init_array>:
 80047e8:	b570      	push	{r4, r5, r6, lr}
 80047ea:	4d0d      	ldr	r5, [pc, #52]	@ (8004820 <__libc_init_array+0x38>)
 80047ec:	4c0d      	ldr	r4, [pc, #52]	@ (8004824 <__libc_init_array+0x3c>)
 80047ee:	1b64      	subs	r4, r4, r5
 80047f0:	10a4      	asrs	r4, r4, #2
 80047f2:	2600      	movs	r6, #0
 80047f4:	42a6      	cmp	r6, r4
 80047f6:	d109      	bne.n	800480c <__libc_init_array+0x24>
 80047f8:	4d0b      	ldr	r5, [pc, #44]	@ (8004828 <__libc_init_array+0x40>)
 80047fa:	4c0c      	ldr	r4, [pc, #48]	@ (800482c <__libc_init_array+0x44>)
 80047fc:	f000 fc66 	bl	80050cc <_init>
 8004800:	1b64      	subs	r4, r4, r5
 8004802:	10a4      	asrs	r4, r4, #2
 8004804:	2600      	movs	r6, #0
 8004806:	42a6      	cmp	r6, r4
 8004808:	d105      	bne.n	8004816 <__libc_init_array+0x2e>
 800480a:	bd70      	pop	{r4, r5, r6, pc}
 800480c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004810:	4798      	blx	r3
 8004812:	3601      	adds	r6, #1
 8004814:	e7ee      	b.n	80047f4 <__libc_init_array+0xc>
 8004816:	f855 3b04 	ldr.w	r3, [r5], #4
 800481a:	4798      	blx	r3
 800481c:	3601      	adds	r6, #1
 800481e:	e7f2      	b.n	8004806 <__libc_init_array+0x1e>
 8004820:	080052a0 	.word	0x080052a0
 8004824:	080052a0 	.word	0x080052a0
 8004828:	080052a0 	.word	0x080052a0
 800482c:	080052a4 	.word	0x080052a4

08004830 <__retarget_lock_init_recursive>:
 8004830:	4770      	bx	lr

08004832 <__retarget_lock_acquire_recursive>:
 8004832:	4770      	bx	lr

08004834 <__retarget_lock_release_recursive>:
 8004834:	4770      	bx	lr
	...

08004838 <_free_r>:
 8004838:	b538      	push	{r3, r4, r5, lr}
 800483a:	4605      	mov	r5, r0
 800483c:	2900      	cmp	r1, #0
 800483e:	d041      	beq.n	80048c4 <_free_r+0x8c>
 8004840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004844:	1f0c      	subs	r4, r1, #4
 8004846:	2b00      	cmp	r3, #0
 8004848:	bfb8      	it	lt
 800484a:	18e4      	addlt	r4, r4, r3
 800484c:	f7ff fd52 	bl	80042f4 <__malloc_lock>
 8004850:	4a1d      	ldr	r2, [pc, #116]	@ (80048c8 <_free_r+0x90>)
 8004852:	6813      	ldr	r3, [r2, #0]
 8004854:	b933      	cbnz	r3, 8004864 <_free_r+0x2c>
 8004856:	6063      	str	r3, [r4, #4]
 8004858:	6014      	str	r4, [r2, #0]
 800485a:	4628      	mov	r0, r5
 800485c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004860:	f7ff bd4e 	b.w	8004300 <__malloc_unlock>
 8004864:	42a3      	cmp	r3, r4
 8004866:	d908      	bls.n	800487a <_free_r+0x42>
 8004868:	6820      	ldr	r0, [r4, #0]
 800486a:	1821      	adds	r1, r4, r0
 800486c:	428b      	cmp	r3, r1
 800486e:	bf01      	itttt	eq
 8004870:	6819      	ldreq	r1, [r3, #0]
 8004872:	685b      	ldreq	r3, [r3, #4]
 8004874:	1809      	addeq	r1, r1, r0
 8004876:	6021      	streq	r1, [r4, #0]
 8004878:	e7ed      	b.n	8004856 <_free_r+0x1e>
 800487a:	461a      	mov	r2, r3
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	b10b      	cbz	r3, 8004884 <_free_r+0x4c>
 8004880:	42a3      	cmp	r3, r4
 8004882:	d9fa      	bls.n	800487a <_free_r+0x42>
 8004884:	6811      	ldr	r1, [r2, #0]
 8004886:	1850      	adds	r0, r2, r1
 8004888:	42a0      	cmp	r0, r4
 800488a:	d10b      	bne.n	80048a4 <_free_r+0x6c>
 800488c:	6820      	ldr	r0, [r4, #0]
 800488e:	4401      	add	r1, r0
 8004890:	1850      	adds	r0, r2, r1
 8004892:	4283      	cmp	r3, r0
 8004894:	6011      	str	r1, [r2, #0]
 8004896:	d1e0      	bne.n	800485a <_free_r+0x22>
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	6053      	str	r3, [r2, #4]
 800489e:	4408      	add	r0, r1
 80048a0:	6010      	str	r0, [r2, #0]
 80048a2:	e7da      	b.n	800485a <_free_r+0x22>
 80048a4:	d902      	bls.n	80048ac <_free_r+0x74>
 80048a6:	230c      	movs	r3, #12
 80048a8:	602b      	str	r3, [r5, #0]
 80048aa:	e7d6      	b.n	800485a <_free_r+0x22>
 80048ac:	6820      	ldr	r0, [r4, #0]
 80048ae:	1821      	adds	r1, r4, r0
 80048b0:	428b      	cmp	r3, r1
 80048b2:	bf04      	itt	eq
 80048b4:	6819      	ldreq	r1, [r3, #0]
 80048b6:	685b      	ldreq	r3, [r3, #4]
 80048b8:	6063      	str	r3, [r4, #4]
 80048ba:	bf04      	itt	eq
 80048bc:	1809      	addeq	r1, r1, r0
 80048be:	6021      	streq	r1, [r4, #0]
 80048c0:	6054      	str	r4, [r2, #4]
 80048c2:	e7ca      	b.n	800485a <_free_r+0x22>
 80048c4:	bd38      	pop	{r3, r4, r5, pc}
 80048c6:	bf00      	nop
 80048c8:	20000190 	.word	0x20000190

080048cc <__sfputc_r>:
 80048cc:	6893      	ldr	r3, [r2, #8]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	b410      	push	{r4}
 80048d4:	6093      	str	r3, [r2, #8]
 80048d6:	da08      	bge.n	80048ea <__sfputc_r+0x1e>
 80048d8:	6994      	ldr	r4, [r2, #24]
 80048da:	42a3      	cmp	r3, r4
 80048dc:	db01      	blt.n	80048e2 <__sfputc_r+0x16>
 80048de:	290a      	cmp	r1, #10
 80048e0:	d103      	bne.n	80048ea <__sfputc_r+0x1e>
 80048e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048e6:	f7ff be86 	b.w	80045f6 <__swbuf_r>
 80048ea:	6813      	ldr	r3, [r2, #0]
 80048ec:	1c58      	adds	r0, r3, #1
 80048ee:	6010      	str	r0, [r2, #0]
 80048f0:	7019      	strb	r1, [r3, #0]
 80048f2:	4608      	mov	r0, r1
 80048f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <__sfputs_r>:
 80048fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fc:	4606      	mov	r6, r0
 80048fe:	460f      	mov	r7, r1
 8004900:	4614      	mov	r4, r2
 8004902:	18d5      	adds	r5, r2, r3
 8004904:	42ac      	cmp	r4, r5
 8004906:	d101      	bne.n	800490c <__sfputs_r+0x12>
 8004908:	2000      	movs	r0, #0
 800490a:	e007      	b.n	800491c <__sfputs_r+0x22>
 800490c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004910:	463a      	mov	r2, r7
 8004912:	4630      	mov	r0, r6
 8004914:	f7ff ffda 	bl	80048cc <__sfputc_r>
 8004918:	1c43      	adds	r3, r0, #1
 800491a:	d1f3      	bne.n	8004904 <__sfputs_r+0xa>
 800491c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004920 <_vfiprintf_r>:
 8004920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004924:	460d      	mov	r5, r1
 8004926:	b09d      	sub	sp, #116	@ 0x74
 8004928:	4614      	mov	r4, r2
 800492a:	4698      	mov	r8, r3
 800492c:	4606      	mov	r6, r0
 800492e:	b118      	cbz	r0, 8004938 <_vfiprintf_r+0x18>
 8004930:	6a03      	ldr	r3, [r0, #32]
 8004932:	b90b      	cbnz	r3, 8004938 <_vfiprintf_r+0x18>
 8004934:	f7ff fd76 	bl	8004424 <__sinit>
 8004938:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800493a:	07d9      	lsls	r1, r3, #31
 800493c:	d405      	bmi.n	800494a <_vfiprintf_r+0x2a>
 800493e:	89ab      	ldrh	r3, [r5, #12]
 8004940:	059a      	lsls	r2, r3, #22
 8004942:	d402      	bmi.n	800494a <_vfiprintf_r+0x2a>
 8004944:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004946:	f7ff ff74 	bl	8004832 <__retarget_lock_acquire_recursive>
 800494a:	89ab      	ldrh	r3, [r5, #12]
 800494c:	071b      	lsls	r3, r3, #28
 800494e:	d501      	bpl.n	8004954 <_vfiprintf_r+0x34>
 8004950:	692b      	ldr	r3, [r5, #16]
 8004952:	b99b      	cbnz	r3, 800497c <_vfiprintf_r+0x5c>
 8004954:	4629      	mov	r1, r5
 8004956:	4630      	mov	r0, r6
 8004958:	f7ff fe8c 	bl	8004674 <__swsetup_r>
 800495c:	b170      	cbz	r0, 800497c <_vfiprintf_r+0x5c>
 800495e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004960:	07dc      	lsls	r4, r3, #31
 8004962:	d504      	bpl.n	800496e <_vfiprintf_r+0x4e>
 8004964:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004968:	b01d      	add	sp, #116	@ 0x74
 800496a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800496e:	89ab      	ldrh	r3, [r5, #12]
 8004970:	0598      	lsls	r0, r3, #22
 8004972:	d4f7      	bmi.n	8004964 <_vfiprintf_r+0x44>
 8004974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004976:	f7ff ff5d 	bl	8004834 <__retarget_lock_release_recursive>
 800497a:	e7f3      	b.n	8004964 <_vfiprintf_r+0x44>
 800497c:	2300      	movs	r3, #0
 800497e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004980:	2320      	movs	r3, #32
 8004982:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004986:	f8cd 800c 	str.w	r8, [sp, #12]
 800498a:	2330      	movs	r3, #48	@ 0x30
 800498c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004b3c <_vfiprintf_r+0x21c>
 8004990:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004994:	f04f 0901 	mov.w	r9, #1
 8004998:	4623      	mov	r3, r4
 800499a:	469a      	mov	sl, r3
 800499c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049a0:	b10a      	cbz	r2, 80049a6 <_vfiprintf_r+0x86>
 80049a2:	2a25      	cmp	r2, #37	@ 0x25
 80049a4:	d1f9      	bne.n	800499a <_vfiprintf_r+0x7a>
 80049a6:	ebba 0b04 	subs.w	fp, sl, r4
 80049aa:	d00b      	beq.n	80049c4 <_vfiprintf_r+0xa4>
 80049ac:	465b      	mov	r3, fp
 80049ae:	4622      	mov	r2, r4
 80049b0:	4629      	mov	r1, r5
 80049b2:	4630      	mov	r0, r6
 80049b4:	f7ff ffa1 	bl	80048fa <__sfputs_r>
 80049b8:	3001      	adds	r0, #1
 80049ba:	f000 80a7 	beq.w	8004b0c <_vfiprintf_r+0x1ec>
 80049be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049c0:	445a      	add	r2, fp
 80049c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80049c4:	f89a 3000 	ldrb.w	r3, [sl]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 809f 	beq.w	8004b0c <_vfiprintf_r+0x1ec>
 80049ce:	2300      	movs	r3, #0
 80049d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80049d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049d8:	f10a 0a01 	add.w	sl, sl, #1
 80049dc:	9304      	str	r3, [sp, #16]
 80049de:	9307      	str	r3, [sp, #28]
 80049e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80049e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80049e6:	4654      	mov	r4, sl
 80049e8:	2205      	movs	r2, #5
 80049ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ee:	4853      	ldr	r0, [pc, #332]	@ (8004b3c <_vfiprintf_r+0x21c>)
 80049f0:	f7fb fc0e 	bl	8000210 <memchr>
 80049f4:	9a04      	ldr	r2, [sp, #16]
 80049f6:	b9d8      	cbnz	r0, 8004a30 <_vfiprintf_r+0x110>
 80049f8:	06d1      	lsls	r1, r2, #27
 80049fa:	bf44      	itt	mi
 80049fc:	2320      	movmi	r3, #32
 80049fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a02:	0713      	lsls	r3, r2, #28
 8004a04:	bf44      	itt	mi
 8004a06:	232b      	movmi	r3, #43	@ 0x2b
 8004a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a0c:	f89a 3000 	ldrb.w	r3, [sl]
 8004a10:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a12:	d015      	beq.n	8004a40 <_vfiprintf_r+0x120>
 8004a14:	9a07      	ldr	r2, [sp, #28]
 8004a16:	4654      	mov	r4, sl
 8004a18:	2000      	movs	r0, #0
 8004a1a:	f04f 0c0a 	mov.w	ip, #10
 8004a1e:	4621      	mov	r1, r4
 8004a20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a24:	3b30      	subs	r3, #48	@ 0x30
 8004a26:	2b09      	cmp	r3, #9
 8004a28:	d94b      	bls.n	8004ac2 <_vfiprintf_r+0x1a2>
 8004a2a:	b1b0      	cbz	r0, 8004a5a <_vfiprintf_r+0x13a>
 8004a2c:	9207      	str	r2, [sp, #28]
 8004a2e:	e014      	b.n	8004a5a <_vfiprintf_r+0x13a>
 8004a30:	eba0 0308 	sub.w	r3, r0, r8
 8004a34:	fa09 f303 	lsl.w	r3, r9, r3
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	9304      	str	r3, [sp, #16]
 8004a3c:	46a2      	mov	sl, r4
 8004a3e:	e7d2      	b.n	80049e6 <_vfiprintf_r+0xc6>
 8004a40:	9b03      	ldr	r3, [sp, #12]
 8004a42:	1d19      	adds	r1, r3, #4
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	9103      	str	r1, [sp, #12]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	bfbb      	ittet	lt
 8004a4c:	425b      	neglt	r3, r3
 8004a4e:	f042 0202 	orrlt.w	r2, r2, #2
 8004a52:	9307      	strge	r3, [sp, #28]
 8004a54:	9307      	strlt	r3, [sp, #28]
 8004a56:	bfb8      	it	lt
 8004a58:	9204      	strlt	r2, [sp, #16]
 8004a5a:	7823      	ldrb	r3, [r4, #0]
 8004a5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a5e:	d10a      	bne.n	8004a76 <_vfiprintf_r+0x156>
 8004a60:	7863      	ldrb	r3, [r4, #1]
 8004a62:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a64:	d132      	bne.n	8004acc <_vfiprintf_r+0x1ac>
 8004a66:	9b03      	ldr	r3, [sp, #12]
 8004a68:	1d1a      	adds	r2, r3, #4
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	9203      	str	r2, [sp, #12]
 8004a6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a72:	3402      	adds	r4, #2
 8004a74:	9305      	str	r3, [sp, #20]
 8004a76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004b4c <_vfiprintf_r+0x22c>
 8004a7a:	7821      	ldrb	r1, [r4, #0]
 8004a7c:	2203      	movs	r2, #3
 8004a7e:	4650      	mov	r0, sl
 8004a80:	f7fb fbc6 	bl	8000210 <memchr>
 8004a84:	b138      	cbz	r0, 8004a96 <_vfiprintf_r+0x176>
 8004a86:	9b04      	ldr	r3, [sp, #16]
 8004a88:	eba0 000a 	sub.w	r0, r0, sl
 8004a8c:	2240      	movs	r2, #64	@ 0x40
 8004a8e:	4082      	lsls	r2, r0
 8004a90:	4313      	orrs	r3, r2
 8004a92:	3401      	adds	r4, #1
 8004a94:	9304      	str	r3, [sp, #16]
 8004a96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a9a:	4829      	ldr	r0, [pc, #164]	@ (8004b40 <_vfiprintf_r+0x220>)
 8004a9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004aa0:	2206      	movs	r2, #6
 8004aa2:	f7fb fbb5 	bl	8000210 <memchr>
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	d03f      	beq.n	8004b2a <_vfiprintf_r+0x20a>
 8004aaa:	4b26      	ldr	r3, [pc, #152]	@ (8004b44 <_vfiprintf_r+0x224>)
 8004aac:	bb1b      	cbnz	r3, 8004af6 <_vfiprintf_r+0x1d6>
 8004aae:	9b03      	ldr	r3, [sp, #12]
 8004ab0:	3307      	adds	r3, #7
 8004ab2:	f023 0307 	bic.w	r3, r3, #7
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	9303      	str	r3, [sp, #12]
 8004aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004abc:	443b      	add	r3, r7
 8004abe:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ac0:	e76a      	b.n	8004998 <_vfiprintf_r+0x78>
 8004ac2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	2001      	movs	r0, #1
 8004aca:	e7a8      	b.n	8004a1e <_vfiprintf_r+0xfe>
 8004acc:	2300      	movs	r3, #0
 8004ace:	3401      	adds	r4, #1
 8004ad0:	9305      	str	r3, [sp, #20]
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	f04f 0c0a 	mov.w	ip, #10
 8004ad8:	4620      	mov	r0, r4
 8004ada:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ade:	3a30      	subs	r2, #48	@ 0x30
 8004ae0:	2a09      	cmp	r2, #9
 8004ae2:	d903      	bls.n	8004aec <_vfiprintf_r+0x1cc>
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0c6      	beq.n	8004a76 <_vfiprintf_r+0x156>
 8004ae8:	9105      	str	r1, [sp, #20]
 8004aea:	e7c4      	b.n	8004a76 <_vfiprintf_r+0x156>
 8004aec:	fb0c 2101 	mla	r1, ip, r1, r2
 8004af0:	4604      	mov	r4, r0
 8004af2:	2301      	movs	r3, #1
 8004af4:	e7f0      	b.n	8004ad8 <_vfiprintf_r+0x1b8>
 8004af6:	ab03      	add	r3, sp, #12
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	462a      	mov	r2, r5
 8004afc:	4b12      	ldr	r3, [pc, #72]	@ (8004b48 <_vfiprintf_r+0x228>)
 8004afe:	a904      	add	r1, sp, #16
 8004b00:	4630      	mov	r0, r6
 8004b02:	f3af 8000 	nop.w
 8004b06:	4607      	mov	r7, r0
 8004b08:	1c78      	adds	r0, r7, #1
 8004b0a:	d1d6      	bne.n	8004aba <_vfiprintf_r+0x19a>
 8004b0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b0e:	07d9      	lsls	r1, r3, #31
 8004b10:	d405      	bmi.n	8004b1e <_vfiprintf_r+0x1fe>
 8004b12:	89ab      	ldrh	r3, [r5, #12]
 8004b14:	059a      	lsls	r2, r3, #22
 8004b16:	d402      	bmi.n	8004b1e <_vfiprintf_r+0x1fe>
 8004b18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b1a:	f7ff fe8b 	bl	8004834 <__retarget_lock_release_recursive>
 8004b1e:	89ab      	ldrh	r3, [r5, #12]
 8004b20:	065b      	lsls	r3, r3, #25
 8004b22:	f53f af1f 	bmi.w	8004964 <_vfiprintf_r+0x44>
 8004b26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b28:	e71e      	b.n	8004968 <_vfiprintf_r+0x48>
 8004b2a:	ab03      	add	r3, sp, #12
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	462a      	mov	r2, r5
 8004b30:	4b05      	ldr	r3, [pc, #20]	@ (8004b48 <_vfiprintf_r+0x228>)
 8004b32:	a904      	add	r1, sp, #16
 8004b34:	4630      	mov	r0, r6
 8004b36:	f000 f879 	bl	8004c2c <_printf_i>
 8004b3a:	e7e4      	b.n	8004b06 <_vfiprintf_r+0x1e6>
 8004b3c:	08005264 	.word	0x08005264
 8004b40:	0800526e 	.word	0x0800526e
 8004b44:	00000000 	.word	0x00000000
 8004b48:	080048fb 	.word	0x080048fb
 8004b4c:	0800526a 	.word	0x0800526a

08004b50 <_printf_common>:
 8004b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b54:	4616      	mov	r6, r2
 8004b56:	4698      	mov	r8, r3
 8004b58:	688a      	ldr	r2, [r1, #8]
 8004b5a:	690b      	ldr	r3, [r1, #16]
 8004b5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b60:	4293      	cmp	r3, r2
 8004b62:	bfb8      	it	lt
 8004b64:	4613      	movlt	r3, r2
 8004b66:	6033      	str	r3, [r6, #0]
 8004b68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b6c:	4607      	mov	r7, r0
 8004b6e:	460c      	mov	r4, r1
 8004b70:	b10a      	cbz	r2, 8004b76 <_printf_common+0x26>
 8004b72:	3301      	adds	r3, #1
 8004b74:	6033      	str	r3, [r6, #0]
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	0699      	lsls	r1, r3, #26
 8004b7a:	bf42      	ittt	mi
 8004b7c:	6833      	ldrmi	r3, [r6, #0]
 8004b7e:	3302      	addmi	r3, #2
 8004b80:	6033      	strmi	r3, [r6, #0]
 8004b82:	6825      	ldr	r5, [r4, #0]
 8004b84:	f015 0506 	ands.w	r5, r5, #6
 8004b88:	d106      	bne.n	8004b98 <_printf_common+0x48>
 8004b8a:	f104 0a19 	add.w	sl, r4, #25
 8004b8e:	68e3      	ldr	r3, [r4, #12]
 8004b90:	6832      	ldr	r2, [r6, #0]
 8004b92:	1a9b      	subs	r3, r3, r2
 8004b94:	42ab      	cmp	r3, r5
 8004b96:	dc26      	bgt.n	8004be6 <_printf_common+0x96>
 8004b98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b9c:	6822      	ldr	r2, [r4, #0]
 8004b9e:	3b00      	subs	r3, #0
 8004ba0:	bf18      	it	ne
 8004ba2:	2301      	movne	r3, #1
 8004ba4:	0692      	lsls	r2, r2, #26
 8004ba6:	d42b      	bmi.n	8004c00 <_printf_common+0xb0>
 8004ba8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004bac:	4641      	mov	r1, r8
 8004bae:	4638      	mov	r0, r7
 8004bb0:	47c8      	blx	r9
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	d01e      	beq.n	8004bf4 <_printf_common+0xa4>
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	6922      	ldr	r2, [r4, #16]
 8004bba:	f003 0306 	and.w	r3, r3, #6
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	bf02      	ittt	eq
 8004bc2:	68e5      	ldreq	r5, [r4, #12]
 8004bc4:	6833      	ldreq	r3, [r6, #0]
 8004bc6:	1aed      	subeq	r5, r5, r3
 8004bc8:	68a3      	ldr	r3, [r4, #8]
 8004bca:	bf0c      	ite	eq
 8004bcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bd0:	2500      	movne	r5, #0
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	bfc4      	itt	gt
 8004bd6:	1a9b      	subgt	r3, r3, r2
 8004bd8:	18ed      	addgt	r5, r5, r3
 8004bda:	2600      	movs	r6, #0
 8004bdc:	341a      	adds	r4, #26
 8004bde:	42b5      	cmp	r5, r6
 8004be0:	d11a      	bne.n	8004c18 <_printf_common+0xc8>
 8004be2:	2000      	movs	r0, #0
 8004be4:	e008      	b.n	8004bf8 <_printf_common+0xa8>
 8004be6:	2301      	movs	r3, #1
 8004be8:	4652      	mov	r2, sl
 8004bea:	4641      	mov	r1, r8
 8004bec:	4638      	mov	r0, r7
 8004bee:	47c8      	blx	r9
 8004bf0:	3001      	adds	r0, #1
 8004bf2:	d103      	bne.n	8004bfc <_printf_common+0xac>
 8004bf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bfc:	3501      	adds	r5, #1
 8004bfe:	e7c6      	b.n	8004b8e <_printf_common+0x3e>
 8004c00:	18e1      	adds	r1, r4, r3
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	2030      	movs	r0, #48	@ 0x30
 8004c06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c0a:	4422      	add	r2, r4
 8004c0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c14:	3302      	adds	r3, #2
 8004c16:	e7c7      	b.n	8004ba8 <_printf_common+0x58>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	4622      	mov	r2, r4
 8004c1c:	4641      	mov	r1, r8
 8004c1e:	4638      	mov	r0, r7
 8004c20:	47c8      	blx	r9
 8004c22:	3001      	adds	r0, #1
 8004c24:	d0e6      	beq.n	8004bf4 <_printf_common+0xa4>
 8004c26:	3601      	adds	r6, #1
 8004c28:	e7d9      	b.n	8004bde <_printf_common+0x8e>
	...

08004c2c <_printf_i>:
 8004c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c30:	7e0f      	ldrb	r7, [r1, #24]
 8004c32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c34:	2f78      	cmp	r7, #120	@ 0x78
 8004c36:	4691      	mov	r9, r2
 8004c38:	4680      	mov	r8, r0
 8004c3a:	460c      	mov	r4, r1
 8004c3c:	469a      	mov	sl, r3
 8004c3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c42:	d807      	bhi.n	8004c54 <_printf_i+0x28>
 8004c44:	2f62      	cmp	r7, #98	@ 0x62
 8004c46:	d80a      	bhi.n	8004c5e <_printf_i+0x32>
 8004c48:	2f00      	cmp	r7, #0
 8004c4a:	f000 80d2 	beq.w	8004df2 <_printf_i+0x1c6>
 8004c4e:	2f58      	cmp	r7, #88	@ 0x58
 8004c50:	f000 80b9 	beq.w	8004dc6 <_printf_i+0x19a>
 8004c54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c5c:	e03a      	b.n	8004cd4 <_printf_i+0xa8>
 8004c5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c62:	2b15      	cmp	r3, #21
 8004c64:	d8f6      	bhi.n	8004c54 <_printf_i+0x28>
 8004c66:	a101      	add	r1, pc, #4	@ (adr r1, 8004c6c <_printf_i+0x40>)
 8004c68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c6c:	08004cc5 	.word	0x08004cc5
 8004c70:	08004cd9 	.word	0x08004cd9
 8004c74:	08004c55 	.word	0x08004c55
 8004c78:	08004c55 	.word	0x08004c55
 8004c7c:	08004c55 	.word	0x08004c55
 8004c80:	08004c55 	.word	0x08004c55
 8004c84:	08004cd9 	.word	0x08004cd9
 8004c88:	08004c55 	.word	0x08004c55
 8004c8c:	08004c55 	.word	0x08004c55
 8004c90:	08004c55 	.word	0x08004c55
 8004c94:	08004c55 	.word	0x08004c55
 8004c98:	08004dd9 	.word	0x08004dd9
 8004c9c:	08004d03 	.word	0x08004d03
 8004ca0:	08004d93 	.word	0x08004d93
 8004ca4:	08004c55 	.word	0x08004c55
 8004ca8:	08004c55 	.word	0x08004c55
 8004cac:	08004dfb 	.word	0x08004dfb
 8004cb0:	08004c55 	.word	0x08004c55
 8004cb4:	08004d03 	.word	0x08004d03
 8004cb8:	08004c55 	.word	0x08004c55
 8004cbc:	08004c55 	.word	0x08004c55
 8004cc0:	08004d9b 	.word	0x08004d9b
 8004cc4:	6833      	ldr	r3, [r6, #0]
 8004cc6:	1d1a      	adds	r2, r3, #4
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6032      	str	r2, [r6, #0]
 8004ccc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e09d      	b.n	8004e14 <_printf_i+0x1e8>
 8004cd8:	6833      	ldr	r3, [r6, #0]
 8004cda:	6820      	ldr	r0, [r4, #0]
 8004cdc:	1d19      	adds	r1, r3, #4
 8004cde:	6031      	str	r1, [r6, #0]
 8004ce0:	0606      	lsls	r6, r0, #24
 8004ce2:	d501      	bpl.n	8004ce8 <_printf_i+0xbc>
 8004ce4:	681d      	ldr	r5, [r3, #0]
 8004ce6:	e003      	b.n	8004cf0 <_printf_i+0xc4>
 8004ce8:	0645      	lsls	r5, r0, #25
 8004cea:	d5fb      	bpl.n	8004ce4 <_printf_i+0xb8>
 8004cec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004cf0:	2d00      	cmp	r5, #0
 8004cf2:	da03      	bge.n	8004cfc <_printf_i+0xd0>
 8004cf4:	232d      	movs	r3, #45	@ 0x2d
 8004cf6:	426d      	negs	r5, r5
 8004cf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cfc:	4859      	ldr	r0, [pc, #356]	@ (8004e64 <_printf_i+0x238>)
 8004cfe:	230a      	movs	r3, #10
 8004d00:	e011      	b.n	8004d26 <_printf_i+0xfa>
 8004d02:	6821      	ldr	r1, [r4, #0]
 8004d04:	6833      	ldr	r3, [r6, #0]
 8004d06:	0608      	lsls	r0, r1, #24
 8004d08:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d0c:	d402      	bmi.n	8004d14 <_printf_i+0xe8>
 8004d0e:	0649      	lsls	r1, r1, #25
 8004d10:	bf48      	it	mi
 8004d12:	b2ad      	uxthmi	r5, r5
 8004d14:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d16:	4853      	ldr	r0, [pc, #332]	@ (8004e64 <_printf_i+0x238>)
 8004d18:	6033      	str	r3, [r6, #0]
 8004d1a:	bf14      	ite	ne
 8004d1c:	230a      	movne	r3, #10
 8004d1e:	2308      	moveq	r3, #8
 8004d20:	2100      	movs	r1, #0
 8004d22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d26:	6866      	ldr	r6, [r4, #4]
 8004d28:	60a6      	str	r6, [r4, #8]
 8004d2a:	2e00      	cmp	r6, #0
 8004d2c:	bfa2      	ittt	ge
 8004d2e:	6821      	ldrge	r1, [r4, #0]
 8004d30:	f021 0104 	bicge.w	r1, r1, #4
 8004d34:	6021      	strge	r1, [r4, #0]
 8004d36:	b90d      	cbnz	r5, 8004d3c <_printf_i+0x110>
 8004d38:	2e00      	cmp	r6, #0
 8004d3a:	d04b      	beq.n	8004dd4 <_printf_i+0x1a8>
 8004d3c:	4616      	mov	r6, r2
 8004d3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d42:	fb03 5711 	mls	r7, r3, r1, r5
 8004d46:	5dc7      	ldrb	r7, [r0, r7]
 8004d48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d4c:	462f      	mov	r7, r5
 8004d4e:	42bb      	cmp	r3, r7
 8004d50:	460d      	mov	r5, r1
 8004d52:	d9f4      	bls.n	8004d3e <_printf_i+0x112>
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d10b      	bne.n	8004d70 <_printf_i+0x144>
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	07df      	lsls	r7, r3, #31
 8004d5c:	d508      	bpl.n	8004d70 <_printf_i+0x144>
 8004d5e:	6923      	ldr	r3, [r4, #16]
 8004d60:	6861      	ldr	r1, [r4, #4]
 8004d62:	4299      	cmp	r1, r3
 8004d64:	bfde      	ittt	le
 8004d66:	2330      	movle	r3, #48	@ 0x30
 8004d68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d6c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004d70:	1b92      	subs	r2, r2, r6
 8004d72:	6122      	str	r2, [r4, #16]
 8004d74:	f8cd a000 	str.w	sl, [sp]
 8004d78:	464b      	mov	r3, r9
 8004d7a:	aa03      	add	r2, sp, #12
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	4640      	mov	r0, r8
 8004d80:	f7ff fee6 	bl	8004b50 <_printf_common>
 8004d84:	3001      	adds	r0, #1
 8004d86:	d14a      	bne.n	8004e1e <_printf_i+0x1f2>
 8004d88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d8c:	b004      	add	sp, #16
 8004d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	f043 0320 	orr.w	r3, r3, #32
 8004d98:	6023      	str	r3, [r4, #0]
 8004d9a:	4833      	ldr	r0, [pc, #204]	@ (8004e68 <_printf_i+0x23c>)
 8004d9c:	2778      	movs	r7, #120	@ 0x78
 8004d9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	6831      	ldr	r1, [r6, #0]
 8004da6:	061f      	lsls	r7, r3, #24
 8004da8:	f851 5b04 	ldr.w	r5, [r1], #4
 8004dac:	d402      	bmi.n	8004db4 <_printf_i+0x188>
 8004dae:	065f      	lsls	r7, r3, #25
 8004db0:	bf48      	it	mi
 8004db2:	b2ad      	uxthmi	r5, r5
 8004db4:	6031      	str	r1, [r6, #0]
 8004db6:	07d9      	lsls	r1, r3, #31
 8004db8:	bf44      	itt	mi
 8004dba:	f043 0320 	orrmi.w	r3, r3, #32
 8004dbe:	6023      	strmi	r3, [r4, #0]
 8004dc0:	b11d      	cbz	r5, 8004dca <_printf_i+0x19e>
 8004dc2:	2310      	movs	r3, #16
 8004dc4:	e7ac      	b.n	8004d20 <_printf_i+0xf4>
 8004dc6:	4827      	ldr	r0, [pc, #156]	@ (8004e64 <_printf_i+0x238>)
 8004dc8:	e7e9      	b.n	8004d9e <_printf_i+0x172>
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	f023 0320 	bic.w	r3, r3, #32
 8004dd0:	6023      	str	r3, [r4, #0]
 8004dd2:	e7f6      	b.n	8004dc2 <_printf_i+0x196>
 8004dd4:	4616      	mov	r6, r2
 8004dd6:	e7bd      	b.n	8004d54 <_printf_i+0x128>
 8004dd8:	6833      	ldr	r3, [r6, #0]
 8004dda:	6825      	ldr	r5, [r4, #0]
 8004ddc:	6961      	ldr	r1, [r4, #20]
 8004dde:	1d18      	adds	r0, r3, #4
 8004de0:	6030      	str	r0, [r6, #0]
 8004de2:	062e      	lsls	r6, r5, #24
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	d501      	bpl.n	8004dec <_printf_i+0x1c0>
 8004de8:	6019      	str	r1, [r3, #0]
 8004dea:	e002      	b.n	8004df2 <_printf_i+0x1c6>
 8004dec:	0668      	lsls	r0, r5, #25
 8004dee:	d5fb      	bpl.n	8004de8 <_printf_i+0x1bc>
 8004df0:	8019      	strh	r1, [r3, #0]
 8004df2:	2300      	movs	r3, #0
 8004df4:	6123      	str	r3, [r4, #16]
 8004df6:	4616      	mov	r6, r2
 8004df8:	e7bc      	b.n	8004d74 <_printf_i+0x148>
 8004dfa:	6833      	ldr	r3, [r6, #0]
 8004dfc:	1d1a      	adds	r2, r3, #4
 8004dfe:	6032      	str	r2, [r6, #0]
 8004e00:	681e      	ldr	r6, [r3, #0]
 8004e02:	6862      	ldr	r2, [r4, #4]
 8004e04:	2100      	movs	r1, #0
 8004e06:	4630      	mov	r0, r6
 8004e08:	f7fb fa02 	bl	8000210 <memchr>
 8004e0c:	b108      	cbz	r0, 8004e12 <_printf_i+0x1e6>
 8004e0e:	1b80      	subs	r0, r0, r6
 8004e10:	6060      	str	r0, [r4, #4]
 8004e12:	6863      	ldr	r3, [r4, #4]
 8004e14:	6123      	str	r3, [r4, #16]
 8004e16:	2300      	movs	r3, #0
 8004e18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e1c:	e7aa      	b.n	8004d74 <_printf_i+0x148>
 8004e1e:	6923      	ldr	r3, [r4, #16]
 8004e20:	4632      	mov	r2, r6
 8004e22:	4649      	mov	r1, r9
 8004e24:	4640      	mov	r0, r8
 8004e26:	47d0      	blx	sl
 8004e28:	3001      	adds	r0, #1
 8004e2a:	d0ad      	beq.n	8004d88 <_printf_i+0x15c>
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	079b      	lsls	r3, r3, #30
 8004e30:	d413      	bmi.n	8004e5a <_printf_i+0x22e>
 8004e32:	68e0      	ldr	r0, [r4, #12]
 8004e34:	9b03      	ldr	r3, [sp, #12]
 8004e36:	4298      	cmp	r0, r3
 8004e38:	bfb8      	it	lt
 8004e3a:	4618      	movlt	r0, r3
 8004e3c:	e7a6      	b.n	8004d8c <_printf_i+0x160>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	4632      	mov	r2, r6
 8004e42:	4649      	mov	r1, r9
 8004e44:	4640      	mov	r0, r8
 8004e46:	47d0      	blx	sl
 8004e48:	3001      	adds	r0, #1
 8004e4a:	d09d      	beq.n	8004d88 <_printf_i+0x15c>
 8004e4c:	3501      	adds	r5, #1
 8004e4e:	68e3      	ldr	r3, [r4, #12]
 8004e50:	9903      	ldr	r1, [sp, #12]
 8004e52:	1a5b      	subs	r3, r3, r1
 8004e54:	42ab      	cmp	r3, r5
 8004e56:	dcf2      	bgt.n	8004e3e <_printf_i+0x212>
 8004e58:	e7eb      	b.n	8004e32 <_printf_i+0x206>
 8004e5a:	2500      	movs	r5, #0
 8004e5c:	f104 0619 	add.w	r6, r4, #25
 8004e60:	e7f5      	b.n	8004e4e <_printf_i+0x222>
 8004e62:	bf00      	nop
 8004e64:	08005275 	.word	0x08005275
 8004e68:	08005286 	.word	0x08005286

08004e6c <__sflush_r>:
 8004e6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e74:	0716      	lsls	r6, r2, #28
 8004e76:	4605      	mov	r5, r0
 8004e78:	460c      	mov	r4, r1
 8004e7a:	d454      	bmi.n	8004f26 <__sflush_r+0xba>
 8004e7c:	684b      	ldr	r3, [r1, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	dc02      	bgt.n	8004e88 <__sflush_r+0x1c>
 8004e82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	dd48      	ble.n	8004f1a <__sflush_r+0xae>
 8004e88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e8a:	2e00      	cmp	r6, #0
 8004e8c:	d045      	beq.n	8004f1a <__sflush_r+0xae>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004e94:	682f      	ldr	r7, [r5, #0]
 8004e96:	6a21      	ldr	r1, [r4, #32]
 8004e98:	602b      	str	r3, [r5, #0]
 8004e9a:	d030      	beq.n	8004efe <__sflush_r+0x92>
 8004e9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004e9e:	89a3      	ldrh	r3, [r4, #12]
 8004ea0:	0759      	lsls	r1, r3, #29
 8004ea2:	d505      	bpl.n	8004eb0 <__sflush_r+0x44>
 8004ea4:	6863      	ldr	r3, [r4, #4]
 8004ea6:	1ad2      	subs	r2, r2, r3
 8004ea8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004eaa:	b10b      	cbz	r3, 8004eb0 <__sflush_r+0x44>
 8004eac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004eae:	1ad2      	subs	r2, r2, r3
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004eb4:	6a21      	ldr	r1, [r4, #32]
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	47b0      	blx	r6
 8004eba:	1c43      	adds	r3, r0, #1
 8004ebc:	89a3      	ldrh	r3, [r4, #12]
 8004ebe:	d106      	bne.n	8004ece <__sflush_r+0x62>
 8004ec0:	6829      	ldr	r1, [r5, #0]
 8004ec2:	291d      	cmp	r1, #29
 8004ec4:	d82b      	bhi.n	8004f1e <__sflush_r+0xb2>
 8004ec6:	4a2a      	ldr	r2, [pc, #168]	@ (8004f70 <__sflush_r+0x104>)
 8004ec8:	410a      	asrs	r2, r1
 8004eca:	07d6      	lsls	r6, r2, #31
 8004ecc:	d427      	bmi.n	8004f1e <__sflush_r+0xb2>
 8004ece:	2200      	movs	r2, #0
 8004ed0:	6062      	str	r2, [r4, #4]
 8004ed2:	04d9      	lsls	r1, r3, #19
 8004ed4:	6922      	ldr	r2, [r4, #16]
 8004ed6:	6022      	str	r2, [r4, #0]
 8004ed8:	d504      	bpl.n	8004ee4 <__sflush_r+0x78>
 8004eda:	1c42      	adds	r2, r0, #1
 8004edc:	d101      	bne.n	8004ee2 <__sflush_r+0x76>
 8004ede:	682b      	ldr	r3, [r5, #0]
 8004ee0:	b903      	cbnz	r3, 8004ee4 <__sflush_r+0x78>
 8004ee2:	6560      	str	r0, [r4, #84]	@ 0x54
 8004ee4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ee6:	602f      	str	r7, [r5, #0]
 8004ee8:	b1b9      	cbz	r1, 8004f1a <__sflush_r+0xae>
 8004eea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004eee:	4299      	cmp	r1, r3
 8004ef0:	d002      	beq.n	8004ef8 <__sflush_r+0x8c>
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	f7ff fca0 	bl	8004838 <_free_r>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	6363      	str	r3, [r4, #52]	@ 0x34
 8004efc:	e00d      	b.n	8004f1a <__sflush_r+0xae>
 8004efe:	2301      	movs	r3, #1
 8004f00:	4628      	mov	r0, r5
 8004f02:	47b0      	blx	r6
 8004f04:	4602      	mov	r2, r0
 8004f06:	1c50      	adds	r0, r2, #1
 8004f08:	d1c9      	bne.n	8004e9e <__sflush_r+0x32>
 8004f0a:	682b      	ldr	r3, [r5, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0c6      	beq.n	8004e9e <__sflush_r+0x32>
 8004f10:	2b1d      	cmp	r3, #29
 8004f12:	d001      	beq.n	8004f18 <__sflush_r+0xac>
 8004f14:	2b16      	cmp	r3, #22
 8004f16:	d11e      	bne.n	8004f56 <__sflush_r+0xea>
 8004f18:	602f      	str	r7, [r5, #0]
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	e022      	b.n	8004f64 <__sflush_r+0xf8>
 8004f1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f22:	b21b      	sxth	r3, r3
 8004f24:	e01b      	b.n	8004f5e <__sflush_r+0xf2>
 8004f26:	690f      	ldr	r7, [r1, #16]
 8004f28:	2f00      	cmp	r7, #0
 8004f2a:	d0f6      	beq.n	8004f1a <__sflush_r+0xae>
 8004f2c:	0793      	lsls	r3, r2, #30
 8004f2e:	680e      	ldr	r6, [r1, #0]
 8004f30:	bf08      	it	eq
 8004f32:	694b      	ldreq	r3, [r1, #20]
 8004f34:	600f      	str	r7, [r1, #0]
 8004f36:	bf18      	it	ne
 8004f38:	2300      	movne	r3, #0
 8004f3a:	eba6 0807 	sub.w	r8, r6, r7
 8004f3e:	608b      	str	r3, [r1, #8]
 8004f40:	f1b8 0f00 	cmp.w	r8, #0
 8004f44:	dde9      	ble.n	8004f1a <__sflush_r+0xae>
 8004f46:	6a21      	ldr	r1, [r4, #32]
 8004f48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004f4a:	4643      	mov	r3, r8
 8004f4c:	463a      	mov	r2, r7
 8004f4e:	4628      	mov	r0, r5
 8004f50:	47b0      	blx	r6
 8004f52:	2800      	cmp	r0, #0
 8004f54:	dc08      	bgt.n	8004f68 <__sflush_r+0xfc>
 8004f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f5e:	81a3      	strh	r3, [r4, #12]
 8004f60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f68:	4407      	add	r7, r0
 8004f6a:	eba8 0800 	sub.w	r8, r8, r0
 8004f6e:	e7e7      	b.n	8004f40 <__sflush_r+0xd4>
 8004f70:	dfbffffe 	.word	0xdfbffffe

08004f74 <_fflush_r>:
 8004f74:	b538      	push	{r3, r4, r5, lr}
 8004f76:	690b      	ldr	r3, [r1, #16]
 8004f78:	4605      	mov	r5, r0
 8004f7a:	460c      	mov	r4, r1
 8004f7c:	b913      	cbnz	r3, 8004f84 <_fflush_r+0x10>
 8004f7e:	2500      	movs	r5, #0
 8004f80:	4628      	mov	r0, r5
 8004f82:	bd38      	pop	{r3, r4, r5, pc}
 8004f84:	b118      	cbz	r0, 8004f8e <_fflush_r+0x1a>
 8004f86:	6a03      	ldr	r3, [r0, #32]
 8004f88:	b90b      	cbnz	r3, 8004f8e <_fflush_r+0x1a>
 8004f8a:	f7ff fa4b 	bl	8004424 <__sinit>
 8004f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0f3      	beq.n	8004f7e <_fflush_r+0xa>
 8004f96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004f98:	07d0      	lsls	r0, r2, #31
 8004f9a:	d404      	bmi.n	8004fa6 <_fflush_r+0x32>
 8004f9c:	0599      	lsls	r1, r3, #22
 8004f9e:	d402      	bmi.n	8004fa6 <_fflush_r+0x32>
 8004fa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fa2:	f7ff fc46 	bl	8004832 <__retarget_lock_acquire_recursive>
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	4621      	mov	r1, r4
 8004faa:	f7ff ff5f 	bl	8004e6c <__sflush_r>
 8004fae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fb0:	07da      	lsls	r2, r3, #31
 8004fb2:	4605      	mov	r5, r0
 8004fb4:	d4e4      	bmi.n	8004f80 <_fflush_r+0xc>
 8004fb6:	89a3      	ldrh	r3, [r4, #12]
 8004fb8:	059b      	lsls	r3, r3, #22
 8004fba:	d4e1      	bmi.n	8004f80 <_fflush_r+0xc>
 8004fbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fbe:	f7ff fc39 	bl	8004834 <__retarget_lock_release_recursive>
 8004fc2:	e7dd      	b.n	8004f80 <_fflush_r+0xc>

08004fc4 <__swhatbuf_r>:
 8004fc4:	b570      	push	{r4, r5, r6, lr}
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fcc:	2900      	cmp	r1, #0
 8004fce:	b096      	sub	sp, #88	@ 0x58
 8004fd0:	4615      	mov	r5, r2
 8004fd2:	461e      	mov	r6, r3
 8004fd4:	da0d      	bge.n	8004ff2 <__swhatbuf_r+0x2e>
 8004fd6:	89a3      	ldrh	r3, [r4, #12]
 8004fd8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004fdc:	f04f 0100 	mov.w	r1, #0
 8004fe0:	bf14      	ite	ne
 8004fe2:	2340      	movne	r3, #64	@ 0x40
 8004fe4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004fe8:	2000      	movs	r0, #0
 8004fea:	6031      	str	r1, [r6, #0]
 8004fec:	602b      	str	r3, [r5, #0]
 8004fee:	b016      	add	sp, #88	@ 0x58
 8004ff0:	bd70      	pop	{r4, r5, r6, pc}
 8004ff2:	466a      	mov	r2, sp
 8004ff4:	f000 f848 	bl	8005088 <_fstat_r>
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	dbec      	blt.n	8004fd6 <__swhatbuf_r+0x12>
 8004ffc:	9901      	ldr	r1, [sp, #4]
 8004ffe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005002:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005006:	4259      	negs	r1, r3
 8005008:	4159      	adcs	r1, r3
 800500a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800500e:	e7eb      	b.n	8004fe8 <__swhatbuf_r+0x24>

08005010 <__smakebuf_r>:
 8005010:	898b      	ldrh	r3, [r1, #12]
 8005012:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005014:	079d      	lsls	r5, r3, #30
 8005016:	4606      	mov	r6, r0
 8005018:	460c      	mov	r4, r1
 800501a:	d507      	bpl.n	800502c <__smakebuf_r+0x1c>
 800501c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	6123      	str	r3, [r4, #16]
 8005024:	2301      	movs	r3, #1
 8005026:	6163      	str	r3, [r4, #20]
 8005028:	b003      	add	sp, #12
 800502a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800502c:	ab01      	add	r3, sp, #4
 800502e:	466a      	mov	r2, sp
 8005030:	f7ff ffc8 	bl	8004fc4 <__swhatbuf_r>
 8005034:	9f00      	ldr	r7, [sp, #0]
 8005036:	4605      	mov	r5, r0
 8005038:	4639      	mov	r1, r7
 800503a:	4630      	mov	r0, r6
 800503c:	f7ff f8da 	bl	80041f4 <_malloc_r>
 8005040:	b948      	cbnz	r0, 8005056 <__smakebuf_r+0x46>
 8005042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005046:	059a      	lsls	r2, r3, #22
 8005048:	d4ee      	bmi.n	8005028 <__smakebuf_r+0x18>
 800504a:	f023 0303 	bic.w	r3, r3, #3
 800504e:	f043 0302 	orr.w	r3, r3, #2
 8005052:	81a3      	strh	r3, [r4, #12]
 8005054:	e7e2      	b.n	800501c <__smakebuf_r+0xc>
 8005056:	89a3      	ldrh	r3, [r4, #12]
 8005058:	6020      	str	r0, [r4, #0]
 800505a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800505e:	81a3      	strh	r3, [r4, #12]
 8005060:	9b01      	ldr	r3, [sp, #4]
 8005062:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005066:	b15b      	cbz	r3, 8005080 <__smakebuf_r+0x70>
 8005068:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800506c:	4630      	mov	r0, r6
 800506e:	f000 f81d 	bl	80050ac <_isatty_r>
 8005072:	b128      	cbz	r0, 8005080 <__smakebuf_r+0x70>
 8005074:	89a3      	ldrh	r3, [r4, #12]
 8005076:	f023 0303 	bic.w	r3, r3, #3
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	81a3      	strh	r3, [r4, #12]
 8005080:	89a3      	ldrh	r3, [r4, #12]
 8005082:	431d      	orrs	r5, r3
 8005084:	81a5      	strh	r5, [r4, #12]
 8005086:	e7cf      	b.n	8005028 <__smakebuf_r+0x18>

08005088 <_fstat_r>:
 8005088:	b538      	push	{r3, r4, r5, lr}
 800508a:	4d07      	ldr	r5, [pc, #28]	@ (80050a8 <_fstat_r+0x20>)
 800508c:	2300      	movs	r3, #0
 800508e:	4604      	mov	r4, r0
 8005090:	4608      	mov	r0, r1
 8005092:	4611      	mov	r1, r2
 8005094:	602b      	str	r3, [r5, #0]
 8005096:	f7fc fa1d 	bl	80014d4 <_fstat>
 800509a:	1c43      	adds	r3, r0, #1
 800509c:	d102      	bne.n	80050a4 <_fstat_r+0x1c>
 800509e:	682b      	ldr	r3, [r5, #0]
 80050a0:	b103      	cbz	r3, 80050a4 <_fstat_r+0x1c>
 80050a2:	6023      	str	r3, [r4, #0]
 80050a4:	bd38      	pop	{r3, r4, r5, pc}
 80050a6:	bf00      	nop
 80050a8:	200002d0 	.word	0x200002d0

080050ac <_isatty_r>:
 80050ac:	b538      	push	{r3, r4, r5, lr}
 80050ae:	4d06      	ldr	r5, [pc, #24]	@ (80050c8 <_isatty_r+0x1c>)
 80050b0:	2300      	movs	r3, #0
 80050b2:	4604      	mov	r4, r0
 80050b4:	4608      	mov	r0, r1
 80050b6:	602b      	str	r3, [r5, #0]
 80050b8:	f7fc fa1c 	bl	80014f4 <_isatty>
 80050bc:	1c43      	adds	r3, r0, #1
 80050be:	d102      	bne.n	80050c6 <_isatty_r+0x1a>
 80050c0:	682b      	ldr	r3, [r5, #0]
 80050c2:	b103      	cbz	r3, 80050c6 <_isatty_r+0x1a>
 80050c4:	6023      	str	r3, [r4, #0]
 80050c6:	bd38      	pop	{r3, r4, r5, pc}
 80050c8:	200002d0 	.word	0x200002d0

080050cc <_init>:
 80050cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ce:	bf00      	nop
 80050d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050d2:	bc08      	pop	{r3}
 80050d4:	469e      	mov	lr, r3
 80050d6:	4770      	bx	lr

080050d8 <_fini>:
 80050d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050da:	bf00      	nop
 80050dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050de:	bc08      	pop	{r3}
 80050e0:	469e      	mov	lr, r3
 80050e2:	4770      	bx	lr
