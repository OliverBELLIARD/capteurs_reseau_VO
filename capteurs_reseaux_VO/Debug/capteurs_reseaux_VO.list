
capteurs_reseaux_VO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050ec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  080052bc  080052bc  000062bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800569c  0800569c  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  0800569c  0800569c  0000669c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056a4  080056a4  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056a4  080056a4  000066a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056a8  080056a8  000066a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080056ac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  20000068  08005714  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08005714  00007304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4f3  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002751  00000000  00000000  0001558b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00017ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b7  00000000  00000000  00018980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002393a  00000000  00000000  00019337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116de  00000000  00000000  0003cc71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d00f2  00000000  00000000  0004e34f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e441  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aec  00000000  00000000  0011e484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00121f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080052a4 	.word	0x080052a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080052a4 	.word	0x080052a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <BMP280_Check_id>:
#include "i2c.h"
#include "BMP280_driver.h"


int BMP280_Check_id(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af02      	add	r7, sp, #8
	uint8_t buff[BUFF_SIZE];
	HAL_StatusTypeDef ret; 		// I2C operations status

	buff[0] = BMP280_REG_ID;
 80005a6:	23d0      	movs	r3, #208	@ 0xd0
 80005a8:	713b      	strb	r3, [r7, #4]

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buff, 1, HAL_MAX_DELAY);
 80005aa:	1d3a      	adds	r2, r7, #4
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2301      	movs	r3, #1
 80005b4:	21ee      	movs	r1, #238	@ 0xee
 80005b6:	4815      	ldr	r0, [pc, #84]	@ (800060c <BMP280_Check_id+0x6c>)
 80005b8:	f001 fe2c 	bl	8002214 <HAL_I2C_Master_Transmit>
 80005bc:	4603      	mov	r3, r0
 80005be:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d004      	beq.n	80005d0 <BMP280_Check_id+0x30>
		printf("I2C Transmit failure\r\n");
 80005c6:	4812      	ldr	r0, [pc, #72]	@ (8000610 <BMP280_Check_id+0x70>)
 80005c8:	f004 f8b6 	bl	8004738 <puts>
		return EXIT_FAILURE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	e018      	b.n	8000602 <BMP280_Check_id+0x62>
	}
	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buff, 1, HAL_MAX_DELAY);
 80005d0:	1d3a      	adds	r2, r7, #4
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2301      	movs	r3, #1
 80005da:	21ee      	movs	r1, #238	@ 0xee
 80005dc:	480b      	ldr	r0, [pc, #44]	@ (800060c <BMP280_Check_id+0x6c>)
 80005de:	f001 ff17 	bl	8002410 <HAL_I2C_Master_Receive>
 80005e2:	4603      	mov	r3, r0
 80005e4:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d004      	beq.n	80005f6 <BMP280_Check_id+0x56>
		printf("I2C Receive failure\r\n");
 80005ec:	4809      	ldr	r0, [pc, #36]	@ (8000614 <BMP280_Check_id+0x74>)
 80005ee:	f004 f8a3 	bl	8004738 <puts>
		return EXIT_FAILURE;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e005      	b.n	8000602 <BMP280_Check_id+0x62>
	}

	printf("BMP280 ID: 0x%X\r\n", buff[0]);
 80005f6:	793b      	ldrb	r3, [r7, #4]
 80005f8:	4619      	mov	r1, r3
 80005fa:	4807      	ldr	r0, [pc, #28]	@ (8000618 <BMP280_Check_id+0x78>)
 80005fc:	f004 f834 	bl	8004668 <iprintf>

	return EXIT_SUCCESS;
 8000600:	2300      	movs	r3, #0
}
 8000602:	4618      	mov	r0, r3
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200000c8 	.word	0x200000c8
 8000610:	080052bc 	.word	0x080052bc
 8000614:	080052d4 	.word	0x080052d4
 8000618:	080052ec 	.word	0x080052ec

0800061c <BMP280_Config>:

int BMP280_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af02      	add	r7, sp, #8
	uint8_t buff[BUFF_SIZE];
	HAL_StatusTypeDef ret; 		// I2C operations status

	buff[0]= BMP280_REG_MODE;
 8000622:	23f4      	movs	r3, #244	@ 0xf4
 8000624:	713b      	strb	r3, [r7, #4]
	buff[1]= BMP280_CONFIG;
 8000626:	2357      	movs	r3, #87	@ 0x57
 8000628:	717b      	strb	r3, [r7, #5]

	ret = HAL_I2C_Master_Transmit(&hi2c1,BMP280_ADDR, buff, 2, HAL_MAX_DELAY);
 800062a:	1d3a      	adds	r2, r7, #4
 800062c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2302      	movs	r3, #2
 8000634:	21ee      	movs	r1, #238	@ 0xee
 8000636:	4816      	ldr	r0, [pc, #88]	@ (8000690 <BMP280_Config+0x74>)
 8000638:	f001 fdec 	bl	8002214 <HAL_I2C_Master_Transmit>
 800063c:	4603      	mov	r3, r0
 800063e:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d004      	beq.n	8000650 <BMP280_Config+0x34>
		printf("I2C Transmit failure\r\n");
 8000646:	4813      	ldr	r0, [pc, #76]	@ (8000694 <BMP280_Config+0x78>)
 8000648:	f004 f876 	bl	8004738 <puts>
		return EXIT_FAILURE;
 800064c:	2301      	movs	r3, #1
 800064e:	e01b      	b.n	8000688 <BMP280_Config+0x6c>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buff, 1, HAL_MAX_DELAY);
 8000650:	1d3a      	adds	r2, r7, #4
 8000652:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2301      	movs	r3, #1
 800065a:	21ee      	movs	r1, #238	@ 0xee
 800065c:	480c      	ldr	r0, [pc, #48]	@ (8000690 <BMP280_Config+0x74>)
 800065e:	f001 fed7 	bl	8002410 <HAL_I2C_Master_Receive>
 8000662:	4603      	mov	r3, r0
 8000664:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d004      	beq.n	8000676 <BMP280_Config+0x5a>
		printf("I2C Receive failure\r\n");
 800066c:	480a      	ldr	r0, [pc, #40]	@ (8000698 <BMP280_Config+0x7c>)
 800066e:	f004 f863 	bl	8004738 <puts>
		return EXIT_FAILURE;
 8000672:	2301      	movs	r3, #1
 8000674:	e008      	b.n	8000688 <BMP280_Config+0x6c>
	}

	if(buff[0] == BMP280_CONFIG){
 8000676:	793b      	ldrb	r3, [r7, #4]
 8000678:	2b57      	cmp	r3, #87	@ 0x57
 800067a:	d104      	bne.n	8000686 <BMP280_Config+0x6a>
		printf("La config envoyée reçue avec succès\r\n");
 800067c:	4807      	ldr	r0, [pc, #28]	@ (800069c <BMP280_Config+0x80>)
 800067e:	f004 f85b 	bl	8004738 <puts>
		return EXIT_SUCCESS;
 8000682:	2300      	movs	r3, #0
 8000684:	e000      	b.n	8000688 <BMP280_Config+0x6c>
	}

	return EXIT_SUCCESS;
 8000686:	2300      	movs	r3, #0
}
 8000688:	4618      	mov	r0, r3
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200000c8 	.word	0x200000c8
 8000694:	080052bc 	.word	0x080052bc
 8000698:	080052d4 	.word	0x080052d4
 800069c:	08005300 	.word	0x08005300

080006a0 <BMP280_calibration>:
BMP280_S32_t t_fine;
/*
 * Update the calibration parameters.
 */
void BMP280_calibration(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08c      	sub	sp, #48	@ 0x30
 80006a4:	af02      	add	r7, sp, #8
	uint8_t buff[BUFF_SIZE];
	uint8_t receive_buf[24];
	HAL_StatusTypeDef ret; 		// I2C operations status

	buff[0]= BMP280_REG_CALIBRATION;
 80006a6:	2388      	movs	r3, #136	@ 0x88
 80006a8:	763b      	strb	r3, [r7, #24]

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buff, 1, HAL_MAX_DELAY);
 80006aa:	f107 0218 	add.w	r2, r7, #24
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	2301      	movs	r3, #1
 80006b6:	21ee      	movs	r1, #238	@ 0xee
 80006b8:	4853      	ldr	r0, [pc, #332]	@ (8000808 <BMP280_calibration+0x168>)
 80006ba:	f001 fdab 	bl	8002214 <HAL_I2C_Master_Transmit>
 80006be:	4603      	mov	r3, r0
 80006c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if(ret != HAL_OK){
 80006c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d002      	beq.n	80006d2 <BMP280_calibration+0x32>
		printf("I2C Transmit failure\r\n");
 80006cc:	484f      	ldr	r0, [pc, #316]	@ (800080c <BMP280_calibration+0x16c>)
 80006ce:	f004 f833 	bl	8004738 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, receive_buf, 24, HAL_MAX_DELAY);
 80006d2:	463a      	mov	r2, r7
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006d8:	9300      	str	r3, [sp, #0]
 80006da:	2318      	movs	r3, #24
 80006dc:	21ee      	movs	r1, #238	@ 0xee
 80006de:	484a      	ldr	r0, [pc, #296]	@ (8000808 <BMP280_calibration+0x168>)
 80006e0:	f001 fe96 	bl	8002410 <HAL_I2C_Master_Receive>
 80006e4:	4603      	mov	r3, r0
 80006e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if(ret != HAL_OK){
 80006ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d002      	beq.n	80006f8 <BMP280_calibration+0x58>
		printf("I2C Receive failure\r\n");
 80006f2:	4847      	ldr	r0, [pc, #284]	@ (8000810 <BMP280_calibration+0x170>)
 80006f4:	f004 f820 	bl	8004738 <puts>
	}

	printf("Current calibration values:\r\n");
 80006f8:	4846      	ldr	r0, [pc, #280]	@ (8000814 <BMP280_calibration+0x174>)
 80006fa:	f004 f81d 	bl	8004738 <puts>
	for(int i=0;i<24;i++){
 80006fe:	2300      	movs	r3, #0
 8000700:	627b      	str	r3, [r7, #36]	@ 0x24
 8000702:	e00b      	b.n	800071c <BMP280_calibration+0x7c>
		printf("calib %2d = 0x%x\r\n",i, receive_buf[i]);
 8000704:	463a      	mov	r2, r7
 8000706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000708:	4413      	add	r3, r2
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	461a      	mov	r2, r3
 800070e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000710:	4841      	ldr	r0, [pc, #260]	@ (8000818 <BMP280_calibration+0x178>)
 8000712:	f003 ffa9 	bl	8004668 <iprintf>
	for(int i=0;i<24;i++){
 8000716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000718:	3301      	adds	r3, #1
 800071a:	627b      	str	r3, [r7, #36]	@ 0x24
 800071c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800071e:	2b17      	cmp	r3, #23
 8000720:	ddf0      	ble.n	8000704 <BMP280_calibration+0x64>
	}

	dig_T1 = receive_buf[0]|(receive_buf[1]<<8);
 8000722:	783b      	ldrb	r3, [r7, #0]
 8000724:	b21a      	sxth	r2, r3
 8000726:	787b      	ldrb	r3, [r7, #1]
 8000728:	021b      	lsls	r3, r3, #8
 800072a:	b21b      	sxth	r3, r3
 800072c:	4313      	orrs	r3, r2
 800072e:	b21b      	sxth	r3, r3
 8000730:	b29a      	uxth	r2, r3
 8000732:	4b3a      	ldr	r3, [pc, #232]	@ (800081c <BMP280_calibration+0x17c>)
 8000734:	801a      	strh	r2, [r3, #0]
	dig_T2 = receive_buf[2]|(receive_buf[3]<<8);
 8000736:	78bb      	ldrb	r3, [r7, #2]
 8000738:	b21a      	sxth	r2, r3
 800073a:	78fb      	ldrb	r3, [r7, #3]
 800073c:	021b      	lsls	r3, r3, #8
 800073e:	b21b      	sxth	r3, r3
 8000740:	4313      	orrs	r3, r2
 8000742:	b21a      	sxth	r2, r3
 8000744:	4b36      	ldr	r3, [pc, #216]	@ (8000820 <BMP280_calibration+0x180>)
 8000746:	801a      	strh	r2, [r3, #0]
	dig_T3 = receive_buf[4]|(receive_buf[5]<<8);
 8000748:	793b      	ldrb	r3, [r7, #4]
 800074a:	b21a      	sxth	r2, r3
 800074c:	797b      	ldrb	r3, [r7, #5]
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	b21b      	sxth	r3, r3
 8000752:	4313      	orrs	r3, r2
 8000754:	b21a      	sxth	r2, r3
 8000756:	4b33      	ldr	r3, [pc, #204]	@ (8000824 <BMP280_calibration+0x184>)
 8000758:	801a      	strh	r2, [r3, #0]
	dig_P1 = receive_buf[6]|(receive_buf[7]<<8);
 800075a:	79bb      	ldrb	r3, [r7, #6]
 800075c:	b21a      	sxth	r2, r3
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	021b      	lsls	r3, r3, #8
 8000762:	b21b      	sxth	r3, r3
 8000764:	4313      	orrs	r3, r2
 8000766:	b21b      	sxth	r3, r3
 8000768:	b29a      	uxth	r2, r3
 800076a:	4b2f      	ldr	r3, [pc, #188]	@ (8000828 <BMP280_calibration+0x188>)
 800076c:	801a      	strh	r2, [r3, #0]
	dig_P2 = receive_buf[8]|(receive_buf[9]<<8);
 800076e:	7a3b      	ldrb	r3, [r7, #8]
 8000770:	b21a      	sxth	r2, r3
 8000772:	7a7b      	ldrb	r3, [r7, #9]
 8000774:	021b      	lsls	r3, r3, #8
 8000776:	b21b      	sxth	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b21a      	sxth	r2, r3
 800077c:	4b2b      	ldr	r3, [pc, #172]	@ (800082c <BMP280_calibration+0x18c>)
 800077e:	801a      	strh	r2, [r3, #0]
	dig_P3 = receive_buf[10]|(receive_buf[11]<<8);
 8000780:	7abb      	ldrb	r3, [r7, #10]
 8000782:	b21a      	sxth	r2, r3
 8000784:	7afb      	ldrb	r3, [r7, #11]
 8000786:	021b      	lsls	r3, r3, #8
 8000788:	b21b      	sxth	r3, r3
 800078a:	4313      	orrs	r3, r2
 800078c:	b21a      	sxth	r2, r3
 800078e:	4b28      	ldr	r3, [pc, #160]	@ (8000830 <BMP280_calibration+0x190>)
 8000790:	801a      	strh	r2, [r3, #0]
	dig_P4 = receive_buf[12]|(receive_buf[13]<<8);
 8000792:	7b3b      	ldrb	r3, [r7, #12]
 8000794:	b21a      	sxth	r2, r3
 8000796:	7b7b      	ldrb	r3, [r7, #13]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	b21b      	sxth	r3, r3
 800079c:	4313      	orrs	r3, r2
 800079e:	b21a      	sxth	r2, r3
 80007a0:	4b24      	ldr	r3, [pc, #144]	@ (8000834 <BMP280_calibration+0x194>)
 80007a2:	801a      	strh	r2, [r3, #0]
	dig_P5 = receive_buf[14]|(receive_buf[15]<<8);
 80007a4:	7bbb      	ldrb	r3, [r7, #14]
 80007a6:	b21a      	sxth	r2, r3
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	021b      	lsls	r3, r3, #8
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	4313      	orrs	r3, r2
 80007b0:	b21a      	sxth	r2, r3
 80007b2:	4b21      	ldr	r3, [pc, #132]	@ (8000838 <BMP280_calibration+0x198>)
 80007b4:	801a      	strh	r2, [r3, #0]
	dig_P6 = receive_buf[16]|(receive_buf[17]<<8);
 80007b6:	7c3b      	ldrb	r3, [r7, #16]
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	7c7b      	ldrb	r3, [r7, #17]
 80007bc:	021b      	lsls	r3, r3, #8
 80007be:	b21b      	sxth	r3, r3
 80007c0:	4313      	orrs	r3, r2
 80007c2:	b21a      	sxth	r2, r3
 80007c4:	4b1d      	ldr	r3, [pc, #116]	@ (800083c <BMP280_calibration+0x19c>)
 80007c6:	801a      	strh	r2, [r3, #0]
	dig_P7 = receive_buf[18]|(receive_buf[19]<<8);
 80007c8:	7cbb      	ldrb	r3, [r7, #18]
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	7cfb      	ldrb	r3, [r7, #19]
 80007ce:	021b      	lsls	r3, r3, #8
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	4313      	orrs	r3, r2
 80007d4:	b21a      	sxth	r2, r3
 80007d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000840 <BMP280_calibration+0x1a0>)
 80007d8:	801a      	strh	r2, [r3, #0]
	dig_P8 = receive_buf[20]|(receive_buf[21]<<8);
 80007da:	7d3b      	ldrb	r3, [r7, #20]
 80007dc:	b21a      	sxth	r2, r3
 80007de:	7d7b      	ldrb	r3, [r7, #21]
 80007e0:	021b      	lsls	r3, r3, #8
 80007e2:	b21b      	sxth	r3, r3
 80007e4:	4313      	orrs	r3, r2
 80007e6:	b21a      	sxth	r2, r3
 80007e8:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <BMP280_calibration+0x1a4>)
 80007ea:	801a      	strh	r2, [r3, #0]
	dig_P9 = receive_buf[22]|(receive_buf[23]<<8);
 80007ec:	7dbb      	ldrb	r3, [r7, #22]
 80007ee:	b21a      	sxth	r2, r3
 80007f0:	7dfb      	ldrb	r3, [r7, #23]
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <BMP280_calibration+0x1a8>)
 80007fc:	801a      	strh	r2, [r3, #0]
}
 80007fe:	bf00      	nop
 8000800:	3728      	adds	r7, #40	@ 0x28
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200000c8 	.word	0x200000c8
 800080c:	080052bc 	.word	0x080052bc
 8000810:	080052d4 	.word	0x080052d4
 8000814:	08005328 	.word	0x08005328
 8000818:	08005348 	.word	0x08005348
 800081c:	20000084 	.word	0x20000084
 8000820:	20000086 	.word	0x20000086
 8000824:	20000088 	.word	0x20000088
 8000828:	2000008a 	.word	0x2000008a
 800082c:	2000008c 	.word	0x2000008c
 8000830:	2000008e 	.word	0x2000008e
 8000834:	20000090 	.word	0x20000090
 8000838:	20000092 	.word	0x20000092
 800083c:	20000094 	.word	0x20000094
 8000840:	20000096 	.word	0x20000096
 8000844:	20000098 	.word	0x20000098
 8000848:	2000009a 	.word	0x2000009a

0800084c <BMP280_compensate_T_int32>:

/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
 * t_fine carries fine temperature as global value
 */
BMP280_S32_t BMP280_compensate_T_int32(BMP280_S32_t adc_T)
{
 800084c:	b480      	push	{r7}
 800084e:	b087      	sub	sp, #28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	BMP280_S32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((BMP280_S32_t)dig_T1<<1))) * ((BMP280_S32_t)dig_T2)) >> 11;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	10da      	asrs	r2, r3, #3
 8000858:	4b19      	ldr	r3, [pc, #100]	@ (80008c0 <BMP280_compensate_T_int32+0x74>)
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	4a18      	ldr	r2, [pc, #96]	@ (80008c4 <BMP280_compensate_T_int32+0x78>)
 8000862:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000866:	fb02 f303 	mul.w	r3, r2, r3
 800086a:	12db      	asrs	r3, r3, #11
 800086c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((BMP280_S32_t)dig_T1)) * ((adc_T>>4) - ((BMP280_S32_t)dig_T1))) >> 12) * ((BMP280_S32_t)dig_T3)) >> 14;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	111b      	asrs	r3, r3, #4
 8000872:	4a13      	ldr	r2, [pc, #76]	@ (80008c0 <BMP280_compensate_T_int32+0x74>)
 8000874:	8812      	ldrh	r2, [r2, #0]
 8000876:	1a9b      	subs	r3, r3, r2
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	1112      	asrs	r2, r2, #4
 800087c:	4910      	ldr	r1, [pc, #64]	@ (80008c0 <BMP280_compensate_T_int32+0x74>)
 800087e:	8809      	ldrh	r1, [r1, #0]
 8000880:	1a52      	subs	r2, r2, r1
 8000882:	fb02 f303 	mul.w	r3, r2, r3
 8000886:	131b      	asrs	r3, r3, #12
 8000888:	4a0f      	ldr	r2, [pc, #60]	@ (80008c8 <BMP280_compensate_T_int32+0x7c>)
 800088a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800088e:	fb02 f303 	mul.w	r3, r2, r3
 8000892:	139b      	asrs	r3, r3, #14
 8000894:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	4413      	add	r3, r2
 800089c:	4a0b      	ldr	r2, [pc, #44]	@ (80008cc <BMP280_compensate_T_int32+0x80>)
 800089e:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80008a0:	4b0a      	ldr	r3, [pc, #40]	@ (80008cc <BMP280_compensate_T_int32+0x80>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4613      	mov	r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	4413      	add	r3, r2
 80008aa:	3380      	adds	r3, #128	@ 0x80
 80008ac:	121b      	asrs	r3, r3, #8
 80008ae:	60fb      	str	r3, [r7, #12]

	return T;
 80008b0:	68fb      	ldr	r3, [r7, #12]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	371c      	adds	r7, #28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20000084 	.word	0x20000084
 80008c4:	20000086 	.word	0x20000086
 80008c8:	20000088 	.word	0x20000088
 80008cc:	2000009c 	.word	0x2000009c

080008d0 <BMP280_Read_Reg>:
	} else {
		return EXIT_SUCCESS;
	}
}

uint8_t* BMP280_Read_Reg(uint8_t reg, uint8_t length) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af02      	add	r7, sp, #8
 80008d6:	4603      	mov	r3, r0
 80008d8:	460a      	mov	r2, r1
 80008da:	71fb      	strb	r3, [r7, #7]
 80008dc:	4613      	mov	r3, r2
 80008de:	71bb      	strb	r3, [r7, #6]
	uint8_t *buf;
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 80008e0:	1dfa      	adds	r2, r7, #7
 80008e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	2301      	movs	r3, #1
 80008ea:	21ee      	movs	r1, #238	@ 0xee
 80008ec:	4813      	ldr	r0, [pc, #76]	@ (800093c <BMP280_Read_Reg+0x6c>)
 80008ee:	f001 fc91 	bl	8002214 <HAL_I2C_Master_Transmit>
 80008f2:	4603      	mov	r3, r0
 80008f4:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d002      	beq.n	8000902 <BMP280_Read_Reg+0x32>
		printf("Problem with I2C Transmit\r\n");
 80008fc:	4810      	ldr	r0, [pc, #64]	@ (8000940 <BMP280_Read_Reg+0x70>)
 80008fe:	f003 ff1b 	bl	8004738 <puts>
	}

	buf = (uint8_t*) malloc(length);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	4618      	mov	r0, r3
 8000906:	f003 fd2f 	bl	8004368 <malloc>
 800090a:	4603      	mov	r3, r0
 800090c:	60bb      	str	r3, [r7, #8]
	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, length,
 800090e:	79bb      	ldrb	r3, [r7, #6]
 8000910:	b29b      	uxth	r3, r3
 8000912:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000916:	9200      	str	r2, [sp, #0]
 8000918:	68ba      	ldr	r2, [r7, #8]
 800091a:	21ee      	movs	r1, #238	@ 0xee
 800091c:	4807      	ldr	r0, [pc, #28]	@ (800093c <BMP280_Read_Reg+0x6c>)
 800091e:	f001 fd77 	bl	8002410 <HAL_I2C_Master_Receive>
 8000922:	4603      	mov	r3, r0
 8000924:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	if (ret != 0) {
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d002      	beq.n	8000932 <BMP280_Read_Reg+0x62>
		printf("Problem with I2C Receive\r\n");
 800092c:	4805      	ldr	r0, [pc, #20]	@ (8000944 <BMP280_Read_Reg+0x74>)
 800092e:	f003 ff03 	bl	8004738 <puts>
	}

	return buf;
 8000932:	68bb      	ldr	r3, [r7, #8]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200000c8 	.word	0x200000c8
 8000940:	0800535c 	.word	0x0800535c
 8000944:	08005378 	.word	0x08005378

08000948 <BMP280_get_temperature>:

/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
 * t_fine carries fine temperature as global value
 */
BMP280_S32_t BMP280_get_temperature() {
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_T;

	buf = BMP280_Read_Reg(BMP280_REG_TEMP_MSB, BMP280_LEN_TEMP);
 800094e:	2103      	movs	r1, #3
 8000950:	20fa      	movs	r0, #250	@ 0xfa
 8000952:	f7ff ffbd 	bl	80008d0 <BMP280_Read_Reg>
 8000956:	6078      	str	r0, [r7, #4]

	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	031a      	lsls	r2, r3, #12
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3301      	adds	r3, #1
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	011b      	lsls	r3, r3, #4
 8000966:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	3202      	adds	r2, #2
 800096c:	7812      	ldrb	r2, [r2, #0]
 800096e:	0912      	lsrs	r2, r2, #4
 8000970:	b2d2      	uxtb	r2, r2
	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000972:	4313      	orrs	r3, r2
 8000974:	603b      	str	r3, [r7, #0]

	free(buf);
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f003 fcfe 	bl	8004378 <free>

	printf("Temperature: ");
 800097c:	480f      	ldr	r0, [pc, #60]	@ (80009bc <BMP280_get_temperature+0x74>)
 800097e:	f003 fe73 	bl	8004668 <iprintf>
	printf("0x%05lX = %d°C", adc_T, adc_T);
 8000982:	683a      	ldr	r2, [r7, #0]
 8000984:	6839      	ldr	r1, [r7, #0]
 8000986:	480e      	ldr	r0, [pc, #56]	@ (80009c0 <BMP280_get_temperature+0x78>)
 8000988:	f003 fe6e 	bl	8004668 <iprintf>
	printf("\r\n");
 800098c:	480d      	ldr	r0, [pc, #52]	@ (80009c4 <BMP280_get_temperature+0x7c>)
 800098e:	f003 fed3 	bl	8004738 <puts>

	adc_T = BMP280_compensate_T_int32(adc_T);
 8000992:	6838      	ldr	r0, [r7, #0]
 8000994:	f7ff ff5a 	bl	800084c <BMP280_compensate_T_int32>
 8000998:	6038      	str	r0, [r7, #0]
	printf("Compensated temperature: ");
 800099a:	480b      	ldr	r0, [pc, #44]	@ (80009c8 <BMP280_get_temperature+0x80>)
 800099c:	f003 fe64 	bl	8004668 <iprintf>
	printf("0x%05lX = %d°C", adc_T, adc_T);
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	6839      	ldr	r1, [r7, #0]
 80009a4:	4806      	ldr	r0, [pc, #24]	@ (80009c0 <BMP280_get_temperature+0x78>)
 80009a6:	f003 fe5f 	bl	8004668 <iprintf>
	printf("\r\n");
 80009aa:	4806      	ldr	r0, [pc, #24]	@ (80009c4 <BMP280_get_temperature+0x7c>)
 80009ac:	f003 fec4 	bl	8004738 <puts>

	return adc_T;
 80009b0:	683b      	ldr	r3, [r7, #0]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	08005394 	.word	0x08005394
 80009c0:	080053a4 	.word	0x080053a4
 80009c4:	080053b4 	.word	0x080053b4
 80009c8:	080053b8 	.word	0x080053b8

080009cc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009d0:	4b17      	ldr	r3, [pc, #92]	@ (8000a30 <MX_CAN1_Init+0x64>)
 80009d2:	4a18      	ldr	r2, [pc, #96]	@ (8000a34 <MX_CAN1_Init+0x68>)
 80009d4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 80009d6:	4b16      	ldr	r3, [pc, #88]	@ (8000a30 <MX_CAN1_Init+0x64>)
 80009d8:	220a      	movs	r2, #10
 80009da:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009dc:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <MX_CAN1_Init+0x64>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009e2:	4b13      	ldr	r3, [pc, #76]	@ (8000a30 <MX_CAN1_Init+0x64>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80009e8:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <MX_CAN1_Init+0x64>)
 80009ea:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 80009ee:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <MX_CAN1_Init+0x64>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <MX_CAN1_Init+0x64>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <MX_CAN1_Init+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	@ (8000a30 <MX_CAN1_Init+0x64>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a08:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <MX_CAN1_Init+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <MX_CAN1_Init+0x64>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a14:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <MX_CAN1_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <MX_CAN1_Init+0x64>)
 8000a1c:	f000 fe12 	bl	8001644 <HAL_CAN_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000a26:	f000 fa1d 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200000a0 	.word	0x200000a0
 8000a34:	40006400 	.word	0x40006400

08000a38 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	@ 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a19      	ldr	r2, [pc, #100]	@ (8000abc <HAL_CAN_MspInit+0x84>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d12c      	bne.n	8000ab4 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <HAL_CAN_MspInit+0x88>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	4a17      	ldr	r2, [pc, #92]	@ (8000ac0 <HAL_CAN_MspInit+0x88>)
 8000a64:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <HAL_CAN_MspInit+0x88>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <HAL_CAN_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a10      	ldr	r2, [pc, #64]	@ (8000ac0 <HAL_CAN_MspInit+0x88>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <HAL_CAN_MspInit+0x88>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000aa4:	2309      	movs	r3, #9
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <HAL_CAN_MspInit+0x8c>)
 8000ab0:	f001 f8be 	bl	8001c30 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	@ 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40006400 	.word	0x40006400
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	@ 0x28
 8000acc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b98 <MX_GPIO_Init+0xd0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a2c      	ldr	r2, [pc, #176]	@ (8000b98 <MX_GPIO_Init+0xd0>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b2a      	ldr	r3, [pc, #168]	@ (8000b98 <MX_GPIO_Init+0xd0>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b26      	ldr	r3, [pc, #152]	@ (8000b98 <MX_GPIO_Init+0xd0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a25      	ldr	r2, [pc, #148]	@ (8000b98 <MX_GPIO_Init+0xd0>)
 8000b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b23      	ldr	r3, [pc, #140]	@ (8000b98 <MX_GPIO_Init+0xd0>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000b98 <MX_GPIO_Init+0xd0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a1e      	ldr	r2, [pc, #120]	@ (8000b98 <MX_GPIO_Init+0xd0>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b1c      	ldr	r3, [pc, #112]	@ (8000b98 <MX_GPIO_Init+0xd0>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	4b18      	ldr	r3, [pc, #96]	@ (8000b98 <MX_GPIO_Init+0xd0>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4a17      	ldr	r2, [pc, #92]	@ (8000b98 <MX_GPIO_Init+0xd0>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <MX_GPIO_Init+0xd0>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2120      	movs	r1, #32
 8000b52:	4812      	ldr	r0, [pc, #72]	@ (8000b9c <MX_GPIO_Init+0xd4>)
 8000b54:	f001 fa00 	bl	8001f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b5e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480c      	ldr	r0, [pc, #48]	@ (8000ba0 <MX_GPIO_Init+0xd8>)
 8000b70:	f001 f85e 	bl	8001c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b74:	2320      	movs	r3, #32
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4804      	ldr	r0, [pc, #16]	@ (8000b9c <MX_GPIO_Init+0xd4>)
 8000b8c:	f001 f850 	bl	8001c30 <HAL_GPIO_Init>

}
 8000b90:	bf00      	nop
 8000b92:	3728      	adds	r7, #40	@ 0x28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020000 	.word	0x40020000
 8000ba0:	40020800 	.word	0x40020800

08000ba4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <MX_I2C1_Init+0x50>)
 8000baa:	4a13      	ldr	r2, [pc, #76]	@ (8000bf8 <MX_I2C1_Init+0x54>)
 8000bac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bae:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <MX_I2C1_Init+0x50>)
 8000bb0:	4a12      	ldr	r2, [pc, #72]	@ (8000bfc <MX_I2C1_Init+0x58>)
 8000bb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <MX_I2C1_Init+0x50>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <MX_I2C1_Init+0x50>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <MX_I2C1_Init+0x50>)
 8000bc2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bc6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <MX_I2C1_Init+0x50>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_I2C1_Init+0x50>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd4:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <MX_I2C1_Init+0x50>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_I2C1_Init+0x50>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000be0:	4804      	ldr	r0, [pc, #16]	@ (8000bf4 <MX_I2C1_Init+0x50>)
 8000be2:	f001 f9d3 	bl	8001f8c <HAL_I2C_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bec:	f000 f93a 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200000c8 	.word	0x200000c8
 8000bf8:	40005400 	.word	0x40005400
 8000bfc:	000186a0 	.word	0x000186a0

08000c00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	@ 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a19      	ldr	r2, [pc, #100]	@ (8000c84 <HAL_I2C_MspInit+0x84>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d12b      	bne.n	8000c7a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <HAL_I2C_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	4a17      	ldr	r2, [pc, #92]	@ (8000c88 <HAL_I2C_MspInit+0x88>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c32:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <HAL_I2C_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c3e:	23c0      	movs	r3, #192	@ 0xc0
 8000c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c42:	2312      	movs	r3, #18
 8000c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c4e:	2304      	movs	r3, #4
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	480c      	ldr	r0, [pc, #48]	@ (8000c8c <HAL_I2C_MspInit+0x8c>)
 8000c5a:	f000 ffe9 	bl	8001c30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <HAL_I2C_MspInit+0x88>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c66:	4a08      	ldr	r2, [pc, #32]	@ (8000c88 <HAL_I2C_MspInit+0x88>)
 8000c68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <HAL_I2C_MspInit+0x88>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	@ 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40005400 	.word	0x40005400
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020400 	.word	0x40020400

08000c90 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000c98:	1d39      	adds	r1, r7, #4
 8000c9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4807      	ldr	r0, [pc, #28]	@ (8000cc0 <__io_putchar+0x30>)
 8000ca2:	f002 ffa5 	bl	8003bf0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000ca6:	1d39      	adds	r1, r7, #4
 8000ca8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cac:	2201      	movs	r2, #1
 8000cae:	4805      	ldr	r0, [pc, #20]	@ (8000cc4 <__io_putchar+0x34>)
 8000cb0:	f002 ff9e 	bl	8003bf0 <HAL_UART_Transmit>

	return ch;
 8000cb4:	687b      	ldr	r3, [r7, #4]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2000016c 	.word	0x2000016c
 8000cc4:	20000124 	.word	0x20000124

08000cc8 <BMP280_init>:

void BMP280_init()
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	BMP280_Check_id();			// Identification du BMP280
 8000ccc:	f7ff fc68 	bl	80005a0 <BMP280_Check_id>
	BMP280_Config();			// Configuration du BMP280
 8000cd0:	f7ff fca4 	bl	800061c <BMP280_Config>
	BMP280_calibration();		// Mise à jour des paramètres d'étalonage
 8000cd4:	f7ff fce4 	bl	80006a0 <BMP280_calibration>

	//BMP280_get_temperature();	// Acquisition de la température
	//BMP280_get_pressure();		// Acquisition de la pression
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <MOT_Init>:
	printf("CALIBRATION EN COURS...\r\n");
	MPU_calibrateGyro(&hi2c1, 1500);
}

void MOT_Init()
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	CAN_Init();
 8000ce0:	f000 f8c6 	bl	8000e70 <CAN_Init>
	MOT_Set_mode(MOT_MODE_ANTICLOCKWISE, 1, 1);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f000 f9cf 	bl	800108c <MOT_Set_mode>
	MOT_Set_origin();
 8000cee:	f000 f9e7 	bl	80010c0 <MOT_Set_origin>
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	int angle = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
	float proportional_coeff = 0.2;
 8000d02:	4b1f      	ldr	r3, [pc, #124]	@ (8000d80 <main+0x88>)
 8000d04:	603b      	str	r3, [r7, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d06:	f000 fc07 	bl	8001518 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d0a:	f000 f83f 	bl	8000d8c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d0e:	f7ff fedb 	bl	8000ac8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000d12:	f000 fb31 	bl	8001378 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000d16:	f7ff ff45 	bl	8000ba4 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8000d1a:	f000 fb03 	bl	8001324 <MX_USART1_UART_Init>
	MX_CAN1_Init();
 8000d1e:	f7ff fe55 	bl	80009cc <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */
	printf("\r\n=== TP Capteurs & Reseaux ===\r\n");
 8000d22:	4818      	ldr	r0, [pc, #96]	@ (8000d84 <main+0x8c>)
 8000d24:	f003 fd08 	bl	8004738 <puts>
	BMP280_init();
 8000d28:	f7ff ffce 	bl	8000cc8 <BMP280_init>
	MOT_Init();
 8000d2c:	f7ff ffd6 	bl	8000cdc <MOT_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		angle += (int)(BMP280_get_temperature() * proportional_coeff)%180;
 8000d30:	f7ff fe0a 	bl	8000948 <BMP280_get_temperature>
 8000d34:	ee07 0a90 	vmov	s15, r0
 8000d38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d3c:	edd7 7a00 	vldr	s15, [r7]
 8000d40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d48:	ee17 2a90 	vmov	r2, s15
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <main+0x90>)
 8000d4e:	fb83 1302 	smull	r1, r3, r3, r2
 8000d52:	4413      	add	r3, r2
 8000d54:	11d9      	asrs	r1, r3, #7
 8000d56:	17d3      	asrs	r3, r2, #31
 8000d58:	1acb      	subs	r3, r1, r3
 8000d5a:	21b4      	movs	r1, #180	@ 0xb4
 8000d5c:	fb01 f303 	mul.w	r3, r1, r3
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	607b      	str	r3, [r7, #4]
		MOT_Rotate(angle, MOT_ANGLE_POSITIVE);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f9b5 	bl	80010de <MOT_Rotate>
		HAL_Delay(MOT_REACTION_TIME_MIN);
 8000d74:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000d78:	f000 fc40 	bl	80015fc <HAL_Delay>
		angle += (int)(BMP280_get_temperature() * proportional_coeff)%180;
 8000d7c:	bf00      	nop
 8000d7e:	e7d7      	b.n	8000d30 <main+0x38>
 8000d80:	3e4ccccd 	.word	0x3e4ccccd
 8000d84:	08005464 	.word	0x08005464
 8000d88:	b60b60b7 	.word	0xb60b60b7

08000d8c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b094      	sub	sp, #80	@ 0x50
 8000d90:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	2234      	movs	r2, #52	@ 0x34
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f003 fdac 	bl	80048f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da0:	f107 0308 	add.w	r3, r7, #8
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000db0:	2300      	movs	r3, #0
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	4b29      	ldr	r3, [pc, #164]	@ (8000e5c <SystemClock_Config+0xd0>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db8:	4a28      	ldr	r2, [pc, #160]	@ (8000e5c <SystemClock_Config+0xd0>)
 8000dba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc0:	4b26      	ldr	r3, [pc, #152]	@ (8000e5c <SystemClock_Config+0xd0>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000dcc:	2300      	movs	r3, #0
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	4b23      	ldr	r3, [pc, #140]	@ (8000e60 <SystemClock_Config+0xd4>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000dd8:	4a21      	ldr	r2, [pc, #132]	@ (8000e60 <SystemClock_Config+0xd4>)
 8000dda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e60 <SystemClock_Config+0xd4>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dec:	2302      	movs	r3, #2
 8000dee:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df0:	2301      	movs	r3, #1
 8000df2:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df4:	2310      	movs	r3, #16
 8000df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000e00:	2308      	movs	r3, #8
 8000e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 80;
 8000e04:	2350      	movs	r3, #80	@ 0x50
 8000e06:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 fbfb 	bl	8003614 <HAL_RCC_OscConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8000e24:	f000 f81e 	bl	8000e64 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e28:	230f      	movs	r3, #15
 8000e2a:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e38:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e3e:	f107 0308 	add.w	r3, r7, #8
 8000e42:	2102      	movs	r1, #2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f002 f89b 	bl	8002f80 <HAL_RCC_ClockConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0xc8>
	{
		Error_Handler();
 8000e50:	f000 f808 	bl	8000e64 <Error_Handler>
	}
}
 8000e54:	bf00      	nop
 8000e56:	3750      	adds	r7, #80	@ 0x50
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40007000 	.word	0x40007000

08000e64 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e68:	b672      	cpsid	i
}
 8000e6a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <Error_Handler+0x8>

08000e70 <CAN_Init>:

/**
 * @brief Initialises the CAN communication
 */
void CAN_Init()
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	logs = TRUE;
 8000e76:	4b26      	ldr	r3, [pc, #152]	@ (8000f10 <CAN_Init+0xa0>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]

	status = HAL_CAN_Start(&hcan1);
 8000e7c:	4825      	ldr	r0, [pc, #148]	@ (8000f14 <CAN_Init+0xa4>)
 8000e7e:	f000 fcdc 	bl	800183a <HAL_CAN_Start>
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]

	switch (status)
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d82f      	bhi.n	8000eec <CAN_Init+0x7c>
 8000e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8000e94 <CAN_Init+0x24>)
 8000e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e92:	bf00      	nop
 8000e94:	08000ea5 	.word	0x08000ea5
 8000e98:	08000eb5 	.word	0x08000eb5
 8000e9c:	08000ec9 	.word	0x08000ec9
 8000ea0:	08000ed9 	.word	0x08000ed9
	{
	case HAL_OK:
		if (logs == TRUE) printf("CAN started successfully.\r\n");
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f10 <CAN_Init+0xa0>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d129      	bne.n	8000f00 <CAN_Init+0x90>
 8000eac:	481a      	ldr	r0, [pc, #104]	@ (8000f18 <CAN_Init+0xa8>)
 8000eae:	f003 fc43 	bl	8004738 <puts>
		break;
 8000eb2:	e025      	b.n	8000f00 <CAN_Init+0x90>
	case HAL_ERROR:
		if (logs == TRUE) printf("Error: CAN start failed.\r\n");
 8000eb4:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <CAN_Init+0xa0>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d102      	bne.n	8000ec2 <CAN_Init+0x52>
 8000ebc:	4817      	ldr	r0, [pc, #92]	@ (8000f1c <CAN_Init+0xac>)
 8000ebe:	f003 fc3b 	bl	8004738 <puts>
		Error_Handler(); // Optional: Go to error handler
 8000ec2:	f7ff ffcf 	bl	8000e64 <Error_Handler>
		break;
 8000ec6:	e01e      	b.n	8000f06 <CAN_Init+0x96>
	case HAL_BUSY:
		if (logs == TRUE) printf("Warning: CAN is busy. Retry later.\r\n");
 8000ec8:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <CAN_Init+0xa0>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d119      	bne.n	8000f04 <CAN_Init+0x94>
 8000ed0:	4813      	ldr	r0, [pc, #76]	@ (8000f20 <CAN_Init+0xb0>)
 8000ed2:	f003 fc31 	bl	8004738 <puts>
		// Optional: add retry logic if desired
		break;
 8000ed6:	e015      	b.n	8000f04 <CAN_Init+0x94>
	case HAL_TIMEOUT:
		if (logs == TRUE) printf("Error: CAN start timed out.\r\n");
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <CAN_Init+0xa0>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d102      	bne.n	8000ee6 <CAN_Init+0x76>
 8000ee0:	4810      	ldr	r0, [pc, #64]	@ (8000f24 <CAN_Init+0xb4>)
 8000ee2:	f003 fc29 	bl	8004738 <puts>
		Error_Handler(); // Optional: Go to error handler
 8000ee6:	f7ff ffbd 	bl	8000e64 <Error_Handler>
		break;
 8000eea:	e00c      	b.n	8000f06 <CAN_Init+0x96>
	default:
		if (logs == TRUE) printf("Unknown status returned from HAL_CAN_Start.\r\n");
 8000eec:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <CAN_Init+0xa0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d102      	bne.n	8000efa <CAN_Init+0x8a>
 8000ef4:	480c      	ldr	r0, [pc, #48]	@ (8000f28 <CAN_Init+0xb8>)
 8000ef6:	f003 fc1f 	bl	8004738 <puts>
		Error_Handler(); // Optional: Go to error handler
 8000efa:	f7ff ffb3 	bl	8000e64 <Error_Handler>
		break;
 8000efe:	e002      	b.n	8000f06 <CAN_Init+0x96>
		break;
 8000f00:	bf00      	nop
 8000f02:	e000      	b.n	8000f06 <CAN_Init+0x96>
		break;
 8000f04:	bf00      	nop
	}
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000011c 	.word	0x2000011c
 8000f14:	200000a0 	.word	0x200000a0
 8000f18:	08005488 	.word	0x08005488
 8000f1c:	080054a4 	.word	0x080054a4
 8000f20:	080054c0 	.word	0x080054c0
 8000f24:	080054e4 	.word	0x080054e4
 8000f28:	08005504 	.word	0x08005504

08000f2c <CAN_Send>:
 *               			destination or type of the message being sent.
 *
 * @retval None
 */
void CAN_Send(uint8_t * aData, uint32_t size, uint32_t msg_id)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b092      	sub	sp, #72	@ 0x48
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status;
	CAN_TxHeaderTypeDef header;
	uint32_t txMailbox;
	int retryCount = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	647b      	str	r3, [r7, #68]	@ 0x44
	const int maxRetries = 5;
 8000f3c:	2305      	movs	r3, #5
 8000f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c

	// Initialiser le header
	header.StdId = msg_id;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	61bb      	str	r3, [r7, #24]
	header.IDE = CAN_ID_STD;
 8000f44:	2300      	movs	r3, #0
 8000f46:	623b      	str	r3, [r7, #32]
	header.RTR = CAN_RTR_DATA;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24
	header.DLC = size;
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
	header.TransmitGlobalTime = DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	// Pointer vers les variables locales
	CAN_TxHeaderTypeDef *pHeader = &header;
 8000f56:	f107 0318 	add.w	r3, r7, #24
 8000f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t *pTxMailbox = &txMailbox;
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	637b      	str	r3, [r7, #52]	@ 0x34

	// Attempt to add the CAN message to the transmission mailbox with retry logic
	do {
		status = HAL_CAN_AddTxMessage(&hcan1, pHeader, aData, pTxMailbox);
 8000f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000f68:	483e      	ldr	r0, [pc, #248]	@ (8001064 <CAN_Send+0x138>)
 8000f6a:	f000 fcaa 	bl	80018c2 <HAL_CAN_AddTxMessage>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		switch (status)
 8000f74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d852      	bhi.n	8001022 <CAN_Send+0xf6>
 8000f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8000f84 <CAN_Send+0x58>)
 8000f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f82:	bf00      	nop
 8000f84:	08000f95 	.word	0x08000f95
 8000f88:	08000ffb 	.word	0x08000ffb
 8000f8c:	08000fd1 	.word	0x08000fd1
 8000f90:	0800100f 	.word	0x0800100f
		{
		case HAL_OK:
			if (logs == TRUE)
 8000f94:	4b34      	ldr	r3, [pc, #208]	@ (8001068 <CAN_Send+0x13c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d15e      	bne.n	800105a <CAN_Send+0x12e>
			{
			printf("CAN message ");
 8000f9c:	4833      	ldr	r0, [pc, #204]	@ (800106c <CAN_Send+0x140>)
 8000f9e:	f003 fb63 	bl	8004668 <iprintf>
			for (int i = 0; i<size; i++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8000fa6:	e00a      	b.n	8000fbe <CAN_Send+0x92>
				printf(" 0x%X", aData[i]);
 8000fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	4413      	add	r3, r2
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	482f      	ldr	r0, [pc, #188]	@ (8001070 <CAN_Send+0x144>)
 8000fb4:	f003 fb58 	bl	8004668 <iprintf>
			for (int i = 0; i<size; i++)
 8000fb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fba:	3301      	adds	r3, #1
 8000fbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8000fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fc0:	68ba      	ldr	r2, [r7, #8]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d8f0      	bhi.n	8000fa8 <CAN_Send+0x7c>
			printf(" sent successfully to  0x%X.\r\n", (unsigned int)msg_id);
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	482a      	ldr	r0, [pc, #168]	@ (8001074 <CAN_Send+0x148>)
 8000fca:	f003 fb4d 	bl	8004668 <iprintf>
			}
			return;  // Exit the function if the message was sent successfully
 8000fce:	e044      	b.n	800105a <CAN_Send+0x12e>

		case HAL_BUSY:
			retryCount++;
 8000fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	647b      	str	r3, [r7, #68]	@ 0x44
			if (logs == TRUE) printf("Warning: CAN bus is busy, retrying (%d/%d)...\r\n", retryCount, maxRetries);
 8000fd6:	4b24      	ldr	r3, [pc, #144]	@ (8001068 <CAN_Send+0x13c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d104      	bne.n	8000fe8 <CAN_Send+0xbc>
 8000fde:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000fe0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000fe2:	4825      	ldr	r0, [pc, #148]	@ (8001078 <CAN_Send+0x14c>)
 8000fe4:	f003 fb40 	bl	8004668 <iprintf>
			HAL_Delay(10);  // Optional: Add a small delay between retries
 8000fe8:	200a      	movs	r0, #10
 8000fea:	f000 fb07 	bl	80015fc <HAL_Delay>
			break;
 8000fee:	bf00      	nop
			if (logs == TRUE) printf("Unknown status returned from HAL_CAN_AddTxMessage.\r\n");
			Error_Handler();  // Optional: Handle unexpected status
			return;
		}

	} while (status == HAL_BUSY && retryCount < maxRetries);
 8000ff0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d122      	bne.n	800103e <CAN_Send+0x112>
 8000ff8:	e01d      	b.n	8001036 <CAN_Send+0x10a>
			if (logs == TRUE) printf("Error: Failed to send CAN message.\r\n");
 8000ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8001068 <CAN_Send+0x13c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d102      	bne.n	8001008 <CAN_Send+0xdc>
 8001002:	481e      	ldr	r0, [pc, #120]	@ (800107c <CAN_Send+0x150>)
 8001004:	f003 fb98 	bl	8004738 <puts>
			Error_Handler();  // Optional: Go to error handler for critical failure
 8001008:	f7ff ff2c 	bl	8000e64 <Error_Handler>
			return;
 800100c:	e026      	b.n	800105c <CAN_Send+0x130>
			if (logs == TRUE) printf("Error: CAN message send timed out.\r\n");
 800100e:	4b16      	ldr	r3, [pc, #88]	@ (8001068 <CAN_Send+0x13c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d102      	bne.n	800101c <CAN_Send+0xf0>
 8001016:	481a      	ldr	r0, [pc, #104]	@ (8001080 <CAN_Send+0x154>)
 8001018:	f003 fb8e 	bl	8004738 <puts>
			Error_Handler();  // Optional: Go to error handler for timeout
 800101c:	f7ff ff22 	bl	8000e64 <Error_Handler>
			return;
 8001020:	e01c      	b.n	800105c <CAN_Send+0x130>
			if (logs == TRUE) printf("Unknown status returned from HAL_CAN_AddTxMessage.\r\n");
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <CAN_Send+0x13c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d102      	bne.n	8001030 <CAN_Send+0x104>
 800102a:	4816      	ldr	r0, [pc, #88]	@ (8001084 <CAN_Send+0x158>)
 800102c:	f003 fb84 	bl	8004738 <puts>
			Error_Handler();  // Optional: Handle unexpected status
 8001030:	f7ff ff18 	bl	8000e64 <Error_Handler>
			return;
 8001034:	e012      	b.n	800105c <CAN_Send+0x130>
	} while (status == HAL_BUSY && retryCount < maxRetries);
 8001036:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800103a:	429a      	cmp	r2, r3
 800103c:	db91      	blt.n	8000f62 <CAN_Send+0x36>

	if (retryCount == maxRetries)
 800103e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001042:	429a      	cmp	r2, r3
 8001044:	d10a      	bne.n	800105c <CAN_Send+0x130>
	{
		if (logs == TRUE) printf("Error: Exceeded maximum retries for CAN message send.\r\n");
 8001046:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <CAN_Send+0x13c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d102      	bne.n	8001054 <CAN_Send+0x128>
 800104e:	480e      	ldr	r0, [pc, #56]	@ (8001088 <CAN_Send+0x15c>)
 8001050:	f003 fb72 	bl	8004738 <puts>
		Error_Handler();  // Optional: Go to error handler after max retries
 8001054:	f7ff ff06 	bl	8000e64 <Error_Handler>
 8001058:	e000      	b.n	800105c <CAN_Send+0x130>
			return;  // Exit the function if the message was sent successfully
 800105a:	bf00      	nop
	}
}
 800105c:	3748      	adds	r7, #72	@ 0x48
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200000a0 	.word	0x200000a0
 8001068:	2000011c 	.word	0x2000011c
 800106c:	08005534 	.word	0x08005534
 8001070:	08005544 	.word	0x08005544
 8001074:	0800554c 	.word	0x0800554c
 8001078:	0800556c 	.word	0x0800556c
 800107c:	0800559c 	.word	0x0800559c
 8001080:	080055c0 	.word	0x080055c0
 8001084:	080055e4 	.word	0x080055e4
 8001088:	08005618 	.word	0x08005618

0800108c <MOT_Set_mode>:
 * @param uint8_t direction	Rotation direction: Anti-clockwise (0x00) or Clockwise (0x01).
 * @param uint8_t steps		Number of steps, range: 0x01 to 0xFF (1 unit = 1°).
 * @param uint8_t speed		Speed of the motor, range: 0x01 = 1 ms / 1 kHz to 0xFF = 255ms / 4 Hz
 */
void MOT_Set_mode(uint8_t direction, uint8_t steps, uint8_t speed)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
 8001096:	460b      	mov	r3, r1
 8001098:	71bb      	strb	r3, [r7, #6]
 800109a:	4613      	mov	r3, r2
 800109c:	717b      	strb	r3, [r7, #5]
	uint8_t aData[3];

	aData[0] = direction;
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	733b      	strb	r3, [r7, #12]
	aData[1] = steps;
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	737b      	strb	r3, [r7, #13]
	aData[2] = speed;
 80010a6:	797b      	ldrb	r3, [r7, #5]
 80010a8:	73bb      	strb	r3, [r7, #14]

	CAN_Send(aData, 3, MOT_MODE_MANUAL_ID);
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	2260      	movs	r2, #96	@ 0x60
 80010b0:	2103      	movs	r1, #3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff3a 	bl	8000f2c <CAN_Send>
}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <MOT_Set_origin>:

/**
 * @brief Sets the current position of the motor as the origin.
 */
void MOT_Set_origin()
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
	uint8_t aData[2];

	aData[0] = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	713b      	strb	r3, [r7, #4]
	CAN_Send(aData, 1, MOT_INIT_POS_ID);
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2262      	movs	r2, #98	@ 0x62
 80010ce:	2101      	movs	r1, #1
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff2b 	bl	8000f2c <CAN_Send>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <MOT_Rotate>:
 * @brief Rotates the Step Motor of an angle in a defined direction.
 * @param uint8_t angle Angle of rotation, range: 0x01 to 0xFF (1 unit = 1°).
 * @param uint8_t sign	Angle sign, can be positive (0x00) or negative (0x01).
 */
void MOT_Rotate(uint8_t angle, uint8_t sign)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b084      	sub	sp, #16
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	460a      	mov	r2, r1
 80010e8:	71fb      	strb	r3, [r7, #7]
 80010ea:	4613      	mov	r3, r2
 80010ec:	71bb      	strb	r3, [r7, #6]
	uint8_t aData[2];

	if (angle < MOT_ANGLE_MIN) angle = 0x00;
	if (angle > MOT_ANGLE_MAX) angle = 0xFF;

	aData[0] = angle;
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	733b      	strb	r3, [r7, #12]
	aData[1] = sign;
 80010f2:	79bb      	ldrb	r3, [r7, #6]
 80010f4:	737b      	strb	r3, [r7, #13]

	CAN_Send(aData, MOT_ANGLE_SIZE, MOT_ANGLE_ID);
 80010f6:	f107 030c 	add.w	r3, r7, #12
 80010fa:	2261      	movs	r2, #97	@ 0x61
 80010fc:	2102      	movs	r1, #2
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff14 	bl	8000f2c <CAN_Send>
}
 8001104:	bf00      	nop
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <HAL_MspInit+0x4c>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111a:	4a0f      	ldr	r2, [pc, #60]	@ (8001158 <HAL_MspInit+0x4c>)
 800111c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001120:	6453      	str	r3, [r2, #68]	@ 0x44
 8001122:	4b0d      	ldr	r3, [pc, #52]	@ (8001158 <HAL_MspInit+0x4c>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <HAL_MspInit+0x4c>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	4a08      	ldr	r2, [pc, #32]	@ (8001158 <HAL_MspInit+0x4c>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800113c:	6413      	str	r3, [r2, #64]	@ 0x40
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <HAL_MspInit+0x4c>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800114a:	2007      	movs	r0, #7
 800114c:	f000 fd3c 	bl	8001bc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40023800 	.word	0x40023800

0800115c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <NMI_Handler+0x4>

08001164 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <HardFault_Handler+0x4>

0800116c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <MemManage_Handler+0x4>

08001174 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <BusFault_Handler+0x4>

0800117c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <UsageFault_Handler+0x4>

08001184 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b2:	f000 fa03 	bl	80015bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}

080011ba <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	e00a      	b.n	80011e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011cc:	f3af 8000 	nop.w
 80011d0:	4601      	mov	r1, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	60ba      	str	r2, [r7, #8]
 80011d8:	b2ca      	uxtb	r2, r1
 80011da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	3301      	adds	r3, #1
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	dbf0      	blt.n	80011cc <_read+0x12>
  }

  return len;
 80011ea:	687b      	ldr	r3, [r7, #4]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	e009      	b.n	800121a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	1c5a      	adds	r2, r3, #1
 800120a:	60ba      	str	r2, [r7, #8]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fd3e 	bl	8000c90 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	3301      	adds	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	429a      	cmp	r2, r3
 8001220:	dbf1      	blt.n	8001206 <_write+0x12>
  }
  return len;
 8001222:	687b      	ldr	r3, [r7, #4]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <_close>:

int _close(int file)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001234:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001254:	605a      	str	r2, [r3, #4]
  return 0;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <_isatty>:

int _isatty(int file)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800126c:	2301      	movs	r3, #1
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800127a:	b480      	push	{r7}
 800127c:	b085      	sub	sp, #20
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800129c:	4a14      	ldr	r2, [pc, #80]	@ (80012f0 <_sbrk+0x5c>)
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <_sbrk+0x60>)
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a8:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b0:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <_sbrk+0x64>)
 80012b2:	4a12      	ldr	r2, [pc, #72]	@ (80012fc <_sbrk+0x68>)
 80012b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b6:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <_sbrk+0x64>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d207      	bcs.n	80012d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c4:	f003 fb76 	bl	80049b4 <__errno>
 80012c8:	4603      	mov	r3, r0
 80012ca:	220c      	movs	r2, #12
 80012cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012d2:	e009      	b.n	80012e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d4:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012da:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <_sbrk+0x64>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	4a05      	ldr	r2, [pc, #20]	@ (80012f8 <_sbrk+0x64>)
 80012e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012e6:	68fb      	ldr	r3, [r7, #12]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20020000 	.word	0x20020000
 80012f4:	00000400 	.word	0x00000400
 80012f8:	20000120 	.word	0x20000120
 80012fc:	20000308 	.word	0x20000308

08001300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <SystemInit+0x20>)
 8001306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800130a:	4a05      	ldr	r2, [pc, #20]	@ (8001320 <SystemInit+0x20>)
 800130c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001310:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001328:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <MX_USART1_UART_Init+0x4c>)
 800132a:	4a12      	ldr	r2, [pc, #72]	@ (8001374 <MX_USART1_UART_Init+0x50>)
 800132c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800132e:	4b10      	ldr	r3, [pc, #64]	@ (8001370 <MX_USART1_UART_Init+0x4c>)
 8001330:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001334:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001336:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <MX_USART1_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800133c:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <MX_USART1_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001342:	4b0b      	ldr	r3, [pc, #44]	@ (8001370 <MX_USART1_UART_Init+0x4c>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001348:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <MX_USART1_UART_Init+0x4c>)
 800134a:	220c      	movs	r2, #12
 800134c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134e:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <MX_USART1_UART_Init+0x4c>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001354:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <MX_USART1_UART_Init+0x4c>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800135a:	4805      	ldr	r0, [pc, #20]	@ (8001370 <MX_USART1_UART_Init+0x4c>)
 800135c:	f002 fbf8 	bl	8003b50 <HAL_UART_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001366:	f7ff fd7d 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000124 	.word	0x20000124
 8001374:	40011000 	.word	0x40011000

08001378 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800137c:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <MX_USART2_UART_Init+0x4c>)
 800137e:	4a12      	ldr	r2, [pc, #72]	@ (80013c8 <MX_USART2_UART_Init+0x50>)
 8001380:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001382:	4b10      	ldr	r3, [pc, #64]	@ (80013c4 <MX_USART2_UART_Init+0x4c>)
 8001384:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001388:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <MX_USART2_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <MX_USART2_UART_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001396:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <MX_USART2_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800139c:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <MX_USART2_UART_Init+0x4c>)
 800139e:	220c      	movs	r2, #12
 80013a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a2:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <MX_USART2_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <MX_USART2_UART_Init+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	@ (80013c4 <MX_USART2_UART_Init+0x4c>)
 80013b0:	f002 fbce 	bl	8003b50 <HAL_UART_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ba:	f7ff fd53 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	2000016c 	.word	0x2000016c
 80013c8:	40004400 	.word	0x40004400

080013cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08c      	sub	sp, #48	@ 0x30
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a32      	ldr	r2, [pc, #200]	@ (80014b4 <HAL_UART_MspInit+0xe8>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d12d      	bne.n	800144a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
 80013f2:	4b31      	ldr	r3, [pc, #196]	@ (80014b8 <HAL_UART_MspInit+0xec>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f6:	4a30      	ldr	r2, [pc, #192]	@ (80014b8 <HAL_UART_MspInit+0xec>)
 80013f8:	f043 0310 	orr.w	r3, r3, #16
 80013fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013fe:	4b2e      	ldr	r3, [pc, #184]	@ (80014b8 <HAL_UART_MspInit+0xec>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	61bb      	str	r3, [r7, #24]
 8001408:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	4b2a      	ldr	r3, [pc, #168]	@ (80014b8 <HAL_UART_MspInit+0xec>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	4a29      	ldr	r2, [pc, #164]	@ (80014b8 <HAL_UART_MspInit+0xec>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	@ 0x30
 800141a:	4b27      	ldr	r3, [pc, #156]	@ (80014b8 <HAL_UART_MspInit+0xec>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001426:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800142a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001434:	2303      	movs	r3, #3
 8001436:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001438:	2307      	movs	r3, #7
 800143a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	4619      	mov	r1, r3
 8001442:	481e      	ldr	r0, [pc, #120]	@ (80014bc <HAL_UART_MspInit+0xf0>)
 8001444:	f000 fbf4 	bl	8001c30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001448:	e030      	b.n	80014ac <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a1c      	ldr	r2, [pc, #112]	@ (80014c0 <HAL_UART_MspInit+0xf4>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d12b      	bne.n	80014ac <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <HAL_UART_MspInit+0xec>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145c:	4a16      	ldr	r2, [pc, #88]	@ (80014b8 <HAL_UART_MspInit+0xec>)
 800145e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001462:	6413      	str	r3, [r2, #64]	@ 0x40
 8001464:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <HAL_UART_MspInit+0xec>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <HAL_UART_MspInit+0xec>)
 8001476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001478:	4a0f      	ldr	r2, [pc, #60]	@ (80014b8 <HAL_UART_MspInit+0xec>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001480:	4b0d      	ldr	r3, [pc, #52]	@ (80014b8 <HAL_UART_MspInit+0xec>)
 8001482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800148c:	230c      	movs	r3, #12
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800149c:	2307      	movs	r3, #7
 800149e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	4619      	mov	r1, r3
 80014a6:	4805      	ldr	r0, [pc, #20]	@ (80014bc <HAL_UART_MspInit+0xf0>)
 80014a8:	f000 fbc2 	bl	8001c30 <HAL_GPIO_Init>
}
 80014ac:	bf00      	nop
 80014ae:	3730      	adds	r7, #48	@ 0x30
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40011000 	.word	0x40011000
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40004400 	.word	0x40004400

080014c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014c8:	f7ff ff1a 	bl	8001300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014cc:	480c      	ldr	r0, [pc, #48]	@ (8001500 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ce:	490d      	ldr	r1, [pc, #52]	@ (8001504 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001508 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d4:	e002      	b.n	80014dc <LoopCopyDataInit>

080014d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014da:	3304      	adds	r3, #4

080014dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e0:	d3f9      	bcc.n	80014d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e2:	4a0a      	ldr	r2, [pc, #40]	@ (800150c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001510 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e8:	e001      	b.n	80014ee <LoopFillZerobss>

080014ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ec:	3204      	adds	r2, #4

080014ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f0:	d3fb      	bcc.n	80014ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014f2:	f003 fa65 	bl	80049c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014f6:	f7ff fbff 	bl	8000cf8 <main>
  bx  lr    
 80014fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001504:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001508:	080056ac 	.word	0x080056ac
  ldr r2, =_sbss
 800150c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001510:	20000304 	.word	0x20000304

08001514 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001514:	e7fe      	b.n	8001514 <ADC_IRQHandler>
	...

08001518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800151c:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <HAL_Init+0x40>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0d      	ldr	r2, [pc, #52]	@ (8001558 <HAL_Init+0x40>)
 8001522:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001526:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001528:	4b0b      	ldr	r3, [pc, #44]	@ (8001558 <HAL_Init+0x40>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0a      	ldr	r2, [pc, #40]	@ (8001558 <HAL_Init+0x40>)
 800152e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001532:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001534:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <HAL_Init+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a07      	ldr	r2, [pc, #28]	@ (8001558 <HAL_Init+0x40>)
 800153a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800153e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001540:	2003      	movs	r0, #3
 8001542:	f000 fb41 	bl	8001bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001546:	2000      	movs	r0, #0
 8001548:	f000 f808 	bl	800155c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800154c:	f7ff fdde 	bl	800110c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40023c00 	.word	0x40023c00

0800155c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001564:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <HAL_InitTick+0x54>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <HAL_InitTick+0x58>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001572:	fbb3 f3f1 	udiv	r3, r3, r1
 8001576:	fbb2 f3f3 	udiv	r3, r2, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f000 fb4b 	bl	8001c16 <HAL_SYSTICK_Config>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e00e      	b.n	80015a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b0f      	cmp	r3, #15
 800158e:	d80a      	bhi.n	80015a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001590:	2200      	movs	r2, #0
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001598:	f000 fb21 	bl	8001bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800159c:	4a06      	ldr	r2, [pc, #24]	@ (80015b8 <HAL_InitTick+0x5c>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	e000      	b.n	80015a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000000 	.word	0x20000000
 80015b4:	20000008 	.word	0x20000008
 80015b8:	20000004 	.word	0x20000004

080015bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <HAL_IncTick+0x20>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <HAL_IncTick+0x24>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	4a04      	ldr	r2, [pc, #16]	@ (80015e0 <HAL_IncTick+0x24>)
 80015ce:	6013      	str	r3, [r2, #0]
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20000008 	.word	0x20000008
 80015e0:	200001b4 	.word	0x200001b4

080015e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return uwTick;
 80015e8:	4b03      	ldr	r3, [pc, #12]	@ (80015f8 <HAL_GetTick+0x14>)
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	200001b4 	.word	0x200001b4

080015fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001604:	f7ff ffee 	bl	80015e4 <HAL_GetTick>
 8001608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001614:	d005      	beq.n	8001622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001616:	4b0a      	ldr	r3, [pc, #40]	@ (8001640 <HAL_Delay+0x44>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4413      	add	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001622:	bf00      	nop
 8001624:	f7ff ffde 	bl	80015e4 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	429a      	cmp	r2, r3
 8001632:	d8f7      	bhi.n	8001624 <HAL_Delay+0x28>
  {
  }
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000008 	.word	0x20000008

08001644 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e0ed      	b.n	8001832 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 3020 	ldrb.w	r3, [r3, #32]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d102      	bne.n	8001668 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff f9e8 	bl	8000a38 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 0201 	orr.w	r2, r2, #1
 8001676:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001678:	f7ff ffb4 	bl	80015e4 <HAL_GetTick>
 800167c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800167e:	e012      	b.n	80016a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001680:	f7ff ffb0 	bl	80015e4 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b0a      	cmp	r3, #10
 800168c:	d90b      	bls.n	80016a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001692:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2205      	movs	r2, #5
 800169e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e0c5      	b.n	8001832 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0e5      	beq.n	8001680 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0202 	bic.w	r2, r2, #2
 80016c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016c4:	f7ff ff8e 	bl	80015e4 <HAL_GetTick>
 80016c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016ca:	e012      	b.n	80016f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016cc:	f7ff ff8a 	bl	80015e4 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b0a      	cmp	r3, #10
 80016d8:	d90b      	bls.n	80016f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2205      	movs	r2, #5
 80016ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e09f      	b.n	8001832 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1e5      	bne.n	80016cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	7e1b      	ldrb	r3, [r3, #24]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d108      	bne.n	800171a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	e007      	b.n	800172a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001728:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	7e5b      	ldrb	r3, [r3, #25]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d108      	bne.n	8001744 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	e007      	b.n	8001754 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001752:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7e9b      	ldrb	r3, [r3, #26]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d108      	bne.n	800176e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0220 	orr.w	r2, r2, #32
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	e007      	b.n	800177e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0220 	bic.w	r2, r2, #32
 800177c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	7edb      	ldrb	r3, [r3, #27]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d108      	bne.n	8001798 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0210 	bic.w	r2, r2, #16
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	e007      	b.n	80017a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0210 	orr.w	r2, r2, #16
 80017a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	7f1b      	ldrb	r3, [r3, #28]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d108      	bne.n	80017c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0208 	orr.w	r2, r2, #8
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	e007      	b.n	80017d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0208 	bic.w	r2, r2, #8
 80017d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	7f5b      	ldrb	r3, [r3, #29]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d108      	bne.n	80017ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f042 0204 	orr.w	r2, r2, #4
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	e007      	b.n	80017fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0204 	bic.w	r2, r2, #4
 80017fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	431a      	orrs	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	ea42 0103 	orr.w	r1, r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	1e5a      	subs	r2, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b084      	sub	sp, #16
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b01      	cmp	r3, #1
 800184c:	d12e      	bne.n	80018ac <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2202      	movs	r2, #2
 8001852:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0201 	bic.w	r2, r2, #1
 8001864:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001866:	f7ff febd 	bl	80015e4 <HAL_GetTick>
 800186a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800186c:	e012      	b.n	8001894 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800186e:	f7ff feb9 	bl	80015e4 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b0a      	cmp	r3, #10
 800187a:	d90b      	bls.n	8001894 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001880:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2205      	movs	r2, #5
 800188c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e012      	b.n	80018ba <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1e5      	bne.n	800186e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	e006      	b.n	80018ba <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
  }
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b089      	sub	sp, #36	@ 0x24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80018e0:	7ffb      	ldrb	r3, [r7, #31]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d003      	beq.n	80018ee <HAL_CAN_AddTxMessage+0x2c>
 80018e6:	7ffb      	ldrb	r3, [r7, #31]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	f040 80ad 	bne.w	8001a48 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10a      	bne.n	800190e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d105      	bne.n	800190e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 8095 	beq.w	8001a38 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	0e1b      	lsrs	r3, r3, #24
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001918:	2201      	movs	r2, #1
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	409a      	lsls	r2, r3
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10d      	bne.n	8001946 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001934:	68f9      	ldr	r1, [r7, #12]
 8001936:	6809      	ldr	r1, [r1, #0]
 8001938:	431a      	orrs	r2, r3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3318      	adds	r3, #24
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	440b      	add	r3, r1
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	e00f      	b.n	8001966 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001950:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001956:	68f9      	ldr	r1, [r7, #12]
 8001958:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800195a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	3318      	adds	r3, #24
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	440b      	add	r3, r1
 8001964:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6819      	ldr	r1, [r3, #0]
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	691a      	ldr	r2, [r3, #16]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3318      	adds	r3, #24
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	440b      	add	r3, r1
 8001976:	3304      	adds	r3, #4
 8001978:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	7d1b      	ldrb	r3, [r3, #20]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d111      	bne.n	80019a6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3318      	adds	r3, #24
 800198a:	011b      	lsls	r3, r3, #4
 800198c:	4413      	add	r3, r2
 800198e:	3304      	adds	r3, #4
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	6811      	ldr	r1, [r2, #0]
 8001996:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3318      	adds	r3, #24
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	440b      	add	r3, r1
 80019a2:	3304      	adds	r3, #4
 80019a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3307      	adds	r3, #7
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	061a      	lsls	r2, r3, #24
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3306      	adds	r3, #6
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	041b      	lsls	r3, r3, #16
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3305      	adds	r3, #5
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	021b      	lsls	r3, r3, #8
 80019c0:	4313      	orrs	r3, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	3204      	adds	r2, #4
 80019c6:	7812      	ldrb	r2, [r2, #0]
 80019c8:	4610      	mov	r0, r2
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	6811      	ldr	r1, [r2, #0]
 80019ce:	ea43 0200 	orr.w	r2, r3, r0
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	440b      	add	r3, r1
 80019d8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80019dc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3303      	adds	r3, #3
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	061a      	lsls	r2, r3, #24
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3302      	adds	r3, #2
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	041b      	lsls	r3, r3, #16
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3301      	adds	r3, #1
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	021b      	lsls	r3, r3, #8
 80019f8:	4313      	orrs	r3, r2
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	7812      	ldrb	r2, [r2, #0]
 80019fe:	4610      	mov	r0, r2
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	6811      	ldr	r1, [r2, #0]
 8001a04:	ea43 0200 	orr.w	r2, r3, r0
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	011b      	lsls	r3, r3, #4
 8001a0c:	440b      	add	r3, r1
 8001a0e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001a12:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	3318      	adds	r3, #24
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	4413      	add	r3, r2
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	6811      	ldr	r1, [r2, #0]
 8001a26:	f043 0201 	orr.w	r2, r3, #1
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	3318      	adds	r3, #24
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	440b      	add	r3, r1
 8001a32:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	e00e      	b.n	8001a56 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e006      	b.n	8001a56 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
  }
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3724      	adds	r7, #36	@ 0x24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a74:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a80:	4013      	ands	r3, r2
 8001a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a96:	4a04      	ldr	r2, [pc, #16]	@ (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	60d3      	str	r3, [r2, #12]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab0:	4b04      	ldr	r3, [pc, #16]	@ (8001ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	f003 0307 	and.w	r3, r3, #7
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6039      	str	r1, [r7, #0]
 8001ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	db0a      	blt.n	8001af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	490c      	ldr	r1, [pc, #48]	@ (8001b14 <__NVIC_SetPriority+0x4c>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	0112      	lsls	r2, r2, #4
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	440b      	add	r3, r1
 8001aec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af0:	e00a      	b.n	8001b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4908      	ldr	r1, [pc, #32]	@ (8001b18 <__NVIC_SetPriority+0x50>)
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	3b04      	subs	r3, #4
 8001b00:	0112      	lsls	r2, r2, #4
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	440b      	add	r3, r1
 8001b06:	761a      	strb	r2, [r3, #24]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000e100 	.word	0xe000e100
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b089      	sub	sp, #36	@ 0x24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f1c3 0307 	rsb	r3, r3, #7
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	bf28      	it	cs
 8001b3a:	2304      	movcs	r3, #4
 8001b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3304      	adds	r3, #4
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d902      	bls.n	8001b4c <NVIC_EncodePriority+0x30>
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3b03      	subs	r3, #3
 8001b4a:	e000      	b.n	8001b4e <NVIC_EncodePriority+0x32>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	401a      	ands	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	43d9      	mvns	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	4313      	orrs	r3, r2
         );
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3724      	adds	r7, #36	@ 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b94:	d301      	bcc.n	8001b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00f      	b.n	8001bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc4 <SysTick_Config+0x40>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba2:	210f      	movs	r1, #15
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ba8:	f7ff ff8e 	bl	8001ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bac:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <SysTick_Config+0x40>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb2:	4b04      	ldr	r3, [pc, #16]	@ (8001bc4 <SysTick_Config+0x40>)
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	e000e010 	.word	0xe000e010

08001bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff ff47 	bl	8001a64 <__NVIC_SetPriorityGrouping>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf0:	f7ff ff5c 	bl	8001aac <__NVIC_GetPriorityGrouping>
 8001bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	68b9      	ldr	r1, [r7, #8]
 8001bfa:	6978      	ldr	r0, [r7, #20]
 8001bfc:	f7ff ff8e 	bl	8001b1c <NVIC_EncodePriority>
 8001c00:	4602      	mov	r2, r0
 8001c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c06:	4611      	mov	r1, r2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff5d 	bl	8001ac8 <__NVIC_SetPriority>
}
 8001c0e:	bf00      	nop
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff ffb0 	bl	8001b84 <SysTick_Config>
 8001c24:	4603      	mov	r3, r0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b089      	sub	sp, #36	@ 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	e165      	b.n	8001f18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	f040 8154 	bne.w	8001f12 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d005      	beq.n	8001c82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d130      	bne.n	8001ce4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb8:	2201      	movs	r2, #1
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	f003 0201 	and.w	r2, r3, #1
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d017      	beq.n	8001d20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d123      	bne.n	8001d74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	08da      	lsrs	r2, r3, #3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3208      	adds	r2, #8
 8001d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	220f      	movs	r2, #15
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	691a      	ldr	r2, [r3, #16]
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	08da      	lsrs	r2, r3, #3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	3208      	adds	r2, #8
 8001d6e:	69b9      	ldr	r1, [r7, #24]
 8001d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	2203      	movs	r2, #3
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0203 	and.w	r2, r3, #3
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 80ae 	beq.w	8001f12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	4b5d      	ldr	r3, [pc, #372]	@ (8001f30 <HAL_GPIO_Init+0x300>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dbe:	4a5c      	ldr	r2, [pc, #368]	@ (8001f30 <HAL_GPIO_Init+0x300>)
 8001dc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dc6:	4b5a      	ldr	r3, [pc, #360]	@ (8001f30 <HAL_GPIO_Init+0x300>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dd2:	4a58      	ldr	r2, [pc, #352]	@ (8001f34 <HAL_GPIO_Init+0x304>)
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	3302      	adds	r3, #2
 8001dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	220f      	movs	r2, #15
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4f      	ldr	r2, [pc, #316]	@ (8001f38 <HAL_GPIO_Init+0x308>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d025      	beq.n	8001e4a <HAL_GPIO_Init+0x21a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a4e      	ldr	r2, [pc, #312]	@ (8001f3c <HAL_GPIO_Init+0x30c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d01f      	beq.n	8001e46 <HAL_GPIO_Init+0x216>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a4d      	ldr	r2, [pc, #308]	@ (8001f40 <HAL_GPIO_Init+0x310>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d019      	beq.n	8001e42 <HAL_GPIO_Init+0x212>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a4c      	ldr	r2, [pc, #304]	@ (8001f44 <HAL_GPIO_Init+0x314>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_GPIO_Init+0x20e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a4b      	ldr	r2, [pc, #300]	@ (8001f48 <HAL_GPIO_Init+0x318>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d00d      	beq.n	8001e3a <HAL_GPIO_Init+0x20a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a4a      	ldr	r2, [pc, #296]	@ (8001f4c <HAL_GPIO_Init+0x31c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d007      	beq.n	8001e36 <HAL_GPIO_Init+0x206>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a49      	ldr	r2, [pc, #292]	@ (8001f50 <HAL_GPIO_Init+0x320>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d101      	bne.n	8001e32 <HAL_GPIO_Init+0x202>
 8001e2e:	2306      	movs	r3, #6
 8001e30:	e00c      	b.n	8001e4c <HAL_GPIO_Init+0x21c>
 8001e32:	2307      	movs	r3, #7
 8001e34:	e00a      	b.n	8001e4c <HAL_GPIO_Init+0x21c>
 8001e36:	2305      	movs	r3, #5
 8001e38:	e008      	b.n	8001e4c <HAL_GPIO_Init+0x21c>
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x21c>
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e004      	b.n	8001e4c <HAL_GPIO_Init+0x21c>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e002      	b.n	8001e4c <HAL_GPIO_Init+0x21c>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_GPIO_Init+0x21c>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	f002 0203 	and.w	r2, r2, #3
 8001e52:	0092      	lsls	r2, r2, #2
 8001e54:	4093      	lsls	r3, r2
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e5c:	4935      	ldr	r1, [pc, #212]	@ (8001f34 <HAL_GPIO_Init+0x304>)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	3302      	adds	r3, #2
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e6a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f54 <HAL_GPIO_Init+0x324>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e8e:	4a31      	ldr	r2, [pc, #196]	@ (8001f54 <HAL_GPIO_Init+0x324>)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e94:	4b2f      	ldr	r3, [pc, #188]	@ (8001f54 <HAL_GPIO_Init+0x324>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eb8:	4a26      	ldr	r2, [pc, #152]	@ (8001f54 <HAL_GPIO_Init+0x324>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ebe:	4b25      	ldr	r3, [pc, #148]	@ (8001f54 <HAL_GPIO_Init+0x324>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ee2:	4a1c      	ldr	r2, [pc, #112]	@ (8001f54 <HAL_GPIO_Init+0x324>)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f54 <HAL_GPIO_Init+0x324>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f0c:	4a11      	ldr	r2, [pc, #68]	@ (8001f54 <HAL_GPIO_Init+0x324>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3301      	adds	r3, #1
 8001f16:	61fb      	str	r3, [r7, #28]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	2b0f      	cmp	r3, #15
 8001f1c:	f67f ae96 	bls.w	8001c4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f20:	bf00      	nop
 8001f22:	bf00      	nop
 8001f24:	3724      	adds	r7, #36	@ 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40013800 	.word	0x40013800
 8001f38:	40020000 	.word	0x40020000
 8001f3c:	40020400 	.word	0x40020400
 8001f40:	40020800 	.word	0x40020800
 8001f44:	40020c00 	.word	0x40020c00
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40021400 	.word	0x40021400
 8001f50:	40021800 	.word	0x40021800
 8001f54:	40013c00 	.word	0x40013c00

08001f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	807b      	strh	r3, [r7, #2]
 8001f64:	4613      	mov	r3, r2
 8001f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f68:	787b      	ldrb	r3, [r7, #1]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f6e:	887a      	ldrh	r2, [r7, #2]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f74:	e003      	b.n	8001f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f76:	887b      	ldrh	r3, [r7, #2]
 8001f78:	041a      	lsls	r2, r3, #16
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	619a      	str	r2, [r3, #24]
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e12b      	b.n	80021f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d106      	bne.n	8001fb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7fe fe24 	bl	8000c00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2224      	movs	r2, #36	@ 0x24
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0201 	bic.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ff0:	f001 f8b8 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
 8001ff4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	4a81      	ldr	r2, [pc, #516]	@ (8002200 <HAL_I2C_Init+0x274>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d807      	bhi.n	8002010 <HAL_I2C_Init+0x84>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4a80      	ldr	r2, [pc, #512]	@ (8002204 <HAL_I2C_Init+0x278>)
 8002004:	4293      	cmp	r3, r2
 8002006:	bf94      	ite	ls
 8002008:	2301      	movls	r3, #1
 800200a:	2300      	movhi	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	e006      	b.n	800201e <HAL_I2C_Init+0x92>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4a7d      	ldr	r2, [pc, #500]	@ (8002208 <HAL_I2C_Init+0x27c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	bf94      	ite	ls
 8002018:	2301      	movls	r3, #1
 800201a:	2300      	movhi	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e0e7      	b.n	80021f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4a78      	ldr	r2, [pc, #480]	@ (800220c <HAL_I2C_Init+0x280>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	0c9b      	lsrs	r3, r3, #18
 8002030:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	430a      	orrs	r2, r1
 8002044:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4a6a      	ldr	r2, [pc, #424]	@ (8002200 <HAL_I2C_Init+0x274>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d802      	bhi.n	8002060 <HAL_I2C_Init+0xd4>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	3301      	adds	r3, #1
 800205e:	e009      	b.n	8002074 <HAL_I2C_Init+0xe8>
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002066:	fb02 f303 	mul.w	r3, r2, r3
 800206a:	4a69      	ldr	r2, [pc, #420]	@ (8002210 <HAL_I2C_Init+0x284>)
 800206c:	fba2 2303 	umull	r2, r3, r2, r3
 8002070:	099b      	lsrs	r3, r3, #6
 8002072:	3301      	adds	r3, #1
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	430b      	orrs	r3, r1
 800207a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002086:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	495c      	ldr	r1, [pc, #368]	@ (8002200 <HAL_I2C_Init+0x274>)
 8002090:	428b      	cmp	r3, r1
 8002092:	d819      	bhi.n	80020c8 <HAL_I2C_Init+0x13c>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1e59      	subs	r1, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	fbb1 f3f3 	udiv	r3, r1, r3
 80020a2:	1c59      	adds	r1, r3, #1
 80020a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80020a8:	400b      	ands	r3, r1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <HAL_I2C_Init+0x138>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1e59      	subs	r1, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80020bc:	3301      	adds	r3, #1
 80020be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c2:	e051      	b.n	8002168 <HAL_I2C_Init+0x1dc>
 80020c4:	2304      	movs	r3, #4
 80020c6:	e04f      	b.n	8002168 <HAL_I2C_Init+0x1dc>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d111      	bne.n	80020f4 <HAL_I2C_Init+0x168>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1e58      	subs	r0, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6859      	ldr	r1, [r3, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	440b      	add	r3, r1
 80020de:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e2:	3301      	adds	r3, #1
 80020e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf0c      	ite	eq
 80020ec:	2301      	moveq	r3, #1
 80020ee:	2300      	movne	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	e012      	b.n	800211a <HAL_I2C_Init+0x18e>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	1e58      	subs	r0, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6859      	ldr	r1, [r3, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	0099      	lsls	r1, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	fbb0 f3f3 	udiv	r3, r0, r3
 800210a:	3301      	adds	r3, #1
 800210c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002110:	2b00      	cmp	r3, #0
 8002112:	bf0c      	ite	eq
 8002114:	2301      	moveq	r3, #1
 8002116:	2300      	movne	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_I2C_Init+0x196>
 800211e:	2301      	movs	r3, #1
 8002120:	e022      	b.n	8002168 <HAL_I2C_Init+0x1dc>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10e      	bne.n	8002148 <HAL_I2C_Init+0x1bc>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1e58      	subs	r0, r3, #1
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6859      	ldr	r1, [r3, #4]
 8002132:	460b      	mov	r3, r1
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	440b      	add	r3, r1
 8002138:	fbb0 f3f3 	udiv	r3, r0, r3
 800213c:	3301      	adds	r3, #1
 800213e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002142:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002146:	e00f      	b.n	8002168 <HAL_I2C_Init+0x1dc>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1e58      	subs	r0, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6859      	ldr	r1, [r3, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	0099      	lsls	r1, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	fbb0 f3f3 	udiv	r3, r0, r3
 800215e:	3301      	adds	r3, #1
 8002160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002164:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	6809      	ldr	r1, [r1, #0]
 800216c:	4313      	orrs	r3, r2
 800216e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69da      	ldr	r2, [r3, #28]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002196:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6911      	ldr	r1, [r2, #16]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68d2      	ldr	r2, [r2, #12]
 80021a2:	4311      	orrs	r1, r2
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	430b      	orrs	r3, r1
 80021aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695a      	ldr	r2, [r3, #20]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	000186a0 	.word	0x000186a0
 8002204:	001e847f 	.word	0x001e847f
 8002208:	003d08ff 	.word	0x003d08ff
 800220c:	431bde83 	.word	0x431bde83
 8002210:	10624dd3 	.word	0x10624dd3

08002214 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af02      	add	r7, sp, #8
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	607a      	str	r2, [r7, #4]
 800221e:	461a      	mov	r2, r3
 8002220:	460b      	mov	r3, r1
 8002222:	817b      	strh	r3, [r7, #10]
 8002224:	4613      	mov	r3, r2
 8002226:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002228:	f7ff f9dc 	bl	80015e4 <HAL_GetTick>
 800222c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b20      	cmp	r3, #32
 8002238:	f040 80e0 	bne.w	80023fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	2319      	movs	r3, #25
 8002242:	2201      	movs	r2, #1
 8002244:	4970      	ldr	r1, [pc, #448]	@ (8002408 <HAL_I2C_Master_Transmit+0x1f4>)
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 fc64 	bl	8002b14 <I2C_WaitOnFlagUntilTimeout>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002252:	2302      	movs	r3, #2
 8002254:	e0d3      	b.n	80023fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800225c:	2b01      	cmp	r3, #1
 800225e:	d101      	bne.n	8002264 <HAL_I2C_Master_Transmit+0x50>
 8002260:	2302      	movs	r3, #2
 8002262:	e0cc      	b.n	80023fe <HAL_I2C_Master_Transmit+0x1ea>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b01      	cmp	r3, #1
 8002278:	d007      	beq.n	800228a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0201 	orr.w	r2, r2, #1
 8002288:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002298:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2221      	movs	r2, #33	@ 0x21
 800229e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2210      	movs	r2, #16
 80022a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	893a      	ldrh	r2, [r7, #8]
 80022ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4a50      	ldr	r2, [pc, #320]	@ (800240c <HAL_I2C_Master_Transmit+0x1f8>)
 80022ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022cc:	8979      	ldrh	r1, [r7, #10]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	6a3a      	ldr	r2, [r7, #32]
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 face 	bl	8002874 <I2C_MasterRequestWrite>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e08d      	b.n	80023fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022f8:	e066      	b.n	80023c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	6a39      	ldr	r1, [r7, #32]
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 fd22 	bl	8002d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00d      	beq.n	8002326 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230e:	2b04      	cmp	r3, #4
 8002310:	d107      	bne.n	8002322 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002320:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e06b      	b.n	80023fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232a:	781a      	ldrb	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002340:	b29b      	uxth	r3, r3
 8002342:	3b01      	subs	r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b04      	cmp	r3, #4
 8002362:	d11b      	bne.n	800239c <HAL_I2C_Master_Transmit+0x188>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002368:	2b00      	cmp	r3, #0
 800236a:	d017      	beq.n	800239c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002370:	781a      	ldrb	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002386:	b29b      	uxth	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002394:	3b01      	subs	r3, #1
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	6a39      	ldr	r1, [r7, #32]
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 fd19 	bl	8002dd8 <I2C_WaitOnBTFFlagUntilTimeout>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00d      	beq.n	80023c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d107      	bne.n	80023c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e01a      	b.n	80023fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d194      	bne.n	80022fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	e000      	b.n	80023fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023fc:	2302      	movs	r3, #2
  }
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	00100002 	.word	0x00100002
 800240c:	ffff0000 	.word	0xffff0000

08002410 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08c      	sub	sp, #48	@ 0x30
 8002414:	af02      	add	r7, sp, #8
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	607a      	str	r2, [r7, #4]
 800241a:	461a      	mov	r2, r3
 800241c:	460b      	mov	r3, r1
 800241e:	817b      	strh	r3, [r7, #10]
 8002420:	4613      	mov	r3, r2
 8002422:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002424:	f7ff f8de 	bl	80015e4 <HAL_GetTick>
 8002428:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b20      	cmp	r3, #32
 8002434:	f040 8217 	bne.w	8002866 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2319      	movs	r3, #25
 800243e:	2201      	movs	r2, #1
 8002440:	497c      	ldr	r1, [pc, #496]	@ (8002634 <HAL_I2C_Master_Receive+0x224>)
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 fb66 	bl	8002b14 <I2C_WaitOnFlagUntilTimeout>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800244e:	2302      	movs	r3, #2
 8002450:	e20a      	b.n	8002868 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_I2C_Master_Receive+0x50>
 800245c:	2302      	movs	r3, #2
 800245e:	e203      	b.n	8002868 <HAL_I2C_Master_Receive+0x458>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b01      	cmp	r3, #1
 8002474:	d007      	beq.n	8002486 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0201 	orr.w	r2, r2, #1
 8002484:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002494:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2222      	movs	r2, #34	@ 0x22
 800249a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2210      	movs	r2, #16
 80024a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	893a      	ldrh	r2, [r7, #8]
 80024b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4a5c      	ldr	r2, [pc, #368]	@ (8002638 <HAL_I2C_Master_Receive+0x228>)
 80024c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024c8:	8979      	ldrh	r1, [r7, #10]
 80024ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 fa52 	bl	8002978 <I2C_MasterRequestRead>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e1c4      	b.n	8002868 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d113      	bne.n	800250e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e6:	2300      	movs	r3, #0
 80024e8:	623b      	str	r3, [r7, #32]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	623b      	str	r3, [r7, #32]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	623b      	str	r3, [r7, #32]
 80024fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	e198      	b.n	8002840 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002512:	2b01      	cmp	r3, #1
 8002514:	d11b      	bne.n	800254e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002524:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	e178      	b.n	8002840 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002552:	2b02      	cmp	r3, #2
 8002554:	d11b      	bne.n	800258e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002564:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002574:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	e158      	b.n	8002840 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800259c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025b4:	e144      	b.n	8002840 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	f200 80f1 	bhi.w	80027a2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d123      	bne.n	8002610 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 fc4b 	bl	8002e68 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e145      	b.n	8002868 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800260e:	e117      	b.n	8002840 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002614:	2b02      	cmp	r3, #2
 8002616:	d14e      	bne.n	80026b6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800261e:	2200      	movs	r2, #0
 8002620:	4906      	ldr	r1, [pc, #24]	@ (800263c <HAL_I2C_Master_Receive+0x22c>)
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 fa76 	bl	8002b14 <I2C_WaitOnFlagUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d008      	beq.n	8002640 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e11a      	b.n	8002868 <HAL_I2C_Master_Receive+0x458>
 8002632:	bf00      	nop
 8002634:	00100002 	.word	0x00100002
 8002638:	ffff0000 	.word	0xffff0000
 800263c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800264e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691a      	ldr	r2, [r3, #16]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002678:	b29b      	uxth	r3, r3
 800267a:	3b01      	subs	r3, #1
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026b4:	e0c4      	b.n	8002840 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026bc:	2200      	movs	r2, #0
 80026be:	496c      	ldr	r1, [pc, #432]	@ (8002870 <HAL_I2C_Master_Receive+0x460>)
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 fa27 	bl	8002b14 <I2C_WaitOnFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0cb      	b.n	8002868 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691a      	ldr	r2, [r3, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002718:	2200      	movs	r2, #0
 800271a:	4955      	ldr	r1, [pc, #340]	@ (8002870 <HAL_I2C_Master_Receive+0x460>)
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 f9f9 	bl	8002b14 <I2C_WaitOnFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e09d      	b.n	8002868 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800273a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027a0:	e04e      	b.n	8002840 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fb5e 	bl	8002e68 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e058      	b.n	8002868 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d124      	bne.n	8002840 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	d107      	bne.n	800280e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800280c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002844:	2b00      	cmp	r3, #0
 8002846:	f47f aeb6 	bne.w	80025b6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	e000      	b.n	8002868 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002866:	2302      	movs	r3, #2
  }
}
 8002868:	4618      	mov	r0, r3
 800286a:	3728      	adds	r7, #40	@ 0x28
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	00010004 	.word	0x00010004

08002874 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af02      	add	r7, sp, #8
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	460b      	mov	r3, r1
 8002882:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002888:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2b08      	cmp	r3, #8
 800288e:	d006      	beq.n	800289e <I2C_MasterRequestWrite+0x2a>
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d003      	beq.n	800289e <I2C_MasterRequestWrite+0x2a>
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800289c:	d108      	bne.n	80028b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	e00b      	b.n	80028c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b4:	2b12      	cmp	r3, #18
 80028b6:	d107      	bne.n	80028c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f91d 	bl	8002b14 <I2C_WaitOnFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00d      	beq.n	80028fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028ee:	d103      	bne.n	80028f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e035      	b.n	8002968 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002904:	d108      	bne.n	8002918 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002906:	897b      	ldrh	r3, [r7, #10]
 8002908:	b2db      	uxtb	r3, r3
 800290a:	461a      	mov	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002914:	611a      	str	r2, [r3, #16]
 8002916:	e01b      	b.n	8002950 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002918:	897b      	ldrh	r3, [r7, #10]
 800291a:	11db      	asrs	r3, r3, #7
 800291c:	b2db      	uxtb	r3, r3
 800291e:	f003 0306 	and.w	r3, r3, #6
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f063 030f 	orn	r3, r3, #15
 8002928:	b2da      	uxtb	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	490e      	ldr	r1, [pc, #56]	@ (8002970 <I2C_MasterRequestWrite+0xfc>)
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 f966 	bl	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e010      	b.n	8002968 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002946:	897b      	ldrh	r3, [r7, #10]
 8002948:	b2da      	uxtb	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	4907      	ldr	r1, [pc, #28]	@ (8002974 <I2C_MasterRequestWrite+0x100>)
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 f956 	bl	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	00010008 	.word	0x00010008
 8002974:	00010002 	.word	0x00010002

08002978 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af02      	add	r7, sp, #8
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	607a      	str	r2, [r7, #4]
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	460b      	mov	r3, r1
 8002986:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800299c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d006      	beq.n	80029b2 <I2C_MasterRequestRead+0x3a>
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d003      	beq.n	80029b2 <I2C_MasterRequestRead+0x3a>
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029b0:	d108      	bne.n	80029c4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	e00b      	b.n	80029dc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c8:	2b11      	cmp	r3, #17
 80029ca:	d107      	bne.n	80029dc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 f893 	bl	8002b14 <I2C_WaitOnFlagUntilTimeout>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00d      	beq.n	8002a10 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a02:	d103      	bne.n	8002a0c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a0a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e079      	b.n	8002b04 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a18:	d108      	bne.n	8002a2c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a1a:	897b      	ldrh	r3, [r7, #10]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	f043 0301 	orr.w	r3, r3, #1
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	611a      	str	r2, [r3, #16]
 8002a2a:	e05f      	b.n	8002aec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a2c:	897b      	ldrh	r3, [r7, #10]
 8002a2e:	11db      	asrs	r3, r3, #7
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f003 0306 	and.w	r3, r3, #6
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f063 030f 	orn	r3, r3, #15
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	4930      	ldr	r1, [pc, #192]	@ (8002b0c <I2C_MasterRequestRead+0x194>)
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f8dc 	bl	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e054      	b.n	8002b04 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a5a:	897b      	ldrh	r3, [r7, #10]
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	4929      	ldr	r1, [pc, #164]	@ (8002b10 <I2C_MasterRequestRead+0x198>)
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f8cc 	bl	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e044      	b.n	8002b04 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a9e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 f831 	bl	8002b14 <I2C_WaitOnFlagUntilTimeout>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00d      	beq.n	8002ad4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ac6:	d103      	bne.n	8002ad0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ace:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e017      	b.n	8002b04 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002ad4:	897b      	ldrh	r3, [r7, #10]
 8002ad6:	11db      	asrs	r3, r3, #7
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	f003 0306 	and.w	r3, r3, #6
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	f063 030e 	orn	r3, r3, #14
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	4907      	ldr	r1, [pc, #28]	@ (8002b10 <I2C_MasterRequestRead+0x198>)
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 f888 	bl	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	00010008 	.word	0x00010008
 8002b10:	00010002 	.word	0x00010002

08002b14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	4613      	mov	r3, r2
 8002b22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b24:	e048      	b.n	8002bb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b2c:	d044      	beq.n	8002bb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2e:	f7fe fd59 	bl	80015e4 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d302      	bcc.n	8002b44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d139      	bne.n	8002bb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	0c1b      	lsrs	r3, r3, #16
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d10d      	bne.n	8002b6a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	43da      	mvns	r2, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	bf0c      	ite	eq
 8002b60:	2301      	moveq	r3, #1
 8002b62:	2300      	movne	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	e00c      	b.n	8002b84 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	43da      	mvns	r2, r3
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	4013      	ands	r3, r2
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bf0c      	ite	eq
 8002b7c:	2301      	moveq	r3, #1
 8002b7e:	2300      	movne	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	461a      	mov	r2, r3
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d116      	bne.n	8002bb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba4:	f043 0220 	orr.w	r2, r3, #32
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e023      	b.n	8002c00 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	0c1b      	lsrs	r3, r3, #16
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d10d      	bne.n	8002bde <I2C_WaitOnFlagUntilTimeout+0xca>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	43da      	mvns	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	461a      	mov	r2, r3
 8002bdc:	e00c      	b.n	8002bf8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	43da      	mvns	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	4013      	ands	r3, r2
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	bf0c      	ite	eq
 8002bf0:	2301      	moveq	r3, #1
 8002bf2:	2300      	movne	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d093      	beq.n	8002b26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c16:	e071      	b.n	8002cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c26:	d123      	bne.n	8002c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c36:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5c:	f043 0204 	orr.w	r2, r3, #4
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e067      	b.n	8002d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c76:	d041      	beq.n	8002cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c78:	f7fe fcb4 	bl	80015e4 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d302      	bcc.n	8002c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d136      	bne.n	8002cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	0c1b      	lsrs	r3, r3, #16
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d10c      	bne.n	8002cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	43da      	mvns	r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	bf14      	ite	ne
 8002caa:	2301      	movne	r3, #1
 8002cac:	2300      	moveq	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	e00b      	b.n	8002cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	43da      	mvns	r2, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bf14      	ite	ne
 8002cc4:	2301      	movne	r3, #1
 8002cc6:	2300      	moveq	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d016      	beq.n	8002cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce8:	f043 0220 	orr.w	r2, r3, #32
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e021      	b.n	8002d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	0c1b      	lsrs	r3, r3, #16
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d10c      	bne.n	8002d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	43da      	mvns	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	4013      	ands	r3, r2
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	bf14      	ite	ne
 8002d18:	2301      	movne	r3, #1
 8002d1a:	2300      	moveq	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	e00b      	b.n	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	43da      	mvns	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	bf14      	ite	ne
 8002d32:	2301      	movne	r3, #1
 8002d34:	2300      	moveq	r3, #0
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f47f af6d 	bne.w	8002c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d54:	e034      	b.n	8002dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 f8e3 	bl	8002f22 <I2C_IsAcknowledgeFailed>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e034      	b.n	8002dd0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d6c:	d028      	beq.n	8002dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d6e:	f7fe fc39 	bl	80015e4 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d302      	bcc.n	8002d84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d11d      	bne.n	8002dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d8e:	2b80      	cmp	r3, #128	@ 0x80
 8002d90:	d016      	beq.n	8002dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dac:	f043 0220 	orr.w	r2, r3, #32
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e007      	b.n	8002dd0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dca:	2b80      	cmp	r3, #128	@ 0x80
 8002dcc:	d1c3      	bne.n	8002d56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002de4:	e034      	b.n	8002e50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f89b 	bl	8002f22 <I2C_IsAcknowledgeFailed>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e034      	b.n	8002e60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dfc:	d028      	beq.n	8002e50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dfe:	f7fe fbf1 	bl	80015e4 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d302      	bcc.n	8002e14 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d11d      	bne.n	8002e50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d016      	beq.n	8002e50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3c:	f043 0220 	orr.w	r2, r3, #32
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e007      	b.n	8002e60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d1c3      	bne.n	8002de6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e74:	e049      	b.n	8002f0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	2b10      	cmp	r3, #16
 8002e82:	d119      	bne.n	8002eb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0210 	mvn.w	r2, #16
 8002e8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e030      	b.n	8002f1a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb8:	f7fe fb94 	bl	80015e4 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d302      	bcc.n	8002ece <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d11d      	bne.n	8002f0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed8:	2b40      	cmp	r3, #64	@ 0x40
 8002eda:	d016      	beq.n	8002f0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef6:	f043 0220 	orr.w	r2, r3, #32
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e007      	b.n	8002f1a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f14:	2b40      	cmp	r3, #64	@ 0x40
 8002f16:	d1ae      	bne.n	8002e76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f38:	d11b      	bne.n	8002f72 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f42:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5e:	f043 0204 	orr.w	r2, r3, #4
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0cc      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f94:	4b68      	ldr	r3, [pc, #416]	@ (8003138 <HAL_RCC_ClockConfig+0x1b8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d90c      	bls.n	8002fbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa2:	4b65      	ldr	r3, [pc, #404]	@ (8003138 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002faa:	4b63      	ldr	r3, [pc, #396]	@ (8003138 <HAL_RCC_ClockConfig+0x1b8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0b8      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d020      	beq.n	800300a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd4:	4b59      	ldr	r3, [pc, #356]	@ (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	4a58      	ldr	r2, [pc, #352]	@ (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002fde:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fec:	4b53      	ldr	r3, [pc, #332]	@ (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	4a52      	ldr	r2, [pc, #328]	@ (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ff6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff8:	4b50      	ldr	r3, [pc, #320]	@ (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	494d      	ldr	r1, [pc, #308]	@ (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	4313      	orrs	r3, r2
 8003008:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d044      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d107      	bne.n	800302e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301e:	4b47      	ldr	r3, [pc, #284]	@ (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d119      	bne.n	800305e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e07f      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d003      	beq.n	800303e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800303a:	2b03      	cmp	r3, #3
 800303c:	d107      	bne.n	800304e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303e:	4b3f      	ldr	r3, [pc, #252]	@ (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d109      	bne.n	800305e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e06f      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304e:	4b3b      	ldr	r3, [pc, #236]	@ (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e067      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800305e:	4b37      	ldr	r3, [pc, #220]	@ (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f023 0203 	bic.w	r2, r3, #3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	4934      	ldr	r1, [pc, #208]	@ (800313c <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	4313      	orrs	r3, r2
 800306e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003070:	f7fe fab8 	bl	80015e4 <HAL_GetTick>
 8003074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003076:	e00a      	b.n	800308e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003078:	f7fe fab4 	bl	80015e4 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003086:	4293      	cmp	r3, r2
 8003088:	d901      	bls.n	800308e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e04f      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308e:	4b2b      	ldr	r3, [pc, #172]	@ (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 020c 	and.w	r2, r3, #12
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	429a      	cmp	r2, r3
 800309e:	d1eb      	bne.n	8003078 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030a0:	4b25      	ldr	r3, [pc, #148]	@ (8003138 <HAL_RCC_ClockConfig+0x1b8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d20c      	bcs.n	80030c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ae:	4b22      	ldr	r3, [pc, #136]	@ (8003138 <HAL_RCC_ClockConfig+0x1b8>)
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b20      	ldr	r3, [pc, #128]	@ (8003138 <HAL_RCC_ClockConfig+0x1b8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e032      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d4:	4b19      	ldr	r3, [pc, #100]	@ (800313c <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4916      	ldr	r1, [pc, #88]	@ (800313c <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030f2:	4b12      	ldr	r3, [pc, #72]	@ (800313c <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	490e      	ldr	r1, [pc, #56]	@ (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003106:	f000 f855 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 800310a:	4602      	mov	r2, r0
 800310c:	4b0b      	ldr	r3, [pc, #44]	@ (800313c <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	490a      	ldr	r1, [pc, #40]	@ (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 8003118:	5ccb      	ldrb	r3, [r1, r3]
 800311a:	fa22 f303 	lsr.w	r3, r2, r3
 800311e:	4a09      	ldr	r2, [pc, #36]	@ (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003122:	4b09      	ldr	r3, [pc, #36]	@ (8003148 <HAL_RCC_ClockConfig+0x1c8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe fa18 	bl	800155c <HAL_InitTick>

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40023c00 	.word	0x40023c00
 800313c:	40023800 	.word	0x40023800
 8003140:	08005650 	.word	0x08005650
 8003144:	20000000 	.word	0x20000000
 8003148:	20000004 	.word	0x20000004

0800314c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003150:	4b03      	ldr	r3, [pc, #12]	@ (8003160 <HAL_RCC_GetHCLKFreq+0x14>)
 8003152:	681b      	ldr	r3, [r3, #0]
}
 8003154:	4618      	mov	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	20000000 	.word	0x20000000

08003164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003168:	f7ff fff0 	bl	800314c <HAL_RCC_GetHCLKFreq>
 800316c:	4602      	mov	r2, r0
 800316e:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	0a9b      	lsrs	r3, r3, #10
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	4903      	ldr	r1, [pc, #12]	@ (8003188 <HAL_RCC_GetPCLK1Freq+0x24>)
 800317a:	5ccb      	ldrb	r3, [r1, r3]
 800317c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003180:	4618      	mov	r0, r3
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40023800 	.word	0x40023800
 8003188:	08005660 	.word	0x08005660

0800318c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003190:	f7ff ffdc 	bl	800314c <HAL_RCC_GetHCLKFreq>
 8003194:	4602      	mov	r2, r0
 8003196:	4b05      	ldr	r3, [pc, #20]	@ (80031ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	0b5b      	lsrs	r3, r3, #13
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	4903      	ldr	r1, [pc, #12]	@ (80031b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031a2:	5ccb      	ldrb	r3, [r1, r3]
 80031a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40023800 	.word	0x40023800
 80031b0:	08005660 	.word	0x08005660

080031b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031b8:	b0ae      	sub	sp, #184	@ 0xb8
 80031ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031da:	4bcb      	ldr	r3, [pc, #812]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x354>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b0c      	cmp	r3, #12
 80031e4:	f200 8206 	bhi.w	80035f4 <HAL_RCC_GetSysClockFreq+0x440>
 80031e8:	a201      	add	r2, pc, #4	@ (adr r2, 80031f0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80031ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ee:	bf00      	nop
 80031f0:	08003225 	.word	0x08003225
 80031f4:	080035f5 	.word	0x080035f5
 80031f8:	080035f5 	.word	0x080035f5
 80031fc:	080035f5 	.word	0x080035f5
 8003200:	0800322d 	.word	0x0800322d
 8003204:	080035f5 	.word	0x080035f5
 8003208:	080035f5 	.word	0x080035f5
 800320c:	080035f5 	.word	0x080035f5
 8003210:	08003235 	.word	0x08003235
 8003214:	080035f5 	.word	0x080035f5
 8003218:	080035f5 	.word	0x080035f5
 800321c:	080035f5 	.word	0x080035f5
 8003220:	08003425 	.word	0x08003425
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003224:	4bb9      	ldr	r3, [pc, #740]	@ (800350c <HAL_RCC_GetSysClockFreq+0x358>)
 8003226:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800322a:	e1e7      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800322c:	4bb8      	ldr	r3, [pc, #736]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x35c>)
 800322e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003232:	e1e3      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003234:	4bb4      	ldr	r3, [pc, #720]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x354>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800323c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003240:	4bb1      	ldr	r3, [pc, #708]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x354>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d071      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800324c:	4bae      	ldr	r3, [pc, #696]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x354>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	099b      	lsrs	r3, r3, #6
 8003252:	2200      	movs	r2, #0
 8003254:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003258:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800325c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003264:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003268:	2300      	movs	r3, #0
 800326a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800326e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003272:	4622      	mov	r2, r4
 8003274:	462b      	mov	r3, r5
 8003276:	f04f 0000 	mov.w	r0, #0
 800327a:	f04f 0100 	mov.w	r1, #0
 800327e:	0159      	lsls	r1, r3, #5
 8003280:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003284:	0150      	lsls	r0, r2, #5
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4621      	mov	r1, r4
 800328c:	1a51      	subs	r1, r2, r1
 800328e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003290:	4629      	mov	r1, r5
 8003292:	eb63 0301 	sbc.w	r3, r3, r1
 8003296:	647b      	str	r3, [r7, #68]	@ 0x44
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80032a4:	4649      	mov	r1, r9
 80032a6:	018b      	lsls	r3, r1, #6
 80032a8:	4641      	mov	r1, r8
 80032aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032ae:	4641      	mov	r1, r8
 80032b0:	018a      	lsls	r2, r1, #6
 80032b2:	4641      	mov	r1, r8
 80032b4:	1a51      	subs	r1, r2, r1
 80032b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80032b8:	4649      	mov	r1, r9
 80032ba:	eb63 0301 	sbc.w	r3, r3, r1
 80032be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80032cc:	4649      	mov	r1, r9
 80032ce:	00cb      	lsls	r3, r1, #3
 80032d0:	4641      	mov	r1, r8
 80032d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032d6:	4641      	mov	r1, r8
 80032d8:	00ca      	lsls	r2, r1, #3
 80032da:	4610      	mov	r0, r2
 80032dc:	4619      	mov	r1, r3
 80032de:	4603      	mov	r3, r0
 80032e0:	4622      	mov	r2, r4
 80032e2:	189b      	adds	r3, r3, r2
 80032e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80032e6:	462b      	mov	r3, r5
 80032e8:	460a      	mov	r2, r1
 80032ea:	eb42 0303 	adc.w	r3, r2, r3
 80032ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80032fc:	4629      	mov	r1, r5
 80032fe:	024b      	lsls	r3, r1, #9
 8003300:	4621      	mov	r1, r4
 8003302:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003306:	4621      	mov	r1, r4
 8003308:	024a      	lsls	r2, r1, #9
 800330a:	4610      	mov	r0, r2
 800330c:	4619      	mov	r1, r3
 800330e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003312:	2200      	movs	r2, #0
 8003314:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003318:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800331c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003320:	f7fc ffc6 	bl	80002b0 <__aeabi_uldivmod>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4613      	mov	r3, r2
 800332a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800332e:	e067      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003330:	4b75      	ldr	r3, [pc, #468]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x354>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	099b      	lsrs	r3, r3, #6
 8003336:	2200      	movs	r2, #0
 8003338:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800333c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003340:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003348:	67bb      	str	r3, [r7, #120]	@ 0x78
 800334a:	2300      	movs	r3, #0
 800334c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800334e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003352:	4622      	mov	r2, r4
 8003354:	462b      	mov	r3, r5
 8003356:	f04f 0000 	mov.w	r0, #0
 800335a:	f04f 0100 	mov.w	r1, #0
 800335e:	0159      	lsls	r1, r3, #5
 8003360:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003364:	0150      	lsls	r0, r2, #5
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	4621      	mov	r1, r4
 800336c:	1a51      	subs	r1, r2, r1
 800336e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003370:	4629      	mov	r1, r5
 8003372:	eb63 0301 	sbc.w	r3, r3, r1
 8003376:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003384:	4649      	mov	r1, r9
 8003386:	018b      	lsls	r3, r1, #6
 8003388:	4641      	mov	r1, r8
 800338a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800338e:	4641      	mov	r1, r8
 8003390:	018a      	lsls	r2, r1, #6
 8003392:	4641      	mov	r1, r8
 8003394:	ebb2 0a01 	subs.w	sl, r2, r1
 8003398:	4649      	mov	r1, r9
 800339a:	eb63 0b01 	sbc.w	fp, r3, r1
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033aa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033b2:	4692      	mov	sl, r2
 80033b4:	469b      	mov	fp, r3
 80033b6:	4623      	mov	r3, r4
 80033b8:	eb1a 0303 	adds.w	r3, sl, r3
 80033bc:	623b      	str	r3, [r7, #32]
 80033be:	462b      	mov	r3, r5
 80033c0:	eb4b 0303 	adc.w	r3, fp, r3
 80033c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80033d2:	4629      	mov	r1, r5
 80033d4:	028b      	lsls	r3, r1, #10
 80033d6:	4621      	mov	r1, r4
 80033d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033dc:	4621      	mov	r1, r4
 80033de:	028a      	lsls	r2, r1, #10
 80033e0:	4610      	mov	r0, r2
 80033e2:	4619      	mov	r1, r3
 80033e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033e8:	2200      	movs	r2, #0
 80033ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80033ec:	677a      	str	r2, [r7, #116]	@ 0x74
 80033ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80033f2:	f7fc ff5d 	bl	80002b0 <__aeabi_uldivmod>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4613      	mov	r3, r2
 80033fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003400:	4b41      	ldr	r3, [pc, #260]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x354>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	0c1b      	lsrs	r3, r3, #16
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	3301      	adds	r3, #1
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003412:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003416:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800341a:	fbb2 f3f3 	udiv	r3, r2, r3
 800341e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003422:	e0eb      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003424:	4b38      	ldr	r3, [pc, #224]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x354>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800342c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003430:	4b35      	ldr	r3, [pc, #212]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x354>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d06b      	beq.n	8003514 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800343c:	4b32      	ldr	r3, [pc, #200]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x354>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	099b      	lsrs	r3, r3, #6
 8003442:	2200      	movs	r2, #0
 8003444:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003446:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003448:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800344a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800344e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003450:	2300      	movs	r3, #0
 8003452:	667b      	str	r3, [r7, #100]	@ 0x64
 8003454:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003458:	4622      	mov	r2, r4
 800345a:	462b      	mov	r3, r5
 800345c:	f04f 0000 	mov.w	r0, #0
 8003460:	f04f 0100 	mov.w	r1, #0
 8003464:	0159      	lsls	r1, r3, #5
 8003466:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800346a:	0150      	lsls	r0, r2, #5
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4621      	mov	r1, r4
 8003472:	1a51      	subs	r1, r2, r1
 8003474:	61b9      	str	r1, [r7, #24]
 8003476:	4629      	mov	r1, r5
 8003478:	eb63 0301 	sbc.w	r3, r3, r1
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800348a:	4659      	mov	r1, fp
 800348c:	018b      	lsls	r3, r1, #6
 800348e:	4651      	mov	r1, sl
 8003490:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003494:	4651      	mov	r1, sl
 8003496:	018a      	lsls	r2, r1, #6
 8003498:	4651      	mov	r1, sl
 800349a:	ebb2 0801 	subs.w	r8, r2, r1
 800349e:	4659      	mov	r1, fp
 80034a0:	eb63 0901 	sbc.w	r9, r3, r1
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034b8:	4690      	mov	r8, r2
 80034ba:	4699      	mov	r9, r3
 80034bc:	4623      	mov	r3, r4
 80034be:	eb18 0303 	adds.w	r3, r8, r3
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	462b      	mov	r3, r5
 80034c6:	eb49 0303 	adc.w	r3, r9, r3
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80034d8:	4629      	mov	r1, r5
 80034da:	024b      	lsls	r3, r1, #9
 80034dc:	4621      	mov	r1, r4
 80034de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034e2:	4621      	mov	r1, r4
 80034e4:	024a      	lsls	r2, r1, #9
 80034e6:	4610      	mov	r0, r2
 80034e8:	4619      	mov	r1, r3
 80034ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034ee:	2200      	movs	r2, #0
 80034f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80034f2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80034f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034f8:	f7fc feda 	bl	80002b0 <__aeabi_uldivmod>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4613      	mov	r3, r2
 8003502:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003506:	e065      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0x420>
 8003508:	40023800 	.word	0x40023800
 800350c:	00f42400 	.word	0x00f42400
 8003510:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003514:	4b3d      	ldr	r3, [pc, #244]	@ (800360c <HAL_RCC_GetSysClockFreq+0x458>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	099b      	lsrs	r3, r3, #6
 800351a:	2200      	movs	r2, #0
 800351c:	4618      	mov	r0, r3
 800351e:	4611      	mov	r1, r2
 8003520:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003524:	653b      	str	r3, [r7, #80]	@ 0x50
 8003526:	2300      	movs	r3, #0
 8003528:	657b      	str	r3, [r7, #84]	@ 0x54
 800352a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800352e:	4642      	mov	r2, r8
 8003530:	464b      	mov	r3, r9
 8003532:	f04f 0000 	mov.w	r0, #0
 8003536:	f04f 0100 	mov.w	r1, #0
 800353a:	0159      	lsls	r1, r3, #5
 800353c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003540:	0150      	lsls	r0, r2, #5
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4641      	mov	r1, r8
 8003548:	1a51      	subs	r1, r2, r1
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	4649      	mov	r1, r9
 800354e:	eb63 0301 	sbc.w	r3, r3, r1
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003560:	4659      	mov	r1, fp
 8003562:	018b      	lsls	r3, r1, #6
 8003564:	4651      	mov	r1, sl
 8003566:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800356a:	4651      	mov	r1, sl
 800356c:	018a      	lsls	r2, r1, #6
 800356e:	4651      	mov	r1, sl
 8003570:	1a54      	subs	r4, r2, r1
 8003572:	4659      	mov	r1, fp
 8003574:	eb63 0501 	sbc.w	r5, r3, r1
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	00eb      	lsls	r3, r5, #3
 8003582:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003586:	00e2      	lsls	r2, r4, #3
 8003588:	4614      	mov	r4, r2
 800358a:	461d      	mov	r5, r3
 800358c:	4643      	mov	r3, r8
 800358e:	18e3      	adds	r3, r4, r3
 8003590:	603b      	str	r3, [r7, #0]
 8003592:	464b      	mov	r3, r9
 8003594:	eb45 0303 	adc.w	r3, r5, r3
 8003598:	607b      	str	r3, [r7, #4]
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035a6:	4629      	mov	r1, r5
 80035a8:	028b      	lsls	r3, r1, #10
 80035aa:	4621      	mov	r1, r4
 80035ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035b0:	4621      	mov	r1, r4
 80035b2:	028a      	lsls	r2, r1, #10
 80035b4:	4610      	mov	r0, r2
 80035b6:	4619      	mov	r1, r3
 80035b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035bc:	2200      	movs	r2, #0
 80035be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035c0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80035c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80035c6:	f7fc fe73 	bl	80002b0 <__aeabi_uldivmod>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4613      	mov	r3, r2
 80035d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80035d4:	4b0d      	ldr	r3, [pc, #52]	@ (800360c <HAL_RCC_GetSysClockFreq+0x458>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	0f1b      	lsrs	r3, r3, #28
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80035e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80035e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80035ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035f2:	e003      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035f4:	4b06      	ldr	r3, [pc, #24]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x45c>)
 80035f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003600:	4618      	mov	r0, r3
 8003602:	37b8      	adds	r7, #184	@ 0xb8
 8003604:	46bd      	mov	sp, r7
 8003606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800
 8003610:	00f42400 	.word	0x00f42400

08003614 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e28d      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 8083 	beq.w	800373a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003634:	4b94      	ldr	r3, [pc, #592]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 030c 	and.w	r3, r3, #12
 800363c:	2b04      	cmp	r3, #4
 800363e:	d019      	beq.n	8003674 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003640:	4b91      	ldr	r3, [pc, #580]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 030c 	and.w	r3, r3, #12
        || \
 8003648:	2b08      	cmp	r3, #8
 800364a:	d106      	bne.n	800365a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800364c:	4b8e      	ldr	r3, [pc, #568]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003654:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003658:	d00c      	beq.n	8003674 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800365a:	4b8b      	ldr	r3, [pc, #556]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003662:	2b0c      	cmp	r3, #12
 8003664:	d112      	bne.n	800368c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003666:	4b88      	ldr	r3, [pc, #544]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800366e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003672:	d10b      	bne.n	800368c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003674:	4b84      	ldr	r3, [pc, #528]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d05b      	beq.n	8003738 <HAL_RCC_OscConfig+0x124>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d157      	bne.n	8003738 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e25a      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003694:	d106      	bne.n	80036a4 <HAL_RCC_OscConfig+0x90>
 8003696:	4b7c      	ldr	r3, [pc, #496]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a7b      	ldr	r2, [pc, #492]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 800369c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	e01d      	b.n	80036e0 <HAL_RCC_OscConfig+0xcc>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036ac:	d10c      	bne.n	80036c8 <HAL_RCC_OscConfig+0xb4>
 80036ae:	4b76      	ldr	r3, [pc, #472]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a75      	ldr	r2, [pc, #468]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 80036b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	4b73      	ldr	r3, [pc, #460]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a72      	ldr	r2, [pc, #456]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 80036c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	e00b      	b.n	80036e0 <HAL_RCC_OscConfig+0xcc>
 80036c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a6e      	ldr	r2, [pc, #440]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 80036ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	4b6c      	ldr	r3, [pc, #432]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a6b      	ldr	r2, [pc, #428]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 80036da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d013      	beq.n	8003710 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e8:	f7fd ff7c 	bl	80015e4 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f0:	f7fd ff78 	bl	80015e4 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b64      	cmp	r3, #100	@ 0x64
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e21f      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003702:	4b61      	ldr	r3, [pc, #388]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCC_OscConfig+0xdc>
 800370e:	e014      	b.n	800373a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003710:	f7fd ff68 	bl	80015e4 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003718:	f7fd ff64 	bl	80015e4 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b64      	cmp	r3, #100	@ 0x64
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e20b      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372a:	4b57      	ldr	r3, [pc, #348]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f0      	bne.n	8003718 <HAL_RCC_OscConfig+0x104>
 8003736:	e000      	b.n	800373a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d06f      	beq.n	8003826 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003746:	4b50      	ldr	r3, [pc, #320]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b00      	cmp	r3, #0
 8003750:	d017      	beq.n	8003782 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003752:	4b4d      	ldr	r3, [pc, #308]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 030c 	and.w	r3, r3, #12
        || \
 800375a:	2b08      	cmp	r3, #8
 800375c:	d105      	bne.n	800376a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800375e:	4b4a      	ldr	r3, [pc, #296]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800376a:	4b47      	ldr	r3, [pc, #284]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003772:	2b0c      	cmp	r3, #12
 8003774:	d11c      	bne.n	80037b0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003776:	4b44      	ldr	r3, [pc, #272]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d116      	bne.n	80037b0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003782:	4b41      	ldr	r3, [pc, #260]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <HAL_RCC_OscConfig+0x186>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d001      	beq.n	800379a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e1d3      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379a:	4b3b      	ldr	r3, [pc, #236]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	4937      	ldr	r1, [pc, #220]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ae:	e03a      	b.n	8003826 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d020      	beq.n	80037fa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b8:	4b34      	ldr	r3, [pc, #208]	@ (800388c <HAL_RCC_OscConfig+0x278>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037be:	f7fd ff11 	bl	80015e4 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c6:	f7fd ff0d 	bl	80015e4 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e1b4      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e4:	4b28      	ldr	r3, [pc, #160]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	4925      	ldr	r1, [pc, #148]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	600b      	str	r3, [r1, #0]
 80037f8:	e015      	b.n	8003826 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037fa:	4b24      	ldr	r3, [pc, #144]	@ (800388c <HAL_RCC_OscConfig+0x278>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7fd fef0 	bl	80015e4 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003808:	f7fd feec 	bl	80015e4 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e193      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800381a:	4b1b      	ldr	r3, [pc, #108]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d036      	beq.n	80038a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d016      	beq.n	8003868 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800383a:	4b15      	ldr	r3, [pc, #84]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 800383c:	2201      	movs	r2, #1
 800383e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003840:	f7fd fed0 	bl	80015e4 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003848:	f7fd fecc 	bl	80015e4 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e173      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385a:	4b0b      	ldr	r3, [pc, #44]	@ (8003888 <HAL_RCC_OscConfig+0x274>)
 800385c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0x234>
 8003866:	e01b      	b.n	80038a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003868:	4b09      	ldr	r3, [pc, #36]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386e:	f7fd feb9 	bl	80015e4 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003874:	e00e      	b.n	8003894 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003876:	f7fd feb5 	bl	80015e4 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d907      	bls.n	8003894 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e15c      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
 8003888:	40023800 	.word	0x40023800
 800388c:	42470000 	.word	0x42470000
 8003890:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003894:	4b8a      	ldr	r3, [pc, #552]	@ (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 8003896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1ea      	bne.n	8003876 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 8097 	beq.w	80039dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ae:	2300      	movs	r3, #0
 80038b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b2:	4b83      	ldr	r3, [pc, #524]	@ (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10f      	bne.n	80038de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038be:	2300      	movs	r3, #0
 80038c0:	60bb      	str	r3, [r7, #8]
 80038c2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 80038c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 80038c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80038ce:	4b7c      	ldr	r3, [pc, #496]	@ (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038da:	2301      	movs	r3, #1
 80038dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038de:	4b79      	ldr	r3, [pc, #484]	@ (8003ac4 <HAL_RCC_OscConfig+0x4b0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d118      	bne.n	800391c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ea:	4b76      	ldr	r3, [pc, #472]	@ (8003ac4 <HAL_RCC_OscConfig+0x4b0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a75      	ldr	r2, [pc, #468]	@ (8003ac4 <HAL_RCC_OscConfig+0x4b0>)
 80038f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f6:	f7fd fe75 	bl	80015e4 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fe:	f7fd fe71 	bl	80015e4 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e118      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003910:	4b6c      	ldr	r3, [pc, #432]	@ (8003ac4 <HAL_RCC_OscConfig+0x4b0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d106      	bne.n	8003932 <HAL_RCC_OscConfig+0x31e>
 8003924:	4b66      	ldr	r3, [pc, #408]	@ (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 8003926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003928:	4a65      	ldr	r2, [pc, #404]	@ (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003930:	e01c      	b.n	800396c <HAL_RCC_OscConfig+0x358>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b05      	cmp	r3, #5
 8003938:	d10c      	bne.n	8003954 <HAL_RCC_OscConfig+0x340>
 800393a:	4b61      	ldr	r3, [pc, #388]	@ (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 800393c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393e:	4a60      	ldr	r2, [pc, #384]	@ (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 8003940:	f043 0304 	orr.w	r3, r3, #4
 8003944:	6713      	str	r3, [r2, #112]	@ 0x70
 8003946:	4b5e      	ldr	r3, [pc, #376]	@ (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 8003948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800394a:	4a5d      	ldr	r2, [pc, #372]	@ (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	6713      	str	r3, [r2, #112]	@ 0x70
 8003952:	e00b      	b.n	800396c <HAL_RCC_OscConfig+0x358>
 8003954:	4b5a      	ldr	r3, [pc, #360]	@ (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 8003956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003958:	4a59      	ldr	r2, [pc, #356]	@ (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 800395a:	f023 0301 	bic.w	r3, r3, #1
 800395e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003960:	4b57      	ldr	r3, [pc, #348]	@ (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003964:	4a56      	ldr	r2, [pc, #344]	@ (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 8003966:	f023 0304 	bic.w	r3, r3, #4
 800396a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d015      	beq.n	80039a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003974:	f7fd fe36 	bl	80015e4 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397a:	e00a      	b.n	8003992 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397c:	f7fd fe32 	bl	80015e4 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800398a:	4293      	cmp	r3, r2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e0d7      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003992:	4b4b      	ldr	r3, [pc, #300]	@ (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 8003994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0ee      	beq.n	800397c <HAL_RCC_OscConfig+0x368>
 800399e:	e014      	b.n	80039ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a0:	f7fd fe20 	bl	80015e4 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a6:	e00a      	b.n	80039be <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a8:	f7fd fe1c 	bl	80015e4 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e0c1      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039be:	4b40      	ldr	r3, [pc, #256]	@ (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 80039c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1ee      	bne.n	80039a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039ca:	7dfb      	ldrb	r3, [r7, #23]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d105      	bne.n	80039dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 80039d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d4:	4a3a      	ldr	r2, [pc, #232]	@ (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 80039d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 80ad 	beq.w	8003b40 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039e6:	4b36      	ldr	r3, [pc, #216]	@ (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 030c 	and.w	r3, r3, #12
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d060      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d145      	bne.n	8003a86 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fa:	4b33      	ldr	r3, [pc, #204]	@ (8003ac8 <HAL_RCC_OscConfig+0x4b4>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a00:	f7fd fdf0 	bl	80015e4 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a08:	f7fd fdec 	bl	80015e4 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e093      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1a:	4b29      	ldr	r3, [pc, #164]	@ (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69da      	ldr	r2, [r3, #28]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a34:	019b      	lsls	r3, r3, #6
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3c:	085b      	lsrs	r3, r3, #1
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	041b      	lsls	r3, r3, #16
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a48:	061b      	lsls	r3, r3, #24
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a50:	071b      	lsls	r3, r3, #28
 8003a52:	491b      	ldr	r1, [pc, #108]	@ (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a58:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac8 <HAL_RCC_OscConfig+0x4b4>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5e:	f7fd fdc1 	bl	80015e4 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a66:	f7fd fdbd 	bl	80015e4 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e064      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a78:	4b11      	ldr	r3, [pc, #68]	@ (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0f0      	beq.n	8003a66 <HAL_RCC_OscConfig+0x452>
 8003a84:	e05c      	b.n	8003b40 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a86:	4b10      	ldr	r3, [pc, #64]	@ (8003ac8 <HAL_RCC_OscConfig+0x4b4>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8c:	f7fd fdaa 	bl	80015e4 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a94:	f7fd fda6 	bl	80015e4 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e04d      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa6:	4b06      	ldr	r3, [pc, #24]	@ (8003ac0 <HAL_RCC_OscConfig+0x4ac>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1f0      	bne.n	8003a94 <HAL_RCC_OscConfig+0x480>
 8003ab2:	e045      	b.n	8003b40 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d107      	bne.n	8003acc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e040      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	40007000 	.word	0x40007000
 8003ac8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003acc:	4b1f      	ldr	r3, [pc, #124]	@ (8003b4c <HAL_RCC_OscConfig+0x538>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d030      	beq.n	8003b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d129      	bne.n	8003b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d122      	bne.n	8003b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003afc:	4013      	ands	r3, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d119      	bne.n	8003b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b12:	085b      	lsrs	r3, r3, #1
 8003b14:	3b01      	subs	r3, #1
 8003b16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d10f      	bne.n	8003b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d107      	bne.n	8003b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b36:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d001      	beq.n	8003b40 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e000      	b.n	8003b42 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800

08003b50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e042      	b.n	8003be8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fd fc28 	bl	80013cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2224      	movs	r2, #36	@ 0x24
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f973 	bl	8003e80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ba8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695a      	ldr	r2, [r3, #20]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08a      	sub	sp, #40	@ 0x28
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	d175      	bne.n	8003cfc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <HAL_UART_Transmit+0x2c>
 8003c16:	88fb      	ldrh	r3, [r7, #6]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e06e      	b.n	8003cfe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2221      	movs	r2, #33	@ 0x21
 8003c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c2e:	f7fd fcd9 	bl	80015e4 <HAL_GetTick>
 8003c32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	88fa      	ldrh	r2, [r7, #6]
 8003c38:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	88fa      	ldrh	r2, [r7, #6]
 8003c3e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c48:	d108      	bne.n	8003c5c <HAL_UART_Transmit+0x6c>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d104      	bne.n	8003c5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	e003      	b.n	8003c64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c64:	e02e      	b.n	8003cc4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	2180      	movs	r1, #128	@ 0x80
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 f848 	bl	8003d06 <UART_WaitOnFlagUntilTimeout>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e03a      	b.n	8003cfe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10b      	bne.n	8003ca6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	3302      	adds	r3, #2
 8003ca2:	61bb      	str	r3, [r7, #24]
 8003ca4:	e007      	b.n	8003cb6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	781a      	ldrb	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1cb      	bne.n	8003c66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2140      	movs	r1, #64	@ 0x40
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 f814 	bl	8003d06 <UART_WaitOnFlagUntilTimeout>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e006      	b.n	8003cfe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	e000      	b.n	8003cfe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003cfc:	2302      	movs	r3, #2
  }
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3720      	adds	r7, #32
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b086      	sub	sp, #24
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	603b      	str	r3, [r7, #0]
 8003d12:	4613      	mov	r3, r2
 8003d14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d16:	e03b      	b.n	8003d90 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d1e:	d037      	beq.n	8003d90 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d20:	f7fd fc60 	bl	80015e4 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	6a3a      	ldr	r2, [r7, #32]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d302      	bcc.n	8003d36 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e03a      	b.n	8003db0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d023      	beq.n	8003d90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b80      	cmp	r3, #128	@ 0x80
 8003d4c:	d020      	beq.n	8003d90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b40      	cmp	r3, #64	@ 0x40
 8003d52:	d01d      	beq.n	8003d90 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d116      	bne.n	8003d90 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 f81d 	bl	8003db8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2208      	movs	r2, #8
 8003d82:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e00f      	b.n	8003db0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	bf0c      	ite	eq
 8003da0:	2301      	moveq	r3, #1
 8003da2:	2300      	movne	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	461a      	mov	r2, r3
 8003da8:	79fb      	ldrb	r3, [r7, #7]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d0b4      	beq.n	8003d18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b095      	sub	sp, #84	@ 0x54
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	330c      	adds	r3, #12
 8003dc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dca:	e853 3f00 	ldrex	r3, [r3]
 8003dce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	330c      	adds	r3, #12
 8003dde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003de0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003de6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003de8:	e841 2300 	strex	r3, r2, [r1]
 8003dec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e5      	bne.n	8003dc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3314      	adds	r3, #20
 8003dfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	e853 3f00 	ldrex	r3, [r3]
 8003e02:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f023 0301 	bic.w	r3, r3, #1
 8003e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3314      	adds	r3, #20
 8003e12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e1c:	e841 2300 	strex	r3, r2, [r1]
 8003e20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1e5      	bne.n	8003df4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d119      	bne.n	8003e64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	330c      	adds	r3, #12
 8003e36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	e853 3f00 	ldrex	r3, [r3]
 8003e3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f023 0310 	bic.w	r3, r3, #16
 8003e46:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	330c      	adds	r3, #12
 8003e4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e50:	61ba      	str	r2, [r7, #24]
 8003e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e54:	6979      	ldr	r1, [r7, #20]
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	e841 2300 	strex	r3, r2, [r1]
 8003e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1e5      	bne.n	8003e30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e72:	bf00      	nop
 8003e74:	3754      	adds	r7, #84	@ 0x54
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
	...

08003e80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e84:	b0c0      	sub	sp, #256	@ 0x100
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9c:	68d9      	ldr	r1, [r3, #12]
 8003e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	ea40 0301 	orr.w	r3, r0, r1
 8003ea8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ed8:	f021 010c 	bic.w	r1, r1, #12
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003ee6:	430b      	orrs	r3, r1
 8003ee8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003efa:	6999      	ldr	r1, [r3, #24]
 8003efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	ea40 0301 	orr.w	r3, r0, r1
 8003f06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	4b8f      	ldr	r3, [pc, #572]	@ (800414c <UART_SetConfig+0x2cc>)
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d005      	beq.n	8003f20 <UART_SetConfig+0xa0>
 8003f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	4b8d      	ldr	r3, [pc, #564]	@ (8004150 <UART_SetConfig+0x2d0>)
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d104      	bne.n	8003f2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f20:	f7ff f934 	bl	800318c <HAL_RCC_GetPCLK2Freq>
 8003f24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f28:	e003      	b.n	8003f32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f2a:	f7ff f91b 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
 8003f2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f3c:	f040 810c 	bne.w	8004158 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f44:	2200      	movs	r2, #0
 8003f46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f52:	4622      	mov	r2, r4
 8003f54:	462b      	mov	r3, r5
 8003f56:	1891      	adds	r1, r2, r2
 8003f58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f5a:	415b      	adcs	r3, r3
 8003f5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f62:	4621      	mov	r1, r4
 8003f64:	eb12 0801 	adds.w	r8, r2, r1
 8003f68:	4629      	mov	r1, r5
 8003f6a:	eb43 0901 	adc.w	r9, r3, r1
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f82:	4690      	mov	r8, r2
 8003f84:	4699      	mov	r9, r3
 8003f86:	4623      	mov	r3, r4
 8003f88:	eb18 0303 	adds.w	r3, r8, r3
 8003f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f90:	462b      	mov	r3, r5
 8003f92:	eb49 0303 	adc.w	r3, r9, r3
 8003f96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003fa6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003faa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003fae:	460b      	mov	r3, r1
 8003fb0:	18db      	adds	r3, r3, r3
 8003fb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	eb42 0303 	adc.w	r3, r2, r3
 8003fba:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003fc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003fc4:	f7fc f974 	bl	80002b0 <__aeabi_uldivmod>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4b61      	ldr	r3, [pc, #388]	@ (8004154 <UART_SetConfig+0x2d4>)
 8003fce:	fba3 2302 	umull	r2, r3, r3, r2
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	011c      	lsls	r4, r3, #4
 8003fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fe0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003fe4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003fe8:	4642      	mov	r2, r8
 8003fea:	464b      	mov	r3, r9
 8003fec:	1891      	adds	r1, r2, r2
 8003fee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ff0:	415b      	adcs	r3, r3
 8003ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ff4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ff8:	4641      	mov	r1, r8
 8003ffa:	eb12 0a01 	adds.w	sl, r2, r1
 8003ffe:	4649      	mov	r1, r9
 8004000:	eb43 0b01 	adc.w	fp, r3, r1
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004010:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004014:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004018:	4692      	mov	sl, r2
 800401a:	469b      	mov	fp, r3
 800401c:	4643      	mov	r3, r8
 800401e:	eb1a 0303 	adds.w	r3, sl, r3
 8004022:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004026:	464b      	mov	r3, r9
 8004028:	eb4b 0303 	adc.w	r3, fp, r3
 800402c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800403c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004040:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004044:	460b      	mov	r3, r1
 8004046:	18db      	adds	r3, r3, r3
 8004048:	643b      	str	r3, [r7, #64]	@ 0x40
 800404a:	4613      	mov	r3, r2
 800404c:	eb42 0303 	adc.w	r3, r2, r3
 8004050:	647b      	str	r3, [r7, #68]	@ 0x44
 8004052:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004056:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800405a:	f7fc f929 	bl	80002b0 <__aeabi_uldivmod>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	4611      	mov	r1, r2
 8004064:	4b3b      	ldr	r3, [pc, #236]	@ (8004154 <UART_SetConfig+0x2d4>)
 8004066:	fba3 2301 	umull	r2, r3, r3, r1
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	2264      	movs	r2, #100	@ 0x64
 800406e:	fb02 f303 	mul.w	r3, r2, r3
 8004072:	1acb      	subs	r3, r1, r3
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800407a:	4b36      	ldr	r3, [pc, #216]	@ (8004154 <UART_SetConfig+0x2d4>)
 800407c:	fba3 2302 	umull	r2, r3, r3, r2
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004088:	441c      	add	r4, r3
 800408a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800408e:	2200      	movs	r2, #0
 8004090:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004094:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004098:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800409c:	4642      	mov	r2, r8
 800409e:	464b      	mov	r3, r9
 80040a0:	1891      	adds	r1, r2, r2
 80040a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80040a4:	415b      	adcs	r3, r3
 80040a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80040ac:	4641      	mov	r1, r8
 80040ae:	1851      	adds	r1, r2, r1
 80040b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80040b2:	4649      	mov	r1, r9
 80040b4:	414b      	adcs	r3, r1
 80040b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80040b8:	f04f 0200 	mov.w	r2, #0
 80040bc:	f04f 0300 	mov.w	r3, #0
 80040c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80040c4:	4659      	mov	r1, fp
 80040c6:	00cb      	lsls	r3, r1, #3
 80040c8:	4651      	mov	r1, sl
 80040ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ce:	4651      	mov	r1, sl
 80040d0:	00ca      	lsls	r2, r1, #3
 80040d2:	4610      	mov	r0, r2
 80040d4:	4619      	mov	r1, r3
 80040d6:	4603      	mov	r3, r0
 80040d8:	4642      	mov	r2, r8
 80040da:	189b      	adds	r3, r3, r2
 80040dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040e0:	464b      	mov	r3, r9
 80040e2:	460a      	mov	r2, r1
 80040e4:	eb42 0303 	adc.w	r3, r2, r3
 80040e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80040f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80040fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004100:	460b      	mov	r3, r1
 8004102:	18db      	adds	r3, r3, r3
 8004104:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004106:	4613      	mov	r3, r2
 8004108:	eb42 0303 	adc.w	r3, r2, r3
 800410c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800410e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004112:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004116:	f7fc f8cb 	bl	80002b0 <__aeabi_uldivmod>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4b0d      	ldr	r3, [pc, #52]	@ (8004154 <UART_SetConfig+0x2d4>)
 8004120:	fba3 1302 	umull	r1, r3, r3, r2
 8004124:	095b      	lsrs	r3, r3, #5
 8004126:	2164      	movs	r1, #100	@ 0x64
 8004128:	fb01 f303 	mul.w	r3, r1, r3
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	3332      	adds	r3, #50	@ 0x32
 8004132:	4a08      	ldr	r2, [pc, #32]	@ (8004154 <UART_SetConfig+0x2d4>)
 8004134:	fba2 2303 	umull	r2, r3, r2, r3
 8004138:	095b      	lsrs	r3, r3, #5
 800413a:	f003 0207 	and.w	r2, r3, #7
 800413e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4422      	add	r2, r4
 8004146:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004148:	e106      	b.n	8004358 <UART_SetConfig+0x4d8>
 800414a:	bf00      	nop
 800414c:	40011000 	.word	0x40011000
 8004150:	40011400 	.word	0x40011400
 8004154:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800415c:	2200      	movs	r2, #0
 800415e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004162:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004166:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800416a:	4642      	mov	r2, r8
 800416c:	464b      	mov	r3, r9
 800416e:	1891      	adds	r1, r2, r2
 8004170:	6239      	str	r1, [r7, #32]
 8004172:	415b      	adcs	r3, r3
 8004174:	627b      	str	r3, [r7, #36]	@ 0x24
 8004176:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800417a:	4641      	mov	r1, r8
 800417c:	1854      	adds	r4, r2, r1
 800417e:	4649      	mov	r1, r9
 8004180:	eb43 0501 	adc.w	r5, r3, r1
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	00eb      	lsls	r3, r5, #3
 800418e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004192:	00e2      	lsls	r2, r4, #3
 8004194:	4614      	mov	r4, r2
 8004196:	461d      	mov	r5, r3
 8004198:	4643      	mov	r3, r8
 800419a:	18e3      	adds	r3, r4, r3
 800419c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041a0:	464b      	mov	r3, r9
 80041a2:	eb45 0303 	adc.w	r3, r5, r3
 80041a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80041c6:	4629      	mov	r1, r5
 80041c8:	008b      	lsls	r3, r1, #2
 80041ca:	4621      	mov	r1, r4
 80041cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041d0:	4621      	mov	r1, r4
 80041d2:	008a      	lsls	r2, r1, #2
 80041d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80041d8:	f7fc f86a 	bl	80002b0 <__aeabi_uldivmod>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	4b60      	ldr	r3, [pc, #384]	@ (8004364 <UART_SetConfig+0x4e4>)
 80041e2:	fba3 2302 	umull	r2, r3, r3, r2
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	011c      	lsls	r4, r3, #4
 80041ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041ee:	2200      	movs	r2, #0
 80041f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80041f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80041fc:	4642      	mov	r2, r8
 80041fe:	464b      	mov	r3, r9
 8004200:	1891      	adds	r1, r2, r2
 8004202:	61b9      	str	r1, [r7, #24]
 8004204:	415b      	adcs	r3, r3
 8004206:	61fb      	str	r3, [r7, #28]
 8004208:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800420c:	4641      	mov	r1, r8
 800420e:	1851      	adds	r1, r2, r1
 8004210:	6139      	str	r1, [r7, #16]
 8004212:	4649      	mov	r1, r9
 8004214:	414b      	adcs	r3, r1
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	f04f 0300 	mov.w	r3, #0
 8004220:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004224:	4659      	mov	r1, fp
 8004226:	00cb      	lsls	r3, r1, #3
 8004228:	4651      	mov	r1, sl
 800422a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800422e:	4651      	mov	r1, sl
 8004230:	00ca      	lsls	r2, r1, #3
 8004232:	4610      	mov	r0, r2
 8004234:	4619      	mov	r1, r3
 8004236:	4603      	mov	r3, r0
 8004238:	4642      	mov	r2, r8
 800423a:	189b      	adds	r3, r3, r2
 800423c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004240:	464b      	mov	r3, r9
 8004242:	460a      	mov	r2, r1
 8004244:	eb42 0303 	adc.w	r3, r2, r3
 8004248:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004256:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004264:	4649      	mov	r1, r9
 8004266:	008b      	lsls	r3, r1, #2
 8004268:	4641      	mov	r1, r8
 800426a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800426e:	4641      	mov	r1, r8
 8004270:	008a      	lsls	r2, r1, #2
 8004272:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004276:	f7fc f81b 	bl	80002b0 <__aeabi_uldivmod>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4611      	mov	r1, r2
 8004280:	4b38      	ldr	r3, [pc, #224]	@ (8004364 <UART_SetConfig+0x4e4>)
 8004282:	fba3 2301 	umull	r2, r3, r3, r1
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	2264      	movs	r2, #100	@ 0x64
 800428a:	fb02 f303 	mul.w	r3, r2, r3
 800428e:	1acb      	subs	r3, r1, r3
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	3332      	adds	r3, #50	@ 0x32
 8004294:	4a33      	ldr	r2, [pc, #204]	@ (8004364 <UART_SetConfig+0x4e4>)
 8004296:	fba2 2303 	umull	r2, r3, r2, r3
 800429a:	095b      	lsrs	r3, r3, #5
 800429c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042a0:	441c      	add	r4, r3
 80042a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042a6:	2200      	movs	r2, #0
 80042a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80042aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80042ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80042b0:	4642      	mov	r2, r8
 80042b2:	464b      	mov	r3, r9
 80042b4:	1891      	adds	r1, r2, r2
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	415b      	adcs	r3, r3
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042c0:	4641      	mov	r1, r8
 80042c2:	1851      	adds	r1, r2, r1
 80042c4:	6039      	str	r1, [r7, #0]
 80042c6:	4649      	mov	r1, r9
 80042c8:	414b      	adcs	r3, r1
 80042ca:	607b      	str	r3, [r7, #4]
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042d8:	4659      	mov	r1, fp
 80042da:	00cb      	lsls	r3, r1, #3
 80042dc:	4651      	mov	r1, sl
 80042de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042e2:	4651      	mov	r1, sl
 80042e4:	00ca      	lsls	r2, r1, #3
 80042e6:	4610      	mov	r0, r2
 80042e8:	4619      	mov	r1, r3
 80042ea:	4603      	mov	r3, r0
 80042ec:	4642      	mov	r2, r8
 80042ee:	189b      	adds	r3, r3, r2
 80042f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042f2:	464b      	mov	r3, r9
 80042f4:	460a      	mov	r2, r1
 80042f6:	eb42 0303 	adc.w	r3, r2, r3
 80042fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	663b      	str	r3, [r7, #96]	@ 0x60
 8004306:	667a      	str	r2, [r7, #100]	@ 0x64
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004314:	4649      	mov	r1, r9
 8004316:	008b      	lsls	r3, r1, #2
 8004318:	4641      	mov	r1, r8
 800431a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800431e:	4641      	mov	r1, r8
 8004320:	008a      	lsls	r2, r1, #2
 8004322:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004326:	f7fb ffc3 	bl	80002b0 <__aeabi_uldivmod>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4b0d      	ldr	r3, [pc, #52]	@ (8004364 <UART_SetConfig+0x4e4>)
 8004330:	fba3 1302 	umull	r1, r3, r3, r2
 8004334:	095b      	lsrs	r3, r3, #5
 8004336:	2164      	movs	r1, #100	@ 0x64
 8004338:	fb01 f303 	mul.w	r3, r1, r3
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	3332      	adds	r3, #50	@ 0x32
 8004342:	4a08      	ldr	r2, [pc, #32]	@ (8004364 <UART_SetConfig+0x4e4>)
 8004344:	fba2 2303 	umull	r2, r3, r2, r3
 8004348:	095b      	lsrs	r3, r3, #5
 800434a:	f003 020f 	and.w	r2, r3, #15
 800434e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4422      	add	r2, r4
 8004356:	609a      	str	r2, [r3, #8]
}
 8004358:	bf00      	nop
 800435a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800435e:	46bd      	mov	sp, r7
 8004360:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004364:	51eb851f 	.word	0x51eb851f

08004368 <malloc>:
 8004368:	4b02      	ldr	r3, [pc, #8]	@ (8004374 <malloc+0xc>)
 800436a:	4601      	mov	r1, r0
 800436c:	6818      	ldr	r0, [r3, #0]
 800436e:	f000 b82d 	b.w	80043cc <_malloc_r>
 8004372:	bf00      	nop
 8004374:	20000018 	.word	0x20000018

08004378 <free>:
 8004378:	4b02      	ldr	r3, [pc, #8]	@ (8004384 <free+0xc>)
 800437a:	4601      	mov	r1, r0
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	f000 bb47 	b.w	8004a10 <_free_r>
 8004382:	bf00      	nop
 8004384:	20000018 	.word	0x20000018

08004388 <sbrk_aligned>:
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	4e0f      	ldr	r6, [pc, #60]	@ (80043c8 <sbrk_aligned+0x40>)
 800438c:	460c      	mov	r4, r1
 800438e:	6831      	ldr	r1, [r6, #0]
 8004390:	4605      	mov	r5, r0
 8004392:	b911      	cbnz	r1, 800439a <sbrk_aligned+0x12>
 8004394:	f000 faec 	bl	8004970 <_sbrk_r>
 8004398:	6030      	str	r0, [r6, #0]
 800439a:	4621      	mov	r1, r4
 800439c:	4628      	mov	r0, r5
 800439e:	f000 fae7 	bl	8004970 <_sbrk_r>
 80043a2:	1c43      	adds	r3, r0, #1
 80043a4:	d103      	bne.n	80043ae <sbrk_aligned+0x26>
 80043a6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80043aa:	4620      	mov	r0, r4
 80043ac:	bd70      	pop	{r4, r5, r6, pc}
 80043ae:	1cc4      	adds	r4, r0, #3
 80043b0:	f024 0403 	bic.w	r4, r4, #3
 80043b4:	42a0      	cmp	r0, r4
 80043b6:	d0f8      	beq.n	80043aa <sbrk_aligned+0x22>
 80043b8:	1a21      	subs	r1, r4, r0
 80043ba:	4628      	mov	r0, r5
 80043bc:	f000 fad8 	bl	8004970 <_sbrk_r>
 80043c0:	3001      	adds	r0, #1
 80043c2:	d1f2      	bne.n	80043aa <sbrk_aligned+0x22>
 80043c4:	e7ef      	b.n	80043a6 <sbrk_aligned+0x1e>
 80043c6:	bf00      	nop
 80043c8:	200001b8 	.word	0x200001b8

080043cc <_malloc_r>:
 80043cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043d0:	1ccd      	adds	r5, r1, #3
 80043d2:	f025 0503 	bic.w	r5, r5, #3
 80043d6:	3508      	adds	r5, #8
 80043d8:	2d0c      	cmp	r5, #12
 80043da:	bf38      	it	cc
 80043dc:	250c      	movcc	r5, #12
 80043de:	2d00      	cmp	r5, #0
 80043e0:	4606      	mov	r6, r0
 80043e2:	db01      	blt.n	80043e8 <_malloc_r+0x1c>
 80043e4:	42a9      	cmp	r1, r5
 80043e6:	d904      	bls.n	80043f2 <_malloc_r+0x26>
 80043e8:	230c      	movs	r3, #12
 80043ea:	6033      	str	r3, [r6, #0]
 80043ec:	2000      	movs	r0, #0
 80043ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80044c8 <_malloc_r+0xfc>
 80043f6:	f000 f869 	bl	80044cc <__malloc_lock>
 80043fa:	f8d8 3000 	ldr.w	r3, [r8]
 80043fe:	461c      	mov	r4, r3
 8004400:	bb44      	cbnz	r4, 8004454 <_malloc_r+0x88>
 8004402:	4629      	mov	r1, r5
 8004404:	4630      	mov	r0, r6
 8004406:	f7ff ffbf 	bl	8004388 <sbrk_aligned>
 800440a:	1c43      	adds	r3, r0, #1
 800440c:	4604      	mov	r4, r0
 800440e:	d158      	bne.n	80044c2 <_malloc_r+0xf6>
 8004410:	f8d8 4000 	ldr.w	r4, [r8]
 8004414:	4627      	mov	r7, r4
 8004416:	2f00      	cmp	r7, #0
 8004418:	d143      	bne.n	80044a2 <_malloc_r+0xd6>
 800441a:	2c00      	cmp	r4, #0
 800441c:	d04b      	beq.n	80044b6 <_malloc_r+0xea>
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	4639      	mov	r1, r7
 8004422:	4630      	mov	r0, r6
 8004424:	eb04 0903 	add.w	r9, r4, r3
 8004428:	f000 faa2 	bl	8004970 <_sbrk_r>
 800442c:	4581      	cmp	r9, r0
 800442e:	d142      	bne.n	80044b6 <_malloc_r+0xea>
 8004430:	6821      	ldr	r1, [r4, #0]
 8004432:	1a6d      	subs	r5, r5, r1
 8004434:	4629      	mov	r1, r5
 8004436:	4630      	mov	r0, r6
 8004438:	f7ff ffa6 	bl	8004388 <sbrk_aligned>
 800443c:	3001      	adds	r0, #1
 800443e:	d03a      	beq.n	80044b6 <_malloc_r+0xea>
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	442b      	add	r3, r5
 8004444:	6023      	str	r3, [r4, #0]
 8004446:	f8d8 3000 	ldr.w	r3, [r8]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	bb62      	cbnz	r2, 80044a8 <_malloc_r+0xdc>
 800444e:	f8c8 7000 	str.w	r7, [r8]
 8004452:	e00f      	b.n	8004474 <_malloc_r+0xa8>
 8004454:	6822      	ldr	r2, [r4, #0]
 8004456:	1b52      	subs	r2, r2, r5
 8004458:	d420      	bmi.n	800449c <_malloc_r+0xd0>
 800445a:	2a0b      	cmp	r2, #11
 800445c:	d917      	bls.n	800448e <_malloc_r+0xc2>
 800445e:	1961      	adds	r1, r4, r5
 8004460:	42a3      	cmp	r3, r4
 8004462:	6025      	str	r5, [r4, #0]
 8004464:	bf18      	it	ne
 8004466:	6059      	strne	r1, [r3, #4]
 8004468:	6863      	ldr	r3, [r4, #4]
 800446a:	bf08      	it	eq
 800446c:	f8c8 1000 	streq.w	r1, [r8]
 8004470:	5162      	str	r2, [r4, r5]
 8004472:	604b      	str	r3, [r1, #4]
 8004474:	4630      	mov	r0, r6
 8004476:	f000 f82f 	bl	80044d8 <__malloc_unlock>
 800447a:	f104 000b 	add.w	r0, r4, #11
 800447e:	1d23      	adds	r3, r4, #4
 8004480:	f020 0007 	bic.w	r0, r0, #7
 8004484:	1ac2      	subs	r2, r0, r3
 8004486:	bf1c      	itt	ne
 8004488:	1a1b      	subne	r3, r3, r0
 800448a:	50a3      	strne	r3, [r4, r2]
 800448c:	e7af      	b.n	80043ee <_malloc_r+0x22>
 800448e:	6862      	ldr	r2, [r4, #4]
 8004490:	42a3      	cmp	r3, r4
 8004492:	bf0c      	ite	eq
 8004494:	f8c8 2000 	streq.w	r2, [r8]
 8004498:	605a      	strne	r2, [r3, #4]
 800449a:	e7eb      	b.n	8004474 <_malloc_r+0xa8>
 800449c:	4623      	mov	r3, r4
 800449e:	6864      	ldr	r4, [r4, #4]
 80044a0:	e7ae      	b.n	8004400 <_malloc_r+0x34>
 80044a2:	463c      	mov	r4, r7
 80044a4:	687f      	ldr	r7, [r7, #4]
 80044a6:	e7b6      	b.n	8004416 <_malloc_r+0x4a>
 80044a8:	461a      	mov	r2, r3
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	42a3      	cmp	r3, r4
 80044ae:	d1fb      	bne.n	80044a8 <_malloc_r+0xdc>
 80044b0:	2300      	movs	r3, #0
 80044b2:	6053      	str	r3, [r2, #4]
 80044b4:	e7de      	b.n	8004474 <_malloc_r+0xa8>
 80044b6:	230c      	movs	r3, #12
 80044b8:	6033      	str	r3, [r6, #0]
 80044ba:	4630      	mov	r0, r6
 80044bc:	f000 f80c 	bl	80044d8 <__malloc_unlock>
 80044c0:	e794      	b.n	80043ec <_malloc_r+0x20>
 80044c2:	6005      	str	r5, [r0, #0]
 80044c4:	e7d6      	b.n	8004474 <_malloc_r+0xa8>
 80044c6:	bf00      	nop
 80044c8:	200001bc 	.word	0x200001bc

080044cc <__malloc_lock>:
 80044cc:	4801      	ldr	r0, [pc, #4]	@ (80044d4 <__malloc_lock+0x8>)
 80044ce:	f000 ba9c 	b.w	8004a0a <__retarget_lock_acquire_recursive>
 80044d2:	bf00      	nop
 80044d4:	20000300 	.word	0x20000300

080044d8 <__malloc_unlock>:
 80044d8:	4801      	ldr	r0, [pc, #4]	@ (80044e0 <__malloc_unlock+0x8>)
 80044da:	f000 ba97 	b.w	8004a0c <__retarget_lock_release_recursive>
 80044de:	bf00      	nop
 80044e0:	20000300 	.word	0x20000300

080044e4 <std>:
 80044e4:	2300      	movs	r3, #0
 80044e6:	b510      	push	{r4, lr}
 80044e8:	4604      	mov	r4, r0
 80044ea:	e9c0 3300 	strd	r3, r3, [r0]
 80044ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044f2:	6083      	str	r3, [r0, #8]
 80044f4:	8181      	strh	r1, [r0, #12]
 80044f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80044f8:	81c2      	strh	r2, [r0, #14]
 80044fa:	6183      	str	r3, [r0, #24]
 80044fc:	4619      	mov	r1, r3
 80044fe:	2208      	movs	r2, #8
 8004500:	305c      	adds	r0, #92	@ 0x5c
 8004502:	f000 f9f9 	bl	80048f8 <memset>
 8004506:	4b0d      	ldr	r3, [pc, #52]	@ (800453c <std+0x58>)
 8004508:	6263      	str	r3, [r4, #36]	@ 0x24
 800450a:	4b0d      	ldr	r3, [pc, #52]	@ (8004540 <std+0x5c>)
 800450c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800450e:	4b0d      	ldr	r3, [pc, #52]	@ (8004544 <std+0x60>)
 8004510:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004512:	4b0d      	ldr	r3, [pc, #52]	@ (8004548 <std+0x64>)
 8004514:	6323      	str	r3, [r4, #48]	@ 0x30
 8004516:	4b0d      	ldr	r3, [pc, #52]	@ (800454c <std+0x68>)
 8004518:	6224      	str	r4, [r4, #32]
 800451a:	429c      	cmp	r4, r3
 800451c:	d006      	beq.n	800452c <std+0x48>
 800451e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004522:	4294      	cmp	r4, r2
 8004524:	d002      	beq.n	800452c <std+0x48>
 8004526:	33d0      	adds	r3, #208	@ 0xd0
 8004528:	429c      	cmp	r4, r3
 800452a:	d105      	bne.n	8004538 <std+0x54>
 800452c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004534:	f000 ba68 	b.w	8004a08 <__retarget_lock_init_recursive>
 8004538:	bd10      	pop	{r4, pc}
 800453a:	bf00      	nop
 800453c:	08004749 	.word	0x08004749
 8004540:	0800476b 	.word	0x0800476b
 8004544:	080047a3 	.word	0x080047a3
 8004548:	080047c7 	.word	0x080047c7
 800454c:	200001c0 	.word	0x200001c0

08004550 <stdio_exit_handler>:
 8004550:	4a02      	ldr	r2, [pc, #8]	@ (800455c <stdio_exit_handler+0xc>)
 8004552:	4903      	ldr	r1, [pc, #12]	@ (8004560 <stdio_exit_handler+0x10>)
 8004554:	4803      	ldr	r0, [pc, #12]	@ (8004564 <stdio_exit_handler+0x14>)
 8004556:	f000 b869 	b.w	800462c <_fwalk_sglue>
 800455a:	bf00      	nop
 800455c:	2000000c 	.word	0x2000000c
 8004560:	0800514d 	.word	0x0800514d
 8004564:	2000001c 	.word	0x2000001c

08004568 <cleanup_stdio>:
 8004568:	6841      	ldr	r1, [r0, #4]
 800456a:	4b0c      	ldr	r3, [pc, #48]	@ (800459c <cleanup_stdio+0x34>)
 800456c:	4299      	cmp	r1, r3
 800456e:	b510      	push	{r4, lr}
 8004570:	4604      	mov	r4, r0
 8004572:	d001      	beq.n	8004578 <cleanup_stdio+0x10>
 8004574:	f000 fdea 	bl	800514c <_fflush_r>
 8004578:	68a1      	ldr	r1, [r4, #8]
 800457a:	4b09      	ldr	r3, [pc, #36]	@ (80045a0 <cleanup_stdio+0x38>)
 800457c:	4299      	cmp	r1, r3
 800457e:	d002      	beq.n	8004586 <cleanup_stdio+0x1e>
 8004580:	4620      	mov	r0, r4
 8004582:	f000 fde3 	bl	800514c <_fflush_r>
 8004586:	68e1      	ldr	r1, [r4, #12]
 8004588:	4b06      	ldr	r3, [pc, #24]	@ (80045a4 <cleanup_stdio+0x3c>)
 800458a:	4299      	cmp	r1, r3
 800458c:	d004      	beq.n	8004598 <cleanup_stdio+0x30>
 800458e:	4620      	mov	r0, r4
 8004590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004594:	f000 bdda 	b.w	800514c <_fflush_r>
 8004598:	bd10      	pop	{r4, pc}
 800459a:	bf00      	nop
 800459c:	200001c0 	.word	0x200001c0
 80045a0:	20000228 	.word	0x20000228
 80045a4:	20000290 	.word	0x20000290

080045a8 <global_stdio_init.part.0>:
 80045a8:	b510      	push	{r4, lr}
 80045aa:	4b0b      	ldr	r3, [pc, #44]	@ (80045d8 <global_stdio_init.part.0+0x30>)
 80045ac:	4c0b      	ldr	r4, [pc, #44]	@ (80045dc <global_stdio_init.part.0+0x34>)
 80045ae:	4a0c      	ldr	r2, [pc, #48]	@ (80045e0 <global_stdio_init.part.0+0x38>)
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	4620      	mov	r0, r4
 80045b4:	2200      	movs	r2, #0
 80045b6:	2104      	movs	r1, #4
 80045b8:	f7ff ff94 	bl	80044e4 <std>
 80045bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80045c0:	2201      	movs	r2, #1
 80045c2:	2109      	movs	r1, #9
 80045c4:	f7ff ff8e 	bl	80044e4 <std>
 80045c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80045cc:	2202      	movs	r2, #2
 80045ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045d2:	2112      	movs	r1, #18
 80045d4:	f7ff bf86 	b.w	80044e4 <std>
 80045d8:	200002f8 	.word	0x200002f8
 80045dc:	200001c0 	.word	0x200001c0
 80045e0:	08004551 	.word	0x08004551

080045e4 <__sfp_lock_acquire>:
 80045e4:	4801      	ldr	r0, [pc, #4]	@ (80045ec <__sfp_lock_acquire+0x8>)
 80045e6:	f000 ba10 	b.w	8004a0a <__retarget_lock_acquire_recursive>
 80045ea:	bf00      	nop
 80045ec:	20000301 	.word	0x20000301

080045f0 <__sfp_lock_release>:
 80045f0:	4801      	ldr	r0, [pc, #4]	@ (80045f8 <__sfp_lock_release+0x8>)
 80045f2:	f000 ba0b 	b.w	8004a0c <__retarget_lock_release_recursive>
 80045f6:	bf00      	nop
 80045f8:	20000301 	.word	0x20000301

080045fc <__sinit>:
 80045fc:	b510      	push	{r4, lr}
 80045fe:	4604      	mov	r4, r0
 8004600:	f7ff fff0 	bl	80045e4 <__sfp_lock_acquire>
 8004604:	6a23      	ldr	r3, [r4, #32]
 8004606:	b11b      	cbz	r3, 8004610 <__sinit+0x14>
 8004608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800460c:	f7ff bff0 	b.w	80045f0 <__sfp_lock_release>
 8004610:	4b04      	ldr	r3, [pc, #16]	@ (8004624 <__sinit+0x28>)
 8004612:	6223      	str	r3, [r4, #32]
 8004614:	4b04      	ldr	r3, [pc, #16]	@ (8004628 <__sinit+0x2c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1f5      	bne.n	8004608 <__sinit+0xc>
 800461c:	f7ff ffc4 	bl	80045a8 <global_stdio_init.part.0>
 8004620:	e7f2      	b.n	8004608 <__sinit+0xc>
 8004622:	bf00      	nop
 8004624:	08004569 	.word	0x08004569
 8004628:	200002f8 	.word	0x200002f8

0800462c <_fwalk_sglue>:
 800462c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004630:	4607      	mov	r7, r0
 8004632:	4688      	mov	r8, r1
 8004634:	4614      	mov	r4, r2
 8004636:	2600      	movs	r6, #0
 8004638:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800463c:	f1b9 0901 	subs.w	r9, r9, #1
 8004640:	d505      	bpl.n	800464e <_fwalk_sglue+0x22>
 8004642:	6824      	ldr	r4, [r4, #0]
 8004644:	2c00      	cmp	r4, #0
 8004646:	d1f7      	bne.n	8004638 <_fwalk_sglue+0xc>
 8004648:	4630      	mov	r0, r6
 800464a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800464e:	89ab      	ldrh	r3, [r5, #12]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d907      	bls.n	8004664 <_fwalk_sglue+0x38>
 8004654:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004658:	3301      	adds	r3, #1
 800465a:	d003      	beq.n	8004664 <_fwalk_sglue+0x38>
 800465c:	4629      	mov	r1, r5
 800465e:	4638      	mov	r0, r7
 8004660:	47c0      	blx	r8
 8004662:	4306      	orrs	r6, r0
 8004664:	3568      	adds	r5, #104	@ 0x68
 8004666:	e7e9      	b.n	800463c <_fwalk_sglue+0x10>

08004668 <iprintf>:
 8004668:	b40f      	push	{r0, r1, r2, r3}
 800466a:	b507      	push	{r0, r1, r2, lr}
 800466c:	4906      	ldr	r1, [pc, #24]	@ (8004688 <iprintf+0x20>)
 800466e:	ab04      	add	r3, sp, #16
 8004670:	6808      	ldr	r0, [r1, #0]
 8004672:	f853 2b04 	ldr.w	r2, [r3], #4
 8004676:	6881      	ldr	r1, [r0, #8]
 8004678:	9301      	str	r3, [sp, #4]
 800467a:	f000 fa3d 	bl	8004af8 <_vfiprintf_r>
 800467e:	b003      	add	sp, #12
 8004680:	f85d eb04 	ldr.w	lr, [sp], #4
 8004684:	b004      	add	sp, #16
 8004686:	4770      	bx	lr
 8004688:	20000018 	.word	0x20000018

0800468c <_puts_r>:
 800468c:	6a03      	ldr	r3, [r0, #32]
 800468e:	b570      	push	{r4, r5, r6, lr}
 8004690:	6884      	ldr	r4, [r0, #8]
 8004692:	4605      	mov	r5, r0
 8004694:	460e      	mov	r6, r1
 8004696:	b90b      	cbnz	r3, 800469c <_puts_r+0x10>
 8004698:	f7ff ffb0 	bl	80045fc <__sinit>
 800469c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800469e:	07db      	lsls	r3, r3, #31
 80046a0:	d405      	bmi.n	80046ae <_puts_r+0x22>
 80046a2:	89a3      	ldrh	r3, [r4, #12]
 80046a4:	0598      	lsls	r0, r3, #22
 80046a6:	d402      	bmi.n	80046ae <_puts_r+0x22>
 80046a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046aa:	f000 f9ae 	bl	8004a0a <__retarget_lock_acquire_recursive>
 80046ae:	89a3      	ldrh	r3, [r4, #12]
 80046b0:	0719      	lsls	r1, r3, #28
 80046b2:	d502      	bpl.n	80046ba <_puts_r+0x2e>
 80046b4:	6923      	ldr	r3, [r4, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d135      	bne.n	8004726 <_puts_r+0x9a>
 80046ba:	4621      	mov	r1, r4
 80046bc:	4628      	mov	r0, r5
 80046be:	f000 f8c5 	bl	800484c <__swsetup_r>
 80046c2:	b380      	cbz	r0, 8004726 <_puts_r+0x9a>
 80046c4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80046c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046ca:	07da      	lsls	r2, r3, #31
 80046cc:	d405      	bmi.n	80046da <_puts_r+0x4e>
 80046ce:	89a3      	ldrh	r3, [r4, #12]
 80046d0:	059b      	lsls	r3, r3, #22
 80046d2:	d402      	bmi.n	80046da <_puts_r+0x4e>
 80046d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046d6:	f000 f999 	bl	8004a0c <__retarget_lock_release_recursive>
 80046da:	4628      	mov	r0, r5
 80046dc:	bd70      	pop	{r4, r5, r6, pc}
 80046de:	2b00      	cmp	r3, #0
 80046e0:	da04      	bge.n	80046ec <_puts_r+0x60>
 80046e2:	69a2      	ldr	r2, [r4, #24]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	dc17      	bgt.n	8004718 <_puts_r+0x8c>
 80046e8:	290a      	cmp	r1, #10
 80046ea:	d015      	beq.n	8004718 <_puts_r+0x8c>
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	6022      	str	r2, [r4, #0]
 80046f2:	7019      	strb	r1, [r3, #0]
 80046f4:	68a3      	ldr	r3, [r4, #8]
 80046f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80046fa:	3b01      	subs	r3, #1
 80046fc:	60a3      	str	r3, [r4, #8]
 80046fe:	2900      	cmp	r1, #0
 8004700:	d1ed      	bne.n	80046de <_puts_r+0x52>
 8004702:	2b00      	cmp	r3, #0
 8004704:	da11      	bge.n	800472a <_puts_r+0x9e>
 8004706:	4622      	mov	r2, r4
 8004708:	210a      	movs	r1, #10
 800470a:	4628      	mov	r0, r5
 800470c:	f000 f85f 	bl	80047ce <__swbuf_r>
 8004710:	3001      	adds	r0, #1
 8004712:	d0d7      	beq.n	80046c4 <_puts_r+0x38>
 8004714:	250a      	movs	r5, #10
 8004716:	e7d7      	b.n	80046c8 <_puts_r+0x3c>
 8004718:	4622      	mov	r2, r4
 800471a:	4628      	mov	r0, r5
 800471c:	f000 f857 	bl	80047ce <__swbuf_r>
 8004720:	3001      	adds	r0, #1
 8004722:	d1e7      	bne.n	80046f4 <_puts_r+0x68>
 8004724:	e7ce      	b.n	80046c4 <_puts_r+0x38>
 8004726:	3e01      	subs	r6, #1
 8004728:	e7e4      	b.n	80046f4 <_puts_r+0x68>
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	6022      	str	r2, [r4, #0]
 8004730:	220a      	movs	r2, #10
 8004732:	701a      	strb	r2, [r3, #0]
 8004734:	e7ee      	b.n	8004714 <_puts_r+0x88>
	...

08004738 <puts>:
 8004738:	4b02      	ldr	r3, [pc, #8]	@ (8004744 <puts+0xc>)
 800473a:	4601      	mov	r1, r0
 800473c:	6818      	ldr	r0, [r3, #0]
 800473e:	f7ff bfa5 	b.w	800468c <_puts_r>
 8004742:	bf00      	nop
 8004744:	20000018 	.word	0x20000018

08004748 <__sread>:
 8004748:	b510      	push	{r4, lr}
 800474a:	460c      	mov	r4, r1
 800474c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004750:	f000 f8fc 	bl	800494c <_read_r>
 8004754:	2800      	cmp	r0, #0
 8004756:	bfab      	itete	ge
 8004758:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800475a:	89a3      	ldrhlt	r3, [r4, #12]
 800475c:	181b      	addge	r3, r3, r0
 800475e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004762:	bfac      	ite	ge
 8004764:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004766:	81a3      	strhlt	r3, [r4, #12]
 8004768:	bd10      	pop	{r4, pc}

0800476a <__swrite>:
 800476a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800476e:	461f      	mov	r7, r3
 8004770:	898b      	ldrh	r3, [r1, #12]
 8004772:	05db      	lsls	r3, r3, #23
 8004774:	4605      	mov	r5, r0
 8004776:	460c      	mov	r4, r1
 8004778:	4616      	mov	r6, r2
 800477a:	d505      	bpl.n	8004788 <__swrite+0x1e>
 800477c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004780:	2302      	movs	r3, #2
 8004782:	2200      	movs	r2, #0
 8004784:	f000 f8d0 	bl	8004928 <_lseek_r>
 8004788:	89a3      	ldrh	r3, [r4, #12]
 800478a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800478e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004792:	81a3      	strh	r3, [r4, #12]
 8004794:	4632      	mov	r2, r6
 8004796:	463b      	mov	r3, r7
 8004798:	4628      	mov	r0, r5
 800479a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800479e:	f000 b8f7 	b.w	8004990 <_write_r>

080047a2 <__sseek>:
 80047a2:	b510      	push	{r4, lr}
 80047a4:	460c      	mov	r4, r1
 80047a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047aa:	f000 f8bd 	bl	8004928 <_lseek_r>
 80047ae:	1c43      	adds	r3, r0, #1
 80047b0:	89a3      	ldrh	r3, [r4, #12]
 80047b2:	bf15      	itete	ne
 80047b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80047b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80047ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80047be:	81a3      	strheq	r3, [r4, #12]
 80047c0:	bf18      	it	ne
 80047c2:	81a3      	strhne	r3, [r4, #12]
 80047c4:	bd10      	pop	{r4, pc}

080047c6 <__sclose>:
 80047c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ca:	f000 b89d 	b.w	8004908 <_close_r>

080047ce <__swbuf_r>:
 80047ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d0:	460e      	mov	r6, r1
 80047d2:	4614      	mov	r4, r2
 80047d4:	4605      	mov	r5, r0
 80047d6:	b118      	cbz	r0, 80047e0 <__swbuf_r+0x12>
 80047d8:	6a03      	ldr	r3, [r0, #32]
 80047da:	b90b      	cbnz	r3, 80047e0 <__swbuf_r+0x12>
 80047dc:	f7ff ff0e 	bl	80045fc <__sinit>
 80047e0:	69a3      	ldr	r3, [r4, #24]
 80047e2:	60a3      	str	r3, [r4, #8]
 80047e4:	89a3      	ldrh	r3, [r4, #12]
 80047e6:	071a      	lsls	r2, r3, #28
 80047e8:	d501      	bpl.n	80047ee <__swbuf_r+0x20>
 80047ea:	6923      	ldr	r3, [r4, #16]
 80047ec:	b943      	cbnz	r3, 8004800 <__swbuf_r+0x32>
 80047ee:	4621      	mov	r1, r4
 80047f0:	4628      	mov	r0, r5
 80047f2:	f000 f82b 	bl	800484c <__swsetup_r>
 80047f6:	b118      	cbz	r0, 8004800 <__swbuf_r+0x32>
 80047f8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80047fc:	4638      	mov	r0, r7
 80047fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	6922      	ldr	r2, [r4, #16]
 8004804:	1a98      	subs	r0, r3, r2
 8004806:	6963      	ldr	r3, [r4, #20]
 8004808:	b2f6      	uxtb	r6, r6
 800480a:	4283      	cmp	r3, r0
 800480c:	4637      	mov	r7, r6
 800480e:	dc05      	bgt.n	800481c <__swbuf_r+0x4e>
 8004810:	4621      	mov	r1, r4
 8004812:	4628      	mov	r0, r5
 8004814:	f000 fc9a 	bl	800514c <_fflush_r>
 8004818:	2800      	cmp	r0, #0
 800481a:	d1ed      	bne.n	80047f8 <__swbuf_r+0x2a>
 800481c:	68a3      	ldr	r3, [r4, #8]
 800481e:	3b01      	subs	r3, #1
 8004820:	60a3      	str	r3, [r4, #8]
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	6022      	str	r2, [r4, #0]
 8004828:	701e      	strb	r6, [r3, #0]
 800482a:	6962      	ldr	r2, [r4, #20]
 800482c:	1c43      	adds	r3, r0, #1
 800482e:	429a      	cmp	r2, r3
 8004830:	d004      	beq.n	800483c <__swbuf_r+0x6e>
 8004832:	89a3      	ldrh	r3, [r4, #12]
 8004834:	07db      	lsls	r3, r3, #31
 8004836:	d5e1      	bpl.n	80047fc <__swbuf_r+0x2e>
 8004838:	2e0a      	cmp	r6, #10
 800483a:	d1df      	bne.n	80047fc <__swbuf_r+0x2e>
 800483c:	4621      	mov	r1, r4
 800483e:	4628      	mov	r0, r5
 8004840:	f000 fc84 	bl	800514c <_fflush_r>
 8004844:	2800      	cmp	r0, #0
 8004846:	d0d9      	beq.n	80047fc <__swbuf_r+0x2e>
 8004848:	e7d6      	b.n	80047f8 <__swbuf_r+0x2a>
	...

0800484c <__swsetup_r>:
 800484c:	b538      	push	{r3, r4, r5, lr}
 800484e:	4b29      	ldr	r3, [pc, #164]	@ (80048f4 <__swsetup_r+0xa8>)
 8004850:	4605      	mov	r5, r0
 8004852:	6818      	ldr	r0, [r3, #0]
 8004854:	460c      	mov	r4, r1
 8004856:	b118      	cbz	r0, 8004860 <__swsetup_r+0x14>
 8004858:	6a03      	ldr	r3, [r0, #32]
 800485a:	b90b      	cbnz	r3, 8004860 <__swsetup_r+0x14>
 800485c:	f7ff fece 	bl	80045fc <__sinit>
 8004860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004864:	0719      	lsls	r1, r3, #28
 8004866:	d422      	bmi.n	80048ae <__swsetup_r+0x62>
 8004868:	06da      	lsls	r2, r3, #27
 800486a:	d407      	bmi.n	800487c <__swsetup_r+0x30>
 800486c:	2209      	movs	r2, #9
 800486e:	602a      	str	r2, [r5, #0]
 8004870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004874:	81a3      	strh	r3, [r4, #12]
 8004876:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800487a:	e033      	b.n	80048e4 <__swsetup_r+0x98>
 800487c:	0758      	lsls	r0, r3, #29
 800487e:	d512      	bpl.n	80048a6 <__swsetup_r+0x5a>
 8004880:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004882:	b141      	cbz	r1, 8004896 <__swsetup_r+0x4a>
 8004884:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004888:	4299      	cmp	r1, r3
 800488a:	d002      	beq.n	8004892 <__swsetup_r+0x46>
 800488c:	4628      	mov	r0, r5
 800488e:	f000 f8bf 	bl	8004a10 <_free_r>
 8004892:	2300      	movs	r3, #0
 8004894:	6363      	str	r3, [r4, #52]	@ 0x34
 8004896:	89a3      	ldrh	r3, [r4, #12]
 8004898:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800489c:	81a3      	strh	r3, [r4, #12]
 800489e:	2300      	movs	r3, #0
 80048a0:	6063      	str	r3, [r4, #4]
 80048a2:	6923      	ldr	r3, [r4, #16]
 80048a4:	6023      	str	r3, [r4, #0]
 80048a6:	89a3      	ldrh	r3, [r4, #12]
 80048a8:	f043 0308 	orr.w	r3, r3, #8
 80048ac:	81a3      	strh	r3, [r4, #12]
 80048ae:	6923      	ldr	r3, [r4, #16]
 80048b0:	b94b      	cbnz	r3, 80048c6 <__swsetup_r+0x7a>
 80048b2:	89a3      	ldrh	r3, [r4, #12]
 80048b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80048b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048bc:	d003      	beq.n	80048c6 <__swsetup_r+0x7a>
 80048be:	4621      	mov	r1, r4
 80048c0:	4628      	mov	r0, r5
 80048c2:	f000 fc91 	bl	80051e8 <__smakebuf_r>
 80048c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ca:	f013 0201 	ands.w	r2, r3, #1
 80048ce:	d00a      	beq.n	80048e6 <__swsetup_r+0x9a>
 80048d0:	2200      	movs	r2, #0
 80048d2:	60a2      	str	r2, [r4, #8]
 80048d4:	6962      	ldr	r2, [r4, #20]
 80048d6:	4252      	negs	r2, r2
 80048d8:	61a2      	str	r2, [r4, #24]
 80048da:	6922      	ldr	r2, [r4, #16]
 80048dc:	b942      	cbnz	r2, 80048f0 <__swsetup_r+0xa4>
 80048de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80048e2:	d1c5      	bne.n	8004870 <__swsetup_r+0x24>
 80048e4:	bd38      	pop	{r3, r4, r5, pc}
 80048e6:	0799      	lsls	r1, r3, #30
 80048e8:	bf58      	it	pl
 80048ea:	6962      	ldrpl	r2, [r4, #20]
 80048ec:	60a2      	str	r2, [r4, #8]
 80048ee:	e7f4      	b.n	80048da <__swsetup_r+0x8e>
 80048f0:	2000      	movs	r0, #0
 80048f2:	e7f7      	b.n	80048e4 <__swsetup_r+0x98>
 80048f4:	20000018 	.word	0x20000018

080048f8 <memset>:
 80048f8:	4402      	add	r2, r0
 80048fa:	4603      	mov	r3, r0
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d100      	bne.n	8004902 <memset+0xa>
 8004900:	4770      	bx	lr
 8004902:	f803 1b01 	strb.w	r1, [r3], #1
 8004906:	e7f9      	b.n	80048fc <memset+0x4>

08004908 <_close_r>:
 8004908:	b538      	push	{r3, r4, r5, lr}
 800490a:	4d06      	ldr	r5, [pc, #24]	@ (8004924 <_close_r+0x1c>)
 800490c:	2300      	movs	r3, #0
 800490e:	4604      	mov	r4, r0
 8004910:	4608      	mov	r0, r1
 8004912:	602b      	str	r3, [r5, #0]
 8004914:	f7fc fc8a 	bl	800122c <_close>
 8004918:	1c43      	adds	r3, r0, #1
 800491a:	d102      	bne.n	8004922 <_close_r+0x1a>
 800491c:	682b      	ldr	r3, [r5, #0]
 800491e:	b103      	cbz	r3, 8004922 <_close_r+0x1a>
 8004920:	6023      	str	r3, [r4, #0]
 8004922:	bd38      	pop	{r3, r4, r5, pc}
 8004924:	200002fc 	.word	0x200002fc

08004928 <_lseek_r>:
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	4d07      	ldr	r5, [pc, #28]	@ (8004948 <_lseek_r+0x20>)
 800492c:	4604      	mov	r4, r0
 800492e:	4608      	mov	r0, r1
 8004930:	4611      	mov	r1, r2
 8004932:	2200      	movs	r2, #0
 8004934:	602a      	str	r2, [r5, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	f7fc fc9f 	bl	800127a <_lseek>
 800493c:	1c43      	adds	r3, r0, #1
 800493e:	d102      	bne.n	8004946 <_lseek_r+0x1e>
 8004940:	682b      	ldr	r3, [r5, #0]
 8004942:	b103      	cbz	r3, 8004946 <_lseek_r+0x1e>
 8004944:	6023      	str	r3, [r4, #0]
 8004946:	bd38      	pop	{r3, r4, r5, pc}
 8004948:	200002fc 	.word	0x200002fc

0800494c <_read_r>:
 800494c:	b538      	push	{r3, r4, r5, lr}
 800494e:	4d07      	ldr	r5, [pc, #28]	@ (800496c <_read_r+0x20>)
 8004950:	4604      	mov	r4, r0
 8004952:	4608      	mov	r0, r1
 8004954:	4611      	mov	r1, r2
 8004956:	2200      	movs	r2, #0
 8004958:	602a      	str	r2, [r5, #0]
 800495a:	461a      	mov	r2, r3
 800495c:	f7fc fc2d 	bl	80011ba <_read>
 8004960:	1c43      	adds	r3, r0, #1
 8004962:	d102      	bne.n	800496a <_read_r+0x1e>
 8004964:	682b      	ldr	r3, [r5, #0]
 8004966:	b103      	cbz	r3, 800496a <_read_r+0x1e>
 8004968:	6023      	str	r3, [r4, #0]
 800496a:	bd38      	pop	{r3, r4, r5, pc}
 800496c:	200002fc 	.word	0x200002fc

08004970 <_sbrk_r>:
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	4d06      	ldr	r5, [pc, #24]	@ (800498c <_sbrk_r+0x1c>)
 8004974:	2300      	movs	r3, #0
 8004976:	4604      	mov	r4, r0
 8004978:	4608      	mov	r0, r1
 800497a:	602b      	str	r3, [r5, #0]
 800497c:	f7fc fc8a 	bl	8001294 <_sbrk>
 8004980:	1c43      	adds	r3, r0, #1
 8004982:	d102      	bne.n	800498a <_sbrk_r+0x1a>
 8004984:	682b      	ldr	r3, [r5, #0]
 8004986:	b103      	cbz	r3, 800498a <_sbrk_r+0x1a>
 8004988:	6023      	str	r3, [r4, #0]
 800498a:	bd38      	pop	{r3, r4, r5, pc}
 800498c:	200002fc 	.word	0x200002fc

08004990 <_write_r>:
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4d07      	ldr	r5, [pc, #28]	@ (80049b0 <_write_r+0x20>)
 8004994:	4604      	mov	r4, r0
 8004996:	4608      	mov	r0, r1
 8004998:	4611      	mov	r1, r2
 800499a:	2200      	movs	r2, #0
 800499c:	602a      	str	r2, [r5, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	f7fc fc28 	bl	80011f4 <_write>
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	d102      	bne.n	80049ae <_write_r+0x1e>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	b103      	cbz	r3, 80049ae <_write_r+0x1e>
 80049ac:	6023      	str	r3, [r4, #0]
 80049ae:	bd38      	pop	{r3, r4, r5, pc}
 80049b0:	200002fc 	.word	0x200002fc

080049b4 <__errno>:
 80049b4:	4b01      	ldr	r3, [pc, #4]	@ (80049bc <__errno+0x8>)
 80049b6:	6818      	ldr	r0, [r3, #0]
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	20000018 	.word	0x20000018

080049c0 <__libc_init_array>:
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	4d0d      	ldr	r5, [pc, #52]	@ (80049f8 <__libc_init_array+0x38>)
 80049c4:	4c0d      	ldr	r4, [pc, #52]	@ (80049fc <__libc_init_array+0x3c>)
 80049c6:	1b64      	subs	r4, r4, r5
 80049c8:	10a4      	asrs	r4, r4, #2
 80049ca:	2600      	movs	r6, #0
 80049cc:	42a6      	cmp	r6, r4
 80049ce:	d109      	bne.n	80049e4 <__libc_init_array+0x24>
 80049d0:	4d0b      	ldr	r5, [pc, #44]	@ (8004a00 <__libc_init_array+0x40>)
 80049d2:	4c0c      	ldr	r4, [pc, #48]	@ (8004a04 <__libc_init_array+0x44>)
 80049d4:	f000 fc66 	bl	80052a4 <_init>
 80049d8:	1b64      	subs	r4, r4, r5
 80049da:	10a4      	asrs	r4, r4, #2
 80049dc:	2600      	movs	r6, #0
 80049de:	42a6      	cmp	r6, r4
 80049e0:	d105      	bne.n	80049ee <__libc_init_array+0x2e>
 80049e2:	bd70      	pop	{r4, r5, r6, pc}
 80049e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e8:	4798      	blx	r3
 80049ea:	3601      	adds	r6, #1
 80049ec:	e7ee      	b.n	80049cc <__libc_init_array+0xc>
 80049ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80049f2:	4798      	blx	r3
 80049f4:	3601      	adds	r6, #1
 80049f6:	e7f2      	b.n	80049de <__libc_init_array+0x1e>
 80049f8:	080056a4 	.word	0x080056a4
 80049fc:	080056a4 	.word	0x080056a4
 8004a00:	080056a4 	.word	0x080056a4
 8004a04:	080056a8 	.word	0x080056a8

08004a08 <__retarget_lock_init_recursive>:
 8004a08:	4770      	bx	lr

08004a0a <__retarget_lock_acquire_recursive>:
 8004a0a:	4770      	bx	lr

08004a0c <__retarget_lock_release_recursive>:
 8004a0c:	4770      	bx	lr
	...

08004a10 <_free_r>:
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	4605      	mov	r5, r0
 8004a14:	2900      	cmp	r1, #0
 8004a16:	d041      	beq.n	8004a9c <_free_r+0x8c>
 8004a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a1c:	1f0c      	subs	r4, r1, #4
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	bfb8      	it	lt
 8004a22:	18e4      	addlt	r4, r4, r3
 8004a24:	f7ff fd52 	bl	80044cc <__malloc_lock>
 8004a28:	4a1d      	ldr	r2, [pc, #116]	@ (8004aa0 <_free_r+0x90>)
 8004a2a:	6813      	ldr	r3, [r2, #0]
 8004a2c:	b933      	cbnz	r3, 8004a3c <_free_r+0x2c>
 8004a2e:	6063      	str	r3, [r4, #4]
 8004a30:	6014      	str	r4, [r2, #0]
 8004a32:	4628      	mov	r0, r5
 8004a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a38:	f7ff bd4e 	b.w	80044d8 <__malloc_unlock>
 8004a3c:	42a3      	cmp	r3, r4
 8004a3e:	d908      	bls.n	8004a52 <_free_r+0x42>
 8004a40:	6820      	ldr	r0, [r4, #0]
 8004a42:	1821      	adds	r1, r4, r0
 8004a44:	428b      	cmp	r3, r1
 8004a46:	bf01      	itttt	eq
 8004a48:	6819      	ldreq	r1, [r3, #0]
 8004a4a:	685b      	ldreq	r3, [r3, #4]
 8004a4c:	1809      	addeq	r1, r1, r0
 8004a4e:	6021      	streq	r1, [r4, #0]
 8004a50:	e7ed      	b.n	8004a2e <_free_r+0x1e>
 8004a52:	461a      	mov	r2, r3
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	b10b      	cbz	r3, 8004a5c <_free_r+0x4c>
 8004a58:	42a3      	cmp	r3, r4
 8004a5a:	d9fa      	bls.n	8004a52 <_free_r+0x42>
 8004a5c:	6811      	ldr	r1, [r2, #0]
 8004a5e:	1850      	adds	r0, r2, r1
 8004a60:	42a0      	cmp	r0, r4
 8004a62:	d10b      	bne.n	8004a7c <_free_r+0x6c>
 8004a64:	6820      	ldr	r0, [r4, #0]
 8004a66:	4401      	add	r1, r0
 8004a68:	1850      	adds	r0, r2, r1
 8004a6a:	4283      	cmp	r3, r0
 8004a6c:	6011      	str	r1, [r2, #0]
 8004a6e:	d1e0      	bne.n	8004a32 <_free_r+0x22>
 8004a70:	6818      	ldr	r0, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	6053      	str	r3, [r2, #4]
 8004a76:	4408      	add	r0, r1
 8004a78:	6010      	str	r0, [r2, #0]
 8004a7a:	e7da      	b.n	8004a32 <_free_r+0x22>
 8004a7c:	d902      	bls.n	8004a84 <_free_r+0x74>
 8004a7e:	230c      	movs	r3, #12
 8004a80:	602b      	str	r3, [r5, #0]
 8004a82:	e7d6      	b.n	8004a32 <_free_r+0x22>
 8004a84:	6820      	ldr	r0, [r4, #0]
 8004a86:	1821      	adds	r1, r4, r0
 8004a88:	428b      	cmp	r3, r1
 8004a8a:	bf04      	itt	eq
 8004a8c:	6819      	ldreq	r1, [r3, #0]
 8004a8e:	685b      	ldreq	r3, [r3, #4]
 8004a90:	6063      	str	r3, [r4, #4]
 8004a92:	bf04      	itt	eq
 8004a94:	1809      	addeq	r1, r1, r0
 8004a96:	6021      	streq	r1, [r4, #0]
 8004a98:	6054      	str	r4, [r2, #4]
 8004a9a:	e7ca      	b.n	8004a32 <_free_r+0x22>
 8004a9c:	bd38      	pop	{r3, r4, r5, pc}
 8004a9e:	bf00      	nop
 8004aa0:	200001bc 	.word	0x200001bc

08004aa4 <__sfputc_r>:
 8004aa4:	6893      	ldr	r3, [r2, #8]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	b410      	push	{r4}
 8004aac:	6093      	str	r3, [r2, #8]
 8004aae:	da08      	bge.n	8004ac2 <__sfputc_r+0x1e>
 8004ab0:	6994      	ldr	r4, [r2, #24]
 8004ab2:	42a3      	cmp	r3, r4
 8004ab4:	db01      	blt.n	8004aba <__sfputc_r+0x16>
 8004ab6:	290a      	cmp	r1, #10
 8004ab8:	d103      	bne.n	8004ac2 <__sfputc_r+0x1e>
 8004aba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004abe:	f7ff be86 	b.w	80047ce <__swbuf_r>
 8004ac2:	6813      	ldr	r3, [r2, #0]
 8004ac4:	1c58      	adds	r0, r3, #1
 8004ac6:	6010      	str	r0, [r2, #0]
 8004ac8:	7019      	strb	r1, [r3, #0]
 8004aca:	4608      	mov	r0, r1
 8004acc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <__sfputs_r>:
 8004ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad4:	4606      	mov	r6, r0
 8004ad6:	460f      	mov	r7, r1
 8004ad8:	4614      	mov	r4, r2
 8004ada:	18d5      	adds	r5, r2, r3
 8004adc:	42ac      	cmp	r4, r5
 8004ade:	d101      	bne.n	8004ae4 <__sfputs_r+0x12>
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	e007      	b.n	8004af4 <__sfputs_r+0x22>
 8004ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ae8:	463a      	mov	r2, r7
 8004aea:	4630      	mov	r0, r6
 8004aec:	f7ff ffda 	bl	8004aa4 <__sfputc_r>
 8004af0:	1c43      	adds	r3, r0, #1
 8004af2:	d1f3      	bne.n	8004adc <__sfputs_r+0xa>
 8004af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004af8 <_vfiprintf_r>:
 8004af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004afc:	460d      	mov	r5, r1
 8004afe:	b09d      	sub	sp, #116	@ 0x74
 8004b00:	4614      	mov	r4, r2
 8004b02:	4698      	mov	r8, r3
 8004b04:	4606      	mov	r6, r0
 8004b06:	b118      	cbz	r0, 8004b10 <_vfiprintf_r+0x18>
 8004b08:	6a03      	ldr	r3, [r0, #32]
 8004b0a:	b90b      	cbnz	r3, 8004b10 <_vfiprintf_r+0x18>
 8004b0c:	f7ff fd76 	bl	80045fc <__sinit>
 8004b10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b12:	07d9      	lsls	r1, r3, #31
 8004b14:	d405      	bmi.n	8004b22 <_vfiprintf_r+0x2a>
 8004b16:	89ab      	ldrh	r3, [r5, #12]
 8004b18:	059a      	lsls	r2, r3, #22
 8004b1a:	d402      	bmi.n	8004b22 <_vfiprintf_r+0x2a>
 8004b1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b1e:	f7ff ff74 	bl	8004a0a <__retarget_lock_acquire_recursive>
 8004b22:	89ab      	ldrh	r3, [r5, #12]
 8004b24:	071b      	lsls	r3, r3, #28
 8004b26:	d501      	bpl.n	8004b2c <_vfiprintf_r+0x34>
 8004b28:	692b      	ldr	r3, [r5, #16]
 8004b2a:	b99b      	cbnz	r3, 8004b54 <_vfiprintf_r+0x5c>
 8004b2c:	4629      	mov	r1, r5
 8004b2e:	4630      	mov	r0, r6
 8004b30:	f7ff fe8c 	bl	800484c <__swsetup_r>
 8004b34:	b170      	cbz	r0, 8004b54 <_vfiprintf_r+0x5c>
 8004b36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b38:	07dc      	lsls	r4, r3, #31
 8004b3a:	d504      	bpl.n	8004b46 <_vfiprintf_r+0x4e>
 8004b3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b40:	b01d      	add	sp, #116	@ 0x74
 8004b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b46:	89ab      	ldrh	r3, [r5, #12]
 8004b48:	0598      	lsls	r0, r3, #22
 8004b4a:	d4f7      	bmi.n	8004b3c <_vfiprintf_r+0x44>
 8004b4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b4e:	f7ff ff5d 	bl	8004a0c <__retarget_lock_release_recursive>
 8004b52:	e7f3      	b.n	8004b3c <_vfiprintf_r+0x44>
 8004b54:	2300      	movs	r3, #0
 8004b56:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b58:	2320      	movs	r3, #32
 8004b5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b62:	2330      	movs	r3, #48	@ 0x30
 8004b64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004d14 <_vfiprintf_r+0x21c>
 8004b68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b6c:	f04f 0901 	mov.w	r9, #1
 8004b70:	4623      	mov	r3, r4
 8004b72:	469a      	mov	sl, r3
 8004b74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b78:	b10a      	cbz	r2, 8004b7e <_vfiprintf_r+0x86>
 8004b7a:	2a25      	cmp	r2, #37	@ 0x25
 8004b7c:	d1f9      	bne.n	8004b72 <_vfiprintf_r+0x7a>
 8004b7e:	ebba 0b04 	subs.w	fp, sl, r4
 8004b82:	d00b      	beq.n	8004b9c <_vfiprintf_r+0xa4>
 8004b84:	465b      	mov	r3, fp
 8004b86:	4622      	mov	r2, r4
 8004b88:	4629      	mov	r1, r5
 8004b8a:	4630      	mov	r0, r6
 8004b8c:	f7ff ffa1 	bl	8004ad2 <__sfputs_r>
 8004b90:	3001      	adds	r0, #1
 8004b92:	f000 80a7 	beq.w	8004ce4 <_vfiprintf_r+0x1ec>
 8004b96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b98:	445a      	add	r2, fp
 8004b9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 809f 	beq.w	8004ce4 <_vfiprintf_r+0x1ec>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004bac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bb0:	f10a 0a01 	add.w	sl, sl, #1
 8004bb4:	9304      	str	r3, [sp, #16]
 8004bb6:	9307      	str	r3, [sp, #28]
 8004bb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004bbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8004bbe:	4654      	mov	r4, sl
 8004bc0:	2205      	movs	r2, #5
 8004bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bc6:	4853      	ldr	r0, [pc, #332]	@ (8004d14 <_vfiprintf_r+0x21c>)
 8004bc8:	f7fb fb22 	bl	8000210 <memchr>
 8004bcc:	9a04      	ldr	r2, [sp, #16]
 8004bce:	b9d8      	cbnz	r0, 8004c08 <_vfiprintf_r+0x110>
 8004bd0:	06d1      	lsls	r1, r2, #27
 8004bd2:	bf44      	itt	mi
 8004bd4:	2320      	movmi	r3, #32
 8004bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bda:	0713      	lsls	r3, r2, #28
 8004bdc:	bf44      	itt	mi
 8004bde:	232b      	movmi	r3, #43	@ 0x2b
 8004be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004be4:	f89a 3000 	ldrb.w	r3, [sl]
 8004be8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bea:	d015      	beq.n	8004c18 <_vfiprintf_r+0x120>
 8004bec:	9a07      	ldr	r2, [sp, #28]
 8004bee:	4654      	mov	r4, sl
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	f04f 0c0a 	mov.w	ip, #10
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bfc:	3b30      	subs	r3, #48	@ 0x30
 8004bfe:	2b09      	cmp	r3, #9
 8004c00:	d94b      	bls.n	8004c9a <_vfiprintf_r+0x1a2>
 8004c02:	b1b0      	cbz	r0, 8004c32 <_vfiprintf_r+0x13a>
 8004c04:	9207      	str	r2, [sp, #28]
 8004c06:	e014      	b.n	8004c32 <_vfiprintf_r+0x13a>
 8004c08:	eba0 0308 	sub.w	r3, r0, r8
 8004c0c:	fa09 f303 	lsl.w	r3, r9, r3
 8004c10:	4313      	orrs	r3, r2
 8004c12:	9304      	str	r3, [sp, #16]
 8004c14:	46a2      	mov	sl, r4
 8004c16:	e7d2      	b.n	8004bbe <_vfiprintf_r+0xc6>
 8004c18:	9b03      	ldr	r3, [sp, #12]
 8004c1a:	1d19      	adds	r1, r3, #4
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	9103      	str	r1, [sp, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	bfbb      	ittet	lt
 8004c24:	425b      	neglt	r3, r3
 8004c26:	f042 0202 	orrlt.w	r2, r2, #2
 8004c2a:	9307      	strge	r3, [sp, #28]
 8004c2c:	9307      	strlt	r3, [sp, #28]
 8004c2e:	bfb8      	it	lt
 8004c30:	9204      	strlt	r2, [sp, #16]
 8004c32:	7823      	ldrb	r3, [r4, #0]
 8004c34:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c36:	d10a      	bne.n	8004c4e <_vfiprintf_r+0x156>
 8004c38:	7863      	ldrb	r3, [r4, #1]
 8004c3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c3c:	d132      	bne.n	8004ca4 <_vfiprintf_r+0x1ac>
 8004c3e:	9b03      	ldr	r3, [sp, #12]
 8004c40:	1d1a      	adds	r2, r3, #4
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	9203      	str	r2, [sp, #12]
 8004c46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c4a:	3402      	adds	r4, #2
 8004c4c:	9305      	str	r3, [sp, #20]
 8004c4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004d24 <_vfiprintf_r+0x22c>
 8004c52:	7821      	ldrb	r1, [r4, #0]
 8004c54:	2203      	movs	r2, #3
 8004c56:	4650      	mov	r0, sl
 8004c58:	f7fb fada 	bl	8000210 <memchr>
 8004c5c:	b138      	cbz	r0, 8004c6e <_vfiprintf_r+0x176>
 8004c5e:	9b04      	ldr	r3, [sp, #16]
 8004c60:	eba0 000a 	sub.w	r0, r0, sl
 8004c64:	2240      	movs	r2, #64	@ 0x40
 8004c66:	4082      	lsls	r2, r0
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	3401      	adds	r4, #1
 8004c6c:	9304      	str	r3, [sp, #16]
 8004c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c72:	4829      	ldr	r0, [pc, #164]	@ (8004d18 <_vfiprintf_r+0x220>)
 8004c74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c78:	2206      	movs	r2, #6
 8004c7a:	f7fb fac9 	bl	8000210 <memchr>
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d03f      	beq.n	8004d02 <_vfiprintf_r+0x20a>
 8004c82:	4b26      	ldr	r3, [pc, #152]	@ (8004d1c <_vfiprintf_r+0x224>)
 8004c84:	bb1b      	cbnz	r3, 8004cce <_vfiprintf_r+0x1d6>
 8004c86:	9b03      	ldr	r3, [sp, #12]
 8004c88:	3307      	adds	r3, #7
 8004c8a:	f023 0307 	bic.w	r3, r3, #7
 8004c8e:	3308      	adds	r3, #8
 8004c90:	9303      	str	r3, [sp, #12]
 8004c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c94:	443b      	add	r3, r7
 8004c96:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c98:	e76a      	b.n	8004b70 <_vfiprintf_r+0x78>
 8004c9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	2001      	movs	r0, #1
 8004ca2:	e7a8      	b.n	8004bf6 <_vfiprintf_r+0xfe>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	3401      	adds	r4, #1
 8004ca8:	9305      	str	r3, [sp, #20]
 8004caa:	4619      	mov	r1, r3
 8004cac:	f04f 0c0a 	mov.w	ip, #10
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cb6:	3a30      	subs	r2, #48	@ 0x30
 8004cb8:	2a09      	cmp	r2, #9
 8004cba:	d903      	bls.n	8004cc4 <_vfiprintf_r+0x1cc>
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0c6      	beq.n	8004c4e <_vfiprintf_r+0x156>
 8004cc0:	9105      	str	r1, [sp, #20]
 8004cc2:	e7c4      	b.n	8004c4e <_vfiprintf_r+0x156>
 8004cc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cc8:	4604      	mov	r4, r0
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e7f0      	b.n	8004cb0 <_vfiprintf_r+0x1b8>
 8004cce:	ab03      	add	r3, sp, #12
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	462a      	mov	r2, r5
 8004cd4:	4b12      	ldr	r3, [pc, #72]	@ (8004d20 <_vfiprintf_r+0x228>)
 8004cd6:	a904      	add	r1, sp, #16
 8004cd8:	4630      	mov	r0, r6
 8004cda:	f3af 8000 	nop.w
 8004cde:	4607      	mov	r7, r0
 8004ce0:	1c78      	adds	r0, r7, #1
 8004ce2:	d1d6      	bne.n	8004c92 <_vfiprintf_r+0x19a>
 8004ce4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ce6:	07d9      	lsls	r1, r3, #31
 8004ce8:	d405      	bmi.n	8004cf6 <_vfiprintf_r+0x1fe>
 8004cea:	89ab      	ldrh	r3, [r5, #12]
 8004cec:	059a      	lsls	r2, r3, #22
 8004cee:	d402      	bmi.n	8004cf6 <_vfiprintf_r+0x1fe>
 8004cf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004cf2:	f7ff fe8b 	bl	8004a0c <__retarget_lock_release_recursive>
 8004cf6:	89ab      	ldrh	r3, [r5, #12]
 8004cf8:	065b      	lsls	r3, r3, #25
 8004cfa:	f53f af1f 	bmi.w	8004b3c <_vfiprintf_r+0x44>
 8004cfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d00:	e71e      	b.n	8004b40 <_vfiprintf_r+0x48>
 8004d02:	ab03      	add	r3, sp, #12
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	462a      	mov	r2, r5
 8004d08:	4b05      	ldr	r3, [pc, #20]	@ (8004d20 <_vfiprintf_r+0x228>)
 8004d0a:	a904      	add	r1, sp, #16
 8004d0c:	4630      	mov	r0, r6
 8004d0e:	f000 f879 	bl	8004e04 <_printf_i>
 8004d12:	e7e4      	b.n	8004cde <_vfiprintf_r+0x1e6>
 8004d14:	08005668 	.word	0x08005668
 8004d18:	08005672 	.word	0x08005672
 8004d1c:	00000000 	.word	0x00000000
 8004d20:	08004ad3 	.word	0x08004ad3
 8004d24:	0800566e 	.word	0x0800566e

08004d28 <_printf_common>:
 8004d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d2c:	4616      	mov	r6, r2
 8004d2e:	4698      	mov	r8, r3
 8004d30:	688a      	ldr	r2, [r1, #8]
 8004d32:	690b      	ldr	r3, [r1, #16]
 8004d34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	bfb8      	it	lt
 8004d3c:	4613      	movlt	r3, r2
 8004d3e:	6033      	str	r3, [r6, #0]
 8004d40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d44:	4607      	mov	r7, r0
 8004d46:	460c      	mov	r4, r1
 8004d48:	b10a      	cbz	r2, 8004d4e <_printf_common+0x26>
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	6033      	str	r3, [r6, #0]
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	0699      	lsls	r1, r3, #26
 8004d52:	bf42      	ittt	mi
 8004d54:	6833      	ldrmi	r3, [r6, #0]
 8004d56:	3302      	addmi	r3, #2
 8004d58:	6033      	strmi	r3, [r6, #0]
 8004d5a:	6825      	ldr	r5, [r4, #0]
 8004d5c:	f015 0506 	ands.w	r5, r5, #6
 8004d60:	d106      	bne.n	8004d70 <_printf_common+0x48>
 8004d62:	f104 0a19 	add.w	sl, r4, #25
 8004d66:	68e3      	ldr	r3, [r4, #12]
 8004d68:	6832      	ldr	r2, [r6, #0]
 8004d6a:	1a9b      	subs	r3, r3, r2
 8004d6c:	42ab      	cmp	r3, r5
 8004d6e:	dc26      	bgt.n	8004dbe <_printf_common+0x96>
 8004d70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d74:	6822      	ldr	r2, [r4, #0]
 8004d76:	3b00      	subs	r3, #0
 8004d78:	bf18      	it	ne
 8004d7a:	2301      	movne	r3, #1
 8004d7c:	0692      	lsls	r2, r2, #26
 8004d7e:	d42b      	bmi.n	8004dd8 <_printf_common+0xb0>
 8004d80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d84:	4641      	mov	r1, r8
 8004d86:	4638      	mov	r0, r7
 8004d88:	47c8      	blx	r9
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	d01e      	beq.n	8004dcc <_printf_common+0xa4>
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	6922      	ldr	r2, [r4, #16]
 8004d92:	f003 0306 	and.w	r3, r3, #6
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	bf02      	ittt	eq
 8004d9a:	68e5      	ldreq	r5, [r4, #12]
 8004d9c:	6833      	ldreq	r3, [r6, #0]
 8004d9e:	1aed      	subeq	r5, r5, r3
 8004da0:	68a3      	ldr	r3, [r4, #8]
 8004da2:	bf0c      	ite	eq
 8004da4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004da8:	2500      	movne	r5, #0
 8004daa:	4293      	cmp	r3, r2
 8004dac:	bfc4      	itt	gt
 8004dae:	1a9b      	subgt	r3, r3, r2
 8004db0:	18ed      	addgt	r5, r5, r3
 8004db2:	2600      	movs	r6, #0
 8004db4:	341a      	adds	r4, #26
 8004db6:	42b5      	cmp	r5, r6
 8004db8:	d11a      	bne.n	8004df0 <_printf_common+0xc8>
 8004dba:	2000      	movs	r0, #0
 8004dbc:	e008      	b.n	8004dd0 <_printf_common+0xa8>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	4652      	mov	r2, sl
 8004dc2:	4641      	mov	r1, r8
 8004dc4:	4638      	mov	r0, r7
 8004dc6:	47c8      	blx	r9
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d103      	bne.n	8004dd4 <_printf_common+0xac>
 8004dcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd4:	3501      	adds	r5, #1
 8004dd6:	e7c6      	b.n	8004d66 <_printf_common+0x3e>
 8004dd8:	18e1      	adds	r1, r4, r3
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	2030      	movs	r0, #48	@ 0x30
 8004dde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004de2:	4422      	add	r2, r4
 8004de4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004de8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004dec:	3302      	adds	r3, #2
 8004dee:	e7c7      	b.n	8004d80 <_printf_common+0x58>
 8004df0:	2301      	movs	r3, #1
 8004df2:	4622      	mov	r2, r4
 8004df4:	4641      	mov	r1, r8
 8004df6:	4638      	mov	r0, r7
 8004df8:	47c8      	blx	r9
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	d0e6      	beq.n	8004dcc <_printf_common+0xa4>
 8004dfe:	3601      	adds	r6, #1
 8004e00:	e7d9      	b.n	8004db6 <_printf_common+0x8e>
	...

08004e04 <_printf_i>:
 8004e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e08:	7e0f      	ldrb	r7, [r1, #24]
 8004e0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e0c:	2f78      	cmp	r7, #120	@ 0x78
 8004e0e:	4691      	mov	r9, r2
 8004e10:	4680      	mov	r8, r0
 8004e12:	460c      	mov	r4, r1
 8004e14:	469a      	mov	sl, r3
 8004e16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e1a:	d807      	bhi.n	8004e2c <_printf_i+0x28>
 8004e1c:	2f62      	cmp	r7, #98	@ 0x62
 8004e1e:	d80a      	bhi.n	8004e36 <_printf_i+0x32>
 8004e20:	2f00      	cmp	r7, #0
 8004e22:	f000 80d2 	beq.w	8004fca <_printf_i+0x1c6>
 8004e26:	2f58      	cmp	r7, #88	@ 0x58
 8004e28:	f000 80b9 	beq.w	8004f9e <_printf_i+0x19a>
 8004e2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e34:	e03a      	b.n	8004eac <_printf_i+0xa8>
 8004e36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e3a:	2b15      	cmp	r3, #21
 8004e3c:	d8f6      	bhi.n	8004e2c <_printf_i+0x28>
 8004e3e:	a101      	add	r1, pc, #4	@ (adr r1, 8004e44 <_printf_i+0x40>)
 8004e40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e44:	08004e9d 	.word	0x08004e9d
 8004e48:	08004eb1 	.word	0x08004eb1
 8004e4c:	08004e2d 	.word	0x08004e2d
 8004e50:	08004e2d 	.word	0x08004e2d
 8004e54:	08004e2d 	.word	0x08004e2d
 8004e58:	08004e2d 	.word	0x08004e2d
 8004e5c:	08004eb1 	.word	0x08004eb1
 8004e60:	08004e2d 	.word	0x08004e2d
 8004e64:	08004e2d 	.word	0x08004e2d
 8004e68:	08004e2d 	.word	0x08004e2d
 8004e6c:	08004e2d 	.word	0x08004e2d
 8004e70:	08004fb1 	.word	0x08004fb1
 8004e74:	08004edb 	.word	0x08004edb
 8004e78:	08004f6b 	.word	0x08004f6b
 8004e7c:	08004e2d 	.word	0x08004e2d
 8004e80:	08004e2d 	.word	0x08004e2d
 8004e84:	08004fd3 	.word	0x08004fd3
 8004e88:	08004e2d 	.word	0x08004e2d
 8004e8c:	08004edb 	.word	0x08004edb
 8004e90:	08004e2d 	.word	0x08004e2d
 8004e94:	08004e2d 	.word	0x08004e2d
 8004e98:	08004f73 	.word	0x08004f73
 8004e9c:	6833      	ldr	r3, [r6, #0]
 8004e9e:	1d1a      	adds	r2, r3, #4
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6032      	str	r2, [r6, #0]
 8004ea4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ea8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004eac:	2301      	movs	r3, #1
 8004eae:	e09d      	b.n	8004fec <_printf_i+0x1e8>
 8004eb0:	6833      	ldr	r3, [r6, #0]
 8004eb2:	6820      	ldr	r0, [r4, #0]
 8004eb4:	1d19      	adds	r1, r3, #4
 8004eb6:	6031      	str	r1, [r6, #0]
 8004eb8:	0606      	lsls	r6, r0, #24
 8004eba:	d501      	bpl.n	8004ec0 <_printf_i+0xbc>
 8004ebc:	681d      	ldr	r5, [r3, #0]
 8004ebe:	e003      	b.n	8004ec8 <_printf_i+0xc4>
 8004ec0:	0645      	lsls	r5, r0, #25
 8004ec2:	d5fb      	bpl.n	8004ebc <_printf_i+0xb8>
 8004ec4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ec8:	2d00      	cmp	r5, #0
 8004eca:	da03      	bge.n	8004ed4 <_printf_i+0xd0>
 8004ecc:	232d      	movs	r3, #45	@ 0x2d
 8004ece:	426d      	negs	r5, r5
 8004ed0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ed4:	4859      	ldr	r0, [pc, #356]	@ (800503c <_printf_i+0x238>)
 8004ed6:	230a      	movs	r3, #10
 8004ed8:	e011      	b.n	8004efe <_printf_i+0xfa>
 8004eda:	6821      	ldr	r1, [r4, #0]
 8004edc:	6833      	ldr	r3, [r6, #0]
 8004ede:	0608      	lsls	r0, r1, #24
 8004ee0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ee4:	d402      	bmi.n	8004eec <_printf_i+0xe8>
 8004ee6:	0649      	lsls	r1, r1, #25
 8004ee8:	bf48      	it	mi
 8004eea:	b2ad      	uxthmi	r5, r5
 8004eec:	2f6f      	cmp	r7, #111	@ 0x6f
 8004eee:	4853      	ldr	r0, [pc, #332]	@ (800503c <_printf_i+0x238>)
 8004ef0:	6033      	str	r3, [r6, #0]
 8004ef2:	bf14      	ite	ne
 8004ef4:	230a      	movne	r3, #10
 8004ef6:	2308      	moveq	r3, #8
 8004ef8:	2100      	movs	r1, #0
 8004efa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004efe:	6866      	ldr	r6, [r4, #4]
 8004f00:	60a6      	str	r6, [r4, #8]
 8004f02:	2e00      	cmp	r6, #0
 8004f04:	bfa2      	ittt	ge
 8004f06:	6821      	ldrge	r1, [r4, #0]
 8004f08:	f021 0104 	bicge.w	r1, r1, #4
 8004f0c:	6021      	strge	r1, [r4, #0]
 8004f0e:	b90d      	cbnz	r5, 8004f14 <_printf_i+0x110>
 8004f10:	2e00      	cmp	r6, #0
 8004f12:	d04b      	beq.n	8004fac <_printf_i+0x1a8>
 8004f14:	4616      	mov	r6, r2
 8004f16:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f1a:	fb03 5711 	mls	r7, r3, r1, r5
 8004f1e:	5dc7      	ldrb	r7, [r0, r7]
 8004f20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f24:	462f      	mov	r7, r5
 8004f26:	42bb      	cmp	r3, r7
 8004f28:	460d      	mov	r5, r1
 8004f2a:	d9f4      	bls.n	8004f16 <_printf_i+0x112>
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d10b      	bne.n	8004f48 <_printf_i+0x144>
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	07df      	lsls	r7, r3, #31
 8004f34:	d508      	bpl.n	8004f48 <_printf_i+0x144>
 8004f36:	6923      	ldr	r3, [r4, #16]
 8004f38:	6861      	ldr	r1, [r4, #4]
 8004f3a:	4299      	cmp	r1, r3
 8004f3c:	bfde      	ittt	le
 8004f3e:	2330      	movle	r3, #48	@ 0x30
 8004f40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f44:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004f48:	1b92      	subs	r2, r2, r6
 8004f4a:	6122      	str	r2, [r4, #16]
 8004f4c:	f8cd a000 	str.w	sl, [sp]
 8004f50:	464b      	mov	r3, r9
 8004f52:	aa03      	add	r2, sp, #12
 8004f54:	4621      	mov	r1, r4
 8004f56:	4640      	mov	r0, r8
 8004f58:	f7ff fee6 	bl	8004d28 <_printf_common>
 8004f5c:	3001      	adds	r0, #1
 8004f5e:	d14a      	bne.n	8004ff6 <_printf_i+0x1f2>
 8004f60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f64:	b004      	add	sp, #16
 8004f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	f043 0320 	orr.w	r3, r3, #32
 8004f70:	6023      	str	r3, [r4, #0]
 8004f72:	4833      	ldr	r0, [pc, #204]	@ (8005040 <_printf_i+0x23c>)
 8004f74:	2778      	movs	r7, #120	@ 0x78
 8004f76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	6831      	ldr	r1, [r6, #0]
 8004f7e:	061f      	lsls	r7, r3, #24
 8004f80:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f84:	d402      	bmi.n	8004f8c <_printf_i+0x188>
 8004f86:	065f      	lsls	r7, r3, #25
 8004f88:	bf48      	it	mi
 8004f8a:	b2ad      	uxthmi	r5, r5
 8004f8c:	6031      	str	r1, [r6, #0]
 8004f8e:	07d9      	lsls	r1, r3, #31
 8004f90:	bf44      	itt	mi
 8004f92:	f043 0320 	orrmi.w	r3, r3, #32
 8004f96:	6023      	strmi	r3, [r4, #0]
 8004f98:	b11d      	cbz	r5, 8004fa2 <_printf_i+0x19e>
 8004f9a:	2310      	movs	r3, #16
 8004f9c:	e7ac      	b.n	8004ef8 <_printf_i+0xf4>
 8004f9e:	4827      	ldr	r0, [pc, #156]	@ (800503c <_printf_i+0x238>)
 8004fa0:	e7e9      	b.n	8004f76 <_printf_i+0x172>
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	f023 0320 	bic.w	r3, r3, #32
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	e7f6      	b.n	8004f9a <_printf_i+0x196>
 8004fac:	4616      	mov	r6, r2
 8004fae:	e7bd      	b.n	8004f2c <_printf_i+0x128>
 8004fb0:	6833      	ldr	r3, [r6, #0]
 8004fb2:	6825      	ldr	r5, [r4, #0]
 8004fb4:	6961      	ldr	r1, [r4, #20]
 8004fb6:	1d18      	adds	r0, r3, #4
 8004fb8:	6030      	str	r0, [r6, #0]
 8004fba:	062e      	lsls	r6, r5, #24
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	d501      	bpl.n	8004fc4 <_printf_i+0x1c0>
 8004fc0:	6019      	str	r1, [r3, #0]
 8004fc2:	e002      	b.n	8004fca <_printf_i+0x1c6>
 8004fc4:	0668      	lsls	r0, r5, #25
 8004fc6:	d5fb      	bpl.n	8004fc0 <_printf_i+0x1bc>
 8004fc8:	8019      	strh	r1, [r3, #0]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	6123      	str	r3, [r4, #16]
 8004fce:	4616      	mov	r6, r2
 8004fd0:	e7bc      	b.n	8004f4c <_printf_i+0x148>
 8004fd2:	6833      	ldr	r3, [r6, #0]
 8004fd4:	1d1a      	adds	r2, r3, #4
 8004fd6:	6032      	str	r2, [r6, #0]
 8004fd8:	681e      	ldr	r6, [r3, #0]
 8004fda:	6862      	ldr	r2, [r4, #4]
 8004fdc:	2100      	movs	r1, #0
 8004fde:	4630      	mov	r0, r6
 8004fe0:	f7fb f916 	bl	8000210 <memchr>
 8004fe4:	b108      	cbz	r0, 8004fea <_printf_i+0x1e6>
 8004fe6:	1b80      	subs	r0, r0, r6
 8004fe8:	6060      	str	r0, [r4, #4]
 8004fea:	6863      	ldr	r3, [r4, #4]
 8004fec:	6123      	str	r3, [r4, #16]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ff4:	e7aa      	b.n	8004f4c <_printf_i+0x148>
 8004ff6:	6923      	ldr	r3, [r4, #16]
 8004ff8:	4632      	mov	r2, r6
 8004ffa:	4649      	mov	r1, r9
 8004ffc:	4640      	mov	r0, r8
 8004ffe:	47d0      	blx	sl
 8005000:	3001      	adds	r0, #1
 8005002:	d0ad      	beq.n	8004f60 <_printf_i+0x15c>
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	079b      	lsls	r3, r3, #30
 8005008:	d413      	bmi.n	8005032 <_printf_i+0x22e>
 800500a:	68e0      	ldr	r0, [r4, #12]
 800500c:	9b03      	ldr	r3, [sp, #12]
 800500e:	4298      	cmp	r0, r3
 8005010:	bfb8      	it	lt
 8005012:	4618      	movlt	r0, r3
 8005014:	e7a6      	b.n	8004f64 <_printf_i+0x160>
 8005016:	2301      	movs	r3, #1
 8005018:	4632      	mov	r2, r6
 800501a:	4649      	mov	r1, r9
 800501c:	4640      	mov	r0, r8
 800501e:	47d0      	blx	sl
 8005020:	3001      	adds	r0, #1
 8005022:	d09d      	beq.n	8004f60 <_printf_i+0x15c>
 8005024:	3501      	adds	r5, #1
 8005026:	68e3      	ldr	r3, [r4, #12]
 8005028:	9903      	ldr	r1, [sp, #12]
 800502a:	1a5b      	subs	r3, r3, r1
 800502c:	42ab      	cmp	r3, r5
 800502e:	dcf2      	bgt.n	8005016 <_printf_i+0x212>
 8005030:	e7eb      	b.n	800500a <_printf_i+0x206>
 8005032:	2500      	movs	r5, #0
 8005034:	f104 0619 	add.w	r6, r4, #25
 8005038:	e7f5      	b.n	8005026 <_printf_i+0x222>
 800503a:	bf00      	nop
 800503c:	08005679 	.word	0x08005679
 8005040:	0800568a 	.word	0x0800568a

08005044 <__sflush_r>:
 8005044:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800504c:	0716      	lsls	r6, r2, #28
 800504e:	4605      	mov	r5, r0
 8005050:	460c      	mov	r4, r1
 8005052:	d454      	bmi.n	80050fe <__sflush_r+0xba>
 8005054:	684b      	ldr	r3, [r1, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	dc02      	bgt.n	8005060 <__sflush_r+0x1c>
 800505a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800505c:	2b00      	cmp	r3, #0
 800505e:	dd48      	ble.n	80050f2 <__sflush_r+0xae>
 8005060:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005062:	2e00      	cmp	r6, #0
 8005064:	d045      	beq.n	80050f2 <__sflush_r+0xae>
 8005066:	2300      	movs	r3, #0
 8005068:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800506c:	682f      	ldr	r7, [r5, #0]
 800506e:	6a21      	ldr	r1, [r4, #32]
 8005070:	602b      	str	r3, [r5, #0]
 8005072:	d030      	beq.n	80050d6 <__sflush_r+0x92>
 8005074:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005076:	89a3      	ldrh	r3, [r4, #12]
 8005078:	0759      	lsls	r1, r3, #29
 800507a:	d505      	bpl.n	8005088 <__sflush_r+0x44>
 800507c:	6863      	ldr	r3, [r4, #4]
 800507e:	1ad2      	subs	r2, r2, r3
 8005080:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005082:	b10b      	cbz	r3, 8005088 <__sflush_r+0x44>
 8005084:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005086:	1ad2      	subs	r2, r2, r3
 8005088:	2300      	movs	r3, #0
 800508a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800508c:	6a21      	ldr	r1, [r4, #32]
 800508e:	4628      	mov	r0, r5
 8005090:	47b0      	blx	r6
 8005092:	1c43      	adds	r3, r0, #1
 8005094:	89a3      	ldrh	r3, [r4, #12]
 8005096:	d106      	bne.n	80050a6 <__sflush_r+0x62>
 8005098:	6829      	ldr	r1, [r5, #0]
 800509a:	291d      	cmp	r1, #29
 800509c:	d82b      	bhi.n	80050f6 <__sflush_r+0xb2>
 800509e:	4a2a      	ldr	r2, [pc, #168]	@ (8005148 <__sflush_r+0x104>)
 80050a0:	410a      	asrs	r2, r1
 80050a2:	07d6      	lsls	r6, r2, #31
 80050a4:	d427      	bmi.n	80050f6 <__sflush_r+0xb2>
 80050a6:	2200      	movs	r2, #0
 80050a8:	6062      	str	r2, [r4, #4]
 80050aa:	04d9      	lsls	r1, r3, #19
 80050ac:	6922      	ldr	r2, [r4, #16]
 80050ae:	6022      	str	r2, [r4, #0]
 80050b0:	d504      	bpl.n	80050bc <__sflush_r+0x78>
 80050b2:	1c42      	adds	r2, r0, #1
 80050b4:	d101      	bne.n	80050ba <__sflush_r+0x76>
 80050b6:	682b      	ldr	r3, [r5, #0]
 80050b8:	b903      	cbnz	r3, 80050bc <__sflush_r+0x78>
 80050ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80050bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80050be:	602f      	str	r7, [r5, #0]
 80050c0:	b1b9      	cbz	r1, 80050f2 <__sflush_r+0xae>
 80050c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80050c6:	4299      	cmp	r1, r3
 80050c8:	d002      	beq.n	80050d0 <__sflush_r+0x8c>
 80050ca:	4628      	mov	r0, r5
 80050cc:	f7ff fca0 	bl	8004a10 <_free_r>
 80050d0:	2300      	movs	r3, #0
 80050d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80050d4:	e00d      	b.n	80050f2 <__sflush_r+0xae>
 80050d6:	2301      	movs	r3, #1
 80050d8:	4628      	mov	r0, r5
 80050da:	47b0      	blx	r6
 80050dc:	4602      	mov	r2, r0
 80050de:	1c50      	adds	r0, r2, #1
 80050e0:	d1c9      	bne.n	8005076 <__sflush_r+0x32>
 80050e2:	682b      	ldr	r3, [r5, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0c6      	beq.n	8005076 <__sflush_r+0x32>
 80050e8:	2b1d      	cmp	r3, #29
 80050ea:	d001      	beq.n	80050f0 <__sflush_r+0xac>
 80050ec:	2b16      	cmp	r3, #22
 80050ee:	d11e      	bne.n	800512e <__sflush_r+0xea>
 80050f0:	602f      	str	r7, [r5, #0]
 80050f2:	2000      	movs	r0, #0
 80050f4:	e022      	b.n	800513c <__sflush_r+0xf8>
 80050f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050fa:	b21b      	sxth	r3, r3
 80050fc:	e01b      	b.n	8005136 <__sflush_r+0xf2>
 80050fe:	690f      	ldr	r7, [r1, #16]
 8005100:	2f00      	cmp	r7, #0
 8005102:	d0f6      	beq.n	80050f2 <__sflush_r+0xae>
 8005104:	0793      	lsls	r3, r2, #30
 8005106:	680e      	ldr	r6, [r1, #0]
 8005108:	bf08      	it	eq
 800510a:	694b      	ldreq	r3, [r1, #20]
 800510c:	600f      	str	r7, [r1, #0]
 800510e:	bf18      	it	ne
 8005110:	2300      	movne	r3, #0
 8005112:	eba6 0807 	sub.w	r8, r6, r7
 8005116:	608b      	str	r3, [r1, #8]
 8005118:	f1b8 0f00 	cmp.w	r8, #0
 800511c:	dde9      	ble.n	80050f2 <__sflush_r+0xae>
 800511e:	6a21      	ldr	r1, [r4, #32]
 8005120:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005122:	4643      	mov	r3, r8
 8005124:	463a      	mov	r2, r7
 8005126:	4628      	mov	r0, r5
 8005128:	47b0      	blx	r6
 800512a:	2800      	cmp	r0, #0
 800512c:	dc08      	bgt.n	8005140 <__sflush_r+0xfc>
 800512e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005132:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005136:	81a3      	strh	r3, [r4, #12]
 8005138:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800513c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005140:	4407      	add	r7, r0
 8005142:	eba8 0800 	sub.w	r8, r8, r0
 8005146:	e7e7      	b.n	8005118 <__sflush_r+0xd4>
 8005148:	dfbffffe 	.word	0xdfbffffe

0800514c <_fflush_r>:
 800514c:	b538      	push	{r3, r4, r5, lr}
 800514e:	690b      	ldr	r3, [r1, #16]
 8005150:	4605      	mov	r5, r0
 8005152:	460c      	mov	r4, r1
 8005154:	b913      	cbnz	r3, 800515c <_fflush_r+0x10>
 8005156:	2500      	movs	r5, #0
 8005158:	4628      	mov	r0, r5
 800515a:	bd38      	pop	{r3, r4, r5, pc}
 800515c:	b118      	cbz	r0, 8005166 <_fflush_r+0x1a>
 800515e:	6a03      	ldr	r3, [r0, #32]
 8005160:	b90b      	cbnz	r3, 8005166 <_fflush_r+0x1a>
 8005162:	f7ff fa4b 	bl	80045fc <__sinit>
 8005166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d0f3      	beq.n	8005156 <_fflush_r+0xa>
 800516e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005170:	07d0      	lsls	r0, r2, #31
 8005172:	d404      	bmi.n	800517e <_fflush_r+0x32>
 8005174:	0599      	lsls	r1, r3, #22
 8005176:	d402      	bmi.n	800517e <_fflush_r+0x32>
 8005178:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800517a:	f7ff fc46 	bl	8004a0a <__retarget_lock_acquire_recursive>
 800517e:	4628      	mov	r0, r5
 8005180:	4621      	mov	r1, r4
 8005182:	f7ff ff5f 	bl	8005044 <__sflush_r>
 8005186:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005188:	07da      	lsls	r2, r3, #31
 800518a:	4605      	mov	r5, r0
 800518c:	d4e4      	bmi.n	8005158 <_fflush_r+0xc>
 800518e:	89a3      	ldrh	r3, [r4, #12]
 8005190:	059b      	lsls	r3, r3, #22
 8005192:	d4e1      	bmi.n	8005158 <_fflush_r+0xc>
 8005194:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005196:	f7ff fc39 	bl	8004a0c <__retarget_lock_release_recursive>
 800519a:	e7dd      	b.n	8005158 <_fflush_r+0xc>

0800519c <__swhatbuf_r>:
 800519c:	b570      	push	{r4, r5, r6, lr}
 800519e:	460c      	mov	r4, r1
 80051a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051a4:	2900      	cmp	r1, #0
 80051a6:	b096      	sub	sp, #88	@ 0x58
 80051a8:	4615      	mov	r5, r2
 80051aa:	461e      	mov	r6, r3
 80051ac:	da0d      	bge.n	80051ca <__swhatbuf_r+0x2e>
 80051ae:	89a3      	ldrh	r3, [r4, #12]
 80051b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80051b4:	f04f 0100 	mov.w	r1, #0
 80051b8:	bf14      	ite	ne
 80051ba:	2340      	movne	r3, #64	@ 0x40
 80051bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80051c0:	2000      	movs	r0, #0
 80051c2:	6031      	str	r1, [r6, #0]
 80051c4:	602b      	str	r3, [r5, #0]
 80051c6:	b016      	add	sp, #88	@ 0x58
 80051c8:	bd70      	pop	{r4, r5, r6, pc}
 80051ca:	466a      	mov	r2, sp
 80051cc:	f000 f848 	bl	8005260 <_fstat_r>
 80051d0:	2800      	cmp	r0, #0
 80051d2:	dbec      	blt.n	80051ae <__swhatbuf_r+0x12>
 80051d4:	9901      	ldr	r1, [sp, #4]
 80051d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80051da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80051de:	4259      	negs	r1, r3
 80051e0:	4159      	adcs	r1, r3
 80051e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051e6:	e7eb      	b.n	80051c0 <__swhatbuf_r+0x24>

080051e8 <__smakebuf_r>:
 80051e8:	898b      	ldrh	r3, [r1, #12]
 80051ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051ec:	079d      	lsls	r5, r3, #30
 80051ee:	4606      	mov	r6, r0
 80051f0:	460c      	mov	r4, r1
 80051f2:	d507      	bpl.n	8005204 <__smakebuf_r+0x1c>
 80051f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80051f8:	6023      	str	r3, [r4, #0]
 80051fa:	6123      	str	r3, [r4, #16]
 80051fc:	2301      	movs	r3, #1
 80051fe:	6163      	str	r3, [r4, #20]
 8005200:	b003      	add	sp, #12
 8005202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005204:	ab01      	add	r3, sp, #4
 8005206:	466a      	mov	r2, sp
 8005208:	f7ff ffc8 	bl	800519c <__swhatbuf_r>
 800520c:	9f00      	ldr	r7, [sp, #0]
 800520e:	4605      	mov	r5, r0
 8005210:	4639      	mov	r1, r7
 8005212:	4630      	mov	r0, r6
 8005214:	f7ff f8da 	bl	80043cc <_malloc_r>
 8005218:	b948      	cbnz	r0, 800522e <__smakebuf_r+0x46>
 800521a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800521e:	059a      	lsls	r2, r3, #22
 8005220:	d4ee      	bmi.n	8005200 <__smakebuf_r+0x18>
 8005222:	f023 0303 	bic.w	r3, r3, #3
 8005226:	f043 0302 	orr.w	r3, r3, #2
 800522a:	81a3      	strh	r3, [r4, #12]
 800522c:	e7e2      	b.n	80051f4 <__smakebuf_r+0xc>
 800522e:	89a3      	ldrh	r3, [r4, #12]
 8005230:	6020      	str	r0, [r4, #0]
 8005232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005236:	81a3      	strh	r3, [r4, #12]
 8005238:	9b01      	ldr	r3, [sp, #4]
 800523a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800523e:	b15b      	cbz	r3, 8005258 <__smakebuf_r+0x70>
 8005240:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005244:	4630      	mov	r0, r6
 8005246:	f000 f81d 	bl	8005284 <_isatty_r>
 800524a:	b128      	cbz	r0, 8005258 <__smakebuf_r+0x70>
 800524c:	89a3      	ldrh	r3, [r4, #12]
 800524e:	f023 0303 	bic.w	r3, r3, #3
 8005252:	f043 0301 	orr.w	r3, r3, #1
 8005256:	81a3      	strh	r3, [r4, #12]
 8005258:	89a3      	ldrh	r3, [r4, #12]
 800525a:	431d      	orrs	r5, r3
 800525c:	81a5      	strh	r5, [r4, #12]
 800525e:	e7cf      	b.n	8005200 <__smakebuf_r+0x18>

08005260 <_fstat_r>:
 8005260:	b538      	push	{r3, r4, r5, lr}
 8005262:	4d07      	ldr	r5, [pc, #28]	@ (8005280 <_fstat_r+0x20>)
 8005264:	2300      	movs	r3, #0
 8005266:	4604      	mov	r4, r0
 8005268:	4608      	mov	r0, r1
 800526a:	4611      	mov	r1, r2
 800526c:	602b      	str	r3, [r5, #0]
 800526e:	f7fb ffe9 	bl	8001244 <_fstat>
 8005272:	1c43      	adds	r3, r0, #1
 8005274:	d102      	bne.n	800527c <_fstat_r+0x1c>
 8005276:	682b      	ldr	r3, [r5, #0]
 8005278:	b103      	cbz	r3, 800527c <_fstat_r+0x1c>
 800527a:	6023      	str	r3, [r4, #0]
 800527c:	bd38      	pop	{r3, r4, r5, pc}
 800527e:	bf00      	nop
 8005280:	200002fc 	.word	0x200002fc

08005284 <_isatty_r>:
 8005284:	b538      	push	{r3, r4, r5, lr}
 8005286:	4d06      	ldr	r5, [pc, #24]	@ (80052a0 <_isatty_r+0x1c>)
 8005288:	2300      	movs	r3, #0
 800528a:	4604      	mov	r4, r0
 800528c:	4608      	mov	r0, r1
 800528e:	602b      	str	r3, [r5, #0]
 8005290:	f7fb ffe8 	bl	8001264 <_isatty>
 8005294:	1c43      	adds	r3, r0, #1
 8005296:	d102      	bne.n	800529e <_isatty_r+0x1a>
 8005298:	682b      	ldr	r3, [r5, #0]
 800529a:	b103      	cbz	r3, 800529e <_isatty_r+0x1a>
 800529c:	6023      	str	r3, [r4, #0]
 800529e:	bd38      	pop	{r3, r4, r5, pc}
 80052a0:	200002fc 	.word	0x200002fc

080052a4 <_init>:
 80052a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a6:	bf00      	nop
 80052a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052aa:	bc08      	pop	{r3}
 80052ac:	469e      	mov	lr, r3
 80052ae:	4770      	bx	lr

080052b0 <_fini>:
 80052b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b2:	bf00      	nop
 80052b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052b6:	bc08      	pop	{r3}
 80052b8:	469e      	mov	lr, r3
 80052ba:	4770      	bx	lr
