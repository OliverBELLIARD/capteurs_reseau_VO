
capteurs_reseaux_VO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bf0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002db4  08002db4  00003db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002df0  08002df0  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002df0  08002df0  00003df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002df8  08002df8  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002df8  08002df8  00003df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002dfc  08002dfc  00003dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002e00  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08002e68  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08002e68  00004220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088cd  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001978  00000000  00000000  0000c965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  0000e2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005bd  00000000  00000000  0000ea80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021fc6  00000000  00000000  0000f03d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a1d3  00000000  00000000  00031003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca136  00000000  00000000  0003b1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010530c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002398  00000000  00000000  00105350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001076e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002d9c 	.word	0x08002d9c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	08002d9c 	.word	0x08002d9c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]
 800050e:	4b2d      	ldr	r3, [pc, #180]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a2c      	ldr	r2, [pc, #176]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b2a      	ldr	r3, [pc, #168]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	613b      	str	r3, [r7, #16]
 8000524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	4b26      	ldr	r3, [pc, #152]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	4a25      	ldr	r2, [pc, #148]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000534:	6313      	str	r3, [r2, #48]	@ 0x30
 8000536:	4b23      	ldr	r3, [pc, #140]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	4b1f      	ldr	r3, [pc, #124]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	4a1e      	ldr	r2, [pc, #120]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	@ 0x30
 8000552:	4b1c      	ldr	r3, [pc, #112]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	4b18      	ldr	r3, [pc, #96]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	4a17      	ldr	r2, [pc, #92]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	@ 0x30
 800056e:	4b15      	ldr	r3, [pc, #84]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2120      	movs	r1, #32
 800057e:	4812      	ldr	r0, [pc, #72]	@ (80005c8 <MX_GPIO_Init+0xd4>)
 8000580:	f000 fd52 	bl	8001028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000584:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800058a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800058e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	4619      	mov	r1, r3
 800059a:	480c      	ldr	r0, [pc, #48]	@ (80005cc <MX_GPIO_Init+0xd8>)
 800059c:	f000 fbb0 	bl	8000d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005a0:	2320      	movs	r3, #32
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a4:	2301      	movs	r3, #1
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	4804      	ldr	r0, [pc, #16]	@ (80005c8 <MX_GPIO_Init+0xd4>)
 80005b8:	f000 fba2 	bl	8000d00 <HAL_GPIO_Init>

}
 80005bc:	bf00      	nop
 80005be:	3728      	adds	r7, #40	@ 0x28
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40020000 	.word	0x40020000
 80005cc:	40020800 	.word	0x40020800

080005d0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80005d8:	1d39      	adds	r1, r7, #4
 80005da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005de:	2201      	movs	r2, #1
 80005e0:	4803      	ldr	r0, [pc, #12]	@ (80005f0 <__io_putchar+0x20>)
 80005e2:	f001 fb73 	bl	8001ccc <HAL_UART_Transmit>

	return ch;
 80005e6:	687b      	ldr	r3, [r7, #4]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000088 	.word	0x20000088

080005f4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005f8:	f000 fa2a 	bl	8000a50 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005fc:	f000 f80c 	bl	8000618 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000600:	f7ff ff78 	bl	80004f4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000604:	f000 f988 	bl	8000918 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	printf("\r\n=== TP Capteurs & Réseaux ===\r\n");
 8000608:	4802      	ldr	r0, [pc, #8]	@ (8000614 <main+0x20>)
 800060a:	f002 f833 	bl	8002674 <puts>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800060e:	bf00      	nop
 8000610:	e7fd      	b.n	800060e <main+0x1a>
 8000612:	bf00      	nop
 8000614:	08002db4 	.word	0x08002db4

08000618 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	@ 0x50
 800061c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	2234      	movs	r2, #52	@ 0x34
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f002 f904 	bl	8002834 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b2a      	ldr	r3, [pc, #168]	@ (80006ec <SystemClock_Config+0xd4>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	4a29      	ldr	r2, [pc, #164]	@ (80006ec <SystemClock_Config+0xd4>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	@ 0x40
 800064c:	4b27      	ldr	r3, [pc, #156]	@ (80006ec <SystemClock_Config+0xd4>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000658:	2300      	movs	r3, #0
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	4b24      	ldr	r3, [pc, #144]	@ (80006f0 <SystemClock_Config+0xd8>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000664:	4a22      	ldr	r2, [pc, #136]	@ (80006f0 <SystemClock_Config+0xd8>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b20      	ldr	r3, [pc, #128]	@ (80006f0 <SystemClock_Config+0xd8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 800068c:	2310      	movs	r3, #16
 800068e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000690:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000694:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000696:	2304      	movs	r3, #4
 8000698:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800069a:	2302      	movs	r3, #2
 800069c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800069e:	2302      	movs	r3, #2
 80006a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 f822 	bl	80016f0 <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 80006b2:	f000 f81f 	bl	80006f4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2302      	movs	r3, #2
 80006bc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	2102      	movs	r1, #2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 fcc2 	bl	800105c <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xca>
	{
		Error_Handler();
 80006de:	f000 f809 	bl	80006f4 <Error_Handler>
	}
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	@ 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <Error_Handler+0x8>

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b10      	ldr	r3, [pc, #64]	@ (800074c <HAL_MspInit+0x4c>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800070e:	4a0f      	ldr	r2, [pc, #60]	@ (800074c <HAL_MspInit+0x4c>)
 8000710:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000714:	6453      	str	r3, [r2, #68]	@ 0x44
 8000716:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <HAL_MspInit+0x4c>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800071a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <HAL_MspInit+0x4c>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072a:	4a08      	ldr	r2, [pc, #32]	@ (800074c <HAL_MspInit+0x4c>)
 800072c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000730:	6413      	str	r3, [r2, #64]	@ 0x40
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <HAL_MspInit+0x4c>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800073e:	2007      	movs	r0, #7
 8000740:	f000 faaa 	bl	8000c98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40023800 	.word	0x40023800

08000750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <NMI_Handler+0x4>

08000758 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <HardFault_Handler+0x4>

08000760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <MemManage_Handler+0x4>

08000768 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <BusFault_Handler+0x4>

08000770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <UsageFault_Handler+0x4>

08000778 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a6:	f000 f9a5 	bl	8000af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}

080007ae <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b086      	sub	sp, #24
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	60f8      	str	r0, [r7, #12]
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	e00a      	b.n	80007d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007c0:	f3af 8000 	nop.w
 80007c4:	4601      	mov	r1, r0
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	1c5a      	adds	r2, r3, #1
 80007ca:	60ba      	str	r2, [r7, #8]
 80007cc:	b2ca      	uxtb	r2, r1
 80007ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	3301      	adds	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	697a      	ldr	r2, [r7, #20]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	429a      	cmp	r2, r3
 80007dc:	dbf0      	blt.n	80007c0 <_read+0x12>
  }

  return len;
 80007de:	687b      	ldr	r3, [r7, #4]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3718      	adds	r7, #24
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	e009      	b.n	800080e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	1c5a      	adds	r2, r3, #1
 80007fe:	60ba      	str	r2, [r7, #8]
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fee4 	bl	80005d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	3301      	adds	r3, #1
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	697a      	ldr	r2, [r7, #20]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	429a      	cmp	r2, r3
 8000814:	dbf1      	blt.n	80007fa <_write+0x12>
  }
  return len;
 8000816:	687b      	ldr	r3, [r7, #4]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <_close>:

int _close(int file)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000828:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800082c:	4618      	mov	r0, r3
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000848:	605a      	str	r2, [r3, #4]
  return 0;
 800084a:	2300      	movs	r3, #0
}
 800084c:	4618      	mov	r0, r3
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <_isatty>:

int _isatty(int file)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000860:	2301      	movs	r3, #1
}
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800086e:	b480      	push	{r7}
 8000870:	b085      	sub	sp, #20
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000890:	4a14      	ldr	r2, [pc, #80]	@ (80008e4 <_sbrk+0x5c>)
 8000892:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <_sbrk+0x60>)
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800089c:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <_sbrk+0x64>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d102      	bne.n	80008aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <_sbrk+0x64>)
 80008a6:	4a12      	ldr	r2, [pc, #72]	@ (80008f0 <_sbrk+0x68>)
 80008a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008aa:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <_sbrk+0x64>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4413      	add	r3, r2
 80008b2:	693a      	ldr	r2, [r7, #16]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d207      	bcs.n	80008c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b8:	f002 f80a 	bl	80028d0 <__errno>
 80008bc:	4603      	mov	r3, r0
 80008be:	220c      	movs	r2, #12
 80008c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008c6:	e009      	b.n	80008dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c8:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <_sbrk+0x64>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ce:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <_sbrk+0x64>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4413      	add	r3, r2
 80008d6:	4a05      	ldr	r2, [pc, #20]	@ (80008ec <_sbrk+0x64>)
 80008d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008da:	68fb      	ldr	r3, [r7, #12]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20020000 	.word	0x20020000
 80008e8:	00000400 	.word	0x00000400
 80008ec:	20000084 	.word	0x20000084
 80008f0:	20000220 	.word	0x20000220

080008f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f8:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <SystemInit+0x20>)
 80008fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008fe:	4a05      	ldr	r2, [pc, #20]	@ (8000914 <SystemInit+0x20>)
 8000900:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000904:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800091c:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <MX_USART2_UART_Init+0x4c>)
 800091e:	4a12      	ldr	r2, [pc, #72]	@ (8000968 <MX_USART2_UART_Init+0x50>)
 8000920:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000922:	4b10      	ldr	r3, [pc, #64]	@ (8000964 <MX_USART2_UART_Init+0x4c>)
 8000924:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000928:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b0e      	ldr	r3, [pc, #56]	@ (8000964 <MX_USART2_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <MX_USART2_UART_Init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	@ (8000964 <MX_USART2_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <MX_USART2_UART_Init+0x4c>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <MX_USART2_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <MX_USART2_UART_Init+0x4c>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	@ (8000964 <MX_USART2_UART_Init+0x4c>)
 8000950:	f001 f96c 	bl	8001c2c <HAL_UART_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800095a:	f7ff fecb 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000088 	.word	0x20000088
 8000968:	40004400 	.word	0x40004400

0800096c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	@ 0x28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a19      	ldr	r2, [pc, #100]	@ (80009f0 <HAL_UART_MspInit+0x84>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d12b      	bne.n	80009e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <HAL_UART_MspInit+0x88>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000996:	4a17      	ldr	r2, [pc, #92]	@ (80009f4 <HAL_UART_MspInit+0x88>)
 8000998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800099c:	6413      	str	r3, [r2, #64]	@ 0x40
 800099e:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <HAL_UART_MspInit+0x88>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <HAL_UART_MspInit+0x88>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a10      	ldr	r2, [pc, #64]	@ (80009f4 <HAL_UART_MspInit+0x88>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <HAL_UART_MspInit+0x88>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009c6:	230c      	movs	r3, #12
 80009c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009d6:	2307      	movs	r3, #7
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <HAL_UART_MspInit+0x8c>)
 80009e2:	f000 f98d 	bl	8000d00 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	@ 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40004400 	.word	0x40004400
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020000 	.word	0x40020000

080009fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a00:	f7ff ff78 	bl	80008f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a04:	480c      	ldr	r0, [pc, #48]	@ (8000a38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a06:	490d      	ldr	r1, [pc, #52]	@ (8000a3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a08:	4a0d      	ldr	r2, [pc, #52]	@ (8000a40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a0c:	e002      	b.n	8000a14 <LoopCopyDataInit>

08000a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a12:	3304      	adds	r3, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a18:	d3f9      	bcc.n	8000a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a20:	e001      	b.n	8000a26 <LoopFillZerobss>

08000a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a24:	3204      	adds	r2, #4

08000a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a28:	d3fb      	bcc.n	8000a22 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a2a:	f001 ff57 	bl	80028dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a2e:	f7ff fde1 	bl	80005f4 <main>
  bx  lr    
 8000a32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a3c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a40:	08002e00 	.word	0x08002e00
  ldr r2, =_sbss
 8000a44:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a48:	20000220 	.word	0x20000220

08000a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC_IRQHandler>
	...

08000a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a54:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0d      	ldr	r2, [pc, #52]	@ (8000a90 <HAL_Init+0x40>)
 8000a5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a60:	4b0b      	ldr	r3, [pc, #44]	@ (8000a90 <HAL_Init+0x40>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0a      	ldr	r2, [pc, #40]	@ (8000a90 <HAL_Init+0x40>)
 8000a66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a6c:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <HAL_Init+0x40>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a07      	ldr	r2, [pc, #28]	@ (8000a90 <HAL_Init+0x40>)
 8000a72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a78:	2003      	movs	r0, #3
 8000a7a:	f000 f90d 	bl	8000c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f000 f808 	bl	8000a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a84:	f7ff fe3c 	bl	8000700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023c00 	.word	0x40023c00

08000a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <HAL_InitTick+0x54>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <HAL_InitTick+0x58>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 f917 	bl	8000ce6 <HAL_SYSTICK_Config>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e00e      	b.n	8000ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b0f      	cmp	r3, #15
 8000ac6:	d80a      	bhi.n	8000ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ad0:	f000 f8ed 	bl	8000cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad4:	4a06      	ldr	r2, [pc, #24]	@ (8000af0 <HAL_InitTick+0x5c>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
 8000adc:	e000      	b.n	8000ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	20000008 	.word	0x20000008
 8000af0:	20000004 	.word	0x20000004

08000af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af8:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <HAL_IncTick+0x20>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <HAL_IncTick+0x24>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	4a04      	ldr	r2, [pc, #16]	@ (8000b18 <HAL_IncTick+0x24>)
 8000b06:	6013      	str	r3, [r2, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000008 	.word	0x20000008
 8000b18:	200000d0 	.word	0x200000d0

08000b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b20:	4b03      	ldr	r3, [pc, #12]	@ (8000b30 <HAL_GetTick+0x14>)
 8000b22:	681b      	ldr	r3, [r3, #0]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	200000d0 	.word	0x200000d0

08000b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b66:	4a04      	ldr	r2, [pc, #16]	@ (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	60d3      	str	r3, [r2, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	@ (8000b94 <__NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	@ (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	@ (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	@ 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	@ 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c64:	d301      	bcc.n	8000c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00f      	b.n	8000c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c94 <SysTick_Config+0x40>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c72:	210f      	movs	r1, #15
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c78:	f7ff ff8e 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7c:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <SysTick_Config+0x40>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c82:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <SysTick_Config+0x40>)
 8000c84:	2207      	movs	r2, #7
 8000c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff47 	bl	8000b34 <__NVIC_SetPriorityGrouping>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc0:	f7ff ff5c 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	6978      	ldr	r0, [r7, #20]
 8000ccc:	f7ff ff8e 	bl	8000bec <NVIC_EncodePriority>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff5d 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff ffb0 	bl	8000c54 <SysTick_Config>
 8000cf4:	4603      	mov	r3, r0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	@ 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	e165      	b.n	8000fe8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	f040 8154 	bne.w	8000fe2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 0303 	and.w	r3, r3, #3
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d005      	beq.n	8000d52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d130      	bne.n	8000db4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4013      	ands	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	68da      	ldr	r2, [r3, #12]
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d88:	2201      	movs	r2, #1
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	091b      	lsrs	r3, r3, #4
 8000d9e:	f003 0201 	and.w	r2, r3, #1
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d017      	beq.n	8000df0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	2203      	movs	r2, #3
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d123      	bne.n	8000e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	08da      	lsrs	r2, r3, #3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3208      	adds	r2, #8
 8000e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	f003 0307 	and.w	r3, r3, #7
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	220f      	movs	r2, #15
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	691a      	ldr	r2, [r3, #16]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	08da      	lsrs	r2, r3, #3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3208      	adds	r2, #8
 8000e3e:	69b9      	ldr	r1, [r7, #24]
 8000e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0203 	and.w	r2, r3, #3
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f000 80ae 	beq.w	8000fe2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b5d      	ldr	r3, [pc, #372]	@ (8001000 <HAL_GPIO_Init+0x300>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8e:	4a5c      	ldr	r2, [pc, #368]	@ (8001000 <HAL_GPIO_Init+0x300>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e96:	4b5a      	ldr	r3, [pc, #360]	@ (8001000 <HAL_GPIO_Init+0x300>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ea2:	4a58      	ldr	r2, [pc, #352]	@ (8001004 <HAL_GPIO_Init+0x304>)
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	220f      	movs	r2, #15
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a4f      	ldr	r2, [pc, #316]	@ (8001008 <HAL_GPIO_Init+0x308>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d025      	beq.n	8000f1a <HAL_GPIO_Init+0x21a>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a4e      	ldr	r2, [pc, #312]	@ (800100c <HAL_GPIO_Init+0x30c>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d01f      	beq.n	8000f16 <HAL_GPIO_Init+0x216>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a4d      	ldr	r2, [pc, #308]	@ (8001010 <HAL_GPIO_Init+0x310>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d019      	beq.n	8000f12 <HAL_GPIO_Init+0x212>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a4c      	ldr	r2, [pc, #304]	@ (8001014 <HAL_GPIO_Init+0x314>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d013      	beq.n	8000f0e <HAL_GPIO_Init+0x20e>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4b      	ldr	r2, [pc, #300]	@ (8001018 <HAL_GPIO_Init+0x318>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d00d      	beq.n	8000f0a <HAL_GPIO_Init+0x20a>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4a      	ldr	r2, [pc, #296]	@ (800101c <HAL_GPIO_Init+0x31c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d007      	beq.n	8000f06 <HAL_GPIO_Init+0x206>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a49      	ldr	r2, [pc, #292]	@ (8001020 <HAL_GPIO_Init+0x320>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d101      	bne.n	8000f02 <HAL_GPIO_Init+0x202>
 8000efe:	2306      	movs	r3, #6
 8000f00:	e00c      	b.n	8000f1c <HAL_GPIO_Init+0x21c>
 8000f02:	2307      	movs	r3, #7
 8000f04:	e00a      	b.n	8000f1c <HAL_GPIO_Init+0x21c>
 8000f06:	2305      	movs	r3, #5
 8000f08:	e008      	b.n	8000f1c <HAL_GPIO_Init+0x21c>
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	e006      	b.n	8000f1c <HAL_GPIO_Init+0x21c>
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e004      	b.n	8000f1c <HAL_GPIO_Init+0x21c>
 8000f12:	2302      	movs	r3, #2
 8000f14:	e002      	b.n	8000f1c <HAL_GPIO_Init+0x21c>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <HAL_GPIO_Init+0x21c>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	69fa      	ldr	r2, [r7, #28]
 8000f1e:	f002 0203 	and.w	r2, r2, #3
 8000f22:	0092      	lsls	r2, r2, #2
 8000f24:	4093      	lsls	r3, r2
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f2c:	4935      	ldr	r1, [pc, #212]	@ (8001004 <HAL_GPIO_Init+0x304>)
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	089b      	lsrs	r3, r3, #2
 8000f32:	3302      	adds	r3, #2
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001024 <HAL_GPIO_Init+0x324>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f5e:	4a31      	ldr	r2, [pc, #196]	@ (8001024 <HAL_GPIO_Init+0x324>)
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f64:	4b2f      	ldr	r3, [pc, #188]	@ (8001024 <HAL_GPIO_Init+0x324>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f88:	4a26      	ldr	r2, [pc, #152]	@ (8001024 <HAL_GPIO_Init+0x324>)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f8e:	4b25      	ldr	r3, [pc, #148]	@ (8001024 <HAL_GPIO_Init+0x324>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8001024 <HAL_GPIO_Init+0x324>)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8001024 <HAL_GPIO_Init+0x324>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fdc:	4a11      	ldr	r2, [pc, #68]	@ (8001024 <HAL_GPIO_Init+0x324>)
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	61fb      	str	r3, [r7, #28]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	2b0f      	cmp	r3, #15
 8000fec:	f67f ae96 	bls.w	8000d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3724      	adds	r7, #36	@ 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40013800 	.word	0x40013800
 8001008:	40020000 	.word	0x40020000
 800100c:	40020400 	.word	0x40020400
 8001010:	40020800 	.word	0x40020800
 8001014:	40020c00 	.word	0x40020c00
 8001018:	40021000 	.word	0x40021000
 800101c:	40021400 	.word	0x40021400
 8001020:	40021800 	.word	0x40021800
 8001024:	40013c00 	.word	0x40013c00

08001028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	807b      	strh	r3, [r7, #2]
 8001034:	4613      	mov	r3, r2
 8001036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001038:	787b      	ldrb	r3, [r7, #1]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800103e:	887a      	ldrh	r2, [r7, #2]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001044:	e003      	b.n	800104e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001046:	887b      	ldrh	r3, [r7, #2]
 8001048:	041a      	lsls	r2, r3, #16
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	619a      	str	r2, [r3, #24]
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e0cc      	b.n	800120a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001070:	4b68      	ldr	r3, [pc, #416]	@ (8001214 <HAL_RCC_ClockConfig+0x1b8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 030f 	and.w	r3, r3, #15
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	429a      	cmp	r2, r3
 800107c:	d90c      	bls.n	8001098 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800107e:	4b65      	ldr	r3, [pc, #404]	@ (8001214 <HAL_RCC_ClockConfig+0x1b8>)
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001086:	4b63      	ldr	r3, [pc, #396]	@ (8001214 <HAL_RCC_ClockConfig+0x1b8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	429a      	cmp	r2, r3
 8001092:	d001      	beq.n	8001098 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e0b8      	b.n	800120a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d020      	beq.n	80010e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d005      	beq.n	80010bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010b0:	4b59      	ldr	r3, [pc, #356]	@ (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	4a58      	ldr	r2, [pc, #352]	@ (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80010b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80010ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d005      	beq.n	80010d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010c8:	4b53      	ldr	r3, [pc, #332]	@ (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	4a52      	ldr	r2, [pc, #328]	@ (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80010ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80010d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010d4:	4b50      	ldr	r3, [pc, #320]	@ (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	494d      	ldr	r1, [pc, #308]	@ (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d044      	beq.n	800117c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d107      	bne.n	800110a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fa:	4b47      	ldr	r3, [pc, #284]	@ (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d119      	bne.n	800113a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e07f      	b.n	800120a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d003      	beq.n	800111a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001116:	2b03      	cmp	r3, #3
 8001118:	d107      	bne.n	800112a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800111a:	4b3f      	ldr	r3, [pc, #252]	@ (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d109      	bne.n	800113a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e06f      	b.n	800120a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112a:	4b3b      	ldr	r3, [pc, #236]	@ (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e067      	b.n	800120a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800113a:	4b37      	ldr	r3, [pc, #220]	@ (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f023 0203 	bic.w	r2, r3, #3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	4934      	ldr	r1, [pc, #208]	@ (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 8001148:	4313      	orrs	r3, r2
 800114a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800114c:	f7ff fce6 	bl	8000b1c <HAL_GetTick>
 8001150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001152:	e00a      	b.n	800116a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001154:	f7ff fce2 	bl	8000b1c <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001162:	4293      	cmp	r3, r2
 8001164:	d901      	bls.n	800116a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e04f      	b.n	800120a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800116a:	4b2b      	ldr	r3, [pc, #172]	@ (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 020c 	and.w	r2, r3, #12
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	429a      	cmp	r2, r3
 800117a:	d1eb      	bne.n	8001154 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800117c:	4b25      	ldr	r3, [pc, #148]	@ (8001214 <HAL_RCC_ClockConfig+0x1b8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 030f 	and.w	r3, r3, #15
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	429a      	cmp	r2, r3
 8001188:	d20c      	bcs.n	80011a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800118a:	4b22      	ldr	r3, [pc, #136]	@ (8001214 <HAL_RCC_ClockConfig+0x1b8>)
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001192:	4b20      	ldr	r3, [pc, #128]	@ (8001214 <HAL_RCC_ClockConfig+0x1b8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	429a      	cmp	r2, r3
 800119e:	d001      	beq.n	80011a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e032      	b.n	800120a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d008      	beq.n	80011c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011b0:	4b19      	ldr	r3, [pc, #100]	@ (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	4916      	ldr	r1, [pc, #88]	@ (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0308 	and.w	r3, r3, #8
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d009      	beq.n	80011e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011ce:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	490e      	ldr	r1, [pc, #56]	@ (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011e2:	f000 f855 	bl	8001290 <HAL_RCC_GetSysClockFreq>
 80011e6:	4602      	mov	r2, r0
 80011e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	091b      	lsrs	r3, r3, #4
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	490a      	ldr	r1, [pc, #40]	@ (800121c <HAL_RCC_ClockConfig+0x1c0>)
 80011f4:	5ccb      	ldrb	r3, [r1, r3]
 80011f6:	fa22 f303 	lsr.w	r3, r2, r3
 80011fa:	4a09      	ldr	r2, [pc, #36]	@ (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80011fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80011fe:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <HAL_RCC_ClockConfig+0x1c8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fc46 	bl	8000a94 <HAL_InitTick>

  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023c00 	.word	0x40023c00
 8001218:	40023800 	.word	0x40023800
 800121c:	08002dd8 	.word	0x08002dd8
 8001220:	20000000 	.word	0x20000000
 8001224:	20000004 	.word	0x20000004

08001228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800122c:	4b03      	ldr	r3, [pc, #12]	@ (800123c <HAL_RCC_GetHCLKFreq+0x14>)
 800122e:	681b      	ldr	r3, [r3, #0]
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000000 	.word	0x20000000

08001240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001244:	f7ff fff0 	bl	8001228 <HAL_RCC_GetHCLKFreq>
 8001248:	4602      	mov	r2, r0
 800124a:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <HAL_RCC_GetPCLK1Freq+0x20>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	0a9b      	lsrs	r3, r3, #10
 8001250:	f003 0307 	and.w	r3, r3, #7
 8001254:	4903      	ldr	r1, [pc, #12]	@ (8001264 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001256:	5ccb      	ldrb	r3, [r1, r3]
 8001258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800125c:	4618      	mov	r0, r3
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40023800 	.word	0x40023800
 8001264:	08002de8 	.word	0x08002de8

08001268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800126c:	f7ff ffdc 	bl	8001228 <HAL_RCC_GetHCLKFreq>
 8001270:	4602      	mov	r2, r0
 8001272:	4b05      	ldr	r3, [pc, #20]	@ (8001288 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	0b5b      	lsrs	r3, r3, #13
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	4903      	ldr	r1, [pc, #12]	@ (800128c <HAL_RCC_GetPCLK2Freq+0x24>)
 800127e:	5ccb      	ldrb	r3, [r1, r3]
 8001280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001284:	4618      	mov	r0, r3
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40023800 	.word	0x40023800
 800128c:	08002de8 	.word	0x08002de8

08001290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001294:	b0ae      	sub	sp, #184	@ 0xb8
 8001296:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012b6:	4bcb      	ldr	r3, [pc, #812]	@ (80015e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b0c      	cmp	r3, #12
 80012c0:	f200 8206 	bhi.w	80016d0 <HAL_RCC_GetSysClockFreq+0x440>
 80012c4:	a201      	add	r2, pc, #4	@ (adr r2, 80012cc <HAL_RCC_GetSysClockFreq+0x3c>)
 80012c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ca:	bf00      	nop
 80012cc:	08001301 	.word	0x08001301
 80012d0:	080016d1 	.word	0x080016d1
 80012d4:	080016d1 	.word	0x080016d1
 80012d8:	080016d1 	.word	0x080016d1
 80012dc:	08001309 	.word	0x08001309
 80012e0:	080016d1 	.word	0x080016d1
 80012e4:	080016d1 	.word	0x080016d1
 80012e8:	080016d1 	.word	0x080016d1
 80012ec:	08001311 	.word	0x08001311
 80012f0:	080016d1 	.word	0x080016d1
 80012f4:	080016d1 	.word	0x080016d1
 80012f8:	080016d1 	.word	0x080016d1
 80012fc:	08001501 	.word	0x08001501
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001300:	4bb9      	ldr	r3, [pc, #740]	@ (80015e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001302:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001306:	e1e7      	b.n	80016d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001308:	4bb8      	ldr	r3, [pc, #736]	@ (80015ec <HAL_RCC_GetSysClockFreq+0x35c>)
 800130a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800130e:	e1e3      	b.n	80016d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001310:	4bb4      	ldr	r3, [pc, #720]	@ (80015e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001318:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800131c:	4bb1      	ldr	r3, [pc, #708]	@ (80015e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d071      	beq.n	800140c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001328:	4bae      	ldr	r3, [pc, #696]	@ (80015e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	099b      	lsrs	r3, r3, #6
 800132e:	2200      	movs	r2, #0
 8001330:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001334:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001338:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800133c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001340:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800134a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800134e:	4622      	mov	r2, r4
 8001350:	462b      	mov	r3, r5
 8001352:	f04f 0000 	mov.w	r0, #0
 8001356:	f04f 0100 	mov.w	r1, #0
 800135a:	0159      	lsls	r1, r3, #5
 800135c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001360:	0150      	lsls	r0, r2, #5
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4621      	mov	r1, r4
 8001368:	1a51      	subs	r1, r2, r1
 800136a:	6439      	str	r1, [r7, #64]	@ 0x40
 800136c:	4629      	mov	r1, r5
 800136e:	eb63 0301 	sbc.w	r3, r3, r1
 8001372:	647b      	str	r3, [r7, #68]	@ 0x44
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001380:	4649      	mov	r1, r9
 8001382:	018b      	lsls	r3, r1, #6
 8001384:	4641      	mov	r1, r8
 8001386:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800138a:	4641      	mov	r1, r8
 800138c:	018a      	lsls	r2, r1, #6
 800138e:	4641      	mov	r1, r8
 8001390:	1a51      	subs	r1, r2, r1
 8001392:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001394:	4649      	mov	r1, r9
 8001396:	eb63 0301 	sbc.w	r3, r3, r1
 800139a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80013a8:	4649      	mov	r1, r9
 80013aa:	00cb      	lsls	r3, r1, #3
 80013ac:	4641      	mov	r1, r8
 80013ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80013b2:	4641      	mov	r1, r8
 80013b4:	00ca      	lsls	r2, r1, #3
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	4603      	mov	r3, r0
 80013bc:	4622      	mov	r2, r4
 80013be:	189b      	adds	r3, r3, r2
 80013c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80013c2:	462b      	mov	r3, r5
 80013c4:	460a      	mov	r2, r1
 80013c6:	eb42 0303 	adc.w	r3, r2, r3
 80013ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80013d8:	4629      	mov	r1, r5
 80013da:	024b      	lsls	r3, r1, #9
 80013dc:	4621      	mov	r1, r4
 80013de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80013e2:	4621      	mov	r1, r4
 80013e4:	024a      	lsls	r2, r1, #9
 80013e6:	4610      	mov	r0, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80013ee:	2200      	movs	r2, #0
 80013f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80013f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80013f8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80013fc:	f7fe ff02 	bl	8000204 <__aeabi_uldivmod>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4613      	mov	r3, r2
 8001406:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800140a:	e067      	b.n	80014dc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800140c:	4b75      	ldr	r3, [pc, #468]	@ (80015e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	099b      	lsrs	r3, r3, #6
 8001412:	2200      	movs	r2, #0
 8001414:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001418:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800141c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001424:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001426:	2300      	movs	r3, #0
 8001428:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800142a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800142e:	4622      	mov	r2, r4
 8001430:	462b      	mov	r3, r5
 8001432:	f04f 0000 	mov.w	r0, #0
 8001436:	f04f 0100 	mov.w	r1, #0
 800143a:	0159      	lsls	r1, r3, #5
 800143c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001440:	0150      	lsls	r0, r2, #5
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4621      	mov	r1, r4
 8001448:	1a51      	subs	r1, r2, r1
 800144a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800144c:	4629      	mov	r1, r5
 800144e:	eb63 0301 	sbc.w	r3, r3, r1
 8001452:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001460:	4649      	mov	r1, r9
 8001462:	018b      	lsls	r3, r1, #6
 8001464:	4641      	mov	r1, r8
 8001466:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800146a:	4641      	mov	r1, r8
 800146c:	018a      	lsls	r2, r1, #6
 800146e:	4641      	mov	r1, r8
 8001470:	ebb2 0a01 	subs.w	sl, r2, r1
 8001474:	4649      	mov	r1, r9
 8001476:	eb63 0b01 	sbc.w	fp, r3, r1
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	f04f 0300 	mov.w	r3, #0
 8001482:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001486:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800148a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800148e:	4692      	mov	sl, r2
 8001490:	469b      	mov	fp, r3
 8001492:	4623      	mov	r3, r4
 8001494:	eb1a 0303 	adds.w	r3, sl, r3
 8001498:	623b      	str	r3, [r7, #32]
 800149a:	462b      	mov	r3, r5
 800149c:	eb4b 0303 	adc.w	r3, fp, r3
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	f04f 0300 	mov.w	r3, #0
 80014aa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80014ae:	4629      	mov	r1, r5
 80014b0:	028b      	lsls	r3, r1, #10
 80014b2:	4621      	mov	r1, r4
 80014b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014b8:	4621      	mov	r1, r4
 80014ba:	028a      	lsls	r2, r1, #10
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014c4:	2200      	movs	r2, #0
 80014c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80014c8:	677a      	str	r2, [r7, #116]	@ 0x74
 80014ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80014ce:	f7fe fe99 	bl	8000204 <__aeabi_uldivmod>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4613      	mov	r3, r2
 80014d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80014dc:	4b41      	ldr	r3, [pc, #260]	@ (80015e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	0c1b      	lsrs	r3, r3, #16
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	3301      	adds	r3, #1
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80014ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80014f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80014f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80014fe:	e0eb      	b.n	80016d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001500:	4b38      	ldr	r3, [pc, #224]	@ (80015e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001508:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800150c:	4b35      	ldr	r3, [pc, #212]	@ (80015e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d06b      	beq.n	80015f0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001518:	4b32      	ldr	r3, [pc, #200]	@ (80015e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	099b      	lsrs	r3, r3, #6
 800151e:	2200      	movs	r2, #0
 8001520:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001522:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001524:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800152a:	663b      	str	r3, [r7, #96]	@ 0x60
 800152c:	2300      	movs	r3, #0
 800152e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001530:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001534:	4622      	mov	r2, r4
 8001536:	462b      	mov	r3, r5
 8001538:	f04f 0000 	mov.w	r0, #0
 800153c:	f04f 0100 	mov.w	r1, #0
 8001540:	0159      	lsls	r1, r3, #5
 8001542:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001546:	0150      	lsls	r0, r2, #5
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4621      	mov	r1, r4
 800154e:	1a51      	subs	r1, r2, r1
 8001550:	61b9      	str	r1, [r7, #24]
 8001552:	4629      	mov	r1, r5
 8001554:	eb63 0301 	sbc.w	r3, r3, r1
 8001558:	61fb      	str	r3, [r7, #28]
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001566:	4659      	mov	r1, fp
 8001568:	018b      	lsls	r3, r1, #6
 800156a:	4651      	mov	r1, sl
 800156c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001570:	4651      	mov	r1, sl
 8001572:	018a      	lsls	r2, r1, #6
 8001574:	4651      	mov	r1, sl
 8001576:	ebb2 0801 	subs.w	r8, r2, r1
 800157a:	4659      	mov	r1, fp
 800157c:	eb63 0901 	sbc.w	r9, r3, r1
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800158c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001590:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001594:	4690      	mov	r8, r2
 8001596:	4699      	mov	r9, r3
 8001598:	4623      	mov	r3, r4
 800159a:	eb18 0303 	adds.w	r3, r8, r3
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	462b      	mov	r3, r5
 80015a2:	eb49 0303 	adc.w	r3, r9, r3
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	f04f 0300 	mov.w	r3, #0
 80015b0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80015b4:	4629      	mov	r1, r5
 80015b6:	024b      	lsls	r3, r1, #9
 80015b8:	4621      	mov	r1, r4
 80015ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015be:	4621      	mov	r1, r4
 80015c0:	024a      	lsls	r2, r1, #9
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015ca:	2200      	movs	r2, #0
 80015cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80015ce:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80015d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80015d4:	f7fe fe16 	bl	8000204 <__aeabi_uldivmod>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4613      	mov	r3, r2
 80015de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80015e2:	e065      	b.n	80016b0 <HAL_RCC_GetSysClockFreq+0x420>
 80015e4:	40023800 	.word	0x40023800
 80015e8:	00f42400 	.word	0x00f42400
 80015ec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f0:	4b3d      	ldr	r3, [pc, #244]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	099b      	lsrs	r3, r3, #6
 80015f6:	2200      	movs	r2, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	4611      	mov	r1, r2
 80015fc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001600:	653b      	str	r3, [r7, #80]	@ 0x50
 8001602:	2300      	movs	r3, #0
 8001604:	657b      	str	r3, [r7, #84]	@ 0x54
 8001606:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800160a:	4642      	mov	r2, r8
 800160c:	464b      	mov	r3, r9
 800160e:	f04f 0000 	mov.w	r0, #0
 8001612:	f04f 0100 	mov.w	r1, #0
 8001616:	0159      	lsls	r1, r3, #5
 8001618:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800161c:	0150      	lsls	r0, r2, #5
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4641      	mov	r1, r8
 8001624:	1a51      	subs	r1, r2, r1
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	4649      	mov	r1, r9
 800162a:	eb63 0301 	sbc.w	r3, r3, r1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800163c:	4659      	mov	r1, fp
 800163e:	018b      	lsls	r3, r1, #6
 8001640:	4651      	mov	r1, sl
 8001642:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001646:	4651      	mov	r1, sl
 8001648:	018a      	lsls	r2, r1, #6
 800164a:	4651      	mov	r1, sl
 800164c:	1a54      	subs	r4, r2, r1
 800164e:	4659      	mov	r1, fp
 8001650:	eb63 0501 	sbc.w	r5, r3, r1
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	00eb      	lsls	r3, r5, #3
 800165e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001662:	00e2      	lsls	r2, r4, #3
 8001664:	4614      	mov	r4, r2
 8001666:	461d      	mov	r5, r3
 8001668:	4643      	mov	r3, r8
 800166a:	18e3      	adds	r3, r4, r3
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	464b      	mov	r3, r9
 8001670:	eb45 0303 	adc.w	r3, r5, r3
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	f04f 0300 	mov.w	r3, #0
 800167e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001682:	4629      	mov	r1, r5
 8001684:	028b      	lsls	r3, r1, #10
 8001686:	4621      	mov	r1, r4
 8001688:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800168c:	4621      	mov	r1, r4
 800168e:	028a      	lsls	r2, r1, #10
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001698:	2200      	movs	r2, #0
 800169a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800169c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800169e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80016a2:	f7fe fdaf 	bl	8000204 <__aeabi_uldivmod>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4613      	mov	r3, r2
 80016ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80016b0:	4b0d      	ldr	r3, [pc, #52]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	0f1b      	lsrs	r3, r3, #28
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80016be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80016c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80016c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80016ce:	e003      	b.n	80016d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x45c>)
 80016d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80016d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	37b8      	adds	r7, #184	@ 0xb8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800
 80016ec:	00f42400 	.word	0x00f42400

080016f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e28d      	b.n	8001c1e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 8083 	beq.w	8001816 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001710:	4b94      	ldr	r3, [pc, #592]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 030c 	and.w	r3, r3, #12
 8001718:	2b04      	cmp	r3, #4
 800171a:	d019      	beq.n	8001750 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800171c:	4b91      	ldr	r3, [pc, #580]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 030c 	and.w	r3, r3, #12
        || \
 8001724:	2b08      	cmp	r3, #8
 8001726:	d106      	bne.n	8001736 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001728:	4b8e      	ldr	r3, [pc, #568]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001730:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001734:	d00c      	beq.n	8001750 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001736:	4b8b      	ldr	r3, [pc, #556]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800173e:	2b0c      	cmp	r3, #12
 8001740:	d112      	bne.n	8001768 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001742:	4b88      	ldr	r3, [pc, #544]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800174a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800174e:	d10b      	bne.n	8001768 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001750:	4b84      	ldr	r3, [pc, #528]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d05b      	beq.n	8001814 <HAL_RCC_OscConfig+0x124>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d157      	bne.n	8001814 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e25a      	b.n	8001c1e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001770:	d106      	bne.n	8001780 <HAL_RCC_OscConfig+0x90>
 8001772:	4b7c      	ldr	r3, [pc, #496]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a7b      	ldr	r2, [pc, #492]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 8001778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	e01d      	b.n	80017bc <HAL_RCC_OscConfig+0xcc>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001788:	d10c      	bne.n	80017a4 <HAL_RCC_OscConfig+0xb4>
 800178a:	4b76      	ldr	r3, [pc, #472]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a75      	ldr	r2, [pc, #468]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 8001790:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	4b73      	ldr	r3, [pc, #460]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a72      	ldr	r2, [pc, #456]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 800179c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	e00b      	b.n	80017bc <HAL_RCC_OscConfig+0xcc>
 80017a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a6e      	ldr	r2, [pc, #440]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 80017aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4b6c      	ldr	r3, [pc, #432]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a6b      	ldr	r2, [pc, #428]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 80017b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d013      	beq.n	80017ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff f9aa 	bl	8000b1c <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017cc:	f7ff f9a6 	bl	8000b1c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b64      	cmp	r3, #100	@ 0x64
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e21f      	b.n	8001c1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	4b61      	ldr	r3, [pc, #388]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0xdc>
 80017ea:	e014      	b.n	8001816 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7ff f996 	bl	8000b1c <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f4:	f7ff f992 	bl	8000b1c <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	@ 0x64
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e20b      	b.n	8001c1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001806:	4b57      	ldr	r3, [pc, #348]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x104>
 8001812:	e000      	b.n	8001816 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d06f      	beq.n	8001902 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001822:	4b50      	ldr	r3, [pc, #320]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b00      	cmp	r3, #0
 800182c:	d017      	beq.n	800185e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800182e:	4b4d      	ldr	r3, [pc, #308]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
        || \
 8001836:	2b08      	cmp	r3, #8
 8001838:	d105      	bne.n	8001846 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800183a:	4b4a      	ldr	r3, [pc, #296]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00b      	beq.n	800185e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001846:	4b47      	ldr	r3, [pc, #284]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800184e:	2b0c      	cmp	r3, #12
 8001850:	d11c      	bne.n	800188c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001852:	4b44      	ldr	r3, [pc, #272]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d116      	bne.n	800188c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185e:	4b41      	ldr	r3, [pc, #260]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d005      	beq.n	8001876 <HAL_RCC_OscConfig+0x186>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d001      	beq.n	8001876 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e1d3      	b.n	8001c1e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001876:	4b3b      	ldr	r3, [pc, #236]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4937      	ldr	r1, [pc, #220]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188a:	e03a      	b.n	8001902 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d020      	beq.n	80018d6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001894:	4b34      	ldr	r3, [pc, #208]	@ (8001968 <HAL_RCC_OscConfig+0x278>)
 8001896:	2201      	movs	r2, #1
 8001898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189a:	f7ff f93f 	bl	8000b1c <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a2:	f7ff f93b 	bl	8000b1c <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e1b4      	b.n	8001c1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c0:	4b28      	ldr	r3, [pc, #160]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4925      	ldr	r1, [pc, #148]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	600b      	str	r3, [r1, #0]
 80018d4:	e015      	b.n	8001902 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d6:	4b24      	ldr	r3, [pc, #144]	@ (8001968 <HAL_RCC_OscConfig+0x278>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018dc:	f7ff f91e 	bl	8000b1c <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e4:	f7ff f91a 	bl	8000b1c <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e193      	b.n	8001c1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d036      	beq.n	800197c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d016      	beq.n	8001944 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001916:	4b15      	ldr	r3, [pc, #84]	@ (800196c <HAL_RCC_OscConfig+0x27c>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191c:	f7ff f8fe 	bl	8000b1c <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001924:	f7ff f8fa 	bl	8000b1c <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e173      	b.n	8001c1e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001936:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <HAL_RCC_OscConfig+0x274>)
 8001938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x234>
 8001942:	e01b      	b.n	800197c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001944:	4b09      	ldr	r3, [pc, #36]	@ (800196c <HAL_RCC_OscConfig+0x27c>)
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194a:	f7ff f8e7 	bl	8000b1c <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001950:	e00e      	b.n	8001970 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001952:	f7ff f8e3 	bl	8000b1c <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d907      	bls.n	8001970 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e15c      	b.n	8001c1e <HAL_RCC_OscConfig+0x52e>
 8001964:	40023800 	.word	0x40023800
 8001968:	42470000 	.word	0x42470000
 800196c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001970:	4b8a      	ldr	r3, [pc, #552]	@ (8001b9c <HAL_RCC_OscConfig+0x4ac>)
 8001972:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1ea      	bne.n	8001952 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 8097 	beq.w	8001ab8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198a:	2300      	movs	r3, #0
 800198c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198e:	4b83      	ldr	r3, [pc, #524]	@ (8001b9c <HAL_RCC_OscConfig+0x4ac>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10f      	bne.n	80019ba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	4b7f      	ldr	r3, [pc, #508]	@ (8001b9c <HAL_RCC_OscConfig+0x4ac>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	4a7e      	ldr	r2, [pc, #504]	@ (8001b9c <HAL_RCC_OscConfig+0x4ac>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019aa:	4b7c      	ldr	r3, [pc, #496]	@ (8001b9c <HAL_RCC_OscConfig+0x4ac>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b6:	2301      	movs	r3, #1
 80019b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ba:	4b79      	ldr	r3, [pc, #484]	@ (8001ba0 <HAL_RCC_OscConfig+0x4b0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d118      	bne.n	80019f8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c6:	4b76      	ldr	r3, [pc, #472]	@ (8001ba0 <HAL_RCC_OscConfig+0x4b0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a75      	ldr	r2, [pc, #468]	@ (8001ba0 <HAL_RCC_OscConfig+0x4b0>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d2:	f7ff f8a3 	bl	8000b1c <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019da:	f7ff f89f 	bl	8000b1c <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e118      	b.n	8001c1e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ec:	4b6c      	ldr	r3, [pc, #432]	@ (8001ba0 <HAL_RCC_OscConfig+0x4b0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x31e>
 8001a00:	4b66      	ldr	r3, [pc, #408]	@ (8001b9c <HAL_RCC_OscConfig+0x4ac>)
 8001a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a04:	4a65      	ldr	r2, [pc, #404]	@ (8001b9c <HAL_RCC_OscConfig+0x4ac>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a0c:	e01c      	b.n	8001a48 <HAL_RCC_OscConfig+0x358>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b05      	cmp	r3, #5
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x340>
 8001a16:	4b61      	ldr	r3, [pc, #388]	@ (8001b9c <HAL_RCC_OscConfig+0x4ac>)
 8001a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a1a:	4a60      	ldr	r2, [pc, #384]	@ (8001b9c <HAL_RCC_OscConfig+0x4ac>)
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a22:	4b5e      	ldr	r3, [pc, #376]	@ (8001b9c <HAL_RCC_OscConfig+0x4ac>)
 8001a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a26:	4a5d      	ldr	r2, [pc, #372]	@ (8001b9c <HAL_RCC_OscConfig+0x4ac>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a2e:	e00b      	b.n	8001a48 <HAL_RCC_OscConfig+0x358>
 8001a30:	4b5a      	ldr	r3, [pc, #360]	@ (8001b9c <HAL_RCC_OscConfig+0x4ac>)
 8001a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a34:	4a59      	ldr	r2, [pc, #356]	@ (8001b9c <HAL_RCC_OscConfig+0x4ac>)
 8001a36:	f023 0301 	bic.w	r3, r3, #1
 8001a3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a3c:	4b57      	ldr	r3, [pc, #348]	@ (8001b9c <HAL_RCC_OscConfig+0x4ac>)
 8001a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a40:	4a56      	ldr	r2, [pc, #344]	@ (8001b9c <HAL_RCC_OscConfig+0x4ac>)
 8001a42:	f023 0304 	bic.w	r3, r3, #4
 8001a46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d015      	beq.n	8001a7c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a50:	f7ff f864 	bl	8000b1c <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a58:	f7ff f860 	bl	8000b1c <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e0d7      	b.n	8001c1e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6e:	4b4b      	ldr	r3, [pc, #300]	@ (8001b9c <HAL_RCC_OscConfig+0x4ac>)
 8001a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0ee      	beq.n	8001a58 <HAL_RCC_OscConfig+0x368>
 8001a7a:	e014      	b.n	8001aa6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7c:	f7ff f84e 	bl	8000b1c <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a82:	e00a      	b.n	8001a9a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a84:	f7ff f84a 	bl	8000b1c <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e0c1      	b.n	8001c1e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9a:	4b40      	ldr	r3, [pc, #256]	@ (8001b9c <HAL_RCC_OscConfig+0x4ac>)
 8001a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1ee      	bne.n	8001a84 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001aa6:	7dfb      	ldrb	r3, [r7, #23]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d105      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aac:	4b3b      	ldr	r3, [pc, #236]	@ (8001b9c <HAL_RCC_OscConfig+0x4ac>)
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	4a3a      	ldr	r2, [pc, #232]	@ (8001b9c <HAL_RCC_OscConfig+0x4ac>)
 8001ab2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ab6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 80ad 	beq.w	8001c1c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ac2:	4b36      	ldr	r3, [pc, #216]	@ (8001b9c <HAL_RCC_OscConfig+0x4ac>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d060      	beq.n	8001b90 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d145      	bne.n	8001b62 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad6:	4b33      	ldr	r3, [pc, #204]	@ (8001ba4 <HAL_RCC_OscConfig+0x4b4>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff f81e 	bl	8000b1c <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7ff f81a 	bl	8000b1c <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e093      	b.n	8001c1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af6:	4b29      	ldr	r3, [pc, #164]	@ (8001b9c <HAL_RCC_OscConfig+0x4ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69da      	ldr	r2, [r3, #28]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b10:	019b      	lsls	r3, r3, #6
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b18:	085b      	lsrs	r3, r3, #1
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	041b      	lsls	r3, r3, #16
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b24:	061b      	lsls	r3, r3, #24
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2c:	071b      	lsls	r3, r3, #28
 8001b2e:	491b      	ldr	r1, [pc, #108]	@ (8001b9c <HAL_RCC_OscConfig+0x4ac>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b34:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba4 <HAL_RCC_OscConfig+0x4b4>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3a:	f7fe ffef 	bl	8000b1c <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b42:	f7fe ffeb 	bl	8000b1c <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e064      	b.n	8001c1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b54:	4b11      	ldr	r3, [pc, #68]	@ (8001b9c <HAL_RCC_OscConfig+0x4ac>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x452>
 8001b60:	e05c      	b.n	8001c1c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b62:	4b10      	ldr	r3, [pc, #64]	@ (8001ba4 <HAL_RCC_OscConfig+0x4b4>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7fe ffd8 	bl	8000b1c <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b70:	f7fe ffd4 	bl	8000b1c <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e04d      	b.n	8001c1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b82:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <HAL_RCC_OscConfig+0x4ac>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x480>
 8001b8e:	e045      	b.n	8001c1c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d107      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e040      	b.n	8001c1e <HAL_RCC_OscConfig+0x52e>
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40007000 	.word	0x40007000
 8001ba4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c28 <HAL_RCC_OscConfig+0x538>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d030      	beq.n	8001c18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d129      	bne.n	8001c18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d122      	bne.n	8001c18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bd8:	4013      	ands	r3, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d119      	bne.n	8001c18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bee:	085b      	lsrs	r3, r3, #1
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d10f      	bne.n	8001c18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d107      	bne.n	8001c18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d001      	beq.n	8001c1c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800

08001c2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e042      	b.n	8001cc4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d106      	bne.n	8001c58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7fe fe8a 	bl	800096c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2224      	movs	r2, #36	@ 0x24
 8001c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f973 	bl	8001f5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	691a      	ldr	r2, [r3, #16]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001c84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	695a      	ldr	r2, [r3, #20]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001c94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ca4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	@ 0x28
 8001cd0:	af02      	add	r7, sp, #8
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b20      	cmp	r3, #32
 8001cea:	d175      	bne.n	8001dd8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d002      	beq.n	8001cf8 <HAL_UART_Transmit+0x2c>
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e06e      	b.n	8001dda <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2221      	movs	r2, #33	@ 0x21
 8001d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d0a:	f7fe ff07 	bl	8000b1c <HAL_GetTick>
 8001d0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	88fa      	ldrh	r2, [r7, #6]
 8001d14:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	88fa      	ldrh	r2, [r7, #6]
 8001d1a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d24:	d108      	bne.n	8001d38 <HAL_UART_Transmit+0x6c>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d104      	bne.n	8001d38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	61bb      	str	r3, [r7, #24]
 8001d36:	e003      	b.n	8001d40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d40:	e02e      	b.n	8001da0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2180      	movs	r1, #128	@ 0x80
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 f848 	bl	8001de2 <UART_WaitOnFlagUntilTimeout>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e03a      	b.n	8001dda <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10b      	bne.n	8001d82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	61bb      	str	r3, [r7, #24]
 8001d80:	e007      	b.n	8001d92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	781a      	ldrb	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1cb      	bne.n	8001d42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2200      	movs	r2, #0
 8001db2:	2140      	movs	r1, #64	@ 0x40
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f000 f814 	bl	8001de2 <UART_WaitOnFlagUntilTimeout>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e006      	b.n	8001dda <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	e000      	b.n	8001dda <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001dd8:	2302      	movs	r3, #2
  }
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3720      	adds	r7, #32
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b086      	sub	sp, #24
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	603b      	str	r3, [r7, #0]
 8001dee:	4613      	mov	r3, r2
 8001df0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001df2:	e03b      	b.n	8001e6c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001dfa:	d037      	beq.n	8001e6c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dfc:	f7fe fe8e 	bl	8000b1c <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	6a3a      	ldr	r2, [r7, #32]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d302      	bcc.n	8001e12 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e03a      	b.n	8001e8c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d023      	beq.n	8001e6c <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b80      	cmp	r3, #128	@ 0x80
 8001e28:	d020      	beq.n	8001e6c <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2b40      	cmp	r3, #64	@ 0x40
 8001e2e:	d01d      	beq.n	8001e6c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d116      	bne.n	8001e6c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f000 f81d 	bl	8001e94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e00f      	b.n	8001e8c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	4013      	ands	r3, r2
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	bf0c      	ite	eq
 8001e7c:	2301      	moveq	r3, #1
 8001e7e:	2300      	movne	r3, #0
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d0b4      	beq.n	8001df4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b095      	sub	sp, #84	@ 0x54
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	330c      	adds	r3, #12
 8001ea2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ea6:	e853 3f00 	ldrex	r3, [r3]
 8001eaa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	330c      	adds	r3, #12
 8001eba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ebc:	643a      	str	r2, [r7, #64]	@ 0x40
 8001ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ec0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001ec2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001ec4:	e841 2300 	strex	r3, r2, [r1]
 8001ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1e5      	bne.n	8001e9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	3314      	adds	r3, #20
 8001ed6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	e853 3f00 	ldrex	r3, [r3]
 8001ede:	61fb      	str	r3, [r7, #28]
   return(result);
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f023 0301 	bic.w	r3, r3, #1
 8001ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	3314      	adds	r3, #20
 8001eee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ef0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ef4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ef6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ef8:	e841 2300 	strex	r3, r2, [r1]
 8001efc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1e5      	bne.n	8001ed0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d119      	bne.n	8001f40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	330c      	adds	r3, #12
 8001f12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	e853 3f00 	ldrex	r3, [r3]
 8001f1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f023 0310 	bic.w	r3, r3, #16
 8001f22:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	330c      	adds	r3, #12
 8001f2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001f2c:	61ba      	str	r2, [r7, #24]
 8001f2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f30:	6979      	ldr	r1, [r7, #20]
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	e841 2300 	strex	r3, r2, [r1]
 8001f38:	613b      	str	r3, [r7, #16]
   return(result);
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1e5      	bne.n	8001f0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001f4e:	bf00      	nop
 8001f50:	3754      	adds	r7, #84	@ 0x54
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f60:	b0c0      	sub	sp, #256	@ 0x100
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f78:	68d9      	ldr	r1, [r3, #12]
 8001f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	ea40 0301 	orr.w	r3, r0, r1
 8001f84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001fb4:	f021 010c 	bic.w	r1, r1, #12
 8001fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001fc2:	430b      	orrs	r3, r1
 8001fc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fd6:	6999      	ldr	r1, [r3, #24]
 8001fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	ea40 0301 	orr.w	r3, r0, r1
 8001fe2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	4b8f      	ldr	r3, [pc, #572]	@ (8002228 <UART_SetConfig+0x2cc>)
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d005      	beq.n	8001ffc <UART_SetConfig+0xa0>
 8001ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	4b8d      	ldr	r3, [pc, #564]	@ (800222c <UART_SetConfig+0x2d0>)
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d104      	bne.n	8002006 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ffc:	f7ff f934 	bl	8001268 <HAL_RCC_GetPCLK2Freq>
 8002000:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002004:	e003      	b.n	800200e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002006:	f7ff f91b 	bl	8001240 <HAL_RCC_GetPCLK1Freq>
 800200a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800200e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002018:	f040 810c 	bne.w	8002234 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800201c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002020:	2200      	movs	r2, #0
 8002022:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002026:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800202a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800202e:	4622      	mov	r2, r4
 8002030:	462b      	mov	r3, r5
 8002032:	1891      	adds	r1, r2, r2
 8002034:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002036:	415b      	adcs	r3, r3
 8002038:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800203a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800203e:	4621      	mov	r1, r4
 8002040:	eb12 0801 	adds.w	r8, r2, r1
 8002044:	4629      	mov	r1, r5
 8002046:	eb43 0901 	adc.w	r9, r3, r1
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002056:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800205a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800205e:	4690      	mov	r8, r2
 8002060:	4699      	mov	r9, r3
 8002062:	4623      	mov	r3, r4
 8002064:	eb18 0303 	adds.w	r3, r8, r3
 8002068:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800206c:	462b      	mov	r3, r5
 800206e:	eb49 0303 	adc.w	r3, r9, r3
 8002072:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002082:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002086:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800208a:	460b      	mov	r3, r1
 800208c:	18db      	adds	r3, r3, r3
 800208e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002090:	4613      	mov	r3, r2
 8002092:	eb42 0303 	adc.w	r3, r2, r3
 8002096:	657b      	str	r3, [r7, #84]	@ 0x54
 8002098:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800209c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80020a0:	f7fe f8b0 	bl	8000204 <__aeabi_uldivmod>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4b61      	ldr	r3, [pc, #388]	@ (8002230 <UART_SetConfig+0x2d4>)
 80020aa:	fba3 2302 	umull	r2, r3, r3, r2
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	011c      	lsls	r4, r3, #4
 80020b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020b6:	2200      	movs	r2, #0
 80020b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80020bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80020c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80020c4:	4642      	mov	r2, r8
 80020c6:	464b      	mov	r3, r9
 80020c8:	1891      	adds	r1, r2, r2
 80020ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 80020cc:	415b      	adcs	r3, r3
 80020ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80020d4:	4641      	mov	r1, r8
 80020d6:	eb12 0a01 	adds.w	sl, r2, r1
 80020da:	4649      	mov	r1, r9
 80020dc:	eb43 0b01 	adc.w	fp, r3, r1
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020f4:	4692      	mov	sl, r2
 80020f6:	469b      	mov	fp, r3
 80020f8:	4643      	mov	r3, r8
 80020fa:	eb1a 0303 	adds.w	r3, sl, r3
 80020fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002102:	464b      	mov	r3, r9
 8002104:	eb4b 0303 	adc.w	r3, fp, r3
 8002108:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800210c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002118:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800211c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002120:	460b      	mov	r3, r1
 8002122:	18db      	adds	r3, r3, r3
 8002124:	643b      	str	r3, [r7, #64]	@ 0x40
 8002126:	4613      	mov	r3, r2
 8002128:	eb42 0303 	adc.w	r3, r2, r3
 800212c:	647b      	str	r3, [r7, #68]	@ 0x44
 800212e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002132:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002136:	f7fe f865 	bl	8000204 <__aeabi_uldivmod>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4611      	mov	r1, r2
 8002140:	4b3b      	ldr	r3, [pc, #236]	@ (8002230 <UART_SetConfig+0x2d4>)
 8002142:	fba3 2301 	umull	r2, r3, r3, r1
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	2264      	movs	r2, #100	@ 0x64
 800214a:	fb02 f303 	mul.w	r3, r2, r3
 800214e:	1acb      	subs	r3, r1, r3
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002156:	4b36      	ldr	r3, [pc, #216]	@ (8002230 <UART_SetConfig+0x2d4>)
 8002158:	fba3 2302 	umull	r2, r3, r3, r2
 800215c:	095b      	lsrs	r3, r3, #5
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002164:	441c      	add	r4, r3
 8002166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800216a:	2200      	movs	r2, #0
 800216c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002170:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002174:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002178:	4642      	mov	r2, r8
 800217a:	464b      	mov	r3, r9
 800217c:	1891      	adds	r1, r2, r2
 800217e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002180:	415b      	adcs	r3, r3
 8002182:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002184:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002188:	4641      	mov	r1, r8
 800218a:	1851      	adds	r1, r2, r1
 800218c:	6339      	str	r1, [r7, #48]	@ 0x30
 800218e:	4649      	mov	r1, r9
 8002190:	414b      	adcs	r3, r1
 8002192:	637b      	str	r3, [r7, #52]	@ 0x34
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80021a0:	4659      	mov	r1, fp
 80021a2:	00cb      	lsls	r3, r1, #3
 80021a4:	4651      	mov	r1, sl
 80021a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021aa:	4651      	mov	r1, sl
 80021ac:	00ca      	lsls	r2, r1, #3
 80021ae:	4610      	mov	r0, r2
 80021b0:	4619      	mov	r1, r3
 80021b2:	4603      	mov	r3, r0
 80021b4:	4642      	mov	r2, r8
 80021b6:	189b      	adds	r3, r3, r2
 80021b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80021bc:	464b      	mov	r3, r9
 80021be:	460a      	mov	r2, r1
 80021c0:	eb42 0303 	adc.w	r3, r2, r3
 80021c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80021d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80021d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80021dc:	460b      	mov	r3, r1
 80021de:	18db      	adds	r3, r3, r3
 80021e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021e2:	4613      	mov	r3, r2
 80021e4:	eb42 0303 	adc.w	r3, r2, r3
 80021e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80021ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80021f2:	f7fe f807 	bl	8000204 <__aeabi_uldivmod>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002230 <UART_SetConfig+0x2d4>)
 80021fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002200:	095b      	lsrs	r3, r3, #5
 8002202:	2164      	movs	r1, #100	@ 0x64
 8002204:	fb01 f303 	mul.w	r3, r1, r3
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	3332      	adds	r3, #50	@ 0x32
 800220e:	4a08      	ldr	r2, [pc, #32]	@ (8002230 <UART_SetConfig+0x2d4>)
 8002210:	fba2 2303 	umull	r2, r3, r2, r3
 8002214:	095b      	lsrs	r3, r3, #5
 8002216:	f003 0207 	and.w	r2, r3, #7
 800221a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4422      	add	r2, r4
 8002222:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002224:	e106      	b.n	8002434 <UART_SetConfig+0x4d8>
 8002226:	bf00      	nop
 8002228:	40011000 	.word	0x40011000
 800222c:	40011400 	.word	0x40011400
 8002230:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002234:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002238:	2200      	movs	r2, #0
 800223a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800223e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002242:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002246:	4642      	mov	r2, r8
 8002248:	464b      	mov	r3, r9
 800224a:	1891      	adds	r1, r2, r2
 800224c:	6239      	str	r1, [r7, #32]
 800224e:	415b      	adcs	r3, r3
 8002250:	627b      	str	r3, [r7, #36]	@ 0x24
 8002252:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002256:	4641      	mov	r1, r8
 8002258:	1854      	adds	r4, r2, r1
 800225a:	4649      	mov	r1, r9
 800225c:	eb43 0501 	adc.w	r5, r3, r1
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	00eb      	lsls	r3, r5, #3
 800226a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800226e:	00e2      	lsls	r2, r4, #3
 8002270:	4614      	mov	r4, r2
 8002272:	461d      	mov	r5, r3
 8002274:	4643      	mov	r3, r8
 8002276:	18e3      	adds	r3, r4, r3
 8002278:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800227c:	464b      	mov	r3, r9
 800227e:	eb45 0303 	adc.w	r3, r5, r3
 8002282:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002292:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80022a2:	4629      	mov	r1, r5
 80022a4:	008b      	lsls	r3, r1, #2
 80022a6:	4621      	mov	r1, r4
 80022a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022ac:	4621      	mov	r1, r4
 80022ae:	008a      	lsls	r2, r1, #2
 80022b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80022b4:	f7fd ffa6 	bl	8000204 <__aeabi_uldivmod>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4b60      	ldr	r3, [pc, #384]	@ (8002440 <UART_SetConfig+0x4e4>)
 80022be:	fba3 2302 	umull	r2, r3, r3, r2
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	011c      	lsls	r4, r3, #4
 80022c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022ca:	2200      	movs	r2, #0
 80022cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80022d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80022d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80022d8:	4642      	mov	r2, r8
 80022da:	464b      	mov	r3, r9
 80022dc:	1891      	adds	r1, r2, r2
 80022de:	61b9      	str	r1, [r7, #24]
 80022e0:	415b      	adcs	r3, r3
 80022e2:	61fb      	str	r3, [r7, #28]
 80022e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022e8:	4641      	mov	r1, r8
 80022ea:	1851      	adds	r1, r2, r1
 80022ec:	6139      	str	r1, [r7, #16]
 80022ee:	4649      	mov	r1, r9
 80022f0:	414b      	adcs	r3, r1
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	f04f 0300 	mov.w	r3, #0
 80022fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002300:	4659      	mov	r1, fp
 8002302:	00cb      	lsls	r3, r1, #3
 8002304:	4651      	mov	r1, sl
 8002306:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800230a:	4651      	mov	r1, sl
 800230c:	00ca      	lsls	r2, r1, #3
 800230e:	4610      	mov	r0, r2
 8002310:	4619      	mov	r1, r3
 8002312:	4603      	mov	r3, r0
 8002314:	4642      	mov	r2, r8
 8002316:	189b      	adds	r3, r3, r2
 8002318:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800231c:	464b      	mov	r3, r9
 800231e:	460a      	mov	r2, r1
 8002320:	eb42 0303 	adc.w	r3, r2, r3
 8002324:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002332:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002340:	4649      	mov	r1, r9
 8002342:	008b      	lsls	r3, r1, #2
 8002344:	4641      	mov	r1, r8
 8002346:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800234a:	4641      	mov	r1, r8
 800234c:	008a      	lsls	r2, r1, #2
 800234e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002352:	f7fd ff57 	bl	8000204 <__aeabi_uldivmod>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4611      	mov	r1, r2
 800235c:	4b38      	ldr	r3, [pc, #224]	@ (8002440 <UART_SetConfig+0x4e4>)
 800235e:	fba3 2301 	umull	r2, r3, r3, r1
 8002362:	095b      	lsrs	r3, r3, #5
 8002364:	2264      	movs	r2, #100	@ 0x64
 8002366:	fb02 f303 	mul.w	r3, r2, r3
 800236a:	1acb      	subs	r3, r1, r3
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	3332      	adds	r3, #50	@ 0x32
 8002370:	4a33      	ldr	r2, [pc, #204]	@ (8002440 <UART_SetConfig+0x4e4>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800237c:	441c      	add	r4, r3
 800237e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002382:	2200      	movs	r2, #0
 8002384:	673b      	str	r3, [r7, #112]	@ 0x70
 8002386:	677a      	str	r2, [r7, #116]	@ 0x74
 8002388:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800238c:	4642      	mov	r2, r8
 800238e:	464b      	mov	r3, r9
 8002390:	1891      	adds	r1, r2, r2
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	415b      	adcs	r3, r3
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800239c:	4641      	mov	r1, r8
 800239e:	1851      	adds	r1, r2, r1
 80023a0:	6039      	str	r1, [r7, #0]
 80023a2:	4649      	mov	r1, r9
 80023a4:	414b      	adcs	r3, r1
 80023a6:	607b      	str	r3, [r7, #4]
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023b4:	4659      	mov	r1, fp
 80023b6:	00cb      	lsls	r3, r1, #3
 80023b8:	4651      	mov	r1, sl
 80023ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023be:	4651      	mov	r1, sl
 80023c0:	00ca      	lsls	r2, r1, #3
 80023c2:	4610      	mov	r0, r2
 80023c4:	4619      	mov	r1, r3
 80023c6:	4603      	mov	r3, r0
 80023c8:	4642      	mov	r2, r8
 80023ca:	189b      	adds	r3, r3, r2
 80023cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023ce:	464b      	mov	r3, r9
 80023d0:	460a      	mov	r2, r1
 80023d2:	eb42 0303 	adc.w	r3, r2, r3
 80023d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80023d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80023e2:	667a      	str	r2, [r7, #100]	@ 0x64
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80023f0:	4649      	mov	r1, r9
 80023f2:	008b      	lsls	r3, r1, #2
 80023f4:	4641      	mov	r1, r8
 80023f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023fa:	4641      	mov	r1, r8
 80023fc:	008a      	lsls	r2, r1, #2
 80023fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002402:	f7fd feff 	bl	8000204 <__aeabi_uldivmod>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4b0d      	ldr	r3, [pc, #52]	@ (8002440 <UART_SetConfig+0x4e4>)
 800240c:	fba3 1302 	umull	r1, r3, r3, r2
 8002410:	095b      	lsrs	r3, r3, #5
 8002412:	2164      	movs	r1, #100	@ 0x64
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	3332      	adds	r3, #50	@ 0x32
 800241e:	4a08      	ldr	r2, [pc, #32]	@ (8002440 <UART_SetConfig+0x4e4>)
 8002420:	fba2 2303 	umull	r2, r3, r2, r3
 8002424:	095b      	lsrs	r3, r3, #5
 8002426:	f003 020f 	and.w	r2, r3, #15
 800242a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4422      	add	r2, r4
 8002432:	609a      	str	r2, [r3, #8]
}
 8002434:	bf00      	nop
 8002436:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800243a:	46bd      	mov	sp, r7
 800243c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002440:	51eb851f 	.word	0x51eb851f

08002444 <std>:
 8002444:	2300      	movs	r3, #0
 8002446:	b510      	push	{r4, lr}
 8002448:	4604      	mov	r4, r0
 800244a:	e9c0 3300 	strd	r3, r3, [r0]
 800244e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002452:	6083      	str	r3, [r0, #8]
 8002454:	8181      	strh	r1, [r0, #12]
 8002456:	6643      	str	r3, [r0, #100]	@ 0x64
 8002458:	81c2      	strh	r2, [r0, #14]
 800245a:	6183      	str	r3, [r0, #24]
 800245c:	4619      	mov	r1, r3
 800245e:	2208      	movs	r2, #8
 8002460:	305c      	adds	r0, #92	@ 0x5c
 8002462:	f000 f9e7 	bl	8002834 <memset>
 8002466:	4b0d      	ldr	r3, [pc, #52]	@ (800249c <std+0x58>)
 8002468:	6263      	str	r3, [r4, #36]	@ 0x24
 800246a:	4b0d      	ldr	r3, [pc, #52]	@ (80024a0 <std+0x5c>)
 800246c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800246e:	4b0d      	ldr	r3, [pc, #52]	@ (80024a4 <std+0x60>)
 8002470:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002472:	4b0d      	ldr	r3, [pc, #52]	@ (80024a8 <std+0x64>)
 8002474:	6323      	str	r3, [r4, #48]	@ 0x30
 8002476:	4b0d      	ldr	r3, [pc, #52]	@ (80024ac <std+0x68>)
 8002478:	6224      	str	r4, [r4, #32]
 800247a:	429c      	cmp	r4, r3
 800247c:	d006      	beq.n	800248c <std+0x48>
 800247e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002482:	4294      	cmp	r4, r2
 8002484:	d002      	beq.n	800248c <std+0x48>
 8002486:	33d0      	adds	r3, #208	@ 0xd0
 8002488:	429c      	cmp	r4, r3
 800248a:	d105      	bne.n	8002498 <std+0x54>
 800248c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002494:	f000 ba46 	b.w	8002924 <__retarget_lock_init_recursive>
 8002498:	bd10      	pop	{r4, pc}
 800249a:	bf00      	nop
 800249c:	08002685 	.word	0x08002685
 80024a0:	080026a7 	.word	0x080026a7
 80024a4:	080026df 	.word	0x080026df
 80024a8:	08002703 	.word	0x08002703
 80024ac:	200000d4 	.word	0x200000d4

080024b0 <stdio_exit_handler>:
 80024b0:	4a02      	ldr	r2, [pc, #8]	@ (80024bc <stdio_exit_handler+0xc>)
 80024b2:	4903      	ldr	r1, [pc, #12]	@ (80024c0 <stdio_exit_handler+0x10>)
 80024b4:	4803      	ldr	r0, [pc, #12]	@ (80024c4 <stdio_exit_handler+0x14>)
 80024b6:	f000 b869 	b.w	800258c <_fwalk_sglue>
 80024ba:	bf00      	nop
 80024bc:	2000000c 	.word	0x2000000c
 80024c0:	08002c25 	.word	0x08002c25
 80024c4:	2000001c 	.word	0x2000001c

080024c8 <cleanup_stdio>:
 80024c8:	6841      	ldr	r1, [r0, #4]
 80024ca:	4b0c      	ldr	r3, [pc, #48]	@ (80024fc <cleanup_stdio+0x34>)
 80024cc:	4299      	cmp	r1, r3
 80024ce:	b510      	push	{r4, lr}
 80024d0:	4604      	mov	r4, r0
 80024d2:	d001      	beq.n	80024d8 <cleanup_stdio+0x10>
 80024d4:	f000 fba6 	bl	8002c24 <_fflush_r>
 80024d8:	68a1      	ldr	r1, [r4, #8]
 80024da:	4b09      	ldr	r3, [pc, #36]	@ (8002500 <cleanup_stdio+0x38>)
 80024dc:	4299      	cmp	r1, r3
 80024de:	d002      	beq.n	80024e6 <cleanup_stdio+0x1e>
 80024e0:	4620      	mov	r0, r4
 80024e2:	f000 fb9f 	bl	8002c24 <_fflush_r>
 80024e6:	68e1      	ldr	r1, [r4, #12]
 80024e8:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <cleanup_stdio+0x3c>)
 80024ea:	4299      	cmp	r1, r3
 80024ec:	d004      	beq.n	80024f8 <cleanup_stdio+0x30>
 80024ee:	4620      	mov	r0, r4
 80024f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024f4:	f000 bb96 	b.w	8002c24 <_fflush_r>
 80024f8:	bd10      	pop	{r4, pc}
 80024fa:	bf00      	nop
 80024fc:	200000d4 	.word	0x200000d4
 8002500:	2000013c 	.word	0x2000013c
 8002504:	200001a4 	.word	0x200001a4

08002508 <global_stdio_init.part.0>:
 8002508:	b510      	push	{r4, lr}
 800250a:	4b0b      	ldr	r3, [pc, #44]	@ (8002538 <global_stdio_init.part.0+0x30>)
 800250c:	4c0b      	ldr	r4, [pc, #44]	@ (800253c <global_stdio_init.part.0+0x34>)
 800250e:	4a0c      	ldr	r2, [pc, #48]	@ (8002540 <global_stdio_init.part.0+0x38>)
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	4620      	mov	r0, r4
 8002514:	2200      	movs	r2, #0
 8002516:	2104      	movs	r1, #4
 8002518:	f7ff ff94 	bl	8002444 <std>
 800251c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002520:	2201      	movs	r2, #1
 8002522:	2109      	movs	r1, #9
 8002524:	f7ff ff8e 	bl	8002444 <std>
 8002528:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800252c:	2202      	movs	r2, #2
 800252e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002532:	2112      	movs	r1, #18
 8002534:	f7ff bf86 	b.w	8002444 <std>
 8002538:	2000020c 	.word	0x2000020c
 800253c:	200000d4 	.word	0x200000d4
 8002540:	080024b1 	.word	0x080024b1

08002544 <__sfp_lock_acquire>:
 8002544:	4801      	ldr	r0, [pc, #4]	@ (800254c <__sfp_lock_acquire+0x8>)
 8002546:	f000 b9ee 	b.w	8002926 <__retarget_lock_acquire_recursive>
 800254a:	bf00      	nop
 800254c:	20000215 	.word	0x20000215

08002550 <__sfp_lock_release>:
 8002550:	4801      	ldr	r0, [pc, #4]	@ (8002558 <__sfp_lock_release+0x8>)
 8002552:	f000 b9e9 	b.w	8002928 <__retarget_lock_release_recursive>
 8002556:	bf00      	nop
 8002558:	20000215 	.word	0x20000215

0800255c <__sinit>:
 800255c:	b510      	push	{r4, lr}
 800255e:	4604      	mov	r4, r0
 8002560:	f7ff fff0 	bl	8002544 <__sfp_lock_acquire>
 8002564:	6a23      	ldr	r3, [r4, #32]
 8002566:	b11b      	cbz	r3, 8002570 <__sinit+0x14>
 8002568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800256c:	f7ff bff0 	b.w	8002550 <__sfp_lock_release>
 8002570:	4b04      	ldr	r3, [pc, #16]	@ (8002584 <__sinit+0x28>)
 8002572:	6223      	str	r3, [r4, #32]
 8002574:	4b04      	ldr	r3, [pc, #16]	@ (8002588 <__sinit+0x2c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f5      	bne.n	8002568 <__sinit+0xc>
 800257c:	f7ff ffc4 	bl	8002508 <global_stdio_init.part.0>
 8002580:	e7f2      	b.n	8002568 <__sinit+0xc>
 8002582:	bf00      	nop
 8002584:	080024c9 	.word	0x080024c9
 8002588:	2000020c 	.word	0x2000020c

0800258c <_fwalk_sglue>:
 800258c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002590:	4607      	mov	r7, r0
 8002592:	4688      	mov	r8, r1
 8002594:	4614      	mov	r4, r2
 8002596:	2600      	movs	r6, #0
 8002598:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800259c:	f1b9 0901 	subs.w	r9, r9, #1
 80025a0:	d505      	bpl.n	80025ae <_fwalk_sglue+0x22>
 80025a2:	6824      	ldr	r4, [r4, #0]
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d1f7      	bne.n	8002598 <_fwalk_sglue+0xc>
 80025a8:	4630      	mov	r0, r6
 80025aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025ae:	89ab      	ldrh	r3, [r5, #12]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d907      	bls.n	80025c4 <_fwalk_sglue+0x38>
 80025b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80025b8:	3301      	adds	r3, #1
 80025ba:	d003      	beq.n	80025c4 <_fwalk_sglue+0x38>
 80025bc:	4629      	mov	r1, r5
 80025be:	4638      	mov	r0, r7
 80025c0:	47c0      	blx	r8
 80025c2:	4306      	orrs	r6, r0
 80025c4:	3568      	adds	r5, #104	@ 0x68
 80025c6:	e7e9      	b.n	800259c <_fwalk_sglue+0x10>

080025c8 <_puts_r>:
 80025c8:	6a03      	ldr	r3, [r0, #32]
 80025ca:	b570      	push	{r4, r5, r6, lr}
 80025cc:	6884      	ldr	r4, [r0, #8]
 80025ce:	4605      	mov	r5, r0
 80025d0:	460e      	mov	r6, r1
 80025d2:	b90b      	cbnz	r3, 80025d8 <_puts_r+0x10>
 80025d4:	f7ff ffc2 	bl	800255c <__sinit>
 80025d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80025da:	07db      	lsls	r3, r3, #31
 80025dc:	d405      	bmi.n	80025ea <_puts_r+0x22>
 80025de:	89a3      	ldrh	r3, [r4, #12]
 80025e0:	0598      	lsls	r0, r3, #22
 80025e2:	d402      	bmi.n	80025ea <_puts_r+0x22>
 80025e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80025e6:	f000 f99e 	bl	8002926 <__retarget_lock_acquire_recursive>
 80025ea:	89a3      	ldrh	r3, [r4, #12]
 80025ec:	0719      	lsls	r1, r3, #28
 80025ee:	d502      	bpl.n	80025f6 <_puts_r+0x2e>
 80025f0:	6923      	ldr	r3, [r4, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d135      	bne.n	8002662 <_puts_r+0x9a>
 80025f6:	4621      	mov	r1, r4
 80025f8:	4628      	mov	r0, r5
 80025fa:	f000 f8c5 	bl	8002788 <__swsetup_r>
 80025fe:	b380      	cbz	r0, 8002662 <_puts_r+0x9a>
 8002600:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8002604:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002606:	07da      	lsls	r2, r3, #31
 8002608:	d405      	bmi.n	8002616 <_puts_r+0x4e>
 800260a:	89a3      	ldrh	r3, [r4, #12]
 800260c:	059b      	lsls	r3, r3, #22
 800260e:	d402      	bmi.n	8002616 <_puts_r+0x4e>
 8002610:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002612:	f000 f989 	bl	8002928 <__retarget_lock_release_recursive>
 8002616:	4628      	mov	r0, r5
 8002618:	bd70      	pop	{r4, r5, r6, pc}
 800261a:	2b00      	cmp	r3, #0
 800261c:	da04      	bge.n	8002628 <_puts_r+0x60>
 800261e:	69a2      	ldr	r2, [r4, #24]
 8002620:	429a      	cmp	r2, r3
 8002622:	dc17      	bgt.n	8002654 <_puts_r+0x8c>
 8002624:	290a      	cmp	r1, #10
 8002626:	d015      	beq.n	8002654 <_puts_r+0x8c>
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	6022      	str	r2, [r4, #0]
 800262e:	7019      	strb	r1, [r3, #0]
 8002630:	68a3      	ldr	r3, [r4, #8]
 8002632:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002636:	3b01      	subs	r3, #1
 8002638:	60a3      	str	r3, [r4, #8]
 800263a:	2900      	cmp	r1, #0
 800263c:	d1ed      	bne.n	800261a <_puts_r+0x52>
 800263e:	2b00      	cmp	r3, #0
 8002640:	da11      	bge.n	8002666 <_puts_r+0x9e>
 8002642:	4622      	mov	r2, r4
 8002644:	210a      	movs	r1, #10
 8002646:	4628      	mov	r0, r5
 8002648:	f000 f85f 	bl	800270a <__swbuf_r>
 800264c:	3001      	adds	r0, #1
 800264e:	d0d7      	beq.n	8002600 <_puts_r+0x38>
 8002650:	250a      	movs	r5, #10
 8002652:	e7d7      	b.n	8002604 <_puts_r+0x3c>
 8002654:	4622      	mov	r2, r4
 8002656:	4628      	mov	r0, r5
 8002658:	f000 f857 	bl	800270a <__swbuf_r>
 800265c:	3001      	adds	r0, #1
 800265e:	d1e7      	bne.n	8002630 <_puts_r+0x68>
 8002660:	e7ce      	b.n	8002600 <_puts_r+0x38>
 8002662:	3e01      	subs	r6, #1
 8002664:	e7e4      	b.n	8002630 <_puts_r+0x68>
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	6022      	str	r2, [r4, #0]
 800266c:	220a      	movs	r2, #10
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	e7ee      	b.n	8002650 <_puts_r+0x88>
	...

08002674 <puts>:
 8002674:	4b02      	ldr	r3, [pc, #8]	@ (8002680 <puts+0xc>)
 8002676:	4601      	mov	r1, r0
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	f7ff bfa5 	b.w	80025c8 <_puts_r>
 800267e:	bf00      	nop
 8002680:	20000018 	.word	0x20000018

08002684 <__sread>:
 8002684:	b510      	push	{r4, lr}
 8002686:	460c      	mov	r4, r1
 8002688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800268c:	f000 f8fc 	bl	8002888 <_read_r>
 8002690:	2800      	cmp	r0, #0
 8002692:	bfab      	itete	ge
 8002694:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002696:	89a3      	ldrhlt	r3, [r4, #12]
 8002698:	181b      	addge	r3, r3, r0
 800269a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800269e:	bfac      	ite	ge
 80026a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80026a2:	81a3      	strhlt	r3, [r4, #12]
 80026a4:	bd10      	pop	{r4, pc}

080026a6 <__swrite>:
 80026a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026aa:	461f      	mov	r7, r3
 80026ac:	898b      	ldrh	r3, [r1, #12]
 80026ae:	05db      	lsls	r3, r3, #23
 80026b0:	4605      	mov	r5, r0
 80026b2:	460c      	mov	r4, r1
 80026b4:	4616      	mov	r6, r2
 80026b6:	d505      	bpl.n	80026c4 <__swrite+0x1e>
 80026b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026bc:	2302      	movs	r3, #2
 80026be:	2200      	movs	r2, #0
 80026c0:	f000 f8d0 	bl	8002864 <_lseek_r>
 80026c4:	89a3      	ldrh	r3, [r4, #12]
 80026c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026ce:	81a3      	strh	r3, [r4, #12]
 80026d0:	4632      	mov	r2, r6
 80026d2:	463b      	mov	r3, r7
 80026d4:	4628      	mov	r0, r5
 80026d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026da:	f000 b8e7 	b.w	80028ac <_write_r>

080026de <__sseek>:
 80026de:	b510      	push	{r4, lr}
 80026e0:	460c      	mov	r4, r1
 80026e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026e6:	f000 f8bd 	bl	8002864 <_lseek_r>
 80026ea:	1c43      	adds	r3, r0, #1
 80026ec:	89a3      	ldrh	r3, [r4, #12]
 80026ee:	bf15      	itete	ne
 80026f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80026f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80026f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80026fa:	81a3      	strheq	r3, [r4, #12]
 80026fc:	bf18      	it	ne
 80026fe:	81a3      	strhne	r3, [r4, #12]
 8002700:	bd10      	pop	{r4, pc}

08002702 <__sclose>:
 8002702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002706:	f000 b89d 	b.w	8002844 <_close_r>

0800270a <__swbuf_r>:
 800270a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270c:	460e      	mov	r6, r1
 800270e:	4614      	mov	r4, r2
 8002710:	4605      	mov	r5, r0
 8002712:	b118      	cbz	r0, 800271c <__swbuf_r+0x12>
 8002714:	6a03      	ldr	r3, [r0, #32]
 8002716:	b90b      	cbnz	r3, 800271c <__swbuf_r+0x12>
 8002718:	f7ff ff20 	bl	800255c <__sinit>
 800271c:	69a3      	ldr	r3, [r4, #24]
 800271e:	60a3      	str	r3, [r4, #8]
 8002720:	89a3      	ldrh	r3, [r4, #12]
 8002722:	071a      	lsls	r2, r3, #28
 8002724:	d501      	bpl.n	800272a <__swbuf_r+0x20>
 8002726:	6923      	ldr	r3, [r4, #16]
 8002728:	b943      	cbnz	r3, 800273c <__swbuf_r+0x32>
 800272a:	4621      	mov	r1, r4
 800272c:	4628      	mov	r0, r5
 800272e:	f000 f82b 	bl	8002788 <__swsetup_r>
 8002732:	b118      	cbz	r0, 800273c <__swbuf_r+0x32>
 8002734:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8002738:	4638      	mov	r0, r7
 800273a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800273c:	6823      	ldr	r3, [r4, #0]
 800273e:	6922      	ldr	r2, [r4, #16]
 8002740:	1a98      	subs	r0, r3, r2
 8002742:	6963      	ldr	r3, [r4, #20]
 8002744:	b2f6      	uxtb	r6, r6
 8002746:	4283      	cmp	r3, r0
 8002748:	4637      	mov	r7, r6
 800274a:	dc05      	bgt.n	8002758 <__swbuf_r+0x4e>
 800274c:	4621      	mov	r1, r4
 800274e:	4628      	mov	r0, r5
 8002750:	f000 fa68 	bl	8002c24 <_fflush_r>
 8002754:	2800      	cmp	r0, #0
 8002756:	d1ed      	bne.n	8002734 <__swbuf_r+0x2a>
 8002758:	68a3      	ldr	r3, [r4, #8]
 800275a:	3b01      	subs	r3, #1
 800275c:	60a3      	str	r3, [r4, #8]
 800275e:	6823      	ldr	r3, [r4, #0]
 8002760:	1c5a      	adds	r2, r3, #1
 8002762:	6022      	str	r2, [r4, #0]
 8002764:	701e      	strb	r6, [r3, #0]
 8002766:	6962      	ldr	r2, [r4, #20]
 8002768:	1c43      	adds	r3, r0, #1
 800276a:	429a      	cmp	r2, r3
 800276c:	d004      	beq.n	8002778 <__swbuf_r+0x6e>
 800276e:	89a3      	ldrh	r3, [r4, #12]
 8002770:	07db      	lsls	r3, r3, #31
 8002772:	d5e1      	bpl.n	8002738 <__swbuf_r+0x2e>
 8002774:	2e0a      	cmp	r6, #10
 8002776:	d1df      	bne.n	8002738 <__swbuf_r+0x2e>
 8002778:	4621      	mov	r1, r4
 800277a:	4628      	mov	r0, r5
 800277c:	f000 fa52 	bl	8002c24 <_fflush_r>
 8002780:	2800      	cmp	r0, #0
 8002782:	d0d9      	beq.n	8002738 <__swbuf_r+0x2e>
 8002784:	e7d6      	b.n	8002734 <__swbuf_r+0x2a>
	...

08002788 <__swsetup_r>:
 8002788:	b538      	push	{r3, r4, r5, lr}
 800278a:	4b29      	ldr	r3, [pc, #164]	@ (8002830 <__swsetup_r+0xa8>)
 800278c:	4605      	mov	r5, r0
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	460c      	mov	r4, r1
 8002792:	b118      	cbz	r0, 800279c <__swsetup_r+0x14>
 8002794:	6a03      	ldr	r3, [r0, #32]
 8002796:	b90b      	cbnz	r3, 800279c <__swsetup_r+0x14>
 8002798:	f7ff fee0 	bl	800255c <__sinit>
 800279c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027a0:	0719      	lsls	r1, r3, #28
 80027a2:	d422      	bmi.n	80027ea <__swsetup_r+0x62>
 80027a4:	06da      	lsls	r2, r3, #27
 80027a6:	d407      	bmi.n	80027b8 <__swsetup_r+0x30>
 80027a8:	2209      	movs	r2, #9
 80027aa:	602a      	str	r2, [r5, #0]
 80027ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027b0:	81a3      	strh	r3, [r4, #12]
 80027b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027b6:	e033      	b.n	8002820 <__swsetup_r+0x98>
 80027b8:	0758      	lsls	r0, r3, #29
 80027ba:	d512      	bpl.n	80027e2 <__swsetup_r+0x5a>
 80027bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80027be:	b141      	cbz	r1, 80027d2 <__swsetup_r+0x4a>
 80027c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80027c4:	4299      	cmp	r1, r3
 80027c6:	d002      	beq.n	80027ce <__swsetup_r+0x46>
 80027c8:	4628      	mov	r0, r5
 80027ca:	f000 f8af 	bl	800292c <_free_r>
 80027ce:	2300      	movs	r3, #0
 80027d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80027d2:	89a3      	ldrh	r3, [r4, #12]
 80027d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80027d8:	81a3      	strh	r3, [r4, #12]
 80027da:	2300      	movs	r3, #0
 80027dc:	6063      	str	r3, [r4, #4]
 80027de:	6923      	ldr	r3, [r4, #16]
 80027e0:	6023      	str	r3, [r4, #0]
 80027e2:	89a3      	ldrh	r3, [r4, #12]
 80027e4:	f043 0308 	orr.w	r3, r3, #8
 80027e8:	81a3      	strh	r3, [r4, #12]
 80027ea:	6923      	ldr	r3, [r4, #16]
 80027ec:	b94b      	cbnz	r3, 8002802 <__swsetup_r+0x7a>
 80027ee:	89a3      	ldrh	r3, [r4, #12]
 80027f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80027f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027f8:	d003      	beq.n	8002802 <__swsetup_r+0x7a>
 80027fa:	4621      	mov	r1, r4
 80027fc:	4628      	mov	r0, r5
 80027fe:	f000 fa5f 	bl	8002cc0 <__smakebuf_r>
 8002802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002806:	f013 0201 	ands.w	r2, r3, #1
 800280a:	d00a      	beq.n	8002822 <__swsetup_r+0x9a>
 800280c:	2200      	movs	r2, #0
 800280e:	60a2      	str	r2, [r4, #8]
 8002810:	6962      	ldr	r2, [r4, #20]
 8002812:	4252      	negs	r2, r2
 8002814:	61a2      	str	r2, [r4, #24]
 8002816:	6922      	ldr	r2, [r4, #16]
 8002818:	b942      	cbnz	r2, 800282c <__swsetup_r+0xa4>
 800281a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800281e:	d1c5      	bne.n	80027ac <__swsetup_r+0x24>
 8002820:	bd38      	pop	{r3, r4, r5, pc}
 8002822:	0799      	lsls	r1, r3, #30
 8002824:	bf58      	it	pl
 8002826:	6962      	ldrpl	r2, [r4, #20]
 8002828:	60a2      	str	r2, [r4, #8]
 800282a:	e7f4      	b.n	8002816 <__swsetup_r+0x8e>
 800282c:	2000      	movs	r0, #0
 800282e:	e7f7      	b.n	8002820 <__swsetup_r+0x98>
 8002830:	20000018 	.word	0x20000018

08002834 <memset>:
 8002834:	4402      	add	r2, r0
 8002836:	4603      	mov	r3, r0
 8002838:	4293      	cmp	r3, r2
 800283a:	d100      	bne.n	800283e <memset+0xa>
 800283c:	4770      	bx	lr
 800283e:	f803 1b01 	strb.w	r1, [r3], #1
 8002842:	e7f9      	b.n	8002838 <memset+0x4>

08002844 <_close_r>:
 8002844:	b538      	push	{r3, r4, r5, lr}
 8002846:	4d06      	ldr	r5, [pc, #24]	@ (8002860 <_close_r+0x1c>)
 8002848:	2300      	movs	r3, #0
 800284a:	4604      	mov	r4, r0
 800284c:	4608      	mov	r0, r1
 800284e:	602b      	str	r3, [r5, #0]
 8002850:	f7fd ffe6 	bl	8000820 <_close>
 8002854:	1c43      	adds	r3, r0, #1
 8002856:	d102      	bne.n	800285e <_close_r+0x1a>
 8002858:	682b      	ldr	r3, [r5, #0]
 800285a:	b103      	cbz	r3, 800285e <_close_r+0x1a>
 800285c:	6023      	str	r3, [r4, #0]
 800285e:	bd38      	pop	{r3, r4, r5, pc}
 8002860:	20000210 	.word	0x20000210

08002864 <_lseek_r>:
 8002864:	b538      	push	{r3, r4, r5, lr}
 8002866:	4d07      	ldr	r5, [pc, #28]	@ (8002884 <_lseek_r+0x20>)
 8002868:	4604      	mov	r4, r0
 800286a:	4608      	mov	r0, r1
 800286c:	4611      	mov	r1, r2
 800286e:	2200      	movs	r2, #0
 8002870:	602a      	str	r2, [r5, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	f7fd fffb 	bl	800086e <_lseek>
 8002878:	1c43      	adds	r3, r0, #1
 800287a:	d102      	bne.n	8002882 <_lseek_r+0x1e>
 800287c:	682b      	ldr	r3, [r5, #0]
 800287e:	b103      	cbz	r3, 8002882 <_lseek_r+0x1e>
 8002880:	6023      	str	r3, [r4, #0]
 8002882:	bd38      	pop	{r3, r4, r5, pc}
 8002884:	20000210 	.word	0x20000210

08002888 <_read_r>:
 8002888:	b538      	push	{r3, r4, r5, lr}
 800288a:	4d07      	ldr	r5, [pc, #28]	@ (80028a8 <_read_r+0x20>)
 800288c:	4604      	mov	r4, r0
 800288e:	4608      	mov	r0, r1
 8002890:	4611      	mov	r1, r2
 8002892:	2200      	movs	r2, #0
 8002894:	602a      	str	r2, [r5, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	f7fd ff89 	bl	80007ae <_read>
 800289c:	1c43      	adds	r3, r0, #1
 800289e:	d102      	bne.n	80028a6 <_read_r+0x1e>
 80028a0:	682b      	ldr	r3, [r5, #0]
 80028a2:	b103      	cbz	r3, 80028a6 <_read_r+0x1e>
 80028a4:	6023      	str	r3, [r4, #0]
 80028a6:	bd38      	pop	{r3, r4, r5, pc}
 80028a8:	20000210 	.word	0x20000210

080028ac <_write_r>:
 80028ac:	b538      	push	{r3, r4, r5, lr}
 80028ae:	4d07      	ldr	r5, [pc, #28]	@ (80028cc <_write_r+0x20>)
 80028b0:	4604      	mov	r4, r0
 80028b2:	4608      	mov	r0, r1
 80028b4:	4611      	mov	r1, r2
 80028b6:	2200      	movs	r2, #0
 80028b8:	602a      	str	r2, [r5, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	f7fd ff94 	bl	80007e8 <_write>
 80028c0:	1c43      	adds	r3, r0, #1
 80028c2:	d102      	bne.n	80028ca <_write_r+0x1e>
 80028c4:	682b      	ldr	r3, [r5, #0]
 80028c6:	b103      	cbz	r3, 80028ca <_write_r+0x1e>
 80028c8:	6023      	str	r3, [r4, #0]
 80028ca:	bd38      	pop	{r3, r4, r5, pc}
 80028cc:	20000210 	.word	0x20000210

080028d0 <__errno>:
 80028d0:	4b01      	ldr	r3, [pc, #4]	@ (80028d8 <__errno+0x8>)
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	20000018 	.word	0x20000018

080028dc <__libc_init_array>:
 80028dc:	b570      	push	{r4, r5, r6, lr}
 80028de:	4d0d      	ldr	r5, [pc, #52]	@ (8002914 <__libc_init_array+0x38>)
 80028e0:	4c0d      	ldr	r4, [pc, #52]	@ (8002918 <__libc_init_array+0x3c>)
 80028e2:	1b64      	subs	r4, r4, r5
 80028e4:	10a4      	asrs	r4, r4, #2
 80028e6:	2600      	movs	r6, #0
 80028e8:	42a6      	cmp	r6, r4
 80028ea:	d109      	bne.n	8002900 <__libc_init_array+0x24>
 80028ec:	4d0b      	ldr	r5, [pc, #44]	@ (800291c <__libc_init_array+0x40>)
 80028ee:	4c0c      	ldr	r4, [pc, #48]	@ (8002920 <__libc_init_array+0x44>)
 80028f0:	f000 fa54 	bl	8002d9c <_init>
 80028f4:	1b64      	subs	r4, r4, r5
 80028f6:	10a4      	asrs	r4, r4, #2
 80028f8:	2600      	movs	r6, #0
 80028fa:	42a6      	cmp	r6, r4
 80028fc:	d105      	bne.n	800290a <__libc_init_array+0x2e>
 80028fe:	bd70      	pop	{r4, r5, r6, pc}
 8002900:	f855 3b04 	ldr.w	r3, [r5], #4
 8002904:	4798      	blx	r3
 8002906:	3601      	adds	r6, #1
 8002908:	e7ee      	b.n	80028e8 <__libc_init_array+0xc>
 800290a:	f855 3b04 	ldr.w	r3, [r5], #4
 800290e:	4798      	blx	r3
 8002910:	3601      	adds	r6, #1
 8002912:	e7f2      	b.n	80028fa <__libc_init_array+0x1e>
 8002914:	08002df8 	.word	0x08002df8
 8002918:	08002df8 	.word	0x08002df8
 800291c:	08002df8 	.word	0x08002df8
 8002920:	08002dfc 	.word	0x08002dfc

08002924 <__retarget_lock_init_recursive>:
 8002924:	4770      	bx	lr

08002926 <__retarget_lock_acquire_recursive>:
 8002926:	4770      	bx	lr

08002928 <__retarget_lock_release_recursive>:
 8002928:	4770      	bx	lr
	...

0800292c <_free_r>:
 800292c:	b538      	push	{r3, r4, r5, lr}
 800292e:	4605      	mov	r5, r0
 8002930:	2900      	cmp	r1, #0
 8002932:	d041      	beq.n	80029b8 <_free_r+0x8c>
 8002934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002938:	1f0c      	subs	r4, r1, #4
 800293a:	2b00      	cmp	r3, #0
 800293c:	bfb8      	it	lt
 800293e:	18e4      	addlt	r4, r4, r3
 8002940:	f000 f8e0 	bl	8002b04 <__malloc_lock>
 8002944:	4a1d      	ldr	r2, [pc, #116]	@ (80029bc <_free_r+0x90>)
 8002946:	6813      	ldr	r3, [r2, #0]
 8002948:	b933      	cbnz	r3, 8002958 <_free_r+0x2c>
 800294a:	6063      	str	r3, [r4, #4]
 800294c:	6014      	str	r4, [r2, #0]
 800294e:	4628      	mov	r0, r5
 8002950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002954:	f000 b8dc 	b.w	8002b10 <__malloc_unlock>
 8002958:	42a3      	cmp	r3, r4
 800295a:	d908      	bls.n	800296e <_free_r+0x42>
 800295c:	6820      	ldr	r0, [r4, #0]
 800295e:	1821      	adds	r1, r4, r0
 8002960:	428b      	cmp	r3, r1
 8002962:	bf01      	itttt	eq
 8002964:	6819      	ldreq	r1, [r3, #0]
 8002966:	685b      	ldreq	r3, [r3, #4]
 8002968:	1809      	addeq	r1, r1, r0
 800296a:	6021      	streq	r1, [r4, #0]
 800296c:	e7ed      	b.n	800294a <_free_r+0x1e>
 800296e:	461a      	mov	r2, r3
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	b10b      	cbz	r3, 8002978 <_free_r+0x4c>
 8002974:	42a3      	cmp	r3, r4
 8002976:	d9fa      	bls.n	800296e <_free_r+0x42>
 8002978:	6811      	ldr	r1, [r2, #0]
 800297a:	1850      	adds	r0, r2, r1
 800297c:	42a0      	cmp	r0, r4
 800297e:	d10b      	bne.n	8002998 <_free_r+0x6c>
 8002980:	6820      	ldr	r0, [r4, #0]
 8002982:	4401      	add	r1, r0
 8002984:	1850      	adds	r0, r2, r1
 8002986:	4283      	cmp	r3, r0
 8002988:	6011      	str	r1, [r2, #0]
 800298a:	d1e0      	bne.n	800294e <_free_r+0x22>
 800298c:	6818      	ldr	r0, [r3, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	6053      	str	r3, [r2, #4]
 8002992:	4408      	add	r0, r1
 8002994:	6010      	str	r0, [r2, #0]
 8002996:	e7da      	b.n	800294e <_free_r+0x22>
 8002998:	d902      	bls.n	80029a0 <_free_r+0x74>
 800299a:	230c      	movs	r3, #12
 800299c:	602b      	str	r3, [r5, #0]
 800299e:	e7d6      	b.n	800294e <_free_r+0x22>
 80029a0:	6820      	ldr	r0, [r4, #0]
 80029a2:	1821      	adds	r1, r4, r0
 80029a4:	428b      	cmp	r3, r1
 80029a6:	bf04      	itt	eq
 80029a8:	6819      	ldreq	r1, [r3, #0]
 80029aa:	685b      	ldreq	r3, [r3, #4]
 80029ac:	6063      	str	r3, [r4, #4]
 80029ae:	bf04      	itt	eq
 80029b0:	1809      	addeq	r1, r1, r0
 80029b2:	6021      	streq	r1, [r4, #0]
 80029b4:	6054      	str	r4, [r2, #4]
 80029b6:	e7ca      	b.n	800294e <_free_r+0x22>
 80029b8:	bd38      	pop	{r3, r4, r5, pc}
 80029ba:	bf00      	nop
 80029bc:	2000021c 	.word	0x2000021c

080029c0 <sbrk_aligned>:
 80029c0:	b570      	push	{r4, r5, r6, lr}
 80029c2:	4e0f      	ldr	r6, [pc, #60]	@ (8002a00 <sbrk_aligned+0x40>)
 80029c4:	460c      	mov	r4, r1
 80029c6:	6831      	ldr	r1, [r6, #0]
 80029c8:	4605      	mov	r5, r0
 80029ca:	b911      	cbnz	r1, 80029d2 <sbrk_aligned+0x12>
 80029cc:	f000 f9d6 	bl	8002d7c <_sbrk_r>
 80029d0:	6030      	str	r0, [r6, #0]
 80029d2:	4621      	mov	r1, r4
 80029d4:	4628      	mov	r0, r5
 80029d6:	f000 f9d1 	bl	8002d7c <_sbrk_r>
 80029da:	1c43      	adds	r3, r0, #1
 80029dc:	d103      	bne.n	80029e6 <sbrk_aligned+0x26>
 80029de:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80029e2:	4620      	mov	r0, r4
 80029e4:	bd70      	pop	{r4, r5, r6, pc}
 80029e6:	1cc4      	adds	r4, r0, #3
 80029e8:	f024 0403 	bic.w	r4, r4, #3
 80029ec:	42a0      	cmp	r0, r4
 80029ee:	d0f8      	beq.n	80029e2 <sbrk_aligned+0x22>
 80029f0:	1a21      	subs	r1, r4, r0
 80029f2:	4628      	mov	r0, r5
 80029f4:	f000 f9c2 	bl	8002d7c <_sbrk_r>
 80029f8:	3001      	adds	r0, #1
 80029fa:	d1f2      	bne.n	80029e2 <sbrk_aligned+0x22>
 80029fc:	e7ef      	b.n	80029de <sbrk_aligned+0x1e>
 80029fe:	bf00      	nop
 8002a00:	20000218 	.word	0x20000218

08002a04 <_malloc_r>:
 8002a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a08:	1ccd      	adds	r5, r1, #3
 8002a0a:	f025 0503 	bic.w	r5, r5, #3
 8002a0e:	3508      	adds	r5, #8
 8002a10:	2d0c      	cmp	r5, #12
 8002a12:	bf38      	it	cc
 8002a14:	250c      	movcc	r5, #12
 8002a16:	2d00      	cmp	r5, #0
 8002a18:	4606      	mov	r6, r0
 8002a1a:	db01      	blt.n	8002a20 <_malloc_r+0x1c>
 8002a1c:	42a9      	cmp	r1, r5
 8002a1e:	d904      	bls.n	8002a2a <_malloc_r+0x26>
 8002a20:	230c      	movs	r3, #12
 8002a22:	6033      	str	r3, [r6, #0]
 8002a24:	2000      	movs	r0, #0
 8002a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002b00 <_malloc_r+0xfc>
 8002a2e:	f000 f869 	bl	8002b04 <__malloc_lock>
 8002a32:	f8d8 3000 	ldr.w	r3, [r8]
 8002a36:	461c      	mov	r4, r3
 8002a38:	bb44      	cbnz	r4, 8002a8c <_malloc_r+0x88>
 8002a3a:	4629      	mov	r1, r5
 8002a3c:	4630      	mov	r0, r6
 8002a3e:	f7ff ffbf 	bl	80029c0 <sbrk_aligned>
 8002a42:	1c43      	adds	r3, r0, #1
 8002a44:	4604      	mov	r4, r0
 8002a46:	d158      	bne.n	8002afa <_malloc_r+0xf6>
 8002a48:	f8d8 4000 	ldr.w	r4, [r8]
 8002a4c:	4627      	mov	r7, r4
 8002a4e:	2f00      	cmp	r7, #0
 8002a50:	d143      	bne.n	8002ada <_malloc_r+0xd6>
 8002a52:	2c00      	cmp	r4, #0
 8002a54:	d04b      	beq.n	8002aee <_malloc_r+0xea>
 8002a56:	6823      	ldr	r3, [r4, #0]
 8002a58:	4639      	mov	r1, r7
 8002a5a:	4630      	mov	r0, r6
 8002a5c:	eb04 0903 	add.w	r9, r4, r3
 8002a60:	f000 f98c 	bl	8002d7c <_sbrk_r>
 8002a64:	4581      	cmp	r9, r0
 8002a66:	d142      	bne.n	8002aee <_malloc_r+0xea>
 8002a68:	6821      	ldr	r1, [r4, #0]
 8002a6a:	1a6d      	subs	r5, r5, r1
 8002a6c:	4629      	mov	r1, r5
 8002a6e:	4630      	mov	r0, r6
 8002a70:	f7ff ffa6 	bl	80029c0 <sbrk_aligned>
 8002a74:	3001      	adds	r0, #1
 8002a76:	d03a      	beq.n	8002aee <_malloc_r+0xea>
 8002a78:	6823      	ldr	r3, [r4, #0]
 8002a7a:	442b      	add	r3, r5
 8002a7c:	6023      	str	r3, [r4, #0]
 8002a7e:	f8d8 3000 	ldr.w	r3, [r8]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	bb62      	cbnz	r2, 8002ae0 <_malloc_r+0xdc>
 8002a86:	f8c8 7000 	str.w	r7, [r8]
 8002a8a:	e00f      	b.n	8002aac <_malloc_r+0xa8>
 8002a8c:	6822      	ldr	r2, [r4, #0]
 8002a8e:	1b52      	subs	r2, r2, r5
 8002a90:	d420      	bmi.n	8002ad4 <_malloc_r+0xd0>
 8002a92:	2a0b      	cmp	r2, #11
 8002a94:	d917      	bls.n	8002ac6 <_malloc_r+0xc2>
 8002a96:	1961      	adds	r1, r4, r5
 8002a98:	42a3      	cmp	r3, r4
 8002a9a:	6025      	str	r5, [r4, #0]
 8002a9c:	bf18      	it	ne
 8002a9e:	6059      	strne	r1, [r3, #4]
 8002aa0:	6863      	ldr	r3, [r4, #4]
 8002aa2:	bf08      	it	eq
 8002aa4:	f8c8 1000 	streq.w	r1, [r8]
 8002aa8:	5162      	str	r2, [r4, r5]
 8002aaa:	604b      	str	r3, [r1, #4]
 8002aac:	4630      	mov	r0, r6
 8002aae:	f000 f82f 	bl	8002b10 <__malloc_unlock>
 8002ab2:	f104 000b 	add.w	r0, r4, #11
 8002ab6:	1d23      	adds	r3, r4, #4
 8002ab8:	f020 0007 	bic.w	r0, r0, #7
 8002abc:	1ac2      	subs	r2, r0, r3
 8002abe:	bf1c      	itt	ne
 8002ac0:	1a1b      	subne	r3, r3, r0
 8002ac2:	50a3      	strne	r3, [r4, r2]
 8002ac4:	e7af      	b.n	8002a26 <_malloc_r+0x22>
 8002ac6:	6862      	ldr	r2, [r4, #4]
 8002ac8:	42a3      	cmp	r3, r4
 8002aca:	bf0c      	ite	eq
 8002acc:	f8c8 2000 	streq.w	r2, [r8]
 8002ad0:	605a      	strne	r2, [r3, #4]
 8002ad2:	e7eb      	b.n	8002aac <_malloc_r+0xa8>
 8002ad4:	4623      	mov	r3, r4
 8002ad6:	6864      	ldr	r4, [r4, #4]
 8002ad8:	e7ae      	b.n	8002a38 <_malloc_r+0x34>
 8002ada:	463c      	mov	r4, r7
 8002adc:	687f      	ldr	r7, [r7, #4]
 8002ade:	e7b6      	b.n	8002a4e <_malloc_r+0x4a>
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	42a3      	cmp	r3, r4
 8002ae6:	d1fb      	bne.n	8002ae0 <_malloc_r+0xdc>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	6053      	str	r3, [r2, #4]
 8002aec:	e7de      	b.n	8002aac <_malloc_r+0xa8>
 8002aee:	230c      	movs	r3, #12
 8002af0:	6033      	str	r3, [r6, #0]
 8002af2:	4630      	mov	r0, r6
 8002af4:	f000 f80c 	bl	8002b10 <__malloc_unlock>
 8002af8:	e794      	b.n	8002a24 <_malloc_r+0x20>
 8002afa:	6005      	str	r5, [r0, #0]
 8002afc:	e7d6      	b.n	8002aac <_malloc_r+0xa8>
 8002afe:	bf00      	nop
 8002b00:	2000021c 	.word	0x2000021c

08002b04 <__malloc_lock>:
 8002b04:	4801      	ldr	r0, [pc, #4]	@ (8002b0c <__malloc_lock+0x8>)
 8002b06:	f7ff bf0e 	b.w	8002926 <__retarget_lock_acquire_recursive>
 8002b0a:	bf00      	nop
 8002b0c:	20000214 	.word	0x20000214

08002b10 <__malloc_unlock>:
 8002b10:	4801      	ldr	r0, [pc, #4]	@ (8002b18 <__malloc_unlock+0x8>)
 8002b12:	f7ff bf09 	b.w	8002928 <__retarget_lock_release_recursive>
 8002b16:	bf00      	nop
 8002b18:	20000214 	.word	0x20000214

08002b1c <__sflush_r>:
 8002b1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b24:	0716      	lsls	r6, r2, #28
 8002b26:	4605      	mov	r5, r0
 8002b28:	460c      	mov	r4, r1
 8002b2a:	d454      	bmi.n	8002bd6 <__sflush_r+0xba>
 8002b2c:	684b      	ldr	r3, [r1, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	dc02      	bgt.n	8002b38 <__sflush_r+0x1c>
 8002b32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	dd48      	ble.n	8002bca <__sflush_r+0xae>
 8002b38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002b3a:	2e00      	cmp	r6, #0
 8002b3c:	d045      	beq.n	8002bca <__sflush_r+0xae>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002b44:	682f      	ldr	r7, [r5, #0]
 8002b46:	6a21      	ldr	r1, [r4, #32]
 8002b48:	602b      	str	r3, [r5, #0]
 8002b4a:	d030      	beq.n	8002bae <__sflush_r+0x92>
 8002b4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002b4e:	89a3      	ldrh	r3, [r4, #12]
 8002b50:	0759      	lsls	r1, r3, #29
 8002b52:	d505      	bpl.n	8002b60 <__sflush_r+0x44>
 8002b54:	6863      	ldr	r3, [r4, #4]
 8002b56:	1ad2      	subs	r2, r2, r3
 8002b58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002b5a:	b10b      	cbz	r3, 8002b60 <__sflush_r+0x44>
 8002b5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002b5e:	1ad2      	subs	r2, r2, r3
 8002b60:	2300      	movs	r3, #0
 8002b62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002b64:	6a21      	ldr	r1, [r4, #32]
 8002b66:	4628      	mov	r0, r5
 8002b68:	47b0      	blx	r6
 8002b6a:	1c43      	adds	r3, r0, #1
 8002b6c:	89a3      	ldrh	r3, [r4, #12]
 8002b6e:	d106      	bne.n	8002b7e <__sflush_r+0x62>
 8002b70:	6829      	ldr	r1, [r5, #0]
 8002b72:	291d      	cmp	r1, #29
 8002b74:	d82b      	bhi.n	8002bce <__sflush_r+0xb2>
 8002b76:	4a2a      	ldr	r2, [pc, #168]	@ (8002c20 <__sflush_r+0x104>)
 8002b78:	410a      	asrs	r2, r1
 8002b7a:	07d6      	lsls	r6, r2, #31
 8002b7c:	d427      	bmi.n	8002bce <__sflush_r+0xb2>
 8002b7e:	2200      	movs	r2, #0
 8002b80:	6062      	str	r2, [r4, #4]
 8002b82:	04d9      	lsls	r1, r3, #19
 8002b84:	6922      	ldr	r2, [r4, #16]
 8002b86:	6022      	str	r2, [r4, #0]
 8002b88:	d504      	bpl.n	8002b94 <__sflush_r+0x78>
 8002b8a:	1c42      	adds	r2, r0, #1
 8002b8c:	d101      	bne.n	8002b92 <__sflush_r+0x76>
 8002b8e:	682b      	ldr	r3, [r5, #0]
 8002b90:	b903      	cbnz	r3, 8002b94 <__sflush_r+0x78>
 8002b92:	6560      	str	r0, [r4, #84]	@ 0x54
 8002b94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002b96:	602f      	str	r7, [r5, #0]
 8002b98:	b1b9      	cbz	r1, 8002bca <__sflush_r+0xae>
 8002b9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002b9e:	4299      	cmp	r1, r3
 8002ba0:	d002      	beq.n	8002ba8 <__sflush_r+0x8c>
 8002ba2:	4628      	mov	r0, r5
 8002ba4:	f7ff fec2 	bl	800292c <_free_r>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	6363      	str	r3, [r4, #52]	@ 0x34
 8002bac:	e00d      	b.n	8002bca <__sflush_r+0xae>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	4628      	mov	r0, r5
 8002bb2:	47b0      	blx	r6
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	1c50      	adds	r0, r2, #1
 8002bb8:	d1c9      	bne.n	8002b4e <__sflush_r+0x32>
 8002bba:	682b      	ldr	r3, [r5, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0c6      	beq.n	8002b4e <__sflush_r+0x32>
 8002bc0:	2b1d      	cmp	r3, #29
 8002bc2:	d001      	beq.n	8002bc8 <__sflush_r+0xac>
 8002bc4:	2b16      	cmp	r3, #22
 8002bc6:	d11e      	bne.n	8002c06 <__sflush_r+0xea>
 8002bc8:	602f      	str	r7, [r5, #0]
 8002bca:	2000      	movs	r0, #0
 8002bcc:	e022      	b.n	8002c14 <__sflush_r+0xf8>
 8002bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bd2:	b21b      	sxth	r3, r3
 8002bd4:	e01b      	b.n	8002c0e <__sflush_r+0xf2>
 8002bd6:	690f      	ldr	r7, [r1, #16]
 8002bd8:	2f00      	cmp	r7, #0
 8002bda:	d0f6      	beq.n	8002bca <__sflush_r+0xae>
 8002bdc:	0793      	lsls	r3, r2, #30
 8002bde:	680e      	ldr	r6, [r1, #0]
 8002be0:	bf08      	it	eq
 8002be2:	694b      	ldreq	r3, [r1, #20]
 8002be4:	600f      	str	r7, [r1, #0]
 8002be6:	bf18      	it	ne
 8002be8:	2300      	movne	r3, #0
 8002bea:	eba6 0807 	sub.w	r8, r6, r7
 8002bee:	608b      	str	r3, [r1, #8]
 8002bf0:	f1b8 0f00 	cmp.w	r8, #0
 8002bf4:	dde9      	ble.n	8002bca <__sflush_r+0xae>
 8002bf6:	6a21      	ldr	r1, [r4, #32]
 8002bf8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002bfa:	4643      	mov	r3, r8
 8002bfc:	463a      	mov	r2, r7
 8002bfe:	4628      	mov	r0, r5
 8002c00:	47b0      	blx	r6
 8002c02:	2800      	cmp	r0, #0
 8002c04:	dc08      	bgt.n	8002c18 <__sflush_r+0xfc>
 8002c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c0e:	81a3      	strh	r3, [r4, #12]
 8002c10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c18:	4407      	add	r7, r0
 8002c1a:	eba8 0800 	sub.w	r8, r8, r0
 8002c1e:	e7e7      	b.n	8002bf0 <__sflush_r+0xd4>
 8002c20:	dfbffffe 	.word	0xdfbffffe

08002c24 <_fflush_r>:
 8002c24:	b538      	push	{r3, r4, r5, lr}
 8002c26:	690b      	ldr	r3, [r1, #16]
 8002c28:	4605      	mov	r5, r0
 8002c2a:	460c      	mov	r4, r1
 8002c2c:	b913      	cbnz	r3, 8002c34 <_fflush_r+0x10>
 8002c2e:	2500      	movs	r5, #0
 8002c30:	4628      	mov	r0, r5
 8002c32:	bd38      	pop	{r3, r4, r5, pc}
 8002c34:	b118      	cbz	r0, 8002c3e <_fflush_r+0x1a>
 8002c36:	6a03      	ldr	r3, [r0, #32]
 8002c38:	b90b      	cbnz	r3, 8002c3e <_fflush_r+0x1a>
 8002c3a:	f7ff fc8f 	bl	800255c <__sinit>
 8002c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f3      	beq.n	8002c2e <_fflush_r+0xa>
 8002c46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002c48:	07d0      	lsls	r0, r2, #31
 8002c4a:	d404      	bmi.n	8002c56 <_fflush_r+0x32>
 8002c4c:	0599      	lsls	r1, r3, #22
 8002c4e:	d402      	bmi.n	8002c56 <_fflush_r+0x32>
 8002c50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c52:	f7ff fe68 	bl	8002926 <__retarget_lock_acquire_recursive>
 8002c56:	4628      	mov	r0, r5
 8002c58:	4621      	mov	r1, r4
 8002c5a:	f7ff ff5f 	bl	8002b1c <__sflush_r>
 8002c5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002c60:	07da      	lsls	r2, r3, #31
 8002c62:	4605      	mov	r5, r0
 8002c64:	d4e4      	bmi.n	8002c30 <_fflush_r+0xc>
 8002c66:	89a3      	ldrh	r3, [r4, #12]
 8002c68:	059b      	lsls	r3, r3, #22
 8002c6a:	d4e1      	bmi.n	8002c30 <_fflush_r+0xc>
 8002c6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c6e:	f7ff fe5b 	bl	8002928 <__retarget_lock_release_recursive>
 8002c72:	e7dd      	b.n	8002c30 <_fflush_r+0xc>

08002c74 <__swhatbuf_r>:
 8002c74:	b570      	push	{r4, r5, r6, lr}
 8002c76:	460c      	mov	r4, r1
 8002c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c7c:	2900      	cmp	r1, #0
 8002c7e:	b096      	sub	sp, #88	@ 0x58
 8002c80:	4615      	mov	r5, r2
 8002c82:	461e      	mov	r6, r3
 8002c84:	da0d      	bge.n	8002ca2 <__swhatbuf_r+0x2e>
 8002c86:	89a3      	ldrh	r3, [r4, #12]
 8002c88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002c8c:	f04f 0100 	mov.w	r1, #0
 8002c90:	bf14      	ite	ne
 8002c92:	2340      	movne	r3, #64	@ 0x40
 8002c94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002c98:	2000      	movs	r0, #0
 8002c9a:	6031      	str	r1, [r6, #0]
 8002c9c:	602b      	str	r3, [r5, #0]
 8002c9e:	b016      	add	sp, #88	@ 0x58
 8002ca0:	bd70      	pop	{r4, r5, r6, pc}
 8002ca2:	466a      	mov	r2, sp
 8002ca4:	f000 f848 	bl	8002d38 <_fstat_r>
 8002ca8:	2800      	cmp	r0, #0
 8002caa:	dbec      	blt.n	8002c86 <__swhatbuf_r+0x12>
 8002cac:	9901      	ldr	r1, [sp, #4]
 8002cae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002cb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002cb6:	4259      	negs	r1, r3
 8002cb8:	4159      	adcs	r1, r3
 8002cba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cbe:	e7eb      	b.n	8002c98 <__swhatbuf_r+0x24>

08002cc0 <__smakebuf_r>:
 8002cc0:	898b      	ldrh	r3, [r1, #12]
 8002cc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cc4:	079d      	lsls	r5, r3, #30
 8002cc6:	4606      	mov	r6, r0
 8002cc8:	460c      	mov	r4, r1
 8002cca:	d507      	bpl.n	8002cdc <__smakebuf_r+0x1c>
 8002ccc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002cd0:	6023      	str	r3, [r4, #0]
 8002cd2:	6123      	str	r3, [r4, #16]
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	6163      	str	r3, [r4, #20]
 8002cd8:	b003      	add	sp, #12
 8002cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cdc:	ab01      	add	r3, sp, #4
 8002cde:	466a      	mov	r2, sp
 8002ce0:	f7ff ffc8 	bl	8002c74 <__swhatbuf_r>
 8002ce4:	9f00      	ldr	r7, [sp, #0]
 8002ce6:	4605      	mov	r5, r0
 8002ce8:	4639      	mov	r1, r7
 8002cea:	4630      	mov	r0, r6
 8002cec:	f7ff fe8a 	bl	8002a04 <_malloc_r>
 8002cf0:	b948      	cbnz	r0, 8002d06 <__smakebuf_r+0x46>
 8002cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cf6:	059a      	lsls	r2, r3, #22
 8002cf8:	d4ee      	bmi.n	8002cd8 <__smakebuf_r+0x18>
 8002cfa:	f023 0303 	bic.w	r3, r3, #3
 8002cfe:	f043 0302 	orr.w	r3, r3, #2
 8002d02:	81a3      	strh	r3, [r4, #12]
 8002d04:	e7e2      	b.n	8002ccc <__smakebuf_r+0xc>
 8002d06:	89a3      	ldrh	r3, [r4, #12]
 8002d08:	6020      	str	r0, [r4, #0]
 8002d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d0e:	81a3      	strh	r3, [r4, #12]
 8002d10:	9b01      	ldr	r3, [sp, #4]
 8002d12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002d16:	b15b      	cbz	r3, 8002d30 <__smakebuf_r+0x70>
 8002d18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d1c:	4630      	mov	r0, r6
 8002d1e:	f000 f81d 	bl	8002d5c <_isatty_r>
 8002d22:	b128      	cbz	r0, 8002d30 <__smakebuf_r+0x70>
 8002d24:	89a3      	ldrh	r3, [r4, #12]
 8002d26:	f023 0303 	bic.w	r3, r3, #3
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	81a3      	strh	r3, [r4, #12]
 8002d30:	89a3      	ldrh	r3, [r4, #12]
 8002d32:	431d      	orrs	r5, r3
 8002d34:	81a5      	strh	r5, [r4, #12]
 8002d36:	e7cf      	b.n	8002cd8 <__smakebuf_r+0x18>

08002d38 <_fstat_r>:
 8002d38:	b538      	push	{r3, r4, r5, lr}
 8002d3a:	4d07      	ldr	r5, [pc, #28]	@ (8002d58 <_fstat_r+0x20>)
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	4604      	mov	r4, r0
 8002d40:	4608      	mov	r0, r1
 8002d42:	4611      	mov	r1, r2
 8002d44:	602b      	str	r3, [r5, #0]
 8002d46:	f7fd fd77 	bl	8000838 <_fstat>
 8002d4a:	1c43      	adds	r3, r0, #1
 8002d4c:	d102      	bne.n	8002d54 <_fstat_r+0x1c>
 8002d4e:	682b      	ldr	r3, [r5, #0]
 8002d50:	b103      	cbz	r3, 8002d54 <_fstat_r+0x1c>
 8002d52:	6023      	str	r3, [r4, #0]
 8002d54:	bd38      	pop	{r3, r4, r5, pc}
 8002d56:	bf00      	nop
 8002d58:	20000210 	.word	0x20000210

08002d5c <_isatty_r>:
 8002d5c:	b538      	push	{r3, r4, r5, lr}
 8002d5e:	4d06      	ldr	r5, [pc, #24]	@ (8002d78 <_isatty_r+0x1c>)
 8002d60:	2300      	movs	r3, #0
 8002d62:	4604      	mov	r4, r0
 8002d64:	4608      	mov	r0, r1
 8002d66:	602b      	str	r3, [r5, #0]
 8002d68:	f7fd fd76 	bl	8000858 <_isatty>
 8002d6c:	1c43      	adds	r3, r0, #1
 8002d6e:	d102      	bne.n	8002d76 <_isatty_r+0x1a>
 8002d70:	682b      	ldr	r3, [r5, #0]
 8002d72:	b103      	cbz	r3, 8002d76 <_isatty_r+0x1a>
 8002d74:	6023      	str	r3, [r4, #0]
 8002d76:	bd38      	pop	{r3, r4, r5, pc}
 8002d78:	20000210 	.word	0x20000210

08002d7c <_sbrk_r>:
 8002d7c:	b538      	push	{r3, r4, r5, lr}
 8002d7e:	4d06      	ldr	r5, [pc, #24]	@ (8002d98 <_sbrk_r+0x1c>)
 8002d80:	2300      	movs	r3, #0
 8002d82:	4604      	mov	r4, r0
 8002d84:	4608      	mov	r0, r1
 8002d86:	602b      	str	r3, [r5, #0]
 8002d88:	f7fd fd7e 	bl	8000888 <_sbrk>
 8002d8c:	1c43      	adds	r3, r0, #1
 8002d8e:	d102      	bne.n	8002d96 <_sbrk_r+0x1a>
 8002d90:	682b      	ldr	r3, [r5, #0]
 8002d92:	b103      	cbz	r3, 8002d96 <_sbrk_r+0x1a>
 8002d94:	6023      	str	r3, [r4, #0]
 8002d96:	bd38      	pop	{r3, r4, r5, pc}
 8002d98:	20000210 	.word	0x20000210

08002d9c <_init>:
 8002d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d9e:	bf00      	nop
 8002da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002da2:	bc08      	pop	{r3}
 8002da4:	469e      	mov	lr, r3
 8002da6:	4770      	bx	lr

08002da8 <_fini>:
 8002da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002daa:	bf00      	nop
 8002dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dae:	bc08      	pop	{r3}
 8002db0:	469e      	mov	lr, r3
 8002db2:	4770      	bx	lr
