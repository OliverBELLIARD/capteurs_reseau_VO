
capteurs_reseaux_VO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1d4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  0800c3a8  0800c3a8  0000d3a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb58  0800cb58  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb58  0800cb58  0000db58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb60  0800cb60  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb60  0800cb60  0000db60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cb64  0800cb64  0000db64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800cb68  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  200001d4  0800cd3c  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ac  0800cd3c  0000e5ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015924  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035f3  00000000  00000000  00023b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  00027120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000efb  00000000  00000000  00028458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025357  00000000  00000000  00029353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000195ae  00000000  00000000  0004e6aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8d6c  00000000  00000000  00067c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001409c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065a4  00000000  00000000  00140a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00146fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c38c 	.word	0x0800c38c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800c38c 	.word	0x0800c38c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <BMP280_Check_id>:
 * response matches the expected ID. Prints the ID if successful.
 *
 * @return int Returns EXIT_SUCCESS if ID is read successfully, otherwise returns EXIT_FAILURE.
 */
int BMP280_Check_id(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af02      	add	r7, sp, #8
	uint8_t buff[BUFF_SIZE];	// Buffer for the I2C communication
	HAL_StatusTypeDef ret; 		// I2C operations status
	hi2c_user = &hi2c3;			// I2C Handler used by the user
 800102a:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <BMP280_Check_id+0x74>)
 800102c:	4a1b      	ldr	r2, [pc, #108]	@ (800109c <BMP280_Check_id+0x78>)
 800102e:	601a      	str	r2, [r3, #0]

	buff[0] = BMP280_REG_ID;
 8001030:	23d0      	movs	r3, #208	@ 0xd0
 8001032:	713b      	strb	r3, [r7, #4]

	ret = HAL_I2C_Master_Transmit(hi2c_user, BMP280_ADDR, buff, 1, HAL_MAX_DELAY);
 8001034:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <BMP280_Check_id+0x74>)
 8001036:	6818      	ldr	r0, [r3, #0]
 8001038:	1d3a      	adds	r2, r7, #4
 800103a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	21ee      	movs	r1, #238	@ 0xee
 8001044:	f002 fde2 	bl	8003c0c <HAL_I2C_Master_Transmit>
 8001048:	4603      	mov	r3, r0
 800104a:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d004      	beq.n	800105c <BMP280_Check_id+0x38>
		printf("I2C Transmit failure\r\n");
 8001052:	4813      	ldr	r0, [pc, #76]	@ (80010a0 <BMP280_Check_id+0x7c>)
 8001054:	f007 fe0a 	bl	8008c6c <puts>
		return EXIT_FAILURE;
 8001058:	2301      	movs	r3, #1
 800105a:	e019      	b.n	8001090 <BMP280_Check_id+0x6c>
	}
	ret = HAL_I2C_Master_Receive(hi2c_user, BMP280_ADDR, buff, 1, HAL_MAX_DELAY);
 800105c:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <BMP280_Check_id+0x74>)
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	1d3a      	adds	r2, r7, #4
 8001062:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2301      	movs	r3, #1
 800106a:	21ee      	movs	r1, #238	@ 0xee
 800106c:	f002 fecc 	bl	8003e08 <HAL_I2C_Master_Receive>
 8001070:	4603      	mov	r3, r0
 8001072:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d004      	beq.n	8001084 <BMP280_Check_id+0x60>
		printf("I2C Receive failure\r\n");
 800107a:	480a      	ldr	r0, [pc, #40]	@ (80010a4 <BMP280_Check_id+0x80>)
 800107c:	f007 fdf6 	bl	8008c6c <puts>
		return EXIT_FAILURE;
 8001080:	2301      	movs	r3, #1
 8001082:	e005      	b.n	8001090 <BMP280_Check_id+0x6c>
	}

	printf("BMP280 ID: 0x%X\r\n", buff[0]);
 8001084:	793b      	ldrb	r3, [r7, #4]
 8001086:	4619      	mov	r1, r3
 8001088:	4807      	ldr	r0, [pc, #28]	@ (80010a8 <BMP280_Check_id+0x84>)
 800108a:	f007 fd87 	bl	8008b9c <iprintf>

	return EXIT_SUCCESS;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200001f0 	.word	0x200001f0
 800109c:	20000260 	.word	0x20000260
 80010a0:	0800c3a8 	.word	0x0800c3a8
 80010a4:	0800c3c0 	.word	0x0800c3c0
 80010a8:	0800c3d8 	.word	0x0800c3d8

080010ac <BMP280_Config>:
 * sent and confirmed by checking the response from the sensor.
 *
 * @return int Returns EXIT_SUCCESS if configuration is confirmed, otherwise returns EXIT_FAILURE.
 */
int BMP280_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af02      	add	r7, sp, #8
	uint8_t buff[BUFF_SIZE];	// Buffer for the I2C communication
	HAL_StatusTypeDef ret; 		// I2C operations status
	hi2c_user = &hi2c3;			// I2C Handler used by the user
 80010b2:	4b1e      	ldr	r3, [pc, #120]	@ (800112c <BMP280_Config+0x80>)
 80010b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001130 <BMP280_Config+0x84>)
 80010b6:	601a      	str	r2, [r3, #0]

	buff[0]= BMP280_REG_MODE;
 80010b8:	23f4      	movs	r3, #244	@ 0xf4
 80010ba:	713b      	strb	r3, [r7, #4]
	buff[1]= BMP280_CONFIG;
 80010bc:	2357      	movs	r3, #87	@ 0x57
 80010be:	717b      	strb	r3, [r7, #5]

	ret = HAL_I2C_Master_Transmit(hi2c_user,BMP280_ADDR, buff, 2, HAL_MAX_DELAY);
 80010c0:	4b1a      	ldr	r3, [pc, #104]	@ (800112c <BMP280_Config+0x80>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	1d3a      	adds	r2, r7, #4
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2302      	movs	r3, #2
 80010ce:	21ee      	movs	r1, #238	@ 0xee
 80010d0:	f002 fd9c 	bl	8003c0c <HAL_I2C_Master_Transmit>
 80010d4:	4603      	mov	r3, r0
 80010d6:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d004      	beq.n	80010e8 <BMP280_Config+0x3c>
		printf("I2C Transmit failure\r\n");
 80010de:	4815      	ldr	r0, [pc, #84]	@ (8001134 <BMP280_Config+0x88>)
 80010e0:	f007 fdc4 	bl	8008c6c <puts>
		return EXIT_FAILURE;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e01c      	b.n	8001122 <BMP280_Config+0x76>
	}

	ret = HAL_I2C_Master_Receive(hi2c_user, BMP280_ADDR, buff, 1, HAL_MAX_DELAY);
 80010e8:	4b10      	ldr	r3, [pc, #64]	@ (800112c <BMP280_Config+0x80>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	1d3a      	adds	r2, r7, #4
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	21ee      	movs	r1, #238	@ 0xee
 80010f8:	f002 fe86 	bl	8003e08 <HAL_I2C_Master_Receive>
 80010fc:	4603      	mov	r3, r0
 80010fe:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d004      	beq.n	8001110 <BMP280_Config+0x64>
		printf("I2C Receive failure\r\n");
 8001106:	480c      	ldr	r0, [pc, #48]	@ (8001138 <BMP280_Config+0x8c>)
 8001108:	f007 fdb0 	bl	8008c6c <puts>
		return EXIT_FAILURE;
 800110c:	2301      	movs	r3, #1
 800110e:	e008      	b.n	8001122 <BMP280_Config+0x76>
	}

	if(buff[0] == BMP280_CONFIG){
 8001110:	793b      	ldrb	r3, [r7, #4]
 8001112:	2b57      	cmp	r3, #87	@ 0x57
 8001114:	d104      	bne.n	8001120 <BMP280_Config+0x74>
		printf("La config envoyée reçue avec succès\r\n");
 8001116:	4809      	ldr	r0, [pc, #36]	@ (800113c <BMP280_Config+0x90>)
 8001118:	f007 fda8 	bl	8008c6c <puts>
		return EXIT_SUCCESS;
 800111c:	2300      	movs	r3, #0
 800111e:	e000      	b.n	8001122 <BMP280_Config+0x76>
	}

	return EXIT_SUCCESS;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200001f0 	.word	0x200001f0
 8001130:	20000260 	.word	0x20000260
 8001134:	0800c3a8 	.word	0x0800c3a8
 8001138:	0800c3c0 	.word	0x0800c3c0
 800113c:	0800c3ec 	.word	0x0800c3ec

08001140 <BMP280_calibration>:
 *
 * Reads calibration data from the BMP280 sensor and stores it in global
 * variables for temperature and pressure compensation calculations.
 */
void BMP280_calibration(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08c      	sub	sp, #48	@ 0x30
 8001144:	af02      	add	r7, sp, #8
	uint8_t buff[BUFF_SIZE];
	uint8_t receive_buf[24];
	HAL_StatusTypeDef ret; 		// I2C operations status

	buff[0]= BMP280_REG_CALIBRATION;
 8001146:	2388      	movs	r3, #136	@ 0x88
 8001148:	773b      	strb	r3, [r7, #28]

	ret = HAL_I2C_Master_Transmit(hi2c_user, BMP280_ADDR, buff, 1, HAL_MAX_DELAY);
 800114a:	4b4d      	ldr	r3, [pc, #308]	@ (8001280 <BMP280_calibration+0x140>)
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	f107 021c 	add.w	r2, r7, #28
 8001152:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2301      	movs	r3, #1
 800115a:	21ee      	movs	r1, #238	@ 0xee
 800115c:	f002 fd56 	bl	8003c0c <HAL_I2C_Master_Transmit>
 8001160:	4603      	mov	r3, r0
 8001162:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if(ret != HAL_OK){
 8001166:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800116a:	2b00      	cmp	r3, #0
 800116c:	d002      	beq.n	8001174 <BMP280_calibration+0x34>
		printf("I2C Transmit failure\r\n");
 800116e:	4845      	ldr	r0, [pc, #276]	@ (8001284 <BMP280_calibration+0x144>)
 8001170:	f007 fd7c 	bl	8008c6c <puts>
	}

	ret = HAL_I2C_Master_Receive(hi2c_user, BMP280_ADDR, receive_buf, 24, HAL_MAX_DELAY);
 8001174:	4b42      	ldr	r3, [pc, #264]	@ (8001280 <BMP280_calibration+0x140>)
 8001176:	6818      	ldr	r0, [r3, #0]
 8001178:	1d3a      	adds	r2, r7, #4
 800117a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2318      	movs	r3, #24
 8001182:	21ee      	movs	r1, #238	@ 0xee
 8001184:	f002 fe40 	bl	8003e08 <HAL_I2C_Master_Receive>
 8001188:	4603      	mov	r3, r0
 800118a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if(ret != HAL_OK){
 800118e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001192:	2b00      	cmp	r3, #0
 8001194:	d002      	beq.n	800119c <BMP280_calibration+0x5c>
		printf("I2C Receive failure\r\n");
 8001196:	483c      	ldr	r0, [pc, #240]	@ (8001288 <BMP280_calibration+0x148>)
 8001198:	f007 fd68 	bl	8008c6c <puts>
		for(int i=0;i<24;i++){
			printf("calib %2d = 0x%x\r\n",i, receive_buf[i]);
		}
	}

	dig_T1 = receive_buf[0]|(receive_buf[1]<<8);
 800119c:	793b      	ldrb	r3, [r7, #4]
 800119e:	b21a      	sxth	r2, r3
 80011a0:	797b      	ldrb	r3, [r7, #5]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	4b37      	ldr	r3, [pc, #220]	@ (800128c <BMP280_calibration+0x14c>)
 80011ae:	801a      	strh	r2, [r3, #0]
	dig_T2 = receive_buf[2]|(receive_buf[3]<<8);
 80011b0:	79bb      	ldrb	r3, [r7, #6]
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	b21a      	sxth	r2, r3
 80011be:	4b34      	ldr	r3, [pc, #208]	@ (8001290 <BMP280_calibration+0x150>)
 80011c0:	801a      	strh	r2, [r3, #0]
	dig_T3 = receive_buf[4]|(receive_buf[5]<<8);
 80011c2:	7a3b      	ldrb	r3, [r7, #8]
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	7a7b      	ldrb	r3, [r7, #9]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	4b30      	ldr	r3, [pc, #192]	@ (8001294 <BMP280_calibration+0x154>)
 80011d2:	801a      	strh	r2, [r3, #0]
	dig_P1 = receive_buf[6]|(receive_buf[7]<<8);
 80011d4:	7abb      	ldrb	r3, [r7, #10]
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	7afb      	ldrb	r3, [r7, #11]
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	b21b      	sxth	r3, r3
 80011de:	4313      	orrs	r3, r2
 80011e0:	b21b      	sxth	r3, r3
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001298 <BMP280_calibration+0x158>)
 80011e6:	801a      	strh	r2, [r3, #0]
	dig_P2 = receive_buf[8]|(receive_buf[9]<<8);
 80011e8:	7b3b      	ldrb	r3, [r7, #12]
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	7b7b      	ldrb	r3, [r7, #13]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	4313      	orrs	r3, r2
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	4b29      	ldr	r3, [pc, #164]	@ (800129c <BMP280_calibration+0x15c>)
 80011f8:	801a      	strh	r2, [r3, #0]
	dig_P3 = receive_buf[10]|(receive_buf[11]<<8);
 80011fa:	7bbb      	ldrb	r3, [r7, #14]
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21b      	sxth	r3, r3
 8001204:	4313      	orrs	r3, r2
 8001206:	b21a      	sxth	r2, r3
 8001208:	4b25      	ldr	r3, [pc, #148]	@ (80012a0 <BMP280_calibration+0x160>)
 800120a:	801a      	strh	r2, [r3, #0]
	dig_P4 = receive_buf[12]|(receive_buf[13]<<8);
 800120c:	7c3b      	ldrb	r3, [r7, #16]
 800120e:	b21a      	sxth	r2, r3
 8001210:	7c7b      	ldrb	r3, [r7, #17]
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	b21b      	sxth	r3, r3
 8001216:	4313      	orrs	r3, r2
 8001218:	b21a      	sxth	r2, r3
 800121a:	4b22      	ldr	r3, [pc, #136]	@ (80012a4 <BMP280_calibration+0x164>)
 800121c:	801a      	strh	r2, [r3, #0]
	dig_P5 = receive_buf[14]|(receive_buf[15]<<8);
 800121e:	7cbb      	ldrb	r3, [r7, #18]
 8001220:	b21a      	sxth	r2, r3
 8001222:	7cfb      	ldrb	r3, [r7, #19]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21b      	sxth	r3, r3
 8001228:	4313      	orrs	r3, r2
 800122a:	b21a      	sxth	r2, r3
 800122c:	4b1e      	ldr	r3, [pc, #120]	@ (80012a8 <BMP280_calibration+0x168>)
 800122e:	801a      	strh	r2, [r3, #0]
	dig_P6 = receive_buf[16]|(receive_buf[17]<<8);
 8001230:	7d3b      	ldrb	r3, [r7, #20]
 8001232:	b21a      	sxth	r2, r3
 8001234:	7d7b      	ldrb	r3, [r7, #21]
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b21b      	sxth	r3, r3
 800123a:	4313      	orrs	r3, r2
 800123c:	b21a      	sxth	r2, r3
 800123e:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <BMP280_calibration+0x16c>)
 8001240:	801a      	strh	r2, [r3, #0]
	dig_P7 = receive_buf[18]|(receive_buf[19]<<8);
 8001242:	7dbb      	ldrb	r3, [r7, #22]
 8001244:	b21a      	sxth	r2, r3
 8001246:	7dfb      	ldrb	r3, [r7, #23]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	b21b      	sxth	r3, r3
 800124c:	4313      	orrs	r3, r2
 800124e:	b21a      	sxth	r2, r3
 8001250:	4b17      	ldr	r3, [pc, #92]	@ (80012b0 <BMP280_calibration+0x170>)
 8001252:	801a      	strh	r2, [r3, #0]
	dig_P8 = receive_buf[20]|(receive_buf[21]<<8);
 8001254:	7e3b      	ldrb	r3, [r7, #24]
 8001256:	b21a      	sxth	r2, r3
 8001258:	7e7b      	ldrb	r3, [r7, #25]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	b21b      	sxth	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	b21a      	sxth	r2, r3
 8001262:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <BMP280_calibration+0x174>)
 8001264:	801a      	strh	r2, [r3, #0]
	dig_P9 = receive_buf[22]|(receive_buf[23]<<8);
 8001266:	7ebb      	ldrb	r3, [r7, #26]
 8001268:	b21a      	sxth	r2, r3
 800126a:	7efb      	ldrb	r3, [r7, #27]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	b21b      	sxth	r3, r3
 8001270:	4313      	orrs	r3, r2
 8001272:	b21a      	sxth	r2, r3
 8001274:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <BMP280_calibration+0x178>)
 8001276:	801a      	strh	r2, [r3, #0]
}
 8001278:	bf00      	nop
 800127a:	3728      	adds	r7, #40	@ 0x28
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200001f0 	.word	0x200001f0
 8001284:	0800c3a8 	.word	0x0800c3a8
 8001288:	0800c3c0 	.word	0x0800c3c0
 800128c:	200001f4 	.word	0x200001f4
 8001290:	200001f6 	.word	0x200001f6
 8001294:	200001f8 	.word	0x200001f8
 8001298:	200001fa 	.word	0x200001fa
 800129c:	200001fc 	.word	0x200001fc
 80012a0:	200001fe 	.word	0x200001fe
 80012a4:	20000200 	.word	0x20000200
 80012a8:	20000202 	.word	0x20000202
 80012ac:	20000204 	.word	0x20000204
 80012b0:	20000206 	.word	0x20000206
 80012b4:	20000208 	.word	0x20000208
 80012b8:	2000020a 	.word	0x2000020a

080012bc <BMP280_Read_Reg>:
 *
 * @param reg Register address to read from.
 * @param length Number of bytes to read.
 * @return uint8_t* Pointer to buffer with read data. The caller is responsible for freeing the buffer.
 */
uint8_t* BMP280_Read_Reg(uint8_t reg, uint8_t length) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af02      	add	r7, sp, #8
 80012c2:	4603      	mov	r3, r0
 80012c4:	460a      	mov	r2, r1
 80012c6:	71fb      	strb	r3, [r7, #7]
 80012c8:	4613      	mov	r3, r2
 80012ca:	71bb      	strb	r3, [r7, #6]
	uint8_t *buf;
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(hi2c_user, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 80012cc:	4b17      	ldr	r3, [pc, #92]	@ (800132c <BMP280_Read_Reg+0x70>)
 80012ce:	6818      	ldr	r0, [r3, #0]
 80012d0:	1dfa      	adds	r2, r7, #7
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2301      	movs	r3, #1
 80012da:	21ee      	movs	r1, #238	@ 0xee
 80012dc:	f002 fc96 	bl	8003c0c <HAL_I2C_Master_Transmit>
 80012e0:	4603      	mov	r3, r0
 80012e2:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <BMP280_Read_Reg+0x34>
		printf("Problem with I2C Transmit\r\n");
 80012ea:	4811      	ldr	r0, [pc, #68]	@ (8001330 <BMP280_Read_Reg+0x74>)
 80012ec:	f007 fcbe 	bl	8008c6c <puts>
	}

	buf = (uint8_t*) malloc(length);
 80012f0:	79bb      	ldrb	r3, [r7, #6]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f006 fc66 	bl	8007bc4 <malloc>
 80012f8:	4603      	mov	r3, r0
 80012fa:	60bb      	str	r3, [r7, #8]
	ret = HAL_I2C_Master_Receive(hi2c_user, BMP280_ADDR, buf, length,
 80012fc:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <BMP280_Read_Reg+0x70>)
 80012fe:	6818      	ldr	r0, [r3, #0]
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	b29b      	uxth	r3, r3
 8001304:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001308:	9200      	str	r2, [sp, #0]
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	21ee      	movs	r1, #238	@ 0xee
 800130e:	f002 fd7b 	bl	8003e08 <HAL_I2C_Master_Receive>
 8001312:	4603      	mov	r3, r0
 8001314:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	if (ret != 0) {
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <BMP280_Read_Reg+0x66>
		printf("Problem with I2C Receive\r\n");
 800131c:	4805      	ldr	r0, [pc, #20]	@ (8001334 <BMP280_Read_Reg+0x78>)
 800131e:	f007 fca5 	bl	8008c6c <puts>
	}

	return buf;
 8001322:	68bb      	ldr	r3, [r7, #8]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200001f0 	.word	0x200001f0
 8001330:	0800c414 	.word	0x0800c414
 8001334:	0800c430 	.word	0x0800c430

08001338 <BMP280_get_temperature>:
 * Reads the raw temperature data from the BMP280, compensates it, and
 * returns the result. Prints both raw and compensated temperature values.
 *
 * @return BMP280_S32_t Compensated temperature in degrees Celsius, scaled by 100.
 */
BMP280_S32_t BMP280_get_temperature() {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_T;

	buf = BMP280_Read_Reg(BMP280_REG_TEMP_MSB, BMP280_LEN_TEMP);
 800133e:	2103      	movs	r1, #3
 8001340:	20fa      	movs	r0, #250	@ 0xfa
 8001342:	f7ff ffbb 	bl	80012bc <BMP280_Read_Reg>
 8001346:	6078      	str	r0, [r7, #4]

	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	031a      	lsls	r2, r3, #12
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3301      	adds	r3, #1
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	011b      	lsls	r3, r3, #4
 8001356:	4313      	orrs	r3, r2
							| ((BMP280_S32_t) (buf[2]) >> 4);
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	3202      	adds	r2, #2
 800135c:	7812      	ldrb	r2, [r2, #0]
 800135e:	0912      	lsrs	r2, r2, #4
 8001360:	b2d2      	uxtb	r2, r2
	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8001362:	4313      	orrs	r3, r2
 8001364:	603b      	str	r3, [r7, #0]

	free(buf);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f006 fc34 	bl	8007bd4 <free>
		printf("Compensated temperature: ");
		printf("0x%05lX = %d°C", adc_T, adc_T);
		printf("\r\n");
	}

	return adc_T;
 800136c:	683b      	ldr	r3, [r7, #0]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <MPU_begin>:
/// @param aScale Set accelerometer full scale range: 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.
/// @param gScale Set gyroscope full scale range: 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
/// @param tau Set tau value for the complementary filter (typically 0.98).
/// @param dt Set sampling rate in seconds determined by the timer interrupt.
uint8_t MPU_begin(I2C_HandleTypeDef *I2Cx, uint8_t addr, uint8_t aScale, uint8_t gScale, float tau, float dt)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	@ 0x28
 800137c:	af04      	add	r7, sp, #16
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	4608      	mov	r0, r1
 8001382:	4611      	mov	r1, r2
 8001384:	461a      	mov	r2, r3
 8001386:	ed87 0a01 	vstr	s0, [r7, #4]
 800138a:	edc7 0a00 	vstr	s1, [r7]
 800138e:	4603      	mov	r3, r0
 8001390:	72fb      	strb	r3, [r7, #11]
 8001392:	460b      	mov	r3, r1
 8001394:	72bb      	strb	r3, [r7, #10]
 8001396:	4613      	mov	r3, r2
 8001398:	727b      	strb	r3, [r7, #9]
    // Save values
    _addr = addr << 1;
 800139a:	7afb      	ldrb	r3, [r7, #11]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	4b20      	ldr	r3, [pc, #128]	@ (8001424 <MPU_begin+0xac>)
 80013a2:	701a      	strb	r2, [r3, #0]
    _tau = tau;
 80013a4:	4a20      	ldr	r2, [pc, #128]	@ (8001428 <MPU_begin+0xb0>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6013      	str	r3, [r2, #0]
    _dt = dt;
 80013aa:	4a20      	ldr	r2, [pc, #128]	@ (800142c <MPU_begin+0xb4>)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	6013      	str	r3, [r2, #0]
    // Initialize variables
    uint8_t check;
    uint8_t select;

    // Confirm device
    HAL_I2C_Mem_Read(I2Cx, _addr, WHO_AM_I, 1, &check, 1, I2C_TIMOUT_MS);
 80013b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001424 <MPU_begin+0xac>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	4619      	mov	r1, r3
 80013b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ba:	9302      	str	r3, [sp, #8]
 80013bc:	2301      	movs	r3, #1
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	f107 0317 	add.w	r3, r7, #23
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2301      	movs	r3, #1
 80013c8:	2275      	movs	r2, #117	@ 0x75
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f003 f848 	bl	8004460 <HAL_I2C_Mem_Read>

    // TODO: If 9250 or 6050 fails could it trigger the opposite check???
    if ((check == WHO_AM_I_9250_ANS) || (check == WHO_AM_I_6050_ANS))
 80013d0:	7dfb      	ldrb	r3, [r7, #23]
 80013d2:	2b71      	cmp	r3, #113	@ 0x71
 80013d4:	d002      	beq.n	80013dc <MPU_begin+0x64>
 80013d6:	7dfb      	ldrb	r3, [r7, #23]
 80013d8:	2b68      	cmp	r3, #104	@ 0x68
 80013da:	d11d      	bne.n	8001418 <MPU_begin+0xa0>
    {
        // Startup / reset the sensor
        select = 0x00;
 80013dc:	2300      	movs	r3, #0
 80013de:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(I2Cx, _addr, PWR_MGMT_1, 1, &select, 1, I2C_TIMOUT_MS);
 80013e0:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <MPU_begin+0xac>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ea:	9302      	str	r3, [sp, #8]
 80013ec:	2301      	movs	r3, #1
 80013ee:	9301      	str	r3, [sp, #4]
 80013f0:	f107 0316 	add.w	r3, r7, #22
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2301      	movs	r3, #1
 80013f8:	226b      	movs	r2, #107	@ 0x6b
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f002 ff36 	bl	800426c <HAL_I2C_Mem_Write>

        // Set the full scale ranges
        MPU_writeAccFullScaleRange(I2Cx, aScale);
 8001400:	7abb      	ldrb	r3, [r7, #10]
 8001402:	4619      	mov	r1, r3
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f000 f813 	bl	8001430 <MPU_writeAccFullScaleRange>
        MPU_writeGyroFullScaleRange(I2Cx, gScale);
 800140a:	7a7b      	ldrb	r3, [r7, #9]
 800140c:	4619      	mov	r1, r3
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f000 f89e 	bl	8001550 <MPU_writeGyroFullScaleRange>

        return 1;
 8001414:	2301      	movs	r3, #1
 8001416:	e000      	b.n	800141a <MPU_begin+0xa2>
    }
    else
    {
        return 0;
 8001418:	2300      	movs	r3, #0
    }
}
 800141a:	4618      	mov	r0, r3
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000224 	.word	0x20000224
 8001428:	2000022c 	.word	0x2000022c
 800142c:	20000228 	.word	0x20000228

08001430 <MPU_writeAccFullScaleRange>:

/// @brief Set the accelerometer full scale range.
/// @param I2Cx Pointer to I2C structure config.
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.
void MPU_writeAccFullScaleRange(I2C_HandleTypeDef *I2Cx, uint8_t aScale)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af04      	add	r7, sp, #16
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	70fb      	strb	r3, [r7, #3]
    // Variable init
    uint8_t select;

    // Set the value
    switch (aScale)
 800143c:	78fb      	ldrb	r3, [r7, #3]
 800143e:	2b03      	cmp	r3, #3
 8001440:	d866      	bhi.n	8001510 <MPU_writeAccFullScaleRange+0xe0>
 8001442:	a201      	add	r2, pc, #4	@ (adr r2, 8001448 <MPU_writeAccFullScaleRange+0x18>)
 8001444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001448:	08001459 	.word	0x08001459
 800144c:	08001487 	.word	0x08001487
 8001450:	080014b5 	.word	0x080014b5
 8001454:	080014e3 	.word	0x080014e3
    {
    case AFSR_2G:
        aScaleFactor = 16384.0;
 8001458:	4b3b      	ldr	r3, [pc, #236]	@ (8001548 <MPU_writeAccFullScaleRange+0x118>)
 800145a:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 800145e:	601a      	str	r2, [r3, #0]
        select = 0x00;
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001464:	4b39      	ldr	r3, [pc, #228]	@ (800154c <MPU_writeAccFullScaleRange+0x11c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4619      	mov	r1, r3
 800146a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800146e:	9302      	str	r3, [sp, #8]
 8001470:	2301      	movs	r3, #1
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	f107 030f 	add.w	r3, r7, #15
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	2301      	movs	r3, #1
 800147c:	221c      	movs	r2, #28
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f002 fef4 	bl	800426c <HAL_I2C_Mem_Write>
        break;
 8001484:	e05b      	b.n	800153e <MPU_writeAccFullScaleRange+0x10e>
    case AFSR_4G:
        aScaleFactor = 8192.0;
 8001486:	4b30      	ldr	r3, [pc, #192]	@ (8001548 <MPU_writeAccFullScaleRange+0x118>)
 8001488:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 800148c:	601a      	str	r2, [r3, #0]
        select = 0x08;
 800148e:	2308      	movs	r3, #8
 8001490:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001492:	4b2e      	ldr	r3, [pc, #184]	@ (800154c <MPU_writeAccFullScaleRange+0x11c>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	4619      	mov	r1, r3
 8001498:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800149c:	9302      	str	r3, [sp, #8]
 800149e:	2301      	movs	r3, #1
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	f107 030f 	add.w	r3, r7, #15
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2301      	movs	r3, #1
 80014aa:	221c      	movs	r2, #28
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f002 fedd 	bl	800426c <HAL_I2C_Mem_Write>
        break;
 80014b2:	e044      	b.n	800153e <MPU_writeAccFullScaleRange+0x10e>
    case AFSR_8G:
        aScaleFactor = 4096.0;
 80014b4:	4b24      	ldr	r3, [pc, #144]	@ (8001548 <MPU_writeAccFullScaleRange+0x118>)
 80014b6:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 80014ba:	601a      	str	r2, [r3, #0]
        select = 0x10;
 80014bc:	2310      	movs	r3, #16
 80014be:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80014c0:	4b22      	ldr	r3, [pc, #136]	@ (800154c <MPU_writeAccFullScaleRange+0x11c>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4619      	mov	r1, r3
 80014c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ca:	9302      	str	r3, [sp, #8]
 80014cc:	2301      	movs	r3, #1
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	f107 030f 	add.w	r3, r7, #15
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2301      	movs	r3, #1
 80014d8:	221c      	movs	r2, #28
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f002 fec6 	bl	800426c <HAL_I2C_Mem_Write>
        break;
 80014e0:	e02d      	b.n	800153e <MPU_writeAccFullScaleRange+0x10e>
    case AFSR_16G:
        aScaleFactor = 2048.0;
 80014e2:	4b19      	ldr	r3, [pc, #100]	@ (8001548 <MPU_writeAccFullScaleRange+0x118>)
 80014e4:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 80014e8:	601a      	str	r2, [r3, #0]
        select = 0x18;
 80014ea:	2318      	movs	r3, #24
 80014ec:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80014ee:	4b17      	ldr	r3, [pc, #92]	@ (800154c <MPU_writeAccFullScaleRange+0x11c>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	4619      	mov	r1, r3
 80014f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014f8:	9302      	str	r3, [sp, #8]
 80014fa:	2301      	movs	r3, #1
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	f107 030f 	add.w	r3, r7, #15
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2301      	movs	r3, #1
 8001506:	221c      	movs	r2, #28
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f002 feaf 	bl	800426c <HAL_I2C_Mem_Write>
        break;
 800150e:	e016      	b.n	800153e <MPU_writeAccFullScaleRange+0x10e>
    default:
        aScaleFactor = 8192.0;
 8001510:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <MPU_writeAccFullScaleRange+0x118>)
 8001512:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8001516:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8001518:	2308      	movs	r3, #8
 800151a:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 800151c:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <MPU_writeAccFullScaleRange+0x11c>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001526:	9302      	str	r3, [sp, #8]
 8001528:	2301      	movs	r3, #1
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	f107 030f 	add.w	r3, r7, #15
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	2301      	movs	r3, #1
 8001534:	221c      	movs	r2, #28
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f002 fe98 	bl	800426c <HAL_I2C_Mem_Write>
        break;
 800153c:	bf00      	nop
    }
}
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000230 	.word	0x20000230
 800154c:	20000224 	.word	0x20000224

08001550 <MPU_writeGyroFullScaleRange>:

/// @brief Set the gyroscope full scale range.
/// @param I2Cx Pointer to I2C structure config.
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
void MPU_writeGyroFullScaleRange(I2C_HandleTypeDef *I2Cx, uint8_t gScale)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af04      	add	r7, sp, #16
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	70fb      	strb	r3, [r7, #3]
    // Variable init
    uint8_t select;

    // Set the value
    switch (gScale)
 800155c:	78fb      	ldrb	r3, [r7, #3]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d862      	bhi.n	8001628 <MPU_writeGyroFullScaleRange+0xd8>
 8001562:	a201      	add	r2, pc, #4	@ (adr r2, 8001568 <MPU_writeGyroFullScaleRange+0x18>)
 8001564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001568:	08001579 	.word	0x08001579
 800156c:	080015a5 	.word	0x080015a5
 8001570:	080015d1 	.word	0x080015d1
 8001574:	080015fd 	.word	0x080015fd
    {
    case GFSR_250DPS:
        gScaleFactor = 131.0;
 8001578:	4b38      	ldr	r3, [pc, #224]	@ (800165c <MPU_writeGyroFullScaleRange+0x10c>)
 800157a:	4a39      	ldr	r2, [pc, #228]	@ (8001660 <MPU_writeGyroFullScaleRange+0x110>)
 800157c:	601a      	str	r2, [r3, #0]
        select = 0x00;
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001582:	4b38      	ldr	r3, [pc, #224]	@ (8001664 <MPU_writeGyroFullScaleRange+0x114>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	4619      	mov	r1, r3
 8001588:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800158c:	9302      	str	r3, [sp, #8]
 800158e:	2301      	movs	r3, #1
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	f107 030f 	add.w	r3, r7, #15
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2301      	movs	r3, #1
 800159a:	221b      	movs	r2, #27
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f002 fe65 	bl	800426c <HAL_I2C_Mem_Write>
        break;
 80015a2:	e057      	b.n	8001654 <MPU_writeGyroFullScaleRange+0x104>
    case GFSR_500DPS:
        gScaleFactor = 65.5;
 80015a4:	4b2d      	ldr	r3, [pc, #180]	@ (800165c <MPU_writeGyroFullScaleRange+0x10c>)
 80015a6:	4a30      	ldr	r2, [pc, #192]	@ (8001668 <MPU_writeGyroFullScaleRange+0x118>)
 80015a8:	601a      	str	r2, [r3, #0]
        select = 0x08;
 80015aa:	2308      	movs	r3, #8
 80015ac:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80015ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001664 <MPU_writeGyroFullScaleRange+0x114>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	4619      	mov	r1, r3
 80015b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015b8:	9302      	str	r3, [sp, #8]
 80015ba:	2301      	movs	r3, #1
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	f107 030f 	add.w	r3, r7, #15
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	2301      	movs	r3, #1
 80015c6:	221b      	movs	r2, #27
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f002 fe4f 	bl	800426c <HAL_I2C_Mem_Write>
        break;
 80015ce:	e041      	b.n	8001654 <MPU_writeGyroFullScaleRange+0x104>
    case GFSR_1000DPS:
        gScaleFactor = 32.8;
 80015d0:	4b22      	ldr	r3, [pc, #136]	@ (800165c <MPU_writeGyroFullScaleRange+0x10c>)
 80015d2:	4a26      	ldr	r2, [pc, #152]	@ (800166c <MPU_writeGyroFullScaleRange+0x11c>)
 80015d4:	601a      	str	r2, [r3, #0]
        select = 0x10;
 80015d6:	2310      	movs	r3, #16
 80015d8:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80015da:	4b22      	ldr	r3, [pc, #136]	@ (8001664 <MPU_writeGyroFullScaleRange+0x114>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	4619      	mov	r1, r3
 80015e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015e4:	9302      	str	r3, [sp, #8]
 80015e6:	2301      	movs	r3, #1
 80015e8:	9301      	str	r3, [sp, #4]
 80015ea:	f107 030f 	add.w	r3, r7, #15
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	2301      	movs	r3, #1
 80015f2:	221b      	movs	r2, #27
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f002 fe39 	bl	800426c <HAL_I2C_Mem_Write>
        break;
 80015fa:	e02b      	b.n	8001654 <MPU_writeGyroFullScaleRange+0x104>
    case GFSR_2000DPS:
        gScaleFactor = 16.4;
 80015fc:	4b17      	ldr	r3, [pc, #92]	@ (800165c <MPU_writeGyroFullScaleRange+0x10c>)
 80015fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001670 <MPU_writeGyroFullScaleRange+0x120>)
 8001600:	601a      	str	r2, [r3, #0]
        select = 0x18;
 8001602:	2318      	movs	r3, #24
 8001604:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001606:	4b17      	ldr	r3, [pc, #92]	@ (8001664 <MPU_writeGyroFullScaleRange+0x114>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	4619      	mov	r1, r3
 800160c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001610:	9302      	str	r3, [sp, #8]
 8001612:	2301      	movs	r3, #1
 8001614:	9301      	str	r3, [sp, #4]
 8001616:	f107 030f 	add.w	r3, r7, #15
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2301      	movs	r3, #1
 800161e:	221b      	movs	r2, #27
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f002 fe23 	bl	800426c <HAL_I2C_Mem_Write>
        break;
 8001626:	e015      	b.n	8001654 <MPU_writeGyroFullScaleRange+0x104>
    default:
        gScaleFactor = 65.5;
 8001628:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <MPU_writeGyroFullScaleRange+0x10c>)
 800162a:	4a0f      	ldr	r2, [pc, #60]	@ (8001668 <MPU_writeGyroFullScaleRange+0x118>)
 800162c:	601a      	str	r2, [r3, #0]
        select = 0x08;
 800162e:	2308      	movs	r3, #8
 8001630:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001632:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <MPU_writeGyroFullScaleRange+0x114>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	4619      	mov	r1, r3
 8001638:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800163c:	9302      	str	r3, [sp, #8]
 800163e:	2301      	movs	r3, #1
 8001640:	9301      	str	r3, [sp, #4]
 8001642:	f107 030f 	add.w	r3, r7, #15
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	2301      	movs	r3, #1
 800164a:	221b      	movs	r2, #27
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f002 fe0d 	bl	800426c <HAL_I2C_Mem_Write>
        break;
 8001652:	bf00      	nop
    }
}
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000234 	.word	0x20000234
 8001660:	43030000 	.word	0x43030000
 8001664:	20000224 	.word	0x20000224
 8001668:	42830000 	.word	0x42830000
 800166c:	42033333 	.word	0x42033333
 8001670:	41833333 	.word	0x41833333

08001674 <MPU_readRawData>:

/// @brief Read raw data from IMU.
/// @param I2Cx Pointer to I2C structure config.
void MPU_readRawData(I2C_HandleTypeDef *I2Cx)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	@ 0x28
 8001678:	af04      	add	r7, sp, #16
 800167a:	6078      	str	r0, [r7, #4]
    // Init buffer
    uint8_t buf[14];

    // Subroutine for reading the raw data
    HAL_I2C_Mem_Read(I2Cx, _addr, ACCEL_XOUT_H, 1, buf, 14, I2C_TIMOUT_MS);
 800167c:	4b24      	ldr	r3, [pc, #144]	@ (8001710 <MPU_readRawData+0x9c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001686:	9302      	str	r3, [sp, #8]
 8001688:	230e      	movs	r3, #14
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	f107 0308 	add.w	r3, r7, #8
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2301      	movs	r3, #1
 8001694:	223b      	movs	r2, #59	@ 0x3b
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f002 fee2 	bl	8004460 <HAL_I2C_Mem_Read>

    // Bit shift the data
    rawData.ax = buf[0] << 8 | buf[1];
 800169c:	7a3b      	ldrb	r3, [r7, #8]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	7a7b      	ldrb	r3, [r7, #9]
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	4313      	orrs	r3, r2
 80016a8:	b21a      	sxth	r2, r3
 80016aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001714 <MPU_readRawData+0xa0>)
 80016ac:	801a      	strh	r2, [r3, #0]
    rawData.ay = buf[2] << 8 | buf[3];
 80016ae:	7abb      	ldrb	r3, [r7, #10]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	b21a      	sxth	r2, r3
 80016b4:	7afb      	ldrb	r3, [r7, #11]
 80016b6:	b21b      	sxth	r3, r3
 80016b8:	4313      	orrs	r3, r2
 80016ba:	b21a      	sxth	r2, r3
 80016bc:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <MPU_readRawData+0xa0>)
 80016be:	805a      	strh	r2, [r3, #2]
    rawData.az = buf[4] << 8 | buf[5];
 80016c0:	7b3b      	ldrb	r3, [r7, #12]
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	7b7b      	ldrb	r3, [r7, #13]
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	4313      	orrs	r3, r2
 80016cc:	b21a      	sxth	r2, r3
 80016ce:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <MPU_readRawData+0xa0>)
 80016d0:	809a      	strh	r2, [r3, #4]
    // temperature = buf[6] << 8 | buf[7];
    rawData.gx = buf[8] << 8 | buf[9];
 80016d2:	7c3b      	ldrb	r3, [r7, #16]
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	b21a      	sxth	r2, r3
 80016d8:	7c7b      	ldrb	r3, [r7, #17]
 80016da:	b21b      	sxth	r3, r3
 80016dc:	4313      	orrs	r3, r2
 80016de:	b21a      	sxth	r2, r3
 80016e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <MPU_readRawData+0xa0>)
 80016e2:	80da      	strh	r2, [r3, #6]
    rawData.gy = buf[10] << 8 | buf[11];
 80016e4:	7cbb      	ldrb	r3, [r7, #18]
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	b21a      	sxth	r2, r3
 80016ea:	7cfb      	ldrb	r3, [r7, #19]
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	4313      	orrs	r3, r2
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <MPU_readRawData+0xa0>)
 80016f4:	811a      	strh	r2, [r3, #8]
    rawData.gz = buf[12] << 8 | buf[13];
 80016f6:	7d3b      	ldrb	r3, [r7, #20]
 80016f8:	021b      	lsls	r3, r3, #8
 80016fa:	b21a      	sxth	r2, r3
 80016fc:	7d7b      	ldrb	r3, [r7, #21]
 80016fe:	b21b      	sxth	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	b21a      	sxth	r2, r3
 8001704:	4b03      	ldr	r3, [pc, #12]	@ (8001714 <MPU_readRawData+0xa0>)
 8001706:	815a      	strh	r2, [r3, #10]
}
 8001708:	bf00      	nop
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000224 	.word	0x20000224
 8001714:	2000020c 	.word	0x2000020c

08001718 <MPU_calibrateGyro>:

/// @brief Find offsets for each axis of gyroscope.
/// @param I2Cx Pointer to I2C structure config.
/// @param numCalPoints Number of data points to average.
void MPU_calibrateGyro(I2C_HandleTypeDef *I2Cx, uint16_t numCalPoints)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	807b      	strh	r3, [r7, #2]
    // Init
    int32_t x = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]
    int32_t z = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]

    // Zero guard
    if (numCalPoints == 0)
 8001730:	887b      	ldrh	r3, [r7, #2]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <MPU_calibrateGyro+0x22>
    {
        numCalPoints = 1;
 8001736:	2301      	movs	r3, #1
 8001738:	807b      	strh	r3, [r7, #2]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 800173a:	2300      	movs	r3, #0
 800173c:	817b      	strh	r3, [r7, #10]
 800173e:	e01d      	b.n	800177c <MPU_calibrateGyro+0x64>
    {
        MPU_readRawData(I2Cx);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ff97 	bl	8001674 <MPU_readRawData>
        x += rawData.gx;
 8001746:	4b28      	ldr	r3, [pc, #160]	@ (80017e8 <MPU_calibrateGyro+0xd0>)
 8001748:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800174c:	461a      	mov	r2, r3
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	4413      	add	r3, r2
 8001752:	617b      	str	r3, [r7, #20]
        y += rawData.gy;
 8001754:	4b24      	ldr	r3, [pc, #144]	@ (80017e8 <MPU_calibrateGyro+0xd0>)
 8001756:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800175a:	461a      	mov	r2, r3
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4413      	add	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        z += rawData.gz;
 8001762:	4b21      	ldr	r3, [pc, #132]	@ (80017e8 <MPU_calibrateGyro+0xd0>)
 8001764:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001768:	461a      	mov	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4413      	add	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
        HAL_Delay(3);
 8001770:	2003      	movs	r0, #3
 8001772:	f001 f811 	bl	8002798 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8001776:	897b      	ldrh	r3, [r7, #10]
 8001778:	3301      	adds	r3, #1
 800177a:	817b      	strh	r3, [r7, #10]
 800177c:	897a      	ldrh	r2, [r7, #10]
 800177e:	887b      	ldrh	r3, [r7, #2]
 8001780:	429a      	cmp	r2, r3
 8001782:	d3dd      	bcc.n	8001740 <MPU_calibrateGyro+0x28>
    }

    // Average the saved data points to find the gyroscope offset
    gyroCal.x = (float)x / (float)numCalPoints;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	ee07 3a90 	vmov	s15, r3
 800178a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800178e:	887b      	ldrh	r3, [r7, #2]
 8001790:	ee07 3a90 	vmov	s15, r3
 8001794:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800179c:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <MPU_calibrateGyro+0xd4>)
 800179e:	edc3 7a00 	vstr	s15, [r3]
    gyroCal.y = (float)y / (float)numCalPoints;
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017ac:	887b      	ldrh	r3, [r7, #2]
 80017ae:	ee07 3a90 	vmov	s15, r3
 80017b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ba:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <MPU_calibrateGyro+0xd4>)
 80017bc:	edc3 7a01 	vstr	s15, [r3, #4]
    gyroCal.z = (float)z / (float)numCalPoints;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017ca:	887b      	ldrh	r3, [r7, #2]
 80017cc:	ee07 3a90 	vmov	s15, r3
 80017d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017d8:	4b04      	ldr	r3, [pc, #16]	@ (80017ec <MPU_calibrateGyro+0xd4>)
 80017da:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80017de:	bf00      	nop
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	2000020c 	.word	0x2000020c
 80017ec:	20000218 	.word	0x20000218

080017f0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80017f4:	4b17      	ldr	r3, [pc, #92]	@ (8001854 <MX_CAN1_Init+0x64>)
 80017f6:	4a18      	ldr	r2, [pc, #96]	@ (8001858 <MX_CAN1_Init+0x68>)
 80017f8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 80017fa:	4b16      	ldr	r3, [pc, #88]	@ (8001854 <MX_CAN1_Init+0x64>)
 80017fc:	220a      	movs	r2, #10
 80017fe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001800:	4b14      	ldr	r3, [pc, #80]	@ (8001854 <MX_CAN1_Init+0x64>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001806:	4b13      	ldr	r3, [pc, #76]	@ (8001854 <MX_CAN1_Init+0x64>)
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800180c:	4b11      	ldr	r3, [pc, #68]	@ (8001854 <MX_CAN1_Init+0x64>)
 800180e:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8001812:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001814:	4b0f      	ldr	r3, [pc, #60]	@ (8001854 <MX_CAN1_Init+0x64>)
 8001816:	2200      	movs	r2, #0
 8001818:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800181a:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <MX_CAN1_Init+0x64>)
 800181c:	2200      	movs	r2, #0
 800181e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001820:	4b0c      	ldr	r3, [pc, #48]	@ (8001854 <MX_CAN1_Init+0x64>)
 8001822:	2200      	movs	r2, #0
 8001824:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001826:	4b0b      	ldr	r3, [pc, #44]	@ (8001854 <MX_CAN1_Init+0x64>)
 8001828:	2200      	movs	r2, #0
 800182a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800182c:	4b09      	ldr	r3, [pc, #36]	@ (8001854 <MX_CAN1_Init+0x64>)
 800182e:	2200      	movs	r2, #0
 8001830:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001832:	4b08      	ldr	r3, [pc, #32]	@ (8001854 <MX_CAN1_Init+0x64>)
 8001834:	2200      	movs	r2, #0
 8001836:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001838:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <MX_CAN1_Init+0x64>)
 800183a:	2200      	movs	r2, #0
 800183c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800183e:	4805      	ldr	r0, [pc, #20]	@ (8001854 <MX_CAN1_Init+0x64>)
 8001840:	f000 ffce 	bl	80027e0 <HAL_CAN_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800184a:	f000 fae9 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000238 	.word	0x20000238
 8001858:	40006400 	.word	0x40006400

0800185c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	@ 0x28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a19      	ldr	r2, [pc, #100]	@ (80018e0 <HAL_CAN_MspInit+0x84>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d12c      	bne.n	80018d8 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	4b18      	ldr	r3, [pc, #96]	@ (80018e4 <HAL_CAN_MspInit+0x88>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	4a17      	ldr	r2, [pc, #92]	@ (80018e4 <HAL_CAN_MspInit+0x88>)
 8001888:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800188c:	6413      	str	r3, [r2, #64]	@ 0x40
 800188e:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <HAL_CAN_MspInit+0x88>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <HAL_CAN_MspInit+0x88>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	4a10      	ldr	r2, [pc, #64]	@ (80018e4 <HAL_CAN_MspInit+0x88>)
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018aa:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <HAL_CAN_MspInit+0x88>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c4:	2303      	movs	r3, #3
 80018c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80018c8:	2309      	movs	r3, #9
 80018ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	4619      	mov	r1, r3
 80018d2:	4805      	ldr	r0, [pc, #20]	@ (80018e8 <HAL_CAN_MspInit+0x8c>)
 80018d4:	f001 fea8 	bl	8003628 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80018d8:	bf00      	nop
 80018da:	3728      	adds	r7, #40	@ 0x28
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40006400 	.word	0x40006400
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40020400 	.word	0x40020400

080018ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <MX_DMA_Init+0x3c>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001928 <MX_DMA_Init+0x3c>)
 80018fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001900:	6313      	str	r3, [r2, #48]	@ 0x30
 8001902:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <MX_DMA_Init+0x3c>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	203a      	movs	r0, #58	@ 0x3a
 8001914:	f001 fa4f 	bl	8002db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001918:	203a      	movs	r0, #58	@ 0x3a
 800191a:	f001 fa68 	bl	8002dee <HAL_NVIC_EnableIRQ>

}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800

0800192c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	@ 0x28
 8001930:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
 8001940:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	4b2d      	ldr	r3, [pc, #180]	@ (80019fc <MX_GPIO_Init+0xd0>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	4a2c      	ldr	r2, [pc, #176]	@ (80019fc <MX_GPIO_Init+0xd0>)
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	6313      	str	r3, [r2, #48]	@ 0x30
 8001952:	4b2a      	ldr	r3, [pc, #168]	@ (80019fc <MX_GPIO_Init+0xd0>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b26      	ldr	r3, [pc, #152]	@ (80019fc <MX_GPIO_Init+0xd0>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	4a25      	ldr	r2, [pc, #148]	@ (80019fc <MX_GPIO_Init+0xd0>)
 8001968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800196c:	6313      	str	r3, [r2, #48]	@ 0x30
 800196e:	4b23      	ldr	r3, [pc, #140]	@ (80019fc <MX_GPIO_Init+0xd0>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	4b1f      	ldr	r3, [pc, #124]	@ (80019fc <MX_GPIO_Init+0xd0>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	4a1e      	ldr	r2, [pc, #120]	@ (80019fc <MX_GPIO_Init+0xd0>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6313      	str	r3, [r2, #48]	@ 0x30
 800198a:	4b1c      	ldr	r3, [pc, #112]	@ (80019fc <MX_GPIO_Init+0xd0>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	4b18      	ldr	r3, [pc, #96]	@ (80019fc <MX_GPIO_Init+0xd0>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	4a17      	ldr	r2, [pc, #92]	@ (80019fc <MX_GPIO_Init+0xd0>)
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a6:	4b15      	ldr	r3, [pc, #84]	@ (80019fc <MX_GPIO_Init+0xd0>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2120      	movs	r1, #32
 80019b6:	4812      	ldr	r0, [pc, #72]	@ (8001a00 <MX_GPIO_Init+0xd4>)
 80019b8:	f001 ffca 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019c2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	4619      	mov	r1, r3
 80019d2:	480c      	ldr	r0, [pc, #48]	@ (8001a04 <MX_GPIO_Init+0xd8>)
 80019d4:	f001 fe28 	bl	8003628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019d8:	2320      	movs	r3, #32
 80019da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019dc:	2301      	movs	r3, #1
 80019de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	4619      	mov	r1, r3
 80019ee:	4804      	ldr	r0, [pc, #16]	@ (8001a00 <MX_GPIO_Init+0xd4>)
 80019f0:	f001 fe1a 	bl	8003628 <HAL_GPIO_Init>

}
 80019f4:	bf00      	nop
 80019f6:	3728      	adds	r7, #40	@ 0x28
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020000 	.word	0x40020000
 8001a04:	40020800 	.word	0x40020800

08001a08 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a0c:	4b12      	ldr	r3, [pc, #72]	@ (8001a58 <MX_I2C3_Init+0x50>)
 8001a0e:	4a13      	ldr	r2, [pc, #76]	@ (8001a5c <MX_I2C3_Init+0x54>)
 8001a10:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001a12:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <MX_I2C3_Init+0x50>)
 8001a14:	4a12      	ldr	r2, [pc, #72]	@ (8001a60 <MX_I2C3_Init+0x58>)
 8001a16:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a18:	4b0f      	ldr	r3, [pc, #60]	@ (8001a58 <MX_I2C3_Init+0x50>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a58 <MX_I2C3_Init+0x50>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a24:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <MX_I2C3_Init+0x50>)
 8001a26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a2a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a58 <MX_I2C3_Init+0x50>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a32:	4b09      	ldr	r3, [pc, #36]	@ (8001a58 <MX_I2C3_Init+0x50>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a38:	4b07      	ldr	r3, [pc, #28]	@ (8001a58 <MX_I2C3_Init+0x50>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a3e:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <MX_I2C3_Init+0x50>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a44:	4804      	ldr	r0, [pc, #16]	@ (8001a58 <MX_I2C3_Init+0x50>)
 8001a46:	f001 ff9d 	bl	8003984 <HAL_I2C_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a50:	f000 f9e6 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000260 	.word	0x20000260
 8001a5c:	40005c00 	.word	0x40005c00
 8001a60:	000186a0 	.word	0x000186a0

08001a64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	@ 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a28      	ldr	r2, [pc, #160]	@ (8001b24 <HAL_I2C_MspInit+0xc0>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d14a      	bne.n	8001b1c <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	4b27      	ldr	r3, [pc, #156]	@ (8001b28 <HAL_I2C_MspInit+0xc4>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	4a26      	ldr	r2, [pc, #152]	@ (8001b28 <HAL_I2C_MspInit+0xc4>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a96:	4b24      	ldr	r3, [pc, #144]	@ (8001b28 <HAL_I2C_MspInit+0xc4>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b20      	ldr	r3, [pc, #128]	@ (8001b28 <HAL_I2C_MspInit+0xc4>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8001b28 <HAL_I2C_MspInit+0xc4>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b28 <HAL_I2C_MspInit+0xc4>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001abe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac4:	2312      	movs	r3, #18
 8001ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	2303      	movs	r3, #3
 8001ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4814      	ldr	r0, [pc, #80]	@ (8001b2c <HAL_I2C_MspInit+0xc8>)
 8001adc:	f001 fda4 	bl	8003628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ae0:	2310      	movs	r3, #16
 8001ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ae4:	2312      	movs	r3, #18
 8001ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aec:	2303      	movs	r3, #3
 8001aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001af0:	2304      	movs	r3, #4
 8001af2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	4619      	mov	r1, r3
 8001afa:	480d      	ldr	r0, [pc, #52]	@ (8001b30 <HAL_I2C_MspInit+0xcc>)
 8001afc:	f001 fd94 	bl	8003628 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b00:	2300      	movs	r3, #0
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	4b08      	ldr	r3, [pc, #32]	@ (8001b28 <HAL_I2C_MspInit+0xc4>)
 8001b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b08:	4a07      	ldr	r2, [pc, #28]	@ (8001b28 <HAL_I2C_MspInit+0xc4>)
 8001b0a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b10:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <HAL_I2C_MspInit+0xc4>)
 8001b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	3728      	adds	r7, #40	@ 0x28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40005c00 	.word	0x40005c00
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	40020400 	.word	0x40020400

08001b34 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001b3c:	1d39      	adds	r1, r7, #4
 8001b3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b42:	2201      	movs	r2, #1
 8001b44:	4807      	ldr	r0, [pc, #28]	@ (8001b64 <__io_putchar+0x30>)
 8001b46:	f004 fe6f 	bl	8006828 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001b4a:	1d39      	adds	r1, r7, #4
 8001b4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b50:	2201      	movs	r2, #1
 8001b52:	4805      	ldr	r0, [pc, #20]	@ (8001b68 <__io_putchar+0x34>)
 8001b54:	f004 fe68 	bl	8006828 <HAL_UART_Transmit>

	return ch;
 8001b58:	687b      	ldr	r3, [r7, #4]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200003b4 	.word	0x200003b4
 8001b68:	2000036c 	.word	0x2000036c

08001b6c <BMP280_init>:

void BMP280_init()
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	BMP280_Check_id();			// Identification du BMP280
 8001b70:	f7ff fa58 	bl	8001024 <BMP280_Check_id>
	BMP280_Config();			// Configuration du BMP280
 8001b74:	f7ff fa9a 	bl	80010ac <BMP280_Config>
	BMP280_calibration();		// Mise à jour des paramètres d'étalonage
 8001b78:	f7ff fae2 	bl	8001140 <BMP280_calibration>

	//BMP280_get_temperature();	// Acquisition de la température
	//BMP280_get_pressure();		// Acquisition de la pression
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <MPU9250_init>:

void MPU9250_init()
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
	// Vérifie si l'IMU est configuré correctement et bloque si ce n'est pas le cas
	if (MPU_begin(&hi2c3, AD0_LOW, AFSR_4G, GFSR_500DPS, 0.98, 0.004) == TRUE)
 8001b84:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8001bc0 <MPU9250_init+0x40>
 8001b88:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8001bc4 <MPU9250_init+0x44>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	2201      	movs	r2, #1
 8001b90:	2168      	movs	r1, #104	@ 0x68
 8001b92:	480d      	ldr	r0, [pc, #52]	@ (8001bc8 <MPU9250_init+0x48>)
 8001b94:	f7ff fbf0 	bl	8001378 <MPU_begin>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d103      	bne.n	8001ba6 <MPU9250_init+0x26>
	{
		printf("Centrale inertielle configurée correctement\r\n");
 8001b9e:	480b      	ldr	r0, [pc, #44]	@ (8001bcc <MPU9250_init+0x4c>)
 8001ba0:	f007 f864 	bl	8008c6c <puts>
 8001ba4:	e002      	b.n	8001bac <MPU9250_init+0x2c>
	}
	else
	{
		printf("ERREUR!\r\n");
 8001ba6:	480a      	ldr	r0, [pc, #40]	@ (8001bd0 <MPU9250_init+0x50>)
 8001ba8:	f007 f860 	bl	8008c6c <puts>
	}

	// Calibre l'IMU
	printf("CALIBRATION EN COURS...\r\n");
 8001bac:	4809      	ldr	r0, [pc, #36]	@ (8001bd4 <MPU9250_init+0x54>)
 8001bae:	f007 f85d 	bl	8008c6c <puts>
	MPU_calibrateGyro(&hi2c3, 1500);
 8001bb2:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8001bb6:	4804      	ldr	r0, [pc, #16]	@ (8001bc8 <MPU9250_init+0x48>)
 8001bb8:	f7ff fdae 	bl	8001718 <MPU_calibrateGyro>
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	3b83126f 	.word	0x3b83126f
 8001bc4:	3f7ae148 	.word	0x3f7ae148
 8001bc8:	20000260 	.word	0x20000260
 8001bcc:	0800c44c 	.word	0x0800c44c
 8001bd0:	0800c47c 	.word	0x0800c47c
 8001bd4:	0800c488 	.word	0x0800c488

08001bd8 <MOT_Init>:

void MOT_Init()
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	CAN_Init();
 8001bdc:	f000 f926 	bl	8001e2c <CAN_Init>
	MOT_Set_mode(MOT_MODE_ANTICLOCKWISE, 1, 1);
 8001be0:	2201      	movs	r2, #1
 8001be2:	2101      	movs	r1, #1
 8001be4:	2000      	movs	r0, #0
 8001be6:	f000 fa2f 	bl	8002048 <MOT_Set_mode>
	MOT_Set_origin();
 8001bea:	f000 fa47 	bl	800207c <MOT_Set_origin>
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_UARTEx_RxEventCallback>:
		printf("Unknown request: %s\r\n", msg);
	}
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0a      	ldr	r2, [pc, #40]	@ (8001c30 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d10e      	bne.n	8001c28 <HAL_UARTEx_RxEventCallback+0x34>
    {
        // Process received data
        serial_buff[Size] = '\0'; // Null-terminate the received string
 8001c0a:	887b      	ldrh	r3, [r7, #2]
 8001c0c:	4a09      	ldr	r2, [pc, #36]	@ (8001c34 <HAL_UARTEx_RxEventCallback+0x40>)
 8001c0e:	2100      	movs	r1, #0
 8001c10:	54d1      	strb	r1, [r2, r3]
        printf("Received (%d bytes): %s\r\n", Size, serial_buff);
 8001c12:	887b      	ldrh	r3, [r7, #2]
 8001c14:	4a07      	ldr	r2, [pc, #28]	@ (8001c34 <HAL_UARTEx_RxEventCallback+0x40>)
 8001c16:	4619      	mov	r1, r3
 8001c18:	4807      	ldr	r0, [pc, #28]	@ (8001c38 <HAL_UARTEx_RxEventCallback+0x44>)
 8001c1a:	f006 ffbf 	bl	8008b9c <iprintf>

        // Restart DMA Reception
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, serial_buff, SERIAL_BUFF_SIZE);
 8001c1e:	2264      	movs	r2, #100	@ 0x64
 8001c20:	4904      	ldr	r1, [pc, #16]	@ (8001c34 <HAL_UARTEx_RxEventCallback+0x40>)
 8001c22:	4806      	ldr	r0, [pc, #24]	@ (8001c3c <HAL_UARTEx_RxEventCallback+0x48>)
 8001c24:	f004 fe8b 	bl	800693e <HAL_UARTEx_ReceiveToIdle_DMA>
    }
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40011000 	.word	0x40011000
 8001c34:	200002b4 	.word	0x200002b4
 8001c38:	0800c500 	.word	0x0800c500
 8001c3c:	2000036c 	.word	0x2000036c

08001c40 <HAL_TIM_PeriodElapsedCallback>:
 * @brief  Period elapsed callback in non-blocking mode.
 * @param  htim: TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	float proportional_coeff = 0.001;
 8001c48:	4b20      	ldr	r3, [pc, #128]	@ (8001ccc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001c4a:	60fb      	str	r3, [r7, #12]

	if (htim->Instance == TIM2) // Check if the interrupt is from Timer 2
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c54:	d136      	bne.n	8001cc4 <HAL_TIM_PeriodElapsedCallback+0x84>
	{
		// Asservissement du moteur proportionel à la température
		angle += (int)(BMP280_get_temperature() * proportional_coeff)%360;
 8001c56:	f7ff fb6f 	bl	8001338 <BMP280_get_temperature>
 8001c5a:	ee07 0a90 	vmov	s15, r0
 8001c5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c62:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c6e:	ee17 2a90 	vmov	r2, s15
 8001c72:	4b17      	ldr	r3, [pc, #92]	@ (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001c74:	fb83 1302 	smull	r1, r3, r3, r2
 8001c78:	4413      	add	r3, r2
 8001c7a:	1219      	asrs	r1, r3, #8
 8001c7c:	17d3      	asrs	r3, r2, #31
 8001c7e:	1acb      	subs	r3, r1, r3
 8001c80:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8001c84:	fb01 f303 	mul.w	r3, r1, r3
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	4a12      	ldr	r2, [pc, #72]	@ (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a10      	ldr	r2, [pc, #64]	@ (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001c92:	6013      	str	r3, [r2, #0]

		if (angle>180) MOT_Rotate(angle-180, MOT_ANGLE_NEGATIVE);
 8001c94:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2bb4      	cmp	r3, #180	@ 0xb4
 8001c9a:	dd08      	ble.n	8001cae <HAL_TIM_PeriodElapsedCallback+0x6e>
 8001c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	334c      	adds	r3, #76	@ 0x4c
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 f9f6 	bl	800209a <MOT_Rotate>
		if (angle<=180) MOT_Rotate(angle, MOT_ANGLE_POSITIVE);
 8001cae:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2bb4      	cmp	r3, #180	@ 0xb4
 8001cb4:	dc06      	bgt.n	8001cc4 <HAL_TIM_PeriodElapsedCallback+0x84>
 8001cb6:	4b07      	ldr	r3, [pc, #28]	@ (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 f9eb 	bl	800209a <MOT_Rotate>
	}
}
 8001cc4:	bf00      	nop
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	3a83126f 	.word	0x3a83126f
 8001cd0:	b60b60b7 	.word	0xb60b60b7
 8001cd4:	20000318 	.word	0x20000318

08001cd8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001cdc:	f000 fcea 	bl	80026b4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001ce0:	f000 f832 	bl	8001d48 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ce4:	f7ff fe22 	bl	800192c <MX_GPIO_Init>
	MX_DMA_Init();
 8001ce8:	f7ff fe00 	bl	80018ec <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001cec:	f000 fbd6 	bl	800249c <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 8001cf0:	f000 fbaa 	bl	8002448 <MX_USART1_UART_Init>
	MX_CAN1_Init();
 8001cf4:	f7ff fd7c 	bl	80017f0 <MX_CAN1_Init>
	MX_I2C3_Init();
 8001cf8:	f7ff fe86 	bl	8001a08 <MX_I2C3_Init>
	MX_TIM2_Init();
 8001cfc:	f000 fb32 	bl	8002364 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	printf("\r\n=== TP Capteurs & Reseaux ===\r\n");
 8001d00:	480d      	ldr	r0, [pc, #52]	@ (8001d38 <main+0x60>)
 8001d02:	f006 ffb3 	bl	8008c6c <puts>
	BMP280_init();
 8001d06:	f7ff ff31 	bl	8001b6c <BMP280_init>
	MOT_Init();
 8001d0a:	f7ff ff65 	bl	8001bd8 <MOT_Init>
	MPU9250_init();
 8001d0e:	f7ff ff37 	bl	8001b80 <MPU9250_init>

	// Enable Timer 2 IT
	HAL_TIM_Base_Start_IT(&htim2);
 8001d12:	480a      	ldr	r0, [pc, #40]	@ (8001d3c <main+0x64>)
 8001d14:	f004 f912 	bl	8005f3c <HAL_TIM_Base_Start_IT>

	// Start USART1 DMA reception
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, serial_buff, SERIAL_BUFF_SIZE);
 8001d18:	2264      	movs	r2, #100	@ 0x64
 8001d1a:	4909      	ldr	r1, [pc, #36]	@ (8001d40 <main+0x68>)
 8001d1c:	4809      	ldr	r0, [pc, #36]	@ (8001d44 <main+0x6c>)
 8001d1e:	f004 fe0e 	bl	800693e <HAL_UARTEx_ReceiveToIdle_DMA>
	// Enable UART IDLE interrupt
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001d22:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <main+0x6c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <main+0x6c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 0210 	orr.w	r2, r2, #16
 8001d30:	60da      	str	r2, [r3, #12]
	//HAL_UART_DMAResume(&huart1);
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001d32:	bf00      	nop
 8001d34:	e7fd      	b.n	8001d32 <main+0x5a>
 8001d36:	bf00      	nop
 8001d38:	0800c51c 	.word	0x0800c51c
 8001d3c:	20000324 	.word	0x20000324
 8001d40:	200002b4 	.word	0x200002b4
 8001d44:	2000036c 	.word	0x2000036c

08001d48 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b094      	sub	sp, #80	@ 0x50
 8001d4c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d4e:	f107 031c 	add.w	r3, r7, #28
 8001d52:	2234      	movs	r2, #52	@ 0x34
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f007 f888 	bl	8008e6c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d5c:	f107 0308 	add.w	r3, r7, #8
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	4b29      	ldr	r3, [pc, #164]	@ (8001e18 <SystemClock_Config+0xd0>)
 8001d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d74:	4a28      	ldr	r2, [pc, #160]	@ (8001e18 <SystemClock_Config+0xd0>)
 8001d76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d7c:	4b26      	ldr	r3, [pc, #152]	@ (8001e18 <SystemClock_Config+0xd0>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d88:	2300      	movs	r3, #0
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	4b23      	ldr	r3, [pc, #140]	@ (8001e1c <SystemClock_Config+0xd4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001d94:	4a21      	ldr	r2, [pc, #132]	@ (8001e1c <SystemClock_Config+0xd4>)
 8001d96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e1c <SystemClock_Config+0xd4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001da4:	603b      	str	r3, [r7, #0]
 8001da6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001da8:	2302      	movs	r3, #2
 8001daa:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dac:	2301      	movs	r3, #1
 8001dae:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001db0:	2310      	movs	r3, #16
 8001db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001db4:	2302      	movs	r3, #2
 8001db6:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001db8:	2300      	movs	r3, #0
 8001dba:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 80;
 8001dc0:	2350      	movs	r3, #80	@ 0x50
 8001dc2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f003 fdc3 	bl	8005960 <HAL_RCC_OscConfig>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8001de0:	f000 f81e 	bl	8001e20 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de4:	230f      	movs	r3, #15
 8001de6:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de8:	2302      	movs	r3, #2
 8001dea:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dec:	2300      	movs	r3, #0
 8001dee:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001df0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001df4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dfa:	f107 0308 	add.w	r3, r7, #8
 8001dfe:	2102      	movs	r1, #2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f003 fa63 	bl	80052cc <HAL_RCC_ClockConfig>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <SystemClock_Config+0xc8>
	{
		Error_Handler();
 8001e0c:	f000 f808 	bl	8001e20 <Error_Handler>
	}
}
 8001e10:	bf00      	nop
 8001e12:	3750      	adds	r7, #80	@ 0x50
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40007000 	.word	0x40007000

08001e20 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e24:	b672      	cpsid	i
}
 8001e26:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <Error_Handler+0x8>

08001e2c <CAN_Init>:

/**
 * @brief Initialises the CAN communication
 */
void CAN_Init()
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	logs = FALSE;
 8001e32:	4b26      	ldr	r3, [pc, #152]	@ (8001ecc <CAN_Init+0xa0>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]

	status = HAL_CAN_Start(&hcan1);
 8001e38:	4825      	ldr	r0, [pc, #148]	@ (8001ed0 <CAN_Init+0xa4>)
 8001e3a:	f000 fdcc 	bl	80029d6 <HAL_CAN_Start>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]

	switch (status)
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d82f      	bhi.n	8001ea8 <CAN_Init+0x7c>
 8001e48:	a201      	add	r2, pc, #4	@ (adr r2, 8001e50 <CAN_Init+0x24>)
 8001e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4e:	bf00      	nop
 8001e50:	08001e61 	.word	0x08001e61
 8001e54:	08001e71 	.word	0x08001e71
 8001e58:	08001e85 	.word	0x08001e85
 8001e5c:	08001e95 	.word	0x08001e95
	{
	case HAL_OK:
		if (logs == TRUE) printf("CAN started successfully.\r\n");
 8001e60:	4b1a      	ldr	r3, [pc, #104]	@ (8001ecc <CAN_Init+0xa0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d129      	bne.n	8001ebc <CAN_Init+0x90>
 8001e68:	481a      	ldr	r0, [pc, #104]	@ (8001ed4 <CAN_Init+0xa8>)
 8001e6a:	f006 feff 	bl	8008c6c <puts>
		break;
 8001e6e:	e025      	b.n	8001ebc <CAN_Init+0x90>
	case HAL_ERROR:
		if (logs == TRUE) printf("Error: CAN start failed.\r\n");
 8001e70:	4b16      	ldr	r3, [pc, #88]	@ (8001ecc <CAN_Init+0xa0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d102      	bne.n	8001e7e <CAN_Init+0x52>
 8001e78:	4817      	ldr	r0, [pc, #92]	@ (8001ed8 <CAN_Init+0xac>)
 8001e7a:	f006 fef7 	bl	8008c6c <puts>
		Error_Handler(); // Optional: Go to error handler
 8001e7e:	f7ff ffcf 	bl	8001e20 <Error_Handler>
		break;
 8001e82:	e01e      	b.n	8001ec2 <CAN_Init+0x96>
	case HAL_BUSY:
		if (logs == TRUE) printf("Warning: CAN is busy. Retry later.\r\n");
 8001e84:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <CAN_Init+0xa0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d119      	bne.n	8001ec0 <CAN_Init+0x94>
 8001e8c:	4813      	ldr	r0, [pc, #76]	@ (8001edc <CAN_Init+0xb0>)
 8001e8e:	f006 feed 	bl	8008c6c <puts>
		// Optional: add retry logic if desired
		break;
 8001e92:	e015      	b.n	8001ec0 <CAN_Init+0x94>
	case HAL_TIMEOUT:
		if (logs == TRUE) printf("Error: CAN start timed out.\r\n");
 8001e94:	4b0d      	ldr	r3, [pc, #52]	@ (8001ecc <CAN_Init+0xa0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d102      	bne.n	8001ea2 <CAN_Init+0x76>
 8001e9c:	4810      	ldr	r0, [pc, #64]	@ (8001ee0 <CAN_Init+0xb4>)
 8001e9e:	f006 fee5 	bl	8008c6c <puts>
		Error_Handler(); // Optional: Go to error handler
 8001ea2:	f7ff ffbd 	bl	8001e20 <Error_Handler>
		break;
 8001ea6:	e00c      	b.n	8001ec2 <CAN_Init+0x96>
	default:
		if (logs == TRUE) printf("Unknown status returned from HAL_CAN_Start.\r\n");
 8001ea8:	4b08      	ldr	r3, [pc, #32]	@ (8001ecc <CAN_Init+0xa0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d102      	bne.n	8001eb6 <CAN_Init+0x8a>
 8001eb0:	480c      	ldr	r0, [pc, #48]	@ (8001ee4 <CAN_Init+0xb8>)
 8001eb2:	f006 fedb 	bl	8008c6c <puts>
		Error_Handler(); // Optional: Go to error handler
 8001eb6:	f7ff ffb3 	bl	8001e20 <Error_Handler>
		break;
 8001eba:	e002      	b.n	8001ec2 <CAN_Init+0x96>
		break;
 8001ebc:	bf00      	nop
 8001ebe:	e000      	b.n	8001ec2 <CAN_Init+0x96>
		break;
 8001ec0:	bf00      	nop
	}
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	2000031c 	.word	0x2000031c
 8001ed0:	20000238 	.word	0x20000238
 8001ed4:	0800c540 	.word	0x0800c540
 8001ed8:	0800c55c 	.word	0x0800c55c
 8001edc:	0800c578 	.word	0x0800c578
 8001ee0:	0800c59c 	.word	0x0800c59c
 8001ee4:	0800c5bc 	.word	0x0800c5bc

08001ee8 <CAN_Send>:
 *               			destination or type of the message being sent.
 *
 * @retval None
 */
void CAN_Send(uint8_t * aData, uint32_t size, uint32_t msg_id)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b092      	sub	sp, #72	@ 0x48
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status;
	CAN_TxHeaderTypeDef header;
	uint32_t txMailbox;
	int retryCount = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	647b      	str	r3, [r7, #68]	@ 0x44
	const int maxRetries = 5;
 8001ef8:	2305      	movs	r3, #5
 8001efa:	63fb      	str	r3, [r7, #60]	@ 0x3c

	// Initialiser le header
	header.StdId = msg_id;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	61bb      	str	r3, [r7, #24]
	header.IDE = CAN_ID_STD;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
	header.RTR = CAN_RTR_DATA;
 8001f04:	2300      	movs	r3, #0
 8001f06:	627b      	str	r3, [r7, #36]	@ 0x24
	header.DLC = size;
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
	header.TransmitGlobalTime = DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	// Pointer vers les variables locales
	CAN_TxHeaderTypeDef *pHeader = &header;
 8001f12:	f107 0318 	add.w	r3, r7, #24
 8001f16:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t *pTxMailbox = &txMailbox;
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	637b      	str	r3, [r7, #52]	@ 0x34

	// Attempt to add the CAN message to the transmission mailbox with retry logic
	do {
		status = HAL_CAN_AddTxMessage(&hcan1, pHeader, aData, pTxMailbox);
 8001f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001f24:	483e      	ldr	r0, [pc, #248]	@ (8002020 <CAN_Send+0x138>)
 8001f26:	f000 fd9a 	bl	8002a5e <HAL_CAN_AddTxMessage>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		switch (status)
 8001f30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d852      	bhi.n	8001fde <CAN_Send+0xf6>
 8001f38:	a201      	add	r2, pc, #4	@ (adr r2, 8001f40 <CAN_Send+0x58>)
 8001f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f3e:	bf00      	nop
 8001f40:	08001f51 	.word	0x08001f51
 8001f44:	08001fb7 	.word	0x08001fb7
 8001f48:	08001f8d 	.word	0x08001f8d
 8001f4c:	08001fcb 	.word	0x08001fcb
		{
		case HAL_OK:
			if (logs == TRUE)
 8001f50:	4b34      	ldr	r3, [pc, #208]	@ (8002024 <CAN_Send+0x13c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d15e      	bne.n	8002016 <CAN_Send+0x12e>
			{
			printf("CAN message ");
 8001f58:	4833      	ldr	r0, [pc, #204]	@ (8002028 <CAN_Send+0x140>)
 8001f5a:	f006 fe1f 	bl	8008b9c <iprintf>
			for (int i = 0; i<size; i++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f62:	e00a      	b.n	8001f7a <CAN_Send+0x92>
				printf(" 0x%X", aData[i]);
 8001f64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4413      	add	r3, r2
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	482f      	ldr	r0, [pc, #188]	@ (800202c <CAN_Send+0x144>)
 8001f70:	f006 fe14 	bl	8008b9c <iprintf>
			for (int i = 0; i<size; i++)
 8001f74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f76:	3301      	adds	r3, #1
 8001f78:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d8f0      	bhi.n	8001f64 <CAN_Send+0x7c>
			printf(" sent successfully to  0x%X.\r\n", (unsigned int)msg_id);
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	482a      	ldr	r0, [pc, #168]	@ (8002030 <CAN_Send+0x148>)
 8001f86:	f006 fe09 	bl	8008b9c <iprintf>
			}
			return;  // Exit the function if the message was sent successfully
 8001f8a:	e044      	b.n	8002016 <CAN_Send+0x12e>

		case HAL_BUSY:
			retryCount++;
 8001f8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f8e:	3301      	adds	r3, #1
 8001f90:	647b      	str	r3, [r7, #68]	@ 0x44
			if (logs == TRUE) printf("Warning: CAN bus is busy, retrying (%d/%d)...\r\n", retryCount, maxRetries);
 8001f92:	4b24      	ldr	r3, [pc, #144]	@ (8002024 <CAN_Send+0x13c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d104      	bne.n	8001fa4 <CAN_Send+0xbc>
 8001f9a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f9c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001f9e:	4825      	ldr	r0, [pc, #148]	@ (8002034 <CAN_Send+0x14c>)
 8001fa0:	f006 fdfc 	bl	8008b9c <iprintf>
			HAL_Delay(10);  // Optional: Add a small delay between retries
 8001fa4:	200a      	movs	r0, #10
 8001fa6:	f000 fbf7 	bl	8002798 <HAL_Delay>
			break;
 8001faa:	bf00      	nop
			if (logs == TRUE) printf("Unknown status returned from HAL_CAN_AddTxMessage.\r\n");
			Error_Handler();  // Optional: Handle unexpected status
			return;
		}

	} while (status == HAL_BUSY && retryCount < maxRetries);
 8001fac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d122      	bne.n	8001ffa <CAN_Send+0x112>
 8001fb4:	e01d      	b.n	8001ff2 <CAN_Send+0x10a>
			if (logs == TRUE) printf("Error: Failed to send CAN message.\r\n");
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002024 <CAN_Send+0x13c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d102      	bne.n	8001fc4 <CAN_Send+0xdc>
 8001fbe:	481e      	ldr	r0, [pc, #120]	@ (8002038 <CAN_Send+0x150>)
 8001fc0:	f006 fe54 	bl	8008c6c <puts>
			Error_Handler();  // Optional: Go to error handler for critical failure
 8001fc4:	f7ff ff2c 	bl	8001e20 <Error_Handler>
			return;
 8001fc8:	e026      	b.n	8002018 <CAN_Send+0x130>
			if (logs == TRUE) printf("Error: CAN message send timed out.\r\n");
 8001fca:	4b16      	ldr	r3, [pc, #88]	@ (8002024 <CAN_Send+0x13c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d102      	bne.n	8001fd8 <CAN_Send+0xf0>
 8001fd2:	481a      	ldr	r0, [pc, #104]	@ (800203c <CAN_Send+0x154>)
 8001fd4:	f006 fe4a 	bl	8008c6c <puts>
			Error_Handler();  // Optional: Go to error handler for timeout
 8001fd8:	f7ff ff22 	bl	8001e20 <Error_Handler>
			return;
 8001fdc:	e01c      	b.n	8002018 <CAN_Send+0x130>
			if (logs == TRUE) printf("Unknown status returned from HAL_CAN_AddTxMessage.\r\n");
 8001fde:	4b11      	ldr	r3, [pc, #68]	@ (8002024 <CAN_Send+0x13c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d102      	bne.n	8001fec <CAN_Send+0x104>
 8001fe6:	4816      	ldr	r0, [pc, #88]	@ (8002040 <CAN_Send+0x158>)
 8001fe8:	f006 fe40 	bl	8008c6c <puts>
			Error_Handler();  // Optional: Handle unexpected status
 8001fec:	f7ff ff18 	bl	8001e20 <Error_Handler>
			return;
 8001ff0:	e012      	b.n	8002018 <CAN_Send+0x130>
	} while (status == HAL_BUSY && retryCount < maxRetries);
 8001ff2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	db91      	blt.n	8001f1e <CAN_Send+0x36>

	if (retryCount == maxRetries)
 8001ffa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d10a      	bne.n	8002018 <CAN_Send+0x130>
	{
		if (logs == TRUE) printf("Error: Exceeded maximum retries for CAN message send.\r\n");
 8002002:	4b08      	ldr	r3, [pc, #32]	@ (8002024 <CAN_Send+0x13c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d102      	bne.n	8002010 <CAN_Send+0x128>
 800200a:	480e      	ldr	r0, [pc, #56]	@ (8002044 <CAN_Send+0x15c>)
 800200c:	f006 fe2e 	bl	8008c6c <puts>
		Error_Handler();  // Optional: Go to error handler after max retries
 8002010:	f7ff ff06 	bl	8001e20 <Error_Handler>
 8002014:	e000      	b.n	8002018 <CAN_Send+0x130>
			return;  // Exit the function if the message was sent successfully
 8002016:	bf00      	nop
	}
}
 8002018:	3748      	adds	r7, #72	@ 0x48
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000238 	.word	0x20000238
 8002024:	2000031c 	.word	0x2000031c
 8002028:	0800c5ec 	.word	0x0800c5ec
 800202c:	0800c5fc 	.word	0x0800c5fc
 8002030:	0800c604 	.word	0x0800c604
 8002034:	0800c624 	.word	0x0800c624
 8002038:	0800c654 	.word	0x0800c654
 800203c:	0800c678 	.word	0x0800c678
 8002040:	0800c69c 	.word	0x0800c69c
 8002044:	0800c6d0 	.word	0x0800c6d0

08002048 <MOT_Set_mode>:
 * @param uint8_t direction	Rotation direction: Anti-clockwise (0x00) or Clockwise (0x01).
 * @param uint8_t steps		Number of steps, range: 0x01 to 0xFF (1 unit = 1°).
 * @param uint8_t speed		Speed of the motor, range: 0x01 = 1 ms / 1 kHz to 0xFF = 255ms / 4 Hz
 */
void MOT_Set_mode(uint8_t direction, uint8_t steps, uint8_t speed)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
 8002052:	460b      	mov	r3, r1
 8002054:	71bb      	strb	r3, [r7, #6]
 8002056:	4613      	mov	r3, r2
 8002058:	717b      	strb	r3, [r7, #5]
	uint8_t aData[3];

	aData[0] = direction;
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	733b      	strb	r3, [r7, #12]
	aData[1] = steps;
 800205e:	79bb      	ldrb	r3, [r7, #6]
 8002060:	737b      	strb	r3, [r7, #13]
	aData[2] = speed;
 8002062:	797b      	ldrb	r3, [r7, #5]
 8002064:	73bb      	strb	r3, [r7, #14]

	CAN_Send(aData, 3, MOT_MODE_MANUAL_ID);
 8002066:	f107 030c 	add.w	r3, r7, #12
 800206a:	2260      	movs	r2, #96	@ 0x60
 800206c:	2103      	movs	r1, #3
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff ff3a 	bl	8001ee8 <CAN_Send>
}
 8002074:	bf00      	nop
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <MOT_Set_origin>:

/**
 * @brief Sets the current position of the motor as the origin.
 */
void MOT_Set_origin()
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
	uint8_t aData[2];

	aData[0] = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	713b      	strb	r3, [r7, #4]
	CAN_Send(aData, 1, MOT_INIT_POS_ID);
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	2262      	movs	r2, #98	@ 0x62
 800208a:	2101      	movs	r1, #1
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff2b 	bl	8001ee8 <CAN_Send>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <MOT_Rotate>:
 * @brief Rotates the Step Motor of an angle in a defined direction.
 * @param uint8_t angle Angle of rotation, range: 0x01 to 0xFF (1 unit = 1°).
 * @param uint8_t sign	Angle sign, can be positive (0x00) or negative (0x01).
 */
void MOT_Rotate(uint8_t angle, uint8_t sign)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	460a      	mov	r2, r1
 80020a4:	71fb      	strb	r3, [r7, #7]
 80020a6:	4613      	mov	r3, r2
 80020a8:	71bb      	strb	r3, [r7, #6]
	uint8_t aData[2];

	if (angle < MOT_ANGLE_MIN) angle = 0x00;
	if (angle > MOT_ANGLE_MAX) angle = 0xFF;

	aData[0] = angle;
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	733b      	strb	r3, [r7, #12]
	aData[1] = sign;
 80020ae:	79bb      	ldrb	r3, [r7, #6]
 80020b0:	737b      	strb	r3, [r7, #13]

	CAN_Send(aData, MOT_ANGLE_SIZE, MOT_ANGLE_ID);
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	2261      	movs	r2, #97	@ 0x61
 80020b8:	2102      	movs	r1, #2
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff ff14 	bl	8001ee8 <CAN_Send>
}
 80020c0:	bf00      	nop
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	4b10      	ldr	r3, [pc, #64]	@ (8002114 <HAL_MspInit+0x4c>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002114 <HAL_MspInit+0x4c>)
 80020d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80020de:	4b0d      	ldr	r3, [pc, #52]	@ (8002114 <HAL_MspInit+0x4c>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	4b09      	ldr	r3, [pc, #36]	@ (8002114 <HAL_MspInit+0x4c>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	4a08      	ldr	r2, [pc, #32]	@ (8002114 <HAL_MspInit+0x4c>)
 80020f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020fa:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <HAL_MspInit+0x4c>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002102:	603b      	str	r3, [r7, #0]
 8002104:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002106:	2007      	movs	r0, #7
 8002108:	f000 fe4a 	bl	8002da0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40023800 	.word	0x40023800

08002118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800211c:	bf00      	nop
 800211e:	e7fd      	b.n	800211c <NMI_Handler+0x4>

08002120 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002124:	bf00      	nop
 8002126:	e7fd      	b.n	8002124 <HardFault_Handler+0x4>

08002128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <MemManage_Handler+0x4>

08002130 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002134:	bf00      	nop
 8002136:	e7fd      	b.n	8002134 <BusFault_Handler+0x4>

08002138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800213c:	bf00      	nop
 800213e:	e7fd      	b.n	800213c <UsageFault_Handler+0x4>

08002140 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800216e:	f000 faf3 	bl	8002758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800217c:	4802      	ldr	r0, [pc, #8]	@ (8002188 <TIM2_IRQHandler+0x10>)
 800217e:	f003 ff4d 	bl	800601c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000324 	.word	0x20000324

0800218c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002190:	4802      	ldr	r0, [pc, #8]	@ (800219c <USART1_IRQHandler+0x10>)
 8002192:	f004 fc31 	bl	80069f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	2000036c 	.word	0x2000036c

080021a0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80021a4:	4802      	ldr	r0, [pc, #8]	@ (80021b0 <DMA2_Stream2_IRQHandler+0x10>)
 80021a6:	f000 ffd5 	bl	8003154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	200003fc 	.word	0x200003fc

080021b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return 1;
 80021b8:	2301      	movs	r3, #1
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <_kill>:

int _kill(int pid, int sig)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021ce:	f006 feaf 	bl	8008f30 <__errno>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2216      	movs	r2, #22
 80021d6:	601a      	str	r2, [r3, #0]
  return -1;
 80021d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <_exit>:

void _exit (int status)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ffe7 	bl	80021c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021f6:	bf00      	nop
 80021f8:	e7fd      	b.n	80021f6 <_exit+0x12>

080021fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	e00a      	b.n	8002222 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800220c:	f3af 8000 	nop.w
 8002210:	4601      	mov	r1, r0
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	60ba      	str	r2, [r7, #8]
 8002218:	b2ca      	uxtb	r2, r1
 800221a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	3301      	adds	r3, #1
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	429a      	cmp	r2, r3
 8002228:	dbf0      	blt.n	800220c <_read+0x12>
  }

  return len;
 800222a:	687b      	ldr	r3, [r7, #4]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	e009      	b.n	800225a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	60ba      	str	r2, [r7, #8]
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fc70 	bl	8001b34 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	3301      	adds	r3, #1
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	429a      	cmp	r2, r3
 8002260:	dbf1      	blt.n	8002246 <_write+0x12>
  }
  return len;
 8002262:	687b      	ldr	r3, [r7, #4]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <_close>:

int _close(int file)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002274:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002294:	605a      	str	r2, [r3, #4]
  return 0;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <_isatty>:

int _isatty(int file)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022ac:	2301      	movs	r3, #1
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b085      	sub	sp, #20
 80022be:	af00      	add	r7, sp, #0
 80022c0:	60f8      	str	r0, [r7, #12]
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022dc:	4a14      	ldr	r2, [pc, #80]	@ (8002330 <_sbrk+0x5c>)
 80022de:	4b15      	ldr	r3, [pc, #84]	@ (8002334 <_sbrk+0x60>)
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022e8:	4b13      	ldr	r3, [pc, #76]	@ (8002338 <_sbrk+0x64>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d102      	bne.n	80022f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022f0:	4b11      	ldr	r3, [pc, #68]	@ (8002338 <_sbrk+0x64>)
 80022f2:	4a12      	ldr	r2, [pc, #72]	@ (800233c <_sbrk+0x68>)
 80022f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022f6:	4b10      	ldr	r3, [pc, #64]	@ (8002338 <_sbrk+0x64>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	429a      	cmp	r2, r3
 8002302:	d207      	bcs.n	8002314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002304:	f006 fe14 	bl	8008f30 <__errno>
 8002308:	4603      	mov	r3, r0
 800230a:	220c      	movs	r2, #12
 800230c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002312:	e009      	b.n	8002328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002314:	4b08      	ldr	r3, [pc, #32]	@ (8002338 <_sbrk+0x64>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800231a:	4b07      	ldr	r3, [pc, #28]	@ (8002338 <_sbrk+0x64>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	4a05      	ldr	r2, [pc, #20]	@ (8002338 <_sbrk+0x64>)
 8002324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002326:	68fb      	ldr	r3, [r7, #12]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20020000 	.word	0x20020000
 8002334:	00000400 	.word	0x00000400
 8002338:	20000320 	.word	0x20000320
 800233c:	200005b0 	.word	0x200005b0

08002340 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002344:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <SystemInit+0x20>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234a:	4a05      	ldr	r2, [pc, #20]	@ (8002360 <SystemInit+0x20>)
 800234c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002350:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800236a:	f107 0308 	add.w	r3, r7, #8
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002378:	463b      	mov	r3, r7
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002380:	4b1d      	ldr	r3, [pc, #116]	@ (80023f8 <MX_TIM2_Init+0x94>)
 8002382:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002386:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8002388:	4b1b      	ldr	r3, [pc, #108]	@ (80023f8 <MX_TIM2_Init+0x94>)
 800238a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800238e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002390:	4b19      	ldr	r3, [pc, #100]	@ (80023f8 <MX_TIM2_Init+0x94>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002396:	4b18      	ldr	r3, [pc, #96]	@ (80023f8 <MX_TIM2_Init+0x94>)
 8002398:	2263      	movs	r2, #99	@ 0x63
 800239a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800239c:	4b16      	ldr	r3, [pc, #88]	@ (80023f8 <MX_TIM2_Init+0x94>)
 800239e:	2200      	movs	r2, #0
 80023a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a2:	4b15      	ldr	r3, [pc, #84]	@ (80023f8 <MX_TIM2_Init+0x94>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023a8:	4813      	ldr	r0, [pc, #76]	@ (80023f8 <MX_TIM2_Init+0x94>)
 80023aa:	f003 fd77 	bl	8005e9c <HAL_TIM_Base_Init>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80023b4:	f7ff fd34 	bl	8001e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023be:	f107 0308 	add.w	r3, r7, #8
 80023c2:	4619      	mov	r1, r3
 80023c4:	480c      	ldr	r0, [pc, #48]	@ (80023f8 <MX_TIM2_Init+0x94>)
 80023c6:	f003 ff19 	bl	80061fc <HAL_TIM_ConfigClockSource>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80023d0:	f7ff fd26 	bl	8001e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023d4:	2300      	movs	r3, #0
 80023d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d8:	2300      	movs	r3, #0
 80023da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023dc:	463b      	mov	r3, r7
 80023de:	4619      	mov	r1, r3
 80023e0:	4805      	ldr	r0, [pc, #20]	@ (80023f8 <MX_TIM2_Init+0x94>)
 80023e2:	f004 f941 	bl	8006668 <HAL_TIMEx_MasterConfigSynchronization>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80023ec:	f7ff fd18 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023f0:	bf00      	nop
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000324 	.word	0x20000324

080023fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800240c:	d115      	bne.n	800243a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	4b0c      	ldr	r3, [pc, #48]	@ (8002444 <HAL_TIM_Base_MspInit+0x48>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002416:	4a0b      	ldr	r2, [pc, #44]	@ (8002444 <HAL_TIM_Base_MspInit+0x48>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6413      	str	r3, [r2, #64]	@ 0x40
 800241e:	4b09      	ldr	r3, [pc, #36]	@ (8002444 <HAL_TIM_Base_MspInit+0x48>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	2100      	movs	r1, #0
 800242e:	201c      	movs	r0, #28
 8002430:	f000 fcc1 	bl	8002db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002434:	201c      	movs	r0, #28
 8002436:	f000 fcda 	bl	8002dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023800 	.word	0x40023800

08002448 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800244c:	4b11      	ldr	r3, [pc, #68]	@ (8002494 <MX_USART1_UART_Init+0x4c>)
 800244e:	4a12      	ldr	r2, [pc, #72]	@ (8002498 <MX_USART1_UART_Init+0x50>)
 8002450:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002452:	4b10      	ldr	r3, [pc, #64]	@ (8002494 <MX_USART1_UART_Init+0x4c>)
 8002454:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002458:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800245a:	4b0e      	ldr	r3, [pc, #56]	@ (8002494 <MX_USART1_UART_Init+0x4c>)
 800245c:	2200      	movs	r2, #0
 800245e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002460:	4b0c      	ldr	r3, [pc, #48]	@ (8002494 <MX_USART1_UART_Init+0x4c>)
 8002462:	2200      	movs	r2, #0
 8002464:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002466:	4b0b      	ldr	r3, [pc, #44]	@ (8002494 <MX_USART1_UART_Init+0x4c>)
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800246c:	4b09      	ldr	r3, [pc, #36]	@ (8002494 <MX_USART1_UART_Init+0x4c>)
 800246e:	220c      	movs	r2, #12
 8002470:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002472:	4b08      	ldr	r3, [pc, #32]	@ (8002494 <MX_USART1_UART_Init+0x4c>)
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002478:	4b06      	ldr	r3, [pc, #24]	@ (8002494 <MX_USART1_UART_Init+0x4c>)
 800247a:	2200      	movs	r2, #0
 800247c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800247e:	4805      	ldr	r0, [pc, #20]	@ (8002494 <MX_USART1_UART_Init+0x4c>)
 8002480:	f004 f982 	bl	8006788 <HAL_UART_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800248a:	f7ff fcc9 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	2000036c 	.word	0x2000036c
 8002498:	40011000 	.word	0x40011000

0800249c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024a0:	4b11      	ldr	r3, [pc, #68]	@ (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024a2:	4a12      	ldr	r2, [pc, #72]	@ (80024ec <MX_USART2_UART_Init+0x50>)
 80024a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024a6:	4b10      	ldr	r3, [pc, #64]	@ (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024ae:	4b0e      	ldr	r3, [pc, #56]	@ (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024b4:	4b0c      	ldr	r3, [pc, #48]	@ (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024ba:	4b0b      	ldr	r3, [pc, #44]	@ (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024c0:	4b09      	ldr	r3, [pc, #36]	@ (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024c2:	220c      	movs	r2, #12
 80024c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024c6:	4b08      	ldr	r3, [pc, #32]	@ (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024cc:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024d2:	4805      	ldr	r0, [pc, #20]	@ (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024d4:	f004 f958 	bl	8006788 <HAL_UART_Init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024de:	f7ff fc9f 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	200003b4 	.word	0x200003b4
 80024ec:	40004400 	.word	0x40004400

080024f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08c      	sub	sp, #48	@ 0x30
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	f107 031c 	add.w	r3, r7, #28
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a4e      	ldr	r2, [pc, #312]	@ (8002648 <HAL_UART_MspInit+0x158>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d164      	bne.n	80025dc <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	4b4d      	ldr	r3, [pc, #308]	@ (800264c <HAL_UART_MspInit+0x15c>)
 8002518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251a:	4a4c      	ldr	r2, [pc, #304]	@ (800264c <HAL_UART_MspInit+0x15c>)
 800251c:	f043 0310 	orr.w	r3, r3, #16
 8002520:	6453      	str	r3, [r2, #68]	@ 0x44
 8002522:	4b4a      	ldr	r3, [pc, #296]	@ (800264c <HAL_UART_MspInit+0x15c>)
 8002524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	61bb      	str	r3, [r7, #24]
 800252c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	4b46      	ldr	r3, [pc, #280]	@ (800264c <HAL_UART_MspInit+0x15c>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	4a45      	ldr	r2, [pc, #276]	@ (800264c <HAL_UART_MspInit+0x15c>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	6313      	str	r3, [r2, #48]	@ 0x30
 800253e:	4b43      	ldr	r3, [pc, #268]	@ (800264c <HAL_UART_MspInit+0x15c>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800254a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800254e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002550:	2302      	movs	r3, #2
 8002552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002558:	2303      	movs	r3, #3
 800255a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800255c:	2307      	movs	r3, #7
 800255e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002560:	f107 031c 	add.w	r3, r7, #28
 8002564:	4619      	mov	r1, r3
 8002566:	483a      	ldr	r0, [pc, #232]	@ (8002650 <HAL_UART_MspInit+0x160>)
 8002568:	f001 f85e 	bl	8003628 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800256c:	4b39      	ldr	r3, [pc, #228]	@ (8002654 <HAL_UART_MspInit+0x164>)
 800256e:	4a3a      	ldr	r2, [pc, #232]	@ (8002658 <HAL_UART_MspInit+0x168>)
 8002570:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002572:	4b38      	ldr	r3, [pc, #224]	@ (8002654 <HAL_UART_MspInit+0x164>)
 8002574:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002578:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800257a:	4b36      	ldr	r3, [pc, #216]	@ (8002654 <HAL_UART_MspInit+0x164>)
 800257c:	2200      	movs	r2, #0
 800257e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002580:	4b34      	ldr	r3, [pc, #208]	@ (8002654 <HAL_UART_MspInit+0x164>)
 8002582:	2200      	movs	r2, #0
 8002584:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002586:	4b33      	ldr	r3, [pc, #204]	@ (8002654 <HAL_UART_MspInit+0x164>)
 8002588:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800258c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800258e:	4b31      	ldr	r3, [pc, #196]	@ (8002654 <HAL_UART_MspInit+0x164>)
 8002590:	2200      	movs	r2, #0
 8002592:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002594:	4b2f      	ldr	r3, [pc, #188]	@ (8002654 <HAL_UART_MspInit+0x164>)
 8002596:	2200      	movs	r2, #0
 8002598:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800259a:	4b2e      	ldr	r3, [pc, #184]	@ (8002654 <HAL_UART_MspInit+0x164>)
 800259c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025a0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002654 <HAL_UART_MspInit+0x164>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002654 <HAL_UART_MspInit+0x164>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80025ae:	4829      	ldr	r0, [pc, #164]	@ (8002654 <HAL_UART_MspInit+0x164>)
 80025b0:	f000 fc38 	bl	8002e24 <HAL_DMA_Init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80025ba:	f7ff fc31 	bl	8001e20 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a24      	ldr	r2, [pc, #144]	@ (8002654 <HAL_UART_MspInit+0x164>)
 80025c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025c4:	4a23      	ldr	r2, [pc, #140]	@ (8002654 <HAL_UART_MspInit+0x164>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2100      	movs	r1, #0
 80025ce:	2025      	movs	r0, #37	@ 0x25
 80025d0:	f000 fbf1 	bl	8002db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025d4:	2025      	movs	r0, #37	@ 0x25
 80025d6:	f000 fc0a 	bl	8002dee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80025da:	e030      	b.n	800263e <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a1e      	ldr	r2, [pc, #120]	@ (800265c <HAL_UART_MspInit+0x16c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d12b      	bne.n	800263e <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
 80025ea:	4b18      	ldr	r3, [pc, #96]	@ (800264c <HAL_UART_MspInit+0x15c>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	4a17      	ldr	r2, [pc, #92]	@ (800264c <HAL_UART_MspInit+0x15c>)
 80025f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025f6:	4b15      	ldr	r3, [pc, #84]	@ (800264c <HAL_UART_MspInit+0x15c>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	4b11      	ldr	r3, [pc, #68]	@ (800264c <HAL_UART_MspInit+0x15c>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	4a10      	ldr	r2, [pc, #64]	@ (800264c <HAL_UART_MspInit+0x15c>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6313      	str	r3, [r2, #48]	@ 0x30
 8002612:	4b0e      	ldr	r3, [pc, #56]	@ (800264c <HAL_UART_MspInit+0x15c>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800261e:	230c      	movs	r3, #12
 8002620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002622:	2302      	movs	r3, #2
 8002624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262a:	2303      	movs	r3, #3
 800262c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800262e:	2307      	movs	r3, #7
 8002630:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002632:	f107 031c 	add.w	r3, r7, #28
 8002636:	4619      	mov	r1, r3
 8002638:	4805      	ldr	r0, [pc, #20]	@ (8002650 <HAL_UART_MspInit+0x160>)
 800263a:	f000 fff5 	bl	8003628 <HAL_GPIO_Init>
}
 800263e:	bf00      	nop
 8002640:	3730      	adds	r7, #48	@ 0x30
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40011000 	.word	0x40011000
 800264c:	40023800 	.word	0x40023800
 8002650:	40020000 	.word	0x40020000
 8002654:	200003fc 	.word	0x200003fc
 8002658:	40026440 	.word	0x40026440
 800265c:	40004400 	.word	0x40004400

08002660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002660:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002698 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002664:	f7ff fe6c 	bl	8002340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002668:	480c      	ldr	r0, [pc, #48]	@ (800269c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800266a:	490d      	ldr	r1, [pc, #52]	@ (80026a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800266c:	4a0d      	ldr	r2, [pc, #52]	@ (80026a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800266e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002670:	e002      	b.n	8002678 <LoopCopyDataInit>

08002672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002676:	3304      	adds	r3, #4

08002678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800267a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800267c:	d3f9      	bcc.n	8002672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800267e:	4a0a      	ldr	r2, [pc, #40]	@ (80026a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002680:	4c0a      	ldr	r4, [pc, #40]	@ (80026ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002684:	e001      	b.n	800268a <LoopFillZerobss>

08002686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002688:	3204      	adds	r2, #4

0800268a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800268a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800268c:	d3fb      	bcc.n	8002686 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800268e:	f006 fc55 	bl	8008f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002692:	f7ff fb21 	bl	8001cd8 <main>
  bx  lr    
 8002696:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002698:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800269c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026a0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80026a4:	0800cb68 	.word	0x0800cb68
  ldr r2, =_sbss
 80026a8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80026ac:	200005ac 	.word	0x200005ac

080026b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026b0:	e7fe      	b.n	80026b0 <ADC_IRQHandler>
	...

080026b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026b8:	4b0e      	ldr	r3, [pc, #56]	@ (80026f4 <HAL_Init+0x40>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0d      	ldr	r2, [pc, #52]	@ (80026f4 <HAL_Init+0x40>)
 80026be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026c4:	4b0b      	ldr	r3, [pc, #44]	@ (80026f4 <HAL_Init+0x40>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0a      	ldr	r2, [pc, #40]	@ (80026f4 <HAL_Init+0x40>)
 80026ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026d0:	4b08      	ldr	r3, [pc, #32]	@ (80026f4 <HAL_Init+0x40>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a07      	ldr	r2, [pc, #28]	@ (80026f4 <HAL_Init+0x40>)
 80026d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026dc:	2003      	movs	r0, #3
 80026de:	f000 fb5f 	bl	8002da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026e2:	2000      	movs	r0, #0
 80026e4:	f000 f808 	bl	80026f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026e8:	f7ff fcee 	bl	80020c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40023c00 	.word	0x40023c00

080026f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002700:	4b12      	ldr	r3, [pc, #72]	@ (800274c <HAL_InitTick+0x54>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b12      	ldr	r3, [pc, #72]	@ (8002750 <HAL_InitTick+0x58>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	4619      	mov	r1, r3
 800270a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800270e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002712:	fbb2 f3f3 	udiv	r3, r2, r3
 8002716:	4618      	mov	r0, r3
 8002718:	f000 fb77 	bl	8002e0a <HAL_SYSTICK_Config>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e00e      	b.n	8002744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b0f      	cmp	r3, #15
 800272a:	d80a      	bhi.n	8002742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800272c:	2200      	movs	r2, #0
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002734:	f000 fb3f 	bl	8002db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002738:	4a06      	ldr	r2, [pc, #24]	@ (8002754 <HAL_InitTick+0x5c>)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	e000      	b.n	8002744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
}
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20000000 	.word	0x20000000
 8002750:	20000008 	.word	0x20000008
 8002754:	20000004 	.word	0x20000004

08002758 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800275c:	4b06      	ldr	r3, [pc, #24]	@ (8002778 <HAL_IncTick+0x20>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	4b06      	ldr	r3, [pc, #24]	@ (800277c <HAL_IncTick+0x24>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4413      	add	r3, r2
 8002768:	4a04      	ldr	r2, [pc, #16]	@ (800277c <HAL_IncTick+0x24>)
 800276a:	6013      	str	r3, [r2, #0]
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	20000008 	.word	0x20000008
 800277c:	2000045c 	.word	0x2000045c

08002780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return uwTick;
 8002784:	4b03      	ldr	r3, [pc, #12]	@ (8002794 <HAL_GetTick+0x14>)
 8002786:	681b      	ldr	r3, [r3, #0]
}
 8002788:	4618      	mov	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	2000045c 	.word	0x2000045c

08002798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027a0:	f7ff ffee 	bl	8002780 <HAL_GetTick>
 80027a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027b0:	d005      	beq.n	80027be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027b2:	4b0a      	ldr	r3, [pc, #40]	@ (80027dc <HAL_Delay+0x44>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4413      	add	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027be:	bf00      	nop
 80027c0:	f7ff ffde 	bl	8002780 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d8f7      	bhi.n	80027c0 <HAL_Delay+0x28>
  {
  }
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000008 	.word	0x20000008

080027e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e0ed      	b.n	80029ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d102      	bne.n	8002804 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff f82c 	bl	800185c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002814:	f7ff ffb4 	bl	8002780 <HAL_GetTick>
 8002818:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800281a:	e012      	b.n	8002842 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800281c:	f7ff ffb0 	bl	8002780 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b0a      	cmp	r3, #10
 8002828:	d90b      	bls.n	8002842 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2205      	movs	r2, #5
 800283a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e0c5      	b.n	80029ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0e5      	beq.n	800281c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0202 	bic.w	r2, r2, #2
 800285e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002860:	f7ff ff8e 	bl	8002780 <HAL_GetTick>
 8002864:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002866:	e012      	b.n	800288e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002868:	f7ff ff8a 	bl	8002780 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b0a      	cmp	r3, #10
 8002874:	d90b      	bls.n	800288e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2205      	movs	r2, #5
 8002886:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e09f      	b.n	80029ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1e5      	bne.n	8002868 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	7e1b      	ldrb	r3, [r3, #24]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d108      	bne.n	80028b6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	e007      	b.n	80028c6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	7e5b      	ldrb	r3, [r3, #25]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d108      	bne.n	80028e0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	e007      	b.n	80028f0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	7e9b      	ldrb	r3, [r3, #26]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d108      	bne.n	800290a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0220 	orr.w	r2, r2, #32
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	e007      	b.n	800291a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0220 	bic.w	r2, r2, #32
 8002918:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	7edb      	ldrb	r3, [r3, #27]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d108      	bne.n	8002934 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0210 	bic.w	r2, r2, #16
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	e007      	b.n	8002944 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0210 	orr.w	r2, r2, #16
 8002942:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	7f1b      	ldrb	r3, [r3, #28]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d108      	bne.n	800295e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0208 	orr.w	r2, r2, #8
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	e007      	b.n	800296e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0208 	bic.w	r2, r2, #8
 800296c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	7f5b      	ldrb	r3, [r3, #29]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d108      	bne.n	8002988 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 0204 	orr.w	r2, r2, #4
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	e007      	b.n	8002998 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0204 	bic.w	r2, r2, #4
 8002996:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	ea42 0103 	orr.w	r1, r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	1e5a      	subs	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b084      	sub	sp, #16
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d12e      	bne.n	8002a48 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2202      	movs	r2, #2
 80029ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0201 	bic.w	r2, r2, #1
 8002a00:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a02:	f7ff febd 	bl	8002780 <HAL_GetTick>
 8002a06:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a08:	e012      	b.n	8002a30 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a0a:	f7ff feb9 	bl	8002780 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b0a      	cmp	r3, #10
 8002a16:	d90b      	bls.n	8002a30 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2205      	movs	r2, #5
 8002a28:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e012      	b.n	8002a56 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1e5      	bne.n	8002a0a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e006      	b.n	8002a56 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
  }
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b089      	sub	sp, #36	@ 0x24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
 8002a6a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a72:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a7c:	7ffb      	ldrb	r3, [r7, #31]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d003      	beq.n	8002a8a <HAL_CAN_AddTxMessage+0x2c>
 8002a82:	7ffb      	ldrb	r3, [r7, #31]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	f040 80ad 	bne.w	8002be4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10a      	bne.n	8002aaa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d105      	bne.n	8002aaa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8095 	beq.w	8002bd4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	0e1b      	lsrs	r3, r3, #24
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10d      	bne.n	8002ae2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ad0:	68f9      	ldr	r1, [r7, #12]
 8002ad2:	6809      	ldr	r1, [r1, #0]
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	3318      	adds	r3, #24
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	440b      	add	r3, r1
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	e00f      	b.n	8002b02 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002aec:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002af2:	68f9      	ldr	r1, [r7, #12]
 8002af4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002af6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	3318      	adds	r3, #24
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	440b      	add	r3, r1
 8002b00:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6819      	ldr	r1, [r3, #0]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	3318      	adds	r3, #24
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	440b      	add	r3, r1
 8002b12:	3304      	adds	r3, #4
 8002b14:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	7d1b      	ldrb	r3, [r3, #20]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d111      	bne.n	8002b42 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	3318      	adds	r3, #24
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	4413      	add	r3, r2
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	6811      	ldr	r1, [r2, #0]
 8002b32:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	3318      	adds	r3, #24
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	440b      	add	r3, r1
 8002b3e:	3304      	adds	r3, #4
 8002b40:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3307      	adds	r3, #7
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	061a      	lsls	r2, r3, #24
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3306      	adds	r3, #6
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	041b      	lsls	r3, r3, #16
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3305      	adds	r3, #5
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	021b      	lsls	r3, r3, #8
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	3204      	adds	r2, #4
 8002b62:	7812      	ldrb	r2, [r2, #0]
 8002b64:	4610      	mov	r0, r2
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	6811      	ldr	r1, [r2, #0]
 8002b6a:	ea43 0200 	orr.w	r2, r3, r0
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	440b      	add	r3, r1
 8002b74:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002b78:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3303      	adds	r3, #3
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	061a      	lsls	r2, r3, #24
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3302      	adds	r3, #2
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	041b      	lsls	r3, r3, #16
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	021b      	lsls	r3, r3, #8
 8002b94:	4313      	orrs	r3, r2
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	7812      	ldrb	r2, [r2, #0]
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	6811      	ldr	r1, [r2, #0]
 8002ba0:	ea43 0200 	orr.w	r2, r3, r0
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	440b      	add	r3, r1
 8002baa:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002bae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	3318      	adds	r3, #24
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	4413      	add	r3, r2
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	6811      	ldr	r1, [r2, #0]
 8002bc2:	f043 0201 	orr.w	r2, r3, #1
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	3318      	adds	r3, #24
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	440b      	add	r3, r1
 8002bce:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e00e      	b.n	8002bf2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e006      	b.n	8002bf2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
  }
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3724      	adds	r7, #36	@ 0x24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
	...

08002c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c10:	4b0c      	ldr	r3, [pc, #48]	@ (8002c44 <__NVIC_SetPriorityGrouping+0x44>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c32:	4a04      	ldr	r2, [pc, #16]	@ (8002c44 <__NVIC_SetPriorityGrouping+0x44>)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	60d3      	str	r3, [r2, #12]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c4c:	4b04      	ldr	r3, [pc, #16]	@ (8002c60 <__NVIC_GetPriorityGrouping+0x18>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	0a1b      	lsrs	r3, r3, #8
 8002c52:	f003 0307 	and.w	r3, r3, #7
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	db0b      	blt.n	8002c8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	f003 021f 	and.w	r2, r3, #31
 8002c7c:	4907      	ldr	r1, [pc, #28]	@ (8002c9c <__NVIC_EnableIRQ+0x38>)
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	2001      	movs	r0, #1
 8002c86:	fa00 f202 	lsl.w	r2, r0, r2
 8002c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	e000e100 	.word	0xe000e100

08002ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	6039      	str	r1, [r7, #0]
 8002caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	db0a      	blt.n	8002cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	490c      	ldr	r1, [pc, #48]	@ (8002cec <__NVIC_SetPriority+0x4c>)
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	0112      	lsls	r2, r2, #4
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc8:	e00a      	b.n	8002ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	4908      	ldr	r1, [pc, #32]	@ (8002cf0 <__NVIC_SetPriority+0x50>)
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	3b04      	subs	r3, #4
 8002cd8:	0112      	lsls	r2, r2, #4
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	440b      	add	r3, r1
 8002cde:	761a      	strb	r2, [r3, #24]
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000e100 	.word	0xe000e100
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b089      	sub	sp, #36	@ 0x24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f1c3 0307 	rsb	r3, r3, #7
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	bf28      	it	cs
 8002d12:	2304      	movcs	r3, #4
 8002d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	2b06      	cmp	r3, #6
 8002d1c:	d902      	bls.n	8002d24 <NVIC_EncodePriority+0x30>
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3b03      	subs	r3, #3
 8002d22:	e000      	b.n	8002d26 <NVIC_EncodePriority+0x32>
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43da      	mvns	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	401a      	ands	r2, r3
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d3c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	fa01 f303 	lsl.w	r3, r1, r3
 8002d46:	43d9      	mvns	r1, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d4c:	4313      	orrs	r3, r2
         );
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3724      	adds	r7, #36	@ 0x24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d6c:	d301      	bcc.n	8002d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e00f      	b.n	8002d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d72:	4a0a      	ldr	r2, [pc, #40]	@ (8002d9c <SysTick_Config+0x40>)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d7a:	210f      	movs	r1, #15
 8002d7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d80:	f7ff ff8e 	bl	8002ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d84:	4b05      	ldr	r3, [pc, #20]	@ (8002d9c <SysTick_Config+0x40>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d8a:	4b04      	ldr	r3, [pc, #16]	@ (8002d9c <SysTick_Config+0x40>)
 8002d8c:	2207      	movs	r2, #7
 8002d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	e000e010 	.word	0xe000e010

08002da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff ff29 	bl	8002c00 <__NVIC_SetPriorityGrouping>
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b086      	sub	sp, #24
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc8:	f7ff ff3e 	bl	8002c48 <__NVIC_GetPriorityGrouping>
 8002dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68b9      	ldr	r1, [r7, #8]
 8002dd2:	6978      	ldr	r0, [r7, #20]
 8002dd4:	f7ff ff8e 	bl	8002cf4 <NVIC_EncodePriority>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dde:	4611      	mov	r1, r2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff ff5d 	bl	8002ca0 <__NVIC_SetPriority>
}
 8002de6:	bf00      	nop
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	4603      	mov	r3, r0
 8002df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ff31 	bl	8002c64 <__NVIC_EnableIRQ>
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff ffa2 	bl	8002d5c <SysTick_Config>
 8002e18:	4603      	mov	r3, r0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e30:	f7ff fca6 	bl	8002780 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e099      	b.n	8002f74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0201 	bic.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e60:	e00f      	b.n	8002e82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e62:	f7ff fc8d 	bl	8002780 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b05      	cmp	r3, #5
 8002e6e:	d908      	bls.n	8002e82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2220      	movs	r2, #32
 8002e74:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2203      	movs	r2, #3
 8002e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e078      	b.n	8002f74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e8      	bne.n	8002e62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	4b38      	ldr	r3, [pc, #224]	@ (8002f7c <HAL_DMA_Init+0x158>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ec6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d107      	bne.n	8002eec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f023 0307 	bic.w	r3, r3, #7
 8002f02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d117      	bne.n	8002f46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00e      	beq.n	8002f46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fb01 	bl	8003530 <DMA_CheckFifoParam>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f42:	2301      	movs	r3, #1
 8002f44:	e016      	b.n	8002f74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fab8 	bl	80034c4 <DMA_CalcBaseAndBitshift>
 8002f54:	4603      	mov	r3, r0
 8002f56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f5c:	223f      	movs	r2, #63	@ 0x3f
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	f010803f 	.word	0xf010803f

08002f80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <HAL_DMA_Start_IT+0x26>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e040      	b.n	8003028 <HAL_DMA_Start_IT+0xa8>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d12f      	bne.n	800301a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 fa4a 	bl	8003468 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd8:	223f      	movs	r2, #63	@ 0x3f
 8002fda:	409a      	lsls	r2, r3
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0216 	orr.w	r2, r2, #22
 8002fee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d007      	beq.n	8003008 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0208 	orr.w	r2, r2, #8
 8003006:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	e005      	b.n	8003026 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003022:	2302      	movs	r3, #2
 8003024:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003026:	7dfb      	ldrb	r3, [r7, #23]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800303c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800303e:	f7ff fb9f 	bl	8002780 <HAL_GetTick>
 8003042:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d008      	beq.n	8003062 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2280      	movs	r2, #128	@ 0x80
 8003054:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e052      	b.n	8003108 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0216 	bic.w	r2, r2, #22
 8003070:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695a      	ldr	r2, [r3, #20]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003080:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003086:	2b00      	cmp	r3, #0
 8003088:	d103      	bne.n	8003092 <HAL_DMA_Abort+0x62>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800308e:	2b00      	cmp	r3, #0
 8003090:	d007      	beq.n	80030a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0208 	bic.w	r2, r2, #8
 80030a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0201 	bic.w	r2, r2, #1
 80030b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030b2:	e013      	b.n	80030dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030b4:	f7ff fb64 	bl	8002780 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b05      	cmp	r3, #5
 80030c0:	d90c      	bls.n	80030dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2220      	movs	r2, #32
 80030c6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2203      	movs	r2, #3
 80030cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e015      	b.n	8003108 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1e4      	bne.n	80030b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ee:	223f      	movs	r2, #63	@ 0x3f
 80030f0:	409a      	lsls	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d004      	beq.n	800312e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2280      	movs	r2, #128	@ 0x80
 8003128:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e00c      	b.n	8003148 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2205      	movs	r2, #5
 8003132:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0201 	bic.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800315c:	2300      	movs	r3, #0
 800315e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003160:	4b8e      	ldr	r3, [pc, #568]	@ (800339c <HAL_DMA_IRQHandler+0x248>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a8e      	ldr	r2, [pc, #568]	@ (80033a0 <HAL_DMA_IRQHandler+0x24c>)
 8003166:	fba2 2303 	umull	r2, r3, r2, r3
 800316a:	0a9b      	lsrs	r3, r3, #10
 800316c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003172:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800317e:	2208      	movs	r2, #8
 8003180:	409a      	lsls	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4013      	ands	r3, r2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d01a      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d013      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0204 	bic.w	r2, r2, #4
 80031a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ac:	2208      	movs	r2, #8
 80031ae:	409a      	lsls	r2, r3
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b8:	f043 0201 	orr.w	r2, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c4:	2201      	movs	r2, #1
 80031c6:	409a      	lsls	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d012      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00b      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e2:	2201      	movs	r2, #1
 80031e4:	409a      	lsls	r2, r3
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ee:	f043 0202 	orr.w	r2, r3, #2
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fa:	2204      	movs	r2, #4
 80031fc:	409a      	lsls	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4013      	ands	r3, r2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d012      	beq.n	800322c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00b      	beq.n	800322c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003218:	2204      	movs	r2, #4
 800321a:	409a      	lsls	r2, r3
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003224:	f043 0204 	orr.w	r2, r3, #4
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003230:	2210      	movs	r2, #16
 8003232:	409a      	lsls	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d043      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d03c      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800324e:	2210      	movs	r2, #16
 8003250:	409a      	lsls	r2, r3
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d018      	beq.n	8003296 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d108      	bne.n	8003284 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	2b00      	cmp	r3, #0
 8003278:	d024      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	4798      	blx	r3
 8003282:	e01f      	b.n	80032c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003288:	2b00      	cmp	r3, #0
 800328a:	d01b      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	4798      	blx	r3
 8003294:	e016      	b.n	80032c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d107      	bne.n	80032b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0208 	bic.w	r2, r2, #8
 80032b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c8:	2220      	movs	r2, #32
 80032ca:	409a      	lsls	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 808f 	beq.w	80033f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 8087 	beq.w	80033f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ea:	2220      	movs	r2, #32
 80032ec:	409a      	lsls	r2, r3
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b05      	cmp	r3, #5
 80032fc:	d136      	bne.n	800336c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0216 	bic.w	r2, r2, #22
 800330c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800331c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d103      	bne.n	800332e <HAL_DMA_IRQHandler+0x1da>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800332a:	2b00      	cmp	r3, #0
 800332c:	d007      	beq.n	800333e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0208 	bic.w	r2, r2, #8
 800333c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003342:	223f      	movs	r2, #63	@ 0x3f
 8003344:	409a      	lsls	r2, r3
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800335e:	2b00      	cmp	r3, #0
 8003360:	d07e      	beq.n	8003460 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	4798      	blx	r3
        }
        return;
 800336a:	e079      	b.n	8003460 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d01d      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10d      	bne.n	80033a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338c:	2b00      	cmp	r3, #0
 800338e:	d031      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	4798      	blx	r3
 8003398:	e02c      	b.n	80033f4 <HAL_DMA_IRQHandler+0x2a0>
 800339a:	bf00      	nop
 800339c:	20000000 	.word	0x20000000
 80033a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d023      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	4798      	blx	r3
 80033b4:	e01e      	b.n	80033f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10f      	bne.n	80033e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0210 	bic.w	r2, r2, #16
 80033d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d032      	beq.n	8003462 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	d022      	beq.n	800344e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2205      	movs	r2, #5
 800340c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0201 	bic.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	3301      	adds	r3, #1
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	429a      	cmp	r2, r3
 800342a:	d307      	bcc.n	800343c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f2      	bne.n	8003420 <HAL_DMA_IRQHandler+0x2cc>
 800343a:	e000      	b.n	800343e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800343c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	4798      	blx	r3
 800345e:	e000      	b.n	8003462 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003460:	bf00      	nop
    }
  }
}
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003484:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b40      	cmp	r3, #64	@ 0x40
 8003494:	d108      	bne.n	80034a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034a6:	e007      	b.n	80034b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	60da      	str	r2, [r3, #12]
}
 80034b8:	bf00      	nop
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	3b10      	subs	r3, #16
 80034d4:	4a14      	ldr	r2, [pc, #80]	@ (8003528 <DMA_CalcBaseAndBitshift+0x64>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	091b      	lsrs	r3, r3, #4
 80034dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034de:	4a13      	ldr	r2, [pc, #76]	@ (800352c <DMA_CalcBaseAndBitshift+0x68>)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4413      	add	r3, r2
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d909      	bls.n	8003506 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034fa:	f023 0303 	bic.w	r3, r3, #3
 80034fe:	1d1a      	adds	r2, r3, #4
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	659a      	str	r2, [r3, #88]	@ 0x58
 8003504:	e007      	b.n	8003516 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800350e:	f023 0303 	bic.w	r3, r3, #3
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	aaaaaaab 	.word	0xaaaaaaab
 800352c:	0800c720 	.word	0x0800c720

08003530 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003540:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d11f      	bne.n	800358a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b03      	cmp	r3, #3
 800354e:	d856      	bhi.n	80035fe <DMA_CheckFifoParam+0xce>
 8003550:	a201      	add	r2, pc, #4	@ (adr r2, 8003558 <DMA_CheckFifoParam+0x28>)
 8003552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003556:	bf00      	nop
 8003558:	08003569 	.word	0x08003569
 800355c:	0800357b 	.word	0x0800357b
 8003560:	08003569 	.word	0x08003569
 8003564:	080035ff 	.word	0x080035ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d046      	beq.n	8003602 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003578:	e043      	b.n	8003602 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003582:	d140      	bne.n	8003606 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003588:	e03d      	b.n	8003606 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003592:	d121      	bne.n	80035d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2b03      	cmp	r3, #3
 8003598:	d837      	bhi.n	800360a <DMA_CheckFifoParam+0xda>
 800359a:	a201      	add	r2, pc, #4	@ (adr r2, 80035a0 <DMA_CheckFifoParam+0x70>)
 800359c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a0:	080035b1 	.word	0x080035b1
 80035a4:	080035b7 	.word	0x080035b7
 80035a8:	080035b1 	.word	0x080035b1
 80035ac:	080035c9 	.word	0x080035c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	73fb      	strb	r3, [r7, #15]
      break;
 80035b4:	e030      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d025      	beq.n	800360e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c6:	e022      	b.n	800360e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035d0:	d11f      	bne.n	8003612 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035d6:	e01c      	b.n	8003612 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d903      	bls.n	80035e6 <DMA_CheckFifoParam+0xb6>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d003      	beq.n	80035ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035e4:	e018      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	73fb      	strb	r3, [r7, #15]
      break;
 80035ea:	e015      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00e      	beq.n	8003616 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	73fb      	strb	r3, [r7, #15]
      break;
 80035fc:	e00b      	b.n	8003616 <DMA_CheckFifoParam+0xe6>
      break;
 80035fe:	bf00      	nop
 8003600:	e00a      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
      break;
 8003602:	bf00      	nop
 8003604:	e008      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
      break;
 8003606:	bf00      	nop
 8003608:	e006      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
      break;
 800360a:	bf00      	nop
 800360c:	e004      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
      break;
 800360e:	bf00      	nop
 8003610:	e002      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
      break;   
 8003612:	bf00      	nop
 8003614:	e000      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
      break;
 8003616:	bf00      	nop
    }
  } 
  
  return status; 
 8003618:	7bfb      	ldrb	r3, [r7, #15]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop

08003628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003628:	b480      	push	{r7}
 800362a:	b089      	sub	sp, #36	@ 0x24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003636:	2300      	movs	r3, #0
 8003638:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800363a:	2300      	movs	r3, #0
 800363c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
 8003642:	e165      	b.n	8003910 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003644:	2201      	movs	r2, #1
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4013      	ands	r3, r2
 8003656:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	429a      	cmp	r2, r3
 800365e:	f040 8154 	bne.w	800390a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	2b01      	cmp	r3, #1
 800366c:	d005      	beq.n	800367a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003676:	2b02      	cmp	r3, #2
 8003678:	d130      	bne.n	80036dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	2203      	movs	r2, #3
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43db      	mvns	r3, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4013      	ands	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036b0:	2201      	movs	r2, #1
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4013      	ands	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	091b      	lsrs	r3, r3, #4
 80036c6:	f003 0201 	and.w	r2, r3, #1
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 0303 	and.w	r3, r3, #3
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	d017      	beq.n	8003718 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	2203      	movs	r2, #3
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4313      	orrs	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d123      	bne.n	800376c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	08da      	lsrs	r2, r3, #3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3208      	adds	r2, #8
 800372c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003730:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	220f      	movs	r2, #15
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4313      	orrs	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	08da      	lsrs	r2, r3, #3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3208      	adds	r2, #8
 8003766:	69b9      	ldr	r1, [r7, #24]
 8003768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	2203      	movs	r2, #3
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	43db      	mvns	r3, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4013      	ands	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 0203 	and.w	r2, r3, #3
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 80ae 	beq.w	800390a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	4b5d      	ldr	r3, [pc, #372]	@ (8003928 <HAL_GPIO_Init+0x300>)
 80037b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b6:	4a5c      	ldr	r2, [pc, #368]	@ (8003928 <HAL_GPIO_Init+0x300>)
 80037b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80037be:	4b5a      	ldr	r3, [pc, #360]	@ (8003928 <HAL_GPIO_Init+0x300>)
 80037c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037ca:	4a58      	ldr	r2, [pc, #352]	@ (800392c <HAL_GPIO_Init+0x304>)
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	089b      	lsrs	r3, r3, #2
 80037d0:	3302      	adds	r3, #2
 80037d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	220f      	movs	r2, #15
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43db      	mvns	r3, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4013      	ands	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a4f      	ldr	r2, [pc, #316]	@ (8003930 <HAL_GPIO_Init+0x308>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d025      	beq.n	8003842 <HAL_GPIO_Init+0x21a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a4e      	ldr	r2, [pc, #312]	@ (8003934 <HAL_GPIO_Init+0x30c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d01f      	beq.n	800383e <HAL_GPIO_Init+0x216>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a4d      	ldr	r2, [pc, #308]	@ (8003938 <HAL_GPIO_Init+0x310>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d019      	beq.n	800383a <HAL_GPIO_Init+0x212>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a4c      	ldr	r2, [pc, #304]	@ (800393c <HAL_GPIO_Init+0x314>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d013      	beq.n	8003836 <HAL_GPIO_Init+0x20e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a4b      	ldr	r2, [pc, #300]	@ (8003940 <HAL_GPIO_Init+0x318>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d00d      	beq.n	8003832 <HAL_GPIO_Init+0x20a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a4a      	ldr	r2, [pc, #296]	@ (8003944 <HAL_GPIO_Init+0x31c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d007      	beq.n	800382e <HAL_GPIO_Init+0x206>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a49      	ldr	r2, [pc, #292]	@ (8003948 <HAL_GPIO_Init+0x320>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d101      	bne.n	800382a <HAL_GPIO_Init+0x202>
 8003826:	2306      	movs	r3, #6
 8003828:	e00c      	b.n	8003844 <HAL_GPIO_Init+0x21c>
 800382a:	2307      	movs	r3, #7
 800382c:	e00a      	b.n	8003844 <HAL_GPIO_Init+0x21c>
 800382e:	2305      	movs	r3, #5
 8003830:	e008      	b.n	8003844 <HAL_GPIO_Init+0x21c>
 8003832:	2304      	movs	r3, #4
 8003834:	e006      	b.n	8003844 <HAL_GPIO_Init+0x21c>
 8003836:	2303      	movs	r3, #3
 8003838:	e004      	b.n	8003844 <HAL_GPIO_Init+0x21c>
 800383a:	2302      	movs	r3, #2
 800383c:	e002      	b.n	8003844 <HAL_GPIO_Init+0x21c>
 800383e:	2301      	movs	r3, #1
 8003840:	e000      	b.n	8003844 <HAL_GPIO_Init+0x21c>
 8003842:	2300      	movs	r3, #0
 8003844:	69fa      	ldr	r2, [r7, #28]
 8003846:	f002 0203 	and.w	r2, r2, #3
 800384a:	0092      	lsls	r2, r2, #2
 800384c:	4093      	lsls	r3, r2
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4313      	orrs	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003854:	4935      	ldr	r1, [pc, #212]	@ (800392c <HAL_GPIO_Init+0x304>)
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	089b      	lsrs	r3, r3, #2
 800385a:	3302      	adds	r3, #2
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003862:	4b3a      	ldr	r3, [pc, #232]	@ (800394c <HAL_GPIO_Init+0x324>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	43db      	mvns	r3, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4013      	ands	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	4313      	orrs	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003886:	4a31      	ldr	r2, [pc, #196]	@ (800394c <HAL_GPIO_Init+0x324>)
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800388c:	4b2f      	ldr	r3, [pc, #188]	@ (800394c <HAL_GPIO_Init+0x324>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	43db      	mvns	r3, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038b0:	4a26      	ldr	r2, [pc, #152]	@ (800394c <HAL_GPIO_Init+0x324>)
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038b6:	4b25      	ldr	r3, [pc, #148]	@ (800394c <HAL_GPIO_Init+0x324>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	43db      	mvns	r3, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4013      	ands	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038da:	4a1c      	ldr	r2, [pc, #112]	@ (800394c <HAL_GPIO_Init+0x324>)
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038e0:	4b1a      	ldr	r3, [pc, #104]	@ (800394c <HAL_GPIO_Init+0x324>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	43db      	mvns	r3, r3
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4013      	ands	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003904:	4a11      	ldr	r2, [pc, #68]	@ (800394c <HAL_GPIO_Init+0x324>)
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	3301      	adds	r3, #1
 800390e:	61fb      	str	r3, [r7, #28]
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	2b0f      	cmp	r3, #15
 8003914:	f67f ae96 	bls.w	8003644 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003918:	bf00      	nop
 800391a:	bf00      	nop
 800391c:	3724      	adds	r7, #36	@ 0x24
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40023800 	.word	0x40023800
 800392c:	40013800 	.word	0x40013800
 8003930:	40020000 	.word	0x40020000
 8003934:	40020400 	.word	0x40020400
 8003938:	40020800 	.word	0x40020800
 800393c:	40020c00 	.word	0x40020c00
 8003940:	40021000 	.word	0x40021000
 8003944:	40021400 	.word	0x40021400
 8003948:	40021800 	.word	0x40021800
 800394c:	40013c00 	.word	0x40013c00

08003950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	807b      	strh	r3, [r7, #2]
 800395c:	4613      	mov	r3, r2
 800395e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003960:	787b      	ldrb	r3, [r7, #1]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003966:	887a      	ldrh	r2, [r7, #2]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800396c:	e003      	b.n	8003976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800396e:	887b      	ldrh	r3, [r7, #2]
 8003970:	041a      	lsls	r2, r3, #16
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	619a      	str	r2, [r3, #24]
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
	...

08003984 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e12b      	b.n	8003bee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fe f85a 	bl	8001a64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2224      	movs	r2, #36	@ 0x24
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0201 	bic.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039e8:	f001 fd62 	bl	80054b0 <HAL_RCC_GetPCLK1Freq>
 80039ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	4a81      	ldr	r2, [pc, #516]	@ (8003bf8 <HAL_I2C_Init+0x274>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d807      	bhi.n	8003a08 <HAL_I2C_Init+0x84>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4a80      	ldr	r2, [pc, #512]	@ (8003bfc <HAL_I2C_Init+0x278>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	bf94      	ite	ls
 8003a00:	2301      	movls	r3, #1
 8003a02:	2300      	movhi	r3, #0
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	e006      	b.n	8003a16 <HAL_I2C_Init+0x92>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4a7d      	ldr	r2, [pc, #500]	@ (8003c00 <HAL_I2C_Init+0x27c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	bf94      	ite	ls
 8003a10:	2301      	movls	r3, #1
 8003a12:	2300      	movhi	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e0e7      	b.n	8003bee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4a78      	ldr	r2, [pc, #480]	@ (8003c04 <HAL_I2C_Init+0x280>)
 8003a22:	fba2 2303 	umull	r2, r3, r2, r3
 8003a26:	0c9b      	lsrs	r3, r3, #18
 8003a28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	4a6a      	ldr	r2, [pc, #424]	@ (8003bf8 <HAL_I2C_Init+0x274>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d802      	bhi.n	8003a58 <HAL_I2C_Init+0xd4>
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	3301      	adds	r3, #1
 8003a56:	e009      	b.n	8003a6c <HAL_I2C_Init+0xe8>
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a5e:	fb02 f303 	mul.w	r3, r2, r3
 8003a62:	4a69      	ldr	r2, [pc, #420]	@ (8003c08 <HAL_I2C_Init+0x284>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	099b      	lsrs	r3, r3, #6
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6812      	ldr	r2, [r2, #0]
 8003a70:	430b      	orrs	r3, r1
 8003a72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	495c      	ldr	r1, [pc, #368]	@ (8003bf8 <HAL_I2C_Init+0x274>)
 8003a88:	428b      	cmp	r3, r1
 8003a8a:	d819      	bhi.n	8003ac0 <HAL_I2C_Init+0x13c>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	1e59      	subs	r1, r3, #1
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a9a:	1c59      	adds	r1, r3, #1
 8003a9c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003aa0:	400b      	ands	r3, r1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00a      	beq.n	8003abc <HAL_I2C_Init+0x138>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1e59      	subs	r1, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aba:	e051      	b.n	8003b60 <HAL_I2C_Init+0x1dc>
 8003abc:	2304      	movs	r3, #4
 8003abe:	e04f      	b.n	8003b60 <HAL_I2C_Init+0x1dc>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d111      	bne.n	8003aec <HAL_I2C_Init+0x168>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	1e58      	subs	r0, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6859      	ldr	r1, [r3, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	440b      	add	r3, r1
 8003ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ada:	3301      	adds	r3, #1
 8003adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bf0c      	ite	eq
 8003ae4:	2301      	moveq	r3, #1
 8003ae6:	2300      	movne	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	e012      	b.n	8003b12 <HAL_I2C_Init+0x18e>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	1e58      	subs	r0, r3, #1
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6859      	ldr	r1, [r3, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	0099      	lsls	r1, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b02:	3301      	adds	r3, #1
 8003b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bf0c      	ite	eq
 8003b0c:	2301      	moveq	r3, #1
 8003b0e:	2300      	movne	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <HAL_I2C_Init+0x196>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e022      	b.n	8003b60 <HAL_I2C_Init+0x1dc>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10e      	bne.n	8003b40 <HAL_I2C_Init+0x1bc>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1e58      	subs	r0, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6859      	ldr	r1, [r3, #4]
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	440b      	add	r3, r1
 8003b30:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b34:	3301      	adds	r3, #1
 8003b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b3e:	e00f      	b.n	8003b60 <HAL_I2C_Init+0x1dc>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	1e58      	subs	r0, r3, #1
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6859      	ldr	r1, [r3, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	0099      	lsls	r1, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b56:	3301      	adds	r3, #1
 8003b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	6809      	ldr	r1, [r1, #0]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69da      	ldr	r2, [r3, #28]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6911      	ldr	r1, [r2, #16]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68d2      	ldr	r2, [r2, #12]
 8003b9a:	4311      	orrs	r1, r2
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6812      	ldr	r2, [r2, #0]
 8003ba0:	430b      	orrs	r3, r1
 8003ba2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	000186a0 	.word	0x000186a0
 8003bfc:	001e847f 	.word	0x001e847f
 8003c00:	003d08ff 	.word	0x003d08ff
 8003c04:	431bde83 	.word	0x431bde83
 8003c08:	10624dd3 	.word	0x10624dd3

08003c0c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	607a      	str	r2, [r7, #4]
 8003c16:	461a      	mov	r2, r3
 8003c18:	460b      	mov	r3, r1
 8003c1a:	817b      	strh	r3, [r7, #10]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c20:	f7fe fdae 	bl	8002780 <HAL_GetTick>
 8003c24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b20      	cmp	r3, #32
 8003c30:	f040 80e0 	bne.w	8003df4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	2319      	movs	r3, #25
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	4970      	ldr	r1, [pc, #448]	@ (8003e00 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f001 f90e 	bl	8004e60 <I2C_WaitOnFlagUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e0d3      	b.n	8003df6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_I2C_Master_Transmit+0x50>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e0cc      	b.n	8003df6 <HAL_I2C_Master_Transmit+0x1ea>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d007      	beq.n	8003c82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f042 0201 	orr.w	r2, r2, #1
 8003c80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2221      	movs	r2, #33	@ 0x21
 8003c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2210      	movs	r2, #16
 8003c9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	893a      	ldrh	r2, [r7, #8]
 8003cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4a50      	ldr	r2, [pc, #320]	@ (8003e04 <HAL_I2C_Master_Transmit+0x1f8>)
 8003cc2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cc4:	8979      	ldrh	r1, [r7, #10]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	6a3a      	ldr	r2, [r7, #32]
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 fdfa 	bl	80048c4 <I2C_MasterRequestWrite>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e08d      	b.n	8003df6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cda:	2300      	movs	r3, #0
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	613b      	str	r3, [r7, #16]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003cf0:	e066      	b.n	8003dc0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	6a39      	ldr	r1, [r7, #32]
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f001 f9cc 	bl	8005094 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00d      	beq.n	8003d1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d107      	bne.n	8003d1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e06b      	b.n	8003df6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d22:	781a      	ldrb	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d11b      	bne.n	8003d94 <HAL_I2C_Master_Transmit+0x188>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d017      	beq.n	8003d94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d68:	781a      	ldrb	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	6a39      	ldr	r1, [r7, #32]
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f001 f9c3 	bl	8005124 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00d      	beq.n	8003dc0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d107      	bne.n	8003dbc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e01a      	b.n	8003df6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d194      	bne.n	8003cf2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	e000      	b.n	8003df6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003df4:	2302      	movs	r3, #2
  }
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	00100002 	.word	0x00100002
 8003e04:	ffff0000 	.word	0xffff0000

08003e08 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08c      	sub	sp, #48	@ 0x30
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	607a      	str	r2, [r7, #4]
 8003e12:	461a      	mov	r2, r3
 8003e14:	460b      	mov	r3, r1
 8003e16:	817b      	strh	r3, [r7, #10]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e1c:	f7fe fcb0 	bl	8002780 <HAL_GetTick>
 8003e20:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	f040 8217 	bne.w	800425e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	2319      	movs	r3, #25
 8003e36:	2201      	movs	r2, #1
 8003e38:	497c      	ldr	r1, [pc, #496]	@ (800402c <HAL_I2C_Master_Receive+0x224>)
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f001 f810 	bl	8004e60 <I2C_WaitOnFlagUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003e46:	2302      	movs	r3, #2
 8003e48:	e20a      	b.n	8004260 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_I2C_Master_Receive+0x50>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e203      	b.n	8004260 <HAL_I2C_Master_Receive+0x458>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d007      	beq.n	8003e7e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0201 	orr.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2222      	movs	r2, #34	@ 0x22
 8003e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2210      	movs	r2, #16
 8003e9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	893a      	ldrh	r2, [r7, #8]
 8003eae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4a5c      	ldr	r2, [pc, #368]	@ (8004030 <HAL_I2C_Master_Receive+0x228>)
 8003ebe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ec0:	8979      	ldrh	r1, [r7, #10]
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 fd7e 	bl	80049c8 <I2C_MasterRequestRead>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e1c4      	b.n	8004260 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d113      	bne.n	8003f06 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ede:	2300      	movs	r3, #0
 8003ee0:	623b      	str	r3, [r7, #32]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	623b      	str	r3, [r7, #32]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	623b      	str	r3, [r7, #32]
 8003ef2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	e198      	b.n	8004238 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d11b      	bne.n	8003f46 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61fb      	str	r3, [r7, #28]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	61fb      	str	r3, [r7, #28]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	61fb      	str	r3, [r7, #28]
 8003f32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	e178      	b.n	8004238 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d11b      	bne.n	8003f86 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61bb      	str	r3, [r7, #24]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	61bb      	str	r3, [r7, #24]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	61bb      	str	r3, [r7, #24]
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	e158      	b.n	8004238 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	617b      	str	r3, [r7, #20]
 8003faa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003fac:	e144      	b.n	8004238 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	f200 80f1 	bhi.w	800419a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d123      	bne.n	8004008 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fc2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f001 f8f5 	bl	80051b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e145      	b.n	8004260 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004006:	e117      	b.n	8004238 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800400c:	2b02      	cmp	r3, #2
 800400e:	d14e      	bne.n	80040ae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004016:	2200      	movs	r2, #0
 8004018:	4906      	ldr	r1, [pc, #24]	@ (8004034 <HAL_I2C_Master_Receive+0x22c>)
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 ff20 	bl	8004e60 <I2C_WaitOnFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d008      	beq.n	8004038 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e11a      	b.n	8004260 <HAL_I2C_Master_Receive+0x458>
 800402a:	bf00      	nop
 800402c:	00100002 	.word	0x00100002
 8004030:	ffff0000 	.word	0xffff0000
 8004034:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004046:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691a      	ldr	r2, [r3, #16]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004070:	b29b      	uxth	r3, r3
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004084:	b2d2      	uxtb	r2, r2
 8004086:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408c:	1c5a      	adds	r2, r3, #1
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040ac:	e0c4      	b.n	8004238 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b4:	2200      	movs	r2, #0
 80040b6:	496c      	ldr	r1, [pc, #432]	@ (8004268 <HAL_I2C_Master_Receive+0x460>)
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 fed1 	bl	8004e60 <I2C_WaitOnFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0cb      	b.n	8004260 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004110:	2200      	movs	r2, #0
 8004112:	4955      	ldr	r1, [pc, #340]	@ (8004268 <HAL_I2C_Master_Receive+0x460>)
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 fea3 	bl	8004e60 <I2C_WaitOnFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e09d      	b.n	8004260 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004132:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004198:	e04e      	b.n	8004238 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800419a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800419c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f001 f808 	bl	80051b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e058      	b.n	8004260 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b8:	b2d2      	uxtb	r2, r2
 80041ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d124      	bne.n	8004238 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d107      	bne.n	8004206 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004204:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800423c:	2b00      	cmp	r3, #0
 800423e:	f47f aeb6 	bne.w	8003fae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	e000      	b.n	8004260 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800425e:	2302      	movs	r3, #2
  }
}
 8004260:	4618      	mov	r0, r3
 8004262:	3728      	adds	r7, #40	@ 0x28
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	00010004 	.word	0x00010004

0800426c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af02      	add	r7, sp, #8
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	4608      	mov	r0, r1
 8004276:	4611      	mov	r1, r2
 8004278:	461a      	mov	r2, r3
 800427a:	4603      	mov	r3, r0
 800427c:	817b      	strh	r3, [r7, #10]
 800427e:	460b      	mov	r3, r1
 8004280:	813b      	strh	r3, [r7, #8]
 8004282:	4613      	mov	r3, r2
 8004284:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004286:	f7fe fa7b 	bl	8002780 <HAL_GetTick>
 800428a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b20      	cmp	r3, #32
 8004296:	f040 80d9 	bne.w	800444c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	2319      	movs	r3, #25
 80042a0:	2201      	movs	r2, #1
 80042a2:	496d      	ldr	r1, [pc, #436]	@ (8004458 <HAL_I2C_Mem_Write+0x1ec>)
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 fddb 	bl	8004e60 <I2C_WaitOnFlagUntilTimeout>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80042b0:	2302      	movs	r3, #2
 80042b2:	e0cc      	b.n	800444e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_I2C_Mem_Write+0x56>
 80042be:	2302      	movs	r3, #2
 80042c0:	e0c5      	b.n	800444e <HAL_I2C_Mem_Write+0x1e2>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d007      	beq.n	80042e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2221      	movs	r2, #33	@ 0x21
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2240      	movs	r2, #64	@ 0x40
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a3a      	ldr	r2, [r7, #32]
 8004312:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004318:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4a4d      	ldr	r2, [pc, #308]	@ (800445c <HAL_I2C_Mem_Write+0x1f0>)
 8004328:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800432a:	88f8      	ldrh	r0, [r7, #6]
 800432c:	893a      	ldrh	r2, [r7, #8]
 800432e:	8979      	ldrh	r1, [r7, #10]
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	9301      	str	r3, [sp, #4]
 8004334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	4603      	mov	r3, r0
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 fc12 	bl	8004b64 <I2C_RequestMemoryWrite>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d052      	beq.n	80043ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e081      	b.n	800444e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 fea0 	bl	8005094 <I2C_WaitOnTXEFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00d      	beq.n	8004376 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435e:	2b04      	cmp	r3, #4
 8004360:	d107      	bne.n	8004372 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004370:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e06b      	b.n	800444e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437a:	781a      	ldrb	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439c:	b29b      	uxth	r3, r3
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d11b      	bne.n	80043ec <HAL_I2C_Mem_Write+0x180>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d017      	beq.n	80043ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c0:	781a      	ldrb	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1aa      	bne.n	800434a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 fe93 	bl	8005124 <I2C_WaitOnBTFFlagUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00d      	beq.n	8004420 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004408:	2b04      	cmp	r3, #4
 800440a:	d107      	bne.n	800441c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800441a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e016      	b.n	800444e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800442e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004448:	2300      	movs	r3, #0
 800444a:	e000      	b.n	800444e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800444c:	2302      	movs	r3, #2
  }
}
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	00100002 	.word	0x00100002
 800445c:	ffff0000 	.word	0xffff0000

08004460 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b08c      	sub	sp, #48	@ 0x30
 8004464:	af02      	add	r7, sp, #8
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	4608      	mov	r0, r1
 800446a:	4611      	mov	r1, r2
 800446c:	461a      	mov	r2, r3
 800446e:	4603      	mov	r3, r0
 8004470:	817b      	strh	r3, [r7, #10]
 8004472:	460b      	mov	r3, r1
 8004474:	813b      	strh	r3, [r7, #8]
 8004476:	4613      	mov	r3, r2
 8004478:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800447a:	f7fe f981 	bl	8002780 <HAL_GetTick>
 800447e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b20      	cmp	r3, #32
 800448a:	f040 8214 	bne.w	80048b6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800448e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	2319      	movs	r3, #25
 8004494:	2201      	movs	r2, #1
 8004496:	497b      	ldr	r1, [pc, #492]	@ (8004684 <HAL_I2C_Mem_Read+0x224>)
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 fce1 	bl	8004e60 <I2C_WaitOnFlagUntilTimeout>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80044a4:	2302      	movs	r3, #2
 80044a6:	e207      	b.n	80048b8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_I2C_Mem_Read+0x56>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e200      	b.n	80048b8 <HAL_I2C_Mem_Read+0x458>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d007      	beq.n	80044dc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0201 	orr.w	r2, r2, #1
 80044da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2222      	movs	r2, #34	@ 0x22
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2240      	movs	r2, #64	@ 0x40
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004506:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800450c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4a5b      	ldr	r2, [pc, #364]	@ (8004688 <HAL_I2C_Mem_Read+0x228>)
 800451c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800451e:	88f8      	ldrh	r0, [r7, #6]
 8004520:	893a      	ldrh	r2, [r7, #8]
 8004522:	8979      	ldrh	r1, [r7, #10]
 8004524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004526:	9301      	str	r3, [sp, #4]
 8004528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	4603      	mov	r3, r0
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 fbae 	bl	8004c90 <I2C_RequestMemoryRead>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e1bc      	b.n	80048b8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004542:	2b00      	cmp	r3, #0
 8004544:	d113      	bne.n	800456e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004546:	2300      	movs	r3, #0
 8004548:	623b      	str	r3, [r7, #32]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	623b      	str	r3, [r7, #32]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	623b      	str	r3, [r7, #32]
 800455a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	e190      	b.n	8004890 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004572:	2b01      	cmp	r3, #1
 8004574:	d11b      	bne.n	80045ae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004584:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004586:	2300      	movs	r3, #0
 8004588:	61fb      	str	r3, [r7, #28]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	61fb      	str	r3, [r7, #28]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	61fb      	str	r3, [r7, #28]
 800459a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	e170      	b.n	8004890 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d11b      	bne.n	80045ee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045d6:	2300      	movs	r3, #0
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	61bb      	str	r3, [r7, #24]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	e150      	b.n	8004890 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ee:	2300      	movs	r3, #0
 80045f0:	617b      	str	r3, [r7, #20]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	617b      	str	r3, [r7, #20]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	617b      	str	r3, [r7, #20]
 8004602:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004604:	e144      	b.n	8004890 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800460a:	2b03      	cmp	r3, #3
 800460c:	f200 80f1 	bhi.w	80047f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004614:	2b01      	cmp	r3, #1
 8004616:	d123      	bne.n	8004660 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800461a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 fdc9 	bl	80051b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e145      	b.n	80048b8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691a      	ldr	r2, [r3, #16]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004654:	b29b      	uxth	r3, r3
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800465e:	e117      	b.n	8004890 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004664:	2b02      	cmp	r3, #2
 8004666:	d14e      	bne.n	8004706 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800466e:	2200      	movs	r2, #0
 8004670:	4906      	ldr	r1, [pc, #24]	@ (800468c <HAL_I2C_Mem_Read+0x22c>)
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 fbf4 	bl	8004e60 <I2C_WaitOnFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d008      	beq.n	8004690 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e11a      	b.n	80048b8 <HAL_I2C_Mem_Read+0x458>
 8004682:	bf00      	nop
 8004684:	00100002 	.word	0x00100002
 8004688:	ffff0000 	.word	0xffff0000
 800468c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800469e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046bc:	3b01      	subs	r3, #1
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	691a      	ldr	r2, [r3, #16]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004704:	e0c4      	b.n	8004890 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800470c:	2200      	movs	r2, #0
 800470e:	496c      	ldr	r1, [pc, #432]	@ (80048c0 <HAL_I2C_Mem_Read+0x460>)
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 fba5 	bl	8004e60 <I2C_WaitOnFlagUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e0cb      	b.n	80048b8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800472e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	691a      	ldr	r2, [r3, #16]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b01      	subs	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004768:	2200      	movs	r2, #0
 800476a:	4955      	ldr	r1, [pc, #340]	@ (80048c0 <HAL_I2C_Mem_Read+0x460>)
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 fb77 	bl	8004e60 <I2C_WaitOnFlagUntilTimeout>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e09d      	b.n	80048b8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800478a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691a      	ldr	r2, [r3, #16]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c8:	b2d2      	uxtb	r2, r2
 80047ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d0:	1c5a      	adds	r2, r3, #1
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047f0:	e04e      	b.n	8004890 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 fcdc 	bl	80051b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e058      	b.n	80048b8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004810:	b2d2      	uxtb	r2, r2
 8004812:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004822:	3b01      	subs	r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b04      	cmp	r3, #4
 8004844:	d124      	bne.n	8004890 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800484a:	2b03      	cmp	r3, #3
 800484c:	d107      	bne.n	800485e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800485c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800487a:	3b01      	subs	r3, #1
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004894:	2b00      	cmp	r3, #0
 8004896:	f47f aeb6 	bne.w	8004606 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2220      	movs	r2, #32
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	e000      	b.n	80048b8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80048b6:	2302      	movs	r3, #2
  }
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3728      	adds	r7, #40	@ 0x28
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	00010004 	.word	0x00010004

080048c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b088      	sub	sp, #32
 80048c8:	af02      	add	r7, sp, #8
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	607a      	str	r2, [r7, #4]
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	460b      	mov	r3, r1
 80048d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d006      	beq.n	80048ee <I2C_MasterRequestWrite+0x2a>
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d003      	beq.n	80048ee <I2C_MasterRequestWrite+0x2a>
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048ec:	d108      	bne.n	8004900 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	e00b      	b.n	8004918 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004904:	2b12      	cmp	r3, #18
 8004906:	d107      	bne.n	8004918 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004916:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 fa9b 	bl	8004e60 <I2C_WaitOnFlagUntilTimeout>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00d      	beq.n	800494c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800493a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800493e:	d103      	bne.n	8004948 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004946:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e035      	b.n	80049b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004954:	d108      	bne.n	8004968 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004956:	897b      	ldrh	r3, [r7, #10]
 8004958:	b2db      	uxtb	r3, r3
 800495a:	461a      	mov	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004964:	611a      	str	r2, [r3, #16]
 8004966:	e01b      	b.n	80049a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004968:	897b      	ldrh	r3, [r7, #10]
 800496a:	11db      	asrs	r3, r3, #7
 800496c:	b2db      	uxtb	r3, r3
 800496e:	f003 0306 	and.w	r3, r3, #6
 8004972:	b2db      	uxtb	r3, r3
 8004974:	f063 030f 	orn	r3, r3, #15
 8004978:	b2da      	uxtb	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	490e      	ldr	r1, [pc, #56]	@ (80049c0 <I2C_MasterRequestWrite+0xfc>)
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 fae4 	bl	8004f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e010      	b.n	80049b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004996:	897b      	ldrh	r3, [r7, #10]
 8004998:	b2da      	uxtb	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	4907      	ldr	r1, [pc, #28]	@ (80049c4 <I2C_MasterRequestWrite+0x100>)
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 fad4 	bl	8004f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	00010008 	.word	0x00010008
 80049c4:	00010002 	.word	0x00010002

080049c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b088      	sub	sp, #32
 80049cc:	af02      	add	r7, sp, #8
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	607a      	str	r2, [r7, #4]
 80049d2:	603b      	str	r3, [r7, #0]
 80049d4:	460b      	mov	r3, r1
 80049d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d006      	beq.n	8004a02 <I2C_MasterRequestRead+0x3a>
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d003      	beq.n	8004a02 <I2C_MasterRequestRead+0x3a>
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a00:	d108      	bne.n	8004a14 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	e00b      	b.n	8004a2c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a18:	2b11      	cmp	r3, #17
 8004a1a:	d107      	bne.n	8004a2c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 fa11 	bl	8004e60 <I2C_WaitOnFlagUntilTimeout>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00d      	beq.n	8004a60 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a52:	d103      	bne.n	8004a5c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e079      	b.n	8004b54 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a68:	d108      	bne.n	8004a7c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a6a:	897b      	ldrh	r3, [r7, #10]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	f043 0301 	orr.w	r3, r3, #1
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	611a      	str	r2, [r3, #16]
 8004a7a:	e05f      	b.n	8004b3c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a7c:	897b      	ldrh	r3, [r7, #10]
 8004a7e:	11db      	asrs	r3, r3, #7
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	f003 0306 	and.w	r3, r3, #6
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	f063 030f 	orn	r3, r3, #15
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	4930      	ldr	r1, [pc, #192]	@ (8004b5c <I2C_MasterRequestRead+0x194>)
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 fa5a 	bl	8004f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e054      	b.n	8004b54 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004aaa:	897b      	ldrh	r3, [r7, #10]
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	4929      	ldr	r1, [pc, #164]	@ (8004b60 <I2C_MasterRequestRead+0x198>)
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 fa4a 	bl	8004f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e044      	b.n	8004b54 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aca:	2300      	movs	r3, #0
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	613b      	str	r3, [r7, #16]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	613b      	str	r3, [r7, #16]
 8004ade:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004aee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 f9af 	bl	8004e60 <I2C_WaitOnFlagUntilTimeout>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00d      	beq.n	8004b24 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b16:	d103      	bne.n	8004b20 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b1e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e017      	b.n	8004b54 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004b24:	897b      	ldrh	r3, [r7, #10]
 8004b26:	11db      	asrs	r3, r3, #7
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	f003 0306 	and.w	r3, r3, #6
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	f063 030e 	orn	r3, r3, #14
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	4907      	ldr	r1, [pc, #28]	@ (8004b60 <I2C_MasterRequestRead+0x198>)
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 fa06 	bl	8004f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e000      	b.n	8004b54 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	00010008 	.word	0x00010008
 8004b60:	00010002 	.word	0x00010002

08004b64 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b088      	sub	sp, #32
 8004b68:	af02      	add	r7, sp, #8
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	4608      	mov	r0, r1
 8004b6e:	4611      	mov	r1, r2
 8004b70:	461a      	mov	r2, r3
 8004b72:	4603      	mov	r3, r0
 8004b74:	817b      	strh	r3, [r7, #10]
 8004b76:	460b      	mov	r3, r1
 8004b78:	813b      	strh	r3, [r7, #8]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 f960 	bl	8004e60 <I2C_WaitOnFlagUntilTimeout>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00d      	beq.n	8004bc2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bb4:	d103      	bne.n	8004bbe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e05f      	b.n	8004c82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bc2:	897b      	ldrh	r3, [r7, #10]
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004bd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	6a3a      	ldr	r2, [r7, #32]
 8004bd6:	492d      	ldr	r1, [pc, #180]	@ (8004c8c <I2C_RequestMemoryWrite+0x128>)
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 f9bb 	bl	8004f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e04c      	b.n	8004c82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c00:	6a39      	ldr	r1, [r7, #32]
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 fa46 	bl	8005094 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00d      	beq.n	8004c2a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d107      	bne.n	8004c26 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e02b      	b.n	8004c82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c2a:	88fb      	ldrh	r3, [r7, #6]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d105      	bne.n	8004c3c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c30:	893b      	ldrh	r3, [r7, #8]
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	611a      	str	r2, [r3, #16]
 8004c3a:	e021      	b.n	8004c80 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c3c:	893b      	ldrh	r3, [r7, #8]
 8004c3e:	0a1b      	lsrs	r3, r3, #8
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c4c:	6a39      	ldr	r1, [r7, #32]
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 fa20 	bl	8005094 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00d      	beq.n	8004c76 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5e:	2b04      	cmp	r3, #4
 8004c60:	d107      	bne.n	8004c72 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e005      	b.n	8004c82 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c76:	893b      	ldrh	r3, [r7, #8]
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	00010002 	.word	0x00010002

08004c90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af02      	add	r7, sp, #8
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	4608      	mov	r0, r1
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	817b      	strh	r3, [r7, #10]
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	813b      	strh	r3, [r7, #8]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004cb8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 f8c2 	bl	8004e60 <I2C_WaitOnFlagUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00d      	beq.n	8004cfe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cf0:	d103      	bne.n	8004cfa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cf8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e0aa      	b.n	8004e54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cfe:	897b      	ldrh	r3, [r7, #10]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	461a      	mov	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d10:	6a3a      	ldr	r2, [r7, #32]
 8004d12:	4952      	ldr	r1, [pc, #328]	@ (8004e5c <I2C_RequestMemoryRead+0x1cc>)
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f91d 	bl	8004f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e097      	b.n	8004e54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d24:	2300      	movs	r3, #0
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d3c:	6a39      	ldr	r1, [r7, #32]
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 f9a8 	bl	8005094 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00d      	beq.n	8004d66 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d107      	bne.n	8004d62 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e076      	b.n	8004e54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d66:	88fb      	ldrh	r3, [r7, #6]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d105      	bne.n	8004d78 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d6c:	893b      	ldrh	r3, [r7, #8]
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	611a      	str	r2, [r3, #16]
 8004d76:	e021      	b.n	8004dbc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d78:	893b      	ldrh	r3, [r7, #8]
 8004d7a:	0a1b      	lsrs	r3, r3, #8
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d88:	6a39      	ldr	r1, [r7, #32]
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 f982 	bl	8005094 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00d      	beq.n	8004db2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d107      	bne.n	8004dae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e050      	b.n	8004e54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004db2:	893b      	ldrh	r3, [r7, #8]
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dbe:	6a39      	ldr	r1, [r7, #32]
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 f967 	bl	8005094 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00d      	beq.n	8004de8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd0:	2b04      	cmp	r3, #4
 8004dd2:	d107      	bne.n	8004de4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004de2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e035      	b.n	8004e54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004df6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 f82b 	bl	8004e60 <I2C_WaitOnFlagUntilTimeout>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00d      	beq.n	8004e2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e1e:	d103      	bne.n	8004e28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e013      	b.n	8004e54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e2c:	897b      	ldrh	r3, [r7, #10]
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	f043 0301 	orr.w	r3, r3, #1
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3e:	6a3a      	ldr	r2, [r7, #32]
 8004e40:	4906      	ldr	r1, [pc, #24]	@ (8004e5c <I2C_RequestMemoryRead+0x1cc>)
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 f886 	bl	8004f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e000      	b.n	8004e54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	00010002 	.word	0x00010002

08004e60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	603b      	str	r3, [r7, #0]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e70:	e048      	b.n	8004f04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e78:	d044      	beq.n	8004f04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e7a:	f7fd fc81 	bl	8002780 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d302      	bcc.n	8004e90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d139      	bne.n	8004f04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	0c1b      	lsrs	r3, r3, #16
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d10d      	bne.n	8004eb6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	43da      	mvns	r2, r3
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	bf0c      	ite	eq
 8004eac:	2301      	moveq	r3, #1
 8004eae:	2300      	movne	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	e00c      	b.n	8004ed0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	43da      	mvns	r2, r3
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	bf0c      	ite	eq
 8004ec8:	2301      	moveq	r3, #1
 8004eca:	2300      	movne	r3, #0
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	461a      	mov	r2, r3
 8004ed0:	79fb      	ldrb	r3, [r7, #7]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d116      	bne.n	8004f04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef0:	f043 0220 	orr.w	r2, r3, #32
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e023      	b.n	8004f4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	0c1b      	lsrs	r3, r3, #16
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d10d      	bne.n	8004f2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	43da      	mvns	r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	bf0c      	ite	eq
 8004f20:	2301      	moveq	r3, #1
 8004f22:	2300      	movne	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	461a      	mov	r2, r3
 8004f28:	e00c      	b.n	8004f44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	43da      	mvns	r2, r3
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	4013      	ands	r3, r2
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	bf0c      	ite	eq
 8004f3c:	2301      	moveq	r3, #1
 8004f3e:	2300      	movne	r3, #0
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	461a      	mov	r2, r3
 8004f44:	79fb      	ldrb	r3, [r7, #7]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d093      	beq.n	8004e72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
 8004f60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f62:	e071      	b.n	8005048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f72:	d123      	bne.n	8004fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa8:	f043 0204 	orr.w	r2, r3, #4
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e067      	b.n	800508c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fc2:	d041      	beq.n	8005048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc4:	f7fd fbdc 	bl	8002780 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d302      	bcc.n	8004fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d136      	bne.n	8005048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	0c1b      	lsrs	r3, r3, #16
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d10c      	bne.n	8004ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	43da      	mvns	r2, r3
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	bf14      	ite	ne
 8004ff6:	2301      	movne	r3, #1
 8004ff8:	2300      	moveq	r3, #0
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	e00b      	b.n	8005016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	43da      	mvns	r2, r3
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	4013      	ands	r3, r2
 800500a:	b29b      	uxth	r3, r3
 800500c:	2b00      	cmp	r3, #0
 800500e:	bf14      	ite	ne
 8005010:	2301      	movne	r3, #1
 8005012:	2300      	moveq	r3, #0
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d016      	beq.n	8005048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005034:	f043 0220 	orr.w	r2, r3, #32
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e021      	b.n	800508c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	0c1b      	lsrs	r3, r3, #16
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b01      	cmp	r3, #1
 8005050:	d10c      	bne.n	800506c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	43da      	mvns	r2, r3
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	4013      	ands	r3, r2
 800505e:	b29b      	uxth	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	bf14      	ite	ne
 8005064:	2301      	movne	r3, #1
 8005066:	2300      	moveq	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	e00b      	b.n	8005084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	43da      	mvns	r2, r3
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	4013      	ands	r3, r2
 8005078:	b29b      	uxth	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	bf14      	ite	ne
 800507e:	2301      	movne	r3, #1
 8005080:	2300      	moveq	r3, #0
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	f47f af6d 	bne.w	8004f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050a0:	e034      	b.n	800510c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 f8e3 	bl	800526e <I2C_IsAcknowledgeFailed>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e034      	b.n	800511c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050b8:	d028      	beq.n	800510c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ba:	f7fd fb61 	bl	8002780 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d302      	bcc.n	80050d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d11d      	bne.n	800510c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050da:	2b80      	cmp	r3, #128	@ 0x80
 80050dc:	d016      	beq.n	800510c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f8:	f043 0220 	orr.w	r2, r3, #32
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e007      	b.n	800511c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005116:	2b80      	cmp	r3, #128	@ 0x80
 8005118:	d1c3      	bne.n	80050a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005130:	e034      	b.n	800519c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 f89b 	bl	800526e <I2C_IsAcknowledgeFailed>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e034      	b.n	80051ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005148:	d028      	beq.n	800519c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800514a:	f7fd fb19 	bl	8002780 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	429a      	cmp	r2, r3
 8005158:	d302      	bcc.n	8005160 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d11d      	bne.n	800519c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	f003 0304 	and.w	r3, r3, #4
 800516a:	2b04      	cmp	r3, #4
 800516c:	d016      	beq.n	800519c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005188:	f043 0220 	orr.w	r2, r3, #32
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e007      	b.n	80051ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d1c3      	bne.n	8005132 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051c0:	e049      	b.n	8005256 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	f003 0310 	and.w	r3, r3, #16
 80051cc:	2b10      	cmp	r3, #16
 80051ce:	d119      	bne.n	8005204 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f06f 0210 	mvn.w	r2, #16
 80051d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2220      	movs	r2, #32
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e030      	b.n	8005266 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005204:	f7fd fabc 	bl	8002780 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	429a      	cmp	r2, r3
 8005212:	d302      	bcc.n	800521a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d11d      	bne.n	8005256 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005224:	2b40      	cmp	r3, #64	@ 0x40
 8005226:	d016      	beq.n	8005256 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2220      	movs	r2, #32
 8005232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005242:	f043 0220 	orr.w	r2, r3, #32
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e007      	b.n	8005266 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005260:	2b40      	cmp	r3, #64	@ 0x40
 8005262:	d1ae      	bne.n	80051c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800526e:	b480      	push	{r7}
 8005270:	b083      	sub	sp, #12
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005284:	d11b      	bne.n	80052be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800528e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2220      	movs	r2, #32
 800529a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052aa:	f043 0204 	orr.w	r2, r3, #4
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e000      	b.n	80052c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0cc      	b.n	800547a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052e0:	4b68      	ldr	r3, [pc, #416]	@ (8005484 <HAL_RCC_ClockConfig+0x1b8>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 030f 	and.w	r3, r3, #15
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d90c      	bls.n	8005308 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ee:	4b65      	ldr	r3, [pc, #404]	@ (8005484 <HAL_RCC_ClockConfig+0x1b8>)
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052f6:	4b63      	ldr	r3, [pc, #396]	@ (8005484 <HAL_RCC_ClockConfig+0x1b8>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 030f 	and.w	r3, r3, #15
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	429a      	cmp	r2, r3
 8005302:	d001      	beq.n	8005308 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e0b8      	b.n	800547a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d020      	beq.n	8005356 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b00      	cmp	r3, #0
 800531e:	d005      	beq.n	800532c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005320:	4b59      	ldr	r3, [pc, #356]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	4a58      	ldr	r2, [pc, #352]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 8005326:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800532a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	2b00      	cmp	r3, #0
 8005336:	d005      	beq.n	8005344 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005338:	4b53      	ldr	r3, [pc, #332]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	4a52      	ldr	r2, [pc, #328]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 800533e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005342:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005344:	4b50      	ldr	r3, [pc, #320]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	494d      	ldr	r1, [pc, #308]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 8005352:	4313      	orrs	r3, r2
 8005354:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d044      	beq.n	80053ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d107      	bne.n	800537a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800536a:	4b47      	ldr	r3, [pc, #284]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d119      	bne.n	80053aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e07f      	b.n	800547a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	2b02      	cmp	r3, #2
 8005380:	d003      	beq.n	800538a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005386:	2b03      	cmp	r3, #3
 8005388:	d107      	bne.n	800539a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800538a:	4b3f      	ldr	r3, [pc, #252]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d109      	bne.n	80053aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e06f      	b.n	800547a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800539a:	4b3b      	ldr	r3, [pc, #236]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e067      	b.n	800547a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053aa:	4b37      	ldr	r3, [pc, #220]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f023 0203 	bic.w	r2, r3, #3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	4934      	ldr	r1, [pc, #208]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053bc:	f7fd f9e0 	bl	8002780 <HAL_GetTick>
 80053c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053c2:	e00a      	b.n	80053da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053c4:	f7fd f9dc 	bl	8002780 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e04f      	b.n	800547a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053da:	4b2b      	ldr	r3, [pc, #172]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 020c 	and.w	r2, r3, #12
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d1eb      	bne.n	80053c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053ec:	4b25      	ldr	r3, [pc, #148]	@ (8005484 <HAL_RCC_ClockConfig+0x1b8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 030f 	and.w	r3, r3, #15
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d20c      	bcs.n	8005414 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053fa:	4b22      	ldr	r3, [pc, #136]	@ (8005484 <HAL_RCC_ClockConfig+0x1b8>)
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005402:	4b20      	ldr	r3, [pc, #128]	@ (8005484 <HAL_RCC_ClockConfig+0x1b8>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 030f 	and.w	r3, r3, #15
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	429a      	cmp	r2, r3
 800540e:	d001      	beq.n	8005414 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e032      	b.n	800547a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b00      	cmp	r3, #0
 800541e:	d008      	beq.n	8005432 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005420:	4b19      	ldr	r3, [pc, #100]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	4916      	ldr	r1, [pc, #88]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 800542e:	4313      	orrs	r3, r2
 8005430:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0308 	and.w	r3, r3, #8
 800543a:	2b00      	cmp	r3, #0
 800543c:	d009      	beq.n	8005452 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800543e:	4b12      	ldr	r3, [pc, #72]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	490e      	ldr	r1, [pc, #56]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 800544e:	4313      	orrs	r3, r2
 8005450:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005452:	f000 f855 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 8005456:	4602      	mov	r2, r0
 8005458:	4b0b      	ldr	r3, [pc, #44]	@ (8005488 <HAL_RCC_ClockConfig+0x1bc>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	091b      	lsrs	r3, r3, #4
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	490a      	ldr	r1, [pc, #40]	@ (800548c <HAL_RCC_ClockConfig+0x1c0>)
 8005464:	5ccb      	ldrb	r3, [r1, r3]
 8005466:	fa22 f303 	lsr.w	r3, r2, r3
 800546a:	4a09      	ldr	r2, [pc, #36]	@ (8005490 <HAL_RCC_ClockConfig+0x1c4>)
 800546c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800546e:	4b09      	ldr	r3, [pc, #36]	@ (8005494 <HAL_RCC_ClockConfig+0x1c8>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4618      	mov	r0, r3
 8005474:	f7fd f940 	bl	80026f8 <HAL_InitTick>

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	40023c00 	.word	0x40023c00
 8005488:	40023800 	.word	0x40023800
 800548c:	0800c708 	.word	0x0800c708
 8005490:	20000000 	.word	0x20000000
 8005494:	20000004 	.word	0x20000004

08005498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005498:	b480      	push	{r7}
 800549a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800549c:	4b03      	ldr	r3, [pc, #12]	@ (80054ac <HAL_RCC_GetHCLKFreq+0x14>)
 800549e:	681b      	ldr	r3, [r3, #0]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	20000000 	.word	0x20000000

080054b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054b4:	f7ff fff0 	bl	8005498 <HAL_RCC_GetHCLKFreq>
 80054b8:	4602      	mov	r2, r0
 80054ba:	4b05      	ldr	r3, [pc, #20]	@ (80054d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	0a9b      	lsrs	r3, r3, #10
 80054c0:	f003 0307 	and.w	r3, r3, #7
 80054c4:	4903      	ldr	r1, [pc, #12]	@ (80054d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054c6:	5ccb      	ldrb	r3, [r1, r3]
 80054c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40023800 	.word	0x40023800
 80054d4:	0800c718 	.word	0x0800c718

080054d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054dc:	f7ff ffdc 	bl	8005498 <HAL_RCC_GetHCLKFreq>
 80054e0:	4602      	mov	r2, r0
 80054e2:	4b05      	ldr	r3, [pc, #20]	@ (80054f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	0b5b      	lsrs	r3, r3, #13
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	4903      	ldr	r1, [pc, #12]	@ (80054fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80054ee:	5ccb      	ldrb	r3, [r1, r3]
 80054f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	40023800 	.word	0x40023800
 80054fc:	0800c718 	.word	0x0800c718

08005500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005504:	b0ae      	sub	sp, #184	@ 0xb8
 8005506:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005526:	4bcb      	ldr	r3, [pc, #812]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x354>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 030c 	and.w	r3, r3, #12
 800552e:	2b0c      	cmp	r3, #12
 8005530:	f200 8206 	bhi.w	8005940 <HAL_RCC_GetSysClockFreq+0x440>
 8005534:	a201      	add	r2, pc, #4	@ (adr r2, 800553c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553a:	bf00      	nop
 800553c:	08005571 	.word	0x08005571
 8005540:	08005941 	.word	0x08005941
 8005544:	08005941 	.word	0x08005941
 8005548:	08005941 	.word	0x08005941
 800554c:	08005579 	.word	0x08005579
 8005550:	08005941 	.word	0x08005941
 8005554:	08005941 	.word	0x08005941
 8005558:	08005941 	.word	0x08005941
 800555c:	08005581 	.word	0x08005581
 8005560:	08005941 	.word	0x08005941
 8005564:	08005941 	.word	0x08005941
 8005568:	08005941 	.word	0x08005941
 800556c:	08005771 	.word	0x08005771
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005570:	4bb9      	ldr	r3, [pc, #740]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x358>)
 8005572:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005576:	e1e7      	b.n	8005948 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005578:	4bb8      	ldr	r3, [pc, #736]	@ (800585c <HAL_RCC_GetSysClockFreq+0x35c>)
 800557a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800557e:	e1e3      	b.n	8005948 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005580:	4bb4      	ldr	r3, [pc, #720]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x354>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005588:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800558c:	4bb1      	ldr	r3, [pc, #708]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x354>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d071      	beq.n	800567c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005598:	4bae      	ldr	r3, [pc, #696]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x354>)
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	099b      	lsrs	r3, r3, #6
 800559e:	2200      	movs	r2, #0
 80055a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055a4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80055a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80055ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055b4:	2300      	movs	r3, #0
 80055b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80055be:	4622      	mov	r2, r4
 80055c0:	462b      	mov	r3, r5
 80055c2:	f04f 0000 	mov.w	r0, #0
 80055c6:	f04f 0100 	mov.w	r1, #0
 80055ca:	0159      	lsls	r1, r3, #5
 80055cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055d0:	0150      	lsls	r0, r2, #5
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4621      	mov	r1, r4
 80055d8:	1a51      	subs	r1, r2, r1
 80055da:	6439      	str	r1, [r7, #64]	@ 0x40
 80055dc:	4629      	mov	r1, r5
 80055de:	eb63 0301 	sbc.w	r3, r3, r1
 80055e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80055f0:	4649      	mov	r1, r9
 80055f2:	018b      	lsls	r3, r1, #6
 80055f4:	4641      	mov	r1, r8
 80055f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055fa:	4641      	mov	r1, r8
 80055fc:	018a      	lsls	r2, r1, #6
 80055fe:	4641      	mov	r1, r8
 8005600:	1a51      	subs	r1, r2, r1
 8005602:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005604:	4649      	mov	r1, r9
 8005606:	eb63 0301 	sbc.w	r3, r3, r1
 800560a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800560c:	f04f 0200 	mov.w	r2, #0
 8005610:	f04f 0300 	mov.w	r3, #0
 8005614:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005618:	4649      	mov	r1, r9
 800561a:	00cb      	lsls	r3, r1, #3
 800561c:	4641      	mov	r1, r8
 800561e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005622:	4641      	mov	r1, r8
 8005624:	00ca      	lsls	r2, r1, #3
 8005626:	4610      	mov	r0, r2
 8005628:	4619      	mov	r1, r3
 800562a:	4603      	mov	r3, r0
 800562c:	4622      	mov	r2, r4
 800562e:	189b      	adds	r3, r3, r2
 8005630:	633b      	str	r3, [r7, #48]	@ 0x30
 8005632:	462b      	mov	r3, r5
 8005634:	460a      	mov	r2, r1
 8005636:	eb42 0303 	adc.w	r3, r2, r3
 800563a:	637b      	str	r3, [r7, #52]	@ 0x34
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005648:	4629      	mov	r1, r5
 800564a:	024b      	lsls	r3, r1, #9
 800564c:	4621      	mov	r1, r4
 800564e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005652:	4621      	mov	r1, r4
 8005654:	024a      	lsls	r2, r1, #9
 8005656:	4610      	mov	r0, r2
 8005658:	4619      	mov	r1, r3
 800565a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800565e:	2200      	movs	r2, #0
 8005660:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005664:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005668:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800566c:	f7fb fb2c 	bl	8000cc8 <__aeabi_uldivmod>
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	4613      	mov	r3, r2
 8005676:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800567a:	e067      	b.n	800574c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800567c:	4b75      	ldr	r3, [pc, #468]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x354>)
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	099b      	lsrs	r3, r3, #6
 8005682:	2200      	movs	r2, #0
 8005684:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005688:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800568c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005694:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005696:	2300      	movs	r3, #0
 8005698:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800569a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800569e:	4622      	mov	r2, r4
 80056a0:	462b      	mov	r3, r5
 80056a2:	f04f 0000 	mov.w	r0, #0
 80056a6:	f04f 0100 	mov.w	r1, #0
 80056aa:	0159      	lsls	r1, r3, #5
 80056ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056b0:	0150      	lsls	r0, r2, #5
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	4621      	mov	r1, r4
 80056b8:	1a51      	subs	r1, r2, r1
 80056ba:	62b9      	str	r1, [r7, #40]	@ 0x28
 80056bc:	4629      	mov	r1, r5
 80056be:	eb63 0301 	sbc.w	r3, r3, r1
 80056c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056c4:	f04f 0200 	mov.w	r2, #0
 80056c8:	f04f 0300 	mov.w	r3, #0
 80056cc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80056d0:	4649      	mov	r1, r9
 80056d2:	018b      	lsls	r3, r1, #6
 80056d4:	4641      	mov	r1, r8
 80056d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056da:	4641      	mov	r1, r8
 80056dc:	018a      	lsls	r2, r1, #6
 80056de:	4641      	mov	r1, r8
 80056e0:	ebb2 0a01 	subs.w	sl, r2, r1
 80056e4:	4649      	mov	r1, r9
 80056e6:	eb63 0b01 	sbc.w	fp, r3, r1
 80056ea:	f04f 0200 	mov.w	r2, #0
 80056ee:	f04f 0300 	mov.w	r3, #0
 80056f2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056f6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056fe:	4692      	mov	sl, r2
 8005700:	469b      	mov	fp, r3
 8005702:	4623      	mov	r3, r4
 8005704:	eb1a 0303 	adds.w	r3, sl, r3
 8005708:	623b      	str	r3, [r7, #32]
 800570a:	462b      	mov	r3, r5
 800570c:	eb4b 0303 	adc.w	r3, fp, r3
 8005710:	627b      	str	r3, [r7, #36]	@ 0x24
 8005712:	f04f 0200 	mov.w	r2, #0
 8005716:	f04f 0300 	mov.w	r3, #0
 800571a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800571e:	4629      	mov	r1, r5
 8005720:	028b      	lsls	r3, r1, #10
 8005722:	4621      	mov	r1, r4
 8005724:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005728:	4621      	mov	r1, r4
 800572a:	028a      	lsls	r2, r1, #10
 800572c:	4610      	mov	r0, r2
 800572e:	4619      	mov	r1, r3
 8005730:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005734:	2200      	movs	r2, #0
 8005736:	673b      	str	r3, [r7, #112]	@ 0x70
 8005738:	677a      	str	r2, [r7, #116]	@ 0x74
 800573a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800573e:	f7fb fac3 	bl	8000cc8 <__aeabi_uldivmod>
 8005742:	4602      	mov	r2, r0
 8005744:	460b      	mov	r3, r1
 8005746:	4613      	mov	r3, r2
 8005748:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800574c:	4b41      	ldr	r3, [pc, #260]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x354>)
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	0c1b      	lsrs	r3, r3, #16
 8005752:	f003 0303 	and.w	r3, r3, #3
 8005756:	3301      	adds	r3, #1
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800575e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005762:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005766:	fbb2 f3f3 	udiv	r3, r2, r3
 800576a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800576e:	e0eb      	b.n	8005948 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005770:	4b38      	ldr	r3, [pc, #224]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x354>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005778:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800577c:	4b35      	ldr	r3, [pc, #212]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x354>)
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d06b      	beq.n	8005860 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005788:	4b32      	ldr	r3, [pc, #200]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x354>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	099b      	lsrs	r3, r3, #6
 800578e:	2200      	movs	r2, #0
 8005790:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005792:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005794:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800579a:	663b      	str	r3, [r7, #96]	@ 0x60
 800579c:	2300      	movs	r3, #0
 800579e:	667b      	str	r3, [r7, #100]	@ 0x64
 80057a0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80057a4:	4622      	mov	r2, r4
 80057a6:	462b      	mov	r3, r5
 80057a8:	f04f 0000 	mov.w	r0, #0
 80057ac:	f04f 0100 	mov.w	r1, #0
 80057b0:	0159      	lsls	r1, r3, #5
 80057b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057b6:	0150      	lsls	r0, r2, #5
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4621      	mov	r1, r4
 80057be:	1a51      	subs	r1, r2, r1
 80057c0:	61b9      	str	r1, [r7, #24]
 80057c2:	4629      	mov	r1, r5
 80057c4:	eb63 0301 	sbc.w	r3, r3, r1
 80057c8:	61fb      	str	r3, [r7, #28]
 80057ca:	f04f 0200 	mov.w	r2, #0
 80057ce:	f04f 0300 	mov.w	r3, #0
 80057d2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80057d6:	4659      	mov	r1, fp
 80057d8:	018b      	lsls	r3, r1, #6
 80057da:	4651      	mov	r1, sl
 80057dc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057e0:	4651      	mov	r1, sl
 80057e2:	018a      	lsls	r2, r1, #6
 80057e4:	4651      	mov	r1, sl
 80057e6:	ebb2 0801 	subs.w	r8, r2, r1
 80057ea:	4659      	mov	r1, fp
 80057ec:	eb63 0901 	sbc.w	r9, r3, r1
 80057f0:	f04f 0200 	mov.w	r2, #0
 80057f4:	f04f 0300 	mov.w	r3, #0
 80057f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005800:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005804:	4690      	mov	r8, r2
 8005806:	4699      	mov	r9, r3
 8005808:	4623      	mov	r3, r4
 800580a:	eb18 0303 	adds.w	r3, r8, r3
 800580e:	613b      	str	r3, [r7, #16]
 8005810:	462b      	mov	r3, r5
 8005812:	eb49 0303 	adc.w	r3, r9, r3
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005824:	4629      	mov	r1, r5
 8005826:	024b      	lsls	r3, r1, #9
 8005828:	4621      	mov	r1, r4
 800582a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800582e:	4621      	mov	r1, r4
 8005830:	024a      	lsls	r2, r1, #9
 8005832:	4610      	mov	r0, r2
 8005834:	4619      	mov	r1, r3
 8005836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800583a:	2200      	movs	r2, #0
 800583c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800583e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005840:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005844:	f7fb fa40 	bl	8000cc8 <__aeabi_uldivmod>
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	4613      	mov	r3, r2
 800584e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005852:	e065      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0x420>
 8005854:	40023800 	.word	0x40023800
 8005858:	00f42400 	.word	0x00f42400
 800585c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005860:	4b3d      	ldr	r3, [pc, #244]	@ (8005958 <HAL_RCC_GetSysClockFreq+0x458>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	099b      	lsrs	r3, r3, #6
 8005866:	2200      	movs	r2, #0
 8005868:	4618      	mov	r0, r3
 800586a:	4611      	mov	r1, r2
 800586c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005870:	653b      	str	r3, [r7, #80]	@ 0x50
 8005872:	2300      	movs	r3, #0
 8005874:	657b      	str	r3, [r7, #84]	@ 0x54
 8005876:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800587a:	4642      	mov	r2, r8
 800587c:	464b      	mov	r3, r9
 800587e:	f04f 0000 	mov.w	r0, #0
 8005882:	f04f 0100 	mov.w	r1, #0
 8005886:	0159      	lsls	r1, r3, #5
 8005888:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800588c:	0150      	lsls	r0, r2, #5
 800588e:	4602      	mov	r2, r0
 8005890:	460b      	mov	r3, r1
 8005892:	4641      	mov	r1, r8
 8005894:	1a51      	subs	r1, r2, r1
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	4649      	mov	r1, r9
 800589a:	eb63 0301 	sbc.w	r3, r3, r1
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80058ac:	4659      	mov	r1, fp
 80058ae:	018b      	lsls	r3, r1, #6
 80058b0:	4651      	mov	r1, sl
 80058b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058b6:	4651      	mov	r1, sl
 80058b8:	018a      	lsls	r2, r1, #6
 80058ba:	4651      	mov	r1, sl
 80058bc:	1a54      	subs	r4, r2, r1
 80058be:	4659      	mov	r1, fp
 80058c0:	eb63 0501 	sbc.w	r5, r3, r1
 80058c4:	f04f 0200 	mov.w	r2, #0
 80058c8:	f04f 0300 	mov.w	r3, #0
 80058cc:	00eb      	lsls	r3, r5, #3
 80058ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058d2:	00e2      	lsls	r2, r4, #3
 80058d4:	4614      	mov	r4, r2
 80058d6:	461d      	mov	r5, r3
 80058d8:	4643      	mov	r3, r8
 80058da:	18e3      	adds	r3, r4, r3
 80058dc:	603b      	str	r3, [r7, #0]
 80058de:	464b      	mov	r3, r9
 80058e0:	eb45 0303 	adc.w	r3, r5, r3
 80058e4:	607b      	str	r3, [r7, #4]
 80058e6:	f04f 0200 	mov.w	r2, #0
 80058ea:	f04f 0300 	mov.w	r3, #0
 80058ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058f2:	4629      	mov	r1, r5
 80058f4:	028b      	lsls	r3, r1, #10
 80058f6:	4621      	mov	r1, r4
 80058f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058fc:	4621      	mov	r1, r4
 80058fe:	028a      	lsls	r2, r1, #10
 8005900:	4610      	mov	r0, r2
 8005902:	4619      	mov	r1, r3
 8005904:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005908:	2200      	movs	r2, #0
 800590a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800590c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800590e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005912:	f7fb f9d9 	bl	8000cc8 <__aeabi_uldivmod>
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	4613      	mov	r3, r2
 800591c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005920:	4b0d      	ldr	r3, [pc, #52]	@ (8005958 <HAL_RCC_GetSysClockFreq+0x458>)
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	0f1b      	lsrs	r3, r3, #28
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800592e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005932:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005936:	fbb2 f3f3 	udiv	r3, r2, r3
 800593a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800593e:	e003      	b.n	8005948 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005940:	4b06      	ldr	r3, [pc, #24]	@ (800595c <HAL_RCC_GetSysClockFreq+0x45c>)
 8005942:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005946:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005948:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800594c:	4618      	mov	r0, r3
 800594e:	37b8      	adds	r7, #184	@ 0xb8
 8005950:	46bd      	mov	sp, r7
 8005952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005956:	bf00      	nop
 8005958:	40023800 	.word	0x40023800
 800595c:	00f42400 	.word	0x00f42400

08005960 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e28d      	b.n	8005e8e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 8083 	beq.w	8005a86 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005980:	4b94      	ldr	r3, [pc, #592]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 030c 	and.w	r3, r3, #12
 8005988:	2b04      	cmp	r3, #4
 800598a:	d019      	beq.n	80059c0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800598c:	4b91      	ldr	r3, [pc, #580]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f003 030c 	and.w	r3, r3, #12
        || \
 8005994:	2b08      	cmp	r3, #8
 8005996:	d106      	bne.n	80059a6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005998:	4b8e      	ldr	r3, [pc, #568]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059a4:	d00c      	beq.n	80059c0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059a6:	4b8b      	ldr	r3, [pc, #556]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80059ae:	2b0c      	cmp	r3, #12
 80059b0:	d112      	bne.n	80059d8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059b2:	4b88      	ldr	r3, [pc, #544]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059be:	d10b      	bne.n	80059d8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059c0:	4b84      	ldr	r3, [pc, #528]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d05b      	beq.n	8005a84 <HAL_RCC_OscConfig+0x124>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d157      	bne.n	8005a84 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e25a      	b.n	8005e8e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059e0:	d106      	bne.n	80059f0 <HAL_RCC_OscConfig+0x90>
 80059e2:	4b7c      	ldr	r3, [pc, #496]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a7b      	ldr	r2, [pc, #492]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 80059e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	e01d      	b.n	8005a2c <HAL_RCC_OscConfig+0xcc>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059f8:	d10c      	bne.n	8005a14 <HAL_RCC_OscConfig+0xb4>
 80059fa:	4b76      	ldr	r3, [pc, #472]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a75      	ldr	r2, [pc, #468]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 8005a00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a04:	6013      	str	r3, [r2, #0]
 8005a06:	4b73      	ldr	r3, [pc, #460]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a72      	ldr	r2, [pc, #456]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 8005a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	e00b      	b.n	8005a2c <HAL_RCC_OscConfig+0xcc>
 8005a14:	4b6f      	ldr	r3, [pc, #444]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a6e      	ldr	r2, [pc, #440]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 8005a1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a1e:	6013      	str	r3, [r2, #0]
 8005a20:	4b6c      	ldr	r3, [pc, #432]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a6b      	ldr	r2, [pc, #428]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 8005a26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d013      	beq.n	8005a5c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a34:	f7fc fea4 	bl	8002780 <HAL_GetTick>
 8005a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a3c:	f7fc fea0 	bl	8002780 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b64      	cmp	r3, #100	@ 0x64
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e21f      	b.n	8005e8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a4e:	4b61      	ldr	r3, [pc, #388]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0f0      	beq.n	8005a3c <HAL_RCC_OscConfig+0xdc>
 8005a5a:	e014      	b.n	8005a86 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a5c:	f7fc fe90 	bl	8002780 <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a62:	e008      	b.n	8005a76 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a64:	f7fc fe8c 	bl	8002780 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b64      	cmp	r3, #100	@ 0x64
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e20b      	b.n	8005e8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a76:	4b57      	ldr	r3, [pc, #348]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1f0      	bne.n	8005a64 <HAL_RCC_OscConfig+0x104>
 8005a82:	e000      	b.n	8005a86 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d06f      	beq.n	8005b72 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005a92:	4b50      	ldr	r3, [pc, #320]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f003 030c 	and.w	r3, r3, #12
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d017      	beq.n	8005ace <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005a9e:	4b4d      	ldr	r3, [pc, #308]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 030c 	and.w	r3, r3, #12
        || \
 8005aa6:	2b08      	cmp	r3, #8
 8005aa8:	d105      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00b      	beq.n	8005ace <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ab6:	4b47      	ldr	r3, [pc, #284]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005abe:	2b0c      	cmp	r3, #12
 8005ac0:	d11c      	bne.n	8005afc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ac2:	4b44      	ldr	r3, [pc, #272]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d116      	bne.n	8005afc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ace:	4b41      	ldr	r3, [pc, #260]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d005      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x186>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d001      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e1d3      	b.n	8005e8e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	4937      	ldr	r1, [pc, #220]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005afa:	e03a      	b.n	8005b72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d020      	beq.n	8005b46 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b04:	4b34      	ldr	r3, [pc, #208]	@ (8005bd8 <HAL_RCC_OscConfig+0x278>)
 8005b06:	2201      	movs	r2, #1
 8005b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0a:	f7fc fe39 	bl	8002780 <HAL_GetTick>
 8005b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b10:	e008      	b.n	8005b24 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b12:	f7fc fe35 	bl	8002780 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e1b4      	b.n	8005e8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b24:	4b2b      	ldr	r3, [pc, #172]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0f0      	beq.n	8005b12 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b30:	4b28      	ldr	r3, [pc, #160]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	4925      	ldr	r1, [pc, #148]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	600b      	str	r3, [r1, #0]
 8005b44:	e015      	b.n	8005b72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b46:	4b24      	ldr	r3, [pc, #144]	@ (8005bd8 <HAL_RCC_OscConfig+0x278>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b4c:	f7fc fe18 	bl	8002780 <HAL_GetTick>
 8005b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b52:	e008      	b.n	8005b66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b54:	f7fc fe14 	bl	8002780 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e193      	b.n	8005e8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b66:	4b1b      	ldr	r3, [pc, #108]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1f0      	bne.n	8005b54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0308 	and.w	r3, r3, #8
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d036      	beq.n	8005bec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d016      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b86:	4b15      	ldr	r3, [pc, #84]	@ (8005bdc <HAL_RCC_OscConfig+0x27c>)
 8005b88:	2201      	movs	r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b8c:	f7fc fdf8 	bl	8002780 <HAL_GetTick>
 8005b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b92:	e008      	b.n	8005ba6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b94:	f7fc fdf4 	bl	8002780 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e173      	b.n	8005e8e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd4 <HAL_RCC_OscConfig+0x274>)
 8005ba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0f0      	beq.n	8005b94 <HAL_RCC_OscConfig+0x234>
 8005bb2:	e01b      	b.n	8005bec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bb4:	4b09      	ldr	r3, [pc, #36]	@ (8005bdc <HAL_RCC_OscConfig+0x27c>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bba:	f7fc fde1 	bl	8002780 <HAL_GetTick>
 8005bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bc0:	e00e      	b.n	8005be0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bc2:	f7fc fddd 	bl	8002780 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d907      	bls.n	8005be0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e15c      	b.n	8005e8e <HAL_RCC_OscConfig+0x52e>
 8005bd4:	40023800 	.word	0x40023800
 8005bd8:	42470000 	.word	0x42470000
 8005bdc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005be0:	4b8a      	ldr	r3, [pc, #552]	@ (8005e0c <HAL_RCC_OscConfig+0x4ac>)
 8005be2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1ea      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 8097 	beq.w	8005d28 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bfe:	4b83      	ldr	r3, [pc, #524]	@ (8005e0c <HAL_RCC_OscConfig+0x4ac>)
 8005c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10f      	bne.n	8005c2a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60bb      	str	r3, [r7, #8]
 8005c0e:	4b7f      	ldr	r3, [pc, #508]	@ (8005e0c <HAL_RCC_OscConfig+0x4ac>)
 8005c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c12:	4a7e      	ldr	r2, [pc, #504]	@ (8005e0c <HAL_RCC_OscConfig+0x4ac>)
 8005c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c1a:	4b7c      	ldr	r3, [pc, #496]	@ (8005e0c <HAL_RCC_OscConfig+0x4ac>)
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c22:	60bb      	str	r3, [r7, #8]
 8005c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c26:	2301      	movs	r3, #1
 8005c28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c2a:	4b79      	ldr	r3, [pc, #484]	@ (8005e10 <HAL_RCC_OscConfig+0x4b0>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d118      	bne.n	8005c68 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c36:	4b76      	ldr	r3, [pc, #472]	@ (8005e10 <HAL_RCC_OscConfig+0x4b0>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a75      	ldr	r2, [pc, #468]	@ (8005e10 <HAL_RCC_OscConfig+0x4b0>)
 8005c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c42:	f7fc fd9d 	bl	8002780 <HAL_GetTick>
 8005c46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c48:	e008      	b.n	8005c5c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c4a:	f7fc fd99 	bl	8002780 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d901      	bls.n	8005c5c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e118      	b.n	8005e8e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c5c:	4b6c      	ldr	r3, [pc, #432]	@ (8005e10 <HAL_RCC_OscConfig+0x4b0>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d0f0      	beq.n	8005c4a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d106      	bne.n	8005c7e <HAL_RCC_OscConfig+0x31e>
 8005c70:	4b66      	ldr	r3, [pc, #408]	@ (8005e0c <HAL_RCC_OscConfig+0x4ac>)
 8005c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c74:	4a65      	ldr	r2, [pc, #404]	@ (8005e0c <HAL_RCC_OscConfig+0x4ac>)
 8005c76:	f043 0301 	orr.w	r3, r3, #1
 8005c7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c7c:	e01c      	b.n	8005cb8 <HAL_RCC_OscConfig+0x358>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	2b05      	cmp	r3, #5
 8005c84:	d10c      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x340>
 8005c86:	4b61      	ldr	r3, [pc, #388]	@ (8005e0c <HAL_RCC_OscConfig+0x4ac>)
 8005c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c8a:	4a60      	ldr	r2, [pc, #384]	@ (8005e0c <HAL_RCC_OscConfig+0x4ac>)
 8005c8c:	f043 0304 	orr.w	r3, r3, #4
 8005c90:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c92:	4b5e      	ldr	r3, [pc, #376]	@ (8005e0c <HAL_RCC_OscConfig+0x4ac>)
 8005c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c96:	4a5d      	ldr	r2, [pc, #372]	@ (8005e0c <HAL_RCC_OscConfig+0x4ac>)
 8005c98:	f043 0301 	orr.w	r3, r3, #1
 8005c9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c9e:	e00b      	b.n	8005cb8 <HAL_RCC_OscConfig+0x358>
 8005ca0:	4b5a      	ldr	r3, [pc, #360]	@ (8005e0c <HAL_RCC_OscConfig+0x4ac>)
 8005ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ca4:	4a59      	ldr	r2, [pc, #356]	@ (8005e0c <HAL_RCC_OscConfig+0x4ac>)
 8005ca6:	f023 0301 	bic.w	r3, r3, #1
 8005caa:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cac:	4b57      	ldr	r3, [pc, #348]	@ (8005e0c <HAL_RCC_OscConfig+0x4ac>)
 8005cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cb0:	4a56      	ldr	r2, [pc, #344]	@ (8005e0c <HAL_RCC_OscConfig+0x4ac>)
 8005cb2:	f023 0304 	bic.w	r3, r3, #4
 8005cb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d015      	beq.n	8005cec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc0:	f7fc fd5e 	bl	8002780 <HAL_GetTick>
 8005cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cc6:	e00a      	b.n	8005cde <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cc8:	f7fc fd5a 	bl	8002780 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e0d7      	b.n	8005e8e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cde:	4b4b      	ldr	r3, [pc, #300]	@ (8005e0c <HAL_RCC_OscConfig+0x4ac>)
 8005ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0ee      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x368>
 8005cea:	e014      	b.n	8005d16 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cec:	f7fc fd48 	bl	8002780 <HAL_GetTick>
 8005cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cf2:	e00a      	b.n	8005d0a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cf4:	f7fc fd44 	bl	8002780 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e0c1      	b.n	8005e8e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d0a:	4b40      	ldr	r3, [pc, #256]	@ (8005e0c <HAL_RCC_OscConfig+0x4ac>)
 8005d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1ee      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d16:	7dfb      	ldrb	r3, [r7, #23]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d105      	bne.n	8005d28 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d1c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e0c <HAL_RCC_OscConfig+0x4ac>)
 8005d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d20:	4a3a      	ldr	r2, [pc, #232]	@ (8005e0c <HAL_RCC_OscConfig+0x4ac>)
 8005d22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 80ad 	beq.w	8005e8c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d32:	4b36      	ldr	r3, [pc, #216]	@ (8005e0c <HAL_RCC_OscConfig+0x4ac>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f003 030c 	and.w	r3, r3, #12
 8005d3a:	2b08      	cmp	r3, #8
 8005d3c:	d060      	beq.n	8005e00 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d145      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d46:	4b33      	ldr	r3, [pc, #204]	@ (8005e14 <HAL_RCC_OscConfig+0x4b4>)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d4c:	f7fc fd18 	bl	8002780 <HAL_GetTick>
 8005d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d52:	e008      	b.n	8005d66 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d54:	f7fc fd14 	bl	8002780 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e093      	b.n	8005e8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d66:	4b29      	ldr	r3, [pc, #164]	@ (8005e0c <HAL_RCC_OscConfig+0x4ac>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1f0      	bne.n	8005d54 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69da      	ldr	r2, [r3, #28]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d80:	019b      	lsls	r3, r3, #6
 8005d82:	431a      	orrs	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d88:	085b      	lsrs	r3, r3, #1
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	041b      	lsls	r3, r3, #16
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d94:	061b      	lsls	r3, r3, #24
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d9c:	071b      	lsls	r3, r3, #28
 8005d9e:	491b      	ldr	r1, [pc, #108]	@ (8005e0c <HAL_RCC_OscConfig+0x4ac>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005da4:	4b1b      	ldr	r3, [pc, #108]	@ (8005e14 <HAL_RCC_OscConfig+0x4b4>)
 8005da6:	2201      	movs	r2, #1
 8005da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005daa:	f7fc fce9 	bl	8002780 <HAL_GetTick>
 8005dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005db0:	e008      	b.n	8005dc4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005db2:	f7fc fce5 	bl	8002780 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d901      	bls.n	8005dc4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e064      	b.n	8005e8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dc4:	4b11      	ldr	r3, [pc, #68]	@ (8005e0c <HAL_RCC_OscConfig+0x4ac>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d0f0      	beq.n	8005db2 <HAL_RCC_OscConfig+0x452>
 8005dd0:	e05c      	b.n	8005e8c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dd2:	4b10      	ldr	r3, [pc, #64]	@ (8005e14 <HAL_RCC_OscConfig+0x4b4>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd8:	f7fc fcd2 	bl	8002780 <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005de0:	f7fc fcce 	bl	8002780 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e04d      	b.n	8005e8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005df2:	4b06      	ldr	r3, [pc, #24]	@ (8005e0c <HAL_RCC_OscConfig+0x4ac>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1f0      	bne.n	8005de0 <HAL_RCC_OscConfig+0x480>
 8005dfe:	e045      	b.n	8005e8c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d107      	bne.n	8005e18 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e040      	b.n	8005e8e <HAL_RCC_OscConfig+0x52e>
 8005e0c:	40023800 	.word	0x40023800
 8005e10:	40007000 	.word	0x40007000
 8005e14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e18:	4b1f      	ldr	r3, [pc, #124]	@ (8005e98 <HAL_RCC_OscConfig+0x538>)
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d030      	beq.n	8005e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d129      	bne.n	8005e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d122      	bne.n	8005e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005e48:	4013      	ands	r3, r2
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d119      	bne.n	8005e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5e:	085b      	lsrs	r3, r3, #1
 8005e60:	3b01      	subs	r3, #1
 8005e62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d10f      	bne.n	8005e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d107      	bne.n	8005e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e82:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d001      	beq.n	8005e8c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e000      	b.n	8005e8e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	40023800 	.word	0x40023800

08005e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e041      	b.n	8005f32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d106      	bne.n	8005ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7fc fa9a 	bl	80023fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4610      	mov	r0, r2
 8005edc:	f000 fa7e 	bl	80063dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
	...

08005f3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d001      	beq.n	8005f54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e04e      	b.n	8005ff2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0201 	orr.w	r2, r2, #1
 8005f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a23      	ldr	r2, [pc, #140]	@ (8006000 <HAL_TIM_Base_Start_IT+0xc4>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d022      	beq.n	8005fbc <HAL_TIM_Base_Start_IT+0x80>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f7e:	d01d      	beq.n	8005fbc <HAL_TIM_Base_Start_IT+0x80>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a1f      	ldr	r2, [pc, #124]	@ (8006004 <HAL_TIM_Base_Start_IT+0xc8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d018      	beq.n	8005fbc <HAL_TIM_Base_Start_IT+0x80>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8006008 <HAL_TIM_Base_Start_IT+0xcc>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d013      	beq.n	8005fbc <HAL_TIM_Base_Start_IT+0x80>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a1c      	ldr	r2, [pc, #112]	@ (800600c <HAL_TIM_Base_Start_IT+0xd0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d00e      	beq.n	8005fbc <HAL_TIM_Base_Start_IT+0x80>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8006010 <HAL_TIM_Base_Start_IT+0xd4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d009      	beq.n	8005fbc <HAL_TIM_Base_Start_IT+0x80>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a19      	ldr	r2, [pc, #100]	@ (8006014 <HAL_TIM_Base_Start_IT+0xd8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d004      	beq.n	8005fbc <HAL_TIM_Base_Start_IT+0x80>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a18      	ldr	r2, [pc, #96]	@ (8006018 <HAL_TIM_Base_Start_IT+0xdc>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d111      	bne.n	8005fe0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2b06      	cmp	r3, #6
 8005fcc:	d010      	beq.n	8005ff0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f042 0201 	orr.w	r2, r2, #1
 8005fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fde:	e007      	b.n	8005ff0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f042 0201 	orr.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	40010000 	.word	0x40010000
 8006004:	40000400 	.word	0x40000400
 8006008:	40000800 	.word	0x40000800
 800600c:	40000c00 	.word	0x40000c00
 8006010:	40010400 	.word	0x40010400
 8006014:	40014000 	.word	0x40014000
 8006018:	40001800 	.word	0x40001800

0800601c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d020      	beq.n	8006080 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d01b      	beq.n	8006080 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f06f 0202 	mvn.w	r2, #2
 8006050:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f999 	bl	800639e <HAL_TIM_IC_CaptureCallback>
 800606c:	e005      	b.n	800607a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f98b 	bl	800638a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f99c 	bl	80063b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f003 0304 	and.w	r3, r3, #4
 8006086:	2b00      	cmp	r3, #0
 8006088:	d020      	beq.n	80060cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f003 0304 	and.w	r3, r3, #4
 8006090:	2b00      	cmp	r3, #0
 8006092:	d01b      	beq.n	80060cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f06f 0204 	mvn.w	r2, #4
 800609c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2202      	movs	r2, #2
 80060a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f973 	bl	800639e <HAL_TIM_IC_CaptureCallback>
 80060b8:	e005      	b.n	80060c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f965 	bl	800638a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f976 	bl	80063b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f003 0308 	and.w	r3, r3, #8
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d020      	beq.n	8006118 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f003 0308 	and.w	r3, r3, #8
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d01b      	beq.n	8006118 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f06f 0208 	mvn.w	r2, #8
 80060e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2204      	movs	r2, #4
 80060ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	f003 0303 	and.w	r3, r3, #3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f94d 	bl	800639e <HAL_TIM_IC_CaptureCallback>
 8006104:	e005      	b.n	8006112 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f93f 	bl	800638a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f950 	bl	80063b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f003 0310 	and.w	r3, r3, #16
 800611e:	2b00      	cmp	r3, #0
 8006120:	d020      	beq.n	8006164 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f003 0310 	and.w	r3, r3, #16
 8006128:	2b00      	cmp	r3, #0
 800612a:	d01b      	beq.n	8006164 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f06f 0210 	mvn.w	r2, #16
 8006134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2208      	movs	r2, #8
 800613a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f927 	bl	800639e <HAL_TIM_IC_CaptureCallback>
 8006150:	e005      	b.n	800615e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f919 	bl	800638a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f92a 	bl	80063b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00c      	beq.n	8006188 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b00      	cmp	r3, #0
 8006176:	d007      	beq.n	8006188 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f06f 0201 	mvn.w	r2, #1
 8006180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7fb fd5c 	bl	8001c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00c      	beq.n	80061ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006198:	2b00      	cmp	r3, #0
 800619a:	d007      	beq.n	80061ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80061a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fae4 	bl	8006774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00c      	beq.n	80061d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d007      	beq.n	80061d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80061c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f8fb 	bl	80063c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00c      	beq.n	80061f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f003 0320 	and.w	r3, r3, #32
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d007      	beq.n	80061f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f06f 0220 	mvn.w	r2, #32
 80061ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fab6 	bl	8006760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061f4:	bf00      	nop
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <HAL_TIM_ConfigClockSource+0x1c>
 8006214:	2302      	movs	r3, #2
 8006216:	e0b4      	b.n	8006382 <HAL_TIM_ConfigClockSource+0x186>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2202      	movs	r2, #2
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006236:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800623e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006250:	d03e      	beq.n	80062d0 <HAL_TIM_ConfigClockSource+0xd4>
 8006252:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006256:	f200 8087 	bhi.w	8006368 <HAL_TIM_ConfigClockSource+0x16c>
 800625a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800625e:	f000 8086 	beq.w	800636e <HAL_TIM_ConfigClockSource+0x172>
 8006262:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006266:	d87f      	bhi.n	8006368 <HAL_TIM_ConfigClockSource+0x16c>
 8006268:	2b70      	cmp	r3, #112	@ 0x70
 800626a:	d01a      	beq.n	80062a2 <HAL_TIM_ConfigClockSource+0xa6>
 800626c:	2b70      	cmp	r3, #112	@ 0x70
 800626e:	d87b      	bhi.n	8006368 <HAL_TIM_ConfigClockSource+0x16c>
 8006270:	2b60      	cmp	r3, #96	@ 0x60
 8006272:	d050      	beq.n	8006316 <HAL_TIM_ConfigClockSource+0x11a>
 8006274:	2b60      	cmp	r3, #96	@ 0x60
 8006276:	d877      	bhi.n	8006368 <HAL_TIM_ConfigClockSource+0x16c>
 8006278:	2b50      	cmp	r3, #80	@ 0x50
 800627a:	d03c      	beq.n	80062f6 <HAL_TIM_ConfigClockSource+0xfa>
 800627c:	2b50      	cmp	r3, #80	@ 0x50
 800627e:	d873      	bhi.n	8006368 <HAL_TIM_ConfigClockSource+0x16c>
 8006280:	2b40      	cmp	r3, #64	@ 0x40
 8006282:	d058      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0x13a>
 8006284:	2b40      	cmp	r3, #64	@ 0x40
 8006286:	d86f      	bhi.n	8006368 <HAL_TIM_ConfigClockSource+0x16c>
 8006288:	2b30      	cmp	r3, #48	@ 0x30
 800628a:	d064      	beq.n	8006356 <HAL_TIM_ConfigClockSource+0x15a>
 800628c:	2b30      	cmp	r3, #48	@ 0x30
 800628e:	d86b      	bhi.n	8006368 <HAL_TIM_ConfigClockSource+0x16c>
 8006290:	2b20      	cmp	r3, #32
 8006292:	d060      	beq.n	8006356 <HAL_TIM_ConfigClockSource+0x15a>
 8006294:	2b20      	cmp	r3, #32
 8006296:	d867      	bhi.n	8006368 <HAL_TIM_ConfigClockSource+0x16c>
 8006298:	2b00      	cmp	r3, #0
 800629a:	d05c      	beq.n	8006356 <HAL_TIM_ConfigClockSource+0x15a>
 800629c:	2b10      	cmp	r3, #16
 800629e:	d05a      	beq.n	8006356 <HAL_TIM_ConfigClockSource+0x15a>
 80062a0:	e062      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062b2:	f000 f9b9 	bl	8006628 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80062c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	609a      	str	r2, [r3, #8]
      break;
 80062ce:	e04f      	b.n	8006370 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062e0:	f000 f9a2 	bl	8006628 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689a      	ldr	r2, [r3, #8]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062f2:	609a      	str	r2, [r3, #8]
      break;
 80062f4:	e03c      	b.n	8006370 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006302:	461a      	mov	r2, r3
 8006304:	f000 f916 	bl	8006534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2150      	movs	r1, #80	@ 0x50
 800630e:	4618      	mov	r0, r3
 8006310:	f000 f96f 	bl	80065f2 <TIM_ITRx_SetConfig>
      break;
 8006314:	e02c      	b.n	8006370 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006322:	461a      	mov	r2, r3
 8006324:	f000 f935 	bl	8006592 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2160      	movs	r1, #96	@ 0x60
 800632e:	4618      	mov	r0, r3
 8006330:	f000 f95f 	bl	80065f2 <TIM_ITRx_SetConfig>
      break;
 8006334:	e01c      	b.n	8006370 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006342:	461a      	mov	r2, r3
 8006344:	f000 f8f6 	bl	8006534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2140      	movs	r1, #64	@ 0x40
 800634e:	4618      	mov	r0, r3
 8006350:	f000 f94f 	bl	80065f2 <TIM_ITRx_SetConfig>
      break;
 8006354:	e00c      	b.n	8006370 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4619      	mov	r1, r3
 8006360:	4610      	mov	r0, r2
 8006362:	f000 f946 	bl	80065f2 <TIM_ITRx_SetConfig>
      break;
 8006366:	e003      	b.n	8006370 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	73fb      	strb	r3, [r7, #15]
      break;
 800636c:	e000      	b.n	8006370 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800636e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006380:	7bfb      	ldrb	r3, [r7, #15]
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063a6:	bf00      	nop
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
	...

080063dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a46      	ldr	r2, [pc, #280]	@ (8006508 <TIM_Base_SetConfig+0x12c>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d013      	beq.n	800641c <TIM_Base_SetConfig+0x40>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063fa:	d00f      	beq.n	800641c <TIM_Base_SetConfig+0x40>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a43      	ldr	r2, [pc, #268]	@ (800650c <TIM_Base_SetConfig+0x130>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d00b      	beq.n	800641c <TIM_Base_SetConfig+0x40>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a42      	ldr	r2, [pc, #264]	@ (8006510 <TIM_Base_SetConfig+0x134>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d007      	beq.n	800641c <TIM_Base_SetConfig+0x40>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a41      	ldr	r2, [pc, #260]	@ (8006514 <TIM_Base_SetConfig+0x138>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d003      	beq.n	800641c <TIM_Base_SetConfig+0x40>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a40      	ldr	r2, [pc, #256]	@ (8006518 <TIM_Base_SetConfig+0x13c>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d108      	bne.n	800642e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	4313      	orrs	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a35      	ldr	r2, [pc, #212]	@ (8006508 <TIM_Base_SetConfig+0x12c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d02b      	beq.n	800648e <TIM_Base_SetConfig+0xb2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800643c:	d027      	beq.n	800648e <TIM_Base_SetConfig+0xb2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a32      	ldr	r2, [pc, #200]	@ (800650c <TIM_Base_SetConfig+0x130>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d023      	beq.n	800648e <TIM_Base_SetConfig+0xb2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a31      	ldr	r2, [pc, #196]	@ (8006510 <TIM_Base_SetConfig+0x134>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d01f      	beq.n	800648e <TIM_Base_SetConfig+0xb2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a30      	ldr	r2, [pc, #192]	@ (8006514 <TIM_Base_SetConfig+0x138>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d01b      	beq.n	800648e <TIM_Base_SetConfig+0xb2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a2f      	ldr	r2, [pc, #188]	@ (8006518 <TIM_Base_SetConfig+0x13c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d017      	beq.n	800648e <TIM_Base_SetConfig+0xb2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a2e      	ldr	r2, [pc, #184]	@ (800651c <TIM_Base_SetConfig+0x140>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d013      	beq.n	800648e <TIM_Base_SetConfig+0xb2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a2d      	ldr	r2, [pc, #180]	@ (8006520 <TIM_Base_SetConfig+0x144>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00f      	beq.n	800648e <TIM_Base_SetConfig+0xb2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a2c      	ldr	r2, [pc, #176]	@ (8006524 <TIM_Base_SetConfig+0x148>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d00b      	beq.n	800648e <TIM_Base_SetConfig+0xb2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a2b      	ldr	r2, [pc, #172]	@ (8006528 <TIM_Base_SetConfig+0x14c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d007      	beq.n	800648e <TIM_Base_SetConfig+0xb2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a2a      	ldr	r2, [pc, #168]	@ (800652c <TIM_Base_SetConfig+0x150>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d003      	beq.n	800648e <TIM_Base_SetConfig+0xb2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a29      	ldr	r2, [pc, #164]	@ (8006530 <TIM_Base_SetConfig+0x154>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d108      	bne.n	80064a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	4313      	orrs	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a10      	ldr	r2, [pc, #64]	@ (8006508 <TIM_Base_SetConfig+0x12c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d003      	beq.n	80064d4 <TIM_Base_SetConfig+0xf8>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a12      	ldr	r2, [pc, #72]	@ (8006518 <TIM_Base_SetConfig+0x13c>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d103      	bne.n	80064dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	691a      	ldr	r2, [r3, #16]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d105      	bne.n	80064fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	f023 0201 	bic.w	r2, r3, #1
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	611a      	str	r2, [r3, #16]
  }
}
 80064fa:	bf00      	nop
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	40010000 	.word	0x40010000
 800650c:	40000400 	.word	0x40000400
 8006510:	40000800 	.word	0x40000800
 8006514:	40000c00 	.word	0x40000c00
 8006518:	40010400 	.word	0x40010400
 800651c:	40014000 	.word	0x40014000
 8006520:	40014400 	.word	0x40014400
 8006524:	40014800 	.word	0x40014800
 8006528:	40001800 	.word	0x40001800
 800652c:	40001c00 	.word	0x40001c00
 8006530:	40002000 	.word	0x40002000

08006534 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	f023 0201 	bic.w	r2, r3, #1
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800655e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	011b      	lsls	r3, r3, #4
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	4313      	orrs	r3, r2
 8006568:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f023 030a 	bic.w	r3, r3, #10
 8006570:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	4313      	orrs	r3, r2
 8006578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	621a      	str	r2, [r3, #32]
}
 8006586:	bf00      	nop
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006592:	b480      	push	{r7}
 8006594:	b087      	sub	sp, #28
 8006596:	af00      	add	r7, sp, #0
 8006598:	60f8      	str	r0, [r7, #12]
 800659a:	60b9      	str	r1, [r7, #8]
 800659c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6a1b      	ldr	r3, [r3, #32]
 80065a8:	f023 0210 	bic.w	r2, r3, #16
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80065bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	031b      	lsls	r3, r3, #12
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80065ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	011b      	lsls	r3, r3, #4
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	621a      	str	r2, [r3, #32]
}
 80065e6:	bf00      	nop
 80065e8:	371c      	adds	r7, #28
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065f2:	b480      	push	{r7}
 80065f4:	b085      	sub	sp, #20
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006608:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4313      	orrs	r3, r2
 8006610:	f043 0307 	orr.w	r3, r3, #7
 8006614:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	609a      	str	r2, [r3, #8]
}
 800661c:	bf00      	nop
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006642:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	021a      	lsls	r2, r3, #8
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	431a      	orrs	r2, r3
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	4313      	orrs	r3, r2
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	4313      	orrs	r3, r2
 8006654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	609a      	str	r2, [r3, #8]
}
 800665c:	bf00      	nop
 800665e:	371c      	adds	r7, #28
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006678:	2b01      	cmp	r3, #1
 800667a:	d101      	bne.n	8006680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800667c:	2302      	movs	r3, #2
 800667e:	e05a      	b.n	8006736 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a21      	ldr	r2, [pc, #132]	@ (8006744 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d022      	beq.n	800670a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066cc:	d01d      	beq.n	800670a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a1d      	ldr	r2, [pc, #116]	@ (8006748 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d018      	beq.n	800670a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a1b      	ldr	r2, [pc, #108]	@ (800674c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d013      	beq.n	800670a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a1a      	ldr	r2, [pc, #104]	@ (8006750 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d00e      	beq.n	800670a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a18      	ldr	r2, [pc, #96]	@ (8006754 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d009      	beq.n	800670a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a17      	ldr	r2, [pc, #92]	@ (8006758 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d004      	beq.n	800670a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a15      	ldr	r2, [pc, #84]	@ (800675c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d10c      	bne.n	8006724 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006710:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	4313      	orrs	r3, r2
 800671a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	40010000 	.word	0x40010000
 8006748:	40000400 	.word	0x40000400
 800674c:	40000800 	.word	0x40000800
 8006750:	40000c00 	.word	0x40000c00
 8006754:	40010400 	.word	0x40010400
 8006758:	40014000 	.word	0x40014000
 800675c:	40001800 	.word	0x40001800

08006760 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e042      	b.n	8006820 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d106      	bne.n	80067b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7fb fe9e 	bl	80024f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2224      	movs	r2, #36	@ 0x24
 80067b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80067ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 ff85 	bl	80076dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	691a      	ldr	r2, [r3, #16]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80067e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	695a      	ldr	r2, [r3, #20]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80067f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68da      	ldr	r2, [r3, #12]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006800:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2220      	movs	r2, #32
 800680c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2220      	movs	r2, #32
 8006814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b08a      	sub	sp, #40	@ 0x28
 800682c:	af02      	add	r7, sp, #8
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	603b      	str	r3, [r7, #0]
 8006834:	4613      	mov	r3, r2
 8006836:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b20      	cmp	r3, #32
 8006846:	d175      	bne.n	8006934 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <HAL_UART_Transmit+0x2c>
 800684e:	88fb      	ldrh	r3, [r7, #6]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e06e      	b.n	8006936 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2221      	movs	r2, #33	@ 0x21
 8006862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006866:	f7fb ff8b 	bl	8002780 <HAL_GetTick>
 800686a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	88fa      	ldrh	r2, [r7, #6]
 8006870:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	88fa      	ldrh	r2, [r7, #6]
 8006876:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006880:	d108      	bne.n	8006894 <HAL_UART_Transmit+0x6c>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d104      	bne.n	8006894 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800688a:	2300      	movs	r3, #0
 800688c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	61bb      	str	r3, [r7, #24]
 8006892:	e003      	b.n	800689c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006898:	2300      	movs	r3, #0
 800689a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800689c:	e02e      	b.n	80068fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2200      	movs	r2, #0
 80068a6:	2180      	movs	r1, #128	@ 0x80
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 fc5d 	bl	8007168 <UART_WaitOnFlagUntilTimeout>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d005      	beq.n	80068c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2220      	movs	r2, #32
 80068b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e03a      	b.n	8006936 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10b      	bne.n	80068de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	461a      	mov	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	3302      	adds	r3, #2
 80068da:	61bb      	str	r3, [r7, #24]
 80068dc:	e007      	b.n	80068ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	781a      	ldrb	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	3301      	adds	r3, #1
 80068ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	3b01      	subs	r3, #1
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006900:	b29b      	uxth	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1cb      	bne.n	800689e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2200      	movs	r2, #0
 800690e:	2140      	movs	r1, #64	@ 0x40
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 fc29 	bl	8007168 <UART_WaitOnFlagUntilTimeout>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d005      	beq.n	8006928 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2220      	movs	r2, #32
 8006920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e006      	b.n	8006936 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2220      	movs	r2, #32
 800692c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006930:	2300      	movs	r3, #0
 8006932:	e000      	b.n	8006936 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006934:	2302      	movs	r3, #2
  }
}
 8006936:	4618      	mov	r0, r3
 8006938:	3720      	adds	r7, #32
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b08c      	sub	sp, #48	@ 0x30
 8006942:	af00      	add	r7, sp, #0
 8006944:	60f8      	str	r0, [r7, #12]
 8006946:	60b9      	str	r1, [r7, #8]
 8006948:	4613      	mov	r3, r2
 800694a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b20      	cmp	r3, #32
 8006956:	d14a      	bne.n	80069ee <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d002      	beq.n	8006964 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800695e:	88fb      	ldrh	r3, [r7, #6]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e043      	b.n	80069f0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2201      	movs	r2, #1
 800696c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006974:	88fb      	ldrh	r3, [r7, #6]
 8006976:	461a      	mov	r2, r3
 8006978:	68b9      	ldr	r1, [r7, #8]
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f000 fc4e 	bl	800721c <UART_Start_Receive_DMA>
 8006980:	4603      	mov	r3, r0
 8006982:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006986:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800698a:	2b00      	cmp	r3, #0
 800698c:	d12c      	bne.n	80069e8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006992:	2b01      	cmp	r3, #1
 8006994:	d125      	bne.n	80069e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006996:	2300      	movs	r3, #0
 8006998:	613b      	str	r3, [r7, #16]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	613b      	str	r3, [r7, #16]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	613b      	str	r3, [r7, #16]
 80069aa:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	330c      	adds	r3, #12
 80069b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	e853 3f00 	ldrex	r3, [r3]
 80069ba:	617b      	str	r3, [r7, #20]
   return(result);
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f043 0310 	orr.w	r3, r3, #16
 80069c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	330c      	adds	r3, #12
 80069ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80069ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	6a39      	ldr	r1, [r7, #32]
 80069d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069d4:	e841 2300 	strex	r3, r2, [r1]
 80069d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e5      	bne.n	80069ac <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80069e0:	e002      	b.n	80069e8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80069e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80069ec:	e000      	b.n	80069f0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80069ee:	2302      	movs	r3, #2
  }
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3730      	adds	r7, #48	@ 0x30
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b0ba      	sub	sp, #232	@ 0xe8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a2e:	f003 030f 	and.w	r3, r3, #15
 8006a32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10f      	bne.n	8006a5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a42:	f003 0320 	and.w	r3, r3, #32
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d009      	beq.n	8006a5e <HAL_UART_IRQHandler+0x66>
 8006a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fd81 	bl	800755e <UART_Receive_IT>
      return;
 8006a5c:	e25b      	b.n	8006f16 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006a5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 80de 	beq.w	8006c24 <HAL_UART_IRQHandler+0x22c>
 8006a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d106      	bne.n	8006a82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a78:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 80d1 	beq.w	8006c24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00b      	beq.n	8006aa6 <HAL_UART_IRQHandler+0xae>
 8006a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d005      	beq.n	8006aa6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a9e:	f043 0201 	orr.w	r2, r3, #1
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aaa:	f003 0304 	and.w	r3, r3, #4
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00b      	beq.n	8006aca <HAL_UART_IRQHandler+0xd2>
 8006ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d005      	beq.n	8006aca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ac2:	f043 0202 	orr.w	r2, r3, #2
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ace:	f003 0302 	and.w	r3, r3, #2
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00b      	beq.n	8006aee <HAL_UART_IRQHandler+0xf6>
 8006ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d005      	beq.n	8006aee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ae6:	f043 0204 	orr.w	r2, r3, #4
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006af2:	f003 0308 	and.w	r3, r3, #8
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d011      	beq.n	8006b1e <HAL_UART_IRQHandler+0x126>
 8006afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006afe:	f003 0320 	and.w	r3, r3, #32
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d105      	bne.n	8006b12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d005      	beq.n	8006b1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b16:	f043 0208 	orr.w	r2, r3, #8
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 81f2 	beq.w	8006f0c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b2c:	f003 0320 	and.w	r3, r3, #32
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d008      	beq.n	8006b46 <HAL_UART_IRQHandler+0x14e>
 8006b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b38:	f003 0320 	and.w	r3, r3, #32
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d002      	beq.n	8006b46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fd0c 	bl	800755e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b50:	2b40      	cmp	r3, #64	@ 0x40
 8006b52:	bf0c      	ite	eq
 8006b54:	2301      	moveq	r3, #1
 8006b56:	2300      	movne	r3, #0
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b62:	f003 0308 	and.w	r3, r3, #8
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d103      	bne.n	8006b72 <HAL_UART_IRQHandler+0x17a>
 8006b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d04f      	beq.n	8006c12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fc14 	bl	80073a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b82:	2b40      	cmp	r3, #64	@ 0x40
 8006b84:	d141      	bne.n	8006c0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3314      	adds	r3, #20
 8006b8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b94:	e853 3f00 	ldrex	r3, [r3]
 8006b98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ba0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3314      	adds	r3, #20
 8006bae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006bb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006bbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006bca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1d9      	bne.n	8006b86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d013      	beq.n	8006c02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bde:	4a7e      	ldr	r2, [pc, #504]	@ (8006dd8 <HAL_UART_IRQHandler+0x3e0>)
 8006be0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fc fa92 	bl	8003110 <HAL_DMA_Abort_IT>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d016      	beq.n	8006c20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c00:	e00e      	b.n	8006c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f9a8 	bl	8006f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c08:	e00a      	b.n	8006c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f9a4 	bl	8006f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c10:	e006      	b.n	8006c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f9a0 	bl	8006f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006c1e:	e175      	b.n	8006f0c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c20:	bf00      	nop
    return;
 8006c22:	e173      	b.n	8006f0c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	f040 814f 	bne.w	8006ecc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c32:	f003 0310 	and.w	r3, r3, #16
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f000 8148 	beq.w	8006ecc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c40:	f003 0310 	and.w	r3, r3, #16
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 8141 	beq.w	8006ecc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	60bb      	str	r3, [r7, #8]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	60bb      	str	r3, [r7, #8]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	60bb      	str	r3, [r7, #8]
 8006c5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c6a:	2b40      	cmp	r3, #64	@ 0x40
 8006c6c:	f040 80b6 	bne.w	8006ddc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 8145 	beq.w	8006f10 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	f080 813e 	bcs.w	8006f10 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ca6:	f000 8088 	beq.w	8006dba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	330c      	adds	r3, #12
 8006cb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006cb8:	e853 3f00 	ldrex	r3, [r3]
 8006cbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006cc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	330c      	adds	r3, #12
 8006cd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006cd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006cda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006ce2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ce6:	e841 2300 	strex	r3, r2, [r1]
 8006cea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1d9      	bne.n	8006caa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	3314      	adds	r3, #20
 8006cfc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d00:	e853 3f00 	ldrex	r3, [r3]
 8006d04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006d06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d08:	f023 0301 	bic.w	r3, r3, #1
 8006d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3314      	adds	r3, #20
 8006d16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006d1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006d1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006d22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006d26:	e841 2300 	strex	r3, r2, [r1]
 8006d2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006d2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1e1      	bne.n	8006cf6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3314      	adds	r3, #20
 8006d38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d3c:	e853 3f00 	ldrex	r3, [r3]
 8006d40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006d42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3314      	adds	r3, #20
 8006d52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006d56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006d58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006d5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006d64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e3      	bne.n	8006d32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	330c      	adds	r3, #12
 8006d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d82:	e853 3f00 	ldrex	r3, [r3]
 8006d86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d8a:	f023 0310 	bic.w	r3, r3, #16
 8006d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	330c      	adds	r3, #12
 8006d98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006d9c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006d9e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006da2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006da4:	e841 2300 	strex	r3, r2, [r1]
 8006da8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1e3      	bne.n	8006d78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fc f93b 	bl	8003030 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7fa ff0f 	bl	8001bf4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006dd6:	e09b      	b.n	8006f10 <HAL_UART_IRQHandler+0x518>
 8006dd8:	08007467 	.word	0x08007467
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f000 808e 	beq.w	8006f14 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006df8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 8089 	beq.w	8006f14 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	330c      	adds	r3, #12
 8006e08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e0c:	e853 3f00 	ldrex	r3, [r3]
 8006e10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	330c      	adds	r3, #12
 8006e22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006e26:	647a      	str	r2, [r7, #68]	@ 0x44
 8006e28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e2e:	e841 2300 	strex	r3, r2, [r1]
 8006e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1e3      	bne.n	8006e02 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3314      	adds	r3, #20
 8006e40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e44:	e853 3f00 	ldrex	r3, [r3]
 8006e48:	623b      	str	r3, [r7, #32]
   return(result);
 8006e4a:	6a3b      	ldr	r3, [r7, #32]
 8006e4c:	f023 0301 	bic.w	r3, r3, #1
 8006e50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3314      	adds	r3, #20
 8006e5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006e5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e66:	e841 2300 	strex	r3, r2, [r1]
 8006e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1e3      	bne.n	8006e3a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2220      	movs	r2, #32
 8006e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	330c      	adds	r3, #12
 8006e86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	e853 3f00 	ldrex	r3, [r3]
 8006e8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f023 0310 	bic.w	r3, r3, #16
 8006e96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	330c      	adds	r3, #12
 8006ea0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006ea4:	61fa      	str	r2, [r7, #28]
 8006ea6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea8:	69b9      	ldr	r1, [r7, #24]
 8006eaa:	69fa      	ldr	r2, [r7, #28]
 8006eac:	e841 2300 	strex	r3, r2, [r1]
 8006eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1e3      	bne.n	8006e80 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ebe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f7fa fe95 	bl	8001bf4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006eca:	e023      	b.n	8006f14 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d009      	beq.n	8006eec <HAL_UART_IRQHandler+0x4f4>
 8006ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 fad2 	bl	800748e <UART_Transmit_IT>
    return;
 8006eea:	e014      	b.n	8006f16 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00e      	beq.n	8006f16 <HAL_UART_IRQHandler+0x51e>
 8006ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d008      	beq.n	8006f16 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fb12 	bl	800752e <UART_EndTransmit_IT>
    return;
 8006f0a:	e004      	b.n	8006f16 <HAL_UART_IRQHandler+0x51e>
    return;
 8006f0c:	bf00      	nop
 8006f0e:	e002      	b.n	8006f16 <HAL_UART_IRQHandler+0x51e>
      return;
 8006f10:	bf00      	nop
 8006f12:	e000      	b.n	8006f16 <HAL_UART_IRQHandler+0x51e>
      return;
 8006f14:	bf00      	nop
  }
}
 8006f16:	37e8      	adds	r7, #232	@ 0xe8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b09c      	sub	sp, #112	@ 0x70
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f78:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d172      	bne.n	800706e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006f88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	330c      	adds	r3, #12
 8006f94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f98:	e853 3f00 	ldrex	r3, [r3]
 8006f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006fa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	330c      	adds	r3, #12
 8006fac:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006fae:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006fb0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006fb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006fb6:	e841 2300 	strex	r3, r2, [r1]
 8006fba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006fbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1e5      	bne.n	8006f8e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3314      	adds	r3, #20
 8006fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fcc:	e853 3f00 	ldrex	r3, [r3]
 8006fd0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd4:	f023 0301 	bic.w	r3, r3, #1
 8006fd8:	667b      	str	r3, [r7, #100]	@ 0x64
 8006fda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3314      	adds	r3, #20
 8006fe0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006fe2:	647a      	str	r2, [r7, #68]	@ 0x44
 8006fe4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fe8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fea:	e841 2300 	strex	r3, r2, [r1]
 8006fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1e5      	bne.n	8006fc2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ff6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3314      	adds	r3, #20
 8006ffc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007000:	e853 3f00 	ldrex	r3, [r3]
 8007004:	623b      	str	r3, [r7, #32]
   return(result);
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800700c:	663b      	str	r3, [r7, #96]	@ 0x60
 800700e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3314      	adds	r3, #20
 8007014:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007016:	633a      	str	r2, [r7, #48]	@ 0x30
 8007018:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800701c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800701e:	e841 2300 	strex	r3, r2, [r1]
 8007022:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1e5      	bne.n	8006ff6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800702a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800702c:	2220      	movs	r2, #32
 800702e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007032:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007036:	2b01      	cmp	r3, #1
 8007038:	d119      	bne.n	800706e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800703a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	330c      	adds	r3, #12
 8007040:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	60fb      	str	r3, [r7, #12]
   return(result);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f023 0310 	bic.w	r3, r3, #16
 8007050:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	330c      	adds	r3, #12
 8007058:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800705a:	61fa      	str	r2, [r7, #28]
 800705c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705e:	69b9      	ldr	r1, [r7, #24]
 8007060:	69fa      	ldr	r2, [r7, #28]
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	617b      	str	r3, [r7, #20]
   return(result);
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1e5      	bne.n	800703a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800706e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007070:	2200      	movs	r2, #0
 8007072:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007074:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007078:	2b01      	cmp	r3, #1
 800707a:	d106      	bne.n	800708a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800707c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800707e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007080:	4619      	mov	r1, r3
 8007082:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007084:	f7fa fdb6 	bl	8001bf4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007088:	e002      	b.n	8007090 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800708a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800708c:	f7ff ff50 	bl	8006f30 <HAL_UART_RxCpltCallback>
}
 8007090:	bf00      	nop
 8007092:	3770      	adds	r7, #112	@ 0x70
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2201      	movs	r2, #1
 80070aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d108      	bne.n	80070c6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80070b8:	085b      	lsrs	r3, r3, #1
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	4619      	mov	r1, r3
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f7fa fd98 	bl	8001bf4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070c4:	e002      	b.n	80070cc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f7ff ff3c 	bl	8006f44 <HAL_UART_RxHalfCpltCallback>
}
 80070cc:	bf00      	nop
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80070dc:	2300      	movs	r3, #0
 80070de:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070f0:	2b80      	cmp	r3, #128	@ 0x80
 80070f2:	bf0c      	ite	eq
 80070f4:	2301      	moveq	r3, #1
 80070f6:	2300      	movne	r3, #0
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b21      	cmp	r3, #33	@ 0x21
 8007106:	d108      	bne.n	800711a <UART_DMAError+0x46>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d005      	beq.n	800711a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	2200      	movs	r2, #0
 8007112:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007114:	68b8      	ldr	r0, [r7, #8]
 8007116:	f000 f91b 	bl	8007350 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007124:	2b40      	cmp	r3, #64	@ 0x40
 8007126:	bf0c      	ite	eq
 8007128:	2301      	moveq	r3, #1
 800712a:	2300      	movne	r3, #0
 800712c:	b2db      	uxtb	r3, r3
 800712e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b22      	cmp	r3, #34	@ 0x22
 800713a:	d108      	bne.n	800714e <UART_DMAError+0x7a>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d005      	beq.n	800714e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2200      	movs	r2, #0
 8007146:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007148:	68b8      	ldr	r0, [r7, #8]
 800714a:	f000 f929 	bl	80073a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007152:	f043 0210 	orr.w	r2, r3, #16
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800715a:	68b8      	ldr	r0, [r7, #8]
 800715c:	f7ff fefc 	bl	8006f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007160:	bf00      	nop
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	603b      	str	r3, [r7, #0]
 8007174:	4613      	mov	r3, r2
 8007176:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007178:	e03b      	b.n	80071f2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007180:	d037      	beq.n	80071f2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007182:	f7fb fafd 	bl	8002780 <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	6a3a      	ldr	r2, [r7, #32]
 800718e:	429a      	cmp	r2, r3
 8007190:	d302      	bcc.n	8007198 <UART_WaitOnFlagUntilTimeout+0x30>
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e03a      	b.n	8007212 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f003 0304 	and.w	r3, r3, #4
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d023      	beq.n	80071f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2b80      	cmp	r3, #128	@ 0x80
 80071ae:	d020      	beq.n	80071f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2b40      	cmp	r3, #64	@ 0x40
 80071b4:	d01d      	beq.n	80071f2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0308 	and.w	r3, r3, #8
 80071c0:	2b08      	cmp	r3, #8
 80071c2:	d116      	bne.n	80071f2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80071c4:	2300      	movs	r3, #0
 80071c6:	617b      	str	r3, [r7, #20]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	617b      	str	r3, [r7, #20]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	617b      	str	r3, [r7, #20]
 80071d8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 f8e0 	bl	80073a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2208      	movs	r2, #8
 80071e4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e00f      	b.n	8007212 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	4013      	ands	r3, r2
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	429a      	cmp	r2, r3
 8007200:	bf0c      	ite	eq
 8007202:	2301      	moveq	r3, #1
 8007204:	2300      	movne	r3, #0
 8007206:	b2db      	uxtb	r3, r3
 8007208:	461a      	mov	r2, r3
 800720a:	79fb      	ldrb	r3, [r7, #7]
 800720c:	429a      	cmp	r2, r3
 800720e:	d0b4      	beq.n	800717a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3718      	adds	r7, #24
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
	...

0800721c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b098      	sub	sp, #96	@ 0x60
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	4613      	mov	r3, r2
 8007228:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	88fa      	ldrh	r2, [r7, #6]
 8007234:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2222      	movs	r2, #34	@ 0x22
 8007240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007248:	4a3e      	ldr	r2, [pc, #248]	@ (8007344 <UART_Start_Receive_DMA+0x128>)
 800724a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007250:	4a3d      	ldr	r2, [pc, #244]	@ (8007348 <UART_Start_Receive_DMA+0x12c>)
 8007252:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007258:	4a3c      	ldr	r2, [pc, #240]	@ (800734c <UART_Start_Receive_DMA+0x130>)
 800725a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007260:	2200      	movs	r2, #0
 8007262:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007264:	f107 0308 	add.w	r3, r7, #8
 8007268:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3304      	adds	r3, #4
 8007274:	4619      	mov	r1, r3
 8007276:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	88fb      	ldrh	r3, [r7, #6]
 800727c:	f7fb fe80 	bl	8002f80 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007280:	2300      	movs	r3, #0
 8007282:	613b      	str	r3, [r7, #16]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	613b      	str	r3, [r7, #16]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	613b      	str	r3, [r7, #16]
 8007294:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d019      	beq.n	80072d2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	330c      	adds	r3, #12
 80072a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072a8:	e853 3f00 	ldrex	r3, [r3]
 80072ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	330c      	adds	r3, #12
 80072bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072be:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80072c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80072c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072c6:	e841 2300 	strex	r3, r2, [r1]
 80072ca:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80072cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1e5      	bne.n	800729e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	3314      	adds	r3, #20
 80072d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072dc:	e853 3f00 	ldrex	r3, [r3]
 80072e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e4:	f043 0301 	orr.w	r3, r3, #1
 80072e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	3314      	adds	r3, #20
 80072f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80072f2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80072f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80072f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80072fa:	e841 2300 	strex	r3, r2, [r1]
 80072fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1e5      	bne.n	80072d2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3314      	adds	r3, #20
 800730c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	617b      	str	r3, [r7, #20]
   return(result);
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800731c:	653b      	str	r3, [r7, #80]	@ 0x50
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3314      	adds	r3, #20
 8007324:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007326:	627a      	str	r2, [r7, #36]	@ 0x24
 8007328:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	6a39      	ldr	r1, [r7, #32]
 800732c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800732e:	e841 2300 	strex	r3, r2, [r1]
 8007332:	61fb      	str	r3, [r7, #28]
   return(result);
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e5      	bne.n	8007306 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3760      	adds	r7, #96	@ 0x60
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	08006f6d 	.word	0x08006f6d
 8007348:	08007099 	.word	0x08007099
 800734c:	080070d5 	.word	0x080070d5

08007350 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007350:	b480      	push	{r7}
 8007352:	b089      	sub	sp, #36	@ 0x24
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	330c      	adds	r3, #12
 800735e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	e853 3f00 	ldrex	r3, [r3]
 8007366:	60bb      	str	r3, [r7, #8]
   return(result);
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800736e:	61fb      	str	r3, [r7, #28]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	330c      	adds	r3, #12
 8007376:	69fa      	ldr	r2, [r7, #28]
 8007378:	61ba      	str	r2, [r7, #24]
 800737a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737c:	6979      	ldr	r1, [r7, #20]
 800737e:	69ba      	ldr	r2, [r7, #24]
 8007380:	e841 2300 	strex	r3, r2, [r1]
 8007384:	613b      	str	r3, [r7, #16]
   return(result);
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1e5      	bne.n	8007358 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2220      	movs	r2, #32
 8007390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007394:	bf00      	nop
 8007396:	3724      	adds	r7, #36	@ 0x24
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b095      	sub	sp, #84	@ 0x54
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	330c      	adds	r3, #12
 80073ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073b2:	e853 3f00 	ldrex	r3, [r3]
 80073b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	330c      	adds	r3, #12
 80073c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80073ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073d0:	e841 2300 	strex	r3, r2, [r1]
 80073d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1e5      	bne.n	80073a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3314      	adds	r3, #20
 80073e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e4:	6a3b      	ldr	r3, [r7, #32]
 80073e6:	e853 3f00 	ldrex	r3, [r3]
 80073ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	f023 0301 	bic.w	r3, r3, #1
 80073f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	3314      	adds	r3, #20
 80073fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007400:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007402:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007404:	e841 2300 	strex	r3, r2, [r1]
 8007408:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800740a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1e5      	bne.n	80073dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007414:	2b01      	cmp	r3, #1
 8007416:	d119      	bne.n	800744c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	330c      	adds	r3, #12
 800741e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	e853 3f00 	ldrex	r3, [r3]
 8007426:	60bb      	str	r3, [r7, #8]
   return(result);
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	f023 0310 	bic.w	r3, r3, #16
 800742e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	330c      	adds	r3, #12
 8007436:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007438:	61ba      	str	r2, [r7, #24]
 800743a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743c:	6979      	ldr	r1, [r7, #20]
 800743e:	69ba      	ldr	r2, [r7, #24]
 8007440:	e841 2300 	strex	r3, r2, [r1]
 8007444:	613b      	str	r3, [r7, #16]
   return(result);
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1e5      	bne.n	8007418 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2220      	movs	r2, #32
 8007450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800745a:	bf00      	nop
 800745c:	3754      	adds	r7, #84	@ 0x54
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007472:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f7ff fd69 	bl	8006f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007486:	bf00      	nop
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800748e:	b480      	push	{r7}
 8007490:	b085      	sub	sp, #20
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b21      	cmp	r3, #33	@ 0x21
 80074a0:	d13e      	bne.n	8007520 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074aa:	d114      	bne.n	80074d6 <UART_Transmit_IT+0x48>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d110      	bne.n	80074d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	461a      	mov	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	1c9a      	adds	r2, r3, #2
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	621a      	str	r2, [r3, #32]
 80074d4:	e008      	b.n	80074e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	1c59      	adds	r1, r3, #1
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	6211      	str	r1, [r2, #32]
 80074e0:	781a      	ldrb	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	3b01      	subs	r3, #1
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	4619      	mov	r1, r3
 80074f6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10f      	bne.n	800751c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68da      	ldr	r2, [r3, #12]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800750a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68da      	ldr	r2, [r3, #12]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800751a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800751c:	2300      	movs	r3, #0
 800751e:	e000      	b.n	8007522 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007520:	2302      	movs	r3, #2
  }
}
 8007522:	4618      	mov	r0, r3
 8007524:	3714      	adds	r7, #20
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b082      	sub	sp, #8
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68da      	ldr	r2, [r3, #12]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007544:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2220      	movs	r2, #32
 800754a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7ff fce4 	bl	8006f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b08c      	sub	sp, #48	@ 0x30
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b22      	cmp	r3, #34	@ 0x22
 8007570:	f040 80ae 	bne.w	80076d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800757c:	d117      	bne.n	80075ae <UART_Receive_IT+0x50>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d113      	bne.n	80075ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007586:	2300      	movs	r3, #0
 8007588:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800758e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	b29b      	uxth	r3, r3
 8007598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759c:	b29a      	uxth	r2, r3
 800759e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a6:	1c9a      	adds	r2, r3, #2
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80075ac:	e026      	b.n	80075fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80075b4:	2300      	movs	r3, #0
 80075b6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075c0:	d007      	beq.n	80075d2 <UART_Receive_IT+0x74>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10a      	bne.n	80075e0 <UART_Receive_IT+0x82>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d106      	bne.n	80075e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075dc:	701a      	strb	r2, [r3, #0]
 80075de:	e008      	b.n	80075f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f6:	1c5a      	adds	r2, r3, #1
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007600:	b29b      	uxth	r3, r3
 8007602:	3b01      	subs	r3, #1
 8007604:	b29b      	uxth	r3, r3
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	4619      	mov	r1, r3
 800760a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800760c:	2b00      	cmp	r3, #0
 800760e:	d15d      	bne.n	80076cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68da      	ldr	r2, [r3, #12]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f022 0220 	bic.w	r2, r2, #32
 800761e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68da      	ldr	r2, [r3, #12]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800762e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	695a      	ldr	r2, [r3, #20]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f022 0201 	bic.w	r2, r2, #1
 800763e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2220      	movs	r2, #32
 8007644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007652:	2b01      	cmp	r3, #1
 8007654:	d135      	bne.n	80076c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	330c      	adds	r3, #12
 8007662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	e853 3f00 	ldrex	r3, [r3]
 800766a:	613b      	str	r3, [r7, #16]
   return(result);
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	f023 0310 	bic.w	r3, r3, #16
 8007672:	627b      	str	r3, [r7, #36]	@ 0x24
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	330c      	adds	r3, #12
 800767a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800767c:	623a      	str	r2, [r7, #32]
 800767e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007680:	69f9      	ldr	r1, [r7, #28]
 8007682:	6a3a      	ldr	r2, [r7, #32]
 8007684:	e841 2300 	strex	r3, r2, [r1]
 8007688:	61bb      	str	r3, [r7, #24]
   return(result);
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1e5      	bne.n	800765c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0310 	and.w	r3, r3, #16
 800769a:	2b10      	cmp	r3, #16
 800769c:	d10a      	bne.n	80076b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800769e:	2300      	movs	r3, #0
 80076a0:	60fb      	str	r3, [r7, #12]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	60fb      	str	r3, [r7, #12]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	60fb      	str	r3, [r7, #12]
 80076b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7fa fa9a 	bl	8001bf4 <HAL_UARTEx_RxEventCallback>
 80076c0:	e002      	b.n	80076c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7ff fc34 	bl	8006f30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80076c8:	2300      	movs	r3, #0
 80076ca:	e002      	b.n	80076d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	e000      	b.n	80076d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80076d0:	2302      	movs	r3, #2
  }
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3730      	adds	r7, #48	@ 0x30
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
	...

080076dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076e0:	b0c0      	sub	sp, #256	@ 0x100
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80076f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076f8:	68d9      	ldr	r1, [r3, #12]
 80076fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	ea40 0301 	orr.w	r3, r0, r1
 8007704:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800770a:	689a      	ldr	r2, [r3, #8]
 800770c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	431a      	orrs	r2, r3
 8007714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	431a      	orrs	r2, r3
 800771c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007720:	69db      	ldr	r3, [r3, #28]
 8007722:	4313      	orrs	r3, r2
 8007724:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007734:	f021 010c 	bic.w	r1, r1, #12
 8007738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007742:	430b      	orrs	r3, r1
 8007744:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007756:	6999      	ldr	r1, [r3, #24]
 8007758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	ea40 0301 	orr.w	r3, r0, r1
 8007762:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	4b8f      	ldr	r3, [pc, #572]	@ (80079a8 <UART_SetConfig+0x2cc>)
 800776c:	429a      	cmp	r2, r3
 800776e:	d005      	beq.n	800777c <UART_SetConfig+0xa0>
 8007770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	4b8d      	ldr	r3, [pc, #564]	@ (80079ac <UART_SetConfig+0x2d0>)
 8007778:	429a      	cmp	r2, r3
 800777a:	d104      	bne.n	8007786 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800777c:	f7fd feac 	bl	80054d8 <HAL_RCC_GetPCLK2Freq>
 8007780:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007784:	e003      	b.n	800778e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007786:	f7fd fe93 	bl	80054b0 <HAL_RCC_GetPCLK1Freq>
 800778a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800778e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007792:	69db      	ldr	r3, [r3, #28]
 8007794:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007798:	f040 810c 	bne.w	80079b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800779c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077a0:	2200      	movs	r2, #0
 80077a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80077a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80077aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80077ae:	4622      	mov	r2, r4
 80077b0:	462b      	mov	r3, r5
 80077b2:	1891      	adds	r1, r2, r2
 80077b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80077b6:	415b      	adcs	r3, r3
 80077b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80077be:	4621      	mov	r1, r4
 80077c0:	eb12 0801 	adds.w	r8, r2, r1
 80077c4:	4629      	mov	r1, r5
 80077c6:	eb43 0901 	adc.w	r9, r3, r1
 80077ca:	f04f 0200 	mov.w	r2, #0
 80077ce:	f04f 0300 	mov.w	r3, #0
 80077d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077de:	4690      	mov	r8, r2
 80077e0:	4699      	mov	r9, r3
 80077e2:	4623      	mov	r3, r4
 80077e4:	eb18 0303 	adds.w	r3, r8, r3
 80077e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80077ec:	462b      	mov	r3, r5
 80077ee:	eb49 0303 	adc.w	r3, r9, r3
 80077f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007802:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007806:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800780a:	460b      	mov	r3, r1
 800780c:	18db      	adds	r3, r3, r3
 800780e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007810:	4613      	mov	r3, r2
 8007812:	eb42 0303 	adc.w	r3, r2, r3
 8007816:	657b      	str	r3, [r7, #84]	@ 0x54
 8007818:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800781c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007820:	f7f9 fa52 	bl	8000cc8 <__aeabi_uldivmod>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	4b61      	ldr	r3, [pc, #388]	@ (80079b0 <UART_SetConfig+0x2d4>)
 800782a:	fba3 2302 	umull	r2, r3, r3, r2
 800782e:	095b      	lsrs	r3, r3, #5
 8007830:	011c      	lsls	r4, r3, #4
 8007832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007836:	2200      	movs	r2, #0
 8007838:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800783c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007840:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007844:	4642      	mov	r2, r8
 8007846:	464b      	mov	r3, r9
 8007848:	1891      	adds	r1, r2, r2
 800784a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800784c:	415b      	adcs	r3, r3
 800784e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007850:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007854:	4641      	mov	r1, r8
 8007856:	eb12 0a01 	adds.w	sl, r2, r1
 800785a:	4649      	mov	r1, r9
 800785c:	eb43 0b01 	adc.w	fp, r3, r1
 8007860:	f04f 0200 	mov.w	r2, #0
 8007864:	f04f 0300 	mov.w	r3, #0
 8007868:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800786c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007870:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007874:	4692      	mov	sl, r2
 8007876:	469b      	mov	fp, r3
 8007878:	4643      	mov	r3, r8
 800787a:	eb1a 0303 	adds.w	r3, sl, r3
 800787e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007882:	464b      	mov	r3, r9
 8007884:	eb4b 0303 	adc.w	r3, fp, r3
 8007888:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800788c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007898:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800789c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80078a0:	460b      	mov	r3, r1
 80078a2:	18db      	adds	r3, r3, r3
 80078a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80078a6:	4613      	mov	r3, r2
 80078a8:	eb42 0303 	adc.w	r3, r2, r3
 80078ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80078ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80078b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80078b6:	f7f9 fa07 	bl	8000cc8 <__aeabi_uldivmod>
 80078ba:	4602      	mov	r2, r0
 80078bc:	460b      	mov	r3, r1
 80078be:	4611      	mov	r1, r2
 80078c0:	4b3b      	ldr	r3, [pc, #236]	@ (80079b0 <UART_SetConfig+0x2d4>)
 80078c2:	fba3 2301 	umull	r2, r3, r3, r1
 80078c6:	095b      	lsrs	r3, r3, #5
 80078c8:	2264      	movs	r2, #100	@ 0x64
 80078ca:	fb02 f303 	mul.w	r3, r2, r3
 80078ce:	1acb      	subs	r3, r1, r3
 80078d0:	00db      	lsls	r3, r3, #3
 80078d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80078d6:	4b36      	ldr	r3, [pc, #216]	@ (80079b0 <UART_SetConfig+0x2d4>)
 80078d8:	fba3 2302 	umull	r2, r3, r3, r2
 80078dc:	095b      	lsrs	r3, r3, #5
 80078de:	005b      	lsls	r3, r3, #1
 80078e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80078e4:	441c      	add	r4, r3
 80078e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078ea:	2200      	movs	r2, #0
 80078ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80078f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80078f8:	4642      	mov	r2, r8
 80078fa:	464b      	mov	r3, r9
 80078fc:	1891      	adds	r1, r2, r2
 80078fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007900:	415b      	adcs	r3, r3
 8007902:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007904:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007908:	4641      	mov	r1, r8
 800790a:	1851      	adds	r1, r2, r1
 800790c:	6339      	str	r1, [r7, #48]	@ 0x30
 800790e:	4649      	mov	r1, r9
 8007910:	414b      	adcs	r3, r1
 8007912:	637b      	str	r3, [r7, #52]	@ 0x34
 8007914:	f04f 0200 	mov.w	r2, #0
 8007918:	f04f 0300 	mov.w	r3, #0
 800791c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007920:	4659      	mov	r1, fp
 8007922:	00cb      	lsls	r3, r1, #3
 8007924:	4651      	mov	r1, sl
 8007926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800792a:	4651      	mov	r1, sl
 800792c:	00ca      	lsls	r2, r1, #3
 800792e:	4610      	mov	r0, r2
 8007930:	4619      	mov	r1, r3
 8007932:	4603      	mov	r3, r0
 8007934:	4642      	mov	r2, r8
 8007936:	189b      	adds	r3, r3, r2
 8007938:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800793c:	464b      	mov	r3, r9
 800793e:	460a      	mov	r2, r1
 8007940:	eb42 0303 	adc.w	r3, r2, r3
 8007944:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007954:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007958:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800795c:	460b      	mov	r3, r1
 800795e:	18db      	adds	r3, r3, r3
 8007960:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007962:	4613      	mov	r3, r2
 8007964:	eb42 0303 	adc.w	r3, r2, r3
 8007968:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800796a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800796e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007972:	f7f9 f9a9 	bl	8000cc8 <__aeabi_uldivmod>
 8007976:	4602      	mov	r2, r0
 8007978:	460b      	mov	r3, r1
 800797a:	4b0d      	ldr	r3, [pc, #52]	@ (80079b0 <UART_SetConfig+0x2d4>)
 800797c:	fba3 1302 	umull	r1, r3, r3, r2
 8007980:	095b      	lsrs	r3, r3, #5
 8007982:	2164      	movs	r1, #100	@ 0x64
 8007984:	fb01 f303 	mul.w	r3, r1, r3
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	00db      	lsls	r3, r3, #3
 800798c:	3332      	adds	r3, #50	@ 0x32
 800798e:	4a08      	ldr	r2, [pc, #32]	@ (80079b0 <UART_SetConfig+0x2d4>)
 8007990:	fba2 2303 	umull	r2, r3, r2, r3
 8007994:	095b      	lsrs	r3, r3, #5
 8007996:	f003 0207 	and.w	r2, r3, #7
 800799a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4422      	add	r2, r4
 80079a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079a4:	e106      	b.n	8007bb4 <UART_SetConfig+0x4d8>
 80079a6:	bf00      	nop
 80079a8:	40011000 	.word	0x40011000
 80079ac:	40011400 	.word	0x40011400
 80079b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079b8:	2200      	movs	r2, #0
 80079ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80079be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80079c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80079c6:	4642      	mov	r2, r8
 80079c8:	464b      	mov	r3, r9
 80079ca:	1891      	adds	r1, r2, r2
 80079cc:	6239      	str	r1, [r7, #32]
 80079ce:	415b      	adcs	r3, r3
 80079d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80079d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079d6:	4641      	mov	r1, r8
 80079d8:	1854      	adds	r4, r2, r1
 80079da:	4649      	mov	r1, r9
 80079dc:	eb43 0501 	adc.w	r5, r3, r1
 80079e0:	f04f 0200 	mov.w	r2, #0
 80079e4:	f04f 0300 	mov.w	r3, #0
 80079e8:	00eb      	lsls	r3, r5, #3
 80079ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079ee:	00e2      	lsls	r2, r4, #3
 80079f0:	4614      	mov	r4, r2
 80079f2:	461d      	mov	r5, r3
 80079f4:	4643      	mov	r3, r8
 80079f6:	18e3      	adds	r3, r4, r3
 80079f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80079fc:	464b      	mov	r3, r9
 80079fe:	eb45 0303 	adc.w	r3, r5, r3
 8007a02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a12:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a16:	f04f 0200 	mov.w	r2, #0
 8007a1a:	f04f 0300 	mov.w	r3, #0
 8007a1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007a22:	4629      	mov	r1, r5
 8007a24:	008b      	lsls	r3, r1, #2
 8007a26:	4621      	mov	r1, r4
 8007a28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a2c:	4621      	mov	r1, r4
 8007a2e:	008a      	lsls	r2, r1, #2
 8007a30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007a34:	f7f9 f948 	bl	8000cc8 <__aeabi_uldivmod>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4b60      	ldr	r3, [pc, #384]	@ (8007bc0 <UART_SetConfig+0x4e4>)
 8007a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8007a42:	095b      	lsrs	r3, r3, #5
 8007a44:	011c      	lsls	r4, r3, #4
 8007a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007a54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007a58:	4642      	mov	r2, r8
 8007a5a:	464b      	mov	r3, r9
 8007a5c:	1891      	adds	r1, r2, r2
 8007a5e:	61b9      	str	r1, [r7, #24]
 8007a60:	415b      	adcs	r3, r3
 8007a62:	61fb      	str	r3, [r7, #28]
 8007a64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a68:	4641      	mov	r1, r8
 8007a6a:	1851      	adds	r1, r2, r1
 8007a6c:	6139      	str	r1, [r7, #16]
 8007a6e:	4649      	mov	r1, r9
 8007a70:	414b      	adcs	r3, r1
 8007a72:	617b      	str	r3, [r7, #20]
 8007a74:	f04f 0200 	mov.w	r2, #0
 8007a78:	f04f 0300 	mov.w	r3, #0
 8007a7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a80:	4659      	mov	r1, fp
 8007a82:	00cb      	lsls	r3, r1, #3
 8007a84:	4651      	mov	r1, sl
 8007a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a8a:	4651      	mov	r1, sl
 8007a8c:	00ca      	lsls	r2, r1, #3
 8007a8e:	4610      	mov	r0, r2
 8007a90:	4619      	mov	r1, r3
 8007a92:	4603      	mov	r3, r0
 8007a94:	4642      	mov	r2, r8
 8007a96:	189b      	adds	r3, r3, r2
 8007a98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a9c:	464b      	mov	r3, r9
 8007a9e:	460a      	mov	r2, r1
 8007aa0:	eb42 0303 	adc.w	r3, r2, r3
 8007aa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ab2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007ab4:	f04f 0200 	mov.w	r2, #0
 8007ab8:	f04f 0300 	mov.w	r3, #0
 8007abc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007ac0:	4649      	mov	r1, r9
 8007ac2:	008b      	lsls	r3, r1, #2
 8007ac4:	4641      	mov	r1, r8
 8007ac6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007aca:	4641      	mov	r1, r8
 8007acc:	008a      	lsls	r2, r1, #2
 8007ace:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007ad2:	f7f9 f8f9 	bl	8000cc8 <__aeabi_uldivmod>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4611      	mov	r1, r2
 8007adc:	4b38      	ldr	r3, [pc, #224]	@ (8007bc0 <UART_SetConfig+0x4e4>)
 8007ade:	fba3 2301 	umull	r2, r3, r3, r1
 8007ae2:	095b      	lsrs	r3, r3, #5
 8007ae4:	2264      	movs	r2, #100	@ 0x64
 8007ae6:	fb02 f303 	mul.w	r3, r2, r3
 8007aea:	1acb      	subs	r3, r1, r3
 8007aec:	011b      	lsls	r3, r3, #4
 8007aee:	3332      	adds	r3, #50	@ 0x32
 8007af0:	4a33      	ldr	r2, [pc, #204]	@ (8007bc0 <UART_SetConfig+0x4e4>)
 8007af2:	fba2 2303 	umull	r2, r3, r2, r3
 8007af6:	095b      	lsrs	r3, r3, #5
 8007af8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007afc:	441c      	add	r4, r3
 8007afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b02:	2200      	movs	r2, #0
 8007b04:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b06:	677a      	str	r2, [r7, #116]	@ 0x74
 8007b08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007b0c:	4642      	mov	r2, r8
 8007b0e:	464b      	mov	r3, r9
 8007b10:	1891      	adds	r1, r2, r2
 8007b12:	60b9      	str	r1, [r7, #8]
 8007b14:	415b      	adcs	r3, r3
 8007b16:	60fb      	str	r3, [r7, #12]
 8007b18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b1c:	4641      	mov	r1, r8
 8007b1e:	1851      	adds	r1, r2, r1
 8007b20:	6039      	str	r1, [r7, #0]
 8007b22:	4649      	mov	r1, r9
 8007b24:	414b      	adcs	r3, r1
 8007b26:	607b      	str	r3, [r7, #4]
 8007b28:	f04f 0200 	mov.w	r2, #0
 8007b2c:	f04f 0300 	mov.w	r3, #0
 8007b30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b34:	4659      	mov	r1, fp
 8007b36:	00cb      	lsls	r3, r1, #3
 8007b38:	4651      	mov	r1, sl
 8007b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b3e:	4651      	mov	r1, sl
 8007b40:	00ca      	lsls	r2, r1, #3
 8007b42:	4610      	mov	r0, r2
 8007b44:	4619      	mov	r1, r3
 8007b46:	4603      	mov	r3, r0
 8007b48:	4642      	mov	r2, r8
 8007b4a:	189b      	adds	r3, r3, r2
 8007b4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b4e:	464b      	mov	r3, r9
 8007b50:	460a      	mov	r2, r1
 8007b52:	eb42 0303 	adc.w	r3, r2, r3
 8007b56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b62:	667a      	str	r2, [r7, #100]	@ 0x64
 8007b64:	f04f 0200 	mov.w	r2, #0
 8007b68:	f04f 0300 	mov.w	r3, #0
 8007b6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007b70:	4649      	mov	r1, r9
 8007b72:	008b      	lsls	r3, r1, #2
 8007b74:	4641      	mov	r1, r8
 8007b76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b7a:	4641      	mov	r1, r8
 8007b7c:	008a      	lsls	r2, r1, #2
 8007b7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007b82:	f7f9 f8a1 	bl	8000cc8 <__aeabi_uldivmod>
 8007b86:	4602      	mov	r2, r0
 8007b88:	460b      	mov	r3, r1
 8007b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc0 <UART_SetConfig+0x4e4>)
 8007b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8007b90:	095b      	lsrs	r3, r3, #5
 8007b92:	2164      	movs	r1, #100	@ 0x64
 8007b94:	fb01 f303 	mul.w	r3, r1, r3
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	011b      	lsls	r3, r3, #4
 8007b9c:	3332      	adds	r3, #50	@ 0x32
 8007b9e:	4a08      	ldr	r2, [pc, #32]	@ (8007bc0 <UART_SetConfig+0x4e4>)
 8007ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba4:	095b      	lsrs	r3, r3, #5
 8007ba6:	f003 020f 	and.w	r2, r3, #15
 8007baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4422      	add	r2, r4
 8007bb2:	609a      	str	r2, [r3, #8]
}
 8007bb4:	bf00      	nop
 8007bb6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bc0:	51eb851f 	.word	0x51eb851f

08007bc4 <malloc>:
 8007bc4:	4b02      	ldr	r3, [pc, #8]	@ (8007bd0 <malloc+0xc>)
 8007bc6:	4601      	mov	r1, r0
 8007bc8:	6818      	ldr	r0, [r3, #0]
 8007bca:	f000 b82d 	b.w	8007c28 <_malloc_r>
 8007bce:	bf00      	nop
 8007bd0:	20000018 	.word	0x20000018

08007bd4 <free>:
 8007bd4:	4b02      	ldr	r3, [pc, #8]	@ (8007be0 <free+0xc>)
 8007bd6:	4601      	mov	r1, r0
 8007bd8:	6818      	ldr	r0, [r3, #0]
 8007bda:	f002 b829 	b.w	8009c30 <_free_r>
 8007bde:	bf00      	nop
 8007be0:	20000018 	.word	0x20000018

08007be4 <sbrk_aligned>:
 8007be4:	b570      	push	{r4, r5, r6, lr}
 8007be6:	4e0f      	ldr	r6, [pc, #60]	@ (8007c24 <sbrk_aligned+0x40>)
 8007be8:	460c      	mov	r4, r1
 8007bea:	6831      	ldr	r1, [r6, #0]
 8007bec:	4605      	mov	r5, r0
 8007bee:	b911      	cbnz	r1, 8007bf6 <sbrk_aligned+0x12>
 8007bf0:	f001 f97c 	bl	8008eec <_sbrk_r>
 8007bf4:	6030      	str	r0, [r6, #0]
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	f001 f977 	bl	8008eec <_sbrk_r>
 8007bfe:	1c43      	adds	r3, r0, #1
 8007c00:	d103      	bne.n	8007c0a <sbrk_aligned+0x26>
 8007c02:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007c06:	4620      	mov	r0, r4
 8007c08:	bd70      	pop	{r4, r5, r6, pc}
 8007c0a:	1cc4      	adds	r4, r0, #3
 8007c0c:	f024 0403 	bic.w	r4, r4, #3
 8007c10:	42a0      	cmp	r0, r4
 8007c12:	d0f8      	beq.n	8007c06 <sbrk_aligned+0x22>
 8007c14:	1a21      	subs	r1, r4, r0
 8007c16:	4628      	mov	r0, r5
 8007c18:	f001 f968 	bl	8008eec <_sbrk_r>
 8007c1c:	3001      	adds	r0, #1
 8007c1e:	d1f2      	bne.n	8007c06 <sbrk_aligned+0x22>
 8007c20:	e7ef      	b.n	8007c02 <sbrk_aligned+0x1e>
 8007c22:	bf00      	nop
 8007c24:	20000460 	.word	0x20000460

08007c28 <_malloc_r>:
 8007c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c2c:	1ccd      	adds	r5, r1, #3
 8007c2e:	f025 0503 	bic.w	r5, r5, #3
 8007c32:	3508      	adds	r5, #8
 8007c34:	2d0c      	cmp	r5, #12
 8007c36:	bf38      	it	cc
 8007c38:	250c      	movcc	r5, #12
 8007c3a:	2d00      	cmp	r5, #0
 8007c3c:	4606      	mov	r6, r0
 8007c3e:	db01      	blt.n	8007c44 <_malloc_r+0x1c>
 8007c40:	42a9      	cmp	r1, r5
 8007c42:	d904      	bls.n	8007c4e <_malloc_r+0x26>
 8007c44:	230c      	movs	r3, #12
 8007c46:	6033      	str	r3, [r6, #0]
 8007c48:	2000      	movs	r0, #0
 8007c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d24 <_malloc_r+0xfc>
 8007c52:	f000 f869 	bl	8007d28 <__malloc_lock>
 8007c56:	f8d8 3000 	ldr.w	r3, [r8]
 8007c5a:	461c      	mov	r4, r3
 8007c5c:	bb44      	cbnz	r4, 8007cb0 <_malloc_r+0x88>
 8007c5e:	4629      	mov	r1, r5
 8007c60:	4630      	mov	r0, r6
 8007c62:	f7ff ffbf 	bl	8007be4 <sbrk_aligned>
 8007c66:	1c43      	adds	r3, r0, #1
 8007c68:	4604      	mov	r4, r0
 8007c6a:	d158      	bne.n	8007d1e <_malloc_r+0xf6>
 8007c6c:	f8d8 4000 	ldr.w	r4, [r8]
 8007c70:	4627      	mov	r7, r4
 8007c72:	2f00      	cmp	r7, #0
 8007c74:	d143      	bne.n	8007cfe <_malloc_r+0xd6>
 8007c76:	2c00      	cmp	r4, #0
 8007c78:	d04b      	beq.n	8007d12 <_malloc_r+0xea>
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	4639      	mov	r1, r7
 8007c7e:	4630      	mov	r0, r6
 8007c80:	eb04 0903 	add.w	r9, r4, r3
 8007c84:	f001 f932 	bl	8008eec <_sbrk_r>
 8007c88:	4581      	cmp	r9, r0
 8007c8a:	d142      	bne.n	8007d12 <_malloc_r+0xea>
 8007c8c:	6821      	ldr	r1, [r4, #0]
 8007c8e:	1a6d      	subs	r5, r5, r1
 8007c90:	4629      	mov	r1, r5
 8007c92:	4630      	mov	r0, r6
 8007c94:	f7ff ffa6 	bl	8007be4 <sbrk_aligned>
 8007c98:	3001      	adds	r0, #1
 8007c9a:	d03a      	beq.n	8007d12 <_malloc_r+0xea>
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	442b      	add	r3, r5
 8007ca0:	6023      	str	r3, [r4, #0]
 8007ca2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ca6:	685a      	ldr	r2, [r3, #4]
 8007ca8:	bb62      	cbnz	r2, 8007d04 <_malloc_r+0xdc>
 8007caa:	f8c8 7000 	str.w	r7, [r8]
 8007cae:	e00f      	b.n	8007cd0 <_malloc_r+0xa8>
 8007cb0:	6822      	ldr	r2, [r4, #0]
 8007cb2:	1b52      	subs	r2, r2, r5
 8007cb4:	d420      	bmi.n	8007cf8 <_malloc_r+0xd0>
 8007cb6:	2a0b      	cmp	r2, #11
 8007cb8:	d917      	bls.n	8007cea <_malloc_r+0xc2>
 8007cba:	1961      	adds	r1, r4, r5
 8007cbc:	42a3      	cmp	r3, r4
 8007cbe:	6025      	str	r5, [r4, #0]
 8007cc0:	bf18      	it	ne
 8007cc2:	6059      	strne	r1, [r3, #4]
 8007cc4:	6863      	ldr	r3, [r4, #4]
 8007cc6:	bf08      	it	eq
 8007cc8:	f8c8 1000 	streq.w	r1, [r8]
 8007ccc:	5162      	str	r2, [r4, r5]
 8007cce:	604b      	str	r3, [r1, #4]
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	f000 f82f 	bl	8007d34 <__malloc_unlock>
 8007cd6:	f104 000b 	add.w	r0, r4, #11
 8007cda:	1d23      	adds	r3, r4, #4
 8007cdc:	f020 0007 	bic.w	r0, r0, #7
 8007ce0:	1ac2      	subs	r2, r0, r3
 8007ce2:	bf1c      	itt	ne
 8007ce4:	1a1b      	subne	r3, r3, r0
 8007ce6:	50a3      	strne	r3, [r4, r2]
 8007ce8:	e7af      	b.n	8007c4a <_malloc_r+0x22>
 8007cea:	6862      	ldr	r2, [r4, #4]
 8007cec:	42a3      	cmp	r3, r4
 8007cee:	bf0c      	ite	eq
 8007cf0:	f8c8 2000 	streq.w	r2, [r8]
 8007cf4:	605a      	strne	r2, [r3, #4]
 8007cf6:	e7eb      	b.n	8007cd0 <_malloc_r+0xa8>
 8007cf8:	4623      	mov	r3, r4
 8007cfa:	6864      	ldr	r4, [r4, #4]
 8007cfc:	e7ae      	b.n	8007c5c <_malloc_r+0x34>
 8007cfe:	463c      	mov	r4, r7
 8007d00:	687f      	ldr	r7, [r7, #4]
 8007d02:	e7b6      	b.n	8007c72 <_malloc_r+0x4a>
 8007d04:	461a      	mov	r2, r3
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	42a3      	cmp	r3, r4
 8007d0a:	d1fb      	bne.n	8007d04 <_malloc_r+0xdc>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	6053      	str	r3, [r2, #4]
 8007d10:	e7de      	b.n	8007cd0 <_malloc_r+0xa8>
 8007d12:	230c      	movs	r3, #12
 8007d14:	6033      	str	r3, [r6, #0]
 8007d16:	4630      	mov	r0, r6
 8007d18:	f000 f80c 	bl	8007d34 <__malloc_unlock>
 8007d1c:	e794      	b.n	8007c48 <_malloc_r+0x20>
 8007d1e:	6005      	str	r5, [r0, #0]
 8007d20:	e7d6      	b.n	8007cd0 <_malloc_r+0xa8>
 8007d22:	bf00      	nop
 8007d24:	20000464 	.word	0x20000464

08007d28 <__malloc_lock>:
 8007d28:	4801      	ldr	r0, [pc, #4]	@ (8007d30 <__malloc_lock+0x8>)
 8007d2a:	f001 b92c 	b.w	8008f86 <__retarget_lock_acquire_recursive>
 8007d2e:	bf00      	nop
 8007d30:	200005a8 	.word	0x200005a8

08007d34 <__malloc_unlock>:
 8007d34:	4801      	ldr	r0, [pc, #4]	@ (8007d3c <__malloc_unlock+0x8>)
 8007d36:	f001 b927 	b.w	8008f88 <__retarget_lock_release_recursive>
 8007d3a:	bf00      	nop
 8007d3c:	200005a8 	.word	0x200005a8

08007d40 <__cvt>:
 8007d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d44:	ec57 6b10 	vmov	r6, r7, d0
 8007d48:	2f00      	cmp	r7, #0
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	463b      	mov	r3, r7
 8007d50:	bfbb      	ittet	lt
 8007d52:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007d56:	461f      	movlt	r7, r3
 8007d58:	2300      	movge	r3, #0
 8007d5a:	232d      	movlt	r3, #45	@ 0x2d
 8007d5c:	700b      	strb	r3, [r1, #0]
 8007d5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d60:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007d64:	4691      	mov	r9, r2
 8007d66:	f023 0820 	bic.w	r8, r3, #32
 8007d6a:	bfbc      	itt	lt
 8007d6c:	4632      	movlt	r2, r6
 8007d6e:	4616      	movlt	r6, r2
 8007d70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007d74:	d005      	beq.n	8007d82 <__cvt+0x42>
 8007d76:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007d7a:	d100      	bne.n	8007d7e <__cvt+0x3e>
 8007d7c:	3401      	adds	r4, #1
 8007d7e:	2102      	movs	r1, #2
 8007d80:	e000      	b.n	8007d84 <__cvt+0x44>
 8007d82:	2103      	movs	r1, #3
 8007d84:	ab03      	add	r3, sp, #12
 8007d86:	9301      	str	r3, [sp, #4]
 8007d88:	ab02      	add	r3, sp, #8
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	ec47 6b10 	vmov	d0, r6, r7
 8007d90:	4653      	mov	r3, sl
 8007d92:	4622      	mov	r2, r4
 8007d94:	f001 f988 	bl	80090a8 <_dtoa_r>
 8007d98:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007d9c:	4605      	mov	r5, r0
 8007d9e:	d119      	bne.n	8007dd4 <__cvt+0x94>
 8007da0:	f019 0f01 	tst.w	r9, #1
 8007da4:	d00e      	beq.n	8007dc4 <__cvt+0x84>
 8007da6:	eb00 0904 	add.w	r9, r0, r4
 8007daa:	2200      	movs	r2, #0
 8007dac:	2300      	movs	r3, #0
 8007dae:	4630      	mov	r0, r6
 8007db0:	4639      	mov	r1, r7
 8007db2:	f7f8 fea9 	bl	8000b08 <__aeabi_dcmpeq>
 8007db6:	b108      	cbz	r0, 8007dbc <__cvt+0x7c>
 8007db8:	f8cd 900c 	str.w	r9, [sp, #12]
 8007dbc:	2230      	movs	r2, #48	@ 0x30
 8007dbe:	9b03      	ldr	r3, [sp, #12]
 8007dc0:	454b      	cmp	r3, r9
 8007dc2:	d31e      	bcc.n	8007e02 <__cvt+0xc2>
 8007dc4:	9b03      	ldr	r3, [sp, #12]
 8007dc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007dc8:	1b5b      	subs	r3, r3, r5
 8007dca:	4628      	mov	r0, r5
 8007dcc:	6013      	str	r3, [r2, #0]
 8007dce:	b004      	add	sp, #16
 8007dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dd4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007dd8:	eb00 0904 	add.w	r9, r0, r4
 8007ddc:	d1e5      	bne.n	8007daa <__cvt+0x6a>
 8007dde:	7803      	ldrb	r3, [r0, #0]
 8007de0:	2b30      	cmp	r3, #48	@ 0x30
 8007de2:	d10a      	bne.n	8007dfa <__cvt+0xba>
 8007de4:	2200      	movs	r2, #0
 8007de6:	2300      	movs	r3, #0
 8007de8:	4630      	mov	r0, r6
 8007dea:	4639      	mov	r1, r7
 8007dec:	f7f8 fe8c 	bl	8000b08 <__aeabi_dcmpeq>
 8007df0:	b918      	cbnz	r0, 8007dfa <__cvt+0xba>
 8007df2:	f1c4 0401 	rsb	r4, r4, #1
 8007df6:	f8ca 4000 	str.w	r4, [sl]
 8007dfa:	f8da 3000 	ldr.w	r3, [sl]
 8007dfe:	4499      	add	r9, r3
 8007e00:	e7d3      	b.n	8007daa <__cvt+0x6a>
 8007e02:	1c59      	adds	r1, r3, #1
 8007e04:	9103      	str	r1, [sp, #12]
 8007e06:	701a      	strb	r2, [r3, #0]
 8007e08:	e7d9      	b.n	8007dbe <__cvt+0x7e>

08007e0a <__exponent>:
 8007e0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e0c:	2900      	cmp	r1, #0
 8007e0e:	bfba      	itte	lt
 8007e10:	4249      	neglt	r1, r1
 8007e12:	232d      	movlt	r3, #45	@ 0x2d
 8007e14:	232b      	movge	r3, #43	@ 0x2b
 8007e16:	2909      	cmp	r1, #9
 8007e18:	7002      	strb	r2, [r0, #0]
 8007e1a:	7043      	strb	r3, [r0, #1]
 8007e1c:	dd29      	ble.n	8007e72 <__exponent+0x68>
 8007e1e:	f10d 0307 	add.w	r3, sp, #7
 8007e22:	461d      	mov	r5, r3
 8007e24:	270a      	movs	r7, #10
 8007e26:	461a      	mov	r2, r3
 8007e28:	fbb1 f6f7 	udiv	r6, r1, r7
 8007e2c:	fb07 1416 	mls	r4, r7, r6, r1
 8007e30:	3430      	adds	r4, #48	@ 0x30
 8007e32:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007e36:	460c      	mov	r4, r1
 8007e38:	2c63      	cmp	r4, #99	@ 0x63
 8007e3a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007e3e:	4631      	mov	r1, r6
 8007e40:	dcf1      	bgt.n	8007e26 <__exponent+0x1c>
 8007e42:	3130      	adds	r1, #48	@ 0x30
 8007e44:	1e94      	subs	r4, r2, #2
 8007e46:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007e4a:	1c41      	adds	r1, r0, #1
 8007e4c:	4623      	mov	r3, r4
 8007e4e:	42ab      	cmp	r3, r5
 8007e50:	d30a      	bcc.n	8007e68 <__exponent+0x5e>
 8007e52:	f10d 0309 	add.w	r3, sp, #9
 8007e56:	1a9b      	subs	r3, r3, r2
 8007e58:	42ac      	cmp	r4, r5
 8007e5a:	bf88      	it	hi
 8007e5c:	2300      	movhi	r3, #0
 8007e5e:	3302      	adds	r3, #2
 8007e60:	4403      	add	r3, r0
 8007e62:	1a18      	subs	r0, r3, r0
 8007e64:	b003      	add	sp, #12
 8007e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e68:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007e6c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007e70:	e7ed      	b.n	8007e4e <__exponent+0x44>
 8007e72:	2330      	movs	r3, #48	@ 0x30
 8007e74:	3130      	adds	r1, #48	@ 0x30
 8007e76:	7083      	strb	r3, [r0, #2]
 8007e78:	70c1      	strb	r1, [r0, #3]
 8007e7a:	1d03      	adds	r3, r0, #4
 8007e7c:	e7f1      	b.n	8007e62 <__exponent+0x58>
	...

08007e80 <_printf_float>:
 8007e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e84:	b08d      	sub	sp, #52	@ 0x34
 8007e86:	460c      	mov	r4, r1
 8007e88:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007e8c:	4616      	mov	r6, r2
 8007e8e:	461f      	mov	r7, r3
 8007e90:	4605      	mov	r5, r0
 8007e92:	f000 fff3 	bl	8008e7c <_localeconv_r>
 8007e96:	6803      	ldr	r3, [r0, #0]
 8007e98:	9304      	str	r3, [sp, #16]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7f8 fa08 	bl	80002b0 <strlen>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ea4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ea8:	9005      	str	r0, [sp, #20]
 8007eaa:	3307      	adds	r3, #7
 8007eac:	f023 0307 	bic.w	r3, r3, #7
 8007eb0:	f103 0208 	add.w	r2, r3, #8
 8007eb4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007eb8:	f8d4 b000 	ldr.w	fp, [r4]
 8007ebc:	f8c8 2000 	str.w	r2, [r8]
 8007ec0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ec4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007ec8:	9307      	str	r3, [sp, #28]
 8007eca:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ece:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007ed2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ed6:	4b9c      	ldr	r3, [pc, #624]	@ (8008148 <_printf_float+0x2c8>)
 8007ed8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007edc:	f7f8 fe46 	bl	8000b6c <__aeabi_dcmpun>
 8007ee0:	bb70      	cbnz	r0, 8007f40 <_printf_float+0xc0>
 8007ee2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ee6:	4b98      	ldr	r3, [pc, #608]	@ (8008148 <_printf_float+0x2c8>)
 8007ee8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007eec:	f7f8 fe20 	bl	8000b30 <__aeabi_dcmple>
 8007ef0:	bb30      	cbnz	r0, 8007f40 <_printf_float+0xc0>
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	4640      	mov	r0, r8
 8007ef8:	4649      	mov	r1, r9
 8007efa:	f7f8 fe0f 	bl	8000b1c <__aeabi_dcmplt>
 8007efe:	b110      	cbz	r0, 8007f06 <_printf_float+0x86>
 8007f00:	232d      	movs	r3, #45	@ 0x2d
 8007f02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f06:	4a91      	ldr	r2, [pc, #580]	@ (800814c <_printf_float+0x2cc>)
 8007f08:	4b91      	ldr	r3, [pc, #580]	@ (8008150 <_printf_float+0x2d0>)
 8007f0a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007f0e:	bf94      	ite	ls
 8007f10:	4690      	movls	r8, r2
 8007f12:	4698      	movhi	r8, r3
 8007f14:	2303      	movs	r3, #3
 8007f16:	6123      	str	r3, [r4, #16]
 8007f18:	f02b 0304 	bic.w	r3, fp, #4
 8007f1c:	6023      	str	r3, [r4, #0]
 8007f1e:	f04f 0900 	mov.w	r9, #0
 8007f22:	9700      	str	r7, [sp, #0]
 8007f24:	4633      	mov	r3, r6
 8007f26:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007f28:	4621      	mov	r1, r4
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	f000 f9d2 	bl	80082d4 <_printf_common>
 8007f30:	3001      	adds	r0, #1
 8007f32:	f040 808d 	bne.w	8008050 <_printf_float+0x1d0>
 8007f36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f3a:	b00d      	add	sp, #52	@ 0x34
 8007f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f40:	4642      	mov	r2, r8
 8007f42:	464b      	mov	r3, r9
 8007f44:	4640      	mov	r0, r8
 8007f46:	4649      	mov	r1, r9
 8007f48:	f7f8 fe10 	bl	8000b6c <__aeabi_dcmpun>
 8007f4c:	b140      	cbz	r0, 8007f60 <_printf_float+0xe0>
 8007f4e:	464b      	mov	r3, r9
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	bfbc      	itt	lt
 8007f54:	232d      	movlt	r3, #45	@ 0x2d
 8007f56:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007f5a:	4a7e      	ldr	r2, [pc, #504]	@ (8008154 <_printf_float+0x2d4>)
 8007f5c:	4b7e      	ldr	r3, [pc, #504]	@ (8008158 <_printf_float+0x2d8>)
 8007f5e:	e7d4      	b.n	8007f0a <_printf_float+0x8a>
 8007f60:	6863      	ldr	r3, [r4, #4]
 8007f62:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007f66:	9206      	str	r2, [sp, #24]
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	d13b      	bne.n	8007fe4 <_printf_float+0x164>
 8007f6c:	2306      	movs	r3, #6
 8007f6e:	6063      	str	r3, [r4, #4]
 8007f70:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007f74:	2300      	movs	r3, #0
 8007f76:	6022      	str	r2, [r4, #0]
 8007f78:	9303      	str	r3, [sp, #12]
 8007f7a:	ab0a      	add	r3, sp, #40	@ 0x28
 8007f7c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007f80:	ab09      	add	r3, sp, #36	@ 0x24
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	6861      	ldr	r1, [r4, #4]
 8007f86:	ec49 8b10 	vmov	d0, r8, r9
 8007f8a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007f8e:	4628      	mov	r0, r5
 8007f90:	f7ff fed6 	bl	8007d40 <__cvt>
 8007f94:	9b06      	ldr	r3, [sp, #24]
 8007f96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f98:	2b47      	cmp	r3, #71	@ 0x47
 8007f9a:	4680      	mov	r8, r0
 8007f9c:	d129      	bne.n	8007ff2 <_printf_float+0x172>
 8007f9e:	1cc8      	adds	r0, r1, #3
 8007fa0:	db02      	blt.n	8007fa8 <_printf_float+0x128>
 8007fa2:	6863      	ldr	r3, [r4, #4]
 8007fa4:	4299      	cmp	r1, r3
 8007fa6:	dd41      	ble.n	800802c <_printf_float+0x1ac>
 8007fa8:	f1aa 0a02 	sub.w	sl, sl, #2
 8007fac:	fa5f fa8a 	uxtb.w	sl, sl
 8007fb0:	3901      	subs	r1, #1
 8007fb2:	4652      	mov	r2, sl
 8007fb4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007fb8:	9109      	str	r1, [sp, #36]	@ 0x24
 8007fba:	f7ff ff26 	bl	8007e0a <__exponent>
 8007fbe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007fc0:	1813      	adds	r3, r2, r0
 8007fc2:	2a01      	cmp	r2, #1
 8007fc4:	4681      	mov	r9, r0
 8007fc6:	6123      	str	r3, [r4, #16]
 8007fc8:	dc02      	bgt.n	8007fd0 <_printf_float+0x150>
 8007fca:	6822      	ldr	r2, [r4, #0]
 8007fcc:	07d2      	lsls	r2, r2, #31
 8007fce:	d501      	bpl.n	8007fd4 <_printf_float+0x154>
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	6123      	str	r3, [r4, #16]
 8007fd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d0a2      	beq.n	8007f22 <_printf_float+0xa2>
 8007fdc:	232d      	movs	r3, #45	@ 0x2d
 8007fde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fe2:	e79e      	b.n	8007f22 <_printf_float+0xa2>
 8007fe4:	9a06      	ldr	r2, [sp, #24]
 8007fe6:	2a47      	cmp	r2, #71	@ 0x47
 8007fe8:	d1c2      	bne.n	8007f70 <_printf_float+0xf0>
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1c0      	bne.n	8007f70 <_printf_float+0xf0>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e7bd      	b.n	8007f6e <_printf_float+0xee>
 8007ff2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ff6:	d9db      	bls.n	8007fb0 <_printf_float+0x130>
 8007ff8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007ffc:	d118      	bne.n	8008030 <_printf_float+0x1b0>
 8007ffe:	2900      	cmp	r1, #0
 8008000:	6863      	ldr	r3, [r4, #4]
 8008002:	dd0b      	ble.n	800801c <_printf_float+0x19c>
 8008004:	6121      	str	r1, [r4, #16]
 8008006:	b913      	cbnz	r3, 800800e <_printf_float+0x18e>
 8008008:	6822      	ldr	r2, [r4, #0]
 800800a:	07d0      	lsls	r0, r2, #31
 800800c:	d502      	bpl.n	8008014 <_printf_float+0x194>
 800800e:	3301      	adds	r3, #1
 8008010:	440b      	add	r3, r1
 8008012:	6123      	str	r3, [r4, #16]
 8008014:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008016:	f04f 0900 	mov.w	r9, #0
 800801a:	e7db      	b.n	8007fd4 <_printf_float+0x154>
 800801c:	b913      	cbnz	r3, 8008024 <_printf_float+0x1a4>
 800801e:	6822      	ldr	r2, [r4, #0]
 8008020:	07d2      	lsls	r2, r2, #31
 8008022:	d501      	bpl.n	8008028 <_printf_float+0x1a8>
 8008024:	3302      	adds	r3, #2
 8008026:	e7f4      	b.n	8008012 <_printf_float+0x192>
 8008028:	2301      	movs	r3, #1
 800802a:	e7f2      	b.n	8008012 <_printf_float+0x192>
 800802c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008032:	4299      	cmp	r1, r3
 8008034:	db05      	blt.n	8008042 <_printf_float+0x1c2>
 8008036:	6823      	ldr	r3, [r4, #0]
 8008038:	6121      	str	r1, [r4, #16]
 800803a:	07d8      	lsls	r0, r3, #31
 800803c:	d5ea      	bpl.n	8008014 <_printf_float+0x194>
 800803e:	1c4b      	adds	r3, r1, #1
 8008040:	e7e7      	b.n	8008012 <_printf_float+0x192>
 8008042:	2900      	cmp	r1, #0
 8008044:	bfd4      	ite	le
 8008046:	f1c1 0202 	rsble	r2, r1, #2
 800804a:	2201      	movgt	r2, #1
 800804c:	4413      	add	r3, r2
 800804e:	e7e0      	b.n	8008012 <_printf_float+0x192>
 8008050:	6823      	ldr	r3, [r4, #0]
 8008052:	055a      	lsls	r2, r3, #21
 8008054:	d407      	bmi.n	8008066 <_printf_float+0x1e6>
 8008056:	6923      	ldr	r3, [r4, #16]
 8008058:	4642      	mov	r2, r8
 800805a:	4631      	mov	r1, r6
 800805c:	4628      	mov	r0, r5
 800805e:	47b8      	blx	r7
 8008060:	3001      	adds	r0, #1
 8008062:	d12b      	bne.n	80080bc <_printf_float+0x23c>
 8008064:	e767      	b.n	8007f36 <_printf_float+0xb6>
 8008066:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800806a:	f240 80dd 	bls.w	8008228 <_printf_float+0x3a8>
 800806e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008072:	2200      	movs	r2, #0
 8008074:	2300      	movs	r3, #0
 8008076:	f7f8 fd47 	bl	8000b08 <__aeabi_dcmpeq>
 800807a:	2800      	cmp	r0, #0
 800807c:	d033      	beq.n	80080e6 <_printf_float+0x266>
 800807e:	4a37      	ldr	r2, [pc, #220]	@ (800815c <_printf_float+0x2dc>)
 8008080:	2301      	movs	r3, #1
 8008082:	4631      	mov	r1, r6
 8008084:	4628      	mov	r0, r5
 8008086:	47b8      	blx	r7
 8008088:	3001      	adds	r0, #1
 800808a:	f43f af54 	beq.w	8007f36 <_printf_float+0xb6>
 800808e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008092:	4543      	cmp	r3, r8
 8008094:	db02      	blt.n	800809c <_printf_float+0x21c>
 8008096:	6823      	ldr	r3, [r4, #0]
 8008098:	07d8      	lsls	r0, r3, #31
 800809a:	d50f      	bpl.n	80080bc <_printf_float+0x23c>
 800809c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080a0:	4631      	mov	r1, r6
 80080a2:	4628      	mov	r0, r5
 80080a4:	47b8      	blx	r7
 80080a6:	3001      	adds	r0, #1
 80080a8:	f43f af45 	beq.w	8007f36 <_printf_float+0xb6>
 80080ac:	f04f 0900 	mov.w	r9, #0
 80080b0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80080b4:	f104 0a1a 	add.w	sl, r4, #26
 80080b8:	45c8      	cmp	r8, r9
 80080ba:	dc09      	bgt.n	80080d0 <_printf_float+0x250>
 80080bc:	6823      	ldr	r3, [r4, #0]
 80080be:	079b      	lsls	r3, r3, #30
 80080c0:	f100 8103 	bmi.w	80082ca <_printf_float+0x44a>
 80080c4:	68e0      	ldr	r0, [r4, #12]
 80080c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080c8:	4298      	cmp	r0, r3
 80080ca:	bfb8      	it	lt
 80080cc:	4618      	movlt	r0, r3
 80080ce:	e734      	b.n	8007f3a <_printf_float+0xba>
 80080d0:	2301      	movs	r3, #1
 80080d2:	4652      	mov	r2, sl
 80080d4:	4631      	mov	r1, r6
 80080d6:	4628      	mov	r0, r5
 80080d8:	47b8      	blx	r7
 80080da:	3001      	adds	r0, #1
 80080dc:	f43f af2b 	beq.w	8007f36 <_printf_float+0xb6>
 80080e0:	f109 0901 	add.w	r9, r9, #1
 80080e4:	e7e8      	b.n	80080b8 <_printf_float+0x238>
 80080e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	dc39      	bgt.n	8008160 <_printf_float+0x2e0>
 80080ec:	4a1b      	ldr	r2, [pc, #108]	@ (800815c <_printf_float+0x2dc>)
 80080ee:	2301      	movs	r3, #1
 80080f0:	4631      	mov	r1, r6
 80080f2:	4628      	mov	r0, r5
 80080f4:	47b8      	blx	r7
 80080f6:	3001      	adds	r0, #1
 80080f8:	f43f af1d 	beq.w	8007f36 <_printf_float+0xb6>
 80080fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008100:	ea59 0303 	orrs.w	r3, r9, r3
 8008104:	d102      	bne.n	800810c <_printf_float+0x28c>
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	07d9      	lsls	r1, r3, #31
 800810a:	d5d7      	bpl.n	80080bc <_printf_float+0x23c>
 800810c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008110:	4631      	mov	r1, r6
 8008112:	4628      	mov	r0, r5
 8008114:	47b8      	blx	r7
 8008116:	3001      	adds	r0, #1
 8008118:	f43f af0d 	beq.w	8007f36 <_printf_float+0xb6>
 800811c:	f04f 0a00 	mov.w	sl, #0
 8008120:	f104 0b1a 	add.w	fp, r4, #26
 8008124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008126:	425b      	negs	r3, r3
 8008128:	4553      	cmp	r3, sl
 800812a:	dc01      	bgt.n	8008130 <_printf_float+0x2b0>
 800812c:	464b      	mov	r3, r9
 800812e:	e793      	b.n	8008058 <_printf_float+0x1d8>
 8008130:	2301      	movs	r3, #1
 8008132:	465a      	mov	r2, fp
 8008134:	4631      	mov	r1, r6
 8008136:	4628      	mov	r0, r5
 8008138:	47b8      	blx	r7
 800813a:	3001      	adds	r0, #1
 800813c:	f43f aefb 	beq.w	8007f36 <_printf_float+0xb6>
 8008140:	f10a 0a01 	add.w	sl, sl, #1
 8008144:	e7ee      	b.n	8008124 <_printf_float+0x2a4>
 8008146:	bf00      	nop
 8008148:	7fefffff 	.word	0x7fefffff
 800814c:	0800c728 	.word	0x0800c728
 8008150:	0800c72c 	.word	0x0800c72c
 8008154:	0800c730 	.word	0x0800c730
 8008158:	0800c734 	.word	0x0800c734
 800815c:	0800c738 	.word	0x0800c738
 8008160:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008162:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008166:	4553      	cmp	r3, sl
 8008168:	bfa8      	it	ge
 800816a:	4653      	movge	r3, sl
 800816c:	2b00      	cmp	r3, #0
 800816e:	4699      	mov	r9, r3
 8008170:	dc36      	bgt.n	80081e0 <_printf_float+0x360>
 8008172:	f04f 0b00 	mov.w	fp, #0
 8008176:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800817a:	f104 021a 	add.w	r2, r4, #26
 800817e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008180:	9306      	str	r3, [sp, #24]
 8008182:	eba3 0309 	sub.w	r3, r3, r9
 8008186:	455b      	cmp	r3, fp
 8008188:	dc31      	bgt.n	80081ee <_printf_float+0x36e>
 800818a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800818c:	459a      	cmp	sl, r3
 800818e:	dc3a      	bgt.n	8008206 <_printf_float+0x386>
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	07da      	lsls	r2, r3, #31
 8008194:	d437      	bmi.n	8008206 <_printf_float+0x386>
 8008196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008198:	ebaa 0903 	sub.w	r9, sl, r3
 800819c:	9b06      	ldr	r3, [sp, #24]
 800819e:	ebaa 0303 	sub.w	r3, sl, r3
 80081a2:	4599      	cmp	r9, r3
 80081a4:	bfa8      	it	ge
 80081a6:	4699      	movge	r9, r3
 80081a8:	f1b9 0f00 	cmp.w	r9, #0
 80081ac:	dc33      	bgt.n	8008216 <_printf_float+0x396>
 80081ae:	f04f 0800 	mov.w	r8, #0
 80081b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081b6:	f104 0b1a 	add.w	fp, r4, #26
 80081ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081bc:	ebaa 0303 	sub.w	r3, sl, r3
 80081c0:	eba3 0309 	sub.w	r3, r3, r9
 80081c4:	4543      	cmp	r3, r8
 80081c6:	f77f af79 	ble.w	80080bc <_printf_float+0x23c>
 80081ca:	2301      	movs	r3, #1
 80081cc:	465a      	mov	r2, fp
 80081ce:	4631      	mov	r1, r6
 80081d0:	4628      	mov	r0, r5
 80081d2:	47b8      	blx	r7
 80081d4:	3001      	adds	r0, #1
 80081d6:	f43f aeae 	beq.w	8007f36 <_printf_float+0xb6>
 80081da:	f108 0801 	add.w	r8, r8, #1
 80081de:	e7ec      	b.n	80081ba <_printf_float+0x33a>
 80081e0:	4642      	mov	r2, r8
 80081e2:	4631      	mov	r1, r6
 80081e4:	4628      	mov	r0, r5
 80081e6:	47b8      	blx	r7
 80081e8:	3001      	adds	r0, #1
 80081ea:	d1c2      	bne.n	8008172 <_printf_float+0x2f2>
 80081ec:	e6a3      	b.n	8007f36 <_printf_float+0xb6>
 80081ee:	2301      	movs	r3, #1
 80081f0:	4631      	mov	r1, r6
 80081f2:	4628      	mov	r0, r5
 80081f4:	9206      	str	r2, [sp, #24]
 80081f6:	47b8      	blx	r7
 80081f8:	3001      	adds	r0, #1
 80081fa:	f43f ae9c 	beq.w	8007f36 <_printf_float+0xb6>
 80081fe:	9a06      	ldr	r2, [sp, #24]
 8008200:	f10b 0b01 	add.w	fp, fp, #1
 8008204:	e7bb      	b.n	800817e <_printf_float+0x2fe>
 8008206:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800820a:	4631      	mov	r1, r6
 800820c:	4628      	mov	r0, r5
 800820e:	47b8      	blx	r7
 8008210:	3001      	adds	r0, #1
 8008212:	d1c0      	bne.n	8008196 <_printf_float+0x316>
 8008214:	e68f      	b.n	8007f36 <_printf_float+0xb6>
 8008216:	9a06      	ldr	r2, [sp, #24]
 8008218:	464b      	mov	r3, r9
 800821a:	4442      	add	r2, r8
 800821c:	4631      	mov	r1, r6
 800821e:	4628      	mov	r0, r5
 8008220:	47b8      	blx	r7
 8008222:	3001      	adds	r0, #1
 8008224:	d1c3      	bne.n	80081ae <_printf_float+0x32e>
 8008226:	e686      	b.n	8007f36 <_printf_float+0xb6>
 8008228:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800822c:	f1ba 0f01 	cmp.w	sl, #1
 8008230:	dc01      	bgt.n	8008236 <_printf_float+0x3b6>
 8008232:	07db      	lsls	r3, r3, #31
 8008234:	d536      	bpl.n	80082a4 <_printf_float+0x424>
 8008236:	2301      	movs	r3, #1
 8008238:	4642      	mov	r2, r8
 800823a:	4631      	mov	r1, r6
 800823c:	4628      	mov	r0, r5
 800823e:	47b8      	blx	r7
 8008240:	3001      	adds	r0, #1
 8008242:	f43f ae78 	beq.w	8007f36 <_printf_float+0xb6>
 8008246:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800824a:	4631      	mov	r1, r6
 800824c:	4628      	mov	r0, r5
 800824e:	47b8      	blx	r7
 8008250:	3001      	adds	r0, #1
 8008252:	f43f ae70 	beq.w	8007f36 <_printf_float+0xb6>
 8008256:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800825a:	2200      	movs	r2, #0
 800825c:	2300      	movs	r3, #0
 800825e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008262:	f7f8 fc51 	bl	8000b08 <__aeabi_dcmpeq>
 8008266:	b9c0      	cbnz	r0, 800829a <_printf_float+0x41a>
 8008268:	4653      	mov	r3, sl
 800826a:	f108 0201 	add.w	r2, r8, #1
 800826e:	4631      	mov	r1, r6
 8008270:	4628      	mov	r0, r5
 8008272:	47b8      	blx	r7
 8008274:	3001      	adds	r0, #1
 8008276:	d10c      	bne.n	8008292 <_printf_float+0x412>
 8008278:	e65d      	b.n	8007f36 <_printf_float+0xb6>
 800827a:	2301      	movs	r3, #1
 800827c:	465a      	mov	r2, fp
 800827e:	4631      	mov	r1, r6
 8008280:	4628      	mov	r0, r5
 8008282:	47b8      	blx	r7
 8008284:	3001      	adds	r0, #1
 8008286:	f43f ae56 	beq.w	8007f36 <_printf_float+0xb6>
 800828a:	f108 0801 	add.w	r8, r8, #1
 800828e:	45d0      	cmp	r8, sl
 8008290:	dbf3      	blt.n	800827a <_printf_float+0x3fa>
 8008292:	464b      	mov	r3, r9
 8008294:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008298:	e6df      	b.n	800805a <_printf_float+0x1da>
 800829a:	f04f 0800 	mov.w	r8, #0
 800829e:	f104 0b1a 	add.w	fp, r4, #26
 80082a2:	e7f4      	b.n	800828e <_printf_float+0x40e>
 80082a4:	2301      	movs	r3, #1
 80082a6:	4642      	mov	r2, r8
 80082a8:	e7e1      	b.n	800826e <_printf_float+0x3ee>
 80082aa:	2301      	movs	r3, #1
 80082ac:	464a      	mov	r2, r9
 80082ae:	4631      	mov	r1, r6
 80082b0:	4628      	mov	r0, r5
 80082b2:	47b8      	blx	r7
 80082b4:	3001      	adds	r0, #1
 80082b6:	f43f ae3e 	beq.w	8007f36 <_printf_float+0xb6>
 80082ba:	f108 0801 	add.w	r8, r8, #1
 80082be:	68e3      	ldr	r3, [r4, #12]
 80082c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80082c2:	1a5b      	subs	r3, r3, r1
 80082c4:	4543      	cmp	r3, r8
 80082c6:	dcf0      	bgt.n	80082aa <_printf_float+0x42a>
 80082c8:	e6fc      	b.n	80080c4 <_printf_float+0x244>
 80082ca:	f04f 0800 	mov.w	r8, #0
 80082ce:	f104 0919 	add.w	r9, r4, #25
 80082d2:	e7f4      	b.n	80082be <_printf_float+0x43e>

080082d4 <_printf_common>:
 80082d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d8:	4616      	mov	r6, r2
 80082da:	4698      	mov	r8, r3
 80082dc:	688a      	ldr	r2, [r1, #8]
 80082de:	690b      	ldr	r3, [r1, #16]
 80082e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082e4:	4293      	cmp	r3, r2
 80082e6:	bfb8      	it	lt
 80082e8:	4613      	movlt	r3, r2
 80082ea:	6033      	str	r3, [r6, #0]
 80082ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80082f0:	4607      	mov	r7, r0
 80082f2:	460c      	mov	r4, r1
 80082f4:	b10a      	cbz	r2, 80082fa <_printf_common+0x26>
 80082f6:	3301      	adds	r3, #1
 80082f8:	6033      	str	r3, [r6, #0]
 80082fa:	6823      	ldr	r3, [r4, #0]
 80082fc:	0699      	lsls	r1, r3, #26
 80082fe:	bf42      	ittt	mi
 8008300:	6833      	ldrmi	r3, [r6, #0]
 8008302:	3302      	addmi	r3, #2
 8008304:	6033      	strmi	r3, [r6, #0]
 8008306:	6825      	ldr	r5, [r4, #0]
 8008308:	f015 0506 	ands.w	r5, r5, #6
 800830c:	d106      	bne.n	800831c <_printf_common+0x48>
 800830e:	f104 0a19 	add.w	sl, r4, #25
 8008312:	68e3      	ldr	r3, [r4, #12]
 8008314:	6832      	ldr	r2, [r6, #0]
 8008316:	1a9b      	subs	r3, r3, r2
 8008318:	42ab      	cmp	r3, r5
 800831a:	dc26      	bgt.n	800836a <_printf_common+0x96>
 800831c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008320:	6822      	ldr	r2, [r4, #0]
 8008322:	3b00      	subs	r3, #0
 8008324:	bf18      	it	ne
 8008326:	2301      	movne	r3, #1
 8008328:	0692      	lsls	r2, r2, #26
 800832a:	d42b      	bmi.n	8008384 <_printf_common+0xb0>
 800832c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008330:	4641      	mov	r1, r8
 8008332:	4638      	mov	r0, r7
 8008334:	47c8      	blx	r9
 8008336:	3001      	adds	r0, #1
 8008338:	d01e      	beq.n	8008378 <_printf_common+0xa4>
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	6922      	ldr	r2, [r4, #16]
 800833e:	f003 0306 	and.w	r3, r3, #6
 8008342:	2b04      	cmp	r3, #4
 8008344:	bf02      	ittt	eq
 8008346:	68e5      	ldreq	r5, [r4, #12]
 8008348:	6833      	ldreq	r3, [r6, #0]
 800834a:	1aed      	subeq	r5, r5, r3
 800834c:	68a3      	ldr	r3, [r4, #8]
 800834e:	bf0c      	ite	eq
 8008350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008354:	2500      	movne	r5, #0
 8008356:	4293      	cmp	r3, r2
 8008358:	bfc4      	itt	gt
 800835a:	1a9b      	subgt	r3, r3, r2
 800835c:	18ed      	addgt	r5, r5, r3
 800835e:	2600      	movs	r6, #0
 8008360:	341a      	adds	r4, #26
 8008362:	42b5      	cmp	r5, r6
 8008364:	d11a      	bne.n	800839c <_printf_common+0xc8>
 8008366:	2000      	movs	r0, #0
 8008368:	e008      	b.n	800837c <_printf_common+0xa8>
 800836a:	2301      	movs	r3, #1
 800836c:	4652      	mov	r2, sl
 800836e:	4641      	mov	r1, r8
 8008370:	4638      	mov	r0, r7
 8008372:	47c8      	blx	r9
 8008374:	3001      	adds	r0, #1
 8008376:	d103      	bne.n	8008380 <_printf_common+0xac>
 8008378:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800837c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008380:	3501      	adds	r5, #1
 8008382:	e7c6      	b.n	8008312 <_printf_common+0x3e>
 8008384:	18e1      	adds	r1, r4, r3
 8008386:	1c5a      	adds	r2, r3, #1
 8008388:	2030      	movs	r0, #48	@ 0x30
 800838a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800838e:	4422      	add	r2, r4
 8008390:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008394:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008398:	3302      	adds	r3, #2
 800839a:	e7c7      	b.n	800832c <_printf_common+0x58>
 800839c:	2301      	movs	r3, #1
 800839e:	4622      	mov	r2, r4
 80083a0:	4641      	mov	r1, r8
 80083a2:	4638      	mov	r0, r7
 80083a4:	47c8      	blx	r9
 80083a6:	3001      	adds	r0, #1
 80083a8:	d0e6      	beq.n	8008378 <_printf_common+0xa4>
 80083aa:	3601      	adds	r6, #1
 80083ac:	e7d9      	b.n	8008362 <_printf_common+0x8e>
	...

080083b0 <_printf_i>:
 80083b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083b4:	7e0f      	ldrb	r7, [r1, #24]
 80083b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80083b8:	2f78      	cmp	r7, #120	@ 0x78
 80083ba:	4691      	mov	r9, r2
 80083bc:	4680      	mov	r8, r0
 80083be:	460c      	mov	r4, r1
 80083c0:	469a      	mov	sl, r3
 80083c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083c6:	d807      	bhi.n	80083d8 <_printf_i+0x28>
 80083c8:	2f62      	cmp	r7, #98	@ 0x62
 80083ca:	d80a      	bhi.n	80083e2 <_printf_i+0x32>
 80083cc:	2f00      	cmp	r7, #0
 80083ce:	f000 80d2 	beq.w	8008576 <_printf_i+0x1c6>
 80083d2:	2f58      	cmp	r7, #88	@ 0x58
 80083d4:	f000 80b9 	beq.w	800854a <_printf_i+0x19a>
 80083d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80083e0:	e03a      	b.n	8008458 <_printf_i+0xa8>
 80083e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80083e6:	2b15      	cmp	r3, #21
 80083e8:	d8f6      	bhi.n	80083d8 <_printf_i+0x28>
 80083ea:	a101      	add	r1, pc, #4	@ (adr r1, 80083f0 <_printf_i+0x40>)
 80083ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083f0:	08008449 	.word	0x08008449
 80083f4:	0800845d 	.word	0x0800845d
 80083f8:	080083d9 	.word	0x080083d9
 80083fc:	080083d9 	.word	0x080083d9
 8008400:	080083d9 	.word	0x080083d9
 8008404:	080083d9 	.word	0x080083d9
 8008408:	0800845d 	.word	0x0800845d
 800840c:	080083d9 	.word	0x080083d9
 8008410:	080083d9 	.word	0x080083d9
 8008414:	080083d9 	.word	0x080083d9
 8008418:	080083d9 	.word	0x080083d9
 800841c:	0800855d 	.word	0x0800855d
 8008420:	08008487 	.word	0x08008487
 8008424:	08008517 	.word	0x08008517
 8008428:	080083d9 	.word	0x080083d9
 800842c:	080083d9 	.word	0x080083d9
 8008430:	0800857f 	.word	0x0800857f
 8008434:	080083d9 	.word	0x080083d9
 8008438:	08008487 	.word	0x08008487
 800843c:	080083d9 	.word	0x080083d9
 8008440:	080083d9 	.word	0x080083d9
 8008444:	0800851f 	.word	0x0800851f
 8008448:	6833      	ldr	r3, [r6, #0]
 800844a:	1d1a      	adds	r2, r3, #4
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	6032      	str	r2, [r6, #0]
 8008450:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008454:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008458:	2301      	movs	r3, #1
 800845a:	e09d      	b.n	8008598 <_printf_i+0x1e8>
 800845c:	6833      	ldr	r3, [r6, #0]
 800845e:	6820      	ldr	r0, [r4, #0]
 8008460:	1d19      	adds	r1, r3, #4
 8008462:	6031      	str	r1, [r6, #0]
 8008464:	0606      	lsls	r6, r0, #24
 8008466:	d501      	bpl.n	800846c <_printf_i+0xbc>
 8008468:	681d      	ldr	r5, [r3, #0]
 800846a:	e003      	b.n	8008474 <_printf_i+0xc4>
 800846c:	0645      	lsls	r5, r0, #25
 800846e:	d5fb      	bpl.n	8008468 <_printf_i+0xb8>
 8008470:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008474:	2d00      	cmp	r5, #0
 8008476:	da03      	bge.n	8008480 <_printf_i+0xd0>
 8008478:	232d      	movs	r3, #45	@ 0x2d
 800847a:	426d      	negs	r5, r5
 800847c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008480:	4859      	ldr	r0, [pc, #356]	@ (80085e8 <_printf_i+0x238>)
 8008482:	230a      	movs	r3, #10
 8008484:	e011      	b.n	80084aa <_printf_i+0xfa>
 8008486:	6821      	ldr	r1, [r4, #0]
 8008488:	6833      	ldr	r3, [r6, #0]
 800848a:	0608      	lsls	r0, r1, #24
 800848c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008490:	d402      	bmi.n	8008498 <_printf_i+0xe8>
 8008492:	0649      	lsls	r1, r1, #25
 8008494:	bf48      	it	mi
 8008496:	b2ad      	uxthmi	r5, r5
 8008498:	2f6f      	cmp	r7, #111	@ 0x6f
 800849a:	4853      	ldr	r0, [pc, #332]	@ (80085e8 <_printf_i+0x238>)
 800849c:	6033      	str	r3, [r6, #0]
 800849e:	bf14      	ite	ne
 80084a0:	230a      	movne	r3, #10
 80084a2:	2308      	moveq	r3, #8
 80084a4:	2100      	movs	r1, #0
 80084a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80084aa:	6866      	ldr	r6, [r4, #4]
 80084ac:	60a6      	str	r6, [r4, #8]
 80084ae:	2e00      	cmp	r6, #0
 80084b0:	bfa2      	ittt	ge
 80084b2:	6821      	ldrge	r1, [r4, #0]
 80084b4:	f021 0104 	bicge.w	r1, r1, #4
 80084b8:	6021      	strge	r1, [r4, #0]
 80084ba:	b90d      	cbnz	r5, 80084c0 <_printf_i+0x110>
 80084bc:	2e00      	cmp	r6, #0
 80084be:	d04b      	beq.n	8008558 <_printf_i+0x1a8>
 80084c0:	4616      	mov	r6, r2
 80084c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80084c6:	fb03 5711 	mls	r7, r3, r1, r5
 80084ca:	5dc7      	ldrb	r7, [r0, r7]
 80084cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084d0:	462f      	mov	r7, r5
 80084d2:	42bb      	cmp	r3, r7
 80084d4:	460d      	mov	r5, r1
 80084d6:	d9f4      	bls.n	80084c2 <_printf_i+0x112>
 80084d8:	2b08      	cmp	r3, #8
 80084da:	d10b      	bne.n	80084f4 <_printf_i+0x144>
 80084dc:	6823      	ldr	r3, [r4, #0]
 80084de:	07df      	lsls	r7, r3, #31
 80084e0:	d508      	bpl.n	80084f4 <_printf_i+0x144>
 80084e2:	6923      	ldr	r3, [r4, #16]
 80084e4:	6861      	ldr	r1, [r4, #4]
 80084e6:	4299      	cmp	r1, r3
 80084e8:	bfde      	ittt	le
 80084ea:	2330      	movle	r3, #48	@ 0x30
 80084ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084f0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80084f4:	1b92      	subs	r2, r2, r6
 80084f6:	6122      	str	r2, [r4, #16]
 80084f8:	f8cd a000 	str.w	sl, [sp]
 80084fc:	464b      	mov	r3, r9
 80084fe:	aa03      	add	r2, sp, #12
 8008500:	4621      	mov	r1, r4
 8008502:	4640      	mov	r0, r8
 8008504:	f7ff fee6 	bl	80082d4 <_printf_common>
 8008508:	3001      	adds	r0, #1
 800850a:	d14a      	bne.n	80085a2 <_printf_i+0x1f2>
 800850c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008510:	b004      	add	sp, #16
 8008512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008516:	6823      	ldr	r3, [r4, #0]
 8008518:	f043 0320 	orr.w	r3, r3, #32
 800851c:	6023      	str	r3, [r4, #0]
 800851e:	4833      	ldr	r0, [pc, #204]	@ (80085ec <_printf_i+0x23c>)
 8008520:	2778      	movs	r7, #120	@ 0x78
 8008522:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	6831      	ldr	r1, [r6, #0]
 800852a:	061f      	lsls	r7, r3, #24
 800852c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008530:	d402      	bmi.n	8008538 <_printf_i+0x188>
 8008532:	065f      	lsls	r7, r3, #25
 8008534:	bf48      	it	mi
 8008536:	b2ad      	uxthmi	r5, r5
 8008538:	6031      	str	r1, [r6, #0]
 800853a:	07d9      	lsls	r1, r3, #31
 800853c:	bf44      	itt	mi
 800853e:	f043 0320 	orrmi.w	r3, r3, #32
 8008542:	6023      	strmi	r3, [r4, #0]
 8008544:	b11d      	cbz	r5, 800854e <_printf_i+0x19e>
 8008546:	2310      	movs	r3, #16
 8008548:	e7ac      	b.n	80084a4 <_printf_i+0xf4>
 800854a:	4827      	ldr	r0, [pc, #156]	@ (80085e8 <_printf_i+0x238>)
 800854c:	e7e9      	b.n	8008522 <_printf_i+0x172>
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	f023 0320 	bic.w	r3, r3, #32
 8008554:	6023      	str	r3, [r4, #0]
 8008556:	e7f6      	b.n	8008546 <_printf_i+0x196>
 8008558:	4616      	mov	r6, r2
 800855a:	e7bd      	b.n	80084d8 <_printf_i+0x128>
 800855c:	6833      	ldr	r3, [r6, #0]
 800855e:	6825      	ldr	r5, [r4, #0]
 8008560:	6961      	ldr	r1, [r4, #20]
 8008562:	1d18      	adds	r0, r3, #4
 8008564:	6030      	str	r0, [r6, #0]
 8008566:	062e      	lsls	r6, r5, #24
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	d501      	bpl.n	8008570 <_printf_i+0x1c0>
 800856c:	6019      	str	r1, [r3, #0]
 800856e:	e002      	b.n	8008576 <_printf_i+0x1c6>
 8008570:	0668      	lsls	r0, r5, #25
 8008572:	d5fb      	bpl.n	800856c <_printf_i+0x1bc>
 8008574:	8019      	strh	r1, [r3, #0]
 8008576:	2300      	movs	r3, #0
 8008578:	6123      	str	r3, [r4, #16]
 800857a:	4616      	mov	r6, r2
 800857c:	e7bc      	b.n	80084f8 <_printf_i+0x148>
 800857e:	6833      	ldr	r3, [r6, #0]
 8008580:	1d1a      	adds	r2, r3, #4
 8008582:	6032      	str	r2, [r6, #0]
 8008584:	681e      	ldr	r6, [r3, #0]
 8008586:	6862      	ldr	r2, [r4, #4]
 8008588:	2100      	movs	r1, #0
 800858a:	4630      	mov	r0, r6
 800858c:	f7f7 fe40 	bl	8000210 <memchr>
 8008590:	b108      	cbz	r0, 8008596 <_printf_i+0x1e6>
 8008592:	1b80      	subs	r0, r0, r6
 8008594:	6060      	str	r0, [r4, #4]
 8008596:	6863      	ldr	r3, [r4, #4]
 8008598:	6123      	str	r3, [r4, #16]
 800859a:	2300      	movs	r3, #0
 800859c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085a0:	e7aa      	b.n	80084f8 <_printf_i+0x148>
 80085a2:	6923      	ldr	r3, [r4, #16]
 80085a4:	4632      	mov	r2, r6
 80085a6:	4649      	mov	r1, r9
 80085a8:	4640      	mov	r0, r8
 80085aa:	47d0      	blx	sl
 80085ac:	3001      	adds	r0, #1
 80085ae:	d0ad      	beq.n	800850c <_printf_i+0x15c>
 80085b0:	6823      	ldr	r3, [r4, #0]
 80085b2:	079b      	lsls	r3, r3, #30
 80085b4:	d413      	bmi.n	80085de <_printf_i+0x22e>
 80085b6:	68e0      	ldr	r0, [r4, #12]
 80085b8:	9b03      	ldr	r3, [sp, #12]
 80085ba:	4298      	cmp	r0, r3
 80085bc:	bfb8      	it	lt
 80085be:	4618      	movlt	r0, r3
 80085c0:	e7a6      	b.n	8008510 <_printf_i+0x160>
 80085c2:	2301      	movs	r3, #1
 80085c4:	4632      	mov	r2, r6
 80085c6:	4649      	mov	r1, r9
 80085c8:	4640      	mov	r0, r8
 80085ca:	47d0      	blx	sl
 80085cc:	3001      	adds	r0, #1
 80085ce:	d09d      	beq.n	800850c <_printf_i+0x15c>
 80085d0:	3501      	adds	r5, #1
 80085d2:	68e3      	ldr	r3, [r4, #12]
 80085d4:	9903      	ldr	r1, [sp, #12]
 80085d6:	1a5b      	subs	r3, r3, r1
 80085d8:	42ab      	cmp	r3, r5
 80085da:	dcf2      	bgt.n	80085c2 <_printf_i+0x212>
 80085dc:	e7eb      	b.n	80085b6 <_printf_i+0x206>
 80085de:	2500      	movs	r5, #0
 80085e0:	f104 0619 	add.w	r6, r4, #25
 80085e4:	e7f5      	b.n	80085d2 <_printf_i+0x222>
 80085e6:	bf00      	nop
 80085e8:	0800c73a 	.word	0x0800c73a
 80085ec:	0800c74b 	.word	0x0800c74b

080085f0 <_scanf_float>:
 80085f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f4:	b087      	sub	sp, #28
 80085f6:	4617      	mov	r7, r2
 80085f8:	9303      	str	r3, [sp, #12]
 80085fa:	688b      	ldr	r3, [r1, #8]
 80085fc:	1e5a      	subs	r2, r3, #1
 80085fe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008602:	bf81      	itttt	hi
 8008604:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008608:	eb03 0b05 	addhi.w	fp, r3, r5
 800860c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008610:	608b      	strhi	r3, [r1, #8]
 8008612:	680b      	ldr	r3, [r1, #0]
 8008614:	460a      	mov	r2, r1
 8008616:	f04f 0500 	mov.w	r5, #0
 800861a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800861e:	f842 3b1c 	str.w	r3, [r2], #28
 8008622:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008626:	4680      	mov	r8, r0
 8008628:	460c      	mov	r4, r1
 800862a:	bf98      	it	ls
 800862c:	f04f 0b00 	movls.w	fp, #0
 8008630:	9201      	str	r2, [sp, #4]
 8008632:	4616      	mov	r6, r2
 8008634:	46aa      	mov	sl, r5
 8008636:	46a9      	mov	r9, r5
 8008638:	9502      	str	r5, [sp, #8]
 800863a:	68a2      	ldr	r2, [r4, #8]
 800863c:	b152      	cbz	r2, 8008654 <_scanf_float+0x64>
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	2b4e      	cmp	r3, #78	@ 0x4e
 8008644:	d864      	bhi.n	8008710 <_scanf_float+0x120>
 8008646:	2b40      	cmp	r3, #64	@ 0x40
 8008648:	d83c      	bhi.n	80086c4 <_scanf_float+0xd4>
 800864a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800864e:	b2c8      	uxtb	r0, r1
 8008650:	280e      	cmp	r0, #14
 8008652:	d93a      	bls.n	80086ca <_scanf_float+0xda>
 8008654:	f1b9 0f00 	cmp.w	r9, #0
 8008658:	d003      	beq.n	8008662 <_scanf_float+0x72>
 800865a:	6823      	ldr	r3, [r4, #0]
 800865c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008660:	6023      	str	r3, [r4, #0]
 8008662:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008666:	f1ba 0f01 	cmp.w	sl, #1
 800866a:	f200 8117 	bhi.w	800889c <_scanf_float+0x2ac>
 800866e:	9b01      	ldr	r3, [sp, #4]
 8008670:	429e      	cmp	r6, r3
 8008672:	f200 8108 	bhi.w	8008886 <_scanf_float+0x296>
 8008676:	2001      	movs	r0, #1
 8008678:	b007      	add	sp, #28
 800867a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800867e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008682:	2a0d      	cmp	r2, #13
 8008684:	d8e6      	bhi.n	8008654 <_scanf_float+0x64>
 8008686:	a101      	add	r1, pc, #4	@ (adr r1, 800868c <_scanf_float+0x9c>)
 8008688:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800868c:	080087d3 	.word	0x080087d3
 8008690:	08008655 	.word	0x08008655
 8008694:	08008655 	.word	0x08008655
 8008698:	08008655 	.word	0x08008655
 800869c:	08008833 	.word	0x08008833
 80086a0:	0800880b 	.word	0x0800880b
 80086a4:	08008655 	.word	0x08008655
 80086a8:	08008655 	.word	0x08008655
 80086ac:	080087e1 	.word	0x080087e1
 80086b0:	08008655 	.word	0x08008655
 80086b4:	08008655 	.word	0x08008655
 80086b8:	08008655 	.word	0x08008655
 80086bc:	08008655 	.word	0x08008655
 80086c0:	08008799 	.word	0x08008799
 80086c4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80086c8:	e7db      	b.n	8008682 <_scanf_float+0x92>
 80086ca:	290e      	cmp	r1, #14
 80086cc:	d8c2      	bhi.n	8008654 <_scanf_float+0x64>
 80086ce:	a001      	add	r0, pc, #4	@ (adr r0, 80086d4 <_scanf_float+0xe4>)
 80086d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80086d4:	08008789 	.word	0x08008789
 80086d8:	08008655 	.word	0x08008655
 80086dc:	08008789 	.word	0x08008789
 80086e0:	0800881f 	.word	0x0800881f
 80086e4:	08008655 	.word	0x08008655
 80086e8:	08008731 	.word	0x08008731
 80086ec:	0800876f 	.word	0x0800876f
 80086f0:	0800876f 	.word	0x0800876f
 80086f4:	0800876f 	.word	0x0800876f
 80086f8:	0800876f 	.word	0x0800876f
 80086fc:	0800876f 	.word	0x0800876f
 8008700:	0800876f 	.word	0x0800876f
 8008704:	0800876f 	.word	0x0800876f
 8008708:	0800876f 	.word	0x0800876f
 800870c:	0800876f 	.word	0x0800876f
 8008710:	2b6e      	cmp	r3, #110	@ 0x6e
 8008712:	d809      	bhi.n	8008728 <_scanf_float+0x138>
 8008714:	2b60      	cmp	r3, #96	@ 0x60
 8008716:	d8b2      	bhi.n	800867e <_scanf_float+0x8e>
 8008718:	2b54      	cmp	r3, #84	@ 0x54
 800871a:	d07b      	beq.n	8008814 <_scanf_float+0x224>
 800871c:	2b59      	cmp	r3, #89	@ 0x59
 800871e:	d199      	bne.n	8008654 <_scanf_float+0x64>
 8008720:	2d07      	cmp	r5, #7
 8008722:	d197      	bne.n	8008654 <_scanf_float+0x64>
 8008724:	2508      	movs	r5, #8
 8008726:	e02c      	b.n	8008782 <_scanf_float+0x192>
 8008728:	2b74      	cmp	r3, #116	@ 0x74
 800872a:	d073      	beq.n	8008814 <_scanf_float+0x224>
 800872c:	2b79      	cmp	r3, #121	@ 0x79
 800872e:	e7f6      	b.n	800871e <_scanf_float+0x12e>
 8008730:	6821      	ldr	r1, [r4, #0]
 8008732:	05c8      	lsls	r0, r1, #23
 8008734:	d51b      	bpl.n	800876e <_scanf_float+0x17e>
 8008736:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800873a:	6021      	str	r1, [r4, #0]
 800873c:	f109 0901 	add.w	r9, r9, #1
 8008740:	f1bb 0f00 	cmp.w	fp, #0
 8008744:	d003      	beq.n	800874e <_scanf_float+0x15e>
 8008746:	3201      	adds	r2, #1
 8008748:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800874c:	60a2      	str	r2, [r4, #8]
 800874e:	68a3      	ldr	r3, [r4, #8]
 8008750:	3b01      	subs	r3, #1
 8008752:	60a3      	str	r3, [r4, #8]
 8008754:	6923      	ldr	r3, [r4, #16]
 8008756:	3301      	adds	r3, #1
 8008758:	6123      	str	r3, [r4, #16]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	3b01      	subs	r3, #1
 800875e:	2b00      	cmp	r3, #0
 8008760:	607b      	str	r3, [r7, #4]
 8008762:	f340 8087 	ble.w	8008874 <_scanf_float+0x284>
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	3301      	adds	r3, #1
 800876a:	603b      	str	r3, [r7, #0]
 800876c:	e765      	b.n	800863a <_scanf_float+0x4a>
 800876e:	eb1a 0105 	adds.w	r1, sl, r5
 8008772:	f47f af6f 	bne.w	8008654 <_scanf_float+0x64>
 8008776:	6822      	ldr	r2, [r4, #0]
 8008778:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800877c:	6022      	str	r2, [r4, #0]
 800877e:	460d      	mov	r5, r1
 8008780:	468a      	mov	sl, r1
 8008782:	f806 3b01 	strb.w	r3, [r6], #1
 8008786:	e7e2      	b.n	800874e <_scanf_float+0x15e>
 8008788:	6822      	ldr	r2, [r4, #0]
 800878a:	0610      	lsls	r0, r2, #24
 800878c:	f57f af62 	bpl.w	8008654 <_scanf_float+0x64>
 8008790:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008794:	6022      	str	r2, [r4, #0]
 8008796:	e7f4      	b.n	8008782 <_scanf_float+0x192>
 8008798:	f1ba 0f00 	cmp.w	sl, #0
 800879c:	d10e      	bne.n	80087bc <_scanf_float+0x1cc>
 800879e:	f1b9 0f00 	cmp.w	r9, #0
 80087a2:	d10e      	bne.n	80087c2 <_scanf_float+0x1d2>
 80087a4:	6822      	ldr	r2, [r4, #0]
 80087a6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80087aa:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80087ae:	d108      	bne.n	80087c2 <_scanf_float+0x1d2>
 80087b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80087b4:	6022      	str	r2, [r4, #0]
 80087b6:	f04f 0a01 	mov.w	sl, #1
 80087ba:	e7e2      	b.n	8008782 <_scanf_float+0x192>
 80087bc:	f1ba 0f02 	cmp.w	sl, #2
 80087c0:	d055      	beq.n	800886e <_scanf_float+0x27e>
 80087c2:	2d01      	cmp	r5, #1
 80087c4:	d002      	beq.n	80087cc <_scanf_float+0x1dc>
 80087c6:	2d04      	cmp	r5, #4
 80087c8:	f47f af44 	bne.w	8008654 <_scanf_float+0x64>
 80087cc:	3501      	adds	r5, #1
 80087ce:	b2ed      	uxtb	r5, r5
 80087d0:	e7d7      	b.n	8008782 <_scanf_float+0x192>
 80087d2:	f1ba 0f01 	cmp.w	sl, #1
 80087d6:	f47f af3d 	bne.w	8008654 <_scanf_float+0x64>
 80087da:	f04f 0a02 	mov.w	sl, #2
 80087de:	e7d0      	b.n	8008782 <_scanf_float+0x192>
 80087e0:	b97d      	cbnz	r5, 8008802 <_scanf_float+0x212>
 80087e2:	f1b9 0f00 	cmp.w	r9, #0
 80087e6:	f47f af38 	bne.w	800865a <_scanf_float+0x6a>
 80087ea:	6822      	ldr	r2, [r4, #0]
 80087ec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80087f0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80087f4:	f040 8108 	bne.w	8008a08 <_scanf_float+0x418>
 80087f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80087fc:	6022      	str	r2, [r4, #0]
 80087fe:	2501      	movs	r5, #1
 8008800:	e7bf      	b.n	8008782 <_scanf_float+0x192>
 8008802:	2d03      	cmp	r5, #3
 8008804:	d0e2      	beq.n	80087cc <_scanf_float+0x1dc>
 8008806:	2d05      	cmp	r5, #5
 8008808:	e7de      	b.n	80087c8 <_scanf_float+0x1d8>
 800880a:	2d02      	cmp	r5, #2
 800880c:	f47f af22 	bne.w	8008654 <_scanf_float+0x64>
 8008810:	2503      	movs	r5, #3
 8008812:	e7b6      	b.n	8008782 <_scanf_float+0x192>
 8008814:	2d06      	cmp	r5, #6
 8008816:	f47f af1d 	bne.w	8008654 <_scanf_float+0x64>
 800881a:	2507      	movs	r5, #7
 800881c:	e7b1      	b.n	8008782 <_scanf_float+0x192>
 800881e:	6822      	ldr	r2, [r4, #0]
 8008820:	0591      	lsls	r1, r2, #22
 8008822:	f57f af17 	bpl.w	8008654 <_scanf_float+0x64>
 8008826:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800882a:	6022      	str	r2, [r4, #0]
 800882c:	f8cd 9008 	str.w	r9, [sp, #8]
 8008830:	e7a7      	b.n	8008782 <_scanf_float+0x192>
 8008832:	6822      	ldr	r2, [r4, #0]
 8008834:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008838:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800883c:	d006      	beq.n	800884c <_scanf_float+0x25c>
 800883e:	0550      	lsls	r0, r2, #21
 8008840:	f57f af08 	bpl.w	8008654 <_scanf_float+0x64>
 8008844:	f1b9 0f00 	cmp.w	r9, #0
 8008848:	f000 80de 	beq.w	8008a08 <_scanf_float+0x418>
 800884c:	0591      	lsls	r1, r2, #22
 800884e:	bf58      	it	pl
 8008850:	9902      	ldrpl	r1, [sp, #8]
 8008852:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008856:	bf58      	it	pl
 8008858:	eba9 0101 	subpl.w	r1, r9, r1
 800885c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008860:	bf58      	it	pl
 8008862:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008866:	6022      	str	r2, [r4, #0]
 8008868:	f04f 0900 	mov.w	r9, #0
 800886c:	e789      	b.n	8008782 <_scanf_float+0x192>
 800886e:	f04f 0a03 	mov.w	sl, #3
 8008872:	e786      	b.n	8008782 <_scanf_float+0x192>
 8008874:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008878:	4639      	mov	r1, r7
 800887a:	4640      	mov	r0, r8
 800887c:	4798      	blx	r3
 800887e:	2800      	cmp	r0, #0
 8008880:	f43f aedb 	beq.w	800863a <_scanf_float+0x4a>
 8008884:	e6e6      	b.n	8008654 <_scanf_float+0x64>
 8008886:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800888a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800888e:	463a      	mov	r2, r7
 8008890:	4640      	mov	r0, r8
 8008892:	4798      	blx	r3
 8008894:	6923      	ldr	r3, [r4, #16]
 8008896:	3b01      	subs	r3, #1
 8008898:	6123      	str	r3, [r4, #16]
 800889a:	e6e8      	b.n	800866e <_scanf_float+0x7e>
 800889c:	1e6b      	subs	r3, r5, #1
 800889e:	2b06      	cmp	r3, #6
 80088a0:	d824      	bhi.n	80088ec <_scanf_float+0x2fc>
 80088a2:	2d02      	cmp	r5, #2
 80088a4:	d836      	bhi.n	8008914 <_scanf_float+0x324>
 80088a6:	9b01      	ldr	r3, [sp, #4]
 80088a8:	429e      	cmp	r6, r3
 80088aa:	f67f aee4 	bls.w	8008676 <_scanf_float+0x86>
 80088ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088b6:	463a      	mov	r2, r7
 80088b8:	4640      	mov	r0, r8
 80088ba:	4798      	blx	r3
 80088bc:	6923      	ldr	r3, [r4, #16]
 80088be:	3b01      	subs	r3, #1
 80088c0:	6123      	str	r3, [r4, #16]
 80088c2:	e7f0      	b.n	80088a6 <_scanf_float+0x2b6>
 80088c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088c8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80088cc:	463a      	mov	r2, r7
 80088ce:	4640      	mov	r0, r8
 80088d0:	4798      	blx	r3
 80088d2:	6923      	ldr	r3, [r4, #16]
 80088d4:	3b01      	subs	r3, #1
 80088d6:	6123      	str	r3, [r4, #16]
 80088d8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80088dc:	fa5f fa8a 	uxtb.w	sl, sl
 80088e0:	f1ba 0f02 	cmp.w	sl, #2
 80088e4:	d1ee      	bne.n	80088c4 <_scanf_float+0x2d4>
 80088e6:	3d03      	subs	r5, #3
 80088e8:	b2ed      	uxtb	r5, r5
 80088ea:	1b76      	subs	r6, r6, r5
 80088ec:	6823      	ldr	r3, [r4, #0]
 80088ee:	05da      	lsls	r2, r3, #23
 80088f0:	d530      	bpl.n	8008954 <_scanf_float+0x364>
 80088f2:	055b      	lsls	r3, r3, #21
 80088f4:	d511      	bpl.n	800891a <_scanf_float+0x32a>
 80088f6:	9b01      	ldr	r3, [sp, #4]
 80088f8:	429e      	cmp	r6, r3
 80088fa:	f67f aebc 	bls.w	8008676 <_scanf_float+0x86>
 80088fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008902:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008906:	463a      	mov	r2, r7
 8008908:	4640      	mov	r0, r8
 800890a:	4798      	blx	r3
 800890c:	6923      	ldr	r3, [r4, #16]
 800890e:	3b01      	subs	r3, #1
 8008910:	6123      	str	r3, [r4, #16]
 8008912:	e7f0      	b.n	80088f6 <_scanf_float+0x306>
 8008914:	46aa      	mov	sl, r5
 8008916:	46b3      	mov	fp, r6
 8008918:	e7de      	b.n	80088d8 <_scanf_float+0x2e8>
 800891a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800891e:	6923      	ldr	r3, [r4, #16]
 8008920:	2965      	cmp	r1, #101	@ 0x65
 8008922:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008926:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800892a:	6123      	str	r3, [r4, #16]
 800892c:	d00c      	beq.n	8008948 <_scanf_float+0x358>
 800892e:	2945      	cmp	r1, #69	@ 0x45
 8008930:	d00a      	beq.n	8008948 <_scanf_float+0x358>
 8008932:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008936:	463a      	mov	r2, r7
 8008938:	4640      	mov	r0, r8
 800893a:	4798      	blx	r3
 800893c:	6923      	ldr	r3, [r4, #16]
 800893e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008942:	3b01      	subs	r3, #1
 8008944:	1eb5      	subs	r5, r6, #2
 8008946:	6123      	str	r3, [r4, #16]
 8008948:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800894c:	463a      	mov	r2, r7
 800894e:	4640      	mov	r0, r8
 8008950:	4798      	blx	r3
 8008952:	462e      	mov	r6, r5
 8008954:	6822      	ldr	r2, [r4, #0]
 8008956:	f012 0210 	ands.w	r2, r2, #16
 800895a:	d001      	beq.n	8008960 <_scanf_float+0x370>
 800895c:	2000      	movs	r0, #0
 800895e:	e68b      	b.n	8008678 <_scanf_float+0x88>
 8008960:	7032      	strb	r2, [r6, #0]
 8008962:	6823      	ldr	r3, [r4, #0]
 8008964:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008968:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800896c:	d11c      	bne.n	80089a8 <_scanf_float+0x3b8>
 800896e:	9b02      	ldr	r3, [sp, #8]
 8008970:	454b      	cmp	r3, r9
 8008972:	eba3 0209 	sub.w	r2, r3, r9
 8008976:	d123      	bne.n	80089c0 <_scanf_float+0x3d0>
 8008978:	9901      	ldr	r1, [sp, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	4640      	mov	r0, r8
 800897e:	f002 fc57 	bl	800b230 <_strtod_r>
 8008982:	9b03      	ldr	r3, [sp, #12]
 8008984:	6821      	ldr	r1, [r4, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f011 0f02 	tst.w	r1, #2
 800898c:	ec57 6b10 	vmov	r6, r7, d0
 8008990:	f103 0204 	add.w	r2, r3, #4
 8008994:	d01f      	beq.n	80089d6 <_scanf_float+0x3e6>
 8008996:	9903      	ldr	r1, [sp, #12]
 8008998:	600a      	str	r2, [r1, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	e9c3 6700 	strd	r6, r7, [r3]
 80089a0:	68e3      	ldr	r3, [r4, #12]
 80089a2:	3301      	adds	r3, #1
 80089a4:	60e3      	str	r3, [r4, #12]
 80089a6:	e7d9      	b.n	800895c <_scanf_float+0x36c>
 80089a8:	9b04      	ldr	r3, [sp, #16]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d0e4      	beq.n	8008978 <_scanf_float+0x388>
 80089ae:	9905      	ldr	r1, [sp, #20]
 80089b0:	230a      	movs	r3, #10
 80089b2:	3101      	adds	r1, #1
 80089b4:	4640      	mov	r0, r8
 80089b6:	f002 fcbb 	bl	800b330 <_strtol_r>
 80089ba:	9b04      	ldr	r3, [sp, #16]
 80089bc:	9e05      	ldr	r6, [sp, #20]
 80089be:	1ac2      	subs	r2, r0, r3
 80089c0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80089c4:	429e      	cmp	r6, r3
 80089c6:	bf28      	it	cs
 80089c8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80089cc:	4910      	ldr	r1, [pc, #64]	@ (8008a10 <_scanf_float+0x420>)
 80089ce:	4630      	mov	r0, r6
 80089d0:	f000 f954 	bl	8008c7c <siprintf>
 80089d4:	e7d0      	b.n	8008978 <_scanf_float+0x388>
 80089d6:	f011 0f04 	tst.w	r1, #4
 80089da:	9903      	ldr	r1, [sp, #12]
 80089dc:	600a      	str	r2, [r1, #0]
 80089de:	d1dc      	bne.n	800899a <_scanf_float+0x3aa>
 80089e0:	681d      	ldr	r5, [r3, #0]
 80089e2:	4632      	mov	r2, r6
 80089e4:	463b      	mov	r3, r7
 80089e6:	4630      	mov	r0, r6
 80089e8:	4639      	mov	r1, r7
 80089ea:	f7f8 f8bf 	bl	8000b6c <__aeabi_dcmpun>
 80089ee:	b128      	cbz	r0, 80089fc <_scanf_float+0x40c>
 80089f0:	4808      	ldr	r0, [pc, #32]	@ (8008a14 <_scanf_float+0x424>)
 80089f2:	f000 facb 	bl	8008f8c <nanf>
 80089f6:	ed85 0a00 	vstr	s0, [r5]
 80089fa:	e7d1      	b.n	80089a0 <_scanf_float+0x3b0>
 80089fc:	4630      	mov	r0, r6
 80089fe:	4639      	mov	r1, r7
 8008a00:	f7f8 f912 	bl	8000c28 <__aeabi_d2f>
 8008a04:	6028      	str	r0, [r5, #0]
 8008a06:	e7cb      	b.n	80089a0 <_scanf_float+0x3b0>
 8008a08:	f04f 0900 	mov.w	r9, #0
 8008a0c:	e629      	b.n	8008662 <_scanf_float+0x72>
 8008a0e:	bf00      	nop
 8008a10:	0800c75c 	.word	0x0800c75c
 8008a14:	0800caf5 	.word	0x0800caf5

08008a18 <std>:
 8008a18:	2300      	movs	r3, #0
 8008a1a:	b510      	push	{r4, lr}
 8008a1c:	4604      	mov	r4, r0
 8008a1e:	e9c0 3300 	strd	r3, r3, [r0]
 8008a22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a26:	6083      	str	r3, [r0, #8]
 8008a28:	8181      	strh	r1, [r0, #12]
 8008a2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a2c:	81c2      	strh	r2, [r0, #14]
 8008a2e:	6183      	str	r3, [r0, #24]
 8008a30:	4619      	mov	r1, r3
 8008a32:	2208      	movs	r2, #8
 8008a34:	305c      	adds	r0, #92	@ 0x5c
 8008a36:	f000 fa19 	bl	8008e6c <memset>
 8008a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8008a70 <std+0x58>)
 8008a3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8008a74 <std+0x5c>)
 8008a40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008a42:	4b0d      	ldr	r3, [pc, #52]	@ (8008a78 <std+0x60>)
 8008a44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008a46:	4b0d      	ldr	r3, [pc, #52]	@ (8008a7c <std+0x64>)
 8008a48:	6323      	str	r3, [r4, #48]	@ 0x30
 8008a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8008a80 <std+0x68>)
 8008a4c:	6224      	str	r4, [r4, #32]
 8008a4e:	429c      	cmp	r4, r3
 8008a50:	d006      	beq.n	8008a60 <std+0x48>
 8008a52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008a56:	4294      	cmp	r4, r2
 8008a58:	d002      	beq.n	8008a60 <std+0x48>
 8008a5a:	33d0      	adds	r3, #208	@ 0xd0
 8008a5c:	429c      	cmp	r4, r3
 8008a5e:	d105      	bne.n	8008a6c <std+0x54>
 8008a60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a68:	f000 ba8c 	b.w	8008f84 <__retarget_lock_init_recursive>
 8008a6c:	bd10      	pop	{r4, pc}
 8008a6e:	bf00      	nop
 8008a70:	08008cbd 	.word	0x08008cbd
 8008a74:	08008cdf 	.word	0x08008cdf
 8008a78:	08008d17 	.word	0x08008d17
 8008a7c:	08008d3b 	.word	0x08008d3b
 8008a80:	20000468 	.word	0x20000468

08008a84 <stdio_exit_handler>:
 8008a84:	4a02      	ldr	r2, [pc, #8]	@ (8008a90 <stdio_exit_handler+0xc>)
 8008a86:	4903      	ldr	r1, [pc, #12]	@ (8008a94 <stdio_exit_handler+0x10>)
 8008a88:	4803      	ldr	r0, [pc, #12]	@ (8008a98 <stdio_exit_handler+0x14>)
 8008a8a:	f000 b869 	b.w	8008b60 <_fwalk_sglue>
 8008a8e:	bf00      	nop
 8008a90:	2000000c 	.word	0x2000000c
 8008a94:	0800b971 	.word	0x0800b971
 8008a98:	2000001c 	.word	0x2000001c

08008a9c <cleanup_stdio>:
 8008a9c:	6841      	ldr	r1, [r0, #4]
 8008a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ad0 <cleanup_stdio+0x34>)
 8008aa0:	4299      	cmp	r1, r3
 8008aa2:	b510      	push	{r4, lr}
 8008aa4:	4604      	mov	r4, r0
 8008aa6:	d001      	beq.n	8008aac <cleanup_stdio+0x10>
 8008aa8:	f002 ff62 	bl	800b970 <_fflush_r>
 8008aac:	68a1      	ldr	r1, [r4, #8]
 8008aae:	4b09      	ldr	r3, [pc, #36]	@ (8008ad4 <cleanup_stdio+0x38>)
 8008ab0:	4299      	cmp	r1, r3
 8008ab2:	d002      	beq.n	8008aba <cleanup_stdio+0x1e>
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f002 ff5b 	bl	800b970 <_fflush_r>
 8008aba:	68e1      	ldr	r1, [r4, #12]
 8008abc:	4b06      	ldr	r3, [pc, #24]	@ (8008ad8 <cleanup_stdio+0x3c>)
 8008abe:	4299      	cmp	r1, r3
 8008ac0:	d004      	beq.n	8008acc <cleanup_stdio+0x30>
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ac8:	f002 bf52 	b.w	800b970 <_fflush_r>
 8008acc:	bd10      	pop	{r4, pc}
 8008ace:	bf00      	nop
 8008ad0:	20000468 	.word	0x20000468
 8008ad4:	200004d0 	.word	0x200004d0
 8008ad8:	20000538 	.word	0x20000538

08008adc <global_stdio_init.part.0>:
 8008adc:	b510      	push	{r4, lr}
 8008ade:	4b0b      	ldr	r3, [pc, #44]	@ (8008b0c <global_stdio_init.part.0+0x30>)
 8008ae0:	4c0b      	ldr	r4, [pc, #44]	@ (8008b10 <global_stdio_init.part.0+0x34>)
 8008ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8008b14 <global_stdio_init.part.0+0x38>)
 8008ae4:	601a      	str	r2, [r3, #0]
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	2200      	movs	r2, #0
 8008aea:	2104      	movs	r1, #4
 8008aec:	f7ff ff94 	bl	8008a18 <std>
 8008af0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008af4:	2201      	movs	r2, #1
 8008af6:	2109      	movs	r1, #9
 8008af8:	f7ff ff8e 	bl	8008a18 <std>
 8008afc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b00:	2202      	movs	r2, #2
 8008b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b06:	2112      	movs	r1, #18
 8008b08:	f7ff bf86 	b.w	8008a18 <std>
 8008b0c:	200005a0 	.word	0x200005a0
 8008b10:	20000468 	.word	0x20000468
 8008b14:	08008a85 	.word	0x08008a85

08008b18 <__sfp_lock_acquire>:
 8008b18:	4801      	ldr	r0, [pc, #4]	@ (8008b20 <__sfp_lock_acquire+0x8>)
 8008b1a:	f000 ba34 	b.w	8008f86 <__retarget_lock_acquire_recursive>
 8008b1e:	bf00      	nop
 8008b20:	200005a9 	.word	0x200005a9

08008b24 <__sfp_lock_release>:
 8008b24:	4801      	ldr	r0, [pc, #4]	@ (8008b2c <__sfp_lock_release+0x8>)
 8008b26:	f000 ba2f 	b.w	8008f88 <__retarget_lock_release_recursive>
 8008b2a:	bf00      	nop
 8008b2c:	200005a9 	.word	0x200005a9

08008b30 <__sinit>:
 8008b30:	b510      	push	{r4, lr}
 8008b32:	4604      	mov	r4, r0
 8008b34:	f7ff fff0 	bl	8008b18 <__sfp_lock_acquire>
 8008b38:	6a23      	ldr	r3, [r4, #32]
 8008b3a:	b11b      	cbz	r3, 8008b44 <__sinit+0x14>
 8008b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b40:	f7ff bff0 	b.w	8008b24 <__sfp_lock_release>
 8008b44:	4b04      	ldr	r3, [pc, #16]	@ (8008b58 <__sinit+0x28>)
 8008b46:	6223      	str	r3, [r4, #32]
 8008b48:	4b04      	ldr	r3, [pc, #16]	@ (8008b5c <__sinit+0x2c>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1f5      	bne.n	8008b3c <__sinit+0xc>
 8008b50:	f7ff ffc4 	bl	8008adc <global_stdio_init.part.0>
 8008b54:	e7f2      	b.n	8008b3c <__sinit+0xc>
 8008b56:	bf00      	nop
 8008b58:	08008a9d 	.word	0x08008a9d
 8008b5c:	200005a0 	.word	0x200005a0

08008b60 <_fwalk_sglue>:
 8008b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b64:	4607      	mov	r7, r0
 8008b66:	4688      	mov	r8, r1
 8008b68:	4614      	mov	r4, r2
 8008b6a:	2600      	movs	r6, #0
 8008b6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b70:	f1b9 0901 	subs.w	r9, r9, #1
 8008b74:	d505      	bpl.n	8008b82 <_fwalk_sglue+0x22>
 8008b76:	6824      	ldr	r4, [r4, #0]
 8008b78:	2c00      	cmp	r4, #0
 8008b7a:	d1f7      	bne.n	8008b6c <_fwalk_sglue+0xc>
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b82:	89ab      	ldrh	r3, [r5, #12]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d907      	bls.n	8008b98 <_fwalk_sglue+0x38>
 8008b88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	d003      	beq.n	8008b98 <_fwalk_sglue+0x38>
 8008b90:	4629      	mov	r1, r5
 8008b92:	4638      	mov	r0, r7
 8008b94:	47c0      	blx	r8
 8008b96:	4306      	orrs	r6, r0
 8008b98:	3568      	adds	r5, #104	@ 0x68
 8008b9a:	e7e9      	b.n	8008b70 <_fwalk_sglue+0x10>

08008b9c <iprintf>:
 8008b9c:	b40f      	push	{r0, r1, r2, r3}
 8008b9e:	b507      	push	{r0, r1, r2, lr}
 8008ba0:	4906      	ldr	r1, [pc, #24]	@ (8008bbc <iprintf+0x20>)
 8008ba2:	ab04      	add	r3, sp, #16
 8008ba4:	6808      	ldr	r0, [r1, #0]
 8008ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008baa:	6881      	ldr	r1, [r0, #8]
 8008bac:	9301      	str	r3, [sp, #4]
 8008bae:	f002 fd43 	bl	800b638 <_vfiprintf_r>
 8008bb2:	b003      	add	sp, #12
 8008bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bb8:	b004      	add	sp, #16
 8008bba:	4770      	bx	lr
 8008bbc:	20000018 	.word	0x20000018

08008bc0 <_puts_r>:
 8008bc0:	6a03      	ldr	r3, [r0, #32]
 8008bc2:	b570      	push	{r4, r5, r6, lr}
 8008bc4:	6884      	ldr	r4, [r0, #8]
 8008bc6:	4605      	mov	r5, r0
 8008bc8:	460e      	mov	r6, r1
 8008bca:	b90b      	cbnz	r3, 8008bd0 <_puts_r+0x10>
 8008bcc:	f7ff ffb0 	bl	8008b30 <__sinit>
 8008bd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bd2:	07db      	lsls	r3, r3, #31
 8008bd4:	d405      	bmi.n	8008be2 <_puts_r+0x22>
 8008bd6:	89a3      	ldrh	r3, [r4, #12]
 8008bd8:	0598      	lsls	r0, r3, #22
 8008bda:	d402      	bmi.n	8008be2 <_puts_r+0x22>
 8008bdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bde:	f000 f9d2 	bl	8008f86 <__retarget_lock_acquire_recursive>
 8008be2:	89a3      	ldrh	r3, [r4, #12]
 8008be4:	0719      	lsls	r1, r3, #28
 8008be6:	d502      	bpl.n	8008bee <_puts_r+0x2e>
 8008be8:	6923      	ldr	r3, [r4, #16]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d135      	bne.n	8008c5a <_puts_r+0x9a>
 8008bee:	4621      	mov	r1, r4
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	f000 f8e5 	bl	8008dc0 <__swsetup_r>
 8008bf6:	b380      	cbz	r0, 8008c5a <_puts_r+0x9a>
 8008bf8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008bfc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bfe:	07da      	lsls	r2, r3, #31
 8008c00:	d405      	bmi.n	8008c0e <_puts_r+0x4e>
 8008c02:	89a3      	ldrh	r3, [r4, #12]
 8008c04:	059b      	lsls	r3, r3, #22
 8008c06:	d402      	bmi.n	8008c0e <_puts_r+0x4e>
 8008c08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c0a:	f000 f9bd 	bl	8008f88 <__retarget_lock_release_recursive>
 8008c0e:	4628      	mov	r0, r5
 8008c10:	bd70      	pop	{r4, r5, r6, pc}
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	da04      	bge.n	8008c20 <_puts_r+0x60>
 8008c16:	69a2      	ldr	r2, [r4, #24]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	dc17      	bgt.n	8008c4c <_puts_r+0x8c>
 8008c1c:	290a      	cmp	r1, #10
 8008c1e:	d015      	beq.n	8008c4c <_puts_r+0x8c>
 8008c20:	6823      	ldr	r3, [r4, #0]
 8008c22:	1c5a      	adds	r2, r3, #1
 8008c24:	6022      	str	r2, [r4, #0]
 8008c26:	7019      	strb	r1, [r3, #0]
 8008c28:	68a3      	ldr	r3, [r4, #8]
 8008c2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	60a3      	str	r3, [r4, #8]
 8008c32:	2900      	cmp	r1, #0
 8008c34:	d1ed      	bne.n	8008c12 <_puts_r+0x52>
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	da11      	bge.n	8008c5e <_puts_r+0x9e>
 8008c3a:	4622      	mov	r2, r4
 8008c3c:	210a      	movs	r1, #10
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f000 f87f 	bl	8008d42 <__swbuf_r>
 8008c44:	3001      	adds	r0, #1
 8008c46:	d0d7      	beq.n	8008bf8 <_puts_r+0x38>
 8008c48:	250a      	movs	r5, #10
 8008c4a:	e7d7      	b.n	8008bfc <_puts_r+0x3c>
 8008c4c:	4622      	mov	r2, r4
 8008c4e:	4628      	mov	r0, r5
 8008c50:	f000 f877 	bl	8008d42 <__swbuf_r>
 8008c54:	3001      	adds	r0, #1
 8008c56:	d1e7      	bne.n	8008c28 <_puts_r+0x68>
 8008c58:	e7ce      	b.n	8008bf8 <_puts_r+0x38>
 8008c5a:	3e01      	subs	r6, #1
 8008c5c:	e7e4      	b.n	8008c28 <_puts_r+0x68>
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	1c5a      	adds	r2, r3, #1
 8008c62:	6022      	str	r2, [r4, #0]
 8008c64:	220a      	movs	r2, #10
 8008c66:	701a      	strb	r2, [r3, #0]
 8008c68:	e7ee      	b.n	8008c48 <_puts_r+0x88>
	...

08008c6c <puts>:
 8008c6c:	4b02      	ldr	r3, [pc, #8]	@ (8008c78 <puts+0xc>)
 8008c6e:	4601      	mov	r1, r0
 8008c70:	6818      	ldr	r0, [r3, #0]
 8008c72:	f7ff bfa5 	b.w	8008bc0 <_puts_r>
 8008c76:	bf00      	nop
 8008c78:	20000018 	.word	0x20000018

08008c7c <siprintf>:
 8008c7c:	b40e      	push	{r1, r2, r3}
 8008c7e:	b500      	push	{lr}
 8008c80:	b09c      	sub	sp, #112	@ 0x70
 8008c82:	ab1d      	add	r3, sp, #116	@ 0x74
 8008c84:	9002      	str	r0, [sp, #8]
 8008c86:	9006      	str	r0, [sp, #24]
 8008c88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008c8c:	4809      	ldr	r0, [pc, #36]	@ (8008cb4 <siprintf+0x38>)
 8008c8e:	9107      	str	r1, [sp, #28]
 8008c90:	9104      	str	r1, [sp, #16]
 8008c92:	4909      	ldr	r1, [pc, #36]	@ (8008cb8 <siprintf+0x3c>)
 8008c94:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c98:	9105      	str	r1, [sp, #20]
 8008c9a:	6800      	ldr	r0, [r0, #0]
 8008c9c:	9301      	str	r3, [sp, #4]
 8008c9e:	a902      	add	r1, sp, #8
 8008ca0:	f002 fba4 	bl	800b3ec <_svfiprintf_r>
 8008ca4:	9b02      	ldr	r3, [sp, #8]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	701a      	strb	r2, [r3, #0]
 8008caa:	b01c      	add	sp, #112	@ 0x70
 8008cac:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cb0:	b003      	add	sp, #12
 8008cb2:	4770      	bx	lr
 8008cb4:	20000018 	.word	0x20000018
 8008cb8:	ffff0208 	.word	0xffff0208

08008cbc <__sread>:
 8008cbc:	b510      	push	{r4, lr}
 8008cbe:	460c      	mov	r4, r1
 8008cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc4:	f000 f900 	bl	8008ec8 <_read_r>
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	bfab      	itete	ge
 8008ccc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008cce:	89a3      	ldrhlt	r3, [r4, #12]
 8008cd0:	181b      	addge	r3, r3, r0
 8008cd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008cd6:	bfac      	ite	ge
 8008cd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008cda:	81a3      	strhlt	r3, [r4, #12]
 8008cdc:	bd10      	pop	{r4, pc}

08008cde <__swrite>:
 8008cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce2:	461f      	mov	r7, r3
 8008ce4:	898b      	ldrh	r3, [r1, #12]
 8008ce6:	05db      	lsls	r3, r3, #23
 8008ce8:	4605      	mov	r5, r0
 8008cea:	460c      	mov	r4, r1
 8008cec:	4616      	mov	r6, r2
 8008cee:	d505      	bpl.n	8008cfc <__swrite+0x1e>
 8008cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f000 f8d4 	bl	8008ea4 <_lseek_r>
 8008cfc:	89a3      	ldrh	r3, [r4, #12]
 8008cfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d06:	81a3      	strh	r3, [r4, #12]
 8008d08:	4632      	mov	r2, r6
 8008d0a:	463b      	mov	r3, r7
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d12:	f000 b8fb 	b.w	8008f0c <_write_r>

08008d16 <__sseek>:
 8008d16:	b510      	push	{r4, lr}
 8008d18:	460c      	mov	r4, r1
 8008d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d1e:	f000 f8c1 	bl	8008ea4 <_lseek_r>
 8008d22:	1c43      	adds	r3, r0, #1
 8008d24:	89a3      	ldrh	r3, [r4, #12]
 8008d26:	bf15      	itete	ne
 8008d28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008d2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d32:	81a3      	strheq	r3, [r4, #12]
 8008d34:	bf18      	it	ne
 8008d36:	81a3      	strhne	r3, [r4, #12]
 8008d38:	bd10      	pop	{r4, pc}

08008d3a <__sclose>:
 8008d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d3e:	f000 b8a1 	b.w	8008e84 <_close_r>

08008d42 <__swbuf_r>:
 8008d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d44:	460e      	mov	r6, r1
 8008d46:	4614      	mov	r4, r2
 8008d48:	4605      	mov	r5, r0
 8008d4a:	b118      	cbz	r0, 8008d54 <__swbuf_r+0x12>
 8008d4c:	6a03      	ldr	r3, [r0, #32]
 8008d4e:	b90b      	cbnz	r3, 8008d54 <__swbuf_r+0x12>
 8008d50:	f7ff feee 	bl	8008b30 <__sinit>
 8008d54:	69a3      	ldr	r3, [r4, #24]
 8008d56:	60a3      	str	r3, [r4, #8]
 8008d58:	89a3      	ldrh	r3, [r4, #12]
 8008d5a:	071a      	lsls	r2, r3, #28
 8008d5c:	d501      	bpl.n	8008d62 <__swbuf_r+0x20>
 8008d5e:	6923      	ldr	r3, [r4, #16]
 8008d60:	b943      	cbnz	r3, 8008d74 <__swbuf_r+0x32>
 8008d62:	4621      	mov	r1, r4
 8008d64:	4628      	mov	r0, r5
 8008d66:	f000 f82b 	bl	8008dc0 <__swsetup_r>
 8008d6a:	b118      	cbz	r0, 8008d74 <__swbuf_r+0x32>
 8008d6c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008d70:	4638      	mov	r0, r7
 8008d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d74:	6823      	ldr	r3, [r4, #0]
 8008d76:	6922      	ldr	r2, [r4, #16]
 8008d78:	1a98      	subs	r0, r3, r2
 8008d7a:	6963      	ldr	r3, [r4, #20]
 8008d7c:	b2f6      	uxtb	r6, r6
 8008d7e:	4283      	cmp	r3, r0
 8008d80:	4637      	mov	r7, r6
 8008d82:	dc05      	bgt.n	8008d90 <__swbuf_r+0x4e>
 8008d84:	4621      	mov	r1, r4
 8008d86:	4628      	mov	r0, r5
 8008d88:	f002 fdf2 	bl	800b970 <_fflush_r>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d1ed      	bne.n	8008d6c <__swbuf_r+0x2a>
 8008d90:	68a3      	ldr	r3, [r4, #8]
 8008d92:	3b01      	subs	r3, #1
 8008d94:	60a3      	str	r3, [r4, #8]
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	1c5a      	adds	r2, r3, #1
 8008d9a:	6022      	str	r2, [r4, #0]
 8008d9c:	701e      	strb	r6, [r3, #0]
 8008d9e:	6962      	ldr	r2, [r4, #20]
 8008da0:	1c43      	adds	r3, r0, #1
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d004      	beq.n	8008db0 <__swbuf_r+0x6e>
 8008da6:	89a3      	ldrh	r3, [r4, #12]
 8008da8:	07db      	lsls	r3, r3, #31
 8008daa:	d5e1      	bpl.n	8008d70 <__swbuf_r+0x2e>
 8008dac:	2e0a      	cmp	r6, #10
 8008dae:	d1df      	bne.n	8008d70 <__swbuf_r+0x2e>
 8008db0:	4621      	mov	r1, r4
 8008db2:	4628      	mov	r0, r5
 8008db4:	f002 fddc 	bl	800b970 <_fflush_r>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	d0d9      	beq.n	8008d70 <__swbuf_r+0x2e>
 8008dbc:	e7d6      	b.n	8008d6c <__swbuf_r+0x2a>
	...

08008dc0 <__swsetup_r>:
 8008dc0:	b538      	push	{r3, r4, r5, lr}
 8008dc2:	4b29      	ldr	r3, [pc, #164]	@ (8008e68 <__swsetup_r+0xa8>)
 8008dc4:	4605      	mov	r5, r0
 8008dc6:	6818      	ldr	r0, [r3, #0]
 8008dc8:	460c      	mov	r4, r1
 8008dca:	b118      	cbz	r0, 8008dd4 <__swsetup_r+0x14>
 8008dcc:	6a03      	ldr	r3, [r0, #32]
 8008dce:	b90b      	cbnz	r3, 8008dd4 <__swsetup_r+0x14>
 8008dd0:	f7ff feae 	bl	8008b30 <__sinit>
 8008dd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dd8:	0719      	lsls	r1, r3, #28
 8008dda:	d422      	bmi.n	8008e22 <__swsetup_r+0x62>
 8008ddc:	06da      	lsls	r2, r3, #27
 8008dde:	d407      	bmi.n	8008df0 <__swsetup_r+0x30>
 8008de0:	2209      	movs	r2, #9
 8008de2:	602a      	str	r2, [r5, #0]
 8008de4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008de8:	81a3      	strh	r3, [r4, #12]
 8008dea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008dee:	e033      	b.n	8008e58 <__swsetup_r+0x98>
 8008df0:	0758      	lsls	r0, r3, #29
 8008df2:	d512      	bpl.n	8008e1a <__swsetup_r+0x5a>
 8008df4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008df6:	b141      	cbz	r1, 8008e0a <__swsetup_r+0x4a>
 8008df8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008dfc:	4299      	cmp	r1, r3
 8008dfe:	d002      	beq.n	8008e06 <__swsetup_r+0x46>
 8008e00:	4628      	mov	r0, r5
 8008e02:	f000 ff15 	bl	8009c30 <_free_r>
 8008e06:	2300      	movs	r3, #0
 8008e08:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e0a:	89a3      	ldrh	r3, [r4, #12]
 8008e0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e10:	81a3      	strh	r3, [r4, #12]
 8008e12:	2300      	movs	r3, #0
 8008e14:	6063      	str	r3, [r4, #4]
 8008e16:	6923      	ldr	r3, [r4, #16]
 8008e18:	6023      	str	r3, [r4, #0]
 8008e1a:	89a3      	ldrh	r3, [r4, #12]
 8008e1c:	f043 0308 	orr.w	r3, r3, #8
 8008e20:	81a3      	strh	r3, [r4, #12]
 8008e22:	6923      	ldr	r3, [r4, #16]
 8008e24:	b94b      	cbnz	r3, 8008e3a <__swsetup_r+0x7a>
 8008e26:	89a3      	ldrh	r3, [r4, #12]
 8008e28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e30:	d003      	beq.n	8008e3a <__swsetup_r+0x7a>
 8008e32:	4621      	mov	r1, r4
 8008e34:	4628      	mov	r0, r5
 8008e36:	f002 fde9 	bl	800ba0c <__smakebuf_r>
 8008e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e3e:	f013 0201 	ands.w	r2, r3, #1
 8008e42:	d00a      	beq.n	8008e5a <__swsetup_r+0x9a>
 8008e44:	2200      	movs	r2, #0
 8008e46:	60a2      	str	r2, [r4, #8]
 8008e48:	6962      	ldr	r2, [r4, #20]
 8008e4a:	4252      	negs	r2, r2
 8008e4c:	61a2      	str	r2, [r4, #24]
 8008e4e:	6922      	ldr	r2, [r4, #16]
 8008e50:	b942      	cbnz	r2, 8008e64 <__swsetup_r+0xa4>
 8008e52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008e56:	d1c5      	bne.n	8008de4 <__swsetup_r+0x24>
 8008e58:	bd38      	pop	{r3, r4, r5, pc}
 8008e5a:	0799      	lsls	r1, r3, #30
 8008e5c:	bf58      	it	pl
 8008e5e:	6962      	ldrpl	r2, [r4, #20]
 8008e60:	60a2      	str	r2, [r4, #8]
 8008e62:	e7f4      	b.n	8008e4e <__swsetup_r+0x8e>
 8008e64:	2000      	movs	r0, #0
 8008e66:	e7f7      	b.n	8008e58 <__swsetup_r+0x98>
 8008e68:	20000018 	.word	0x20000018

08008e6c <memset>:
 8008e6c:	4402      	add	r2, r0
 8008e6e:	4603      	mov	r3, r0
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d100      	bne.n	8008e76 <memset+0xa>
 8008e74:	4770      	bx	lr
 8008e76:	f803 1b01 	strb.w	r1, [r3], #1
 8008e7a:	e7f9      	b.n	8008e70 <memset+0x4>

08008e7c <_localeconv_r>:
 8008e7c:	4800      	ldr	r0, [pc, #0]	@ (8008e80 <_localeconv_r+0x4>)
 8008e7e:	4770      	bx	lr
 8008e80:	20000158 	.word	0x20000158

08008e84 <_close_r>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	4d06      	ldr	r5, [pc, #24]	@ (8008ea0 <_close_r+0x1c>)
 8008e88:	2300      	movs	r3, #0
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	4608      	mov	r0, r1
 8008e8e:	602b      	str	r3, [r5, #0]
 8008e90:	f7f9 f9ec 	bl	800226c <_close>
 8008e94:	1c43      	adds	r3, r0, #1
 8008e96:	d102      	bne.n	8008e9e <_close_r+0x1a>
 8008e98:	682b      	ldr	r3, [r5, #0]
 8008e9a:	b103      	cbz	r3, 8008e9e <_close_r+0x1a>
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ea0:	200005a4 	.word	0x200005a4

08008ea4 <_lseek_r>:
 8008ea4:	b538      	push	{r3, r4, r5, lr}
 8008ea6:	4d07      	ldr	r5, [pc, #28]	@ (8008ec4 <_lseek_r+0x20>)
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	4608      	mov	r0, r1
 8008eac:	4611      	mov	r1, r2
 8008eae:	2200      	movs	r2, #0
 8008eb0:	602a      	str	r2, [r5, #0]
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	f7f9 fa01 	bl	80022ba <_lseek>
 8008eb8:	1c43      	adds	r3, r0, #1
 8008eba:	d102      	bne.n	8008ec2 <_lseek_r+0x1e>
 8008ebc:	682b      	ldr	r3, [r5, #0]
 8008ebe:	b103      	cbz	r3, 8008ec2 <_lseek_r+0x1e>
 8008ec0:	6023      	str	r3, [r4, #0]
 8008ec2:	bd38      	pop	{r3, r4, r5, pc}
 8008ec4:	200005a4 	.word	0x200005a4

08008ec8 <_read_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	4d07      	ldr	r5, [pc, #28]	@ (8008ee8 <_read_r+0x20>)
 8008ecc:	4604      	mov	r4, r0
 8008ece:	4608      	mov	r0, r1
 8008ed0:	4611      	mov	r1, r2
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	602a      	str	r2, [r5, #0]
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	f7f9 f98f 	bl	80021fa <_read>
 8008edc:	1c43      	adds	r3, r0, #1
 8008ede:	d102      	bne.n	8008ee6 <_read_r+0x1e>
 8008ee0:	682b      	ldr	r3, [r5, #0]
 8008ee2:	b103      	cbz	r3, 8008ee6 <_read_r+0x1e>
 8008ee4:	6023      	str	r3, [r4, #0]
 8008ee6:	bd38      	pop	{r3, r4, r5, pc}
 8008ee8:	200005a4 	.word	0x200005a4

08008eec <_sbrk_r>:
 8008eec:	b538      	push	{r3, r4, r5, lr}
 8008eee:	4d06      	ldr	r5, [pc, #24]	@ (8008f08 <_sbrk_r+0x1c>)
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	4608      	mov	r0, r1
 8008ef6:	602b      	str	r3, [r5, #0]
 8008ef8:	f7f9 f9ec 	bl	80022d4 <_sbrk>
 8008efc:	1c43      	adds	r3, r0, #1
 8008efe:	d102      	bne.n	8008f06 <_sbrk_r+0x1a>
 8008f00:	682b      	ldr	r3, [r5, #0]
 8008f02:	b103      	cbz	r3, 8008f06 <_sbrk_r+0x1a>
 8008f04:	6023      	str	r3, [r4, #0]
 8008f06:	bd38      	pop	{r3, r4, r5, pc}
 8008f08:	200005a4 	.word	0x200005a4

08008f0c <_write_r>:
 8008f0c:	b538      	push	{r3, r4, r5, lr}
 8008f0e:	4d07      	ldr	r5, [pc, #28]	@ (8008f2c <_write_r+0x20>)
 8008f10:	4604      	mov	r4, r0
 8008f12:	4608      	mov	r0, r1
 8008f14:	4611      	mov	r1, r2
 8008f16:	2200      	movs	r2, #0
 8008f18:	602a      	str	r2, [r5, #0]
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	f7f9 f98a 	bl	8002234 <_write>
 8008f20:	1c43      	adds	r3, r0, #1
 8008f22:	d102      	bne.n	8008f2a <_write_r+0x1e>
 8008f24:	682b      	ldr	r3, [r5, #0]
 8008f26:	b103      	cbz	r3, 8008f2a <_write_r+0x1e>
 8008f28:	6023      	str	r3, [r4, #0]
 8008f2a:	bd38      	pop	{r3, r4, r5, pc}
 8008f2c:	200005a4 	.word	0x200005a4

08008f30 <__errno>:
 8008f30:	4b01      	ldr	r3, [pc, #4]	@ (8008f38 <__errno+0x8>)
 8008f32:	6818      	ldr	r0, [r3, #0]
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	20000018 	.word	0x20000018

08008f3c <__libc_init_array>:
 8008f3c:	b570      	push	{r4, r5, r6, lr}
 8008f3e:	4d0d      	ldr	r5, [pc, #52]	@ (8008f74 <__libc_init_array+0x38>)
 8008f40:	4c0d      	ldr	r4, [pc, #52]	@ (8008f78 <__libc_init_array+0x3c>)
 8008f42:	1b64      	subs	r4, r4, r5
 8008f44:	10a4      	asrs	r4, r4, #2
 8008f46:	2600      	movs	r6, #0
 8008f48:	42a6      	cmp	r6, r4
 8008f4a:	d109      	bne.n	8008f60 <__libc_init_array+0x24>
 8008f4c:	4d0b      	ldr	r5, [pc, #44]	@ (8008f7c <__libc_init_array+0x40>)
 8008f4e:	4c0c      	ldr	r4, [pc, #48]	@ (8008f80 <__libc_init_array+0x44>)
 8008f50:	f003 fa1c 	bl	800c38c <_init>
 8008f54:	1b64      	subs	r4, r4, r5
 8008f56:	10a4      	asrs	r4, r4, #2
 8008f58:	2600      	movs	r6, #0
 8008f5a:	42a6      	cmp	r6, r4
 8008f5c:	d105      	bne.n	8008f6a <__libc_init_array+0x2e>
 8008f5e:	bd70      	pop	{r4, r5, r6, pc}
 8008f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f64:	4798      	blx	r3
 8008f66:	3601      	adds	r6, #1
 8008f68:	e7ee      	b.n	8008f48 <__libc_init_array+0xc>
 8008f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f6e:	4798      	blx	r3
 8008f70:	3601      	adds	r6, #1
 8008f72:	e7f2      	b.n	8008f5a <__libc_init_array+0x1e>
 8008f74:	0800cb60 	.word	0x0800cb60
 8008f78:	0800cb60 	.word	0x0800cb60
 8008f7c:	0800cb60 	.word	0x0800cb60
 8008f80:	0800cb64 	.word	0x0800cb64

08008f84 <__retarget_lock_init_recursive>:
 8008f84:	4770      	bx	lr

08008f86 <__retarget_lock_acquire_recursive>:
 8008f86:	4770      	bx	lr

08008f88 <__retarget_lock_release_recursive>:
 8008f88:	4770      	bx	lr
	...

08008f8c <nanf>:
 8008f8c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008f94 <nanf+0x8>
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	7fc00000 	.word	0x7fc00000

08008f98 <quorem>:
 8008f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f9c:	6903      	ldr	r3, [r0, #16]
 8008f9e:	690c      	ldr	r4, [r1, #16]
 8008fa0:	42a3      	cmp	r3, r4
 8008fa2:	4607      	mov	r7, r0
 8008fa4:	db7e      	blt.n	80090a4 <quorem+0x10c>
 8008fa6:	3c01      	subs	r4, #1
 8008fa8:	f101 0814 	add.w	r8, r1, #20
 8008fac:	00a3      	lsls	r3, r4, #2
 8008fae:	f100 0514 	add.w	r5, r0, #20
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fb8:	9301      	str	r3, [sp, #4]
 8008fba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008fbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008fca:	fbb2 f6f3 	udiv	r6, r2, r3
 8008fce:	d32e      	bcc.n	800902e <quorem+0x96>
 8008fd0:	f04f 0a00 	mov.w	sl, #0
 8008fd4:	46c4      	mov	ip, r8
 8008fd6:	46ae      	mov	lr, r5
 8008fd8:	46d3      	mov	fp, sl
 8008fda:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008fde:	b298      	uxth	r0, r3
 8008fe0:	fb06 a000 	mla	r0, r6, r0, sl
 8008fe4:	0c02      	lsrs	r2, r0, #16
 8008fe6:	0c1b      	lsrs	r3, r3, #16
 8008fe8:	fb06 2303 	mla	r3, r6, r3, r2
 8008fec:	f8de 2000 	ldr.w	r2, [lr]
 8008ff0:	b280      	uxth	r0, r0
 8008ff2:	b292      	uxth	r2, r2
 8008ff4:	1a12      	subs	r2, r2, r0
 8008ff6:	445a      	add	r2, fp
 8008ff8:	f8de 0000 	ldr.w	r0, [lr]
 8008ffc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009000:	b29b      	uxth	r3, r3
 8009002:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009006:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800900a:	b292      	uxth	r2, r2
 800900c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009010:	45e1      	cmp	r9, ip
 8009012:	f84e 2b04 	str.w	r2, [lr], #4
 8009016:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800901a:	d2de      	bcs.n	8008fda <quorem+0x42>
 800901c:	9b00      	ldr	r3, [sp, #0]
 800901e:	58eb      	ldr	r3, [r5, r3]
 8009020:	b92b      	cbnz	r3, 800902e <quorem+0x96>
 8009022:	9b01      	ldr	r3, [sp, #4]
 8009024:	3b04      	subs	r3, #4
 8009026:	429d      	cmp	r5, r3
 8009028:	461a      	mov	r2, r3
 800902a:	d32f      	bcc.n	800908c <quorem+0xf4>
 800902c:	613c      	str	r4, [r7, #16]
 800902e:	4638      	mov	r0, r7
 8009030:	f001 f90c 	bl	800a24c <__mcmp>
 8009034:	2800      	cmp	r0, #0
 8009036:	db25      	blt.n	8009084 <quorem+0xec>
 8009038:	4629      	mov	r1, r5
 800903a:	2000      	movs	r0, #0
 800903c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009040:	f8d1 c000 	ldr.w	ip, [r1]
 8009044:	fa1f fe82 	uxth.w	lr, r2
 8009048:	fa1f f38c 	uxth.w	r3, ip
 800904c:	eba3 030e 	sub.w	r3, r3, lr
 8009050:	4403      	add	r3, r0
 8009052:	0c12      	lsrs	r2, r2, #16
 8009054:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009058:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800905c:	b29b      	uxth	r3, r3
 800905e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009062:	45c1      	cmp	r9, r8
 8009064:	f841 3b04 	str.w	r3, [r1], #4
 8009068:	ea4f 4022 	mov.w	r0, r2, asr #16
 800906c:	d2e6      	bcs.n	800903c <quorem+0xa4>
 800906e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009072:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009076:	b922      	cbnz	r2, 8009082 <quorem+0xea>
 8009078:	3b04      	subs	r3, #4
 800907a:	429d      	cmp	r5, r3
 800907c:	461a      	mov	r2, r3
 800907e:	d30b      	bcc.n	8009098 <quorem+0x100>
 8009080:	613c      	str	r4, [r7, #16]
 8009082:	3601      	adds	r6, #1
 8009084:	4630      	mov	r0, r6
 8009086:	b003      	add	sp, #12
 8009088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800908c:	6812      	ldr	r2, [r2, #0]
 800908e:	3b04      	subs	r3, #4
 8009090:	2a00      	cmp	r2, #0
 8009092:	d1cb      	bne.n	800902c <quorem+0x94>
 8009094:	3c01      	subs	r4, #1
 8009096:	e7c6      	b.n	8009026 <quorem+0x8e>
 8009098:	6812      	ldr	r2, [r2, #0]
 800909a:	3b04      	subs	r3, #4
 800909c:	2a00      	cmp	r2, #0
 800909e:	d1ef      	bne.n	8009080 <quorem+0xe8>
 80090a0:	3c01      	subs	r4, #1
 80090a2:	e7ea      	b.n	800907a <quorem+0xe2>
 80090a4:	2000      	movs	r0, #0
 80090a6:	e7ee      	b.n	8009086 <quorem+0xee>

080090a8 <_dtoa_r>:
 80090a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ac:	69c7      	ldr	r7, [r0, #28]
 80090ae:	b099      	sub	sp, #100	@ 0x64
 80090b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80090b4:	ec55 4b10 	vmov	r4, r5, d0
 80090b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80090ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80090bc:	4683      	mov	fp, r0
 80090be:	920e      	str	r2, [sp, #56]	@ 0x38
 80090c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80090c2:	b97f      	cbnz	r7, 80090e4 <_dtoa_r+0x3c>
 80090c4:	2010      	movs	r0, #16
 80090c6:	f7fe fd7d 	bl	8007bc4 <malloc>
 80090ca:	4602      	mov	r2, r0
 80090cc:	f8cb 001c 	str.w	r0, [fp, #28]
 80090d0:	b920      	cbnz	r0, 80090dc <_dtoa_r+0x34>
 80090d2:	4ba7      	ldr	r3, [pc, #668]	@ (8009370 <_dtoa_r+0x2c8>)
 80090d4:	21ef      	movs	r1, #239	@ 0xef
 80090d6:	48a7      	ldr	r0, [pc, #668]	@ (8009374 <_dtoa_r+0x2cc>)
 80090d8:	f002 fd3a 	bl	800bb50 <__assert_func>
 80090dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80090e0:	6007      	str	r7, [r0, #0]
 80090e2:	60c7      	str	r7, [r0, #12]
 80090e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80090e8:	6819      	ldr	r1, [r3, #0]
 80090ea:	b159      	cbz	r1, 8009104 <_dtoa_r+0x5c>
 80090ec:	685a      	ldr	r2, [r3, #4]
 80090ee:	604a      	str	r2, [r1, #4]
 80090f0:	2301      	movs	r3, #1
 80090f2:	4093      	lsls	r3, r2
 80090f4:	608b      	str	r3, [r1, #8]
 80090f6:	4658      	mov	r0, fp
 80090f8:	f000 fe24 	bl	8009d44 <_Bfree>
 80090fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009100:	2200      	movs	r2, #0
 8009102:	601a      	str	r2, [r3, #0]
 8009104:	1e2b      	subs	r3, r5, #0
 8009106:	bfb9      	ittee	lt
 8009108:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800910c:	9303      	strlt	r3, [sp, #12]
 800910e:	2300      	movge	r3, #0
 8009110:	6033      	strge	r3, [r6, #0]
 8009112:	9f03      	ldr	r7, [sp, #12]
 8009114:	4b98      	ldr	r3, [pc, #608]	@ (8009378 <_dtoa_r+0x2d0>)
 8009116:	bfbc      	itt	lt
 8009118:	2201      	movlt	r2, #1
 800911a:	6032      	strlt	r2, [r6, #0]
 800911c:	43bb      	bics	r3, r7
 800911e:	d112      	bne.n	8009146 <_dtoa_r+0x9e>
 8009120:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009122:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009126:	6013      	str	r3, [r2, #0]
 8009128:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800912c:	4323      	orrs	r3, r4
 800912e:	f000 854d 	beq.w	8009bcc <_dtoa_r+0xb24>
 8009132:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009134:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800938c <_dtoa_r+0x2e4>
 8009138:	2b00      	cmp	r3, #0
 800913a:	f000 854f 	beq.w	8009bdc <_dtoa_r+0xb34>
 800913e:	f10a 0303 	add.w	r3, sl, #3
 8009142:	f000 bd49 	b.w	8009bd8 <_dtoa_r+0xb30>
 8009146:	ed9d 7b02 	vldr	d7, [sp, #8]
 800914a:	2200      	movs	r2, #0
 800914c:	ec51 0b17 	vmov	r0, r1, d7
 8009150:	2300      	movs	r3, #0
 8009152:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009156:	f7f7 fcd7 	bl	8000b08 <__aeabi_dcmpeq>
 800915a:	4680      	mov	r8, r0
 800915c:	b158      	cbz	r0, 8009176 <_dtoa_r+0xce>
 800915e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009160:	2301      	movs	r3, #1
 8009162:	6013      	str	r3, [r2, #0]
 8009164:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009166:	b113      	cbz	r3, 800916e <_dtoa_r+0xc6>
 8009168:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800916a:	4b84      	ldr	r3, [pc, #528]	@ (800937c <_dtoa_r+0x2d4>)
 800916c:	6013      	str	r3, [r2, #0]
 800916e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009390 <_dtoa_r+0x2e8>
 8009172:	f000 bd33 	b.w	8009bdc <_dtoa_r+0xb34>
 8009176:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800917a:	aa16      	add	r2, sp, #88	@ 0x58
 800917c:	a917      	add	r1, sp, #92	@ 0x5c
 800917e:	4658      	mov	r0, fp
 8009180:	f001 f984 	bl	800a48c <__d2b>
 8009184:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009188:	4681      	mov	r9, r0
 800918a:	2e00      	cmp	r6, #0
 800918c:	d077      	beq.n	800927e <_dtoa_r+0x1d6>
 800918e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009190:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009198:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800919c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80091a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80091a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80091a8:	4619      	mov	r1, r3
 80091aa:	2200      	movs	r2, #0
 80091ac:	4b74      	ldr	r3, [pc, #464]	@ (8009380 <_dtoa_r+0x2d8>)
 80091ae:	f7f7 f88b 	bl	80002c8 <__aeabi_dsub>
 80091b2:	a369      	add	r3, pc, #420	@ (adr r3, 8009358 <_dtoa_r+0x2b0>)
 80091b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b8:	f7f7 fa3e 	bl	8000638 <__aeabi_dmul>
 80091bc:	a368      	add	r3, pc, #416	@ (adr r3, 8009360 <_dtoa_r+0x2b8>)
 80091be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c2:	f7f7 f883 	bl	80002cc <__adddf3>
 80091c6:	4604      	mov	r4, r0
 80091c8:	4630      	mov	r0, r6
 80091ca:	460d      	mov	r5, r1
 80091cc:	f7f7 f9ca 	bl	8000564 <__aeabi_i2d>
 80091d0:	a365      	add	r3, pc, #404	@ (adr r3, 8009368 <_dtoa_r+0x2c0>)
 80091d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d6:	f7f7 fa2f 	bl	8000638 <__aeabi_dmul>
 80091da:	4602      	mov	r2, r0
 80091dc:	460b      	mov	r3, r1
 80091de:	4620      	mov	r0, r4
 80091e0:	4629      	mov	r1, r5
 80091e2:	f7f7 f873 	bl	80002cc <__adddf3>
 80091e6:	4604      	mov	r4, r0
 80091e8:	460d      	mov	r5, r1
 80091ea:	f7f7 fcd5 	bl	8000b98 <__aeabi_d2iz>
 80091ee:	2200      	movs	r2, #0
 80091f0:	4607      	mov	r7, r0
 80091f2:	2300      	movs	r3, #0
 80091f4:	4620      	mov	r0, r4
 80091f6:	4629      	mov	r1, r5
 80091f8:	f7f7 fc90 	bl	8000b1c <__aeabi_dcmplt>
 80091fc:	b140      	cbz	r0, 8009210 <_dtoa_r+0x168>
 80091fe:	4638      	mov	r0, r7
 8009200:	f7f7 f9b0 	bl	8000564 <__aeabi_i2d>
 8009204:	4622      	mov	r2, r4
 8009206:	462b      	mov	r3, r5
 8009208:	f7f7 fc7e 	bl	8000b08 <__aeabi_dcmpeq>
 800920c:	b900      	cbnz	r0, 8009210 <_dtoa_r+0x168>
 800920e:	3f01      	subs	r7, #1
 8009210:	2f16      	cmp	r7, #22
 8009212:	d851      	bhi.n	80092b8 <_dtoa_r+0x210>
 8009214:	4b5b      	ldr	r3, [pc, #364]	@ (8009384 <_dtoa_r+0x2dc>)
 8009216:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800921a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009222:	f7f7 fc7b 	bl	8000b1c <__aeabi_dcmplt>
 8009226:	2800      	cmp	r0, #0
 8009228:	d048      	beq.n	80092bc <_dtoa_r+0x214>
 800922a:	3f01      	subs	r7, #1
 800922c:	2300      	movs	r3, #0
 800922e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009230:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009232:	1b9b      	subs	r3, r3, r6
 8009234:	1e5a      	subs	r2, r3, #1
 8009236:	bf44      	itt	mi
 8009238:	f1c3 0801 	rsbmi	r8, r3, #1
 800923c:	2300      	movmi	r3, #0
 800923e:	9208      	str	r2, [sp, #32]
 8009240:	bf54      	ite	pl
 8009242:	f04f 0800 	movpl.w	r8, #0
 8009246:	9308      	strmi	r3, [sp, #32]
 8009248:	2f00      	cmp	r7, #0
 800924a:	db39      	blt.n	80092c0 <_dtoa_r+0x218>
 800924c:	9b08      	ldr	r3, [sp, #32]
 800924e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009250:	443b      	add	r3, r7
 8009252:	9308      	str	r3, [sp, #32]
 8009254:	2300      	movs	r3, #0
 8009256:	930a      	str	r3, [sp, #40]	@ 0x28
 8009258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800925a:	2b09      	cmp	r3, #9
 800925c:	d864      	bhi.n	8009328 <_dtoa_r+0x280>
 800925e:	2b05      	cmp	r3, #5
 8009260:	bfc4      	itt	gt
 8009262:	3b04      	subgt	r3, #4
 8009264:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009268:	f1a3 0302 	sub.w	r3, r3, #2
 800926c:	bfcc      	ite	gt
 800926e:	2400      	movgt	r4, #0
 8009270:	2401      	movle	r4, #1
 8009272:	2b03      	cmp	r3, #3
 8009274:	d863      	bhi.n	800933e <_dtoa_r+0x296>
 8009276:	e8df f003 	tbb	[pc, r3]
 800927a:	372a      	.short	0x372a
 800927c:	5535      	.short	0x5535
 800927e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009282:	441e      	add	r6, r3
 8009284:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009288:	2b20      	cmp	r3, #32
 800928a:	bfc1      	itttt	gt
 800928c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009290:	409f      	lslgt	r7, r3
 8009292:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009296:	fa24 f303 	lsrgt.w	r3, r4, r3
 800929a:	bfd6      	itet	le
 800929c:	f1c3 0320 	rsble	r3, r3, #32
 80092a0:	ea47 0003 	orrgt.w	r0, r7, r3
 80092a4:	fa04 f003 	lslle.w	r0, r4, r3
 80092a8:	f7f7 f94c 	bl	8000544 <__aeabi_ui2d>
 80092ac:	2201      	movs	r2, #1
 80092ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80092b2:	3e01      	subs	r6, #1
 80092b4:	9214      	str	r2, [sp, #80]	@ 0x50
 80092b6:	e777      	b.n	80091a8 <_dtoa_r+0x100>
 80092b8:	2301      	movs	r3, #1
 80092ba:	e7b8      	b.n	800922e <_dtoa_r+0x186>
 80092bc:	9012      	str	r0, [sp, #72]	@ 0x48
 80092be:	e7b7      	b.n	8009230 <_dtoa_r+0x188>
 80092c0:	427b      	negs	r3, r7
 80092c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80092c4:	2300      	movs	r3, #0
 80092c6:	eba8 0807 	sub.w	r8, r8, r7
 80092ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80092cc:	e7c4      	b.n	8009258 <_dtoa_r+0x1b0>
 80092ce:	2300      	movs	r3, #0
 80092d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	dc35      	bgt.n	8009344 <_dtoa_r+0x29c>
 80092d8:	2301      	movs	r3, #1
 80092da:	9300      	str	r3, [sp, #0]
 80092dc:	9307      	str	r3, [sp, #28]
 80092de:	461a      	mov	r2, r3
 80092e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80092e2:	e00b      	b.n	80092fc <_dtoa_r+0x254>
 80092e4:	2301      	movs	r3, #1
 80092e6:	e7f3      	b.n	80092d0 <_dtoa_r+0x228>
 80092e8:	2300      	movs	r3, #0
 80092ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092ee:	18fb      	adds	r3, r7, r3
 80092f0:	9300      	str	r3, [sp, #0]
 80092f2:	3301      	adds	r3, #1
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	9307      	str	r3, [sp, #28]
 80092f8:	bfb8      	it	lt
 80092fa:	2301      	movlt	r3, #1
 80092fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009300:	2100      	movs	r1, #0
 8009302:	2204      	movs	r2, #4
 8009304:	f102 0514 	add.w	r5, r2, #20
 8009308:	429d      	cmp	r5, r3
 800930a:	d91f      	bls.n	800934c <_dtoa_r+0x2a4>
 800930c:	6041      	str	r1, [r0, #4]
 800930e:	4658      	mov	r0, fp
 8009310:	f000 fcd8 	bl	8009cc4 <_Balloc>
 8009314:	4682      	mov	sl, r0
 8009316:	2800      	cmp	r0, #0
 8009318:	d13c      	bne.n	8009394 <_dtoa_r+0x2ec>
 800931a:	4b1b      	ldr	r3, [pc, #108]	@ (8009388 <_dtoa_r+0x2e0>)
 800931c:	4602      	mov	r2, r0
 800931e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009322:	e6d8      	b.n	80090d6 <_dtoa_r+0x2e>
 8009324:	2301      	movs	r3, #1
 8009326:	e7e0      	b.n	80092ea <_dtoa_r+0x242>
 8009328:	2401      	movs	r4, #1
 800932a:	2300      	movs	r3, #0
 800932c:	9309      	str	r3, [sp, #36]	@ 0x24
 800932e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009330:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009334:	9300      	str	r3, [sp, #0]
 8009336:	9307      	str	r3, [sp, #28]
 8009338:	2200      	movs	r2, #0
 800933a:	2312      	movs	r3, #18
 800933c:	e7d0      	b.n	80092e0 <_dtoa_r+0x238>
 800933e:	2301      	movs	r3, #1
 8009340:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009342:	e7f5      	b.n	8009330 <_dtoa_r+0x288>
 8009344:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	9307      	str	r3, [sp, #28]
 800934a:	e7d7      	b.n	80092fc <_dtoa_r+0x254>
 800934c:	3101      	adds	r1, #1
 800934e:	0052      	lsls	r2, r2, #1
 8009350:	e7d8      	b.n	8009304 <_dtoa_r+0x25c>
 8009352:	bf00      	nop
 8009354:	f3af 8000 	nop.w
 8009358:	636f4361 	.word	0x636f4361
 800935c:	3fd287a7 	.word	0x3fd287a7
 8009360:	8b60c8b3 	.word	0x8b60c8b3
 8009364:	3fc68a28 	.word	0x3fc68a28
 8009368:	509f79fb 	.word	0x509f79fb
 800936c:	3fd34413 	.word	0x3fd34413
 8009370:	0800c76e 	.word	0x0800c76e
 8009374:	0800c785 	.word	0x0800c785
 8009378:	7ff00000 	.word	0x7ff00000
 800937c:	0800c739 	.word	0x0800c739
 8009380:	3ff80000 	.word	0x3ff80000
 8009384:	0800c880 	.word	0x0800c880
 8009388:	0800c7dd 	.word	0x0800c7dd
 800938c:	0800c76a 	.word	0x0800c76a
 8009390:	0800c738 	.word	0x0800c738
 8009394:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009398:	6018      	str	r0, [r3, #0]
 800939a:	9b07      	ldr	r3, [sp, #28]
 800939c:	2b0e      	cmp	r3, #14
 800939e:	f200 80a4 	bhi.w	80094ea <_dtoa_r+0x442>
 80093a2:	2c00      	cmp	r4, #0
 80093a4:	f000 80a1 	beq.w	80094ea <_dtoa_r+0x442>
 80093a8:	2f00      	cmp	r7, #0
 80093aa:	dd33      	ble.n	8009414 <_dtoa_r+0x36c>
 80093ac:	4bad      	ldr	r3, [pc, #692]	@ (8009664 <_dtoa_r+0x5bc>)
 80093ae:	f007 020f 	and.w	r2, r7, #15
 80093b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093b6:	ed93 7b00 	vldr	d7, [r3]
 80093ba:	05f8      	lsls	r0, r7, #23
 80093bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80093c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80093c4:	d516      	bpl.n	80093f4 <_dtoa_r+0x34c>
 80093c6:	4ba8      	ldr	r3, [pc, #672]	@ (8009668 <_dtoa_r+0x5c0>)
 80093c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80093d0:	f7f7 fa5c 	bl	800088c <__aeabi_ddiv>
 80093d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093d8:	f004 040f 	and.w	r4, r4, #15
 80093dc:	2603      	movs	r6, #3
 80093de:	4da2      	ldr	r5, [pc, #648]	@ (8009668 <_dtoa_r+0x5c0>)
 80093e0:	b954      	cbnz	r4, 80093f8 <_dtoa_r+0x350>
 80093e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093ea:	f7f7 fa4f 	bl	800088c <__aeabi_ddiv>
 80093ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093f2:	e028      	b.n	8009446 <_dtoa_r+0x39e>
 80093f4:	2602      	movs	r6, #2
 80093f6:	e7f2      	b.n	80093de <_dtoa_r+0x336>
 80093f8:	07e1      	lsls	r1, r4, #31
 80093fa:	d508      	bpl.n	800940e <_dtoa_r+0x366>
 80093fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009400:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009404:	f7f7 f918 	bl	8000638 <__aeabi_dmul>
 8009408:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800940c:	3601      	adds	r6, #1
 800940e:	1064      	asrs	r4, r4, #1
 8009410:	3508      	adds	r5, #8
 8009412:	e7e5      	b.n	80093e0 <_dtoa_r+0x338>
 8009414:	f000 80d2 	beq.w	80095bc <_dtoa_r+0x514>
 8009418:	427c      	negs	r4, r7
 800941a:	4b92      	ldr	r3, [pc, #584]	@ (8009664 <_dtoa_r+0x5bc>)
 800941c:	4d92      	ldr	r5, [pc, #584]	@ (8009668 <_dtoa_r+0x5c0>)
 800941e:	f004 020f 	and.w	r2, r4, #15
 8009422:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800942e:	f7f7 f903 	bl	8000638 <__aeabi_dmul>
 8009432:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009436:	1124      	asrs	r4, r4, #4
 8009438:	2300      	movs	r3, #0
 800943a:	2602      	movs	r6, #2
 800943c:	2c00      	cmp	r4, #0
 800943e:	f040 80b2 	bne.w	80095a6 <_dtoa_r+0x4fe>
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1d3      	bne.n	80093ee <_dtoa_r+0x346>
 8009446:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009448:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800944c:	2b00      	cmp	r3, #0
 800944e:	f000 80b7 	beq.w	80095c0 <_dtoa_r+0x518>
 8009452:	4b86      	ldr	r3, [pc, #536]	@ (800966c <_dtoa_r+0x5c4>)
 8009454:	2200      	movs	r2, #0
 8009456:	4620      	mov	r0, r4
 8009458:	4629      	mov	r1, r5
 800945a:	f7f7 fb5f 	bl	8000b1c <__aeabi_dcmplt>
 800945e:	2800      	cmp	r0, #0
 8009460:	f000 80ae 	beq.w	80095c0 <_dtoa_r+0x518>
 8009464:	9b07      	ldr	r3, [sp, #28]
 8009466:	2b00      	cmp	r3, #0
 8009468:	f000 80aa 	beq.w	80095c0 <_dtoa_r+0x518>
 800946c:	9b00      	ldr	r3, [sp, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	dd37      	ble.n	80094e2 <_dtoa_r+0x43a>
 8009472:	1e7b      	subs	r3, r7, #1
 8009474:	9304      	str	r3, [sp, #16]
 8009476:	4620      	mov	r0, r4
 8009478:	4b7d      	ldr	r3, [pc, #500]	@ (8009670 <_dtoa_r+0x5c8>)
 800947a:	2200      	movs	r2, #0
 800947c:	4629      	mov	r1, r5
 800947e:	f7f7 f8db 	bl	8000638 <__aeabi_dmul>
 8009482:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009486:	9c00      	ldr	r4, [sp, #0]
 8009488:	3601      	adds	r6, #1
 800948a:	4630      	mov	r0, r6
 800948c:	f7f7 f86a 	bl	8000564 <__aeabi_i2d>
 8009490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009494:	f7f7 f8d0 	bl	8000638 <__aeabi_dmul>
 8009498:	4b76      	ldr	r3, [pc, #472]	@ (8009674 <_dtoa_r+0x5cc>)
 800949a:	2200      	movs	r2, #0
 800949c:	f7f6 ff16 	bl	80002cc <__adddf3>
 80094a0:	4605      	mov	r5, r0
 80094a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80094a6:	2c00      	cmp	r4, #0
 80094a8:	f040 808d 	bne.w	80095c6 <_dtoa_r+0x51e>
 80094ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094b0:	4b71      	ldr	r3, [pc, #452]	@ (8009678 <_dtoa_r+0x5d0>)
 80094b2:	2200      	movs	r2, #0
 80094b4:	f7f6 ff08 	bl	80002c8 <__aeabi_dsub>
 80094b8:	4602      	mov	r2, r0
 80094ba:	460b      	mov	r3, r1
 80094bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094c0:	462a      	mov	r2, r5
 80094c2:	4633      	mov	r3, r6
 80094c4:	f7f7 fb48 	bl	8000b58 <__aeabi_dcmpgt>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	f040 828b 	bne.w	80099e4 <_dtoa_r+0x93c>
 80094ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094d2:	462a      	mov	r2, r5
 80094d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80094d8:	f7f7 fb20 	bl	8000b1c <__aeabi_dcmplt>
 80094dc:	2800      	cmp	r0, #0
 80094de:	f040 8128 	bne.w	8009732 <_dtoa_r+0x68a>
 80094e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80094e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80094ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f2c0 815a 	blt.w	80097a6 <_dtoa_r+0x6fe>
 80094f2:	2f0e      	cmp	r7, #14
 80094f4:	f300 8157 	bgt.w	80097a6 <_dtoa_r+0x6fe>
 80094f8:	4b5a      	ldr	r3, [pc, #360]	@ (8009664 <_dtoa_r+0x5bc>)
 80094fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80094fe:	ed93 7b00 	vldr	d7, [r3]
 8009502:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009504:	2b00      	cmp	r3, #0
 8009506:	ed8d 7b00 	vstr	d7, [sp]
 800950a:	da03      	bge.n	8009514 <_dtoa_r+0x46c>
 800950c:	9b07      	ldr	r3, [sp, #28]
 800950e:	2b00      	cmp	r3, #0
 8009510:	f340 8101 	ble.w	8009716 <_dtoa_r+0x66e>
 8009514:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009518:	4656      	mov	r6, sl
 800951a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800951e:	4620      	mov	r0, r4
 8009520:	4629      	mov	r1, r5
 8009522:	f7f7 f9b3 	bl	800088c <__aeabi_ddiv>
 8009526:	f7f7 fb37 	bl	8000b98 <__aeabi_d2iz>
 800952a:	4680      	mov	r8, r0
 800952c:	f7f7 f81a 	bl	8000564 <__aeabi_i2d>
 8009530:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009534:	f7f7 f880 	bl	8000638 <__aeabi_dmul>
 8009538:	4602      	mov	r2, r0
 800953a:	460b      	mov	r3, r1
 800953c:	4620      	mov	r0, r4
 800953e:	4629      	mov	r1, r5
 8009540:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009544:	f7f6 fec0 	bl	80002c8 <__aeabi_dsub>
 8009548:	f806 4b01 	strb.w	r4, [r6], #1
 800954c:	9d07      	ldr	r5, [sp, #28]
 800954e:	eba6 040a 	sub.w	r4, r6, sl
 8009552:	42a5      	cmp	r5, r4
 8009554:	4602      	mov	r2, r0
 8009556:	460b      	mov	r3, r1
 8009558:	f040 8117 	bne.w	800978a <_dtoa_r+0x6e2>
 800955c:	f7f6 feb6 	bl	80002cc <__adddf3>
 8009560:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009564:	4604      	mov	r4, r0
 8009566:	460d      	mov	r5, r1
 8009568:	f7f7 faf6 	bl	8000b58 <__aeabi_dcmpgt>
 800956c:	2800      	cmp	r0, #0
 800956e:	f040 80f9 	bne.w	8009764 <_dtoa_r+0x6bc>
 8009572:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009576:	4620      	mov	r0, r4
 8009578:	4629      	mov	r1, r5
 800957a:	f7f7 fac5 	bl	8000b08 <__aeabi_dcmpeq>
 800957e:	b118      	cbz	r0, 8009588 <_dtoa_r+0x4e0>
 8009580:	f018 0f01 	tst.w	r8, #1
 8009584:	f040 80ee 	bne.w	8009764 <_dtoa_r+0x6bc>
 8009588:	4649      	mov	r1, r9
 800958a:	4658      	mov	r0, fp
 800958c:	f000 fbda 	bl	8009d44 <_Bfree>
 8009590:	2300      	movs	r3, #0
 8009592:	7033      	strb	r3, [r6, #0]
 8009594:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009596:	3701      	adds	r7, #1
 8009598:	601f      	str	r7, [r3, #0]
 800959a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800959c:	2b00      	cmp	r3, #0
 800959e:	f000 831d 	beq.w	8009bdc <_dtoa_r+0xb34>
 80095a2:	601e      	str	r6, [r3, #0]
 80095a4:	e31a      	b.n	8009bdc <_dtoa_r+0xb34>
 80095a6:	07e2      	lsls	r2, r4, #31
 80095a8:	d505      	bpl.n	80095b6 <_dtoa_r+0x50e>
 80095aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80095ae:	f7f7 f843 	bl	8000638 <__aeabi_dmul>
 80095b2:	3601      	adds	r6, #1
 80095b4:	2301      	movs	r3, #1
 80095b6:	1064      	asrs	r4, r4, #1
 80095b8:	3508      	adds	r5, #8
 80095ba:	e73f      	b.n	800943c <_dtoa_r+0x394>
 80095bc:	2602      	movs	r6, #2
 80095be:	e742      	b.n	8009446 <_dtoa_r+0x39e>
 80095c0:	9c07      	ldr	r4, [sp, #28]
 80095c2:	9704      	str	r7, [sp, #16]
 80095c4:	e761      	b.n	800948a <_dtoa_r+0x3e2>
 80095c6:	4b27      	ldr	r3, [pc, #156]	@ (8009664 <_dtoa_r+0x5bc>)
 80095c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80095ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80095ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80095d2:	4454      	add	r4, sl
 80095d4:	2900      	cmp	r1, #0
 80095d6:	d053      	beq.n	8009680 <_dtoa_r+0x5d8>
 80095d8:	4928      	ldr	r1, [pc, #160]	@ (800967c <_dtoa_r+0x5d4>)
 80095da:	2000      	movs	r0, #0
 80095dc:	f7f7 f956 	bl	800088c <__aeabi_ddiv>
 80095e0:	4633      	mov	r3, r6
 80095e2:	462a      	mov	r2, r5
 80095e4:	f7f6 fe70 	bl	80002c8 <__aeabi_dsub>
 80095e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80095ec:	4656      	mov	r6, sl
 80095ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095f2:	f7f7 fad1 	bl	8000b98 <__aeabi_d2iz>
 80095f6:	4605      	mov	r5, r0
 80095f8:	f7f6 ffb4 	bl	8000564 <__aeabi_i2d>
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009604:	f7f6 fe60 	bl	80002c8 <__aeabi_dsub>
 8009608:	3530      	adds	r5, #48	@ 0x30
 800960a:	4602      	mov	r2, r0
 800960c:	460b      	mov	r3, r1
 800960e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009612:	f806 5b01 	strb.w	r5, [r6], #1
 8009616:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800961a:	f7f7 fa7f 	bl	8000b1c <__aeabi_dcmplt>
 800961e:	2800      	cmp	r0, #0
 8009620:	d171      	bne.n	8009706 <_dtoa_r+0x65e>
 8009622:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009626:	4911      	ldr	r1, [pc, #68]	@ (800966c <_dtoa_r+0x5c4>)
 8009628:	2000      	movs	r0, #0
 800962a:	f7f6 fe4d 	bl	80002c8 <__aeabi_dsub>
 800962e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009632:	f7f7 fa73 	bl	8000b1c <__aeabi_dcmplt>
 8009636:	2800      	cmp	r0, #0
 8009638:	f040 8095 	bne.w	8009766 <_dtoa_r+0x6be>
 800963c:	42a6      	cmp	r6, r4
 800963e:	f43f af50 	beq.w	80094e2 <_dtoa_r+0x43a>
 8009642:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009646:	4b0a      	ldr	r3, [pc, #40]	@ (8009670 <_dtoa_r+0x5c8>)
 8009648:	2200      	movs	r2, #0
 800964a:	f7f6 fff5 	bl	8000638 <__aeabi_dmul>
 800964e:	4b08      	ldr	r3, [pc, #32]	@ (8009670 <_dtoa_r+0x5c8>)
 8009650:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009654:	2200      	movs	r2, #0
 8009656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800965a:	f7f6 ffed 	bl	8000638 <__aeabi_dmul>
 800965e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009662:	e7c4      	b.n	80095ee <_dtoa_r+0x546>
 8009664:	0800c880 	.word	0x0800c880
 8009668:	0800c858 	.word	0x0800c858
 800966c:	3ff00000 	.word	0x3ff00000
 8009670:	40240000 	.word	0x40240000
 8009674:	401c0000 	.word	0x401c0000
 8009678:	40140000 	.word	0x40140000
 800967c:	3fe00000 	.word	0x3fe00000
 8009680:	4631      	mov	r1, r6
 8009682:	4628      	mov	r0, r5
 8009684:	f7f6 ffd8 	bl	8000638 <__aeabi_dmul>
 8009688:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800968c:	9415      	str	r4, [sp, #84]	@ 0x54
 800968e:	4656      	mov	r6, sl
 8009690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009694:	f7f7 fa80 	bl	8000b98 <__aeabi_d2iz>
 8009698:	4605      	mov	r5, r0
 800969a:	f7f6 ff63 	bl	8000564 <__aeabi_i2d>
 800969e:	4602      	mov	r2, r0
 80096a0:	460b      	mov	r3, r1
 80096a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096a6:	f7f6 fe0f 	bl	80002c8 <__aeabi_dsub>
 80096aa:	3530      	adds	r5, #48	@ 0x30
 80096ac:	f806 5b01 	strb.w	r5, [r6], #1
 80096b0:	4602      	mov	r2, r0
 80096b2:	460b      	mov	r3, r1
 80096b4:	42a6      	cmp	r6, r4
 80096b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80096ba:	f04f 0200 	mov.w	r2, #0
 80096be:	d124      	bne.n	800970a <_dtoa_r+0x662>
 80096c0:	4bac      	ldr	r3, [pc, #688]	@ (8009974 <_dtoa_r+0x8cc>)
 80096c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80096c6:	f7f6 fe01 	bl	80002cc <__adddf3>
 80096ca:	4602      	mov	r2, r0
 80096cc:	460b      	mov	r3, r1
 80096ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096d2:	f7f7 fa41 	bl	8000b58 <__aeabi_dcmpgt>
 80096d6:	2800      	cmp	r0, #0
 80096d8:	d145      	bne.n	8009766 <_dtoa_r+0x6be>
 80096da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80096de:	49a5      	ldr	r1, [pc, #660]	@ (8009974 <_dtoa_r+0x8cc>)
 80096e0:	2000      	movs	r0, #0
 80096e2:	f7f6 fdf1 	bl	80002c8 <__aeabi_dsub>
 80096e6:	4602      	mov	r2, r0
 80096e8:	460b      	mov	r3, r1
 80096ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096ee:	f7f7 fa15 	bl	8000b1c <__aeabi_dcmplt>
 80096f2:	2800      	cmp	r0, #0
 80096f4:	f43f aef5 	beq.w	80094e2 <_dtoa_r+0x43a>
 80096f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80096fa:	1e73      	subs	r3, r6, #1
 80096fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80096fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009702:	2b30      	cmp	r3, #48	@ 0x30
 8009704:	d0f8      	beq.n	80096f8 <_dtoa_r+0x650>
 8009706:	9f04      	ldr	r7, [sp, #16]
 8009708:	e73e      	b.n	8009588 <_dtoa_r+0x4e0>
 800970a:	4b9b      	ldr	r3, [pc, #620]	@ (8009978 <_dtoa_r+0x8d0>)
 800970c:	f7f6 ff94 	bl	8000638 <__aeabi_dmul>
 8009710:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009714:	e7bc      	b.n	8009690 <_dtoa_r+0x5e8>
 8009716:	d10c      	bne.n	8009732 <_dtoa_r+0x68a>
 8009718:	4b98      	ldr	r3, [pc, #608]	@ (800997c <_dtoa_r+0x8d4>)
 800971a:	2200      	movs	r2, #0
 800971c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009720:	f7f6 ff8a 	bl	8000638 <__aeabi_dmul>
 8009724:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009728:	f7f7 fa0c 	bl	8000b44 <__aeabi_dcmpge>
 800972c:	2800      	cmp	r0, #0
 800972e:	f000 8157 	beq.w	80099e0 <_dtoa_r+0x938>
 8009732:	2400      	movs	r4, #0
 8009734:	4625      	mov	r5, r4
 8009736:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009738:	43db      	mvns	r3, r3
 800973a:	9304      	str	r3, [sp, #16]
 800973c:	4656      	mov	r6, sl
 800973e:	2700      	movs	r7, #0
 8009740:	4621      	mov	r1, r4
 8009742:	4658      	mov	r0, fp
 8009744:	f000 fafe 	bl	8009d44 <_Bfree>
 8009748:	2d00      	cmp	r5, #0
 800974a:	d0dc      	beq.n	8009706 <_dtoa_r+0x65e>
 800974c:	b12f      	cbz	r7, 800975a <_dtoa_r+0x6b2>
 800974e:	42af      	cmp	r7, r5
 8009750:	d003      	beq.n	800975a <_dtoa_r+0x6b2>
 8009752:	4639      	mov	r1, r7
 8009754:	4658      	mov	r0, fp
 8009756:	f000 faf5 	bl	8009d44 <_Bfree>
 800975a:	4629      	mov	r1, r5
 800975c:	4658      	mov	r0, fp
 800975e:	f000 faf1 	bl	8009d44 <_Bfree>
 8009762:	e7d0      	b.n	8009706 <_dtoa_r+0x65e>
 8009764:	9704      	str	r7, [sp, #16]
 8009766:	4633      	mov	r3, r6
 8009768:	461e      	mov	r6, r3
 800976a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800976e:	2a39      	cmp	r2, #57	@ 0x39
 8009770:	d107      	bne.n	8009782 <_dtoa_r+0x6da>
 8009772:	459a      	cmp	sl, r3
 8009774:	d1f8      	bne.n	8009768 <_dtoa_r+0x6c0>
 8009776:	9a04      	ldr	r2, [sp, #16]
 8009778:	3201      	adds	r2, #1
 800977a:	9204      	str	r2, [sp, #16]
 800977c:	2230      	movs	r2, #48	@ 0x30
 800977e:	f88a 2000 	strb.w	r2, [sl]
 8009782:	781a      	ldrb	r2, [r3, #0]
 8009784:	3201      	adds	r2, #1
 8009786:	701a      	strb	r2, [r3, #0]
 8009788:	e7bd      	b.n	8009706 <_dtoa_r+0x65e>
 800978a:	4b7b      	ldr	r3, [pc, #492]	@ (8009978 <_dtoa_r+0x8d0>)
 800978c:	2200      	movs	r2, #0
 800978e:	f7f6 ff53 	bl	8000638 <__aeabi_dmul>
 8009792:	2200      	movs	r2, #0
 8009794:	2300      	movs	r3, #0
 8009796:	4604      	mov	r4, r0
 8009798:	460d      	mov	r5, r1
 800979a:	f7f7 f9b5 	bl	8000b08 <__aeabi_dcmpeq>
 800979e:	2800      	cmp	r0, #0
 80097a0:	f43f aebb 	beq.w	800951a <_dtoa_r+0x472>
 80097a4:	e6f0      	b.n	8009588 <_dtoa_r+0x4e0>
 80097a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80097a8:	2a00      	cmp	r2, #0
 80097aa:	f000 80db 	beq.w	8009964 <_dtoa_r+0x8bc>
 80097ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097b0:	2a01      	cmp	r2, #1
 80097b2:	f300 80bf 	bgt.w	8009934 <_dtoa_r+0x88c>
 80097b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80097b8:	2a00      	cmp	r2, #0
 80097ba:	f000 80b7 	beq.w	800992c <_dtoa_r+0x884>
 80097be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80097c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80097c4:	4646      	mov	r6, r8
 80097c6:	9a08      	ldr	r2, [sp, #32]
 80097c8:	2101      	movs	r1, #1
 80097ca:	441a      	add	r2, r3
 80097cc:	4658      	mov	r0, fp
 80097ce:	4498      	add	r8, r3
 80097d0:	9208      	str	r2, [sp, #32]
 80097d2:	f000 fbb5 	bl	8009f40 <__i2b>
 80097d6:	4605      	mov	r5, r0
 80097d8:	b15e      	cbz	r6, 80097f2 <_dtoa_r+0x74a>
 80097da:	9b08      	ldr	r3, [sp, #32]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	dd08      	ble.n	80097f2 <_dtoa_r+0x74a>
 80097e0:	42b3      	cmp	r3, r6
 80097e2:	9a08      	ldr	r2, [sp, #32]
 80097e4:	bfa8      	it	ge
 80097e6:	4633      	movge	r3, r6
 80097e8:	eba8 0803 	sub.w	r8, r8, r3
 80097ec:	1af6      	subs	r6, r6, r3
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	9308      	str	r3, [sp, #32]
 80097f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097f4:	b1f3      	cbz	r3, 8009834 <_dtoa_r+0x78c>
 80097f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 80b7 	beq.w	800996c <_dtoa_r+0x8c4>
 80097fe:	b18c      	cbz	r4, 8009824 <_dtoa_r+0x77c>
 8009800:	4629      	mov	r1, r5
 8009802:	4622      	mov	r2, r4
 8009804:	4658      	mov	r0, fp
 8009806:	f000 fc5b 	bl	800a0c0 <__pow5mult>
 800980a:	464a      	mov	r2, r9
 800980c:	4601      	mov	r1, r0
 800980e:	4605      	mov	r5, r0
 8009810:	4658      	mov	r0, fp
 8009812:	f000 fbab 	bl	8009f6c <__multiply>
 8009816:	4649      	mov	r1, r9
 8009818:	9004      	str	r0, [sp, #16]
 800981a:	4658      	mov	r0, fp
 800981c:	f000 fa92 	bl	8009d44 <_Bfree>
 8009820:	9b04      	ldr	r3, [sp, #16]
 8009822:	4699      	mov	r9, r3
 8009824:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009826:	1b1a      	subs	r2, r3, r4
 8009828:	d004      	beq.n	8009834 <_dtoa_r+0x78c>
 800982a:	4649      	mov	r1, r9
 800982c:	4658      	mov	r0, fp
 800982e:	f000 fc47 	bl	800a0c0 <__pow5mult>
 8009832:	4681      	mov	r9, r0
 8009834:	2101      	movs	r1, #1
 8009836:	4658      	mov	r0, fp
 8009838:	f000 fb82 	bl	8009f40 <__i2b>
 800983c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800983e:	4604      	mov	r4, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	f000 81cf 	beq.w	8009be4 <_dtoa_r+0xb3c>
 8009846:	461a      	mov	r2, r3
 8009848:	4601      	mov	r1, r0
 800984a:	4658      	mov	r0, fp
 800984c:	f000 fc38 	bl	800a0c0 <__pow5mult>
 8009850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009852:	2b01      	cmp	r3, #1
 8009854:	4604      	mov	r4, r0
 8009856:	f300 8095 	bgt.w	8009984 <_dtoa_r+0x8dc>
 800985a:	9b02      	ldr	r3, [sp, #8]
 800985c:	2b00      	cmp	r3, #0
 800985e:	f040 8087 	bne.w	8009970 <_dtoa_r+0x8c8>
 8009862:	9b03      	ldr	r3, [sp, #12]
 8009864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009868:	2b00      	cmp	r3, #0
 800986a:	f040 8089 	bne.w	8009980 <_dtoa_r+0x8d8>
 800986e:	9b03      	ldr	r3, [sp, #12]
 8009870:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009874:	0d1b      	lsrs	r3, r3, #20
 8009876:	051b      	lsls	r3, r3, #20
 8009878:	b12b      	cbz	r3, 8009886 <_dtoa_r+0x7de>
 800987a:	9b08      	ldr	r3, [sp, #32]
 800987c:	3301      	adds	r3, #1
 800987e:	9308      	str	r3, [sp, #32]
 8009880:	f108 0801 	add.w	r8, r8, #1
 8009884:	2301      	movs	r3, #1
 8009886:	930a      	str	r3, [sp, #40]	@ 0x28
 8009888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800988a:	2b00      	cmp	r3, #0
 800988c:	f000 81b0 	beq.w	8009bf0 <_dtoa_r+0xb48>
 8009890:	6923      	ldr	r3, [r4, #16]
 8009892:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009896:	6918      	ldr	r0, [r3, #16]
 8009898:	f000 fb06 	bl	8009ea8 <__hi0bits>
 800989c:	f1c0 0020 	rsb	r0, r0, #32
 80098a0:	9b08      	ldr	r3, [sp, #32]
 80098a2:	4418      	add	r0, r3
 80098a4:	f010 001f 	ands.w	r0, r0, #31
 80098a8:	d077      	beq.n	800999a <_dtoa_r+0x8f2>
 80098aa:	f1c0 0320 	rsb	r3, r0, #32
 80098ae:	2b04      	cmp	r3, #4
 80098b0:	dd6b      	ble.n	800998a <_dtoa_r+0x8e2>
 80098b2:	9b08      	ldr	r3, [sp, #32]
 80098b4:	f1c0 001c 	rsb	r0, r0, #28
 80098b8:	4403      	add	r3, r0
 80098ba:	4480      	add	r8, r0
 80098bc:	4406      	add	r6, r0
 80098be:	9308      	str	r3, [sp, #32]
 80098c0:	f1b8 0f00 	cmp.w	r8, #0
 80098c4:	dd05      	ble.n	80098d2 <_dtoa_r+0x82a>
 80098c6:	4649      	mov	r1, r9
 80098c8:	4642      	mov	r2, r8
 80098ca:	4658      	mov	r0, fp
 80098cc:	f000 fc52 	bl	800a174 <__lshift>
 80098d0:	4681      	mov	r9, r0
 80098d2:	9b08      	ldr	r3, [sp, #32]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	dd05      	ble.n	80098e4 <_dtoa_r+0x83c>
 80098d8:	4621      	mov	r1, r4
 80098da:	461a      	mov	r2, r3
 80098dc:	4658      	mov	r0, fp
 80098de:	f000 fc49 	bl	800a174 <__lshift>
 80098e2:	4604      	mov	r4, r0
 80098e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d059      	beq.n	800999e <_dtoa_r+0x8f6>
 80098ea:	4621      	mov	r1, r4
 80098ec:	4648      	mov	r0, r9
 80098ee:	f000 fcad 	bl	800a24c <__mcmp>
 80098f2:	2800      	cmp	r0, #0
 80098f4:	da53      	bge.n	800999e <_dtoa_r+0x8f6>
 80098f6:	1e7b      	subs	r3, r7, #1
 80098f8:	9304      	str	r3, [sp, #16]
 80098fa:	4649      	mov	r1, r9
 80098fc:	2300      	movs	r3, #0
 80098fe:	220a      	movs	r2, #10
 8009900:	4658      	mov	r0, fp
 8009902:	f000 fa41 	bl	8009d88 <__multadd>
 8009906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009908:	4681      	mov	r9, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	f000 8172 	beq.w	8009bf4 <_dtoa_r+0xb4c>
 8009910:	2300      	movs	r3, #0
 8009912:	4629      	mov	r1, r5
 8009914:	220a      	movs	r2, #10
 8009916:	4658      	mov	r0, fp
 8009918:	f000 fa36 	bl	8009d88 <__multadd>
 800991c:	9b00      	ldr	r3, [sp, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	4605      	mov	r5, r0
 8009922:	dc67      	bgt.n	80099f4 <_dtoa_r+0x94c>
 8009924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009926:	2b02      	cmp	r3, #2
 8009928:	dc41      	bgt.n	80099ae <_dtoa_r+0x906>
 800992a:	e063      	b.n	80099f4 <_dtoa_r+0x94c>
 800992c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800992e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009932:	e746      	b.n	80097c2 <_dtoa_r+0x71a>
 8009934:	9b07      	ldr	r3, [sp, #28]
 8009936:	1e5c      	subs	r4, r3, #1
 8009938:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800993a:	42a3      	cmp	r3, r4
 800993c:	bfbf      	itttt	lt
 800993e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009940:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009942:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009944:	1ae3      	sublt	r3, r4, r3
 8009946:	bfb4      	ite	lt
 8009948:	18d2      	addlt	r2, r2, r3
 800994a:	1b1c      	subge	r4, r3, r4
 800994c:	9b07      	ldr	r3, [sp, #28]
 800994e:	bfbc      	itt	lt
 8009950:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009952:	2400      	movlt	r4, #0
 8009954:	2b00      	cmp	r3, #0
 8009956:	bfb5      	itete	lt
 8009958:	eba8 0603 	sublt.w	r6, r8, r3
 800995c:	9b07      	ldrge	r3, [sp, #28]
 800995e:	2300      	movlt	r3, #0
 8009960:	4646      	movge	r6, r8
 8009962:	e730      	b.n	80097c6 <_dtoa_r+0x71e>
 8009964:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009966:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009968:	4646      	mov	r6, r8
 800996a:	e735      	b.n	80097d8 <_dtoa_r+0x730>
 800996c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800996e:	e75c      	b.n	800982a <_dtoa_r+0x782>
 8009970:	2300      	movs	r3, #0
 8009972:	e788      	b.n	8009886 <_dtoa_r+0x7de>
 8009974:	3fe00000 	.word	0x3fe00000
 8009978:	40240000 	.word	0x40240000
 800997c:	40140000 	.word	0x40140000
 8009980:	9b02      	ldr	r3, [sp, #8]
 8009982:	e780      	b.n	8009886 <_dtoa_r+0x7de>
 8009984:	2300      	movs	r3, #0
 8009986:	930a      	str	r3, [sp, #40]	@ 0x28
 8009988:	e782      	b.n	8009890 <_dtoa_r+0x7e8>
 800998a:	d099      	beq.n	80098c0 <_dtoa_r+0x818>
 800998c:	9a08      	ldr	r2, [sp, #32]
 800998e:	331c      	adds	r3, #28
 8009990:	441a      	add	r2, r3
 8009992:	4498      	add	r8, r3
 8009994:	441e      	add	r6, r3
 8009996:	9208      	str	r2, [sp, #32]
 8009998:	e792      	b.n	80098c0 <_dtoa_r+0x818>
 800999a:	4603      	mov	r3, r0
 800999c:	e7f6      	b.n	800998c <_dtoa_r+0x8e4>
 800999e:	9b07      	ldr	r3, [sp, #28]
 80099a0:	9704      	str	r7, [sp, #16]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	dc20      	bgt.n	80099e8 <_dtoa_r+0x940>
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099aa:	2b02      	cmp	r3, #2
 80099ac:	dd1e      	ble.n	80099ec <_dtoa_r+0x944>
 80099ae:	9b00      	ldr	r3, [sp, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f47f aec0 	bne.w	8009736 <_dtoa_r+0x68e>
 80099b6:	4621      	mov	r1, r4
 80099b8:	2205      	movs	r2, #5
 80099ba:	4658      	mov	r0, fp
 80099bc:	f000 f9e4 	bl	8009d88 <__multadd>
 80099c0:	4601      	mov	r1, r0
 80099c2:	4604      	mov	r4, r0
 80099c4:	4648      	mov	r0, r9
 80099c6:	f000 fc41 	bl	800a24c <__mcmp>
 80099ca:	2800      	cmp	r0, #0
 80099cc:	f77f aeb3 	ble.w	8009736 <_dtoa_r+0x68e>
 80099d0:	4656      	mov	r6, sl
 80099d2:	2331      	movs	r3, #49	@ 0x31
 80099d4:	f806 3b01 	strb.w	r3, [r6], #1
 80099d8:	9b04      	ldr	r3, [sp, #16]
 80099da:	3301      	adds	r3, #1
 80099dc:	9304      	str	r3, [sp, #16]
 80099de:	e6ae      	b.n	800973e <_dtoa_r+0x696>
 80099e0:	9c07      	ldr	r4, [sp, #28]
 80099e2:	9704      	str	r7, [sp, #16]
 80099e4:	4625      	mov	r5, r4
 80099e6:	e7f3      	b.n	80099d0 <_dtoa_r+0x928>
 80099e8:	9b07      	ldr	r3, [sp, #28]
 80099ea:	9300      	str	r3, [sp, #0]
 80099ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	f000 8104 	beq.w	8009bfc <_dtoa_r+0xb54>
 80099f4:	2e00      	cmp	r6, #0
 80099f6:	dd05      	ble.n	8009a04 <_dtoa_r+0x95c>
 80099f8:	4629      	mov	r1, r5
 80099fa:	4632      	mov	r2, r6
 80099fc:	4658      	mov	r0, fp
 80099fe:	f000 fbb9 	bl	800a174 <__lshift>
 8009a02:	4605      	mov	r5, r0
 8009a04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d05a      	beq.n	8009ac0 <_dtoa_r+0xa18>
 8009a0a:	6869      	ldr	r1, [r5, #4]
 8009a0c:	4658      	mov	r0, fp
 8009a0e:	f000 f959 	bl	8009cc4 <_Balloc>
 8009a12:	4606      	mov	r6, r0
 8009a14:	b928      	cbnz	r0, 8009a22 <_dtoa_r+0x97a>
 8009a16:	4b84      	ldr	r3, [pc, #528]	@ (8009c28 <_dtoa_r+0xb80>)
 8009a18:	4602      	mov	r2, r0
 8009a1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009a1e:	f7ff bb5a 	b.w	80090d6 <_dtoa_r+0x2e>
 8009a22:	692a      	ldr	r2, [r5, #16]
 8009a24:	3202      	adds	r2, #2
 8009a26:	0092      	lsls	r2, r2, #2
 8009a28:	f105 010c 	add.w	r1, r5, #12
 8009a2c:	300c      	adds	r0, #12
 8009a2e:	f002 f877 	bl	800bb20 <memcpy>
 8009a32:	2201      	movs	r2, #1
 8009a34:	4631      	mov	r1, r6
 8009a36:	4658      	mov	r0, fp
 8009a38:	f000 fb9c 	bl	800a174 <__lshift>
 8009a3c:	f10a 0301 	add.w	r3, sl, #1
 8009a40:	9307      	str	r3, [sp, #28]
 8009a42:	9b00      	ldr	r3, [sp, #0]
 8009a44:	4453      	add	r3, sl
 8009a46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a48:	9b02      	ldr	r3, [sp, #8]
 8009a4a:	f003 0301 	and.w	r3, r3, #1
 8009a4e:	462f      	mov	r7, r5
 8009a50:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a52:	4605      	mov	r5, r0
 8009a54:	9b07      	ldr	r3, [sp, #28]
 8009a56:	4621      	mov	r1, r4
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	4648      	mov	r0, r9
 8009a5c:	9300      	str	r3, [sp, #0]
 8009a5e:	f7ff fa9b 	bl	8008f98 <quorem>
 8009a62:	4639      	mov	r1, r7
 8009a64:	9002      	str	r0, [sp, #8]
 8009a66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009a6a:	4648      	mov	r0, r9
 8009a6c:	f000 fbee 	bl	800a24c <__mcmp>
 8009a70:	462a      	mov	r2, r5
 8009a72:	9008      	str	r0, [sp, #32]
 8009a74:	4621      	mov	r1, r4
 8009a76:	4658      	mov	r0, fp
 8009a78:	f000 fc04 	bl	800a284 <__mdiff>
 8009a7c:	68c2      	ldr	r2, [r0, #12]
 8009a7e:	4606      	mov	r6, r0
 8009a80:	bb02      	cbnz	r2, 8009ac4 <_dtoa_r+0xa1c>
 8009a82:	4601      	mov	r1, r0
 8009a84:	4648      	mov	r0, r9
 8009a86:	f000 fbe1 	bl	800a24c <__mcmp>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	4631      	mov	r1, r6
 8009a8e:	4658      	mov	r0, fp
 8009a90:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a92:	f000 f957 	bl	8009d44 <_Bfree>
 8009a96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a9a:	9e07      	ldr	r6, [sp, #28]
 8009a9c:	ea43 0102 	orr.w	r1, r3, r2
 8009aa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009aa2:	4319      	orrs	r1, r3
 8009aa4:	d110      	bne.n	8009ac8 <_dtoa_r+0xa20>
 8009aa6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009aaa:	d029      	beq.n	8009b00 <_dtoa_r+0xa58>
 8009aac:	9b08      	ldr	r3, [sp, #32]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	dd02      	ble.n	8009ab8 <_dtoa_r+0xa10>
 8009ab2:	9b02      	ldr	r3, [sp, #8]
 8009ab4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009ab8:	9b00      	ldr	r3, [sp, #0]
 8009aba:	f883 8000 	strb.w	r8, [r3]
 8009abe:	e63f      	b.n	8009740 <_dtoa_r+0x698>
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	e7bb      	b.n	8009a3c <_dtoa_r+0x994>
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	e7e1      	b.n	8009a8c <_dtoa_r+0x9e4>
 8009ac8:	9b08      	ldr	r3, [sp, #32]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	db04      	blt.n	8009ad8 <_dtoa_r+0xa30>
 8009ace:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ad0:	430b      	orrs	r3, r1
 8009ad2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009ad4:	430b      	orrs	r3, r1
 8009ad6:	d120      	bne.n	8009b1a <_dtoa_r+0xa72>
 8009ad8:	2a00      	cmp	r2, #0
 8009ada:	dded      	ble.n	8009ab8 <_dtoa_r+0xa10>
 8009adc:	4649      	mov	r1, r9
 8009ade:	2201      	movs	r2, #1
 8009ae0:	4658      	mov	r0, fp
 8009ae2:	f000 fb47 	bl	800a174 <__lshift>
 8009ae6:	4621      	mov	r1, r4
 8009ae8:	4681      	mov	r9, r0
 8009aea:	f000 fbaf 	bl	800a24c <__mcmp>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	dc03      	bgt.n	8009afa <_dtoa_r+0xa52>
 8009af2:	d1e1      	bne.n	8009ab8 <_dtoa_r+0xa10>
 8009af4:	f018 0f01 	tst.w	r8, #1
 8009af8:	d0de      	beq.n	8009ab8 <_dtoa_r+0xa10>
 8009afa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009afe:	d1d8      	bne.n	8009ab2 <_dtoa_r+0xa0a>
 8009b00:	9a00      	ldr	r2, [sp, #0]
 8009b02:	2339      	movs	r3, #57	@ 0x39
 8009b04:	7013      	strb	r3, [r2, #0]
 8009b06:	4633      	mov	r3, r6
 8009b08:	461e      	mov	r6, r3
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009b10:	2a39      	cmp	r2, #57	@ 0x39
 8009b12:	d052      	beq.n	8009bba <_dtoa_r+0xb12>
 8009b14:	3201      	adds	r2, #1
 8009b16:	701a      	strb	r2, [r3, #0]
 8009b18:	e612      	b.n	8009740 <_dtoa_r+0x698>
 8009b1a:	2a00      	cmp	r2, #0
 8009b1c:	dd07      	ble.n	8009b2e <_dtoa_r+0xa86>
 8009b1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b22:	d0ed      	beq.n	8009b00 <_dtoa_r+0xa58>
 8009b24:	9a00      	ldr	r2, [sp, #0]
 8009b26:	f108 0301 	add.w	r3, r8, #1
 8009b2a:	7013      	strb	r3, [r2, #0]
 8009b2c:	e608      	b.n	8009740 <_dtoa_r+0x698>
 8009b2e:	9b07      	ldr	r3, [sp, #28]
 8009b30:	9a07      	ldr	r2, [sp, #28]
 8009b32:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009b36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d028      	beq.n	8009b8e <_dtoa_r+0xae6>
 8009b3c:	4649      	mov	r1, r9
 8009b3e:	2300      	movs	r3, #0
 8009b40:	220a      	movs	r2, #10
 8009b42:	4658      	mov	r0, fp
 8009b44:	f000 f920 	bl	8009d88 <__multadd>
 8009b48:	42af      	cmp	r7, r5
 8009b4a:	4681      	mov	r9, r0
 8009b4c:	f04f 0300 	mov.w	r3, #0
 8009b50:	f04f 020a 	mov.w	r2, #10
 8009b54:	4639      	mov	r1, r7
 8009b56:	4658      	mov	r0, fp
 8009b58:	d107      	bne.n	8009b6a <_dtoa_r+0xac2>
 8009b5a:	f000 f915 	bl	8009d88 <__multadd>
 8009b5e:	4607      	mov	r7, r0
 8009b60:	4605      	mov	r5, r0
 8009b62:	9b07      	ldr	r3, [sp, #28]
 8009b64:	3301      	adds	r3, #1
 8009b66:	9307      	str	r3, [sp, #28]
 8009b68:	e774      	b.n	8009a54 <_dtoa_r+0x9ac>
 8009b6a:	f000 f90d 	bl	8009d88 <__multadd>
 8009b6e:	4629      	mov	r1, r5
 8009b70:	4607      	mov	r7, r0
 8009b72:	2300      	movs	r3, #0
 8009b74:	220a      	movs	r2, #10
 8009b76:	4658      	mov	r0, fp
 8009b78:	f000 f906 	bl	8009d88 <__multadd>
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	e7f0      	b.n	8009b62 <_dtoa_r+0xaba>
 8009b80:	9b00      	ldr	r3, [sp, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	bfcc      	ite	gt
 8009b86:	461e      	movgt	r6, r3
 8009b88:	2601      	movle	r6, #1
 8009b8a:	4456      	add	r6, sl
 8009b8c:	2700      	movs	r7, #0
 8009b8e:	4649      	mov	r1, r9
 8009b90:	2201      	movs	r2, #1
 8009b92:	4658      	mov	r0, fp
 8009b94:	f000 faee 	bl	800a174 <__lshift>
 8009b98:	4621      	mov	r1, r4
 8009b9a:	4681      	mov	r9, r0
 8009b9c:	f000 fb56 	bl	800a24c <__mcmp>
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	dcb0      	bgt.n	8009b06 <_dtoa_r+0xa5e>
 8009ba4:	d102      	bne.n	8009bac <_dtoa_r+0xb04>
 8009ba6:	f018 0f01 	tst.w	r8, #1
 8009baa:	d1ac      	bne.n	8009b06 <_dtoa_r+0xa5e>
 8009bac:	4633      	mov	r3, r6
 8009bae:	461e      	mov	r6, r3
 8009bb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bb4:	2a30      	cmp	r2, #48	@ 0x30
 8009bb6:	d0fa      	beq.n	8009bae <_dtoa_r+0xb06>
 8009bb8:	e5c2      	b.n	8009740 <_dtoa_r+0x698>
 8009bba:	459a      	cmp	sl, r3
 8009bbc:	d1a4      	bne.n	8009b08 <_dtoa_r+0xa60>
 8009bbe:	9b04      	ldr	r3, [sp, #16]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	9304      	str	r3, [sp, #16]
 8009bc4:	2331      	movs	r3, #49	@ 0x31
 8009bc6:	f88a 3000 	strb.w	r3, [sl]
 8009bca:	e5b9      	b.n	8009740 <_dtoa_r+0x698>
 8009bcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009bce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009c2c <_dtoa_r+0xb84>
 8009bd2:	b11b      	cbz	r3, 8009bdc <_dtoa_r+0xb34>
 8009bd4:	f10a 0308 	add.w	r3, sl, #8
 8009bd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009bda:	6013      	str	r3, [r2, #0]
 8009bdc:	4650      	mov	r0, sl
 8009bde:	b019      	add	sp, #100	@ 0x64
 8009be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	f77f ae37 	ble.w	800985a <_dtoa_r+0x7b2>
 8009bec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bee:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bf0:	2001      	movs	r0, #1
 8009bf2:	e655      	b.n	80098a0 <_dtoa_r+0x7f8>
 8009bf4:	9b00      	ldr	r3, [sp, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f77f aed6 	ble.w	80099a8 <_dtoa_r+0x900>
 8009bfc:	4656      	mov	r6, sl
 8009bfe:	4621      	mov	r1, r4
 8009c00:	4648      	mov	r0, r9
 8009c02:	f7ff f9c9 	bl	8008f98 <quorem>
 8009c06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009c0a:	f806 8b01 	strb.w	r8, [r6], #1
 8009c0e:	9b00      	ldr	r3, [sp, #0]
 8009c10:	eba6 020a 	sub.w	r2, r6, sl
 8009c14:	4293      	cmp	r3, r2
 8009c16:	ddb3      	ble.n	8009b80 <_dtoa_r+0xad8>
 8009c18:	4649      	mov	r1, r9
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	220a      	movs	r2, #10
 8009c1e:	4658      	mov	r0, fp
 8009c20:	f000 f8b2 	bl	8009d88 <__multadd>
 8009c24:	4681      	mov	r9, r0
 8009c26:	e7ea      	b.n	8009bfe <_dtoa_r+0xb56>
 8009c28:	0800c7dd 	.word	0x0800c7dd
 8009c2c:	0800c761 	.word	0x0800c761

08009c30 <_free_r>:
 8009c30:	b538      	push	{r3, r4, r5, lr}
 8009c32:	4605      	mov	r5, r0
 8009c34:	2900      	cmp	r1, #0
 8009c36:	d041      	beq.n	8009cbc <_free_r+0x8c>
 8009c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c3c:	1f0c      	subs	r4, r1, #4
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	bfb8      	it	lt
 8009c42:	18e4      	addlt	r4, r4, r3
 8009c44:	f7fe f870 	bl	8007d28 <__malloc_lock>
 8009c48:	4a1d      	ldr	r2, [pc, #116]	@ (8009cc0 <_free_r+0x90>)
 8009c4a:	6813      	ldr	r3, [r2, #0]
 8009c4c:	b933      	cbnz	r3, 8009c5c <_free_r+0x2c>
 8009c4e:	6063      	str	r3, [r4, #4]
 8009c50:	6014      	str	r4, [r2, #0]
 8009c52:	4628      	mov	r0, r5
 8009c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c58:	f7fe b86c 	b.w	8007d34 <__malloc_unlock>
 8009c5c:	42a3      	cmp	r3, r4
 8009c5e:	d908      	bls.n	8009c72 <_free_r+0x42>
 8009c60:	6820      	ldr	r0, [r4, #0]
 8009c62:	1821      	adds	r1, r4, r0
 8009c64:	428b      	cmp	r3, r1
 8009c66:	bf01      	itttt	eq
 8009c68:	6819      	ldreq	r1, [r3, #0]
 8009c6a:	685b      	ldreq	r3, [r3, #4]
 8009c6c:	1809      	addeq	r1, r1, r0
 8009c6e:	6021      	streq	r1, [r4, #0]
 8009c70:	e7ed      	b.n	8009c4e <_free_r+0x1e>
 8009c72:	461a      	mov	r2, r3
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	b10b      	cbz	r3, 8009c7c <_free_r+0x4c>
 8009c78:	42a3      	cmp	r3, r4
 8009c7a:	d9fa      	bls.n	8009c72 <_free_r+0x42>
 8009c7c:	6811      	ldr	r1, [r2, #0]
 8009c7e:	1850      	adds	r0, r2, r1
 8009c80:	42a0      	cmp	r0, r4
 8009c82:	d10b      	bne.n	8009c9c <_free_r+0x6c>
 8009c84:	6820      	ldr	r0, [r4, #0]
 8009c86:	4401      	add	r1, r0
 8009c88:	1850      	adds	r0, r2, r1
 8009c8a:	4283      	cmp	r3, r0
 8009c8c:	6011      	str	r1, [r2, #0]
 8009c8e:	d1e0      	bne.n	8009c52 <_free_r+0x22>
 8009c90:	6818      	ldr	r0, [r3, #0]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	6053      	str	r3, [r2, #4]
 8009c96:	4408      	add	r0, r1
 8009c98:	6010      	str	r0, [r2, #0]
 8009c9a:	e7da      	b.n	8009c52 <_free_r+0x22>
 8009c9c:	d902      	bls.n	8009ca4 <_free_r+0x74>
 8009c9e:	230c      	movs	r3, #12
 8009ca0:	602b      	str	r3, [r5, #0]
 8009ca2:	e7d6      	b.n	8009c52 <_free_r+0x22>
 8009ca4:	6820      	ldr	r0, [r4, #0]
 8009ca6:	1821      	adds	r1, r4, r0
 8009ca8:	428b      	cmp	r3, r1
 8009caa:	bf04      	itt	eq
 8009cac:	6819      	ldreq	r1, [r3, #0]
 8009cae:	685b      	ldreq	r3, [r3, #4]
 8009cb0:	6063      	str	r3, [r4, #4]
 8009cb2:	bf04      	itt	eq
 8009cb4:	1809      	addeq	r1, r1, r0
 8009cb6:	6021      	streq	r1, [r4, #0]
 8009cb8:	6054      	str	r4, [r2, #4]
 8009cba:	e7ca      	b.n	8009c52 <_free_r+0x22>
 8009cbc:	bd38      	pop	{r3, r4, r5, pc}
 8009cbe:	bf00      	nop
 8009cc0:	20000464 	.word	0x20000464

08009cc4 <_Balloc>:
 8009cc4:	b570      	push	{r4, r5, r6, lr}
 8009cc6:	69c6      	ldr	r6, [r0, #28]
 8009cc8:	4604      	mov	r4, r0
 8009cca:	460d      	mov	r5, r1
 8009ccc:	b976      	cbnz	r6, 8009cec <_Balloc+0x28>
 8009cce:	2010      	movs	r0, #16
 8009cd0:	f7fd ff78 	bl	8007bc4 <malloc>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	61e0      	str	r0, [r4, #28]
 8009cd8:	b920      	cbnz	r0, 8009ce4 <_Balloc+0x20>
 8009cda:	4b18      	ldr	r3, [pc, #96]	@ (8009d3c <_Balloc+0x78>)
 8009cdc:	4818      	ldr	r0, [pc, #96]	@ (8009d40 <_Balloc+0x7c>)
 8009cde:	216b      	movs	r1, #107	@ 0x6b
 8009ce0:	f001 ff36 	bl	800bb50 <__assert_func>
 8009ce4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ce8:	6006      	str	r6, [r0, #0]
 8009cea:	60c6      	str	r6, [r0, #12]
 8009cec:	69e6      	ldr	r6, [r4, #28]
 8009cee:	68f3      	ldr	r3, [r6, #12]
 8009cf0:	b183      	cbz	r3, 8009d14 <_Balloc+0x50>
 8009cf2:	69e3      	ldr	r3, [r4, #28]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009cfa:	b9b8      	cbnz	r0, 8009d2c <_Balloc+0x68>
 8009cfc:	2101      	movs	r1, #1
 8009cfe:	fa01 f605 	lsl.w	r6, r1, r5
 8009d02:	1d72      	adds	r2, r6, #5
 8009d04:	0092      	lsls	r2, r2, #2
 8009d06:	4620      	mov	r0, r4
 8009d08:	f001 ff40 	bl	800bb8c <_calloc_r>
 8009d0c:	b160      	cbz	r0, 8009d28 <_Balloc+0x64>
 8009d0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d12:	e00e      	b.n	8009d32 <_Balloc+0x6e>
 8009d14:	2221      	movs	r2, #33	@ 0x21
 8009d16:	2104      	movs	r1, #4
 8009d18:	4620      	mov	r0, r4
 8009d1a:	f001 ff37 	bl	800bb8c <_calloc_r>
 8009d1e:	69e3      	ldr	r3, [r4, #28]
 8009d20:	60f0      	str	r0, [r6, #12]
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1e4      	bne.n	8009cf2 <_Balloc+0x2e>
 8009d28:	2000      	movs	r0, #0
 8009d2a:	bd70      	pop	{r4, r5, r6, pc}
 8009d2c:	6802      	ldr	r2, [r0, #0]
 8009d2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d32:	2300      	movs	r3, #0
 8009d34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d38:	e7f7      	b.n	8009d2a <_Balloc+0x66>
 8009d3a:	bf00      	nop
 8009d3c:	0800c76e 	.word	0x0800c76e
 8009d40:	0800c7ee 	.word	0x0800c7ee

08009d44 <_Bfree>:
 8009d44:	b570      	push	{r4, r5, r6, lr}
 8009d46:	69c6      	ldr	r6, [r0, #28]
 8009d48:	4605      	mov	r5, r0
 8009d4a:	460c      	mov	r4, r1
 8009d4c:	b976      	cbnz	r6, 8009d6c <_Bfree+0x28>
 8009d4e:	2010      	movs	r0, #16
 8009d50:	f7fd ff38 	bl	8007bc4 <malloc>
 8009d54:	4602      	mov	r2, r0
 8009d56:	61e8      	str	r0, [r5, #28]
 8009d58:	b920      	cbnz	r0, 8009d64 <_Bfree+0x20>
 8009d5a:	4b09      	ldr	r3, [pc, #36]	@ (8009d80 <_Bfree+0x3c>)
 8009d5c:	4809      	ldr	r0, [pc, #36]	@ (8009d84 <_Bfree+0x40>)
 8009d5e:	218f      	movs	r1, #143	@ 0x8f
 8009d60:	f001 fef6 	bl	800bb50 <__assert_func>
 8009d64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d68:	6006      	str	r6, [r0, #0]
 8009d6a:	60c6      	str	r6, [r0, #12]
 8009d6c:	b13c      	cbz	r4, 8009d7e <_Bfree+0x3a>
 8009d6e:	69eb      	ldr	r3, [r5, #28]
 8009d70:	6862      	ldr	r2, [r4, #4]
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d78:	6021      	str	r1, [r4, #0]
 8009d7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d7e:	bd70      	pop	{r4, r5, r6, pc}
 8009d80:	0800c76e 	.word	0x0800c76e
 8009d84:	0800c7ee 	.word	0x0800c7ee

08009d88 <__multadd>:
 8009d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d8c:	690d      	ldr	r5, [r1, #16]
 8009d8e:	4607      	mov	r7, r0
 8009d90:	460c      	mov	r4, r1
 8009d92:	461e      	mov	r6, r3
 8009d94:	f101 0c14 	add.w	ip, r1, #20
 8009d98:	2000      	movs	r0, #0
 8009d9a:	f8dc 3000 	ldr.w	r3, [ip]
 8009d9e:	b299      	uxth	r1, r3
 8009da0:	fb02 6101 	mla	r1, r2, r1, r6
 8009da4:	0c1e      	lsrs	r6, r3, #16
 8009da6:	0c0b      	lsrs	r3, r1, #16
 8009da8:	fb02 3306 	mla	r3, r2, r6, r3
 8009dac:	b289      	uxth	r1, r1
 8009dae:	3001      	adds	r0, #1
 8009db0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009db4:	4285      	cmp	r5, r0
 8009db6:	f84c 1b04 	str.w	r1, [ip], #4
 8009dba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009dbe:	dcec      	bgt.n	8009d9a <__multadd+0x12>
 8009dc0:	b30e      	cbz	r6, 8009e06 <__multadd+0x7e>
 8009dc2:	68a3      	ldr	r3, [r4, #8]
 8009dc4:	42ab      	cmp	r3, r5
 8009dc6:	dc19      	bgt.n	8009dfc <__multadd+0x74>
 8009dc8:	6861      	ldr	r1, [r4, #4]
 8009dca:	4638      	mov	r0, r7
 8009dcc:	3101      	adds	r1, #1
 8009dce:	f7ff ff79 	bl	8009cc4 <_Balloc>
 8009dd2:	4680      	mov	r8, r0
 8009dd4:	b928      	cbnz	r0, 8009de2 <__multadd+0x5a>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8009e0c <__multadd+0x84>)
 8009dda:	480d      	ldr	r0, [pc, #52]	@ (8009e10 <__multadd+0x88>)
 8009ddc:	21ba      	movs	r1, #186	@ 0xba
 8009dde:	f001 feb7 	bl	800bb50 <__assert_func>
 8009de2:	6922      	ldr	r2, [r4, #16]
 8009de4:	3202      	adds	r2, #2
 8009de6:	f104 010c 	add.w	r1, r4, #12
 8009dea:	0092      	lsls	r2, r2, #2
 8009dec:	300c      	adds	r0, #12
 8009dee:	f001 fe97 	bl	800bb20 <memcpy>
 8009df2:	4621      	mov	r1, r4
 8009df4:	4638      	mov	r0, r7
 8009df6:	f7ff ffa5 	bl	8009d44 <_Bfree>
 8009dfa:	4644      	mov	r4, r8
 8009dfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e00:	3501      	adds	r5, #1
 8009e02:	615e      	str	r6, [r3, #20]
 8009e04:	6125      	str	r5, [r4, #16]
 8009e06:	4620      	mov	r0, r4
 8009e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e0c:	0800c7dd 	.word	0x0800c7dd
 8009e10:	0800c7ee 	.word	0x0800c7ee

08009e14 <__s2b>:
 8009e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e18:	460c      	mov	r4, r1
 8009e1a:	4615      	mov	r5, r2
 8009e1c:	461f      	mov	r7, r3
 8009e1e:	2209      	movs	r2, #9
 8009e20:	3308      	adds	r3, #8
 8009e22:	4606      	mov	r6, r0
 8009e24:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e28:	2100      	movs	r1, #0
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	db09      	blt.n	8009e44 <__s2b+0x30>
 8009e30:	4630      	mov	r0, r6
 8009e32:	f7ff ff47 	bl	8009cc4 <_Balloc>
 8009e36:	b940      	cbnz	r0, 8009e4a <__s2b+0x36>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	4b19      	ldr	r3, [pc, #100]	@ (8009ea0 <__s2b+0x8c>)
 8009e3c:	4819      	ldr	r0, [pc, #100]	@ (8009ea4 <__s2b+0x90>)
 8009e3e:	21d3      	movs	r1, #211	@ 0xd3
 8009e40:	f001 fe86 	bl	800bb50 <__assert_func>
 8009e44:	0052      	lsls	r2, r2, #1
 8009e46:	3101      	adds	r1, #1
 8009e48:	e7f0      	b.n	8009e2c <__s2b+0x18>
 8009e4a:	9b08      	ldr	r3, [sp, #32]
 8009e4c:	6143      	str	r3, [r0, #20]
 8009e4e:	2d09      	cmp	r5, #9
 8009e50:	f04f 0301 	mov.w	r3, #1
 8009e54:	6103      	str	r3, [r0, #16]
 8009e56:	dd16      	ble.n	8009e86 <__s2b+0x72>
 8009e58:	f104 0909 	add.w	r9, r4, #9
 8009e5c:	46c8      	mov	r8, r9
 8009e5e:	442c      	add	r4, r5
 8009e60:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009e64:	4601      	mov	r1, r0
 8009e66:	3b30      	subs	r3, #48	@ 0x30
 8009e68:	220a      	movs	r2, #10
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	f7ff ff8c 	bl	8009d88 <__multadd>
 8009e70:	45a0      	cmp	r8, r4
 8009e72:	d1f5      	bne.n	8009e60 <__s2b+0x4c>
 8009e74:	f1a5 0408 	sub.w	r4, r5, #8
 8009e78:	444c      	add	r4, r9
 8009e7a:	1b2d      	subs	r5, r5, r4
 8009e7c:	1963      	adds	r3, r4, r5
 8009e7e:	42bb      	cmp	r3, r7
 8009e80:	db04      	blt.n	8009e8c <__s2b+0x78>
 8009e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e86:	340a      	adds	r4, #10
 8009e88:	2509      	movs	r5, #9
 8009e8a:	e7f6      	b.n	8009e7a <__s2b+0x66>
 8009e8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009e90:	4601      	mov	r1, r0
 8009e92:	3b30      	subs	r3, #48	@ 0x30
 8009e94:	220a      	movs	r2, #10
 8009e96:	4630      	mov	r0, r6
 8009e98:	f7ff ff76 	bl	8009d88 <__multadd>
 8009e9c:	e7ee      	b.n	8009e7c <__s2b+0x68>
 8009e9e:	bf00      	nop
 8009ea0:	0800c7dd 	.word	0x0800c7dd
 8009ea4:	0800c7ee 	.word	0x0800c7ee

08009ea8 <__hi0bits>:
 8009ea8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009eac:	4603      	mov	r3, r0
 8009eae:	bf36      	itet	cc
 8009eb0:	0403      	lslcc	r3, r0, #16
 8009eb2:	2000      	movcs	r0, #0
 8009eb4:	2010      	movcc	r0, #16
 8009eb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009eba:	bf3c      	itt	cc
 8009ebc:	021b      	lslcc	r3, r3, #8
 8009ebe:	3008      	addcc	r0, #8
 8009ec0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ec4:	bf3c      	itt	cc
 8009ec6:	011b      	lslcc	r3, r3, #4
 8009ec8:	3004      	addcc	r0, #4
 8009eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ece:	bf3c      	itt	cc
 8009ed0:	009b      	lslcc	r3, r3, #2
 8009ed2:	3002      	addcc	r0, #2
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	db05      	blt.n	8009ee4 <__hi0bits+0x3c>
 8009ed8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009edc:	f100 0001 	add.w	r0, r0, #1
 8009ee0:	bf08      	it	eq
 8009ee2:	2020      	moveq	r0, #32
 8009ee4:	4770      	bx	lr

08009ee6 <__lo0bits>:
 8009ee6:	6803      	ldr	r3, [r0, #0]
 8009ee8:	4602      	mov	r2, r0
 8009eea:	f013 0007 	ands.w	r0, r3, #7
 8009eee:	d00b      	beq.n	8009f08 <__lo0bits+0x22>
 8009ef0:	07d9      	lsls	r1, r3, #31
 8009ef2:	d421      	bmi.n	8009f38 <__lo0bits+0x52>
 8009ef4:	0798      	lsls	r0, r3, #30
 8009ef6:	bf49      	itett	mi
 8009ef8:	085b      	lsrmi	r3, r3, #1
 8009efa:	089b      	lsrpl	r3, r3, #2
 8009efc:	2001      	movmi	r0, #1
 8009efe:	6013      	strmi	r3, [r2, #0]
 8009f00:	bf5c      	itt	pl
 8009f02:	6013      	strpl	r3, [r2, #0]
 8009f04:	2002      	movpl	r0, #2
 8009f06:	4770      	bx	lr
 8009f08:	b299      	uxth	r1, r3
 8009f0a:	b909      	cbnz	r1, 8009f10 <__lo0bits+0x2a>
 8009f0c:	0c1b      	lsrs	r3, r3, #16
 8009f0e:	2010      	movs	r0, #16
 8009f10:	b2d9      	uxtb	r1, r3
 8009f12:	b909      	cbnz	r1, 8009f18 <__lo0bits+0x32>
 8009f14:	3008      	adds	r0, #8
 8009f16:	0a1b      	lsrs	r3, r3, #8
 8009f18:	0719      	lsls	r1, r3, #28
 8009f1a:	bf04      	itt	eq
 8009f1c:	091b      	lsreq	r3, r3, #4
 8009f1e:	3004      	addeq	r0, #4
 8009f20:	0799      	lsls	r1, r3, #30
 8009f22:	bf04      	itt	eq
 8009f24:	089b      	lsreq	r3, r3, #2
 8009f26:	3002      	addeq	r0, #2
 8009f28:	07d9      	lsls	r1, r3, #31
 8009f2a:	d403      	bmi.n	8009f34 <__lo0bits+0x4e>
 8009f2c:	085b      	lsrs	r3, r3, #1
 8009f2e:	f100 0001 	add.w	r0, r0, #1
 8009f32:	d003      	beq.n	8009f3c <__lo0bits+0x56>
 8009f34:	6013      	str	r3, [r2, #0]
 8009f36:	4770      	bx	lr
 8009f38:	2000      	movs	r0, #0
 8009f3a:	4770      	bx	lr
 8009f3c:	2020      	movs	r0, #32
 8009f3e:	4770      	bx	lr

08009f40 <__i2b>:
 8009f40:	b510      	push	{r4, lr}
 8009f42:	460c      	mov	r4, r1
 8009f44:	2101      	movs	r1, #1
 8009f46:	f7ff febd 	bl	8009cc4 <_Balloc>
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	b928      	cbnz	r0, 8009f5a <__i2b+0x1a>
 8009f4e:	4b05      	ldr	r3, [pc, #20]	@ (8009f64 <__i2b+0x24>)
 8009f50:	4805      	ldr	r0, [pc, #20]	@ (8009f68 <__i2b+0x28>)
 8009f52:	f240 1145 	movw	r1, #325	@ 0x145
 8009f56:	f001 fdfb 	bl	800bb50 <__assert_func>
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	6144      	str	r4, [r0, #20]
 8009f5e:	6103      	str	r3, [r0, #16]
 8009f60:	bd10      	pop	{r4, pc}
 8009f62:	bf00      	nop
 8009f64:	0800c7dd 	.word	0x0800c7dd
 8009f68:	0800c7ee 	.word	0x0800c7ee

08009f6c <__multiply>:
 8009f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f70:	4614      	mov	r4, r2
 8009f72:	690a      	ldr	r2, [r1, #16]
 8009f74:	6923      	ldr	r3, [r4, #16]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	bfa8      	it	ge
 8009f7a:	4623      	movge	r3, r4
 8009f7c:	460f      	mov	r7, r1
 8009f7e:	bfa4      	itt	ge
 8009f80:	460c      	movge	r4, r1
 8009f82:	461f      	movge	r7, r3
 8009f84:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009f88:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009f8c:	68a3      	ldr	r3, [r4, #8]
 8009f8e:	6861      	ldr	r1, [r4, #4]
 8009f90:	eb0a 0609 	add.w	r6, sl, r9
 8009f94:	42b3      	cmp	r3, r6
 8009f96:	b085      	sub	sp, #20
 8009f98:	bfb8      	it	lt
 8009f9a:	3101      	addlt	r1, #1
 8009f9c:	f7ff fe92 	bl	8009cc4 <_Balloc>
 8009fa0:	b930      	cbnz	r0, 8009fb0 <__multiply+0x44>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	4b44      	ldr	r3, [pc, #272]	@ (800a0b8 <__multiply+0x14c>)
 8009fa6:	4845      	ldr	r0, [pc, #276]	@ (800a0bc <__multiply+0x150>)
 8009fa8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009fac:	f001 fdd0 	bl	800bb50 <__assert_func>
 8009fb0:	f100 0514 	add.w	r5, r0, #20
 8009fb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009fb8:	462b      	mov	r3, r5
 8009fba:	2200      	movs	r2, #0
 8009fbc:	4543      	cmp	r3, r8
 8009fbe:	d321      	bcc.n	800a004 <__multiply+0x98>
 8009fc0:	f107 0114 	add.w	r1, r7, #20
 8009fc4:	f104 0214 	add.w	r2, r4, #20
 8009fc8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009fcc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009fd0:	9302      	str	r3, [sp, #8]
 8009fd2:	1b13      	subs	r3, r2, r4
 8009fd4:	3b15      	subs	r3, #21
 8009fd6:	f023 0303 	bic.w	r3, r3, #3
 8009fda:	3304      	adds	r3, #4
 8009fdc:	f104 0715 	add.w	r7, r4, #21
 8009fe0:	42ba      	cmp	r2, r7
 8009fe2:	bf38      	it	cc
 8009fe4:	2304      	movcc	r3, #4
 8009fe6:	9301      	str	r3, [sp, #4]
 8009fe8:	9b02      	ldr	r3, [sp, #8]
 8009fea:	9103      	str	r1, [sp, #12]
 8009fec:	428b      	cmp	r3, r1
 8009fee:	d80c      	bhi.n	800a00a <__multiply+0x9e>
 8009ff0:	2e00      	cmp	r6, #0
 8009ff2:	dd03      	ble.n	8009ffc <__multiply+0x90>
 8009ff4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d05b      	beq.n	800a0b4 <__multiply+0x148>
 8009ffc:	6106      	str	r6, [r0, #16]
 8009ffe:	b005      	add	sp, #20
 800a000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a004:	f843 2b04 	str.w	r2, [r3], #4
 800a008:	e7d8      	b.n	8009fbc <__multiply+0x50>
 800a00a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a00e:	f1ba 0f00 	cmp.w	sl, #0
 800a012:	d024      	beq.n	800a05e <__multiply+0xf2>
 800a014:	f104 0e14 	add.w	lr, r4, #20
 800a018:	46a9      	mov	r9, r5
 800a01a:	f04f 0c00 	mov.w	ip, #0
 800a01e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a022:	f8d9 3000 	ldr.w	r3, [r9]
 800a026:	fa1f fb87 	uxth.w	fp, r7
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a030:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a034:	f8d9 7000 	ldr.w	r7, [r9]
 800a038:	4463      	add	r3, ip
 800a03a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a03e:	fb0a c70b 	mla	r7, sl, fp, ip
 800a042:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a046:	b29b      	uxth	r3, r3
 800a048:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a04c:	4572      	cmp	r2, lr
 800a04e:	f849 3b04 	str.w	r3, [r9], #4
 800a052:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a056:	d8e2      	bhi.n	800a01e <__multiply+0xb2>
 800a058:	9b01      	ldr	r3, [sp, #4]
 800a05a:	f845 c003 	str.w	ip, [r5, r3]
 800a05e:	9b03      	ldr	r3, [sp, #12]
 800a060:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a064:	3104      	adds	r1, #4
 800a066:	f1b9 0f00 	cmp.w	r9, #0
 800a06a:	d021      	beq.n	800a0b0 <__multiply+0x144>
 800a06c:	682b      	ldr	r3, [r5, #0]
 800a06e:	f104 0c14 	add.w	ip, r4, #20
 800a072:	46ae      	mov	lr, r5
 800a074:	f04f 0a00 	mov.w	sl, #0
 800a078:	f8bc b000 	ldrh.w	fp, [ip]
 800a07c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a080:	fb09 770b 	mla	r7, r9, fp, r7
 800a084:	4457      	add	r7, sl
 800a086:	b29b      	uxth	r3, r3
 800a088:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a08c:	f84e 3b04 	str.w	r3, [lr], #4
 800a090:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a094:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a098:	f8be 3000 	ldrh.w	r3, [lr]
 800a09c:	fb09 330a 	mla	r3, r9, sl, r3
 800a0a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a0a4:	4562      	cmp	r2, ip
 800a0a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a0aa:	d8e5      	bhi.n	800a078 <__multiply+0x10c>
 800a0ac:	9f01      	ldr	r7, [sp, #4]
 800a0ae:	51eb      	str	r3, [r5, r7]
 800a0b0:	3504      	adds	r5, #4
 800a0b2:	e799      	b.n	8009fe8 <__multiply+0x7c>
 800a0b4:	3e01      	subs	r6, #1
 800a0b6:	e79b      	b.n	8009ff0 <__multiply+0x84>
 800a0b8:	0800c7dd 	.word	0x0800c7dd
 800a0bc:	0800c7ee 	.word	0x0800c7ee

0800a0c0 <__pow5mult>:
 800a0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0c4:	4615      	mov	r5, r2
 800a0c6:	f012 0203 	ands.w	r2, r2, #3
 800a0ca:	4607      	mov	r7, r0
 800a0cc:	460e      	mov	r6, r1
 800a0ce:	d007      	beq.n	800a0e0 <__pow5mult+0x20>
 800a0d0:	4c25      	ldr	r4, [pc, #148]	@ (800a168 <__pow5mult+0xa8>)
 800a0d2:	3a01      	subs	r2, #1
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a0da:	f7ff fe55 	bl	8009d88 <__multadd>
 800a0de:	4606      	mov	r6, r0
 800a0e0:	10ad      	asrs	r5, r5, #2
 800a0e2:	d03d      	beq.n	800a160 <__pow5mult+0xa0>
 800a0e4:	69fc      	ldr	r4, [r7, #28]
 800a0e6:	b97c      	cbnz	r4, 800a108 <__pow5mult+0x48>
 800a0e8:	2010      	movs	r0, #16
 800a0ea:	f7fd fd6b 	bl	8007bc4 <malloc>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	61f8      	str	r0, [r7, #28]
 800a0f2:	b928      	cbnz	r0, 800a100 <__pow5mult+0x40>
 800a0f4:	4b1d      	ldr	r3, [pc, #116]	@ (800a16c <__pow5mult+0xac>)
 800a0f6:	481e      	ldr	r0, [pc, #120]	@ (800a170 <__pow5mult+0xb0>)
 800a0f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a0fc:	f001 fd28 	bl	800bb50 <__assert_func>
 800a100:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a104:	6004      	str	r4, [r0, #0]
 800a106:	60c4      	str	r4, [r0, #12]
 800a108:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a10c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a110:	b94c      	cbnz	r4, 800a126 <__pow5mult+0x66>
 800a112:	f240 2171 	movw	r1, #625	@ 0x271
 800a116:	4638      	mov	r0, r7
 800a118:	f7ff ff12 	bl	8009f40 <__i2b>
 800a11c:	2300      	movs	r3, #0
 800a11e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a122:	4604      	mov	r4, r0
 800a124:	6003      	str	r3, [r0, #0]
 800a126:	f04f 0900 	mov.w	r9, #0
 800a12a:	07eb      	lsls	r3, r5, #31
 800a12c:	d50a      	bpl.n	800a144 <__pow5mult+0x84>
 800a12e:	4631      	mov	r1, r6
 800a130:	4622      	mov	r2, r4
 800a132:	4638      	mov	r0, r7
 800a134:	f7ff ff1a 	bl	8009f6c <__multiply>
 800a138:	4631      	mov	r1, r6
 800a13a:	4680      	mov	r8, r0
 800a13c:	4638      	mov	r0, r7
 800a13e:	f7ff fe01 	bl	8009d44 <_Bfree>
 800a142:	4646      	mov	r6, r8
 800a144:	106d      	asrs	r5, r5, #1
 800a146:	d00b      	beq.n	800a160 <__pow5mult+0xa0>
 800a148:	6820      	ldr	r0, [r4, #0]
 800a14a:	b938      	cbnz	r0, 800a15c <__pow5mult+0x9c>
 800a14c:	4622      	mov	r2, r4
 800a14e:	4621      	mov	r1, r4
 800a150:	4638      	mov	r0, r7
 800a152:	f7ff ff0b 	bl	8009f6c <__multiply>
 800a156:	6020      	str	r0, [r4, #0]
 800a158:	f8c0 9000 	str.w	r9, [r0]
 800a15c:	4604      	mov	r4, r0
 800a15e:	e7e4      	b.n	800a12a <__pow5mult+0x6a>
 800a160:	4630      	mov	r0, r6
 800a162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a166:	bf00      	nop
 800a168:	0800c848 	.word	0x0800c848
 800a16c:	0800c76e 	.word	0x0800c76e
 800a170:	0800c7ee 	.word	0x0800c7ee

0800a174 <__lshift>:
 800a174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a178:	460c      	mov	r4, r1
 800a17a:	6849      	ldr	r1, [r1, #4]
 800a17c:	6923      	ldr	r3, [r4, #16]
 800a17e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a182:	68a3      	ldr	r3, [r4, #8]
 800a184:	4607      	mov	r7, r0
 800a186:	4691      	mov	r9, r2
 800a188:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a18c:	f108 0601 	add.w	r6, r8, #1
 800a190:	42b3      	cmp	r3, r6
 800a192:	db0b      	blt.n	800a1ac <__lshift+0x38>
 800a194:	4638      	mov	r0, r7
 800a196:	f7ff fd95 	bl	8009cc4 <_Balloc>
 800a19a:	4605      	mov	r5, r0
 800a19c:	b948      	cbnz	r0, 800a1b2 <__lshift+0x3e>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	4b28      	ldr	r3, [pc, #160]	@ (800a244 <__lshift+0xd0>)
 800a1a2:	4829      	ldr	r0, [pc, #164]	@ (800a248 <__lshift+0xd4>)
 800a1a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a1a8:	f001 fcd2 	bl	800bb50 <__assert_func>
 800a1ac:	3101      	adds	r1, #1
 800a1ae:	005b      	lsls	r3, r3, #1
 800a1b0:	e7ee      	b.n	800a190 <__lshift+0x1c>
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	f100 0114 	add.w	r1, r0, #20
 800a1b8:	f100 0210 	add.w	r2, r0, #16
 800a1bc:	4618      	mov	r0, r3
 800a1be:	4553      	cmp	r3, sl
 800a1c0:	db33      	blt.n	800a22a <__lshift+0xb6>
 800a1c2:	6920      	ldr	r0, [r4, #16]
 800a1c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a1c8:	f104 0314 	add.w	r3, r4, #20
 800a1cc:	f019 091f 	ands.w	r9, r9, #31
 800a1d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a1d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a1d8:	d02b      	beq.n	800a232 <__lshift+0xbe>
 800a1da:	f1c9 0e20 	rsb	lr, r9, #32
 800a1de:	468a      	mov	sl, r1
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	6818      	ldr	r0, [r3, #0]
 800a1e4:	fa00 f009 	lsl.w	r0, r0, r9
 800a1e8:	4310      	orrs	r0, r2
 800a1ea:	f84a 0b04 	str.w	r0, [sl], #4
 800a1ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1f2:	459c      	cmp	ip, r3
 800a1f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a1f8:	d8f3      	bhi.n	800a1e2 <__lshift+0x6e>
 800a1fa:	ebac 0304 	sub.w	r3, ip, r4
 800a1fe:	3b15      	subs	r3, #21
 800a200:	f023 0303 	bic.w	r3, r3, #3
 800a204:	3304      	adds	r3, #4
 800a206:	f104 0015 	add.w	r0, r4, #21
 800a20a:	4584      	cmp	ip, r0
 800a20c:	bf38      	it	cc
 800a20e:	2304      	movcc	r3, #4
 800a210:	50ca      	str	r2, [r1, r3]
 800a212:	b10a      	cbz	r2, 800a218 <__lshift+0xa4>
 800a214:	f108 0602 	add.w	r6, r8, #2
 800a218:	3e01      	subs	r6, #1
 800a21a:	4638      	mov	r0, r7
 800a21c:	612e      	str	r6, [r5, #16]
 800a21e:	4621      	mov	r1, r4
 800a220:	f7ff fd90 	bl	8009d44 <_Bfree>
 800a224:	4628      	mov	r0, r5
 800a226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a22a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a22e:	3301      	adds	r3, #1
 800a230:	e7c5      	b.n	800a1be <__lshift+0x4a>
 800a232:	3904      	subs	r1, #4
 800a234:	f853 2b04 	ldr.w	r2, [r3], #4
 800a238:	f841 2f04 	str.w	r2, [r1, #4]!
 800a23c:	459c      	cmp	ip, r3
 800a23e:	d8f9      	bhi.n	800a234 <__lshift+0xc0>
 800a240:	e7ea      	b.n	800a218 <__lshift+0xa4>
 800a242:	bf00      	nop
 800a244:	0800c7dd 	.word	0x0800c7dd
 800a248:	0800c7ee 	.word	0x0800c7ee

0800a24c <__mcmp>:
 800a24c:	690a      	ldr	r2, [r1, #16]
 800a24e:	4603      	mov	r3, r0
 800a250:	6900      	ldr	r0, [r0, #16]
 800a252:	1a80      	subs	r0, r0, r2
 800a254:	b530      	push	{r4, r5, lr}
 800a256:	d10e      	bne.n	800a276 <__mcmp+0x2a>
 800a258:	3314      	adds	r3, #20
 800a25a:	3114      	adds	r1, #20
 800a25c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a260:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a264:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a268:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a26c:	4295      	cmp	r5, r2
 800a26e:	d003      	beq.n	800a278 <__mcmp+0x2c>
 800a270:	d205      	bcs.n	800a27e <__mcmp+0x32>
 800a272:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a276:	bd30      	pop	{r4, r5, pc}
 800a278:	42a3      	cmp	r3, r4
 800a27a:	d3f3      	bcc.n	800a264 <__mcmp+0x18>
 800a27c:	e7fb      	b.n	800a276 <__mcmp+0x2a>
 800a27e:	2001      	movs	r0, #1
 800a280:	e7f9      	b.n	800a276 <__mcmp+0x2a>
	...

0800a284 <__mdiff>:
 800a284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a288:	4689      	mov	r9, r1
 800a28a:	4606      	mov	r6, r0
 800a28c:	4611      	mov	r1, r2
 800a28e:	4648      	mov	r0, r9
 800a290:	4614      	mov	r4, r2
 800a292:	f7ff ffdb 	bl	800a24c <__mcmp>
 800a296:	1e05      	subs	r5, r0, #0
 800a298:	d112      	bne.n	800a2c0 <__mdiff+0x3c>
 800a29a:	4629      	mov	r1, r5
 800a29c:	4630      	mov	r0, r6
 800a29e:	f7ff fd11 	bl	8009cc4 <_Balloc>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	b928      	cbnz	r0, 800a2b2 <__mdiff+0x2e>
 800a2a6:	4b3f      	ldr	r3, [pc, #252]	@ (800a3a4 <__mdiff+0x120>)
 800a2a8:	f240 2137 	movw	r1, #567	@ 0x237
 800a2ac:	483e      	ldr	r0, [pc, #248]	@ (800a3a8 <__mdiff+0x124>)
 800a2ae:	f001 fc4f 	bl	800bb50 <__assert_func>
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a2b8:	4610      	mov	r0, r2
 800a2ba:	b003      	add	sp, #12
 800a2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c0:	bfbc      	itt	lt
 800a2c2:	464b      	movlt	r3, r9
 800a2c4:	46a1      	movlt	r9, r4
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a2cc:	bfba      	itte	lt
 800a2ce:	461c      	movlt	r4, r3
 800a2d0:	2501      	movlt	r5, #1
 800a2d2:	2500      	movge	r5, #0
 800a2d4:	f7ff fcf6 	bl	8009cc4 <_Balloc>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	b918      	cbnz	r0, 800a2e4 <__mdiff+0x60>
 800a2dc:	4b31      	ldr	r3, [pc, #196]	@ (800a3a4 <__mdiff+0x120>)
 800a2de:	f240 2145 	movw	r1, #581	@ 0x245
 800a2e2:	e7e3      	b.n	800a2ac <__mdiff+0x28>
 800a2e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a2e8:	6926      	ldr	r6, [r4, #16]
 800a2ea:	60c5      	str	r5, [r0, #12]
 800a2ec:	f109 0310 	add.w	r3, r9, #16
 800a2f0:	f109 0514 	add.w	r5, r9, #20
 800a2f4:	f104 0e14 	add.w	lr, r4, #20
 800a2f8:	f100 0b14 	add.w	fp, r0, #20
 800a2fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a300:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a304:	9301      	str	r3, [sp, #4]
 800a306:	46d9      	mov	r9, fp
 800a308:	f04f 0c00 	mov.w	ip, #0
 800a30c:	9b01      	ldr	r3, [sp, #4]
 800a30e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a312:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a316:	9301      	str	r3, [sp, #4]
 800a318:	fa1f f38a 	uxth.w	r3, sl
 800a31c:	4619      	mov	r1, r3
 800a31e:	b283      	uxth	r3, r0
 800a320:	1acb      	subs	r3, r1, r3
 800a322:	0c00      	lsrs	r0, r0, #16
 800a324:	4463      	add	r3, ip
 800a326:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a32a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a32e:	b29b      	uxth	r3, r3
 800a330:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a334:	4576      	cmp	r6, lr
 800a336:	f849 3b04 	str.w	r3, [r9], #4
 800a33a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a33e:	d8e5      	bhi.n	800a30c <__mdiff+0x88>
 800a340:	1b33      	subs	r3, r6, r4
 800a342:	3b15      	subs	r3, #21
 800a344:	f023 0303 	bic.w	r3, r3, #3
 800a348:	3415      	adds	r4, #21
 800a34a:	3304      	adds	r3, #4
 800a34c:	42a6      	cmp	r6, r4
 800a34e:	bf38      	it	cc
 800a350:	2304      	movcc	r3, #4
 800a352:	441d      	add	r5, r3
 800a354:	445b      	add	r3, fp
 800a356:	461e      	mov	r6, r3
 800a358:	462c      	mov	r4, r5
 800a35a:	4544      	cmp	r4, r8
 800a35c:	d30e      	bcc.n	800a37c <__mdiff+0xf8>
 800a35e:	f108 0103 	add.w	r1, r8, #3
 800a362:	1b49      	subs	r1, r1, r5
 800a364:	f021 0103 	bic.w	r1, r1, #3
 800a368:	3d03      	subs	r5, #3
 800a36a:	45a8      	cmp	r8, r5
 800a36c:	bf38      	it	cc
 800a36e:	2100      	movcc	r1, #0
 800a370:	440b      	add	r3, r1
 800a372:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a376:	b191      	cbz	r1, 800a39e <__mdiff+0x11a>
 800a378:	6117      	str	r7, [r2, #16]
 800a37a:	e79d      	b.n	800a2b8 <__mdiff+0x34>
 800a37c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a380:	46e6      	mov	lr, ip
 800a382:	0c08      	lsrs	r0, r1, #16
 800a384:	fa1c fc81 	uxtah	ip, ip, r1
 800a388:	4471      	add	r1, lr
 800a38a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a38e:	b289      	uxth	r1, r1
 800a390:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a394:	f846 1b04 	str.w	r1, [r6], #4
 800a398:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a39c:	e7dd      	b.n	800a35a <__mdiff+0xd6>
 800a39e:	3f01      	subs	r7, #1
 800a3a0:	e7e7      	b.n	800a372 <__mdiff+0xee>
 800a3a2:	bf00      	nop
 800a3a4:	0800c7dd 	.word	0x0800c7dd
 800a3a8:	0800c7ee 	.word	0x0800c7ee

0800a3ac <__ulp>:
 800a3ac:	b082      	sub	sp, #8
 800a3ae:	ed8d 0b00 	vstr	d0, [sp]
 800a3b2:	9a01      	ldr	r2, [sp, #4]
 800a3b4:	4b0f      	ldr	r3, [pc, #60]	@ (800a3f4 <__ulp+0x48>)
 800a3b6:	4013      	ands	r3, r2
 800a3b8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	dc08      	bgt.n	800a3d2 <__ulp+0x26>
 800a3c0:	425b      	negs	r3, r3
 800a3c2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a3c6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a3ca:	da04      	bge.n	800a3d6 <__ulp+0x2a>
 800a3cc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a3d0:	4113      	asrs	r3, r2
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	e008      	b.n	800a3e8 <__ulp+0x3c>
 800a3d6:	f1a2 0314 	sub.w	r3, r2, #20
 800a3da:	2b1e      	cmp	r3, #30
 800a3dc:	bfda      	itte	le
 800a3de:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a3e2:	40da      	lsrle	r2, r3
 800a3e4:	2201      	movgt	r2, #1
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	4610      	mov	r0, r2
 800a3ec:	ec41 0b10 	vmov	d0, r0, r1
 800a3f0:	b002      	add	sp, #8
 800a3f2:	4770      	bx	lr
 800a3f4:	7ff00000 	.word	0x7ff00000

0800a3f8 <__b2d>:
 800a3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3fc:	6906      	ldr	r6, [r0, #16]
 800a3fe:	f100 0814 	add.w	r8, r0, #20
 800a402:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a406:	1f37      	subs	r7, r6, #4
 800a408:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a40c:	4610      	mov	r0, r2
 800a40e:	f7ff fd4b 	bl	8009ea8 <__hi0bits>
 800a412:	f1c0 0320 	rsb	r3, r0, #32
 800a416:	280a      	cmp	r0, #10
 800a418:	600b      	str	r3, [r1, #0]
 800a41a:	491b      	ldr	r1, [pc, #108]	@ (800a488 <__b2d+0x90>)
 800a41c:	dc15      	bgt.n	800a44a <__b2d+0x52>
 800a41e:	f1c0 0c0b 	rsb	ip, r0, #11
 800a422:	fa22 f30c 	lsr.w	r3, r2, ip
 800a426:	45b8      	cmp	r8, r7
 800a428:	ea43 0501 	orr.w	r5, r3, r1
 800a42c:	bf34      	ite	cc
 800a42e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a432:	2300      	movcs	r3, #0
 800a434:	3015      	adds	r0, #21
 800a436:	fa02 f000 	lsl.w	r0, r2, r0
 800a43a:	fa23 f30c 	lsr.w	r3, r3, ip
 800a43e:	4303      	orrs	r3, r0
 800a440:	461c      	mov	r4, r3
 800a442:	ec45 4b10 	vmov	d0, r4, r5
 800a446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a44a:	45b8      	cmp	r8, r7
 800a44c:	bf3a      	itte	cc
 800a44e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a452:	f1a6 0708 	subcc.w	r7, r6, #8
 800a456:	2300      	movcs	r3, #0
 800a458:	380b      	subs	r0, #11
 800a45a:	d012      	beq.n	800a482 <__b2d+0x8a>
 800a45c:	f1c0 0120 	rsb	r1, r0, #32
 800a460:	fa23 f401 	lsr.w	r4, r3, r1
 800a464:	4082      	lsls	r2, r0
 800a466:	4322      	orrs	r2, r4
 800a468:	4547      	cmp	r7, r8
 800a46a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a46e:	bf8c      	ite	hi
 800a470:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a474:	2200      	movls	r2, #0
 800a476:	4083      	lsls	r3, r0
 800a478:	40ca      	lsrs	r2, r1
 800a47a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a47e:	4313      	orrs	r3, r2
 800a480:	e7de      	b.n	800a440 <__b2d+0x48>
 800a482:	ea42 0501 	orr.w	r5, r2, r1
 800a486:	e7db      	b.n	800a440 <__b2d+0x48>
 800a488:	3ff00000 	.word	0x3ff00000

0800a48c <__d2b>:
 800a48c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a490:	460f      	mov	r7, r1
 800a492:	2101      	movs	r1, #1
 800a494:	ec59 8b10 	vmov	r8, r9, d0
 800a498:	4616      	mov	r6, r2
 800a49a:	f7ff fc13 	bl	8009cc4 <_Balloc>
 800a49e:	4604      	mov	r4, r0
 800a4a0:	b930      	cbnz	r0, 800a4b0 <__d2b+0x24>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	4b23      	ldr	r3, [pc, #140]	@ (800a534 <__d2b+0xa8>)
 800a4a6:	4824      	ldr	r0, [pc, #144]	@ (800a538 <__d2b+0xac>)
 800a4a8:	f240 310f 	movw	r1, #783	@ 0x30f
 800a4ac:	f001 fb50 	bl	800bb50 <__assert_func>
 800a4b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a4b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4b8:	b10d      	cbz	r5, 800a4be <__d2b+0x32>
 800a4ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a4be:	9301      	str	r3, [sp, #4]
 800a4c0:	f1b8 0300 	subs.w	r3, r8, #0
 800a4c4:	d023      	beq.n	800a50e <__d2b+0x82>
 800a4c6:	4668      	mov	r0, sp
 800a4c8:	9300      	str	r3, [sp, #0]
 800a4ca:	f7ff fd0c 	bl	8009ee6 <__lo0bits>
 800a4ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a4d2:	b1d0      	cbz	r0, 800a50a <__d2b+0x7e>
 800a4d4:	f1c0 0320 	rsb	r3, r0, #32
 800a4d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4dc:	430b      	orrs	r3, r1
 800a4de:	40c2      	lsrs	r2, r0
 800a4e0:	6163      	str	r3, [r4, #20]
 800a4e2:	9201      	str	r2, [sp, #4]
 800a4e4:	9b01      	ldr	r3, [sp, #4]
 800a4e6:	61a3      	str	r3, [r4, #24]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	bf0c      	ite	eq
 800a4ec:	2201      	moveq	r2, #1
 800a4ee:	2202      	movne	r2, #2
 800a4f0:	6122      	str	r2, [r4, #16]
 800a4f2:	b1a5      	cbz	r5, 800a51e <__d2b+0x92>
 800a4f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a4f8:	4405      	add	r5, r0
 800a4fa:	603d      	str	r5, [r7, #0]
 800a4fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a500:	6030      	str	r0, [r6, #0]
 800a502:	4620      	mov	r0, r4
 800a504:	b003      	add	sp, #12
 800a506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a50a:	6161      	str	r1, [r4, #20]
 800a50c:	e7ea      	b.n	800a4e4 <__d2b+0x58>
 800a50e:	a801      	add	r0, sp, #4
 800a510:	f7ff fce9 	bl	8009ee6 <__lo0bits>
 800a514:	9b01      	ldr	r3, [sp, #4]
 800a516:	6163      	str	r3, [r4, #20]
 800a518:	3020      	adds	r0, #32
 800a51a:	2201      	movs	r2, #1
 800a51c:	e7e8      	b.n	800a4f0 <__d2b+0x64>
 800a51e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a522:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a526:	6038      	str	r0, [r7, #0]
 800a528:	6918      	ldr	r0, [r3, #16]
 800a52a:	f7ff fcbd 	bl	8009ea8 <__hi0bits>
 800a52e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a532:	e7e5      	b.n	800a500 <__d2b+0x74>
 800a534:	0800c7dd 	.word	0x0800c7dd
 800a538:	0800c7ee 	.word	0x0800c7ee

0800a53c <__ratio>:
 800a53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a540:	b085      	sub	sp, #20
 800a542:	e9cd 1000 	strd	r1, r0, [sp]
 800a546:	a902      	add	r1, sp, #8
 800a548:	f7ff ff56 	bl	800a3f8 <__b2d>
 800a54c:	9800      	ldr	r0, [sp, #0]
 800a54e:	a903      	add	r1, sp, #12
 800a550:	ec55 4b10 	vmov	r4, r5, d0
 800a554:	f7ff ff50 	bl	800a3f8 <__b2d>
 800a558:	9b01      	ldr	r3, [sp, #4]
 800a55a:	6919      	ldr	r1, [r3, #16]
 800a55c:	9b00      	ldr	r3, [sp, #0]
 800a55e:	691b      	ldr	r3, [r3, #16]
 800a560:	1ac9      	subs	r1, r1, r3
 800a562:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a566:	1a9b      	subs	r3, r3, r2
 800a568:	ec5b ab10 	vmov	sl, fp, d0
 800a56c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a570:	2b00      	cmp	r3, #0
 800a572:	bfce      	itee	gt
 800a574:	462a      	movgt	r2, r5
 800a576:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a57a:	465a      	movle	r2, fp
 800a57c:	462f      	mov	r7, r5
 800a57e:	46d9      	mov	r9, fp
 800a580:	bfcc      	ite	gt
 800a582:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a586:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a58a:	464b      	mov	r3, r9
 800a58c:	4652      	mov	r2, sl
 800a58e:	4620      	mov	r0, r4
 800a590:	4639      	mov	r1, r7
 800a592:	f7f6 f97b 	bl	800088c <__aeabi_ddiv>
 800a596:	ec41 0b10 	vmov	d0, r0, r1
 800a59a:	b005      	add	sp, #20
 800a59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a5a0 <__copybits>:
 800a5a0:	3901      	subs	r1, #1
 800a5a2:	b570      	push	{r4, r5, r6, lr}
 800a5a4:	1149      	asrs	r1, r1, #5
 800a5a6:	6914      	ldr	r4, [r2, #16]
 800a5a8:	3101      	adds	r1, #1
 800a5aa:	f102 0314 	add.w	r3, r2, #20
 800a5ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a5b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a5b6:	1f05      	subs	r5, r0, #4
 800a5b8:	42a3      	cmp	r3, r4
 800a5ba:	d30c      	bcc.n	800a5d6 <__copybits+0x36>
 800a5bc:	1aa3      	subs	r3, r4, r2
 800a5be:	3b11      	subs	r3, #17
 800a5c0:	f023 0303 	bic.w	r3, r3, #3
 800a5c4:	3211      	adds	r2, #17
 800a5c6:	42a2      	cmp	r2, r4
 800a5c8:	bf88      	it	hi
 800a5ca:	2300      	movhi	r3, #0
 800a5cc:	4418      	add	r0, r3
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	4288      	cmp	r0, r1
 800a5d2:	d305      	bcc.n	800a5e0 <__copybits+0x40>
 800a5d4:	bd70      	pop	{r4, r5, r6, pc}
 800a5d6:	f853 6b04 	ldr.w	r6, [r3], #4
 800a5da:	f845 6f04 	str.w	r6, [r5, #4]!
 800a5de:	e7eb      	b.n	800a5b8 <__copybits+0x18>
 800a5e0:	f840 3b04 	str.w	r3, [r0], #4
 800a5e4:	e7f4      	b.n	800a5d0 <__copybits+0x30>

0800a5e6 <__any_on>:
 800a5e6:	f100 0214 	add.w	r2, r0, #20
 800a5ea:	6900      	ldr	r0, [r0, #16]
 800a5ec:	114b      	asrs	r3, r1, #5
 800a5ee:	4298      	cmp	r0, r3
 800a5f0:	b510      	push	{r4, lr}
 800a5f2:	db11      	blt.n	800a618 <__any_on+0x32>
 800a5f4:	dd0a      	ble.n	800a60c <__any_on+0x26>
 800a5f6:	f011 011f 	ands.w	r1, r1, #31
 800a5fa:	d007      	beq.n	800a60c <__any_on+0x26>
 800a5fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a600:	fa24 f001 	lsr.w	r0, r4, r1
 800a604:	fa00 f101 	lsl.w	r1, r0, r1
 800a608:	428c      	cmp	r4, r1
 800a60a:	d10b      	bne.n	800a624 <__any_on+0x3e>
 800a60c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a610:	4293      	cmp	r3, r2
 800a612:	d803      	bhi.n	800a61c <__any_on+0x36>
 800a614:	2000      	movs	r0, #0
 800a616:	bd10      	pop	{r4, pc}
 800a618:	4603      	mov	r3, r0
 800a61a:	e7f7      	b.n	800a60c <__any_on+0x26>
 800a61c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a620:	2900      	cmp	r1, #0
 800a622:	d0f5      	beq.n	800a610 <__any_on+0x2a>
 800a624:	2001      	movs	r0, #1
 800a626:	e7f6      	b.n	800a616 <__any_on+0x30>

0800a628 <sulp>:
 800a628:	b570      	push	{r4, r5, r6, lr}
 800a62a:	4604      	mov	r4, r0
 800a62c:	460d      	mov	r5, r1
 800a62e:	ec45 4b10 	vmov	d0, r4, r5
 800a632:	4616      	mov	r6, r2
 800a634:	f7ff feba 	bl	800a3ac <__ulp>
 800a638:	ec51 0b10 	vmov	r0, r1, d0
 800a63c:	b17e      	cbz	r6, 800a65e <sulp+0x36>
 800a63e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a642:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a646:	2b00      	cmp	r3, #0
 800a648:	dd09      	ble.n	800a65e <sulp+0x36>
 800a64a:	051b      	lsls	r3, r3, #20
 800a64c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a650:	2400      	movs	r4, #0
 800a652:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a656:	4622      	mov	r2, r4
 800a658:	462b      	mov	r3, r5
 800a65a:	f7f5 ffed 	bl	8000638 <__aeabi_dmul>
 800a65e:	ec41 0b10 	vmov	d0, r0, r1
 800a662:	bd70      	pop	{r4, r5, r6, pc}
 800a664:	0000      	movs	r0, r0
	...

0800a668 <_strtod_l>:
 800a668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66c:	b09f      	sub	sp, #124	@ 0x7c
 800a66e:	460c      	mov	r4, r1
 800a670:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a672:	2200      	movs	r2, #0
 800a674:	921a      	str	r2, [sp, #104]	@ 0x68
 800a676:	9005      	str	r0, [sp, #20]
 800a678:	f04f 0a00 	mov.w	sl, #0
 800a67c:	f04f 0b00 	mov.w	fp, #0
 800a680:	460a      	mov	r2, r1
 800a682:	9219      	str	r2, [sp, #100]	@ 0x64
 800a684:	7811      	ldrb	r1, [r2, #0]
 800a686:	292b      	cmp	r1, #43	@ 0x2b
 800a688:	d04a      	beq.n	800a720 <_strtod_l+0xb8>
 800a68a:	d838      	bhi.n	800a6fe <_strtod_l+0x96>
 800a68c:	290d      	cmp	r1, #13
 800a68e:	d832      	bhi.n	800a6f6 <_strtod_l+0x8e>
 800a690:	2908      	cmp	r1, #8
 800a692:	d832      	bhi.n	800a6fa <_strtod_l+0x92>
 800a694:	2900      	cmp	r1, #0
 800a696:	d03b      	beq.n	800a710 <_strtod_l+0xa8>
 800a698:	2200      	movs	r2, #0
 800a69a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a69c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a69e:	782a      	ldrb	r2, [r5, #0]
 800a6a0:	2a30      	cmp	r2, #48	@ 0x30
 800a6a2:	f040 80b3 	bne.w	800a80c <_strtod_l+0x1a4>
 800a6a6:	786a      	ldrb	r2, [r5, #1]
 800a6a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a6ac:	2a58      	cmp	r2, #88	@ 0x58
 800a6ae:	d16e      	bne.n	800a78e <_strtod_l+0x126>
 800a6b0:	9302      	str	r3, [sp, #8]
 800a6b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6b4:	9301      	str	r3, [sp, #4]
 800a6b6:	ab1a      	add	r3, sp, #104	@ 0x68
 800a6b8:	9300      	str	r3, [sp, #0]
 800a6ba:	4a8e      	ldr	r2, [pc, #568]	@ (800a8f4 <_strtod_l+0x28c>)
 800a6bc:	9805      	ldr	r0, [sp, #20]
 800a6be:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a6c0:	a919      	add	r1, sp, #100	@ 0x64
 800a6c2:	f001 fadf 	bl	800bc84 <__gethex>
 800a6c6:	f010 060f 	ands.w	r6, r0, #15
 800a6ca:	4604      	mov	r4, r0
 800a6cc:	d005      	beq.n	800a6da <_strtod_l+0x72>
 800a6ce:	2e06      	cmp	r6, #6
 800a6d0:	d128      	bne.n	800a724 <_strtod_l+0xbc>
 800a6d2:	3501      	adds	r5, #1
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	9519      	str	r5, [sp, #100]	@ 0x64
 800a6d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	f040 858e 	bne.w	800b1fe <_strtod_l+0xb96>
 800a6e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6e4:	b1cb      	cbz	r3, 800a71a <_strtod_l+0xb2>
 800a6e6:	4652      	mov	r2, sl
 800a6e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a6ec:	ec43 2b10 	vmov	d0, r2, r3
 800a6f0:	b01f      	add	sp, #124	@ 0x7c
 800a6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f6:	2920      	cmp	r1, #32
 800a6f8:	d1ce      	bne.n	800a698 <_strtod_l+0x30>
 800a6fa:	3201      	adds	r2, #1
 800a6fc:	e7c1      	b.n	800a682 <_strtod_l+0x1a>
 800a6fe:	292d      	cmp	r1, #45	@ 0x2d
 800a700:	d1ca      	bne.n	800a698 <_strtod_l+0x30>
 800a702:	2101      	movs	r1, #1
 800a704:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a706:	1c51      	adds	r1, r2, #1
 800a708:	9119      	str	r1, [sp, #100]	@ 0x64
 800a70a:	7852      	ldrb	r2, [r2, #1]
 800a70c:	2a00      	cmp	r2, #0
 800a70e:	d1c5      	bne.n	800a69c <_strtod_l+0x34>
 800a710:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a712:	9419      	str	r4, [sp, #100]	@ 0x64
 800a714:	2b00      	cmp	r3, #0
 800a716:	f040 8570 	bne.w	800b1fa <_strtod_l+0xb92>
 800a71a:	4652      	mov	r2, sl
 800a71c:	465b      	mov	r3, fp
 800a71e:	e7e5      	b.n	800a6ec <_strtod_l+0x84>
 800a720:	2100      	movs	r1, #0
 800a722:	e7ef      	b.n	800a704 <_strtod_l+0x9c>
 800a724:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a726:	b13a      	cbz	r2, 800a738 <_strtod_l+0xd0>
 800a728:	2135      	movs	r1, #53	@ 0x35
 800a72a:	a81c      	add	r0, sp, #112	@ 0x70
 800a72c:	f7ff ff38 	bl	800a5a0 <__copybits>
 800a730:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a732:	9805      	ldr	r0, [sp, #20]
 800a734:	f7ff fb06 	bl	8009d44 <_Bfree>
 800a738:	3e01      	subs	r6, #1
 800a73a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a73c:	2e04      	cmp	r6, #4
 800a73e:	d806      	bhi.n	800a74e <_strtod_l+0xe6>
 800a740:	e8df f006 	tbb	[pc, r6]
 800a744:	201d0314 	.word	0x201d0314
 800a748:	14          	.byte	0x14
 800a749:	00          	.byte	0x00
 800a74a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a74e:	05e1      	lsls	r1, r4, #23
 800a750:	bf48      	it	mi
 800a752:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a756:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a75a:	0d1b      	lsrs	r3, r3, #20
 800a75c:	051b      	lsls	r3, r3, #20
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1bb      	bne.n	800a6da <_strtod_l+0x72>
 800a762:	f7fe fbe5 	bl	8008f30 <__errno>
 800a766:	2322      	movs	r3, #34	@ 0x22
 800a768:	6003      	str	r3, [r0, #0]
 800a76a:	e7b6      	b.n	800a6da <_strtod_l+0x72>
 800a76c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a770:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a774:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a778:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a77c:	e7e7      	b.n	800a74e <_strtod_l+0xe6>
 800a77e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a8fc <_strtod_l+0x294>
 800a782:	e7e4      	b.n	800a74e <_strtod_l+0xe6>
 800a784:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a788:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a78c:	e7df      	b.n	800a74e <_strtod_l+0xe6>
 800a78e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a790:	1c5a      	adds	r2, r3, #1
 800a792:	9219      	str	r2, [sp, #100]	@ 0x64
 800a794:	785b      	ldrb	r3, [r3, #1]
 800a796:	2b30      	cmp	r3, #48	@ 0x30
 800a798:	d0f9      	beq.n	800a78e <_strtod_l+0x126>
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d09d      	beq.n	800a6da <_strtod_l+0x72>
 800a79e:	2301      	movs	r3, #1
 800a7a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7a4:	930c      	str	r3, [sp, #48]	@ 0x30
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	9308      	str	r3, [sp, #32]
 800a7aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7ac:	461f      	mov	r7, r3
 800a7ae:	220a      	movs	r2, #10
 800a7b0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a7b2:	7805      	ldrb	r5, [r0, #0]
 800a7b4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a7b8:	b2d9      	uxtb	r1, r3
 800a7ba:	2909      	cmp	r1, #9
 800a7bc:	d928      	bls.n	800a810 <_strtod_l+0x1a8>
 800a7be:	494e      	ldr	r1, [pc, #312]	@ (800a8f8 <_strtod_l+0x290>)
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	f001 f979 	bl	800bab8 <strncmp>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d032      	beq.n	800a830 <_strtod_l+0x1c8>
 800a7ca:	2000      	movs	r0, #0
 800a7cc:	462a      	mov	r2, r5
 800a7ce:	4681      	mov	r9, r0
 800a7d0:	463d      	mov	r5, r7
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2a65      	cmp	r2, #101	@ 0x65
 800a7d6:	d001      	beq.n	800a7dc <_strtod_l+0x174>
 800a7d8:	2a45      	cmp	r2, #69	@ 0x45
 800a7da:	d114      	bne.n	800a806 <_strtod_l+0x19e>
 800a7dc:	b91d      	cbnz	r5, 800a7e6 <_strtod_l+0x17e>
 800a7de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7e0:	4302      	orrs	r2, r0
 800a7e2:	d095      	beq.n	800a710 <_strtod_l+0xa8>
 800a7e4:	2500      	movs	r5, #0
 800a7e6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a7e8:	1c62      	adds	r2, r4, #1
 800a7ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800a7ec:	7862      	ldrb	r2, [r4, #1]
 800a7ee:	2a2b      	cmp	r2, #43	@ 0x2b
 800a7f0:	d077      	beq.n	800a8e2 <_strtod_l+0x27a>
 800a7f2:	2a2d      	cmp	r2, #45	@ 0x2d
 800a7f4:	d07b      	beq.n	800a8ee <_strtod_l+0x286>
 800a7f6:	f04f 0c00 	mov.w	ip, #0
 800a7fa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a7fe:	2909      	cmp	r1, #9
 800a800:	f240 8082 	bls.w	800a908 <_strtod_l+0x2a0>
 800a804:	9419      	str	r4, [sp, #100]	@ 0x64
 800a806:	f04f 0800 	mov.w	r8, #0
 800a80a:	e0a2      	b.n	800a952 <_strtod_l+0x2ea>
 800a80c:	2300      	movs	r3, #0
 800a80e:	e7c7      	b.n	800a7a0 <_strtod_l+0x138>
 800a810:	2f08      	cmp	r7, #8
 800a812:	bfd5      	itete	le
 800a814:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a816:	9908      	ldrgt	r1, [sp, #32]
 800a818:	fb02 3301 	mlale	r3, r2, r1, r3
 800a81c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a820:	f100 0001 	add.w	r0, r0, #1
 800a824:	bfd4      	ite	le
 800a826:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a828:	9308      	strgt	r3, [sp, #32]
 800a82a:	3701      	adds	r7, #1
 800a82c:	9019      	str	r0, [sp, #100]	@ 0x64
 800a82e:	e7bf      	b.n	800a7b0 <_strtod_l+0x148>
 800a830:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a832:	1c5a      	adds	r2, r3, #1
 800a834:	9219      	str	r2, [sp, #100]	@ 0x64
 800a836:	785a      	ldrb	r2, [r3, #1]
 800a838:	b37f      	cbz	r7, 800a89a <_strtod_l+0x232>
 800a83a:	4681      	mov	r9, r0
 800a83c:	463d      	mov	r5, r7
 800a83e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a842:	2b09      	cmp	r3, #9
 800a844:	d912      	bls.n	800a86c <_strtod_l+0x204>
 800a846:	2301      	movs	r3, #1
 800a848:	e7c4      	b.n	800a7d4 <_strtod_l+0x16c>
 800a84a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a84c:	1c5a      	adds	r2, r3, #1
 800a84e:	9219      	str	r2, [sp, #100]	@ 0x64
 800a850:	785a      	ldrb	r2, [r3, #1]
 800a852:	3001      	adds	r0, #1
 800a854:	2a30      	cmp	r2, #48	@ 0x30
 800a856:	d0f8      	beq.n	800a84a <_strtod_l+0x1e2>
 800a858:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a85c:	2b08      	cmp	r3, #8
 800a85e:	f200 84d3 	bhi.w	800b208 <_strtod_l+0xba0>
 800a862:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a864:	930c      	str	r3, [sp, #48]	@ 0x30
 800a866:	4681      	mov	r9, r0
 800a868:	2000      	movs	r0, #0
 800a86a:	4605      	mov	r5, r0
 800a86c:	3a30      	subs	r2, #48	@ 0x30
 800a86e:	f100 0301 	add.w	r3, r0, #1
 800a872:	d02a      	beq.n	800a8ca <_strtod_l+0x262>
 800a874:	4499      	add	r9, r3
 800a876:	eb00 0c05 	add.w	ip, r0, r5
 800a87a:	462b      	mov	r3, r5
 800a87c:	210a      	movs	r1, #10
 800a87e:	4563      	cmp	r3, ip
 800a880:	d10d      	bne.n	800a89e <_strtod_l+0x236>
 800a882:	1c69      	adds	r1, r5, #1
 800a884:	4401      	add	r1, r0
 800a886:	4428      	add	r0, r5
 800a888:	2808      	cmp	r0, #8
 800a88a:	dc16      	bgt.n	800a8ba <_strtod_l+0x252>
 800a88c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a88e:	230a      	movs	r3, #10
 800a890:	fb03 2300 	mla	r3, r3, r0, r2
 800a894:	930a      	str	r3, [sp, #40]	@ 0x28
 800a896:	2300      	movs	r3, #0
 800a898:	e018      	b.n	800a8cc <_strtod_l+0x264>
 800a89a:	4638      	mov	r0, r7
 800a89c:	e7da      	b.n	800a854 <_strtod_l+0x1ec>
 800a89e:	2b08      	cmp	r3, #8
 800a8a0:	f103 0301 	add.w	r3, r3, #1
 800a8a4:	dc03      	bgt.n	800a8ae <_strtod_l+0x246>
 800a8a6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a8a8:	434e      	muls	r6, r1
 800a8aa:	960a      	str	r6, [sp, #40]	@ 0x28
 800a8ac:	e7e7      	b.n	800a87e <_strtod_l+0x216>
 800a8ae:	2b10      	cmp	r3, #16
 800a8b0:	bfde      	ittt	le
 800a8b2:	9e08      	ldrle	r6, [sp, #32]
 800a8b4:	434e      	mulle	r6, r1
 800a8b6:	9608      	strle	r6, [sp, #32]
 800a8b8:	e7e1      	b.n	800a87e <_strtod_l+0x216>
 800a8ba:	280f      	cmp	r0, #15
 800a8bc:	dceb      	bgt.n	800a896 <_strtod_l+0x22e>
 800a8be:	9808      	ldr	r0, [sp, #32]
 800a8c0:	230a      	movs	r3, #10
 800a8c2:	fb03 2300 	mla	r3, r3, r0, r2
 800a8c6:	9308      	str	r3, [sp, #32]
 800a8c8:	e7e5      	b.n	800a896 <_strtod_l+0x22e>
 800a8ca:	4629      	mov	r1, r5
 800a8cc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a8ce:	1c50      	adds	r0, r2, #1
 800a8d0:	9019      	str	r0, [sp, #100]	@ 0x64
 800a8d2:	7852      	ldrb	r2, [r2, #1]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	460d      	mov	r5, r1
 800a8d8:	e7b1      	b.n	800a83e <_strtod_l+0x1d6>
 800a8da:	f04f 0900 	mov.w	r9, #0
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e77d      	b.n	800a7de <_strtod_l+0x176>
 800a8e2:	f04f 0c00 	mov.w	ip, #0
 800a8e6:	1ca2      	adds	r2, r4, #2
 800a8e8:	9219      	str	r2, [sp, #100]	@ 0x64
 800a8ea:	78a2      	ldrb	r2, [r4, #2]
 800a8ec:	e785      	b.n	800a7fa <_strtod_l+0x192>
 800a8ee:	f04f 0c01 	mov.w	ip, #1
 800a8f2:	e7f8      	b.n	800a8e6 <_strtod_l+0x27e>
 800a8f4:	0800c960 	.word	0x0800c960
 800a8f8:	0800c948 	.word	0x0800c948
 800a8fc:	7ff00000 	.word	0x7ff00000
 800a900:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a902:	1c51      	adds	r1, r2, #1
 800a904:	9119      	str	r1, [sp, #100]	@ 0x64
 800a906:	7852      	ldrb	r2, [r2, #1]
 800a908:	2a30      	cmp	r2, #48	@ 0x30
 800a90a:	d0f9      	beq.n	800a900 <_strtod_l+0x298>
 800a90c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a910:	2908      	cmp	r1, #8
 800a912:	f63f af78 	bhi.w	800a806 <_strtod_l+0x19e>
 800a916:	3a30      	subs	r2, #48	@ 0x30
 800a918:	920e      	str	r2, [sp, #56]	@ 0x38
 800a91a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a91c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a91e:	f04f 080a 	mov.w	r8, #10
 800a922:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a924:	1c56      	adds	r6, r2, #1
 800a926:	9619      	str	r6, [sp, #100]	@ 0x64
 800a928:	7852      	ldrb	r2, [r2, #1]
 800a92a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a92e:	f1be 0f09 	cmp.w	lr, #9
 800a932:	d939      	bls.n	800a9a8 <_strtod_l+0x340>
 800a934:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a936:	1a76      	subs	r6, r6, r1
 800a938:	2e08      	cmp	r6, #8
 800a93a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a93e:	dc03      	bgt.n	800a948 <_strtod_l+0x2e0>
 800a940:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a942:	4588      	cmp	r8, r1
 800a944:	bfa8      	it	ge
 800a946:	4688      	movge	r8, r1
 800a948:	f1bc 0f00 	cmp.w	ip, #0
 800a94c:	d001      	beq.n	800a952 <_strtod_l+0x2ea>
 800a94e:	f1c8 0800 	rsb	r8, r8, #0
 800a952:	2d00      	cmp	r5, #0
 800a954:	d14e      	bne.n	800a9f4 <_strtod_l+0x38c>
 800a956:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a958:	4308      	orrs	r0, r1
 800a95a:	f47f aebe 	bne.w	800a6da <_strtod_l+0x72>
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f47f aed6 	bne.w	800a710 <_strtod_l+0xa8>
 800a964:	2a69      	cmp	r2, #105	@ 0x69
 800a966:	d028      	beq.n	800a9ba <_strtod_l+0x352>
 800a968:	dc25      	bgt.n	800a9b6 <_strtod_l+0x34e>
 800a96a:	2a49      	cmp	r2, #73	@ 0x49
 800a96c:	d025      	beq.n	800a9ba <_strtod_l+0x352>
 800a96e:	2a4e      	cmp	r2, #78	@ 0x4e
 800a970:	f47f aece 	bne.w	800a710 <_strtod_l+0xa8>
 800a974:	499b      	ldr	r1, [pc, #620]	@ (800abe4 <_strtod_l+0x57c>)
 800a976:	a819      	add	r0, sp, #100	@ 0x64
 800a978:	f001 fba6 	bl	800c0c8 <__match>
 800a97c:	2800      	cmp	r0, #0
 800a97e:	f43f aec7 	beq.w	800a710 <_strtod_l+0xa8>
 800a982:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	2b28      	cmp	r3, #40	@ 0x28
 800a988:	d12e      	bne.n	800a9e8 <_strtod_l+0x380>
 800a98a:	4997      	ldr	r1, [pc, #604]	@ (800abe8 <_strtod_l+0x580>)
 800a98c:	aa1c      	add	r2, sp, #112	@ 0x70
 800a98e:	a819      	add	r0, sp, #100	@ 0x64
 800a990:	f001 fbae 	bl	800c0f0 <__hexnan>
 800a994:	2805      	cmp	r0, #5
 800a996:	d127      	bne.n	800a9e8 <_strtod_l+0x380>
 800a998:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a99a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a99e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a9a2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a9a6:	e698      	b.n	800a6da <_strtod_l+0x72>
 800a9a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a9aa:	fb08 2101 	mla	r1, r8, r1, r2
 800a9ae:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a9b2:	920e      	str	r2, [sp, #56]	@ 0x38
 800a9b4:	e7b5      	b.n	800a922 <_strtod_l+0x2ba>
 800a9b6:	2a6e      	cmp	r2, #110	@ 0x6e
 800a9b8:	e7da      	b.n	800a970 <_strtod_l+0x308>
 800a9ba:	498c      	ldr	r1, [pc, #560]	@ (800abec <_strtod_l+0x584>)
 800a9bc:	a819      	add	r0, sp, #100	@ 0x64
 800a9be:	f001 fb83 	bl	800c0c8 <__match>
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	f43f aea4 	beq.w	800a710 <_strtod_l+0xa8>
 800a9c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9ca:	4989      	ldr	r1, [pc, #548]	@ (800abf0 <_strtod_l+0x588>)
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	a819      	add	r0, sp, #100	@ 0x64
 800a9d0:	9319      	str	r3, [sp, #100]	@ 0x64
 800a9d2:	f001 fb79 	bl	800c0c8 <__match>
 800a9d6:	b910      	cbnz	r0, 800a9de <_strtod_l+0x376>
 800a9d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9da:	3301      	adds	r3, #1
 800a9dc:	9319      	str	r3, [sp, #100]	@ 0x64
 800a9de:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ac00 <_strtod_l+0x598>
 800a9e2:	f04f 0a00 	mov.w	sl, #0
 800a9e6:	e678      	b.n	800a6da <_strtod_l+0x72>
 800a9e8:	4882      	ldr	r0, [pc, #520]	@ (800abf4 <_strtod_l+0x58c>)
 800a9ea:	f001 f8a9 	bl	800bb40 <nan>
 800a9ee:	ec5b ab10 	vmov	sl, fp, d0
 800a9f2:	e672      	b.n	800a6da <_strtod_l+0x72>
 800a9f4:	eba8 0309 	sub.w	r3, r8, r9
 800a9f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a9fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9fc:	2f00      	cmp	r7, #0
 800a9fe:	bf08      	it	eq
 800aa00:	462f      	moveq	r7, r5
 800aa02:	2d10      	cmp	r5, #16
 800aa04:	462c      	mov	r4, r5
 800aa06:	bfa8      	it	ge
 800aa08:	2410      	movge	r4, #16
 800aa0a:	f7f5 fd9b 	bl	8000544 <__aeabi_ui2d>
 800aa0e:	2d09      	cmp	r5, #9
 800aa10:	4682      	mov	sl, r0
 800aa12:	468b      	mov	fp, r1
 800aa14:	dc13      	bgt.n	800aa3e <_strtod_l+0x3d6>
 800aa16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f43f ae5e 	beq.w	800a6da <_strtod_l+0x72>
 800aa1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa20:	dd78      	ble.n	800ab14 <_strtod_l+0x4ac>
 800aa22:	2b16      	cmp	r3, #22
 800aa24:	dc5f      	bgt.n	800aae6 <_strtod_l+0x47e>
 800aa26:	4974      	ldr	r1, [pc, #464]	@ (800abf8 <_strtod_l+0x590>)
 800aa28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa30:	4652      	mov	r2, sl
 800aa32:	465b      	mov	r3, fp
 800aa34:	f7f5 fe00 	bl	8000638 <__aeabi_dmul>
 800aa38:	4682      	mov	sl, r0
 800aa3a:	468b      	mov	fp, r1
 800aa3c:	e64d      	b.n	800a6da <_strtod_l+0x72>
 800aa3e:	4b6e      	ldr	r3, [pc, #440]	@ (800abf8 <_strtod_l+0x590>)
 800aa40:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa44:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800aa48:	f7f5 fdf6 	bl	8000638 <__aeabi_dmul>
 800aa4c:	4682      	mov	sl, r0
 800aa4e:	9808      	ldr	r0, [sp, #32]
 800aa50:	468b      	mov	fp, r1
 800aa52:	f7f5 fd77 	bl	8000544 <__aeabi_ui2d>
 800aa56:	4602      	mov	r2, r0
 800aa58:	460b      	mov	r3, r1
 800aa5a:	4650      	mov	r0, sl
 800aa5c:	4659      	mov	r1, fp
 800aa5e:	f7f5 fc35 	bl	80002cc <__adddf3>
 800aa62:	2d0f      	cmp	r5, #15
 800aa64:	4682      	mov	sl, r0
 800aa66:	468b      	mov	fp, r1
 800aa68:	ddd5      	ble.n	800aa16 <_strtod_l+0x3ae>
 800aa6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa6c:	1b2c      	subs	r4, r5, r4
 800aa6e:	441c      	add	r4, r3
 800aa70:	2c00      	cmp	r4, #0
 800aa72:	f340 8096 	ble.w	800aba2 <_strtod_l+0x53a>
 800aa76:	f014 030f 	ands.w	r3, r4, #15
 800aa7a:	d00a      	beq.n	800aa92 <_strtod_l+0x42a>
 800aa7c:	495e      	ldr	r1, [pc, #376]	@ (800abf8 <_strtod_l+0x590>)
 800aa7e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa82:	4652      	mov	r2, sl
 800aa84:	465b      	mov	r3, fp
 800aa86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa8a:	f7f5 fdd5 	bl	8000638 <__aeabi_dmul>
 800aa8e:	4682      	mov	sl, r0
 800aa90:	468b      	mov	fp, r1
 800aa92:	f034 040f 	bics.w	r4, r4, #15
 800aa96:	d073      	beq.n	800ab80 <_strtod_l+0x518>
 800aa98:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800aa9c:	dd48      	ble.n	800ab30 <_strtod_l+0x4c8>
 800aa9e:	2400      	movs	r4, #0
 800aaa0:	46a0      	mov	r8, r4
 800aaa2:	940a      	str	r4, [sp, #40]	@ 0x28
 800aaa4:	46a1      	mov	r9, r4
 800aaa6:	9a05      	ldr	r2, [sp, #20]
 800aaa8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ac00 <_strtod_l+0x598>
 800aaac:	2322      	movs	r3, #34	@ 0x22
 800aaae:	6013      	str	r3, [r2, #0]
 800aab0:	f04f 0a00 	mov.w	sl, #0
 800aab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	f43f ae0f 	beq.w	800a6da <_strtod_l+0x72>
 800aabc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aabe:	9805      	ldr	r0, [sp, #20]
 800aac0:	f7ff f940 	bl	8009d44 <_Bfree>
 800aac4:	9805      	ldr	r0, [sp, #20]
 800aac6:	4649      	mov	r1, r9
 800aac8:	f7ff f93c 	bl	8009d44 <_Bfree>
 800aacc:	9805      	ldr	r0, [sp, #20]
 800aace:	4641      	mov	r1, r8
 800aad0:	f7ff f938 	bl	8009d44 <_Bfree>
 800aad4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aad6:	9805      	ldr	r0, [sp, #20]
 800aad8:	f7ff f934 	bl	8009d44 <_Bfree>
 800aadc:	9805      	ldr	r0, [sp, #20]
 800aade:	4621      	mov	r1, r4
 800aae0:	f7ff f930 	bl	8009d44 <_Bfree>
 800aae4:	e5f9      	b.n	800a6da <_strtod_l+0x72>
 800aae6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aae8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800aaec:	4293      	cmp	r3, r2
 800aaee:	dbbc      	blt.n	800aa6a <_strtod_l+0x402>
 800aaf0:	4c41      	ldr	r4, [pc, #260]	@ (800abf8 <_strtod_l+0x590>)
 800aaf2:	f1c5 050f 	rsb	r5, r5, #15
 800aaf6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800aafa:	4652      	mov	r2, sl
 800aafc:	465b      	mov	r3, fp
 800aafe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab02:	f7f5 fd99 	bl	8000638 <__aeabi_dmul>
 800ab06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab08:	1b5d      	subs	r5, r3, r5
 800ab0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ab0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ab12:	e78f      	b.n	800aa34 <_strtod_l+0x3cc>
 800ab14:	3316      	adds	r3, #22
 800ab16:	dba8      	blt.n	800aa6a <_strtod_l+0x402>
 800ab18:	4b37      	ldr	r3, [pc, #220]	@ (800abf8 <_strtod_l+0x590>)
 800ab1a:	eba9 0808 	sub.w	r8, r9, r8
 800ab1e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ab22:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ab26:	4650      	mov	r0, sl
 800ab28:	4659      	mov	r1, fp
 800ab2a:	f7f5 feaf 	bl	800088c <__aeabi_ddiv>
 800ab2e:	e783      	b.n	800aa38 <_strtod_l+0x3d0>
 800ab30:	4b32      	ldr	r3, [pc, #200]	@ (800abfc <_strtod_l+0x594>)
 800ab32:	9308      	str	r3, [sp, #32]
 800ab34:	2300      	movs	r3, #0
 800ab36:	1124      	asrs	r4, r4, #4
 800ab38:	4650      	mov	r0, sl
 800ab3a:	4659      	mov	r1, fp
 800ab3c:	461e      	mov	r6, r3
 800ab3e:	2c01      	cmp	r4, #1
 800ab40:	dc21      	bgt.n	800ab86 <_strtod_l+0x51e>
 800ab42:	b10b      	cbz	r3, 800ab48 <_strtod_l+0x4e0>
 800ab44:	4682      	mov	sl, r0
 800ab46:	468b      	mov	fp, r1
 800ab48:	492c      	ldr	r1, [pc, #176]	@ (800abfc <_strtod_l+0x594>)
 800ab4a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ab4e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ab52:	4652      	mov	r2, sl
 800ab54:	465b      	mov	r3, fp
 800ab56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab5a:	f7f5 fd6d 	bl	8000638 <__aeabi_dmul>
 800ab5e:	4b28      	ldr	r3, [pc, #160]	@ (800ac00 <_strtod_l+0x598>)
 800ab60:	460a      	mov	r2, r1
 800ab62:	400b      	ands	r3, r1
 800ab64:	4927      	ldr	r1, [pc, #156]	@ (800ac04 <_strtod_l+0x59c>)
 800ab66:	428b      	cmp	r3, r1
 800ab68:	4682      	mov	sl, r0
 800ab6a:	d898      	bhi.n	800aa9e <_strtod_l+0x436>
 800ab6c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ab70:	428b      	cmp	r3, r1
 800ab72:	bf86      	itte	hi
 800ab74:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ac08 <_strtod_l+0x5a0>
 800ab78:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800ab7c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ab80:	2300      	movs	r3, #0
 800ab82:	9308      	str	r3, [sp, #32]
 800ab84:	e07a      	b.n	800ac7c <_strtod_l+0x614>
 800ab86:	07e2      	lsls	r2, r4, #31
 800ab88:	d505      	bpl.n	800ab96 <_strtod_l+0x52e>
 800ab8a:	9b08      	ldr	r3, [sp, #32]
 800ab8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab90:	f7f5 fd52 	bl	8000638 <__aeabi_dmul>
 800ab94:	2301      	movs	r3, #1
 800ab96:	9a08      	ldr	r2, [sp, #32]
 800ab98:	3208      	adds	r2, #8
 800ab9a:	3601      	adds	r6, #1
 800ab9c:	1064      	asrs	r4, r4, #1
 800ab9e:	9208      	str	r2, [sp, #32]
 800aba0:	e7cd      	b.n	800ab3e <_strtod_l+0x4d6>
 800aba2:	d0ed      	beq.n	800ab80 <_strtod_l+0x518>
 800aba4:	4264      	negs	r4, r4
 800aba6:	f014 020f 	ands.w	r2, r4, #15
 800abaa:	d00a      	beq.n	800abc2 <_strtod_l+0x55a>
 800abac:	4b12      	ldr	r3, [pc, #72]	@ (800abf8 <_strtod_l+0x590>)
 800abae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abb2:	4650      	mov	r0, sl
 800abb4:	4659      	mov	r1, fp
 800abb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abba:	f7f5 fe67 	bl	800088c <__aeabi_ddiv>
 800abbe:	4682      	mov	sl, r0
 800abc0:	468b      	mov	fp, r1
 800abc2:	1124      	asrs	r4, r4, #4
 800abc4:	d0dc      	beq.n	800ab80 <_strtod_l+0x518>
 800abc6:	2c1f      	cmp	r4, #31
 800abc8:	dd20      	ble.n	800ac0c <_strtod_l+0x5a4>
 800abca:	2400      	movs	r4, #0
 800abcc:	46a0      	mov	r8, r4
 800abce:	940a      	str	r4, [sp, #40]	@ 0x28
 800abd0:	46a1      	mov	r9, r4
 800abd2:	9a05      	ldr	r2, [sp, #20]
 800abd4:	2322      	movs	r3, #34	@ 0x22
 800abd6:	f04f 0a00 	mov.w	sl, #0
 800abda:	f04f 0b00 	mov.w	fp, #0
 800abde:	6013      	str	r3, [r2, #0]
 800abe0:	e768      	b.n	800aab4 <_strtod_l+0x44c>
 800abe2:	bf00      	nop
 800abe4:	0800c735 	.word	0x0800c735
 800abe8:	0800c94c 	.word	0x0800c94c
 800abec:	0800c72d 	.word	0x0800c72d
 800abf0:	0800c764 	.word	0x0800c764
 800abf4:	0800caf5 	.word	0x0800caf5
 800abf8:	0800c880 	.word	0x0800c880
 800abfc:	0800c858 	.word	0x0800c858
 800ac00:	7ff00000 	.word	0x7ff00000
 800ac04:	7ca00000 	.word	0x7ca00000
 800ac08:	7fefffff 	.word	0x7fefffff
 800ac0c:	f014 0310 	ands.w	r3, r4, #16
 800ac10:	bf18      	it	ne
 800ac12:	236a      	movne	r3, #106	@ 0x6a
 800ac14:	4ea9      	ldr	r6, [pc, #676]	@ (800aebc <_strtod_l+0x854>)
 800ac16:	9308      	str	r3, [sp, #32]
 800ac18:	4650      	mov	r0, sl
 800ac1a:	4659      	mov	r1, fp
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	07e2      	lsls	r2, r4, #31
 800ac20:	d504      	bpl.n	800ac2c <_strtod_l+0x5c4>
 800ac22:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac26:	f7f5 fd07 	bl	8000638 <__aeabi_dmul>
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	1064      	asrs	r4, r4, #1
 800ac2e:	f106 0608 	add.w	r6, r6, #8
 800ac32:	d1f4      	bne.n	800ac1e <_strtod_l+0x5b6>
 800ac34:	b10b      	cbz	r3, 800ac3a <_strtod_l+0x5d2>
 800ac36:	4682      	mov	sl, r0
 800ac38:	468b      	mov	fp, r1
 800ac3a:	9b08      	ldr	r3, [sp, #32]
 800ac3c:	b1b3      	cbz	r3, 800ac6c <_strtod_l+0x604>
 800ac3e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ac42:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	4659      	mov	r1, fp
 800ac4a:	dd0f      	ble.n	800ac6c <_strtod_l+0x604>
 800ac4c:	2b1f      	cmp	r3, #31
 800ac4e:	dd55      	ble.n	800acfc <_strtod_l+0x694>
 800ac50:	2b34      	cmp	r3, #52	@ 0x34
 800ac52:	bfde      	ittt	le
 800ac54:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800ac58:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ac5c:	4093      	lslle	r3, r2
 800ac5e:	f04f 0a00 	mov.w	sl, #0
 800ac62:	bfcc      	ite	gt
 800ac64:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ac68:	ea03 0b01 	andle.w	fp, r3, r1
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	2300      	movs	r3, #0
 800ac70:	4650      	mov	r0, sl
 800ac72:	4659      	mov	r1, fp
 800ac74:	f7f5 ff48 	bl	8000b08 <__aeabi_dcmpeq>
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	d1a6      	bne.n	800abca <_strtod_l+0x562>
 800ac7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac7e:	9300      	str	r3, [sp, #0]
 800ac80:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ac82:	9805      	ldr	r0, [sp, #20]
 800ac84:	462b      	mov	r3, r5
 800ac86:	463a      	mov	r2, r7
 800ac88:	f7ff f8c4 	bl	8009e14 <__s2b>
 800ac8c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	f43f af05 	beq.w	800aa9e <_strtod_l+0x436>
 800ac94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac96:	2a00      	cmp	r2, #0
 800ac98:	eba9 0308 	sub.w	r3, r9, r8
 800ac9c:	bfa8      	it	ge
 800ac9e:	2300      	movge	r3, #0
 800aca0:	9312      	str	r3, [sp, #72]	@ 0x48
 800aca2:	2400      	movs	r4, #0
 800aca4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aca8:	9316      	str	r3, [sp, #88]	@ 0x58
 800acaa:	46a0      	mov	r8, r4
 800acac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acae:	9805      	ldr	r0, [sp, #20]
 800acb0:	6859      	ldr	r1, [r3, #4]
 800acb2:	f7ff f807 	bl	8009cc4 <_Balloc>
 800acb6:	4681      	mov	r9, r0
 800acb8:	2800      	cmp	r0, #0
 800acba:	f43f aef4 	beq.w	800aaa6 <_strtod_l+0x43e>
 800acbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acc0:	691a      	ldr	r2, [r3, #16]
 800acc2:	3202      	adds	r2, #2
 800acc4:	f103 010c 	add.w	r1, r3, #12
 800acc8:	0092      	lsls	r2, r2, #2
 800acca:	300c      	adds	r0, #12
 800accc:	f000 ff28 	bl	800bb20 <memcpy>
 800acd0:	ec4b ab10 	vmov	d0, sl, fp
 800acd4:	9805      	ldr	r0, [sp, #20]
 800acd6:	aa1c      	add	r2, sp, #112	@ 0x70
 800acd8:	a91b      	add	r1, sp, #108	@ 0x6c
 800acda:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800acde:	f7ff fbd5 	bl	800a48c <__d2b>
 800ace2:	901a      	str	r0, [sp, #104]	@ 0x68
 800ace4:	2800      	cmp	r0, #0
 800ace6:	f43f aede 	beq.w	800aaa6 <_strtod_l+0x43e>
 800acea:	9805      	ldr	r0, [sp, #20]
 800acec:	2101      	movs	r1, #1
 800acee:	f7ff f927 	bl	8009f40 <__i2b>
 800acf2:	4680      	mov	r8, r0
 800acf4:	b948      	cbnz	r0, 800ad0a <_strtod_l+0x6a2>
 800acf6:	f04f 0800 	mov.w	r8, #0
 800acfa:	e6d4      	b.n	800aaa6 <_strtod_l+0x43e>
 800acfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ad00:	fa02 f303 	lsl.w	r3, r2, r3
 800ad04:	ea03 0a0a 	and.w	sl, r3, sl
 800ad08:	e7b0      	b.n	800ac6c <_strtod_l+0x604>
 800ad0a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ad0c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ad0e:	2d00      	cmp	r5, #0
 800ad10:	bfab      	itete	ge
 800ad12:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ad14:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ad16:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ad18:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ad1a:	bfac      	ite	ge
 800ad1c:	18ef      	addge	r7, r5, r3
 800ad1e:	1b5e      	sublt	r6, r3, r5
 800ad20:	9b08      	ldr	r3, [sp, #32]
 800ad22:	1aed      	subs	r5, r5, r3
 800ad24:	4415      	add	r5, r2
 800ad26:	4b66      	ldr	r3, [pc, #408]	@ (800aec0 <_strtod_l+0x858>)
 800ad28:	3d01      	subs	r5, #1
 800ad2a:	429d      	cmp	r5, r3
 800ad2c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ad30:	da50      	bge.n	800add4 <_strtod_l+0x76c>
 800ad32:	1b5b      	subs	r3, r3, r5
 800ad34:	2b1f      	cmp	r3, #31
 800ad36:	eba2 0203 	sub.w	r2, r2, r3
 800ad3a:	f04f 0101 	mov.w	r1, #1
 800ad3e:	dc3d      	bgt.n	800adbc <_strtod_l+0x754>
 800ad40:	fa01 f303 	lsl.w	r3, r1, r3
 800ad44:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad46:	2300      	movs	r3, #0
 800ad48:	9310      	str	r3, [sp, #64]	@ 0x40
 800ad4a:	18bd      	adds	r5, r7, r2
 800ad4c:	9b08      	ldr	r3, [sp, #32]
 800ad4e:	42af      	cmp	r7, r5
 800ad50:	4416      	add	r6, r2
 800ad52:	441e      	add	r6, r3
 800ad54:	463b      	mov	r3, r7
 800ad56:	bfa8      	it	ge
 800ad58:	462b      	movge	r3, r5
 800ad5a:	42b3      	cmp	r3, r6
 800ad5c:	bfa8      	it	ge
 800ad5e:	4633      	movge	r3, r6
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	bfc2      	ittt	gt
 800ad64:	1aed      	subgt	r5, r5, r3
 800ad66:	1af6      	subgt	r6, r6, r3
 800ad68:	1aff      	subgt	r7, r7, r3
 800ad6a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	dd16      	ble.n	800ad9e <_strtod_l+0x736>
 800ad70:	4641      	mov	r1, r8
 800ad72:	9805      	ldr	r0, [sp, #20]
 800ad74:	461a      	mov	r2, r3
 800ad76:	f7ff f9a3 	bl	800a0c0 <__pow5mult>
 800ad7a:	4680      	mov	r8, r0
 800ad7c:	2800      	cmp	r0, #0
 800ad7e:	d0ba      	beq.n	800acf6 <_strtod_l+0x68e>
 800ad80:	4601      	mov	r1, r0
 800ad82:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ad84:	9805      	ldr	r0, [sp, #20]
 800ad86:	f7ff f8f1 	bl	8009f6c <__multiply>
 800ad8a:	900e      	str	r0, [sp, #56]	@ 0x38
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	f43f ae8a 	beq.w	800aaa6 <_strtod_l+0x43e>
 800ad92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad94:	9805      	ldr	r0, [sp, #20]
 800ad96:	f7fe ffd5 	bl	8009d44 <_Bfree>
 800ad9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad9c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad9e:	2d00      	cmp	r5, #0
 800ada0:	dc1d      	bgt.n	800adde <_strtod_l+0x776>
 800ada2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	dd23      	ble.n	800adf0 <_strtod_l+0x788>
 800ada8:	4649      	mov	r1, r9
 800adaa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800adac:	9805      	ldr	r0, [sp, #20]
 800adae:	f7ff f987 	bl	800a0c0 <__pow5mult>
 800adb2:	4681      	mov	r9, r0
 800adb4:	b9e0      	cbnz	r0, 800adf0 <_strtod_l+0x788>
 800adb6:	f04f 0900 	mov.w	r9, #0
 800adba:	e674      	b.n	800aaa6 <_strtod_l+0x43e>
 800adbc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800adc0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800adc4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800adc8:	35e2      	adds	r5, #226	@ 0xe2
 800adca:	fa01 f305 	lsl.w	r3, r1, r5
 800adce:	9310      	str	r3, [sp, #64]	@ 0x40
 800add0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800add2:	e7ba      	b.n	800ad4a <_strtod_l+0x6e2>
 800add4:	2300      	movs	r3, #0
 800add6:	9310      	str	r3, [sp, #64]	@ 0x40
 800add8:	2301      	movs	r3, #1
 800adda:	9313      	str	r3, [sp, #76]	@ 0x4c
 800addc:	e7b5      	b.n	800ad4a <_strtod_l+0x6e2>
 800adde:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ade0:	9805      	ldr	r0, [sp, #20]
 800ade2:	462a      	mov	r2, r5
 800ade4:	f7ff f9c6 	bl	800a174 <__lshift>
 800ade8:	901a      	str	r0, [sp, #104]	@ 0x68
 800adea:	2800      	cmp	r0, #0
 800adec:	d1d9      	bne.n	800ada2 <_strtod_l+0x73a>
 800adee:	e65a      	b.n	800aaa6 <_strtod_l+0x43e>
 800adf0:	2e00      	cmp	r6, #0
 800adf2:	dd07      	ble.n	800ae04 <_strtod_l+0x79c>
 800adf4:	4649      	mov	r1, r9
 800adf6:	9805      	ldr	r0, [sp, #20]
 800adf8:	4632      	mov	r2, r6
 800adfa:	f7ff f9bb 	bl	800a174 <__lshift>
 800adfe:	4681      	mov	r9, r0
 800ae00:	2800      	cmp	r0, #0
 800ae02:	d0d8      	beq.n	800adb6 <_strtod_l+0x74e>
 800ae04:	2f00      	cmp	r7, #0
 800ae06:	dd08      	ble.n	800ae1a <_strtod_l+0x7b2>
 800ae08:	4641      	mov	r1, r8
 800ae0a:	9805      	ldr	r0, [sp, #20]
 800ae0c:	463a      	mov	r2, r7
 800ae0e:	f7ff f9b1 	bl	800a174 <__lshift>
 800ae12:	4680      	mov	r8, r0
 800ae14:	2800      	cmp	r0, #0
 800ae16:	f43f ae46 	beq.w	800aaa6 <_strtod_l+0x43e>
 800ae1a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae1c:	9805      	ldr	r0, [sp, #20]
 800ae1e:	464a      	mov	r2, r9
 800ae20:	f7ff fa30 	bl	800a284 <__mdiff>
 800ae24:	4604      	mov	r4, r0
 800ae26:	2800      	cmp	r0, #0
 800ae28:	f43f ae3d 	beq.w	800aaa6 <_strtod_l+0x43e>
 800ae2c:	68c3      	ldr	r3, [r0, #12]
 800ae2e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ae30:	2300      	movs	r3, #0
 800ae32:	60c3      	str	r3, [r0, #12]
 800ae34:	4641      	mov	r1, r8
 800ae36:	f7ff fa09 	bl	800a24c <__mcmp>
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	da46      	bge.n	800aecc <_strtod_l+0x864>
 800ae3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae40:	ea53 030a 	orrs.w	r3, r3, sl
 800ae44:	d16c      	bne.n	800af20 <_strtod_l+0x8b8>
 800ae46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d168      	bne.n	800af20 <_strtod_l+0x8b8>
 800ae4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae52:	0d1b      	lsrs	r3, r3, #20
 800ae54:	051b      	lsls	r3, r3, #20
 800ae56:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ae5a:	d961      	bls.n	800af20 <_strtod_l+0x8b8>
 800ae5c:	6963      	ldr	r3, [r4, #20]
 800ae5e:	b913      	cbnz	r3, 800ae66 <_strtod_l+0x7fe>
 800ae60:	6923      	ldr	r3, [r4, #16]
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	dd5c      	ble.n	800af20 <_strtod_l+0x8b8>
 800ae66:	4621      	mov	r1, r4
 800ae68:	2201      	movs	r2, #1
 800ae6a:	9805      	ldr	r0, [sp, #20]
 800ae6c:	f7ff f982 	bl	800a174 <__lshift>
 800ae70:	4641      	mov	r1, r8
 800ae72:	4604      	mov	r4, r0
 800ae74:	f7ff f9ea 	bl	800a24c <__mcmp>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	dd51      	ble.n	800af20 <_strtod_l+0x8b8>
 800ae7c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae80:	9a08      	ldr	r2, [sp, #32]
 800ae82:	0d1b      	lsrs	r3, r3, #20
 800ae84:	051b      	lsls	r3, r3, #20
 800ae86:	2a00      	cmp	r2, #0
 800ae88:	d06b      	beq.n	800af62 <_strtod_l+0x8fa>
 800ae8a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ae8e:	d868      	bhi.n	800af62 <_strtod_l+0x8fa>
 800ae90:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ae94:	f67f ae9d 	bls.w	800abd2 <_strtod_l+0x56a>
 800ae98:	4b0a      	ldr	r3, [pc, #40]	@ (800aec4 <_strtod_l+0x85c>)
 800ae9a:	4650      	mov	r0, sl
 800ae9c:	4659      	mov	r1, fp
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f7f5 fbca 	bl	8000638 <__aeabi_dmul>
 800aea4:	4b08      	ldr	r3, [pc, #32]	@ (800aec8 <_strtod_l+0x860>)
 800aea6:	400b      	ands	r3, r1
 800aea8:	4682      	mov	sl, r0
 800aeaa:	468b      	mov	fp, r1
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f47f ae05 	bne.w	800aabc <_strtod_l+0x454>
 800aeb2:	9a05      	ldr	r2, [sp, #20]
 800aeb4:	2322      	movs	r3, #34	@ 0x22
 800aeb6:	6013      	str	r3, [r2, #0]
 800aeb8:	e600      	b.n	800aabc <_strtod_l+0x454>
 800aeba:	bf00      	nop
 800aebc:	0800c978 	.word	0x0800c978
 800aec0:	fffffc02 	.word	0xfffffc02
 800aec4:	39500000 	.word	0x39500000
 800aec8:	7ff00000 	.word	0x7ff00000
 800aecc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800aed0:	d165      	bne.n	800af9e <_strtod_l+0x936>
 800aed2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aed4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aed8:	b35a      	cbz	r2, 800af32 <_strtod_l+0x8ca>
 800aeda:	4a9f      	ldr	r2, [pc, #636]	@ (800b158 <_strtod_l+0xaf0>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d12b      	bne.n	800af38 <_strtod_l+0x8d0>
 800aee0:	9b08      	ldr	r3, [sp, #32]
 800aee2:	4651      	mov	r1, sl
 800aee4:	b303      	cbz	r3, 800af28 <_strtod_l+0x8c0>
 800aee6:	4b9d      	ldr	r3, [pc, #628]	@ (800b15c <_strtod_l+0xaf4>)
 800aee8:	465a      	mov	r2, fp
 800aeea:	4013      	ands	r3, r2
 800aeec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800aef0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aef4:	d81b      	bhi.n	800af2e <_strtod_l+0x8c6>
 800aef6:	0d1b      	lsrs	r3, r3, #20
 800aef8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aefc:	fa02 f303 	lsl.w	r3, r2, r3
 800af00:	4299      	cmp	r1, r3
 800af02:	d119      	bne.n	800af38 <_strtod_l+0x8d0>
 800af04:	4b96      	ldr	r3, [pc, #600]	@ (800b160 <_strtod_l+0xaf8>)
 800af06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af08:	429a      	cmp	r2, r3
 800af0a:	d102      	bne.n	800af12 <_strtod_l+0x8aa>
 800af0c:	3101      	adds	r1, #1
 800af0e:	f43f adca 	beq.w	800aaa6 <_strtod_l+0x43e>
 800af12:	4b92      	ldr	r3, [pc, #584]	@ (800b15c <_strtod_l+0xaf4>)
 800af14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af16:	401a      	ands	r2, r3
 800af18:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800af1c:	f04f 0a00 	mov.w	sl, #0
 800af20:	9b08      	ldr	r3, [sp, #32]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1b8      	bne.n	800ae98 <_strtod_l+0x830>
 800af26:	e5c9      	b.n	800aabc <_strtod_l+0x454>
 800af28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af2c:	e7e8      	b.n	800af00 <_strtod_l+0x898>
 800af2e:	4613      	mov	r3, r2
 800af30:	e7e6      	b.n	800af00 <_strtod_l+0x898>
 800af32:	ea53 030a 	orrs.w	r3, r3, sl
 800af36:	d0a1      	beq.n	800ae7c <_strtod_l+0x814>
 800af38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800af3a:	b1db      	cbz	r3, 800af74 <_strtod_l+0x90c>
 800af3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af3e:	4213      	tst	r3, r2
 800af40:	d0ee      	beq.n	800af20 <_strtod_l+0x8b8>
 800af42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af44:	9a08      	ldr	r2, [sp, #32]
 800af46:	4650      	mov	r0, sl
 800af48:	4659      	mov	r1, fp
 800af4a:	b1bb      	cbz	r3, 800af7c <_strtod_l+0x914>
 800af4c:	f7ff fb6c 	bl	800a628 <sulp>
 800af50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af54:	ec53 2b10 	vmov	r2, r3, d0
 800af58:	f7f5 f9b8 	bl	80002cc <__adddf3>
 800af5c:	4682      	mov	sl, r0
 800af5e:	468b      	mov	fp, r1
 800af60:	e7de      	b.n	800af20 <_strtod_l+0x8b8>
 800af62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800af66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800af6a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800af6e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800af72:	e7d5      	b.n	800af20 <_strtod_l+0x8b8>
 800af74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800af76:	ea13 0f0a 	tst.w	r3, sl
 800af7a:	e7e1      	b.n	800af40 <_strtod_l+0x8d8>
 800af7c:	f7ff fb54 	bl	800a628 <sulp>
 800af80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af84:	ec53 2b10 	vmov	r2, r3, d0
 800af88:	f7f5 f99e 	bl	80002c8 <__aeabi_dsub>
 800af8c:	2200      	movs	r2, #0
 800af8e:	2300      	movs	r3, #0
 800af90:	4682      	mov	sl, r0
 800af92:	468b      	mov	fp, r1
 800af94:	f7f5 fdb8 	bl	8000b08 <__aeabi_dcmpeq>
 800af98:	2800      	cmp	r0, #0
 800af9a:	d0c1      	beq.n	800af20 <_strtod_l+0x8b8>
 800af9c:	e619      	b.n	800abd2 <_strtod_l+0x56a>
 800af9e:	4641      	mov	r1, r8
 800afa0:	4620      	mov	r0, r4
 800afa2:	f7ff facb 	bl	800a53c <__ratio>
 800afa6:	ec57 6b10 	vmov	r6, r7, d0
 800afaa:	2200      	movs	r2, #0
 800afac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800afb0:	4630      	mov	r0, r6
 800afb2:	4639      	mov	r1, r7
 800afb4:	f7f5 fdbc 	bl	8000b30 <__aeabi_dcmple>
 800afb8:	2800      	cmp	r0, #0
 800afba:	d06f      	beq.n	800b09c <_strtod_l+0xa34>
 800afbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d17a      	bne.n	800b0b8 <_strtod_l+0xa50>
 800afc2:	f1ba 0f00 	cmp.w	sl, #0
 800afc6:	d158      	bne.n	800b07a <_strtod_l+0xa12>
 800afc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d15a      	bne.n	800b088 <_strtod_l+0xa20>
 800afd2:	4b64      	ldr	r3, [pc, #400]	@ (800b164 <_strtod_l+0xafc>)
 800afd4:	2200      	movs	r2, #0
 800afd6:	4630      	mov	r0, r6
 800afd8:	4639      	mov	r1, r7
 800afda:	f7f5 fd9f 	bl	8000b1c <__aeabi_dcmplt>
 800afde:	2800      	cmp	r0, #0
 800afe0:	d159      	bne.n	800b096 <_strtod_l+0xa2e>
 800afe2:	4630      	mov	r0, r6
 800afe4:	4639      	mov	r1, r7
 800afe6:	4b60      	ldr	r3, [pc, #384]	@ (800b168 <_strtod_l+0xb00>)
 800afe8:	2200      	movs	r2, #0
 800afea:	f7f5 fb25 	bl	8000638 <__aeabi_dmul>
 800afee:	4606      	mov	r6, r0
 800aff0:	460f      	mov	r7, r1
 800aff2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800aff6:	9606      	str	r6, [sp, #24]
 800aff8:	9307      	str	r3, [sp, #28]
 800affa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800affe:	4d57      	ldr	r5, [pc, #348]	@ (800b15c <_strtod_l+0xaf4>)
 800b000:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b004:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b006:	401d      	ands	r5, r3
 800b008:	4b58      	ldr	r3, [pc, #352]	@ (800b16c <_strtod_l+0xb04>)
 800b00a:	429d      	cmp	r5, r3
 800b00c:	f040 80b2 	bne.w	800b174 <_strtod_l+0xb0c>
 800b010:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b012:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b016:	ec4b ab10 	vmov	d0, sl, fp
 800b01a:	f7ff f9c7 	bl	800a3ac <__ulp>
 800b01e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b022:	ec51 0b10 	vmov	r0, r1, d0
 800b026:	f7f5 fb07 	bl	8000638 <__aeabi_dmul>
 800b02a:	4652      	mov	r2, sl
 800b02c:	465b      	mov	r3, fp
 800b02e:	f7f5 f94d 	bl	80002cc <__adddf3>
 800b032:	460b      	mov	r3, r1
 800b034:	4949      	ldr	r1, [pc, #292]	@ (800b15c <_strtod_l+0xaf4>)
 800b036:	4a4e      	ldr	r2, [pc, #312]	@ (800b170 <_strtod_l+0xb08>)
 800b038:	4019      	ands	r1, r3
 800b03a:	4291      	cmp	r1, r2
 800b03c:	4682      	mov	sl, r0
 800b03e:	d942      	bls.n	800b0c6 <_strtod_l+0xa5e>
 800b040:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b042:	4b47      	ldr	r3, [pc, #284]	@ (800b160 <_strtod_l+0xaf8>)
 800b044:	429a      	cmp	r2, r3
 800b046:	d103      	bne.n	800b050 <_strtod_l+0x9e8>
 800b048:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b04a:	3301      	adds	r3, #1
 800b04c:	f43f ad2b 	beq.w	800aaa6 <_strtod_l+0x43e>
 800b050:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b160 <_strtod_l+0xaf8>
 800b054:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b058:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b05a:	9805      	ldr	r0, [sp, #20]
 800b05c:	f7fe fe72 	bl	8009d44 <_Bfree>
 800b060:	9805      	ldr	r0, [sp, #20]
 800b062:	4649      	mov	r1, r9
 800b064:	f7fe fe6e 	bl	8009d44 <_Bfree>
 800b068:	9805      	ldr	r0, [sp, #20]
 800b06a:	4641      	mov	r1, r8
 800b06c:	f7fe fe6a 	bl	8009d44 <_Bfree>
 800b070:	9805      	ldr	r0, [sp, #20]
 800b072:	4621      	mov	r1, r4
 800b074:	f7fe fe66 	bl	8009d44 <_Bfree>
 800b078:	e618      	b.n	800acac <_strtod_l+0x644>
 800b07a:	f1ba 0f01 	cmp.w	sl, #1
 800b07e:	d103      	bne.n	800b088 <_strtod_l+0xa20>
 800b080:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b082:	2b00      	cmp	r3, #0
 800b084:	f43f ada5 	beq.w	800abd2 <_strtod_l+0x56a>
 800b088:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b138 <_strtod_l+0xad0>
 800b08c:	4f35      	ldr	r7, [pc, #212]	@ (800b164 <_strtod_l+0xafc>)
 800b08e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b092:	2600      	movs	r6, #0
 800b094:	e7b1      	b.n	800affa <_strtod_l+0x992>
 800b096:	4f34      	ldr	r7, [pc, #208]	@ (800b168 <_strtod_l+0xb00>)
 800b098:	2600      	movs	r6, #0
 800b09a:	e7aa      	b.n	800aff2 <_strtod_l+0x98a>
 800b09c:	4b32      	ldr	r3, [pc, #200]	@ (800b168 <_strtod_l+0xb00>)
 800b09e:	4630      	mov	r0, r6
 800b0a0:	4639      	mov	r1, r7
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f7f5 fac8 	bl	8000638 <__aeabi_dmul>
 800b0a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0aa:	4606      	mov	r6, r0
 800b0ac:	460f      	mov	r7, r1
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d09f      	beq.n	800aff2 <_strtod_l+0x98a>
 800b0b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b0b6:	e7a0      	b.n	800affa <_strtod_l+0x992>
 800b0b8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b140 <_strtod_l+0xad8>
 800b0bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b0c0:	ec57 6b17 	vmov	r6, r7, d7
 800b0c4:	e799      	b.n	800affa <_strtod_l+0x992>
 800b0c6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b0ca:	9b08      	ldr	r3, [sp, #32]
 800b0cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d1c1      	bne.n	800b058 <_strtod_l+0x9f0>
 800b0d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b0d8:	0d1b      	lsrs	r3, r3, #20
 800b0da:	051b      	lsls	r3, r3, #20
 800b0dc:	429d      	cmp	r5, r3
 800b0de:	d1bb      	bne.n	800b058 <_strtod_l+0x9f0>
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	4639      	mov	r1, r7
 800b0e4:	f7f5 fe08 	bl	8000cf8 <__aeabi_d2lz>
 800b0e8:	f7f5 fa78 	bl	80005dc <__aeabi_l2d>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	4639      	mov	r1, r7
 800b0f4:	f7f5 f8e8 	bl	80002c8 <__aeabi_dsub>
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b100:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b104:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b106:	ea46 060a 	orr.w	r6, r6, sl
 800b10a:	431e      	orrs	r6, r3
 800b10c:	d06f      	beq.n	800b1ee <_strtod_l+0xb86>
 800b10e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b148 <_strtod_l+0xae0>)
 800b110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b114:	f7f5 fd02 	bl	8000b1c <__aeabi_dcmplt>
 800b118:	2800      	cmp	r0, #0
 800b11a:	f47f accf 	bne.w	800aabc <_strtod_l+0x454>
 800b11e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b150 <_strtod_l+0xae8>)
 800b120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b124:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b128:	f7f5 fd16 	bl	8000b58 <__aeabi_dcmpgt>
 800b12c:	2800      	cmp	r0, #0
 800b12e:	d093      	beq.n	800b058 <_strtod_l+0x9f0>
 800b130:	e4c4      	b.n	800aabc <_strtod_l+0x454>
 800b132:	bf00      	nop
 800b134:	f3af 8000 	nop.w
 800b138:	00000000 	.word	0x00000000
 800b13c:	bff00000 	.word	0xbff00000
 800b140:	00000000 	.word	0x00000000
 800b144:	3ff00000 	.word	0x3ff00000
 800b148:	94a03595 	.word	0x94a03595
 800b14c:	3fdfffff 	.word	0x3fdfffff
 800b150:	35afe535 	.word	0x35afe535
 800b154:	3fe00000 	.word	0x3fe00000
 800b158:	000fffff 	.word	0x000fffff
 800b15c:	7ff00000 	.word	0x7ff00000
 800b160:	7fefffff 	.word	0x7fefffff
 800b164:	3ff00000 	.word	0x3ff00000
 800b168:	3fe00000 	.word	0x3fe00000
 800b16c:	7fe00000 	.word	0x7fe00000
 800b170:	7c9fffff 	.word	0x7c9fffff
 800b174:	9b08      	ldr	r3, [sp, #32]
 800b176:	b323      	cbz	r3, 800b1c2 <_strtod_l+0xb5a>
 800b178:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b17c:	d821      	bhi.n	800b1c2 <_strtod_l+0xb5a>
 800b17e:	a328      	add	r3, pc, #160	@ (adr r3, 800b220 <_strtod_l+0xbb8>)
 800b180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b184:	4630      	mov	r0, r6
 800b186:	4639      	mov	r1, r7
 800b188:	f7f5 fcd2 	bl	8000b30 <__aeabi_dcmple>
 800b18c:	b1a0      	cbz	r0, 800b1b8 <_strtod_l+0xb50>
 800b18e:	4639      	mov	r1, r7
 800b190:	4630      	mov	r0, r6
 800b192:	f7f5 fd29 	bl	8000be8 <__aeabi_d2uiz>
 800b196:	2801      	cmp	r0, #1
 800b198:	bf38      	it	cc
 800b19a:	2001      	movcc	r0, #1
 800b19c:	f7f5 f9d2 	bl	8000544 <__aeabi_ui2d>
 800b1a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1a2:	4606      	mov	r6, r0
 800b1a4:	460f      	mov	r7, r1
 800b1a6:	b9fb      	cbnz	r3, 800b1e8 <_strtod_l+0xb80>
 800b1a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b1ac:	9014      	str	r0, [sp, #80]	@ 0x50
 800b1ae:	9315      	str	r3, [sp, #84]	@ 0x54
 800b1b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b1b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b1b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b1ba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b1be:	1b5b      	subs	r3, r3, r5
 800b1c0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b1c2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b1c6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b1ca:	f7ff f8ef 	bl	800a3ac <__ulp>
 800b1ce:	4650      	mov	r0, sl
 800b1d0:	ec53 2b10 	vmov	r2, r3, d0
 800b1d4:	4659      	mov	r1, fp
 800b1d6:	f7f5 fa2f 	bl	8000638 <__aeabi_dmul>
 800b1da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b1de:	f7f5 f875 	bl	80002cc <__adddf3>
 800b1e2:	4682      	mov	sl, r0
 800b1e4:	468b      	mov	fp, r1
 800b1e6:	e770      	b.n	800b0ca <_strtod_l+0xa62>
 800b1e8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b1ec:	e7e0      	b.n	800b1b0 <_strtod_l+0xb48>
 800b1ee:	a30e      	add	r3, pc, #56	@ (adr r3, 800b228 <_strtod_l+0xbc0>)
 800b1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f4:	f7f5 fc92 	bl	8000b1c <__aeabi_dcmplt>
 800b1f8:	e798      	b.n	800b12c <_strtod_l+0xac4>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1fe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b200:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b202:	6013      	str	r3, [r2, #0]
 800b204:	f7ff ba6d 	b.w	800a6e2 <_strtod_l+0x7a>
 800b208:	2a65      	cmp	r2, #101	@ 0x65
 800b20a:	f43f ab66 	beq.w	800a8da <_strtod_l+0x272>
 800b20e:	2a45      	cmp	r2, #69	@ 0x45
 800b210:	f43f ab63 	beq.w	800a8da <_strtod_l+0x272>
 800b214:	2301      	movs	r3, #1
 800b216:	f7ff bb9e 	b.w	800a956 <_strtod_l+0x2ee>
 800b21a:	bf00      	nop
 800b21c:	f3af 8000 	nop.w
 800b220:	ffc00000 	.word	0xffc00000
 800b224:	41dfffff 	.word	0x41dfffff
 800b228:	94a03595 	.word	0x94a03595
 800b22c:	3fcfffff 	.word	0x3fcfffff

0800b230 <_strtod_r>:
 800b230:	4b01      	ldr	r3, [pc, #4]	@ (800b238 <_strtod_r+0x8>)
 800b232:	f7ff ba19 	b.w	800a668 <_strtod_l>
 800b236:	bf00      	nop
 800b238:	20000068 	.word	0x20000068

0800b23c <_strtol_l.constprop.0>:
 800b23c:	2b24      	cmp	r3, #36	@ 0x24
 800b23e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b242:	4686      	mov	lr, r0
 800b244:	4690      	mov	r8, r2
 800b246:	d801      	bhi.n	800b24c <_strtol_l.constprop.0+0x10>
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d106      	bne.n	800b25a <_strtol_l.constprop.0+0x1e>
 800b24c:	f7fd fe70 	bl	8008f30 <__errno>
 800b250:	2316      	movs	r3, #22
 800b252:	6003      	str	r3, [r0, #0]
 800b254:	2000      	movs	r0, #0
 800b256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b25a:	4834      	ldr	r0, [pc, #208]	@ (800b32c <_strtol_l.constprop.0+0xf0>)
 800b25c:	460d      	mov	r5, r1
 800b25e:	462a      	mov	r2, r5
 800b260:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b264:	5d06      	ldrb	r6, [r0, r4]
 800b266:	f016 0608 	ands.w	r6, r6, #8
 800b26a:	d1f8      	bne.n	800b25e <_strtol_l.constprop.0+0x22>
 800b26c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b26e:	d12d      	bne.n	800b2cc <_strtol_l.constprop.0+0x90>
 800b270:	782c      	ldrb	r4, [r5, #0]
 800b272:	2601      	movs	r6, #1
 800b274:	1c95      	adds	r5, r2, #2
 800b276:	f033 0210 	bics.w	r2, r3, #16
 800b27a:	d109      	bne.n	800b290 <_strtol_l.constprop.0+0x54>
 800b27c:	2c30      	cmp	r4, #48	@ 0x30
 800b27e:	d12a      	bne.n	800b2d6 <_strtol_l.constprop.0+0x9a>
 800b280:	782a      	ldrb	r2, [r5, #0]
 800b282:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b286:	2a58      	cmp	r2, #88	@ 0x58
 800b288:	d125      	bne.n	800b2d6 <_strtol_l.constprop.0+0x9a>
 800b28a:	786c      	ldrb	r4, [r5, #1]
 800b28c:	2310      	movs	r3, #16
 800b28e:	3502      	adds	r5, #2
 800b290:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b294:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800b298:	2200      	movs	r2, #0
 800b29a:	fbbc f9f3 	udiv	r9, ip, r3
 800b29e:	4610      	mov	r0, r2
 800b2a0:	fb03 ca19 	mls	sl, r3, r9, ip
 800b2a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b2a8:	2f09      	cmp	r7, #9
 800b2aa:	d81b      	bhi.n	800b2e4 <_strtol_l.constprop.0+0xa8>
 800b2ac:	463c      	mov	r4, r7
 800b2ae:	42a3      	cmp	r3, r4
 800b2b0:	dd27      	ble.n	800b302 <_strtol_l.constprop.0+0xc6>
 800b2b2:	1c57      	adds	r7, r2, #1
 800b2b4:	d007      	beq.n	800b2c6 <_strtol_l.constprop.0+0x8a>
 800b2b6:	4581      	cmp	r9, r0
 800b2b8:	d320      	bcc.n	800b2fc <_strtol_l.constprop.0+0xc0>
 800b2ba:	d101      	bne.n	800b2c0 <_strtol_l.constprop.0+0x84>
 800b2bc:	45a2      	cmp	sl, r4
 800b2be:	db1d      	blt.n	800b2fc <_strtol_l.constprop.0+0xc0>
 800b2c0:	fb00 4003 	mla	r0, r0, r3, r4
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2ca:	e7eb      	b.n	800b2a4 <_strtol_l.constprop.0+0x68>
 800b2cc:	2c2b      	cmp	r4, #43	@ 0x2b
 800b2ce:	bf04      	itt	eq
 800b2d0:	782c      	ldrbeq	r4, [r5, #0]
 800b2d2:	1c95      	addeq	r5, r2, #2
 800b2d4:	e7cf      	b.n	800b276 <_strtol_l.constprop.0+0x3a>
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d1da      	bne.n	800b290 <_strtol_l.constprop.0+0x54>
 800b2da:	2c30      	cmp	r4, #48	@ 0x30
 800b2dc:	bf0c      	ite	eq
 800b2de:	2308      	moveq	r3, #8
 800b2e0:	230a      	movne	r3, #10
 800b2e2:	e7d5      	b.n	800b290 <_strtol_l.constprop.0+0x54>
 800b2e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b2e8:	2f19      	cmp	r7, #25
 800b2ea:	d801      	bhi.n	800b2f0 <_strtol_l.constprop.0+0xb4>
 800b2ec:	3c37      	subs	r4, #55	@ 0x37
 800b2ee:	e7de      	b.n	800b2ae <_strtol_l.constprop.0+0x72>
 800b2f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b2f4:	2f19      	cmp	r7, #25
 800b2f6:	d804      	bhi.n	800b302 <_strtol_l.constprop.0+0xc6>
 800b2f8:	3c57      	subs	r4, #87	@ 0x57
 800b2fa:	e7d8      	b.n	800b2ae <_strtol_l.constprop.0+0x72>
 800b2fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b300:	e7e1      	b.n	800b2c6 <_strtol_l.constprop.0+0x8a>
 800b302:	1c53      	adds	r3, r2, #1
 800b304:	d108      	bne.n	800b318 <_strtol_l.constprop.0+0xdc>
 800b306:	2322      	movs	r3, #34	@ 0x22
 800b308:	f8ce 3000 	str.w	r3, [lr]
 800b30c:	4660      	mov	r0, ip
 800b30e:	f1b8 0f00 	cmp.w	r8, #0
 800b312:	d0a0      	beq.n	800b256 <_strtol_l.constprop.0+0x1a>
 800b314:	1e69      	subs	r1, r5, #1
 800b316:	e006      	b.n	800b326 <_strtol_l.constprop.0+0xea>
 800b318:	b106      	cbz	r6, 800b31c <_strtol_l.constprop.0+0xe0>
 800b31a:	4240      	negs	r0, r0
 800b31c:	f1b8 0f00 	cmp.w	r8, #0
 800b320:	d099      	beq.n	800b256 <_strtol_l.constprop.0+0x1a>
 800b322:	2a00      	cmp	r2, #0
 800b324:	d1f6      	bne.n	800b314 <_strtol_l.constprop.0+0xd8>
 800b326:	f8c8 1000 	str.w	r1, [r8]
 800b32a:	e794      	b.n	800b256 <_strtol_l.constprop.0+0x1a>
 800b32c:	0800c9a1 	.word	0x0800c9a1

0800b330 <_strtol_r>:
 800b330:	f7ff bf84 	b.w	800b23c <_strtol_l.constprop.0>

0800b334 <__ssputs_r>:
 800b334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b338:	688e      	ldr	r6, [r1, #8]
 800b33a:	461f      	mov	r7, r3
 800b33c:	42be      	cmp	r6, r7
 800b33e:	680b      	ldr	r3, [r1, #0]
 800b340:	4682      	mov	sl, r0
 800b342:	460c      	mov	r4, r1
 800b344:	4690      	mov	r8, r2
 800b346:	d82d      	bhi.n	800b3a4 <__ssputs_r+0x70>
 800b348:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b34c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b350:	d026      	beq.n	800b3a0 <__ssputs_r+0x6c>
 800b352:	6965      	ldr	r5, [r4, #20]
 800b354:	6909      	ldr	r1, [r1, #16]
 800b356:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b35a:	eba3 0901 	sub.w	r9, r3, r1
 800b35e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b362:	1c7b      	adds	r3, r7, #1
 800b364:	444b      	add	r3, r9
 800b366:	106d      	asrs	r5, r5, #1
 800b368:	429d      	cmp	r5, r3
 800b36a:	bf38      	it	cc
 800b36c:	461d      	movcc	r5, r3
 800b36e:	0553      	lsls	r3, r2, #21
 800b370:	d527      	bpl.n	800b3c2 <__ssputs_r+0x8e>
 800b372:	4629      	mov	r1, r5
 800b374:	f7fc fc58 	bl	8007c28 <_malloc_r>
 800b378:	4606      	mov	r6, r0
 800b37a:	b360      	cbz	r0, 800b3d6 <__ssputs_r+0xa2>
 800b37c:	6921      	ldr	r1, [r4, #16]
 800b37e:	464a      	mov	r2, r9
 800b380:	f000 fbce 	bl	800bb20 <memcpy>
 800b384:	89a3      	ldrh	r3, [r4, #12]
 800b386:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b38a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b38e:	81a3      	strh	r3, [r4, #12]
 800b390:	6126      	str	r6, [r4, #16]
 800b392:	6165      	str	r5, [r4, #20]
 800b394:	444e      	add	r6, r9
 800b396:	eba5 0509 	sub.w	r5, r5, r9
 800b39a:	6026      	str	r6, [r4, #0]
 800b39c:	60a5      	str	r5, [r4, #8]
 800b39e:	463e      	mov	r6, r7
 800b3a0:	42be      	cmp	r6, r7
 800b3a2:	d900      	bls.n	800b3a6 <__ssputs_r+0x72>
 800b3a4:	463e      	mov	r6, r7
 800b3a6:	6820      	ldr	r0, [r4, #0]
 800b3a8:	4632      	mov	r2, r6
 800b3aa:	4641      	mov	r1, r8
 800b3ac:	f000 fb6a 	bl	800ba84 <memmove>
 800b3b0:	68a3      	ldr	r3, [r4, #8]
 800b3b2:	1b9b      	subs	r3, r3, r6
 800b3b4:	60a3      	str	r3, [r4, #8]
 800b3b6:	6823      	ldr	r3, [r4, #0]
 800b3b8:	4433      	add	r3, r6
 800b3ba:	6023      	str	r3, [r4, #0]
 800b3bc:	2000      	movs	r0, #0
 800b3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3c2:	462a      	mov	r2, r5
 800b3c4:	f000 ff41 	bl	800c24a <_realloc_r>
 800b3c8:	4606      	mov	r6, r0
 800b3ca:	2800      	cmp	r0, #0
 800b3cc:	d1e0      	bne.n	800b390 <__ssputs_r+0x5c>
 800b3ce:	6921      	ldr	r1, [r4, #16]
 800b3d0:	4650      	mov	r0, sl
 800b3d2:	f7fe fc2d 	bl	8009c30 <_free_r>
 800b3d6:	230c      	movs	r3, #12
 800b3d8:	f8ca 3000 	str.w	r3, [sl]
 800b3dc:	89a3      	ldrh	r3, [r4, #12]
 800b3de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3e2:	81a3      	strh	r3, [r4, #12]
 800b3e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b3e8:	e7e9      	b.n	800b3be <__ssputs_r+0x8a>
	...

0800b3ec <_svfiprintf_r>:
 800b3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f0:	4698      	mov	r8, r3
 800b3f2:	898b      	ldrh	r3, [r1, #12]
 800b3f4:	061b      	lsls	r3, r3, #24
 800b3f6:	b09d      	sub	sp, #116	@ 0x74
 800b3f8:	4607      	mov	r7, r0
 800b3fa:	460d      	mov	r5, r1
 800b3fc:	4614      	mov	r4, r2
 800b3fe:	d510      	bpl.n	800b422 <_svfiprintf_r+0x36>
 800b400:	690b      	ldr	r3, [r1, #16]
 800b402:	b973      	cbnz	r3, 800b422 <_svfiprintf_r+0x36>
 800b404:	2140      	movs	r1, #64	@ 0x40
 800b406:	f7fc fc0f 	bl	8007c28 <_malloc_r>
 800b40a:	6028      	str	r0, [r5, #0]
 800b40c:	6128      	str	r0, [r5, #16]
 800b40e:	b930      	cbnz	r0, 800b41e <_svfiprintf_r+0x32>
 800b410:	230c      	movs	r3, #12
 800b412:	603b      	str	r3, [r7, #0]
 800b414:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b418:	b01d      	add	sp, #116	@ 0x74
 800b41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b41e:	2340      	movs	r3, #64	@ 0x40
 800b420:	616b      	str	r3, [r5, #20]
 800b422:	2300      	movs	r3, #0
 800b424:	9309      	str	r3, [sp, #36]	@ 0x24
 800b426:	2320      	movs	r3, #32
 800b428:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b42c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b430:	2330      	movs	r3, #48	@ 0x30
 800b432:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b5d0 <_svfiprintf_r+0x1e4>
 800b436:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b43a:	f04f 0901 	mov.w	r9, #1
 800b43e:	4623      	mov	r3, r4
 800b440:	469a      	mov	sl, r3
 800b442:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b446:	b10a      	cbz	r2, 800b44c <_svfiprintf_r+0x60>
 800b448:	2a25      	cmp	r2, #37	@ 0x25
 800b44a:	d1f9      	bne.n	800b440 <_svfiprintf_r+0x54>
 800b44c:	ebba 0b04 	subs.w	fp, sl, r4
 800b450:	d00b      	beq.n	800b46a <_svfiprintf_r+0x7e>
 800b452:	465b      	mov	r3, fp
 800b454:	4622      	mov	r2, r4
 800b456:	4629      	mov	r1, r5
 800b458:	4638      	mov	r0, r7
 800b45a:	f7ff ff6b 	bl	800b334 <__ssputs_r>
 800b45e:	3001      	adds	r0, #1
 800b460:	f000 80a7 	beq.w	800b5b2 <_svfiprintf_r+0x1c6>
 800b464:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b466:	445a      	add	r2, fp
 800b468:	9209      	str	r2, [sp, #36]	@ 0x24
 800b46a:	f89a 3000 	ldrb.w	r3, [sl]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	f000 809f 	beq.w	800b5b2 <_svfiprintf_r+0x1c6>
 800b474:	2300      	movs	r3, #0
 800b476:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b47a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b47e:	f10a 0a01 	add.w	sl, sl, #1
 800b482:	9304      	str	r3, [sp, #16]
 800b484:	9307      	str	r3, [sp, #28]
 800b486:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b48a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b48c:	4654      	mov	r4, sl
 800b48e:	2205      	movs	r2, #5
 800b490:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b494:	484e      	ldr	r0, [pc, #312]	@ (800b5d0 <_svfiprintf_r+0x1e4>)
 800b496:	f7f4 febb 	bl	8000210 <memchr>
 800b49a:	9a04      	ldr	r2, [sp, #16]
 800b49c:	b9d8      	cbnz	r0, 800b4d6 <_svfiprintf_r+0xea>
 800b49e:	06d0      	lsls	r0, r2, #27
 800b4a0:	bf44      	itt	mi
 800b4a2:	2320      	movmi	r3, #32
 800b4a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4a8:	0711      	lsls	r1, r2, #28
 800b4aa:	bf44      	itt	mi
 800b4ac:	232b      	movmi	r3, #43	@ 0x2b
 800b4ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4b2:	f89a 3000 	ldrb.w	r3, [sl]
 800b4b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4b8:	d015      	beq.n	800b4e6 <_svfiprintf_r+0xfa>
 800b4ba:	9a07      	ldr	r2, [sp, #28]
 800b4bc:	4654      	mov	r4, sl
 800b4be:	2000      	movs	r0, #0
 800b4c0:	f04f 0c0a 	mov.w	ip, #10
 800b4c4:	4621      	mov	r1, r4
 800b4c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4ca:	3b30      	subs	r3, #48	@ 0x30
 800b4cc:	2b09      	cmp	r3, #9
 800b4ce:	d94b      	bls.n	800b568 <_svfiprintf_r+0x17c>
 800b4d0:	b1b0      	cbz	r0, 800b500 <_svfiprintf_r+0x114>
 800b4d2:	9207      	str	r2, [sp, #28]
 800b4d4:	e014      	b.n	800b500 <_svfiprintf_r+0x114>
 800b4d6:	eba0 0308 	sub.w	r3, r0, r8
 800b4da:	fa09 f303 	lsl.w	r3, r9, r3
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	9304      	str	r3, [sp, #16]
 800b4e2:	46a2      	mov	sl, r4
 800b4e4:	e7d2      	b.n	800b48c <_svfiprintf_r+0xa0>
 800b4e6:	9b03      	ldr	r3, [sp, #12]
 800b4e8:	1d19      	adds	r1, r3, #4
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	9103      	str	r1, [sp, #12]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	bfbb      	ittet	lt
 800b4f2:	425b      	neglt	r3, r3
 800b4f4:	f042 0202 	orrlt.w	r2, r2, #2
 800b4f8:	9307      	strge	r3, [sp, #28]
 800b4fa:	9307      	strlt	r3, [sp, #28]
 800b4fc:	bfb8      	it	lt
 800b4fe:	9204      	strlt	r2, [sp, #16]
 800b500:	7823      	ldrb	r3, [r4, #0]
 800b502:	2b2e      	cmp	r3, #46	@ 0x2e
 800b504:	d10a      	bne.n	800b51c <_svfiprintf_r+0x130>
 800b506:	7863      	ldrb	r3, [r4, #1]
 800b508:	2b2a      	cmp	r3, #42	@ 0x2a
 800b50a:	d132      	bne.n	800b572 <_svfiprintf_r+0x186>
 800b50c:	9b03      	ldr	r3, [sp, #12]
 800b50e:	1d1a      	adds	r2, r3, #4
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	9203      	str	r2, [sp, #12]
 800b514:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b518:	3402      	adds	r4, #2
 800b51a:	9305      	str	r3, [sp, #20]
 800b51c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b5e0 <_svfiprintf_r+0x1f4>
 800b520:	7821      	ldrb	r1, [r4, #0]
 800b522:	2203      	movs	r2, #3
 800b524:	4650      	mov	r0, sl
 800b526:	f7f4 fe73 	bl	8000210 <memchr>
 800b52a:	b138      	cbz	r0, 800b53c <_svfiprintf_r+0x150>
 800b52c:	9b04      	ldr	r3, [sp, #16]
 800b52e:	eba0 000a 	sub.w	r0, r0, sl
 800b532:	2240      	movs	r2, #64	@ 0x40
 800b534:	4082      	lsls	r2, r0
 800b536:	4313      	orrs	r3, r2
 800b538:	3401      	adds	r4, #1
 800b53a:	9304      	str	r3, [sp, #16]
 800b53c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b540:	4824      	ldr	r0, [pc, #144]	@ (800b5d4 <_svfiprintf_r+0x1e8>)
 800b542:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b546:	2206      	movs	r2, #6
 800b548:	f7f4 fe62 	bl	8000210 <memchr>
 800b54c:	2800      	cmp	r0, #0
 800b54e:	d036      	beq.n	800b5be <_svfiprintf_r+0x1d2>
 800b550:	4b21      	ldr	r3, [pc, #132]	@ (800b5d8 <_svfiprintf_r+0x1ec>)
 800b552:	bb1b      	cbnz	r3, 800b59c <_svfiprintf_r+0x1b0>
 800b554:	9b03      	ldr	r3, [sp, #12]
 800b556:	3307      	adds	r3, #7
 800b558:	f023 0307 	bic.w	r3, r3, #7
 800b55c:	3308      	adds	r3, #8
 800b55e:	9303      	str	r3, [sp, #12]
 800b560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b562:	4433      	add	r3, r6
 800b564:	9309      	str	r3, [sp, #36]	@ 0x24
 800b566:	e76a      	b.n	800b43e <_svfiprintf_r+0x52>
 800b568:	fb0c 3202 	mla	r2, ip, r2, r3
 800b56c:	460c      	mov	r4, r1
 800b56e:	2001      	movs	r0, #1
 800b570:	e7a8      	b.n	800b4c4 <_svfiprintf_r+0xd8>
 800b572:	2300      	movs	r3, #0
 800b574:	3401      	adds	r4, #1
 800b576:	9305      	str	r3, [sp, #20]
 800b578:	4619      	mov	r1, r3
 800b57a:	f04f 0c0a 	mov.w	ip, #10
 800b57e:	4620      	mov	r0, r4
 800b580:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b584:	3a30      	subs	r2, #48	@ 0x30
 800b586:	2a09      	cmp	r2, #9
 800b588:	d903      	bls.n	800b592 <_svfiprintf_r+0x1a6>
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d0c6      	beq.n	800b51c <_svfiprintf_r+0x130>
 800b58e:	9105      	str	r1, [sp, #20]
 800b590:	e7c4      	b.n	800b51c <_svfiprintf_r+0x130>
 800b592:	fb0c 2101 	mla	r1, ip, r1, r2
 800b596:	4604      	mov	r4, r0
 800b598:	2301      	movs	r3, #1
 800b59a:	e7f0      	b.n	800b57e <_svfiprintf_r+0x192>
 800b59c:	ab03      	add	r3, sp, #12
 800b59e:	9300      	str	r3, [sp, #0]
 800b5a0:	462a      	mov	r2, r5
 800b5a2:	4b0e      	ldr	r3, [pc, #56]	@ (800b5dc <_svfiprintf_r+0x1f0>)
 800b5a4:	a904      	add	r1, sp, #16
 800b5a6:	4638      	mov	r0, r7
 800b5a8:	f7fc fc6a 	bl	8007e80 <_printf_float>
 800b5ac:	1c42      	adds	r2, r0, #1
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	d1d6      	bne.n	800b560 <_svfiprintf_r+0x174>
 800b5b2:	89ab      	ldrh	r3, [r5, #12]
 800b5b4:	065b      	lsls	r3, r3, #25
 800b5b6:	f53f af2d 	bmi.w	800b414 <_svfiprintf_r+0x28>
 800b5ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5bc:	e72c      	b.n	800b418 <_svfiprintf_r+0x2c>
 800b5be:	ab03      	add	r3, sp, #12
 800b5c0:	9300      	str	r3, [sp, #0]
 800b5c2:	462a      	mov	r2, r5
 800b5c4:	4b05      	ldr	r3, [pc, #20]	@ (800b5dc <_svfiprintf_r+0x1f0>)
 800b5c6:	a904      	add	r1, sp, #16
 800b5c8:	4638      	mov	r0, r7
 800b5ca:	f7fc fef1 	bl	80083b0 <_printf_i>
 800b5ce:	e7ed      	b.n	800b5ac <_svfiprintf_r+0x1c0>
 800b5d0:	0800caa1 	.word	0x0800caa1
 800b5d4:	0800caab 	.word	0x0800caab
 800b5d8:	08007e81 	.word	0x08007e81
 800b5dc:	0800b335 	.word	0x0800b335
 800b5e0:	0800caa7 	.word	0x0800caa7

0800b5e4 <__sfputc_r>:
 800b5e4:	6893      	ldr	r3, [r2, #8]
 800b5e6:	3b01      	subs	r3, #1
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	b410      	push	{r4}
 800b5ec:	6093      	str	r3, [r2, #8]
 800b5ee:	da08      	bge.n	800b602 <__sfputc_r+0x1e>
 800b5f0:	6994      	ldr	r4, [r2, #24]
 800b5f2:	42a3      	cmp	r3, r4
 800b5f4:	db01      	blt.n	800b5fa <__sfputc_r+0x16>
 800b5f6:	290a      	cmp	r1, #10
 800b5f8:	d103      	bne.n	800b602 <__sfputc_r+0x1e>
 800b5fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5fe:	f7fd bba0 	b.w	8008d42 <__swbuf_r>
 800b602:	6813      	ldr	r3, [r2, #0]
 800b604:	1c58      	adds	r0, r3, #1
 800b606:	6010      	str	r0, [r2, #0]
 800b608:	7019      	strb	r1, [r3, #0]
 800b60a:	4608      	mov	r0, r1
 800b60c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b610:	4770      	bx	lr

0800b612 <__sfputs_r>:
 800b612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b614:	4606      	mov	r6, r0
 800b616:	460f      	mov	r7, r1
 800b618:	4614      	mov	r4, r2
 800b61a:	18d5      	adds	r5, r2, r3
 800b61c:	42ac      	cmp	r4, r5
 800b61e:	d101      	bne.n	800b624 <__sfputs_r+0x12>
 800b620:	2000      	movs	r0, #0
 800b622:	e007      	b.n	800b634 <__sfputs_r+0x22>
 800b624:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b628:	463a      	mov	r2, r7
 800b62a:	4630      	mov	r0, r6
 800b62c:	f7ff ffda 	bl	800b5e4 <__sfputc_r>
 800b630:	1c43      	adds	r3, r0, #1
 800b632:	d1f3      	bne.n	800b61c <__sfputs_r+0xa>
 800b634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b638 <_vfiprintf_r>:
 800b638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b63c:	460d      	mov	r5, r1
 800b63e:	b09d      	sub	sp, #116	@ 0x74
 800b640:	4614      	mov	r4, r2
 800b642:	4698      	mov	r8, r3
 800b644:	4606      	mov	r6, r0
 800b646:	b118      	cbz	r0, 800b650 <_vfiprintf_r+0x18>
 800b648:	6a03      	ldr	r3, [r0, #32]
 800b64a:	b90b      	cbnz	r3, 800b650 <_vfiprintf_r+0x18>
 800b64c:	f7fd fa70 	bl	8008b30 <__sinit>
 800b650:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b652:	07d9      	lsls	r1, r3, #31
 800b654:	d405      	bmi.n	800b662 <_vfiprintf_r+0x2a>
 800b656:	89ab      	ldrh	r3, [r5, #12]
 800b658:	059a      	lsls	r2, r3, #22
 800b65a:	d402      	bmi.n	800b662 <_vfiprintf_r+0x2a>
 800b65c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b65e:	f7fd fc92 	bl	8008f86 <__retarget_lock_acquire_recursive>
 800b662:	89ab      	ldrh	r3, [r5, #12]
 800b664:	071b      	lsls	r3, r3, #28
 800b666:	d501      	bpl.n	800b66c <_vfiprintf_r+0x34>
 800b668:	692b      	ldr	r3, [r5, #16]
 800b66a:	b99b      	cbnz	r3, 800b694 <_vfiprintf_r+0x5c>
 800b66c:	4629      	mov	r1, r5
 800b66e:	4630      	mov	r0, r6
 800b670:	f7fd fba6 	bl	8008dc0 <__swsetup_r>
 800b674:	b170      	cbz	r0, 800b694 <_vfiprintf_r+0x5c>
 800b676:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b678:	07dc      	lsls	r4, r3, #31
 800b67a:	d504      	bpl.n	800b686 <_vfiprintf_r+0x4e>
 800b67c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b680:	b01d      	add	sp, #116	@ 0x74
 800b682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b686:	89ab      	ldrh	r3, [r5, #12]
 800b688:	0598      	lsls	r0, r3, #22
 800b68a:	d4f7      	bmi.n	800b67c <_vfiprintf_r+0x44>
 800b68c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b68e:	f7fd fc7b 	bl	8008f88 <__retarget_lock_release_recursive>
 800b692:	e7f3      	b.n	800b67c <_vfiprintf_r+0x44>
 800b694:	2300      	movs	r3, #0
 800b696:	9309      	str	r3, [sp, #36]	@ 0x24
 800b698:	2320      	movs	r3, #32
 800b69a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b69e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6a2:	2330      	movs	r3, #48	@ 0x30
 800b6a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b854 <_vfiprintf_r+0x21c>
 800b6a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b6ac:	f04f 0901 	mov.w	r9, #1
 800b6b0:	4623      	mov	r3, r4
 800b6b2:	469a      	mov	sl, r3
 800b6b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6b8:	b10a      	cbz	r2, 800b6be <_vfiprintf_r+0x86>
 800b6ba:	2a25      	cmp	r2, #37	@ 0x25
 800b6bc:	d1f9      	bne.n	800b6b2 <_vfiprintf_r+0x7a>
 800b6be:	ebba 0b04 	subs.w	fp, sl, r4
 800b6c2:	d00b      	beq.n	800b6dc <_vfiprintf_r+0xa4>
 800b6c4:	465b      	mov	r3, fp
 800b6c6:	4622      	mov	r2, r4
 800b6c8:	4629      	mov	r1, r5
 800b6ca:	4630      	mov	r0, r6
 800b6cc:	f7ff ffa1 	bl	800b612 <__sfputs_r>
 800b6d0:	3001      	adds	r0, #1
 800b6d2:	f000 80a7 	beq.w	800b824 <_vfiprintf_r+0x1ec>
 800b6d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6d8:	445a      	add	r2, fp
 800b6da:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f000 809f 	beq.w	800b824 <_vfiprintf_r+0x1ec>
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b6ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6f0:	f10a 0a01 	add.w	sl, sl, #1
 800b6f4:	9304      	str	r3, [sp, #16]
 800b6f6:	9307      	str	r3, [sp, #28]
 800b6f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b6fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b6fe:	4654      	mov	r4, sl
 800b700:	2205      	movs	r2, #5
 800b702:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b706:	4853      	ldr	r0, [pc, #332]	@ (800b854 <_vfiprintf_r+0x21c>)
 800b708:	f7f4 fd82 	bl	8000210 <memchr>
 800b70c:	9a04      	ldr	r2, [sp, #16]
 800b70e:	b9d8      	cbnz	r0, 800b748 <_vfiprintf_r+0x110>
 800b710:	06d1      	lsls	r1, r2, #27
 800b712:	bf44      	itt	mi
 800b714:	2320      	movmi	r3, #32
 800b716:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b71a:	0713      	lsls	r3, r2, #28
 800b71c:	bf44      	itt	mi
 800b71e:	232b      	movmi	r3, #43	@ 0x2b
 800b720:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b724:	f89a 3000 	ldrb.w	r3, [sl]
 800b728:	2b2a      	cmp	r3, #42	@ 0x2a
 800b72a:	d015      	beq.n	800b758 <_vfiprintf_r+0x120>
 800b72c:	9a07      	ldr	r2, [sp, #28]
 800b72e:	4654      	mov	r4, sl
 800b730:	2000      	movs	r0, #0
 800b732:	f04f 0c0a 	mov.w	ip, #10
 800b736:	4621      	mov	r1, r4
 800b738:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b73c:	3b30      	subs	r3, #48	@ 0x30
 800b73e:	2b09      	cmp	r3, #9
 800b740:	d94b      	bls.n	800b7da <_vfiprintf_r+0x1a2>
 800b742:	b1b0      	cbz	r0, 800b772 <_vfiprintf_r+0x13a>
 800b744:	9207      	str	r2, [sp, #28]
 800b746:	e014      	b.n	800b772 <_vfiprintf_r+0x13a>
 800b748:	eba0 0308 	sub.w	r3, r0, r8
 800b74c:	fa09 f303 	lsl.w	r3, r9, r3
 800b750:	4313      	orrs	r3, r2
 800b752:	9304      	str	r3, [sp, #16]
 800b754:	46a2      	mov	sl, r4
 800b756:	e7d2      	b.n	800b6fe <_vfiprintf_r+0xc6>
 800b758:	9b03      	ldr	r3, [sp, #12]
 800b75a:	1d19      	adds	r1, r3, #4
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	9103      	str	r1, [sp, #12]
 800b760:	2b00      	cmp	r3, #0
 800b762:	bfbb      	ittet	lt
 800b764:	425b      	neglt	r3, r3
 800b766:	f042 0202 	orrlt.w	r2, r2, #2
 800b76a:	9307      	strge	r3, [sp, #28]
 800b76c:	9307      	strlt	r3, [sp, #28]
 800b76e:	bfb8      	it	lt
 800b770:	9204      	strlt	r2, [sp, #16]
 800b772:	7823      	ldrb	r3, [r4, #0]
 800b774:	2b2e      	cmp	r3, #46	@ 0x2e
 800b776:	d10a      	bne.n	800b78e <_vfiprintf_r+0x156>
 800b778:	7863      	ldrb	r3, [r4, #1]
 800b77a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b77c:	d132      	bne.n	800b7e4 <_vfiprintf_r+0x1ac>
 800b77e:	9b03      	ldr	r3, [sp, #12]
 800b780:	1d1a      	adds	r2, r3, #4
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	9203      	str	r2, [sp, #12]
 800b786:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b78a:	3402      	adds	r4, #2
 800b78c:	9305      	str	r3, [sp, #20]
 800b78e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b864 <_vfiprintf_r+0x22c>
 800b792:	7821      	ldrb	r1, [r4, #0]
 800b794:	2203      	movs	r2, #3
 800b796:	4650      	mov	r0, sl
 800b798:	f7f4 fd3a 	bl	8000210 <memchr>
 800b79c:	b138      	cbz	r0, 800b7ae <_vfiprintf_r+0x176>
 800b79e:	9b04      	ldr	r3, [sp, #16]
 800b7a0:	eba0 000a 	sub.w	r0, r0, sl
 800b7a4:	2240      	movs	r2, #64	@ 0x40
 800b7a6:	4082      	lsls	r2, r0
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	3401      	adds	r4, #1
 800b7ac:	9304      	str	r3, [sp, #16]
 800b7ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7b2:	4829      	ldr	r0, [pc, #164]	@ (800b858 <_vfiprintf_r+0x220>)
 800b7b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b7b8:	2206      	movs	r2, #6
 800b7ba:	f7f4 fd29 	bl	8000210 <memchr>
 800b7be:	2800      	cmp	r0, #0
 800b7c0:	d03f      	beq.n	800b842 <_vfiprintf_r+0x20a>
 800b7c2:	4b26      	ldr	r3, [pc, #152]	@ (800b85c <_vfiprintf_r+0x224>)
 800b7c4:	bb1b      	cbnz	r3, 800b80e <_vfiprintf_r+0x1d6>
 800b7c6:	9b03      	ldr	r3, [sp, #12]
 800b7c8:	3307      	adds	r3, #7
 800b7ca:	f023 0307 	bic.w	r3, r3, #7
 800b7ce:	3308      	adds	r3, #8
 800b7d0:	9303      	str	r3, [sp, #12]
 800b7d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7d4:	443b      	add	r3, r7
 800b7d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7d8:	e76a      	b.n	800b6b0 <_vfiprintf_r+0x78>
 800b7da:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7de:	460c      	mov	r4, r1
 800b7e0:	2001      	movs	r0, #1
 800b7e2:	e7a8      	b.n	800b736 <_vfiprintf_r+0xfe>
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	3401      	adds	r4, #1
 800b7e8:	9305      	str	r3, [sp, #20]
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	f04f 0c0a 	mov.w	ip, #10
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7f6:	3a30      	subs	r2, #48	@ 0x30
 800b7f8:	2a09      	cmp	r2, #9
 800b7fa:	d903      	bls.n	800b804 <_vfiprintf_r+0x1cc>
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d0c6      	beq.n	800b78e <_vfiprintf_r+0x156>
 800b800:	9105      	str	r1, [sp, #20]
 800b802:	e7c4      	b.n	800b78e <_vfiprintf_r+0x156>
 800b804:	fb0c 2101 	mla	r1, ip, r1, r2
 800b808:	4604      	mov	r4, r0
 800b80a:	2301      	movs	r3, #1
 800b80c:	e7f0      	b.n	800b7f0 <_vfiprintf_r+0x1b8>
 800b80e:	ab03      	add	r3, sp, #12
 800b810:	9300      	str	r3, [sp, #0]
 800b812:	462a      	mov	r2, r5
 800b814:	4b12      	ldr	r3, [pc, #72]	@ (800b860 <_vfiprintf_r+0x228>)
 800b816:	a904      	add	r1, sp, #16
 800b818:	4630      	mov	r0, r6
 800b81a:	f7fc fb31 	bl	8007e80 <_printf_float>
 800b81e:	4607      	mov	r7, r0
 800b820:	1c78      	adds	r0, r7, #1
 800b822:	d1d6      	bne.n	800b7d2 <_vfiprintf_r+0x19a>
 800b824:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b826:	07d9      	lsls	r1, r3, #31
 800b828:	d405      	bmi.n	800b836 <_vfiprintf_r+0x1fe>
 800b82a:	89ab      	ldrh	r3, [r5, #12]
 800b82c:	059a      	lsls	r2, r3, #22
 800b82e:	d402      	bmi.n	800b836 <_vfiprintf_r+0x1fe>
 800b830:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b832:	f7fd fba9 	bl	8008f88 <__retarget_lock_release_recursive>
 800b836:	89ab      	ldrh	r3, [r5, #12]
 800b838:	065b      	lsls	r3, r3, #25
 800b83a:	f53f af1f 	bmi.w	800b67c <_vfiprintf_r+0x44>
 800b83e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b840:	e71e      	b.n	800b680 <_vfiprintf_r+0x48>
 800b842:	ab03      	add	r3, sp, #12
 800b844:	9300      	str	r3, [sp, #0]
 800b846:	462a      	mov	r2, r5
 800b848:	4b05      	ldr	r3, [pc, #20]	@ (800b860 <_vfiprintf_r+0x228>)
 800b84a:	a904      	add	r1, sp, #16
 800b84c:	4630      	mov	r0, r6
 800b84e:	f7fc fdaf 	bl	80083b0 <_printf_i>
 800b852:	e7e4      	b.n	800b81e <_vfiprintf_r+0x1e6>
 800b854:	0800caa1 	.word	0x0800caa1
 800b858:	0800caab 	.word	0x0800caab
 800b85c:	08007e81 	.word	0x08007e81
 800b860:	0800b613 	.word	0x0800b613
 800b864:	0800caa7 	.word	0x0800caa7

0800b868 <__sflush_r>:
 800b868:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b870:	0716      	lsls	r6, r2, #28
 800b872:	4605      	mov	r5, r0
 800b874:	460c      	mov	r4, r1
 800b876:	d454      	bmi.n	800b922 <__sflush_r+0xba>
 800b878:	684b      	ldr	r3, [r1, #4]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	dc02      	bgt.n	800b884 <__sflush_r+0x1c>
 800b87e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b880:	2b00      	cmp	r3, #0
 800b882:	dd48      	ble.n	800b916 <__sflush_r+0xae>
 800b884:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b886:	2e00      	cmp	r6, #0
 800b888:	d045      	beq.n	800b916 <__sflush_r+0xae>
 800b88a:	2300      	movs	r3, #0
 800b88c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b890:	682f      	ldr	r7, [r5, #0]
 800b892:	6a21      	ldr	r1, [r4, #32]
 800b894:	602b      	str	r3, [r5, #0]
 800b896:	d030      	beq.n	800b8fa <__sflush_r+0x92>
 800b898:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b89a:	89a3      	ldrh	r3, [r4, #12]
 800b89c:	0759      	lsls	r1, r3, #29
 800b89e:	d505      	bpl.n	800b8ac <__sflush_r+0x44>
 800b8a0:	6863      	ldr	r3, [r4, #4]
 800b8a2:	1ad2      	subs	r2, r2, r3
 800b8a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b8a6:	b10b      	cbz	r3, 800b8ac <__sflush_r+0x44>
 800b8a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b8aa:	1ad2      	subs	r2, r2, r3
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8b0:	6a21      	ldr	r1, [r4, #32]
 800b8b2:	4628      	mov	r0, r5
 800b8b4:	47b0      	blx	r6
 800b8b6:	1c43      	adds	r3, r0, #1
 800b8b8:	89a3      	ldrh	r3, [r4, #12]
 800b8ba:	d106      	bne.n	800b8ca <__sflush_r+0x62>
 800b8bc:	6829      	ldr	r1, [r5, #0]
 800b8be:	291d      	cmp	r1, #29
 800b8c0:	d82b      	bhi.n	800b91a <__sflush_r+0xb2>
 800b8c2:	4a2a      	ldr	r2, [pc, #168]	@ (800b96c <__sflush_r+0x104>)
 800b8c4:	410a      	asrs	r2, r1
 800b8c6:	07d6      	lsls	r6, r2, #31
 800b8c8:	d427      	bmi.n	800b91a <__sflush_r+0xb2>
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	6062      	str	r2, [r4, #4]
 800b8ce:	04d9      	lsls	r1, r3, #19
 800b8d0:	6922      	ldr	r2, [r4, #16]
 800b8d2:	6022      	str	r2, [r4, #0]
 800b8d4:	d504      	bpl.n	800b8e0 <__sflush_r+0x78>
 800b8d6:	1c42      	adds	r2, r0, #1
 800b8d8:	d101      	bne.n	800b8de <__sflush_r+0x76>
 800b8da:	682b      	ldr	r3, [r5, #0]
 800b8dc:	b903      	cbnz	r3, 800b8e0 <__sflush_r+0x78>
 800b8de:	6560      	str	r0, [r4, #84]	@ 0x54
 800b8e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8e2:	602f      	str	r7, [r5, #0]
 800b8e4:	b1b9      	cbz	r1, 800b916 <__sflush_r+0xae>
 800b8e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8ea:	4299      	cmp	r1, r3
 800b8ec:	d002      	beq.n	800b8f4 <__sflush_r+0x8c>
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	f7fe f99e 	bl	8009c30 <_free_r>
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8f8:	e00d      	b.n	800b916 <__sflush_r+0xae>
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	4628      	mov	r0, r5
 800b8fe:	47b0      	blx	r6
 800b900:	4602      	mov	r2, r0
 800b902:	1c50      	adds	r0, r2, #1
 800b904:	d1c9      	bne.n	800b89a <__sflush_r+0x32>
 800b906:	682b      	ldr	r3, [r5, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d0c6      	beq.n	800b89a <__sflush_r+0x32>
 800b90c:	2b1d      	cmp	r3, #29
 800b90e:	d001      	beq.n	800b914 <__sflush_r+0xac>
 800b910:	2b16      	cmp	r3, #22
 800b912:	d11e      	bne.n	800b952 <__sflush_r+0xea>
 800b914:	602f      	str	r7, [r5, #0]
 800b916:	2000      	movs	r0, #0
 800b918:	e022      	b.n	800b960 <__sflush_r+0xf8>
 800b91a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b91e:	b21b      	sxth	r3, r3
 800b920:	e01b      	b.n	800b95a <__sflush_r+0xf2>
 800b922:	690f      	ldr	r7, [r1, #16]
 800b924:	2f00      	cmp	r7, #0
 800b926:	d0f6      	beq.n	800b916 <__sflush_r+0xae>
 800b928:	0793      	lsls	r3, r2, #30
 800b92a:	680e      	ldr	r6, [r1, #0]
 800b92c:	bf08      	it	eq
 800b92e:	694b      	ldreq	r3, [r1, #20]
 800b930:	600f      	str	r7, [r1, #0]
 800b932:	bf18      	it	ne
 800b934:	2300      	movne	r3, #0
 800b936:	eba6 0807 	sub.w	r8, r6, r7
 800b93a:	608b      	str	r3, [r1, #8]
 800b93c:	f1b8 0f00 	cmp.w	r8, #0
 800b940:	dde9      	ble.n	800b916 <__sflush_r+0xae>
 800b942:	6a21      	ldr	r1, [r4, #32]
 800b944:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b946:	4643      	mov	r3, r8
 800b948:	463a      	mov	r2, r7
 800b94a:	4628      	mov	r0, r5
 800b94c:	47b0      	blx	r6
 800b94e:	2800      	cmp	r0, #0
 800b950:	dc08      	bgt.n	800b964 <__sflush_r+0xfc>
 800b952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b95a:	81a3      	strh	r3, [r4, #12]
 800b95c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b964:	4407      	add	r7, r0
 800b966:	eba8 0800 	sub.w	r8, r8, r0
 800b96a:	e7e7      	b.n	800b93c <__sflush_r+0xd4>
 800b96c:	dfbffffe 	.word	0xdfbffffe

0800b970 <_fflush_r>:
 800b970:	b538      	push	{r3, r4, r5, lr}
 800b972:	690b      	ldr	r3, [r1, #16]
 800b974:	4605      	mov	r5, r0
 800b976:	460c      	mov	r4, r1
 800b978:	b913      	cbnz	r3, 800b980 <_fflush_r+0x10>
 800b97a:	2500      	movs	r5, #0
 800b97c:	4628      	mov	r0, r5
 800b97e:	bd38      	pop	{r3, r4, r5, pc}
 800b980:	b118      	cbz	r0, 800b98a <_fflush_r+0x1a>
 800b982:	6a03      	ldr	r3, [r0, #32]
 800b984:	b90b      	cbnz	r3, 800b98a <_fflush_r+0x1a>
 800b986:	f7fd f8d3 	bl	8008b30 <__sinit>
 800b98a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d0f3      	beq.n	800b97a <_fflush_r+0xa>
 800b992:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b994:	07d0      	lsls	r0, r2, #31
 800b996:	d404      	bmi.n	800b9a2 <_fflush_r+0x32>
 800b998:	0599      	lsls	r1, r3, #22
 800b99a:	d402      	bmi.n	800b9a2 <_fflush_r+0x32>
 800b99c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b99e:	f7fd faf2 	bl	8008f86 <__retarget_lock_acquire_recursive>
 800b9a2:	4628      	mov	r0, r5
 800b9a4:	4621      	mov	r1, r4
 800b9a6:	f7ff ff5f 	bl	800b868 <__sflush_r>
 800b9aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9ac:	07da      	lsls	r2, r3, #31
 800b9ae:	4605      	mov	r5, r0
 800b9b0:	d4e4      	bmi.n	800b97c <_fflush_r+0xc>
 800b9b2:	89a3      	ldrh	r3, [r4, #12]
 800b9b4:	059b      	lsls	r3, r3, #22
 800b9b6:	d4e1      	bmi.n	800b97c <_fflush_r+0xc>
 800b9b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9ba:	f7fd fae5 	bl	8008f88 <__retarget_lock_release_recursive>
 800b9be:	e7dd      	b.n	800b97c <_fflush_r+0xc>

0800b9c0 <__swhatbuf_r>:
 800b9c0:	b570      	push	{r4, r5, r6, lr}
 800b9c2:	460c      	mov	r4, r1
 800b9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9c8:	2900      	cmp	r1, #0
 800b9ca:	b096      	sub	sp, #88	@ 0x58
 800b9cc:	4615      	mov	r5, r2
 800b9ce:	461e      	mov	r6, r3
 800b9d0:	da0d      	bge.n	800b9ee <__swhatbuf_r+0x2e>
 800b9d2:	89a3      	ldrh	r3, [r4, #12]
 800b9d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b9d8:	f04f 0100 	mov.w	r1, #0
 800b9dc:	bf14      	ite	ne
 800b9de:	2340      	movne	r3, #64	@ 0x40
 800b9e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	6031      	str	r1, [r6, #0]
 800b9e8:	602b      	str	r3, [r5, #0]
 800b9ea:	b016      	add	sp, #88	@ 0x58
 800b9ec:	bd70      	pop	{r4, r5, r6, pc}
 800b9ee:	466a      	mov	r2, sp
 800b9f0:	f000 f874 	bl	800badc <_fstat_r>
 800b9f4:	2800      	cmp	r0, #0
 800b9f6:	dbec      	blt.n	800b9d2 <__swhatbuf_r+0x12>
 800b9f8:	9901      	ldr	r1, [sp, #4]
 800b9fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b9fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ba02:	4259      	negs	r1, r3
 800ba04:	4159      	adcs	r1, r3
 800ba06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba0a:	e7eb      	b.n	800b9e4 <__swhatbuf_r+0x24>

0800ba0c <__smakebuf_r>:
 800ba0c:	898b      	ldrh	r3, [r1, #12]
 800ba0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba10:	079d      	lsls	r5, r3, #30
 800ba12:	4606      	mov	r6, r0
 800ba14:	460c      	mov	r4, r1
 800ba16:	d507      	bpl.n	800ba28 <__smakebuf_r+0x1c>
 800ba18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ba1c:	6023      	str	r3, [r4, #0]
 800ba1e:	6123      	str	r3, [r4, #16]
 800ba20:	2301      	movs	r3, #1
 800ba22:	6163      	str	r3, [r4, #20]
 800ba24:	b003      	add	sp, #12
 800ba26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba28:	ab01      	add	r3, sp, #4
 800ba2a:	466a      	mov	r2, sp
 800ba2c:	f7ff ffc8 	bl	800b9c0 <__swhatbuf_r>
 800ba30:	9f00      	ldr	r7, [sp, #0]
 800ba32:	4605      	mov	r5, r0
 800ba34:	4639      	mov	r1, r7
 800ba36:	4630      	mov	r0, r6
 800ba38:	f7fc f8f6 	bl	8007c28 <_malloc_r>
 800ba3c:	b948      	cbnz	r0, 800ba52 <__smakebuf_r+0x46>
 800ba3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba42:	059a      	lsls	r2, r3, #22
 800ba44:	d4ee      	bmi.n	800ba24 <__smakebuf_r+0x18>
 800ba46:	f023 0303 	bic.w	r3, r3, #3
 800ba4a:	f043 0302 	orr.w	r3, r3, #2
 800ba4e:	81a3      	strh	r3, [r4, #12]
 800ba50:	e7e2      	b.n	800ba18 <__smakebuf_r+0xc>
 800ba52:	89a3      	ldrh	r3, [r4, #12]
 800ba54:	6020      	str	r0, [r4, #0]
 800ba56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba5a:	81a3      	strh	r3, [r4, #12]
 800ba5c:	9b01      	ldr	r3, [sp, #4]
 800ba5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ba62:	b15b      	cbz	r3, 800ba7c <__smakebuf_r+0x70>
 800ba64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba68:	4630      	mov	r0, r6
 800ba6a:	f000 f849 	bl	800bb00 <_isatty_r>
 800ba6e:	b128      	cbz	r0, 800ba7c <__smakebuf_r+0x70>
 800ba70:	89a3      	ldrh	r3, [r4, #12]
 800ba72:	f023 0303 	bic.w	r3, r3, #3
 800ba76:	f043 0301 	orr.w	r3, r3, #1
 800ba7a:	81a3      	strh	r3, [r4, #12]
 800ba7c:	89a3      	ldrh	r3, [r4, #12]
 800ba7e:	431d      	orrs	r5, r3
 800ba80:	81a5      	strh	r5, [r4, #12]
 800ba82:	e7cf      	b.n	800ba24 <__smakebuf_r+0x18>

0800ba84 <memmove>:
 800ba84:	4288      	cmp	r0, r1
 800ba86:	b510      	push	{r4, lr}
 800ba88:	eb01 0402 	add.w	r4, r1, r2
 800ba8c:	d902      	bls.n	800ba94 <memmove+0x10>
 800ba8e:	4284      	cmp	r4, r0
 800ba90:	4623      	mov	r3, r4
 800ba92:	d807      	bhi.n	800baa4 <memmove+0x20>
 800ba94:	1e43      	subs	r3, r0, #1
 800ba96:	42a1      	cmp	r1, r4
 800ba98:	d008      	beq.n	800baac <memmove+0x28>
 800ba9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800baa2:	e7f8      	b.n	800ba96 <memmove+0x12>
 800baa4:	4402      	add	r2, r0
 800baa6:	4601      	mov	r1, r0
 800baa8:	428a      	cmp	r2, r1
 800baaa:	d100      	bne.n	800baae <memmove+0x2a>
 800baac:	bd10      	pop	{r4, pc}
 800baae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bab2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bab6:	e7f7      	b.n	800baa8 <memmove+0x24>

0800bab8 <strncmp>:
 800bab8:	b510      	push	{r4, lr}
 800baba:	b16a      	cbz	r2, 800bad8 <strncmp+0x20>
 800babc:	3901      	subs	r1, #1
 800babe:	1884      	adds	r4, r0, r2
 800bac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bac4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bac8:	429a      	cmp	r2, r3
 800baca:	d103      	bne.n	800bad4 <strncmp+0x1c>
 800bacc:	42a0      	cmp	r0, r4
 800bace:	d001      	beq.n	800bad4 <strncmp+0x1c>
 800bad0:	2a00      	cmp	r2, #0
 800bad2:	d1f5      	bne.n	800bac0 <strncmp+0x8>
 800bad4:	1ad0      	subs	r0, r2, r3
 800bad6:	bd10      	pop	{r4, pc}
 800bad8:	4610      	mov	r0, r2
 800bada:	e7fc      	b.n	800bad6 <strncmp+0x1e>

0800badc <_fstat_r>:
 800badc:	b538      	push	{r3, r4, r5, lr}
 800bade:	4d07      	ldr	r5, [pc, #28]	@ (800bafc <_fstat_r+0x20>)
 800bae0:	2300      	movs	r3, #0
 800bae2:	4604      	mov	r4, r0
 800bae4:	4608      	mov	r0, r1
 800bae6:	4611      	mov	r1, r2
 800bae8:	602b      	str	r3, [r5, #0]
 800baea:	f7f6 fbcb 	bl	8002284 <_fstat>
 800baee:	1c43      	adds	r3, r0, #1
 800baf0:	d102      	bne.n	800baf8 <_fstat_r+0x1c>
 800baf2:	682b      	ldr	r3, [r5, #0]
 800baf4:	b103      	cbz	r3, 800baf8 <_fstat_r+0x1c>
 800baf6:	6023      	str	r3, [r4, #0]
 800baf8:	bd38      	pop	{r3, r4, r5, pc}
 800bafa:	bf00      	nop
 800bafc:	200005a4 	.word	0x200005a4

0800bb00 <_isatty_r>:
 800bb00:	b538      	push	{r3, r4, r5, lr}
 800bb02:	4d06      	ldr	r5, [pc, #24]	@ (800bb1c <_isatty_r+0x1c>)
 800bb04:	2300      	movs	r3, #0
 800bb06:	4604      	mov	r4, r0
 800bb08:	4608      	mov	r0, r1
 800bb0a:	602b      	str	r3, [r5, #0]
 800bb0c:	f7f6 fbca 	bl	80022a4 <_isatty>
 800bb10:	1c43      	adds	r3, r0, #1
 800bb12:	d102      	bne.n	800bb1a <_isatty_r+0x1a>
 800bb14:	682b      	ldr	r3, [r5, #0]
 800bb16:	b103      	cbz	r3, 800bb1a <_isatty_r+0x1a>
 800bb18:	6023      	str	r3, [r4, #0]
 800bb1a:	bd38      	pop	{r3, r4, r5, pc}
 800bb1c:	200005a4 	.word	0x200005a4

0800bb20 <memcpy>:
 800bb20:	440a      	add	r2, r1
 800bb22:	4291      	cmp	r1, r2
 800bb24:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800bb28:	d100      	bne.n	800bb2c <memcpy+0xc>
 800bb2a:	4770      	bx	lr
 800bb2c:	b510      	push	{r4, lr}
 800bb2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb36:	4291      	cmp	r1, r2
 800bb38:	d1f9      	bne.n	800bb2e <memcpy+0xe>
 800bb3a:	bd10      	pop	{r4, pc}
 800bb3c:	0000      	movs	r0, r0
	...

0800bb40 <nan>:
 800bb40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bb48 <nan+0x8>
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	00000000 	.word	0x00000000
 800bb4c:	7ff80000 	.word	0x7ff80000

0800bb50 <__assert_func>:
 800bb50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb52:	4614      	mov	r4, r2
 800bb54:	461a      	mov	r2, r3
 800bb56:	4b09      	ldr	r3, [pc, #36]	@ (800bb7c <__assert_func+0x2c>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4605      	mov	r5, r0
 800bb5c:	68d8      	ldr	r0, [r3, #12]
 800bb5e:	b954      	cbnz	r4, 800bb76 <__assert_func+0x26>
 800bb60:	4b07      	ldr	r3, [pc, #28]	@ (800bb80 <__assert_func+0x30>)
 800bb62:	461c      	mov	r4, r3
 800bb64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb68:	9100      	str	r1, [sp, #0]
 800bb6a:	462b      	mov	r3, r5
 800bb6c:	4905      	ldr	r1, [pc, #20]	@ (800bb84 <__assert_func+0x34>)
 800bb6e:	f000 fba7 	bl	800c2c0 <fiprintf>
 800bb72:	f000 fbb7 	bl	800c2e4 <abort>
 800bb76:	4b04      	ldr	r3, [pc, #16]	@ (800bb88 <__assert_func+0x38>)
 800bb78:	e7f4      	b.n	800bb64 <__assert_func+0x14>
 800bb7a:	bf00      	nop
 800bb7c:	20000018 	.word	0x20000018
 800bb80:	0800caf5 	.word	0x0800caf5
 800bb84:	0800cac7 	.word	0x0800cac7
 800bb88:	0800caba 	.word	0x0800caba

0800bb8c <_calloc_r>:
 800bb8c:	b570      	push	{r4, r5, r6, lr}
 800bb8e:	fba1 5402 	umull	r5, r4, r1, r2
 800bb92:	b93c      	cbnz	r4, 800bba4 <_calloc_r+0x18>
 800bb94:	4629      	mov	r1, r5
 800bb96:	f7fc f847 	bl	8007c28 <_malloc_r>
 800bb9a:	4606      	mov	r6, r0
 800bb9c:	b928      	cbnz	r0, 800bbaa <_calloc_r+0x1e>
 800bb9e:	2600      	movs	r6, #0
 800bba0:	4630      	mov	r0, r6
 800bba2:	bd70      	pop	{r4, r5, r6, pc}
 800bba4:	220c      	movs	r2, #12
 800bba6:	6002      	str	r2, [r0, #0]
 800bba8:	e7f9      	b.n	800bb9e <_calloc_r+0x12>
 800bbaa:	462a      	mov	r2, r5
 800bbac:	4621      	mov	r1, r4
 800bbae:	f7fd f95d 	bl	8008e6c <memset>
 800bbb2:	e7f5      	b.n	800bba0 <_calloc_r+0x14>

0800bbb4 <rshift>:
 800bbb4:	6903      	ldr	r3, [r0, #16]
 800bbb6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bbba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbbe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bbc2:	f100 0414 	add.w	r4, r0, #20
 800bbc6:	dd45      	ble.n	800bc54 <rshift+0xa0>
 800bbc8:	f011 011f 	ands.w	r1, r1, #31
 800bbcc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bbd0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bbd4:	d10c      	bne.n	800bbf0 <rshift+0x3c>
 800bbd6:	f100 0710 	add.w	r7, r0, #16
 800bbda:	4629      	mov	r1, r5
 800bbdc:	42b1      	cmp	r1, r6
 800bbde:	d334      	bcc.n	800bc4a <rshift+0x96>
 800bbe0:	1a9b      	subs	r3, r3, r2
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	1eea      	subs	r2, r5, #3
 800bbe6:	4296      	cmp	r6, r2
 800bbe8:	bf38      	it	cc
 800bbea:	2300      	movcc	r3, #0
 800bbec:	4423      	add	r3, r4
 800bbee:	e015      	b.n	800bc1c <rshift+0x68>
 800bbf0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bbf4:	f1c1 0820 	rsb	r8, r1, #32
 800bbf8:	40cf      	lsrs	r7, r1
 800bbfa:	f105 0e04 	add.w	lr, r5, #4
 800bbfe:	46a1      	mov	r9, r4
 800bc00:	4576      	cmp	r6, lr
 800bc02:	46f4      	mov	ip, lr
 800bc04:	d815      	bhi.n	800bc32 <rshift+0x7e>
 800bc06:	1a9a      	subs	r2, r3, r2
 800bc08:	0092      	lsls	r2, r2, #2
 800bc0a:	3a04      	subs	r2, #4
 800bc0c:	3501      	adds	r5, #1
 800bc0e:	42ae      	cmp	r6, r5
 800bc10:	bf38      	it	cc
 800bc12:	2200      	movcc	r2, #0
 800bc14:	18a3      	adds	r3, r4, r2
 800bc16:	50a7      	str	r7, [r4, r2]
 800bc18:	b107      	cbz	r7, 800bc1c <rshift+0x68>
 800bc1a:	3304      	adds	r3, #4
 800bc1c:	1b1a      	subs	r2, r3, r4
 800bc1e:	42a3      	cmp	r3, r4
 800bc20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bc24:	bf08      	it	eq
 800bc26:	2300      	moveq	r3, #0
 800bc28:	6102      	str	r2, [r0, #16]
 800bc2a:	bf08      	it	eq
 800bc2c:	6143      	streq	r3, [r0, #20]
 800bc2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc32:	f8dc c000 	ldr.w	ip, [ip]
 800bc36:	fa0c fc08 	lsl.w	ip, ip, r8
 800bc3a:	ea4c 0707 	orr.w	r7, ip, r7
 800bc3e:	f849 7b04 	str.w	r7, [r9], #4
 800bc42:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bc46:	40cf      	lsrs	r7, r1
 800bc48:	e7da      	b.n	800bc00 <rshift+0x4c>
 800bc4a:	f851 cb04 	ldr.w	ip, [r1], #4
 800bc4e:	f847 cf04 	str.w	ip, [r7, #4]!
 800bc52:	e7c3      	b.n	800bbdc <rshift+0x28>
 800bc54:	4623      	mov	r3, r4
 800bc56:	e7e1      	b.n	800bc1c <rshift+0x68>

0800bc58 <__hexdig_fun>:
 800bc58:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bc5c:	2b09      	cmp	r3, #9
 800bc5e:	d802      	bhi.n	800bc66 <__hexdig_fun+0xe>
 800bc60:	3820      	subs	r0, #32
 800bc62:	b2c0      	uxtb	r0, r0
 800bc64:	4770      	bx	lr
 800bc66:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bc6a:	2b05      	cmp	r3, #5
 800bc6c:	d801      	bhi.n	800bc72 <__hexdig_fun+0x1a>
 800bc6e:	3847      	subs	r0, #71	@ 0x47
 800bc70:	e7f7      	b.n	800bc62 <__hexdig_fun+0xa>
 800bc72:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bc76:	2b05      	cmp	r3, #5
 800bc78:	d801      	bhi.n	800bc7e <__hexdig_fun+0x26>
 800bc7a:	3827      	subs	r0, #39	@ 0x27
 800bc7c:	e7f1      	b.n	800bc62 <__hexdig_fun+0xa>
 800bc7e:	2000      	movs	r0, #0
 800bc80:	4770      	bx	lr
	...

0800bc84 <__gethex>:
 800bc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc88:	b085      	sub	sp, #20
 800bc8a:	468a      	mov	sl, r1
 800bc8c:	9302      	str	r3, [sp, #8]
 800bc8e:	680b      	ldr	r3, [r1, #0]
 800bc90:	9001      	str	r0, [sp, #4]
 800bc92:	4690      	mov	r8, r2
 800bc94:	1c9c      	adds	r4, r3, #2
 800bc96:	46a1      	mov	r9, r4
 800bc98:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bc9c:	2830      	cmp	r0, #48	@ 0x30
 800bc9e:	d0fa      	beq.n	800bc96 <__gethex+0x12>
 800bca0:	eba9 0303 	sub.w	r3, r9, r3
 800bca4:	f1a3 0b02 	sub.w	fp, r3, #2
 800bca8:	f7ff ffd6 	bl	800bc58 <__hexdig_fun>
 800bcac:	4605      	mov	r5, r0
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	d168      	bne.n	800bd84 <__gethex+0x100>
 800bcb2:	49a0      	ldr	r1, [pc, #640]	@ (800bf34 <__gethex+0x2b0>)
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	4648      	mov	r0, r9
 800bcb8:	f7ff fefe 	bl	800bab8 <strncmp>
 800bcbc:	4607      	mov	r7, r0
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	d167      	bne.n	800bd92 <__gethex+0x10e>
 800bcc2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bcc6:	4626      	mov	r6, r4
 800bcc8:	f7ff ffc6 	bl	800bc58 <__hexdig_fun>
 800bccc:	2800      	cmp	r0, #0
 800bcce:	d062      	beq.n	800bd96 <__gethex+0x112>
 800bcd0:	4623      	mov	r3, r4
 800bcd2:	7818      	ldrb	r0, [r3, #0]
 800bcd4:	2830      	cmp	r0, #48	@ 0x30
 800bcd6:	4699      	mov	r9, r3
 800bcd8:	f103 0301 	add.w	r3, r3, #1
 800bcdc:	d0f9      	beq.n	800bcd2 <__gethex+0x4e>
 800bcde:	f7ff ffbb 	bl	800bc58 <__hexdig_fun>
 800bce2:	fab0 f580 	clz	r5, r0
 800bce6:	096d      	lsrs	r5, r5, #5
 800bce8:	f04f 0b01 	mov.w	fp, #1
 800bcec:	464a      	mov	r2, r9
 800bcee:	4616      	mov	r6, r2
 800bcf0:	3201      	adds	r2, #1
 800bcf2:	7830      	ldrb	r0, [r6, #0]
 800bcf4:	f7ff ffb0 	bl	800bc58 <__hexdig_fun>
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	d1f8      	bne.n	800bcee <__gethex+0x6a>
 800bcfc:	498d      	ldr	r1, [pc, #564]	@ (800bf34 <__gethex+0x2b0>)
 800bcfe:	2201      	movs	r2, #1
 800bd00:	4630      	mov	r0, r6
 800bd02:	f7ff fed9 	bl	800bab8 <strncmp>
 800bd06:	2800      	cmp	r0, #0
 800bd08:	d13f      	bne.n	800bd8a <__gethex+0x106>
 800bd0a:	b944      	cbnz	r4, 800bd1e <__gethex+0x9a>
 800bd0c:	1c74      	adds	r4, r6, #1
 800bd0e:	4622      	mov	r2, r4
 800bd10:	4616      	mov	r6, r2
 800bd12:	3201      	adds	r2, #1
 800bd14:	7830      	ldrb	r0, [r6, #0]
 800bd16:	f7ff ff9f 	bl	800bc58 <__hexdig_fun>
 800bd1a:	2800      	cmp	r0, #0
 800bd1c:	d1f8      	bne.n	800bd10 <__gethex+0x8c>
 800bd1e:	1ba4      	subs	r4, r4, r6
 800bd20:	00a7      	lsls	r7, r4, #2
 800bd22:	7833      	ldrb	r3, [r6, #0]
 800bd24:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bd28:	2b50      	cmp	r3, #80	@ 0x50
 800bd2a:	d13e      	bne.n	800bdaa <__gethex+0x126>
 800bd2c:	7873      	ldrb	r3, [r6, #1]
 800bd2e:	2b2b      	cmp	r3, #43	@ 0x2b
 800bd30:	d033      	beq.n	800bd9a <__gethex+0x116>
 800bd32:	2b2d      	cmp	r3, #45	@ 0x2d
 800bd34:	d034      	beq.n	800bda0 <__gethex+0x11c>
 800bd36:	1c71      	adds	r1, r6, #1
 800bd38:	2400      	movs	r4, #0
 800bd3a:	7808      	ldrb	r0, [r1, #0]
 800bd3c:	f7ff ff8c 	bl	800bc58 <__hexdig_fun>
 800bd40:	1e43      	subs	r3, r0, #1
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	2b18      	cmp	r3, #24
 800bd46:	d830      	bhi.n	800bdaa <__gethex+0x126>
 800bd48:	f1a0 0210 	sub.w	r2, r0, #16
 800bd4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bd50:	f7ff ff82 	bl	800bc58 <__hexdig_fun>
 800bd54:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800bd58:	fa5f fc8c 	uxtb.w	ip, ip
 800bd5c:	f1bc 0f18 	cmp.w	ip, #24
 800bd60:	f04f 030a 	mov.w	r3, #10
 800bd64:	d91e      	bls.n	800bda4 <__gethex+0x120>
 800bd66:	b104      	cbz	r4, 800bd6a <__gethex+0xe6>
 800bd68:	4252      	negs	r2, r2
 800bd6a:	4417      	add	r7, r2
 800bd6c:	f8ca 1000 	str.w	r1, [sl]
 800bd70:	b1ed      	cbz	r5, 800bdae <__gethex+0x12a>
 800bd72:	f1bb 0f00 	cmp.w	fp, #0
 800bd76:	bf0c      	ite	eq
 800bd78:	2506      	moveq	r5, #6
 800bd7a:	2500      	movne	r5, #0
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	b005      	add	sp, #20
 800bd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd84:	2500      	movs	r5, #0
 800bd86:	462c      	mov	r4, r5
 800bd88:	e7b0      	b.n	800bcec <__gethex+0x68>
 800bd8a:	2c00      	cmp	r4, #0
 800bd8c:	d1c7      	bne.n	800bd1e <__gethex+0x9a>
 800bd8e:	4627      	mov	r7, r4
 800bd90:	e7c7      	b.n	800bd22 <__gethex+0x9e>
 800bd92:	464e      	mov	r6, r9
 800bd94:	462f      	mov	r7, r5
 800bd96:	2501      	movs	r5, #1
 800bd98:	e7c3      	b.n	800bd22 <__gethex+0x9e>
 800bd9a:	2400      	movs	r4, #0
 800bd9c:	1cb1      	adds	r1, r6, #2
 800bd9e:	e7cc      	b.n	800bd3a <__gethex+0xb6>
 800bda0:	2401      	movs	r4, #1
 800bda2:	e7fb      	b.n	800bd9c <__gethex+0x118>
 800bda4:	fb03 0002 	mla	r0, r3, r2, r0
 800bda8:	e7ce      	b.n	800bd48 <__gethex+0xc4>
 800bdaa:	4631      	mov	r1, r6
 800bdac:	e7de      	b.n	800bd6c <__gethex+0xe8>
 800bdae:	eba6 0309 	sub.w	r3, r6, r9
 800bdb2:	3b01      	subs	r3, #1
 800bdb4:	4629      	mov	r1, r5
 800bdb6:	2b07      	cmp	r3, #7
 800bdb8:	dc0a      	bgt.n	800bdd0 <__gethex+0x14c>
 800bdba:	9801      	ldr	r0, [sp, #4]
 800bdbc:	f7fd ff82 	bl	8009cc4 <_Balloc>
 800bdc0:	4604      	mov	r4, r0
 800bdc2:	b940      	cbnz	r0, 800bdd6 <__gethex+0x152>
 800bdc4:	4b5c      	ldr	r3, [pc, #368]	@ (800bf38 <__gethex+0x2b4>)
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	21e4      	movs	r1, #228	@ 0xe4
 800bdca:	485c      	ldr	r0, [pc, #368]	@ (800bf3c <__gethex+0x2b8>)
 800bdcc:	f7ff fec0 	bl	800bb50 <__assert_func>
 800bdd0:	3101      	adds	r1, #1
 800bdd2:	105b      	asrs	r3, r3, #1
 800bdd4:	e7ef      	b.n	800bdb6 <__gethex+0x132>
 800bdd6:	f100 0a14 	add.w	sl, r0, #20
 800bdda:	2300      	movs	r3, #0
 800bddc:	4655      	mov	r5, sl
 800bdde:	469b      	mov	fp, r3
 800bde0:	45b1      	cmp	r9, r6
 800bde2:	d337      	bcc.n	800be54 <__gethex+0x1d0>
 800bde4:	f845 bb04 	str.w	fp, [r5], #4
 800bde8:	eba5 050a 	sub.w	r5, r5, sl
 800bdec:	10ad      	asrs	r5, r5, #2
 800bdee:	6125      	str	r5, [r4, #16]
 800bdf0:	4658      	mov	r0, fp
 800bdf2:	f7fe f859 	bl	8009ea8 <__hi0bits>
 800bdf6:	016d      	lsls	r5, r5, #5
 800bdf8:	f8d8 6000 	ldr.w	r6, [r8]
 800bdfc:	1a2d      	subs	r5, r5, r0
 800bdfe:	42b5      	cmp	r5, r6
 800be00:	dd54      	ble.n	800beac <__gethex+0x228>
 800be02:	1bad      	subs	r5, r5, r6
 800be04:	4629      	mov	r1, r5
 800be06:	4620      	mov	r0, r4
 800be08:	f7fe fbed 	bl	800a5e6 <__any_on>
 800be0c:	4681      	mov	r9, r0
 800be0e:	b178      	cbz	r0, 800be30 <__gethex+0x1ac>
 800be10:	1e6b      	subs	r3, r5, #1
 800be12:	1159      	asrs	r1, r3, #5
 800be14:	f003 021f 	and.w	r2, r3, #31
 800be18:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800be1c:	f04f 0901 	mov.w	r9, #1
 800be20:	fa09 f202 	lsl.w	r2, r9, r2
 800be24:	420a      	tst	r2, r1
 800be26:	d003      	beq.n	800be30 <__gethex+0x1ac>
 800be28:	454b      	cmp	r3, r9
 800be2a:	dc36      	bgt.n	800be9a <__gethex+0x216>
 800be2c:	f04f 0902 	mov.w	r9, #2
 800be30:	4629      	mov	r1, r5
 800be32:	4620      	mov	r0, r4
 800be34:	f7ff febe 	bl	800bbb4 <rshift>
 800be38:	442f      	add	r7, r5
 800be3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be3e:	42bb      	cmp	r3, r7
 800be40:	da42      	bge.n	800bec8 <__gethex+0x244>
 800be42:	9801      	ldr	r0, [sp, #4]
 800be44:	4621      	mov	r1, r4
 800be46:	f7fd ff7d 	bl	8009d44 <_Bfree>
 800be4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be4c:	2300      	movs	r3, #0
 800be4e:	6013      	str	r3, [r2, #0]
 800be50:	25a3      	movs	r5, #163	@ 0xa3
 800be52:	e793      	b.n	800bd7c <__gethex+0xf8>
 800be54:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800be58:	2a2e      	cmp	r2, #46	@ 0x2e
 800be5a:	d012      	beq.n	800be82 <__gethex+0x1fe>
 800be5c:	2b20      	cmp	r3, #32
 800be5e:	d104      	bne.n	800be6a <__gethex+0x1e6>
 800be60:	f845 bb04 	str.w	fp, [r5], #4
 800be64:	f04f 0b00 	mov.w	fp, #0
 800be68:	465b      	mov	r3, fp
 800be6a:	7830      	ldrb	r0, [r6, #0]
 800be6c:	9303      	str	r3, [sp, #12]
 800be6e:	f7ff fef3 	bl	800bc58 <__hexdig_fun>
 800be72:	9b03      	ldr	r3, [sp, #12]
 800be74:	f000 000f 	and.w	r0, r0, #15
 800be78:	4098      	lsls	r0, r3
 800be7a:	ea4b 0b00 	orr.w	fp, fp, r0
 800be7e:	3304      	adds	r3, #4
 800be80:	e7ae      	b.n	800bde0 <__gethex+0x15c>
 800be82:	45b1      	cmp	r9, r6
 800be84:	d8ea      	bhi.n	800be5c <__gethex+0x1d8>
 800be86:	492b      	ldr	r1, [pc, #172]	@ (800bf34 <__gethex+0x2b0>)
 800be88:	9303      	str	r3, [sp, #12]
 800be8a:	2201      	movs	r2, #1
 800be8c:	4630      	mov	r0, r6
 800be8e:	f7ff fe13 	bl	800bab8 <strncmp>
 800be92:	9b03      	ldr	r3, [sp, #12]
 800be94:	2800      	cmp	r0, #0
 800be96:	d1e1      	bne.n	800be5c <__gethex+0x1d8>
 800be98:	e7a2      	b.n	800bde0 <__gethex+0x15c>
 800be9a:	1ea9      	subs	r1, r5, #2
 800be9c:	4620      	mov	r0, r4
 800be9e:	f7fe fba2 	bl	800a5e6 <__any_on>
 800bea2:	2800      	cmp	r0, #0
 800bea4:	d0c2      	beq.n	800be2c <__gethex+0x1a8>
 800bea6:	f04f 0903 	mov.w	r9, #3
 800beaa:	e7c1      	b.n	800be30 <__gethex+0x1ac>
 800beac:	da09      	bge.n	800bec2 <__gethex+0x23e>
 800beae:	1b75      	subs	r5, r6, r5
 800beb0:	4621      	mov	r1, r4
 800beb2:	9801      	ldr	r0, [sp, #4]
 800beb4:	462a      	mov	r2, r5
 800beb6:	f7fe f95d 	bl	800a174 <__lshift>
 800beba:	1b7f      	subs	r7, r7, r5
 800bebc:	4604      	mov	r4, r0
 800bebe:	f100 0a14 	add.w	sl, r0, #20
 800bec2:	f04f 0900 	mov.w	r9, #0
 800bec6:	e7b8      	b.n	800be3a <__gethex+0x1b6>
 800bec8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800becc:	42bd      	cmp	r5, r7
 800bece:	dd6f      	ble.n	800bfb0 <__gethex+0x32c>
 800bed0:	1bed      	subs	r5, r5, r7
 800bed2:	42ae      	cmp	r6, r5
 800bed4:	dc34      	bgt.n	800bf40 <__gethex+0x2bc>
 800bed6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800beda:	2b02      	cmp	r3, #2
 800bedc:	d022      	beq.n	800bf24 <__gethex+0x2a0>
 800bede:	2b03      	cmp	r3, #3
 800bee0:	d024      	beq.n	800bf2c <__gethex+0x2a8>
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d115      	bne.n	800bf12 <__gethex+0x28e>
 800bee6:	42ae      	cmp	r6, r5
 800bee8:	d113      	bne.n	800bf12 <__gethex+0x28e>
 800beea:	2e01      	cmp	r6, #1
 800beec:	d10b      	bne.n	800bf06 <__gethex+0x282>
 800beee:	9a02      	ldr	r2, [sp, #8]
 800bef0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bef4:	6013      	str	r3, [r2, #0]
 800bef6:	2301      	movs	r3, #1
 800bef8:	6123      	str	r3, [r4, #16]
 800befa:	f8ca 3000 	str.w	r3, [sl]
 800befe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf00:	2562      	movs	r5, #98	@ 0x62
 800bf02:	601c      	str	r4, [r3, #0]
 800bf04:	e73a      	b.n	800bd7c <__gethex+0xf8>
 800bf06:	1e71      	subs	r1, r6, #1
 800bf08:	4620      	mov	r0, r4
 800bf0a:	f7fe fb6c 	bl	800a5e6 <__any_on>
 800bf0e:	2800      	cmp	r0, #0
 800bf10:	d1ed      	bne.n	800beee <__gethex+0x26a>
 800bf12:	9801      	ldr	r0, [sp, #4]
 800bf14:	4621      	mov	r1, r4
 800bf16:	f7fd ff15 	bl	8009d44 <_Bfree>
 800bf1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	6013      	str	r3, [r2, #0]
 800bf20:	2550      	movs	r5, #80	@ 0x50
 800bf22:	e72b      	b.n	800bd7c <__gethex+0xf8>
 800bf24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d1f3      	bne.n	800bf12 <__gethex+0x28e>
 800bf2a:	e7e0      	b.n	800beee <__gethex+0x26a>
 800bf2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d1dd      	bne.n	800beee <__gethex+0x26a>
 800bf32:	e7ee      	b.n	800bf12 <__gethex+0x28e>
 800bf34:	0800c948 	.word	0x0800c948
 800bf38:	0800c7dd 	.word	0x0800c7dd
 800bf3c:	0800caf6 	.word	0x0800caf6
 800bf40:	1e6f      	subs	r7, r5, #1
 800bf42:	f1b9 0f00 	cmp.w	r9, #0
 800bf46:	d130      	bne.n	800bfaa <__gethex+0x326>
 800bf48:	b127      	cbz	r7, 800bf54 <__gethex+0x2d0>
 800bf4a:	4639      	mov	r1, r7
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	f7fe fb4a 	bl	800a5e6 <__any_on>
 800bf52:	4681      	mov	r9, r0
 800bf54:	117a      	asrs	r2, r7, #5
 800bf56:	2301      	movs	r3, #1
 800bf58:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bf5c:	f007 071f 	and.w	r7, r7, #31
 800bf60:	40bb      	lsls	r3, r7
 800bf62:	4213      	tst	r3, r2
 800bf64:	4629      	mov	r1, r5
 800bf66:	4620      	mov	r0, r4
 800bf68:	bf18      	it	ne
 800bf6a:	f049 0902 	orrne.w	r9, r9, #2
 800bf6e:	f7ff fe21 	bl	800bbb4 <rshift>
 800bf72:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bf76:	1b76      	subs	r6, r6, r5
 800bf78:	2502      	movs	r5, #2
 800bf7a:	f1b9 0f00 	cmp.w	r9, #0
 800bf7e:	d047      	beq.n	800c010 <__gethex+0x38c>
 800bf80:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf84:	2b02      	cmp	r3, #2
 800bf86:	d015      	beq.n	800bfb4 <__gethex+0x330>
 800bf88:	2b03      	cmp	r3, #3
 800bf8a:	d017      	beq.n	800bfbc <__gethex+0x338>
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d109      	bne.n	800bfa4 <__gethex+0x320>
 800bf90:	f019 0f02 	tst.w	r9, #2
 800bf94:	d006      	beq.n	800bfa4 <__gethex+0x320>
 800bf96:	f8da 3000 	ldr.w	r3, [sl]
 800bf9a:	ea49 0903 	orr.w	r9, r9, r3
 800bf9e:	f019 0f01 	tst.w	r9, #1
 800bfa2:	d10e      	bne.n	800bfc2 <__gethex+0x33e>
 800bfa4:	f045 0510 	orr.w	r5, r5, #16
 800bfa8:	e032      	b.n	800c010 <__gethex+0x38c>
 800bfaa:	f04f 0901 	mov.w	r9, #1
 800bfae:	e7d1      	b.n	800bf54 <__gethex+0x2d0>
 800bfb0:	2501      	movs	r5, #1
 800bfb2:	e7e2      	b.n	800bf7a <__gethex+0x2f6>
 800bfb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfb6:	f1c3 0301 	rsb	r3, r3, #1
 800bfba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bfbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d0f0      	beq.n	800bfa4 <__gethex+0x320>
 800bfc2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bfc6:	f104 0314 	add.w	r3, r4, #20
 800bfca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bfce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bfd2:	f04f 0c00 	mov.w	ip, #0
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfdc:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800bfe0:	d01b      	beq.n	800c01a <__gethex+0x396>
 800bfe2:	3201      	adds	r2, #1
 800bfe4:	6002      	str	r2, [r0, #0]
 800bfe6:	2d02      	cmp	r5, #2
 800bfe8:	f104 0314 	add.w	r3, r4, #20
 800bfec:	d13c      	bne.n	800c068 <__gethex+0x3e4>
 800bfee:	f8d8 2000 	ldr.w	r2, [r8]
 800bff2:	3a01      	subs	r2, #1
 800bff4:	42b2      	cmp	r2, r6
 800bff6:	d109      	bne.n	800c00c <__gethex+0x388>
 800bff8:	1171      	asrs	r1, r6, #5
 800bffa:	2201      	movs	r2, #1
 800bffc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c000:	f006 061f 	and.w	r6, r6, #31
 800c004:	fa02 f606 	lsl.w	r6, r2, r6
 800c008:	421e      	tst	r6, r3
 800c00a:	d13a      	bne.n	800c082 <__gethex+0x3fe>
 800c00c:	f045 0520 	orr.w	r5, r5, #32
 800c010:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c012:	601c      	str	r4, [r3, #0]
 800c014:	9b02      	ldr	r3, [sp, #8]
 800c016:	601f      	str	r7, [r3, #0]
 800c018:	e6b0      	b.n	800bd7c <__gethex+0xf8>
 800c01a:	4299      	cmp	r1, r3
 800c01c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c020:	d8d9      	bhi.n	800bfd6 <__gethex+0x352>
 800c022:	68a3      	ldr	r3, [r4, #8]
 800c024:	459b      	cmp	fp, r3
 800c026:	db17      	blt.n	800c058 <__gethex+0x3d4>
 800c028:	6861      	ldr	r1, [r4, #4]
 800c02a:	9801      	ldr	r0, [sp, #4]
 800c02c:	3101      	adds	r1, #1
 800c02e:	f7fd fe49 	bl	8009cc4 <_Balloc>
 800c032:	4681      	mov	r9, r0
 800c034:	b918      	cbnz	r0, 800c03e <__gethex+0x3ba>
 800c036:	4b1a      	ldr	r3, [pc, #104]	@ (800c0a0 <__gethex+0x41c>)
 800c038:	4602      	mov	r2, r0
 800c03a:	2184      	movs	r1, #132	@ 0x84
 800c03c:	e6c5      	b.n	800bdca <__gethex+0x146>
 800c03e:	6922      	ldr	r2, [r4, #16]
 800c040:	3202      	adds	r2, #2
 800c042:	f104 010c 	add.w	r1, r4, #12
 800c046:	0092      	lsls	r2, r2, #2
 800c048:	300c      	adds	r0, #12
 800c04a:	f7ff fd69 	bl	800bb20 <memcpy>
 800c04e:	4621      	mov	r1, r4
 800c050:	9801      	ldr	r0, [sp, #4]
 800c052:	f7fd fe77 	bl	8009d44 <_Bfree>
 800c056:	464c      	mov	r4, r9
 800c058:	6923      	ldr	r3, [r4, #16]
 800c05a:	1c5a      	adds	r2, r3, #1
 800c05c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c060:	6122      	str	r2, [r4, #16]
 800c062:	2201      	movs	r2, #1
 800c064:	615a      	str	r2, [r3, #20]
 800c066:	e7be      	b.n	800bfe6 <__gethex+0x362>
 800c068:	6922      	ldr	r2, [r4, #16]
 800c06a:	455a      	cmp	r2, fp
 800c06c:	dd0b      	ble.n	800c086 <__gethex+0x402>
 800c06e:	2101      	movs	r1, #1
 800c070:	4620      	mov	r0, r4
 800c072:	f7ff fd9f 	bl	800bbb4 <rshift>
 800c076:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c07a:	3701      	adds	r7, #1
 800c07c:	42bb      	cmp	r3, r7
 800c07e:	f6ff aee0 	blt.w	800be42 <__gethex+0x1be>
 800c082:	2501      	movs	r5, #1
 800c084:	e7c2      	b.n	800c00c <__gethex+0x388>
 800c086:	f016 061f 	ands.w	r6, r6, #31
 800c08a:	d0fa      	beq.n	800c082 <__gethex+0x3fe>
 800c08c:	4453      	add	r3, sl
 800c08e:	f1c6 0620 	rsb	r6, r6, #32
 800c092:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c096:	f7fd ff07 	bl	8009ea8 <__hi0bits>
 800c09a:	42b0      	cmp	r0, r6
 800c09c:	dbe7      	blt.n	800c06e <__gethex+0x3ea>
 800c09e:	e7f0      	b.n	800c082 <__gethex+0x3fe>
 800c0a0:	0800c7dd 	.word	0x0800c7dd

0800c0a4 <L_shift>:
 800c0a4:	f1c2 0208 	rsb	r2, r2, #8
 800c0a8:	0092      	lsls	r2, r2, #2
 800c0aa:	b570      	push	{r4, r5, r6, lr}
 800c0ac:	f1c2 0620 	rsb	r6, r2, #32
 800c0b0:	6843      	ldr	r3, [r0, #4]
 800c0b2:	6804      	ldr	r4, [r0, #0]
 800c0b4:	fa03 f506 	lsl.w	r5, r3, r6
 800c0b8:	432c      	orrs	r4, r5
 800c0ba:	40d3      	lsrs	r3, r2
 800c0bc:	6004      	str	r4, [r0, #0]
 800c0be:	f840 3f04 	str.w	r3, [r0, #4]!
 800c0c2:	4288      	cmp	r0, r1
 800c0c4:	d3f4      	bcc.n	800c0b0 <L_shift+0xc>
 800c0c6:	bd70      	pop	{r4, r5, r6, pc}

0800c0c8 <__match>:
 800c0c8:	b530      	push	{r4, r5, lr}
 800c0ca:	6803      	ldr	r3, [r0, #0]
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0d2:	b914      	cbnz	r4, 800c0da <__match+0x12>
 800c0d4:	6003      	str	r3, [r0, #0]
 800c0d6:	2001      	movs	r0, #1
 800c0d8:	bd30      	pop	{r4, r5, pc}
 800c0da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c0e2:	2d19      	cmp	r5, #25
 800c0e4:	bf98      	it	ls
 800c0e6:	3220      	addls	r2, #32
 800c0e8:	42a2      	cmp	r2, r4
 800c0ea:	d0f0      	beq.n	800c0ce <__match+0x6>
 800c0ec:	2000      	movs	r0, #0
 800c0ee:	e7f3      	b.n	800c0d8 <__match+0x10>

0800c0f0 <__hexnan>:
 800c0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f4:	680b      	ldr	r3, [r1, #0]
 800c0f6:	6801      	ldr	r1, [r0, #0]
 800c0f8:	115e      	asrs	r6, r3, #5
 800c0fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c0fe:	f013 031f 	ands.w	r3, r3, #31
 800c102:	b087      	sub	sp, #28
 800c104:	bf18      	it	ne
 800c106:	3604      	addne	r6, #4
 800c108:	2500      	movs	r5, #0
 800c10a:	1f37      	subs	r7, r6, #4
 800c10c:	4682      	mov	sl, r0
 800c10e:	4690      	mov	r8, r2
 800c110:	9301      	str	r3, [sp, #4]
 800c112:	f846 5c04 	str.w	r5, [r6, #-4]
 800c116:	46b9      	mov	r9, r7
 800c118:	463c      	mov	r4, r7
 800c11a:	9502      	str	r5, [sp, #8]
 800c11c:	46ab      	mov	fp, r5
 800c11e:	784a      	ldrb	r2, [r1, #1]
 800c120:	1c4b      	adds	r3, r1, #1
 800c122:	9303      	str	r3, [sp, #12]
 800c124:	b342      	cbz	r2, 800c178 <__hexnan+0x88>
 800c126:	4610      	mov	r0, r2
 800c128:	9105      	str	r1, [sp, #20]
 800c12a:	9204      	str	r2, [sp, #16]
 800c12c:	f7ff fd94 	bl	800bc58 <__hexdig_fun>
 800c130:	2800      	cmp	r0, #0
 800c132:	d151      	bne.n	800c1d8 <__hexnan+0xe8>
 800c134:	9a04      	ldr	r2, [sp, #16]
 800c136:	9905      	ldr	r1, [sp, #20]
 800c138:	2a20      	cmp	r2, #32
 800c13a:	d818      	bhi.n	800c16e <__hexnan+0x7e>
 800c13c:	9b02      	ldr	r3, [sp, #8]
 800c13e:	459b      	cmp	fp, r3
 800c140:	dd13      	ble.n	800c16a <__hexnan+0x7a>
 800c142:	454c      	cmp	r4, r9
 800c144:	d206      	bcs.n	800c154 <__hexnan+0x64>
 800c146:	2d07      	cmp	r5, #7
 800c148:	dc04      	bgt.n	800c154 <__hexnan+0x64>
 800c14a:	462a      	mov	r2, r5
 800c14c:	4649      	mov	r1, r9
 800c14e:	4620      	mov	r0, r4
 800c150:	f7ff ffa8 	bl	800c0a4 <L_shift>
 800c154:	4544      	cmp	r4, r8
 800c156:	d952      	bls.n	800c1fe <__hexnan+0x10e>
 800c158:	2300      	movs	r3, #0
 800c15a:	f1a4 0904 	sub.w	r9, r4, #4
 800c15e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c162:	f8cd b008 	str.w	fp, [sp, #8]
 800c166:	464c      	mov	r4, r9
 800c168:	461d      	mov	r5, r3
 800c16a:	9903      	ldr	r1, [sp, #12]
 800c16c:	e7d7      	b.n	800c11e <__hexnan+0x2e>
 800c16e:	2a29      	cmp	r2, #41	@ 0x29
 800c170:	d157      	bne.n	800c222 <__hexnan+0x132>
 800c172:	3102      	adds	r1, #2
 800c174:	f8ca 1000 	str.w	r1, [sl]
 800c178:	f1bb 0f00 	cmp.w	fp, #0
 800c17c:	d051      	beq.n	800c222 <__hexnan+0x132>
 800c17e:	454c      	cmp	r4, r9
 800c180:	d206      	bcs.n	800c190 <__hexnan+0xa0>
 800c182:	2d07      	cmp	r5, #7
 800c184:	dc04      	bgt.n	800c190 <__hexnan+0xa0>
 800c186:	462a      	mov	r2, r5
 800c188:	4649      	mov	r1, r9
 800c18a:	4620      	mov	r0, r4
 800c18c:	f7ff ff8a 	bl	800c0a4 <L_shift>
 800c190:	4544      	cmp	r4, r8
 800c192:	d936      	bls.n	800c202 <__hexnan+0x112>
 800c194:	f1a8 0204 	sub.w	r2, r8, #4
 800c198:	4623      	mov	r3, r4
 800c19a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c19e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c1a2:	429f      	cmp	r7, r3
 800c1a4:	d2f9      	bcs.n	800c19a <__hexnan+0xaa>
 800c1a6:	1b3b      	subs	r3, r7, r4
 800c1a8:	f023 0303 	bic.w	r3, r3, #3
 800c1ac:	3304      	adds	r3, #4
 800c1ae:	3401      	adds	r4, #1
 800c1b0:	3e03      	subs	r6, #3
 800c1b2:	42b4      	cmp	r4, r6
 800c1b4:	bf88      	it	hi
 800c1b6:	2304      	movhi	r3, #4
 800c1b8:	4443      	add	r3, r8
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f843 2b04 	str.w	r2, [r3], #4
 800c1c0:	429f      	cmp	r7, r3
 800c1c2:	d2fb      	bcs.n	800c1bc <__hexnan+0xcc>
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	b91b      	cbnz	r3, 800c1d0 <__hexnan+0xe0>
 800c1c8:	4547      	cmp	r7, r8
 800c1ca:	d128      	bne.n	800c21e <__hexnan+0x12e>
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	603b      	str	r3, [r7, #0]
 800c1d0:	2005      	movs	r0, #5
 800c1d2:	b007      	add	sp, #28
 800c1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d8:	3501      	adds	r5, #1
 800c1da:	2d08      	cmp	r5, #8
 800c1dc:	f10b 0b01 	add.w	fp, fp, #1
 800c1e0:	dd06      	ble.n	800c1f0 <__hexnan+0x100>
 800c1e2:	4544      	cmp	r4, r8
 800c1e4:	d9c1      	bls.n	800c16a <__hexnan+0x7a>
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c1ec:	2501      	movs	r5, #1
 800c1ee:	3c04      	subs	r4, #4
 800c1f0:	6822      	ldr	r2, [r4, #0]
 800c1f2:	f000 000f 	and.w	r0, r0, #15
 800c1f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c1fa:	6020      	str	r0, [r4, #0]
 800c1fc:	e7b5      	b.n	800c16a <__hexnan+0x7a>
 800c1fe:	2508      	movs	r5, #8
 800c200:	e7b3      	b.n	800c16a <__hexnan+0x7a>
 800c202:	9b01      	ldr	r3, [sp, #4]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d0dd      	beq.n	800c1c4 <__hexnan+0xd4>
 800c208:	f1c3 0320 	rsb	r3, r3, #32
 800c20c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c210:	40da      	lsrs	r2, r3
 800c212:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c216:	4013      	ands	r3, r2
 800c218:	f846 3c04 	str.w	r3, [r6, #-4]
 800c21c:	e7d2      	b.n	800c1c4 <__hexnan+0xd4>
 800c21e:	3f04      	subs	r7, #4
 800c220:	e7d0      	b.n	800c1c4 <__hexnan+0xd4>
 800c222:	2004      	movs	r0, #4
 800c224:	e7d5      	b.n	800c1d2 <__hexnan+0xe2>

0800c226 <__ascii_mbtowc>:
 800c226:	b082      	sub	sp, #8
 800c228:	b901      	cbnz	r1, 800c22c <__ascii_mbtowc+0x6>
 800c22a:	a901      	add	r1, sp, #4
 800c22c:	b142      	cbz	r2, 800c240 <__ascii_mbtowc+0x1a>
 800c22e:	b14b      	cbz	r3, 800c244 <__ascii_mbtowc+0x1e>
 800c230:	7813      	ldrb	r3, [r2, #0]
 800c232:	600b      	str	r3, [r1, #0]
 800c234:	7812      	ldrb	r2, [r2, #0]
 800c236:	1e10      	subs	r0, r2, #0
 800c238:	bf18      	it	ne
 800c23a:	2001      	movne	r0, #1
 800c23c:	b002      	add	sp, #8
 800c23e:	4770      	bx	lr
 800c240:	4610      	mov	r0, r2
 800c242:	e7fb      	b.n	800c23c <__ascii_mbtowc+0x16>
 800c244:	f06f 0001 	mvn.w	r0, #1
 800c248:	e7f8      	b.n	800c23c <__ascii_mbtowc+0x16>

0800c24a <_realloc_r>:
 800c24a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c24e:	4680      	mov	r8, r0
 800c250:	4615      	mov	r5, r2
 800c252:	460c      	mov	r4, r1
 800c254:	b921      	cbnz	r1, 800c260 <_realloc_r+0x16>
 800c256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c25a:	4611      	mov	r1, r2
 800c25c:	f7fb bce4 	b.w	8007c28 <_malloc_r>
 800c260:	b92a      	cbnz	r2, 800c26e <_realloc_r+0x24>
 800c262:	f7fd fce5 	bl	8009c30 <_free_r>
 800c266:	2400      	movs	r4, #0
 800c268:	4620      	mov	r0, r4
 800c26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c26e:	f000 f840 	bl	800c2f2 <_malloc_usable_size_r>
 800c272:	4285      	cmp	r5, r0
 800c274:	4606      	mov	r6, r0
 800c276:	d802      	bhi.n	800c27e <_realloc_r+0x34>
 800c278:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c27c:	d8f4      	bhi.n	800c268 <_realloc_r+0x1e>
 800c27e:	4629      	mov	r1, r5
 800c280:	4640      	mov	r0, r8
 800c282:	f7fb fcd1 	bl	8007c28 <_malloc_r>
 800c286:	4607      	mov	r7, r0
 800c288:	2800      	cmp	r0, #0
 800c28a:	d0ec      	beq.n	800c266 <_realloc_r+0x1c>
 800c28c:	42b5      	cmp	r5, r6
 800c28e:	462a      	mov	r2, r5
 800c290:	4621      	mov	r1, r4
 800c292:	bf28      	it	cs
 800c294:	4632      	movcs	r2, r6
 800c296:	f7ff fc43 	bl	800bb20 <memcpy>
 800c29a:	4621      	mov	r1, r4
 800c29c:	4640      	mov	r0, r8
 800c29e:	f7fd fcc7 	bl	8009c30 <_free_r>
 800c2a2:	463c      	mov	r4, r7
 800c2a4:	e7e0      	b.n	800c268 <_realloc_r+0x1e>

0800c2a6 <__ascii_wctomb>:
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	4608      	mov	r0, r1
 800c2aa:	b141      	cbz	r1, 800c2be <__ascii_wctomb+0x18>
 800c2ac:	2aff      	cmp	r2, #255	@ 0xff
 800c2ae:	d904      	bls.n	800c2ba <__ascii_wctomb+0x14>
 800c2b0:	228a      	movs	r2, #138	@ 0x8a
 800c2b2:	601a      	str	r2, [r3, #0]
 800c2b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c2b8:	4770      	bx	lr
 800c2ba:	700a      	strb	r2, [r1, #0]
 800c2bc:	2001      	movs	r0, #1
 800c2be:	4770      	bx	lr

0800c2c0 <fiprintf>:
 800c2c0:	b40e      	push	{r1, r2, r3}
 800c2c2:	b503      	push	{r0, r1, lr}
 800c2c4:	4601      	mov	r1, r0
 800c2c6:	ab03      	add	r3, sp, #12
 800c2c8:	4805      	ldr	r0, [pc, #20]	@ (800c2e0 <fiprintf+0x20>)
 800c2ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2ce:	6800      	ldr	r0, [r0, #0]
 800c2d0:	9301      	str	r3, [sp, #4]
 800c2d2:	f7ff f9b1 	bl	800b638 <_vfiprintf_r>
 800c2d6:	b002      	add	sp, #8
 800c2d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2dc:	b003      	add	sp, #12
 800c2de:	4770      	bx	lr
 800c2e0:	20000018 	.word	0x20000018

0800c2e4 <abort>:
 800c2e4:	b508      	push	{r3, lr}
 800c2e6:	2006      	movs	r0, #6
 800c2e8:	f000 f834 	bl	800c354 <raise>
 800c2ec:	2001      	movs	r0, #1
 800c2ee:	f7f5 ff79 	bl	80021e4 <_exit>

0800c2f2 <_malloc_usable_size_r>:
 800c2f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2f6:	1f18      	subs	r0, r3, #4
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	bfbc      	itt	lt
 800c2fc:	580b      	ldrlt	r3, [r1, r0]
 800c2fe:	18c0      	addlt	r0, r0, r3
 800c300:	4770      	bx	lr

0800c302 <_raise_r>:
 800c302:	291f      	cmp	r1, #31
 800c304:	b538      	push	{r3, r4, r5, lr}
 800c306:	4605      	mov	r5, r0
 800c308:	460c      	mov	r4, r1
 800c30a:	d904      	bls.n	800c316 <_raise_r+0x14>
 800c30c:	2316      	movs	r3, #22
 800c30e:	6003      	str	r3, [r0, #0]
 800c310:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c314:	bd38      	pop	{r3, r4, r5, pc}
 800c316:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c318:	b112      	cbz	r2, 800c320 <_raise_r+0x1e>
 800c31a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c31e:	b94b      	cbnz	r3, 800c334 <_raise_r+0x32>
 800c320:	4628      	mov	r0, r5
 800c322:	f000 f831 	bl	800c388 <_getpid_r>
 800c326:	4622      	mov	r2, r4
 800c328:	4601      	mov	r1, r0
 800c32a:	4628      	mov	r0, r5
 800c32c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c330:	f000 b818 	b.w	800c364 <_kill_r>
 800c334:	2b01      	cmp	r3, #1
 800c336:	d00a      	beq.n	800c34e <_raise_r+0x4c>
 800c338:	1c59      	adds	r1, r3, #1
 800c33a:	d103      	bne.n	800c344 <_raise_r+0x42>
 800c33c:	2316      	movs	r3, #22
 800c33e:	6003      	str	r3, [r0, #0]
 800c340:	2001      	movs	r0, #1
 800c342:	e7e7      	b.n	800c314 <_raise_r+0x12>
 800c344:	2100      	movs	r1, #0
 800c346:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c34a:	4620      	mov	r0, r4
 800c34c:	4798      	blx	r3
 800c34e:	2000      	movs	r0, #0
 800c350:	e7e0      	b.n	800c314 <_raise_r+0x12>
	...

0800c354 <raise>:
 800c354:	4b02      	ldr	r3, [pc, #8]	@ (800c360 <raise+0xc>)
 800c356:	4601      	mov	r1, r0
 800c358:	6818      	ldr	r0, [r3, #0]
 800c35a:	f7ff bfd2 	b.w	800c302 <_raise_r>
 800c35e:	bf00      	nop
 800c360:	20000018 	.word	0x20000018

0800c364 <_kill_r>:
 800c364:	b538      	push	{r3, r4, r5, lr}
 800c366:	4d07      	ldr	r5, [pc, #28]	@ (800c384 <_kill_r+0x20>)
 800c368:	2300      	movs	r3, #0
 800c36a:	4604      	mov	r4, r0
 800c36c:	4608      	mov	r0, r1
 800c36e:	4611      	mov	r1, r2
 800c370:	602b      	str	r3, [r5, #0]
 800c372:	f7f5 ff27 	bl	80021c4 <_kill>
 800c376:	1c43      	adds	r3, r0, #1
 800c378:	d102      	bne.n	800c380 <_kill_r+0x1c>
 800c37a:	682b      	ldr	r3, [r5, #0]
 800c37c:	b103      	cbz	r3, 800c380 <_kill_r+0x1c>
 800c37e:	6023      	str	r3, [r4, #0]
 800c380:	bd38      	pop	{r3, r4, r5, pc}
 800c382:	bf00      	nop
 800c384:	200005a4 	.word	0x200005a4

0800c388 <_getpid_r>:
 800c388:	f7f5 bf14 	b.w	80021b4 <_getpid>

0800c38c <_init>:
 800c38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c38e:	bf00      	nop
 800c390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c392:	bc08      	pop	{r3}
 800c394:	469e      	mov	lr, r3
 800c396:	4770      	bx	lr

0800c398 <_fini>:
 800c398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c39a:	bf00      	nop
 800c39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c39e:	bc08      	pop	{r3}
 800c3a0:	469e      	mov	lr, r3
 800c3a2:	4770      	bx	lr
