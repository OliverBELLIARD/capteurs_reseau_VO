
capteurs_reseaux_VO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb18  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  0800cce8  0800cce8  0000dce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4d0  0800d4d0  0000f1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d4d0  0800d4d0  0000e4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4d8  0800d4d8  0000f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4d8  0800d4d8  0000e4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d4dc  0800d4dc  0000e4dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800d4e0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  200001d4  0800d6b4  0000f1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  0800d6b4  0000f578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001595f  00000000  00000000  0000f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000360c  00000000  00000000  00024b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  00028170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000efb  00000000  00000000  000294a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025363  00000000  00000000  0002a3a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019648  00000000  00000000  0004f706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8d8d  00000000  00000000  00068d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141adb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006660  00000000  00000000  00141b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00148180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ccd0 	.word	0x0800ccd0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800ccd0 	.word	0x0800ccd0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <BMP280_Check_id>:
 * response matches the expected ID. Prints the ID if successful.
 *
 * @return int Returns EXIT_SUCCESS if ID is read successfully, otherwise returns EXIT_FAILURE.
 */
int BMP280_Check_id(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af02      	add	r7, sp, #8
	uint8_t buff[BUFF_SIZE];	// Buffer for the I2C communication
	HAL_StatusTypeDef ret; 		// I2C operations status
	hi2c_user = &hi2c1;			// I2C Handler used by the user
 800102a:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <BMP280_Check_id+0x74>)
 800102c:	4a1b      	ldr	r2, [pc, #108]	@ (800109c <BMP280_Check_id+0x78>)
 800102e:	601a      	str	r2, [r3, #0]

	buff[0] = BMP280_REG_ID;
 8001030:	23d0      	movs	r3, #208	@ 0xd0
 8001032:	713b      	strb	r3, [r7, #4]

	ret = HAL_I2C_Master_Transmit(hi2c_user, BMP280_ADDR, buff, 1, HAL_MAX_DELAY);
 8001034:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <BMP280_Check_id+0x74>)
 8001036:	6818      	ldr	r0, [r3, #0]
 8001038:	1d3a      	adds	r2, r7, #4
 800103a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	21ee      	movs	r1, #238	@ 0xee
 8001044:	f003 f81a 	bl	800407c <HAL_I2C_Master_Transmit>
 8001048:	4603      	mov	r3, r0
 800104a:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d004      	beq.n	800105c <BMP280_Check_id+0x38>
		printf("I2C Transmit failure\r\n");
 8001052:	4813      	ldr	r0, [pc, #76]	@ (80010a0 <BMP280_Check_id+0x7c>)
 8001054:	f008 f842 	bl	80090dc <puts>
		return EXIT_FAILURE;
 8001058:	2301      	movs	r3, #1
 800105a:	e019      	b.n	8001090 <BMP280_Check_id+0x6c>
	}
	ret = HAL_I2C_Master_Receive(hi2c_user, BMP280_ADDR, buff, 1, HAL_MAX_DELAY);
 800105c:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <BMP280_Check_id+0x74>)
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	1d3a      	adds	r2, r7, #4
 8001062:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2301      	movs	r3, #1
 800106a:	21ee      	movs	r1, #238	@ 0xee
 800106c:	f003 f904 	bl	8004278 <HAL_I2C_Master_Receive>
 8001070:	4603      	mov	r3, r0
 8001072:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d004      	beq.n	8001084 <BMP280_Check_id+0x60>
		printf("I2C Receive failure\r\n");
 800107a:	480a      	ldr	r0, [pc, #40]	@ (80010a4 <BMP280_Check_id+0x80>)
 800107c:	f008 f82e 	bl	80090dc <puts>
		return EXIT_FAILURE;
 8001080:	2301      	movs	r3, #1
 8001082:	e005      	b.n	8001090 <BMP280_Check_id+0x6c>
	}

	printf("BMP280 ID: 0x%X\r\n", buff[0]);
 8001084:	793b      	ldrb	r3, [r7, #4]
 8001086:	4619      	mov	r1, r3
 8001088:	4807      	ldr	r0, [pc, #28]	@ (80010a8 <BMP280_Check_id+0x84>)
 800108a:	f007 ffbf 	bl	800900c <iprintf>

	return EXIT_SUCCESS;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200001f0 	.word	0x200001f0
 800109c:	20000284 	.word	0x20000284
 80010a0:	0800cce8 	.word	0x0800cce8
 80010a4:	0800cd00 	.word	0x0800cd00
 80010a8:	0800cd18 	.word	0x0800cd18

080010ac <BMP280_Config>:
 * sent and confirmed by checking the response from the sensor.
 *
 * @return int Returns EXIT_SUCCESS if configuration is confirmed, otherwise returns EXIT_FAILURE.
 */
int BMP280_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af02      	add	r7, sp, #8
	uint8_t buff[BUFF_SIZE];	// Buffer for the I2C communication
	HAL_StatusTypeDef ret; 		// I2C operations status
	hi2c_user = &hi2c1;			// I2C Handler used by the user
 80010b2:	4b1e      	ldr	r3, [pc, #120]	@ (800112c <BMP280_Config+0x80>)
 80010b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001130 <BMP280_Config+0x84>)
 80010b6:	601a      	str	r2, [r3, #0]

	buff[0]= BMP280_REG_MODE;
 80010b8:	23f4      	movs	r3, #244	@ 0xf4
 80010ba:	713b      	strb	r3, [r7, #4]
	buff[1]= BMP280_CONFIG;
 80010bc:	2357      	movs	r3, #87	@ 0x57
 80010be:	717b      	strb	r3, [r7, #5]

	ret = HAL_I2C_Master_Transmit(hi2c_user,BMP280_ADDR, buff, 2, HAL_MAX_DELAY);
 80010c0:	4b1a      	ldr	r3, [pc, #104]	@ (800112c <BMP280_Config+0x80>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	1d3a      	adds	r2, r7, #4
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2302      	movs	r3, #2
 80010ce:	21ee      	movs	r1, #238	@ 0xee
 80010d0:	f002 ffd4 	bl	800407c <HAL_I2C_Master_Transmit>
 80010d4:	4603      	mov	r3, r0
 80010d6:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d004      	beq.n	80010e8 <BMP280_Config+0x3c>
		printf("I2C Transmit failure\r\n");
 80010de:	4815      	ldr	r0, [pc, #84]	@ (8001134 <BMP280_Config+0x88>)
 80010e0:	f007 fffc 	bl	80090dc <puts>
		return EXIT_FAILURE;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e01c      	b.n	8001122 <BMP280_Config+0x76>
	}

	ret = HAL_I2C_Master_Receive(hi2c_user, BMP280_ADDR, buff, 1, HAL_MAX_DELAY);
 80010e8:	4b10      	ldr	r3, [pc, #64]	@ (800112c <BMP280_Config+0x80>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	1d3a      	adds	r2, r7, #4
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	21ee      	movs	r1, #238	@ 0xee
 80010f8:	f003 f8be 	bl	8004278 <HAL_I2C_Master_Receive>
 80010fc:	4603      	mov	r3, r0
 80010fe:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK){
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d004      	beq.n	8001110 <BMP280_Config+0x64>
		printf("I2C Receive failure\r\n");
 8001106:	480c      	ldr	r0, [pc, #48]	@ (8001138 <BMP280_Config+0x8c>)
 8001108:	f007 ffe8 	bl	80090dc <puts>
		return EXIT_FAILURE;
 800110c:	2301      	movs	r3, #1
 800110e:	e008      	b.n	8001122 <BMP280_Config+0x76>
	}

	if(buff[0] == BMP280_CONFIG){
 8001110:	793b      	ldrb	r3, [r7, #4]
 8001112:	2b57      	cmp	r3, #87	@ 0x57
 8001114:	d104      	bne.n	8001120 <BMP280_Config+0x74>
		printf("La config BMP280 envoyée reçue avec succès\r\n");
 8001116:	4809      	ldr	r0, [pc, #36]	@ (800113c <BMP280_Config+0x90>)
 8001118:	f007 ffe0 	bl	80090dc <puts>
		return EXIT_SUCCESS;
 800111c:	2300      	movs	r3, #0
 800111e:	e000      	b.n	8001122 <BMP280_Config+0x76>
	}

	return EXIT_SUCCESS;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200001f0 	.word	0x200001f0
 8001130:	20000284 	.word	0x20000284
 8001134:	0800cce8 	.word	0x0800cce8
 8001138:	0800cd00 	.word	0x0800cd00
 800113c:	0800cd2c 	.word	0x0800cd2c

08001140 <BMP280_calibration>:
 *
 * Reads calibration data from the BMP280 sensor and stores it in global
 * variables for temperature and pressure compensation calculations.
 */
int BMP280_calibration(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08c      	sub	sp, #48	@ 0x30
 8001144:	af02      	add	r7, sp, #8
	uint8_t buff[BUFF_SIZE];
	uint8_t receive_buf[24];
	HAL_StatusTypeDef ret; 		// I2C operations status

	buff[0]= BMP280_REG_CALIBRATION;
 8001146:	2388      	movs	r3, #136	@ 0x88
 8001148:	773b      	strb	r3, [r7, #28]

	ret = HAL_I2C_Master_Transmit(hi2c_user, BMP280_ADDR, buff, 1, HAL_MAX_DELAY);
 800114a:	4b50      	ldr	r3, [pc, #320]	@ (800128c <BMP280_calibration+0x14c>)
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	f107 021c 	add.w	r2, r7, #28
 8001152:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2301      	movs	r3, #1
 800115a:	21ee      	movs	r1, #238	@ 0xee
 800115c:	f002 ff8e 	bl	800407c <HAL_I2C_Master_Transmit>
 8001160:	4603      	mov	r3, r0
 8001162:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if(ret != HAL_OK){
 8001166:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800116a:	2b00      	cmp	r3, #0
 800116c:	d004      	beq.n	8001178 <BMP280_calibration+0x38>
		printf("I2C Transmit failure\r\n");
 800116e:	4848      	ldr	r0, [pc, #288]	@ (8001290 <BMP280_calibration+0x150>)
 8001170:	f007 ffb4 	bl	80090dc <puts>
		return EXIT_FAILURE;
 8001174:	2301      	movs	r3, #1
 8001176:	e084      	b.n	8001282 <BMP280_calibration+0x142>
	}

	ret = HAL_I2C_Master_Receive(hi2c_user, BMP280_ADDR, receive_buf, 24, HAL_MAX_DELAY);
 8001178:	4b44      	ldr	r3, [pc, #272]	@ (800128c <BMP280_calibration+0x14c>)
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	1d3a      	adds	r2, r7, #4
 800117e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2318      	movs	r3, #24
 8001186:	21ee      	movs	r1, #238	@ 0xee
 8001188:	f003 f876 	bl	8004278 <HAL_I2C_Master_Receive>
 800118c:	4603      	mov	r3, r0
 800118e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if(ret != HAL_OK){
 8001192:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001196:	2b00      	cmp	r3, #0
 8001198:	d004      	beq.n	80011a4 <BMP280_calibration+0x64>
		printf("I2C Receive failure\r\n");
 800119a:	483e      	ldr	r0, [pc, #248]	@ (8001294 <BMP280_calibration+0x154>)
 800119c:	f007 ff9e 	bl	80090dc <puts>
		return EXIT_FAILURE;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e06e      	b.n	8001282 <BMP280_calibration+0x142>
		for(int i=0;i<24;i++){
			printf("calib %2d = 0x%x\r\n",i, receive_buf[i]);
		}
	}

	dig_T1 = receive_buf[0]|(receive_buf[1]<<8);
 80011a4:	793b      	ldrb	r3, [r7, #4]
 80011a6:	b21a      	sxth	r2, r3
 80011a8:	797b      	ldrb	r3, [r7, #5]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	4313      	orrs	r3, r2
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	4b38      	ldr	r3, [pc, #224]	@ (8001298 <BMP280_calibration+0x158>)
 80011b6:	801a      	strh	r2, [r3, #0]
	dig_T2 = receive_buf[2]|(receive_buf[3]<<8);
 80011b8:	79bb      	ldrb	r3, [r7, #6]
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	4b35      	ldr	r3, [pc, #212]	@ (800129c <BMP280_calibration+0x15c>)
 80011c8:	801a      	strh	r2, [r3, #0]
	dig_T3 = receive_buf[4]|(receive_buf[5]<<8);
 80011ca:	7a3b      	ldrb	r3, [r7, #8]
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	7a7b      	ldrb	r3, [r7, #9]
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	b21b      	sxth	r3, r3
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	4b31      	ldr	r3, [pc, #196]	@ (80012a0 <BMP280_calibration+0x160>)
 80011da:	801a      	strh	r2, [r3, #0]
	dig_P1 = receive_buf[6]|(receive_buf[7]<<8);
 80011dc:	7abb      	ldrb	r3, [r7, #10]
 80011de:	b21a      	sxth	r2, r3
 80011e0:	7afb      	ldrb	r3, [r7, #11]
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	4313      	orrs	r3, r2
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b2d      	ldr	r3, [pc, #180]	@ (80012a4 <BMP280_calibration+0x164>)
 80011ee:	801a      	strh	r2, [r3, #0]
	dig_P2 = receive_buf[8]|(receive_buf[9]<<8);
 80011f0:	7b3b      	ldrb	r3, [r7, #12]
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	7b7b      	ldrb	r3, [r7, #13]
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <BMP280_calibration+0x168>)
 8001200:	801a      	strh	r2, [r3, #0]
	dig_P3 = receive_buf[10]|(receive_buf[11]<<8);
 8001202:	7bbb      	ldrb	r3, [r7, #14]
 8001204:	b21a      	sxth	r2, r3
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b21b      	sxth	r3, r3
 800120c:	4313      	orrs	r3, r2
 800120e:	b21a      	sxth	r2, r3
 8001210:	4b26      	ldr	r3, [pc, #152]	@ (80012ac <BMP280_calibration+0x16c>)
 8001212:	801a      	strh	r2, [r3, #0]
	dig_P4 = receive_buf[12]|(receive_buf[13]<<8);
 8001214:	7c3b      	ldrb	r3, [r7, #16]
 8001216:	b21a      	sxth	r2, r3
 8001218:	7c7b      	ldrb	r3, [r7, #17]
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	b21b      	sxth	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b21a      	sxth	r2, r3
 8001222:	4b23      	ldr	r3, [pc, #140]	@ (80012b0 <BMP280_calibration+0x170>)
 8001224:	801a      	strh	r2, [r3, #0]
	dig_P5 = receive_buf[14]|(receive_buf[15]<<8);
 8001226:	7cbb      	ldrb	r3, [r7, #18]
 8001228:	b21a      	sxth	r2, r3
 800122a:	7cfb      	ldrb	r3, [r7, #19]
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	b21b      	sxth	r3, r3
 8001230:	4313      	orrs	r3, r2
 8001232:	b21a      	sxth	r2, r3
 8001234:	4b1f      	ldr	r3, [pc, #124]	@ (80012b4 <BMP280_calibration+0x174>)
 8001236:	801a      	strh	r2, [r3, #0]
	dig_P6 = receive_buf[16]|(receive_buf[17]<<8);
 8001238:	7d3b      	ldrb	r3, [r7, #20]
 800123a:	b21a      	sxth	r2, r3
 800123c:	7d7b      	ldrb	r3, [r7, #21]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	b21b      	sxth	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b21a      	sxth	r2, r3
 8001246:	4b1c      	ldr	r3, [pc, #112]	@ (80012b8 <BMP280_calibration+0x178>)
 8001248:	801a      	strh	r2, [r3, #0]
	dig_P7 = receive_buf[18]|(receive_buf[19]<<8);
 800124a:	7dbb      	ldrb	r3, [r7, #22]
 800124c:	b21a      	sxth	r2, r3
 800124e:	7dfb      	ldrb	r3, [r7, #23]
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	b21b      	sxth	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b21a      	sxth	r2, r3
 8001258:	4b18      	ldr	r3, [pc, #96]	@ (80012bc <BMP280_calibration+0x17c>)
 800125a:	801a      	strh	r2, [r3, #0]
	dig_P8 = receive_buf[20]|(receive_buf[21]<<8);
 800125c:	7e3b      	ldrb	r3, [r7, #24]
 800125e:	b21a      	sxth	r2, r3
 8001260:	7e7b      	ldrb	r3, [r7, #25]
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	b21b      	sxth	r3, r3
 8001266:	4313      	orrs	r3, r2
 8001268:	b21a      	sxth	r2, r3
 800126a:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <BMP280_calibration+0x180>)
 800126c:	801a      	strh	r2, [r3, #0]
	dig_P9 = receive_buf[22]|(receive_buf[23]<<8);
 800126e:	7ebb      	ldrb	r3, [r7, #26]
 8001270:	b21a      	sxth	r2, r3
 8001272:	7efb      	ldrb	r3, [r7, #27]
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	b21b      	sxth	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b21a      	sxth	r2, r3
 800127c:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <BMP280_calibration+0x184>)
 800127e:	801a      	strh	r2, [r3, #0]

	return EXIT_SUCCESS;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3728      	adds	r7, #40	@ 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200001f0 	.word	0x200001f0
 8001290:	0800cce8 	.word	0x0800cce8
 8001294:	0800cd00 	.word	0x0800cd00
 8001298:	200001f4 	.word	0x200001f4
 800129c:	200001f6 	.word	0x200001f6
 80012a0:	200001f8 	.word	0x200001f8
 80012a4:	200001fa 	.word	0x200001fa
 80012a8:	200001fc 	.word	0x200001fc
 80012ac:	200001fe 	.word	0x200001fe
 80012b0:	20000200 	.word	0x20000200
 80012b4:	20000202 	.word	0x20000202
 80012b8:	20000204 	.word	0x20000204
 80012bc:	20000206 	.word	0x20000206
 80012c0:	20000208 	.word	0x20000208
 80012c4:	2000020a 	.word	0x2000020a

080012c8 <BMP280_Read_Reg>:
 *
 * @param reg Register address to read from.
 * @param length Number of bytes to read.
 * @return uint8_t* Pointer to buffer with read data. The caller is responsible for freeing the buffer.
 */
uint8_t* BMP280_Read_Reg(uint8_t reg, uint8_t length) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	4603      	mov	r3, r0
 80012d0:	460a      	mov	r2, r1
 80012d2:	71fb      	strb	r3, [r7, #7]
 80012d4:	4613      	mov	r3, r2
 80012d6:	71bb      	strb	r3, [r7, #6]
	uint8_t *buf;
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(hi2c_user, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 80012d8:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <BMP280_Read_Reg+0x70>)
 80012da:	6818      	ldr	r0, [r3, #0]
 80012dc:	1dfa      	adds	r2, r7, #7
 80012de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2301      	movs	r3, #1
 80012e6:	21ee      	movs	r1, #238	@ 0xee
 80012e8:	f002 fec8 	bl	800407c <HAL_I2C_Master_Transmit>
 80012ec:	4603      	mov	r3, r0
 80012ee:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d002      	beq.n	80012fc <BMP280_Read_Reg+0x34>
		printf("Problem with I2C Transmit\r\n");
 80012f6:	4811      	ldr	r0, [pc, #68]	@ (800133c <BMP280_Read_Reg+0x74>)
 80012f8:	f007 fef0 	bl	80090dc <puts>
	}

	buf = (uint8_t*) malloc(length);
 80012fc:	79bb      	ldrb	r3, [r7, #6]
 80012fe:	4618      	mov	r0, r3
 8001300:	f006 fe98 	bl	8008034 <malloc>
 8001304:	4603      	mov	r3, r0
 8001306:	60bb      	str	r3, [r7, #8]
	ret = HAL_I2C_Master_Receive(hi2c_user, BMP280_ADDR, buf, length,
 8001308:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <BMP280_Read_Reg+0x70>)
 800130a:	6818      	ldr	r0, [r3, #0]
 800130c:	79bb      	ldrb	r3, [r7, #6]
 800130e:	b29b      	uxth	r3, r3
 8001310:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001314:	9200      	str	r2, [sp, #0]
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	21ee      	movs	r1, #238	@ 0xee
 800131a:	f002 ffad 	bl	8004278 <HAL_I2C_Master_Receive>
 800131e:	4603      	mov	r3, r0
 8001320:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	if (ret != 0) {
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <BMP280_Read_Reg+0x66>
		printf("Problem with I2C Receive\r\n");
 8001328:	4805      	ldr	r0, [pc, #20]	@ (8001340 <BMP280_Read_Reg+0x78>)
 800132a:	f007 fed7 	bl	80090dc <puts>
	}

	return buf;
 800132e:	68bb      	ldr	r3, [r7, #8]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200001f0 	.word	0x200001f0
 800133c:	0800cd5c 	.word	0x0800cd5c
 8001340:	0800cd78 	.word	0x0800cd78

08001344 <BMP280_get_temperature>:
 * Reads the raw temperature data from the BMP280, compensates it, and
 * returns the result. Prints both raw and compensated temperature values.
 *
 * @return BMP280_S32_t Compensated temperature in degrees Celsius, scaled by 100.
 */
BMP280_S32_t BMP280_get_temperature() {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_T;

	buf = BMP280_Read_Reg(BMP280_REG_TEMP_MSB, BMP280_LEN_TEMP);
 800134a:	2103      	movs	r1, #3
 800134c:	20fa      	movs	r0, #250	@ 0xfa
 800134e:	f7ff ffbb 	bl	80012c8 <BMP280_Read_Reg>
 8001352:	6078      	str	r0, [r7, #4]

	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	031a      	lsls	r2, r3, #12
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3301      	adds	r3, #1
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	4313      	orrs	r3, r2
							| ((BMP280_S32_t) (buf[2]) >> 4);
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	3202      	adds	r2, #2
 8001368:	7812      	ldrb	r2, [r2, #0]
 800136a:	0912      	lsrs	r2, r2, #4
 800136c:	b2d2      	uxtb	r2, r2
	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 800136e:	4313      	orrs	r3, r2
 8001370:	603b      	str	r3, [r7, #0]

	free(buf);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f006 fe66 	bl	8008044 <free>
		printf("Compensated temperature: ");
		printf("0x%05lX = %d°C", adc_T, adc_T);
		printf("\r\n");
	}

	return adc_T;
 8001378:	683b      	ldr	r3, [r7, #0]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <BMP280_get_pressure>:
 * Reads the raw pressure data from the BMP280, compensates it, and
 * returns the result. Prints both raw and compensated pressure values.
 *
 * @return BMP280_S32_t Compensated pressure in Pascals.
 */
BMP280_S32_t BMP280_get_pressure() {
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_P;

	buf = BMP280_Read_Reg(BMP280_REG_PRES_MSB, BMP280_LEN_PRES);
 8001388:	2103      	movs	r1, #3
 800138a:	20f7      	movs	r0, #247	@ 0xf7
 800138c:	f7ff ff9c 	bl	80012c8 <BMP280_Read_Reg>
 8001390:	6078      	str	r0, [r7, #4]

	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	031a      	lsls	r2, r3, #12
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3301      	adds	r3, #1
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	011b      	lsls	r3, r3, #4
 80013a0:	4313      	orrs	r3, r2
							| ((BMP280_S32_t) (buf[2]) >> 4);
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	3202      	adds	r2, #2
 80013a6:	7812      	ldrb	r2, [r2, #0]
 80013a8:	0912      	lsrs	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	603b      	str	r3, [r7, #0]

	free(buf);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f006 fe47 	bl	8008044 <free>
		printf("Compensated pressure: ");
		printf("0x%05lX = %ld Pa", adc_P, adc_P);
		printf("\r\n");
	}

	return adc_P;
 80013b6:	683b      	ldr	r3, [r7, #0]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <MPU_begin>:
/// @param aScale Set accelerometer full scale range: 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.
/// @param gScale Set gyroscope full scale range: 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
/// @param tau Set tau value for the complementary filter (typically 0.98).
/// @param dt Set sampling rate in seconds determined by the timer interrupt.
uint8_t MPU_begin(I2C_HandleTypeDef *I2Cx, uint8_t addr, uint8_t aScale, uint8_t gScale, float tau, float dt)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	@ 0x28
 80013c4:	af04      	add	r7, sp, #16
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	4608      	mov	r0, r1
 80013ca:	4611      	mov	r1, r2
 80013cc:	461a      	mov	r2, r3
 80013ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80013d2:	edc7 0a00 	vstr	s1, [r7]
 80013d6:	4603      	mov	r3, r0
 80013d8:	72fb      	strb	r3, [r7, #11]
 80013da:	460b      	mov	r3, r1
 80013dc:	72bb      	strb	r3, [r7, #10]
 80013de:	4613      	mov	r3, r2
 80013e0:	727b      	strb	r3, [r7, #9]
    // Save values
    _addr = addr << 1;
 80013e2:	7afb      	ldrb	r3, [r7, #11]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	4b20      	ldr	r3, [pc, #128]	@ (800146c <MPU_begin+0xac>)
 80013ea:	701a      	strb	r2, [r3, #0]
    _tau = tau;
 80013ec:	4a20      	ldr	r2, [pc, #128]	@ (8001470 <MPU_begin+0xb0>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6013      	str	r3, [r2, #0]
    _dt = dt;
 80013f2:	4a20      	ldr	r2, [pc, #128]	@ (8001474 <MPU_begin+0xb4>)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	6013      	str	r3, [r2, #0]
    // Initialize variables
    uint8_t check;
    uint8_t select;

    // Confirm device
    HAL_I2C_Mem_Read(I2Cx, _addr, WHO_AM_I, 1, &check, 1, I2C_TIMOUT_MS);
 80013f8:	4b1c      	ldr	r3, [pc, #112]	@ (800146c <MPU_begin+0xac>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4619      	mov	r1, r3
 80013fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001402:	9302      	str	r3, [sp, #8]
 8001404:	2301      	movs	r3, #1
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	f107 0317 	add.w	r3, r7, #23
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2301      	movs	r3, #1
 8001410:	2275      	movs	r2, #117	@ 0x75
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f003 fa5c 	bl	80048d0 <HAL_I2C_Mem_Read>

    // TODO: If 9250 or 6050 fails could it trigger the opposite check???
    if ((check == WHO_AM_I_9250_ANS) || (check == WHO_AM_I_6050_ANS))
 8001418:	7dfb      	ldrb	r3, [r7, #23]
 800141a:	2b71      	cmp	r3, #113	@ 0x71
 800141c:	d002      	beq.n	8001424 <MPU_begin+0x64>
 800141e:	7dfb      	ldrb	r3, [r7, #23]
 8001420:	2b68      	cmp	r3, #104	@ 0x68
 8001422:	d11d      	bne.n	8001460 <MPU_begin+0xa0>
    {
        // Startup / reset the sensor
        select = 0x00;
 8001424:	2300      	movs	r3, #0
 8001426:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(I2Cx, _addr, PWR_MGMT_1, 1, &select, 1, I2C_TIMOUT_MS);
 8001428:	4b10      	ldr	r3, [pc, #64]	@ (800146c <MPU_begin+0xac>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4619      	mov	r1, r3
 800142e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001432:	9302      	str	r3, [sp, #8]
 8001434:	2301      	movs	r3, #1
 8001436:	9301      	str	r3, [sp, #4]
 8001438:	f107 0316 	add.w	r3, r7, #22
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2301      	movs	r3, #1
 8001440:	226b      	movs	r2, #107	@ 0x6b
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f003 f94a 	bl	80046dc <HAL_I2C_Mem_Write>

        // Set the full scale ranges
        MPU_writeAccFullScaleRange(I2Cx, aScale);
 8001448:	7abb      	ldrb	r3, [r7, #10]
 800144a:	4619      	mov	r1, r3
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	f000 f813 	bl	8001478 <MPU_writeAccFullScaleRange>
        MPU_writeGyroFullScaleRange(I2Cx, gScale);
 8001452:	7a7b      	ldrb	r3, [r7, #9]
 8001454:	4619      	mov	r1, r3
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f000 f89e 	bl	8001598 <MPU_writeGyroFullScaleRange>

        return 1;
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <MPU_begin+0xa2>
    }
    else
    {
        return 0;
 8001460:	2300      	movs	r3, #0
    }
}
 8001462:	4618      	mov	r0, r3
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000248 	.word	0x20000248
 8001470:	20000250 	.word	0x20000250
 8001474:	2000024c 	.word	0x2000024c

08001478 <MPU_writeAccFullScaleRange>:

/// @brief Set the accelerometer full scale range.
/// @param I2Cx Pointer to I2C structure config.
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.
void MPU_writeAccFullScaleRange(I2C_HandleTypeDef *I2Cx, uint8_t aScale)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af04      	add	r7, sp, #16
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	70fb      	strb	r3, [r7, #3]
    // Variable init
    uint8_t select;

    // Set the value
    switch (aScale)
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	2b03      	cmp	r3, #3
 8001488:	d866      	bhi.n	8001558 <MPU_writeAccFullScaleRange+0xe0>
 800148a:	a201      	add	r2, pc, #4	@ (adr r2, 8001490 <MPU_writeAccFullScaleRange+0x18>)
 800148c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001490:	080014a1 	.word	0x080014a1
 8001494:	080014cf 	.word	0x080014cf
 8001498:	080014fd 	.word	0x080014fd
 800149c:	0800152b 	.word	0x0800152b
    {
    case AFSR_2G:
        aScaleFactor = 16384.0;
 80014a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001590 <MPU_writeAccFullScaleRange+0x118>)
 80014a2:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 80014a6:	601a      	str	r2, [r3, #0]
        select = 0x00;
 80014a8:	2300      	movs	r3, #0
 80014aa:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80014ac:	4b39      	ldr	r3, [pc, #228]	@ (8001594 <MPU_writeAccFullScaleRange+0x11c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4619      	mov	r1, r3
 80014b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014b6:	9302      	str	r3, [sp, #8]
 80014b8:	2301      	movs	r3, #1
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	f107 030f 	add.w	r3, r7, #15
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2301      	movs	r3, #1
 80014c4:	221c      	movs	r2, #28
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f003 f908 	bl	80046dc <HAL_I2C_Mem_Write>
        break;
 80014cc:	e05b      	b.n	8001586 <MPU_writeAccFullScaleRange+0x10e>
    case AFSR_4G:
        aScaleFactor = 8192.0;
 80014ce:	4b30      	ldr	r3, [pc, #192]	@ (8001590 <MPU_writeAccFullScaleRange+0x118>)
 80014d0:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 80014d4:	601a      	str	r2, [r3, #0]
        select = 0x08;
 80014d6:	2308      	movs	r3, #8
 80014d8:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80014da:	4b2e      	ldr	r3, [pc, #184]	@ (8001594 <MPU_writeAccFullScaleRange+0x11c>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	4619      	mov	r1, r3
 80014e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e4:	9302      	str	r3, [sp, #8]
 80014e6:	2301      	movs	r3, #1
 80014e8:	9301      	str	r3, [sp, #4]
 80014ea:	f107 030f 	add.w	r3, r7, #15
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2301      	movs	r3, #1
 80014f2:	221c      	movs	r2, #28
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f003 f8f1 	bl	80046dc <HAL_I2C_Mem_Write>
        break;
 80014fa:	e044      	b.n	8001586 <MPU_writeAccFullScaleRange+0x10e>
    case AFSR_8G:
        aScaleFactor = 4096.0;
 80014fc:	4b24      	ldr	r3, [pc, #144]	@ (8001590 <MPU_writeAccFullScaleRange+0x118>)
 80014fe:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8001502:	601a      	str	r2, [r3, #0]
        select = 0x10;
 8001504:	2310      	movs	r3, #16
 8001506:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001508:	4b22      	ldr	r3, [pc, #136]	@ (8001594 <MPU_writeAccFullScaleRange+0x11c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001512:	9302      	str	r3, [sp, #8]
 8001514:	2301      	movs	r3, #1
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	f107 030f 	add.w	r3, r7, #15
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2301      	movs	r3, #1
 8001520:	221c      	movs	r2, #28
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f003 f8da 	bl	80046dc <HAL_I2C_Mem_Write>
        break;
 8001528:	e02d      	b.n	8001586 <MPU_writeAccFullScaleRange+0x10e>
    case AFSR_16G:
        aScaleFactor = 2048.0;
 800152a:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <MPU_writeAccFullScaleRange+0x118>)
 800152c:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8001530:	601a      	str	r2, [r3, #0]
        select = 0x18;
 8001532:	2318      	movs	r3, #24
 8001534:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001536:	4b17      	ldr	r3, [pc, #92]	@ (8001594 <MPU_writeAccFullScaleRange+0x11c>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	4619      	mov	r1, r3
 800153c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001540:	9302      	str	r3, [sp, #8]
 8001542:	2301      	movs	r3, #1
 8001544:	9301      	str	r3, [sp, #4]
 8001546:	f107 030f 	add.w	r3, r7, #15
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2301      	movs	r3, #1
 800154e:	221c      	movs	r2, #28
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f003 f8c3 	bl	80046dc <HAL_I2C_Mem_Write>
        break;
 8001556:	e016      	b.n	8001586 <MPU_writeAccFullScaleRange+0x10e>
    default:
        aScaleFactor = 8192.0;
 8001558:	4b0d      	ldr	r3, [pc, #52]	@ (8001590 <MPU_writeAccFullScaleRange+0x118>)
 800155a:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 800155e:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8001560:	2308      	movs	r3, #8
 8001562:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001564:	4b0b      	ldr	r3, [pc, #44]	@ (8001594 <MPU_writeAccFullScaleRange+0x11c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800156e:	9302      	str	r3, [sp, #8]
 8001570:	2301      	movs	r3, #1
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	f107 030f 	add.w	r3, r7, #15
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	2301      	movs	r3, #1
 800157c:	221c      	movs	r2, #28
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f003 f8ac 	bl	80046dc <HAL_I2C_Mem_Write>
        break;
 8001584:	bf00      	nop
    }
}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000254 	.word	0x20000254
 8001594:	20000248 	.word	0x20000248

08001598 <MPU_writeGyroFullScaleRange>:

/// @brief Set the gyroscope full scale range.
/// @param I2Cx Pointer to I2C structure config.
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
void MPU_writeGyroFullScaleRange(I2C_HandleTypeDef *I2Cx, uint8_t gScale)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af04      	add	r7, sp, #16
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	70fb      	strb	r3, [r7, #3]
    // Variable init
    uint8_t select;

    // Set the value
    switch (gScale)
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d862      	bhi.n	8001670 <MPU_writeGyroFullScaleRange+0xd8>
 80015aa:	a201      	add	r2, pc, #4	@ (adr r2, 80015b0 <MPU_writeGyroFullScaleRange+0x18>)
 80015ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b0:	080015c1 	.word	0x080015c1
 80015b4:	080015ed 	.word	0x080015ed
 80015b8:	08001619 	.word	0x08001619
 80015bc:	08001645 	.word	0x08001645
    {
    case GFSR_250DPS:
        gScaleFactor = 131.0;
 80015c0:	4b38      	ldr	r3, [pc, #224]	@ (80016a4 <MPU_writeGyroFullScaleRange+0x10c>)
 80015c2:	4a39      	ldr	r2, [pc, #228]	@ (80016a8 <MPU_writeGyroFullScaleRange+0x110>)
 80015c4:	601a      	str	r2, [r3, #0]
        select = 0x00;
 80015c6:	2300      	movs	r3, #0
 80015c8:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80015ca:	4b38      	ldr	r3, [pc, #224]	@ (80016ac <MPU_writeGyroFullScaleRange+0x114>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	4619      	mov	r1, r3
 80015d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	2301      	movs	r3, #1
 80015d8:	9301      	str	r3, [sp, #4]
 80015da:	f107 030f 	add.w	r3, r7, #15
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	221b      	movs	r2, #27
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f003 f879 	bl	80046dc <HAL_I2C_Mem_Write>
        break;
 80015ea:	e057      	b.n	800169c <MPU_writeGyroFullScaleRange+0x104>
    case GFSR_500DPS:
        gScaleFactor = 65.5;
 80015ec:	4b2d      	ldr	r3, [pc, #180]	@ (80016a4 <MPU_writeGyroFullScaleRange+0x10c>)
 80015ee:	4a30      	ldr	r2, [pc, #192]	@ (80016b0 <MPU_writeGyroFullScaleRange+0x118>)
 80015f0:	601a      	str	r2, [r3, #0]
        select = 0x08;
 80015f2:	2308      	movs	r3, #8
 80015f4:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80015f6:	4b2d      	ldr	r3, [pc, #180]	@ (80016ac <MPU_writeGyroFullScaleRange+0x114>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	4619      	mov	r1, r3
 80015fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001600:	9302      	str	r3, [sp, #8]
 8001602:	2301      	movs	r3, #1
 8001604:	9301      	str	r3, [sp, #4]
 8001606:	f107 030f 	add.w	r3, r7, #15
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2301      	movs	r3, #1
 800160e:	221b      	movs	r2, #27
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f003 f863 	bl	80046dc <HAL_I2C_Mem_Write>
        break;
 8001616:	e041      	b.n	800169c <MPU_writeGyroFullScaleRange+0x104>
    case GFSR_1000DPS:
        gScaleFactor = 32.8;
 8001618:	4b22      	ldr	r3, [pc, #136]	@ (80016a4 <MPU_writeGyroFullScaleRange+0x10c>)
 800161a:	4a26      	ldr	r2, [pc, #152]	@ (80016b4 <MPU_writeGyroFullScaleRange+0x11c>)
 800161c:	601a      	str	r2, [r3, #0]
        select = 0x10;
 800161e:	2310      	movs	r3, #16
 8001620:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001622:	4b22      	ldr	r3, [pc, #136]	@ (80016ac <MPU_writeGyroFullScaleRange+0x114>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	4619      	mov	r1, r3
 8001628:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	2301      	movs	r3, #1
 8001630:	9301      	str	r3, [sp, #4]
 8001632:	f107 030f 	add.w	r3, r7, #15
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2301      	movs	r3, #1
 800163a:	221b      	movs	r2, #27
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f003 f84d 	bl	80046dc <HAL_I2C_Mem_Write>
        break;
 8001642:	e02b      	b.n	800169c <MPU_writeGyroFullScaleRange+0x104>
    case GFSR_2000DPS:
        gScaleFactor = 16.4;
 8001644:	4b17      	ldr	r3, [pc, #92]	@ (80016a4 <MPU_writeGyroFullScaleRange+0x10c>)
 8001646:	4a1c      	ldr	r2, [pc, #112]	@ (80016b8 <MPU_writeGyroFullScaleRange+0x120>)
 8001648:	601a      	str	r2, [r3, #0]
        select = 0x18;
 800164a:	2318      	movs	r3, #24
 800164c:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 800164e:	4b17      	ldr	r3, [pc, #92]	@ (80016ac <MPU_writeGyroFullScaleRange+0x114>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	4619      	mov	r1, r3
 8001654:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001658:	9302      	str	r3, [sp, #8]
 800165a:	2301      	movs	r3, #1
 800165c:	9301      	str	r3, [sp, #4]
 800165e:	f107 030f 	add.w	r3, r7, #15
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2301      	movs	r3, #1
 8001666:	221b      	movs	r2, #27
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f003 f837 	bl	80046dc <HAL_I2C_Mem_Write>
        break;
 800166e:	e015      	b.n	800169c <MPU_writeGyroFullScaleRange+0x104>
    default:
        gScaleFactor = 65.5;
 8001670:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <MPU_writeGyroFullScaleRange+0x10c>)
 8001672:	4a0f      	ldr	r2, [pc, #60]	@ (80016b0 <MPU_writeGyroFullScaleRange+0x118>)
 8001674:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8001676:	2308      	movs	r3, #8
 8001678:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 800167a:	4b0c      	ldr	r3, [pc, #48]	@ (80016ac <MPU_writeGyroFullScaleRange+0x114>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	4619      	mov	r1, r3
 8001680:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001684:	9302      	str	r3, [sp, #8]
 8001686:	2301      	movs	r3, #1
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	f107 030f 	add.w	r3, r7, #15
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2301      	movs	r3, #1
 8001692:	221b      	movs	r2, #27
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f003 f821 	bl	80046dc <HAL_I2C_Mem_Write>
        break;
 800169a:	bf00      	nop
    }
}
 800169c:	bf00      	nop
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000258 	.word	0x20000258
 80016a8:	43030000 	.word	0x43030000
 80016ac:	20000248 	.word	0x20000248
 80016b0:	42830000 	.word	0x42830000
 80016b4:	42033333 	.word	0x42033333
 80016b8:	41833333 	.word	0x41833333

080016bc <MPU_readRawData>:

/// @brief Read raw data from IMU.
/// @param I2Cx Pointer to I2C structure config.
void MPU_readRawData(I2C_HandleTypeDef *I2Cx)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	@ 0x28
 80016c0:	af04      	add	r7, sp, #16
 80016c2:	6078      	str	r0, [r7, #4]
    // Init buffer
    uint8_t buf[14];

    // Subroutine for reading the raw data
    HAL_I2C_Mem_Read(I2Cx, _addr, ACCEL_XOUT_H, 1, buf, 14, I2C_TIMOUT_MS);
 80016c4:	4b24      	ldr	r3, [pc, #144]	@ (8001758 <MPU_readRawData+0x9c>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ce:	9302      	str	r3, [sp, #8]
 80016d0:	230e      	movs	r3, #14
 80016d2:	9301      	str	r3, [sp, #4]
 80016d4:	f107 0308 	add.w	r3, r7, #8
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	2301      	movs	r3, #1
 80016dc:	223b      	movs	r2, #59	@ 0x3b
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f003 f8f6 	bl	80048d0 <HAL_I2C_Mem_Read>

    // Bit shift the data
    rawData.ax = buf[0] << 8 | buf[1];
 80016e4:	7a3b      	ldrb	r3, [r7, #8]
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	b21a      	sxth	r2, r3
 80016ea:	7a7b      	ldrb	r3, [r7, #9]
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	4313      	orrs	r3, r2
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	4b1a      	ldr	r3, [pc, #104]	@ (800175c <MPU_readRawData+0xa0>)
 80016f4:	801a      	strh	r2, [r3, #0]
    rawData.ay = buf[2] << 8 | buf[3];
 80016f6:	7abb      	ldrb	r3, [r7, #10]
 80016f8:	021b      	lsls	r3, r3, #8
 80016fa:	b21a      	sxth	r2, r3
 80016fc:	7afb      	ldrb	r3, [r7, #11]
 80016fe:	b21b      	sxth	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	b21a      	sxth	r2, r3
 8001704:	4b15      	ldr	r3, [pc, #84]	@ (800175c <MPU_readRawData+0xa0>)
 8001706:	805a      	strh	r2, [r3, #2]
    rawData.az = buf[4] << 8 | buf[5];
 8001708:	7b3b      	ldrb	r3, [r7, #12]
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	b21a      	sxth	r2, r3
 800170e:	7b7b      	ldrb	r3, [r7, #13]
 8001710:	b21b      	sxth	r3, r3
 8001712:	4313      	orrs	r3, r2
 8001714:	b21a      	sxth	r2, r3
 8001716:	4b11      	ldr	r3, [pc, #68]	@ (800175c <MPU_readRawData+0xa0>)
 8001718:	809a      	strh	r2, [r3, #4]
    // temperature = buf[6] << 8 | buf[7];
    rawData.gx = buf[8] << 8 | buf[9];
 800171a:	7c3b      	ldrb	r3, [r7, #16]
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	b21a      	sxth	r2, r3
 8001720:	7c7b      	ldrb	r3, [r7, #17]
 8001722:	b21b      	sxth	r3, r3
 8001724:	4313      	orrs	r3, r2
 8001726:	b21a      	sxth	r2, r3
 8001728:	4b0c      	ldr	r3, [pc, #48]	@ (800175c <MPU_readRawData+0xa0>)
 800172a:	80da      	strh	r2, [r3, #6]
    rawData.gy = buf[10] << 8 | buf[11];
 800172c:	7cbb      	ldrb	r3, [r7, #18]
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	b21a      	sxth	r2, r3
 8001732:	7cfb      	ldrb	r3, [r7, #19]
 8001734:	b21b      	sxth	r3, r3
 8001736:	4313      	orrs	r3, r2
 8001738:	b21a      	sxth	r2, r3
 800173a:	4b08      	ldr	r3, [pc, #32]	@ (800175c <MPU_readRawData+0xa0>)
 800173c:	811a      	strh	r2, [r3, #8]
    rawData.gz = buf[12] << 8 | buf[13];
 800173e:	7d3b      	ldrb	r3, [r7, #20]
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	b21a      	sxth	r2, r3
 8001744:	7d7b      	ldrb	r3, [r7, #21]
 8001746:	b21b      	sxth	r3, r3
 8001748:	4313      	orrs	r3, r2
 800174a:	b21a      	sxth	r2, r3
 800174c:	4b03      	ldr	r3, [pc, #12]	@ (800175c <MPU_readRawData+0xa0>)
 800174e:	815a      	strh	r2, [r3, #10]
}
 8001750:	bf00      	nop
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000248 	.word	0x20000248
 800175c:	2000020c 	.word	0x2000020c

08001760 <MPU_calibrateGyro>:

/// @brief Find offsets for each axis of gyroscope.
/// @param I2Cx Pointer to I2C structure config.
/// @param numCalPoints Number of data points to average.
void MPU_calibrateGyro(I2C_HandleTypeDef *I2Cx, uint16_t numCalPoints)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
    // Init
    int32_t x = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]
    int32_t z = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]

    // Zero guard
    if (numCalPoints == 0)
 8001778:	887b      	ldrh	r3, [r7, #2]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <MPU_calibrateGyro+0x22>
    {
        numCalPoints = 1;
 800177e:	2301      	movs	r3, #1
 8001780:	807b      	strh	r3, [r7, #2]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8001782:	2300      	movs	r3, #0
 8001784:	817b      	strh	r3, [r7, #10]
 8001786:	e01d      	b.n	80017c4 <MPU_calibrateGyro+0x64>
    {
        MPU_readRawData(I2Cx);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ff97 	bl	80016bc <MPU_readRawData>
        x += rawData.gx;
 800178e:	4b28      	ldr	r3, [pc, #160]	@ (8001830 <MPU_calibrateGyro+0xd0>)
 8001790:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001794:	461a      	mov	r2, r3
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	4413      	add	r3, r2
 800179a:	617b      	str	r3, [r7, #20]
        y += rawData.gy;
 800179c:	4b24      	ldr	r3, [pc, #144]	@ (8001830 <MPU_calibrateGyro+0xd0>)
 800179e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80017a2:	461a      	mov	r2, r3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4413      	add	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        z += rawData.gz;
 80017aa:	4b21      	ldr	r3, [pc, #132]	@ (8001830 <MPU_calibrateGyro+0xd0>)
 80017ac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80017b0:	461a      	mov	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4413      	add	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
        HAL_Delay(3);
 80017b8:	2003      	movs	r0, #3
 80017ba:	f001 fa25 	bl	8002c08 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 80017be:	897b      	ldrh	r3, [r7, #10]
 80017c0:	3301      	adds	r3, #1
 80017c2:	817b      	strh	r3, [r7, #10]
 80017c4:	897a      	ldrh	r2, [r7, #10]
 80017c6:	887b      	ldrh	r3, [r7, #2]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d3dd      	bcc.n	8001788 <MPU_calibrateGyro+0x28>
    }

    // Average the saved data points to find the gyroscope offset
    gyroCal.x = (float)x / (float)numCalPoints;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	ee07 3a90 	vmov	s15, r3
 80017d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017d6:	887b      	ldrh	r3, [r7, #2]
 80017d8:	ee07 3a90 	vmov	s15, r3
 80017dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017e4:	4b13      	ldr	r3, [pc, #76]	@ (8001834 <MPU_calibrateGyro+0xd4>)
 80017e6:	edc3 7a00 	vstr	s15, [r3]
    gyroCal.y = (float)y / (float)numCalPoints;
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	ee07 3a90 	vmov	s15, r3
 80017f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017f4:	887b      	ldrh	r3, [r7, #2]
 80017f6:	ee07 3a90 	vmov	s15, r3
 80017fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001802:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <MPU_calibrateGyro+0xd4>)
 8001804:	edc3 7a01 	vstr	s15, [r3, #4]
    gyroCal.z = (float)z / (float)numCalPoints;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	ee07 3a90 	vmov	s15, r3
 800180e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001812:	887b      	ldrh	r3, [r7, #2]
 8001814:	ee07 3a90 	vmov	s15, r3
 8001818:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800181c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001820:	4b04      	ldr	r3, [pc, #16]	@ (8001834 <MPU_calibrateGyro+0xd4>)
 8001822:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001826:	bf00      	nop
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	2000020c 	.word	0x2000020c
 8001834:	20000230 	.word	0x20000230

08001838 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values.
/// @param I2Cx Pointer to I2C structure config.
void MPU_readProcessedData(I2C_HandleTypeDef *I2Cx)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
    // Get raw values from the IMU
    MPU_readRawData(I2Cx);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff3b 	bl	80016bc <MPU_readRawData>

    // Convert accelerometer values to g's
    sensorData.ax = rawData.ax / aScaleFactor;
 8001846:	4b3f      	ldr	r3, [pc, #252]	@ (8001944 <MPU_readProcessedData+0x10c>)
 8001848:	f9b3 3000 	ldrsh.w	r3, [r3]
 800184c:	ee07 3a90 	vmov	s15, r3
 8001850:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001854:	4b3c      	ldr	r3, [pc, #240]	@ (8001948 <MPU_readProcessedData+0x110>)
 8001856:	ed93 7a00 	vldr	s14, [r3]
 800185a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800185e:	4b3b      	ldr	r3, [pc, #236]	@ (800194c <MPU_readProcessedData+0x114>)
 8001860:	edc3 7a00 	vstr	s15, [r3]
    sensorData.ay = rawData.ay / aScaleFactor;
 8001864:	4b37      	ldr	r3, [pc, #220]	@ (8001944 <MPU_readProcessedData+0x10c>)
 8001866:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800186a:	ee07 3a90 	vmov	s15, r3
 800186e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001872:	4b35      	ldr	r3, [pc, #212]	@ (8001948 <MPU_readProcessedData+0x110>)
 8001874:	ed93 7a00 	vldr	s14, [r3]
 8001878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800187c:	4b33      	ldr	r3, [pc, #204]	@ (800194c <MPU_readProcessedData+0x114>)
 800187e:	edc3 7a01 	vstr	s15, [r3, #4]
    sensorData.az = rawData.az / aScaleFactor;
 8001882:	4b30      	ldr	r3, [pc, #192]	@ (8001944 <MPU_readProcessedData+0x10c>)
 8001884:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001888:	ee07 3a90 	vmov	s15, r3
 800188c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001890:	4b2d      	ldr	r3, [pc, #180]	@ (8001948 <MPU_readProcessedData+0x110>)
 8001892:	ed93 7a00 	vldr	s14, [r3]
 8001896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800189a:	4b2c      	ldr	r3, [pc, #176]	@ (800194c <MPU_readProcessedData+0x114>)
 800189c:	edc3 7a02 	vstr	s15, [r3, #8]

    // Compensate for gyro offset
    sensorData.gx = rawData.gx - gyroCal.x;
 80018a0:	4b28      	ldr	r3, [pc, #160]	@ (8001944 <MPU_readProcessedData+0x10c>)
 80018a2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018a6:	ee07 3a90 	vmov	s15, r3
 80018aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ae:	4b28      	ldr	r3, [pc, #160]	@ (8001950 <MPU_readProcessedData+0x118>)
 80018b0:	edd3 7a00 	vldr	s15, [r3]
 80018b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b8:	4b24      	ldr	r3, [pc, #144]	@ (800194c <MPU_readProcessedData+0x114>)
 80018ba:	edc3 7a03 	vstr	s15, [r3, #12]
    sensorData.gy = rawData.gy - gyroCal.y;
 80018be:	4b21      	ldr	r3, [pc, #132]	@ (8001944 <MPU_readProcessedData+0x10c>)
 80018c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018c4:	ee07 3a90 	vmov	s15, r3
 80018c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018cc:	4b20      	ldr	r3, [pc, #128]	@ (8001950 <MPU_readProcessedData+0x118>)
 80018ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80018d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d6:	4b1d      	ldr	r3, [pc, #116]	@ (800194c <MPU_readProcessedData+0x114>)
 80018d8:	edc3 7a04 	vstr	s15, [r3, #16]
    sensorData.gz = rawData.gz - gyroCal.z;
 80018dc:	4b19      	ldr	r3, [pc, #100]	@ (8001944 <MPU_readProcessedData+0x10c>)
 80018de:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ea:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <MPU_readProcessedData+0x118>)
 80018ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80018f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f4:	4b15      	ldr	r3, [pc, #84]	@ (800194c <MPU_readProcessedData+0x114>)
 80018f6:	edc3 7a05 	vstr	s15, [r3, #20]

    // Convert gyro values to deg/s
    sensorData.gx /= gScaleFactor;
 80018fa:	4b14      	ldr	r3, [pc, #80]	@ (800194c <MPU_readProcessedData+0x114>)
 80018fc:	edd3 6a03 	vldr	s13, [r3, #12]
 8001900:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <MPU_readProcessedData+0x11c>)
 8001902:	ed93 7a00 	vldr	s14, [r3]
 8001906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800190a:	4b10      	ldr	r3, [pc, #64]	@ (800194c <MPU_readProcessedData+0x114>)
 800190c:	edc3 7a03 	vstr	s15, [r3, #12]
    sensorData.gy /= gScaleFactor;
 8001910:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <MPU_readProcessedData+0x114>)
 8001912:	edd3 6a04 	vldr	s13, [r3, #16]
 8001916:	4b0f      	ldr	r3, [pc, #60]	@ (8001954 <MPU_readProcessedData+0x11c>)
 8001918:	ed93 7a00 	vldr	s14, [r3]
 800191c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001920:	4b0a      	ldr	r3, [pc, #40]	@ (800194c <MPU_readProcessedData+0x114>)
 8001922:	edc3 7a04 	vstr	s15, [r3, #16]
    sensorData.gz /= gScaleFactor;
 8001926:	4b09      	ldr	r3, [pc, #36]	@ (800194c <MPU_readProcessedData+0x114>)
 8001928:	edd3 6a05 	vldr	s13, [r3, #20]
 800192c:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <MPU_readProcessedData+0x11c>)
 800192e:	ed93 7a00 	vldr	s14, [r3]
 8001932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001936:	4b05      	ldr	r3, [pc, #20]	@ (800194c <MPU_readProcessedData+0x114>)
 8001938:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	2000020c 	.word	0x2000020c
 8001948:	20000254 	.word	0x20000254
 800194c:	20000218 	.word	0x20000218
 8001950:	20000230 	.word	0x20000230
 8001954:	20000258 	.word	0x20000258

08001958 <MPU_calcAttitude>:

/// @brief Calculate the attitude of the sensor in degrees using a complementary filter.
/// @param I2Cx Pointer to I2C structure config.
void MPU_calcAttitude(I2C_HandleTypeDef *I2Cx)
{
 8001958:	b5b0      	push	{r4, r5, r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
    // Read processed data
    MPU_readProcessedData(I2Cx);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff69 	bl	8001838 <MPU_readProcessedData>

    // Complementary filter
    float accelPitch = atan2(sensorData.ay, sensorData.az) * RAD2DEG;
 8001966:	4b52      	ldr	r3, [pc, #328]	@ (8001ab0 <MPU_calcAttitude+0x158>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fe0c 	bl	8000588 <__aeabi_f2d>
 8001970:	4604      	mov	r4, r0
 8001972:	460d      	mov	r5, r1
 8001974:	4b4e      	ldr	r3, [pc, #312]	@ (8001ab0 <MPU_calcAttitude+0x158>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fe05 	bl	8000588 <__aeabi_f2d>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	ec43 2b11 	vmov	d1, r2, r3
 8001986:	ec45 4b10 	vmov	d0, r4, r5
 800198a:	f00a ff37 	bl	800c7fc <atan2>
 800198e:	ec51 0b10 	vmov	r0, r1, d0
 8001992:	a345      	add	r3, pc, #276	@ (adr r3, 8001aa8 <MPU_calcAttitude+0x150>)
 8001994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001998:	f7fe fe4e 	bl	8000638 <__aeabi_dmul>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	f7ff f940 	bl	8000c28 <__aeabi_d2f>
 80019a8:	4603      	mov	r3, r0
 80019aa:	60fb      	str	r3, [r7, #12]
    float accelRoll = atan2(sensorData.ax, sensorData.az) * RAD2DEG;
 80019ac:	4b40      	ldr	r3, [pc, #256]	@ (8001ab0 <MPU_calcAttitude+0x158>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fde9 	bl	8000588 <__aeabi_f2d>
 80019b6:	4604      	mov	r4, r0
 80019b8:	460d      	mov	r5, r1
 80019ba:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab0 <MPU_calcAttitude+0x158>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fde2 	bl	8000588 <__aeabi_f2d>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	ec43 2b11 	vmov	d1, r2, r3
 80019cc:	ec45 4b10 	vmov	d0, r4, r5
 80019d0:	f00a ff14 	bl	800c7fc <atan2>
 80019d4:	ec51 0b10 	vmov	r0, r1, d0
 80019d8:	a333      	add	r3, pc, #204	@ (adr r3, 8001aa8 <MPU_calcAttitude+0x150>)
 80019da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019de:	f7fe fe2b 	bl	8000638 <__aeabi_dmul>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	f7ff f91d 	bl	8000c28 <__aeabi_d2f>
 80019ee:	4603      	mov	r3, r0
 80019f0:	60bb      	str	r3, [r7, #8]

    attitude.r = _tau * (attitude.r - sensorData.gy * _dt) + (1 - _tau) * accelRoll;
 80019f2:	4b30      	ldr	r3, [pc, #192]	@ (8001ab4 <MPU_calcAttitude+0x15c>)
 80019f4:	ed93 7a00 	vldr	s14, [r3]
 80019f8:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab0 <MPU_calcAttitude+0x158>)
 80019fa:	edd3 6a04 	vldr	s13, [r3, #16]
 80019fe:	4b2e      	ldr	r3, [pc, #184]	@ (8001ab8 <MPU_calcAttitude+0x160>)
 8001a00:	edd3 7a00 	vldr	s15, [r3]
 8001a04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001abc <MPU_calcAttitude+0x164>)
 8001a0e:	edd3 7a00 	vldr	s15, [r3]
 8001a12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a16:	4b29      	ldr	r3, [pc, #164]	@ (8001abc <MPU_calcAttitude+0x164>)
 8001a18:	edd3 7a00 	vldr	s15, [r3]
 8001a1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001a20:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a24:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a30:	4b20      	ldr	r3, [pc, #128]	@ (8001ab4 <MPU_calcAttitude+0x15c>)
 8001a32:	edc3 7a00 	vstr	s15, [r3]
    attitude.p = _tau * (attitude.p + sensorData.gx * _dt) + (1 - _tau) * accelPitch;
 8001a36:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab4 <MPU_calcAttitude+0x15c>)
 8001a38:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab0 <MPU_calcAttitude+0x158>)
 8001a3e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a42:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab8 <MPU_calcAttitude+0x160>)
 8001a44:	edd3 7a00 	vldr	s15, [r3]
 8001a48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a50:	4b1a      	ldr	r3, [pc, #104]	@ (8001abc <MPU_calcAttitude+0x164>)
 8001a52:	edd3 7a00 	vldr	s15, [r3]
 8001a56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a5a:	4b18      	ldr	r3, [pc, #96]	@ (8001abc <MPU_calcAttitude+0x164>)
 8001a5c:	edd3 7a00 	vldr	s15, [r3]
 8001a60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001a64:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a68:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a74:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab4 <MPU_calcAttitude+0x15c>)
 8001a76:	edc3 7a01 	vstr	s15, [r3, #4]
    attitude.y += sensorData.gz * _dt;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <MPU_calcAttitude+0x15c>)
 8001a7c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a80:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <MPU_calcAttitude+0x158>)
 8001a82:	edd3 6a05 	vldr	s13, [r3, #20]
 8001a86:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab8 <MPU_calcAttitude+0x160>)
 8001a88:	edd3 7a00 	vldr	s15, [r3]
 8001a8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a94:	4b07      	ldr	r3, [pc, #28]	@ (8001ab4 <MPU_calcAttitude+0x15c>)
 8001a96:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	f3af 8000 	nop.w
 8001aa8:	1a63cbb0 	.word	0x1a63cbb0
 8001aac:	404ca5dc 	.word	0x404ca5dc
 8001ab0:	20000218 	.word	0x20000218
 8001ab4:	2000023c 	.word	0x2000023c
 8001ab8:	2000024c 	.word	0x2000024c
 8001abc:	20000250 	.word	0x20000250

08001ac0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001ac4:	4b17      	ldr	r3, [pc, #92]	@ (8001b24 <MX_CAN1_Init+0x64>)
 8001ac6:	4a18      	ldr	r2, [pc, #96]	@ (8001b28 <MX_CAN1_Init+0x68>)
 8001ac8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8001aca:	4b16      	ldr	r3, [pc, #88]	@ (8001b24 <MX_CAN1_Init+0x64>)
 8001acc:	220a      	movs	r2, #10
 8001ace:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001ad0:	4b14      	ldr	r3, [pc, #80]	@ (8001b24 <MX_CAN1_Init+0x64>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001ad6:	4b13      	ldr	r3, [pc, #76]	@ (8001b24 <MX_CAN1_Init+0x64>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001adc:	4b11      	ldr	r3, [pc, #68]	@ (8001b24 <MX_CAN1_Init+0x64>)
 8001ade:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8001ae2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b24 <MX_CAN1_Init+0x64>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	@ (8001b24 <MX_CAN1_Init+0x64>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001af0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b24 <MX_CAN1_Init+0x64>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001af6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b24 <MX_CAN1_Init+0x64>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001afc:	4b09      	ldr	r3, [pc, #36]	@ (8001b24 <MX_CAN1_Init+0x64>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001b02:	4b08      	ldr	r3, [pc, #32]	@ (8001b24 <MX_CAN1_Init+0x64>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001b08:	4b06      	ldr	r3, [pc, #24]	@ (8001b24 <MX_CAN1_Init+0x64>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001b0e:	4805      	ldr	r0, [pc, #20]	@ (8001b24 <MX_CAN1_Init+0x64>)
 8001b10:	f001 f89e 	bl	8002c50 <HAL_CAN_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001b1a:	f000 fbb9 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	2000025c 	.word	0x2000025c
 8001b28:	40006400 	.word	0x40006400

08001b2c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	@ 0x28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a19      	ldr	r2, [pc, #100]	@ (8001bb0 <HAL_CAN_MspInit+0x84>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d12c      	bne.n	8001ba8 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	4b18      	ldr	r3, [pc, #96]	@ (8001bb4 <HAL_CAN_MspInit+0x88>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	4a17      	ldr	r2, [pc, #92]	@ (8001bb4 <HAL_CAN_MspInit+0x88>)
 8001b58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b5e:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <HAL_CAN_MspInit+0x88>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	4b11      	ldr	r3, [pc, #68]	@ (8001bb4 <HAL_CAN_MspInit+0x88>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	4a10      	ldr	r2, [pc, #64]	@ (8001bb4 <HAL_CAN_MspInit+0x88>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <HAL_CAN_MspInit+0x88>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b86:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b94:	2303      	movs	r3, #3
 8001b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b98:	2309      	movs	r3, #9
 8001b9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4805      	ldr	r0, [pc, #20]	@ (8001bb8 <HAL_CAN_MspInit+0x8c>)
 8001ba4:	f001 ff78 	bl	8003a98 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001ba8:	bf00      	nop
 8001baa:	3728      	adds	r7, #40	@ 0x28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40006400 	.word	0x40006400
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020400 	.word	0x40020400

08001bbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf8 <MX_DMA_Init+0x3c>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf8 <MX_DMA_Init+0x3c>)
 8001bcc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd2:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <MX_DMA_Init+0x3c>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	203a      	movs	r0, #58	@ 0x3a
 8001be4:	f001 fb1f 	bl	8003226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001be8:	203a      	movs	r0, #58	@ 0x3a
 8001bea:	f001 fb38 	bl	800325e <HAL_NVIC_EnableIRQ>

}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800

08001bfc <MX_GPIO_Init>:
        * EXTI
     PA8   ------> I2C3_SCL
     PB4   ------> I2C3_SDA
*/
void MX_GPIO_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	@ 0x28
 8001c00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
 8001c10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	4b3e      	ldr	r3, [pc, #248]	@ (8001d10 <MX_GPIO_Init+0x114>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	4a3d      	ldr	r2, [pc, #244]	@ (8001d10 <MX_GPIO_Init+0x114>)
 8001c1c:	f043 0304 	orr.w	r3, r3, #4
 8001c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c22:	4b3b      	ldr	r3, [pc, #236]	@ (8001d10 <MX_GPIO_Init+0x114>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	4b37      	ldr	r3, [pc, #220]	@ (8001d10 <MX_GPIO_Init+0x114>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	4a36      	ldr	r2, [pc, #216]	@ (8001d10 <MX_GPIO_Init+0x114>)
 8001c38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c3e:	4b34      	ldr	r3, [pc, #208]	@ (8001d10 <MX_GPIO_Init+0x114>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	4b30      	ldr	r3, [pc, #192]	@ (8001d10 <MX_GPIO_Init+0x114>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	4a2f      	ldr	r2, [pc, #188]	@ (8001d10 <MX_GPIO_Init+0x114>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d10 <MX_GPIO_Init+0x114>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	4b29      	ldr	r3, [pc, #164]	@ (8001d10 <MX_GPIO_Init+0x114>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	4a28      	ldr	r2, [pc, #160]	@ (8001d10 <MX_GPIO_Init+0x114>)
 8001c70:	f043 0302 	orr.w	r3, r3, #2
 8001c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c76:	4b26      	ldr	r3, [pc, #152]	@ (8001d10 <MX_GPIO_Init+0x114>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2120      	movs	r1, #32
 8001c86:	4823      	ldr	r0, [pc, #140]	@ (8001d14 <MX_GPIO_Init+0x118>)
 8001c88:	f002 f89a 	bl	8003dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c92:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	481d      	ldr	r0, [pc, #116]	@ (8001d18 <MX_GPIO_Init+0x11c>)
 8001ca4:	f001 fef8 	bl	8003a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ca8:	2320      	movs	r3, #32
 8001caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cac:	2301      	movs	r3, #1
 8001cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001cb8:	f107 0314 	add.w	r3, r7, #20
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4815      	ldr	r0, [pc, #84]	@ (8001d14 <MX_GPIO_Init+0x118>)
 8001cc0:	f001 feea 	bl	8003a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cca:	2312      	movs	r3, #18
 8001ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	4619      	mov	r1, r3
 8001ce0:	480c      	ldr	r0, [pc, #48]	@ (8001d14 <MX_GPIO_Init+0x118>)
 8001ce2:	f001 fed9 	bl	8003a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ce6:	2310      	movs	r3, #16
 8001ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cea:	2312      	movs	r3, #18
 8001cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4806      	ldr	r0, [pc, #24]	@ (8001d1c <MX_GPIO_Init+0x120>)
 8001d02:	f001 fec9 	bl	8003a98 <HAL_GPIO_Init>

}
 8001d06:	bf00      	nop
 8001d08:	3728      	adds	r7, #40	@ 0x28
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020000 	.word	0x40020000
 8001d18:	40020800 	.word	0x40020800
 8001d1c:	40020400 	.word	0x40020400

08001d20 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d24:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <MX_I2C1_Init+0x50>)
 8001d26:	4a13      	ldr	r2, [pc, #76]	@ (8001d74 <MX_I2C1_Init+0x54>)
 8001d28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d2a:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <MX_I2C1_Init+0x50>)
 8001d2c:	4a12      	ldr	r2, [pc, #72]	@ (8001d78 <MX_I2C1_Init+0x58>)
 8001d2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <MX_I2C1_Init+0x50>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	@ (8001d70 <MX_I2C1_Init+0x50>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <MX_I2C1_Init+0x50>)
 8001d3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d44:	4b0a      	ldr	r3, [pc, #40]	@ (8001d70 <MX_I2C1_Init+0x50>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d4a:	4b09      	ldr	r3, [pc, #36]	@ (8001d70 <MX_I2C1_Init+0x50>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d50:	4b07      	ldr	r3, [pc, #28]	@ (8001d70 <MX_I2C1_Init+0x50>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d56:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <MX_I2C1_Init+0x50>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d5c:	4804      	ldr	r0, [pc, #16]	@ (8001d70 <MX_I2C1_Init+0x50>)
 8001d5e:	f002 f849 	bl	8003df4 <HAL_I2C_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d68:	f000 fa92 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000284 	.word	0x20000284
 8001d74:	40005400 	.word	0x40005400
 8001d78:	000186a0 	.word	0x000186a0

08001d7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	@ 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a19      	ldr	r2, [pc, #100]	@ (8001e00 <HAL_I2C_MspInit+0x84>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d12b      	bne.n	8001df6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	4b18      	ldr	r3, [pc, #96]	@ (8001e04 <HAL_I2C_MspInit+0x88>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	4a17      	ldr	r2, [pc, #92]	@ (8001e04 <HAL_I2C_MspInit+0x88>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dae:	4b15      	ldr	r3, [pc, #84]	@ (8001e04 <HAL_I2C_MspInit+0x88>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dba:	23c0      	movs	r3, #192	@ 0xc0
 8001dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dbe:	2312      	movs	r3, #18
 8001dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dca:	2304      	movs	r3, #4
 8001dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dce:	f107 0314 	add.w	r3, r7, #20
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	480c      	ldr	r0, [pc, #48]	@ (8001e08 <HAL_I2C_MspInit+0x8c>)
 8001dd6:	f001 fe5f 	bl	8003a98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <HAL_I2C_MspInit+0x88>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	4a08      	ldr	r2, [pc, #32]	@ (8001e04 <HAL_I2C_MspInit+0x88>)
 8001de4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dea:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <HAL_I2C_MspInit+0x88>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001df6:	bf00      	nop
 8001df8:	3728      	adds	r7, #40	@ 0x28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40005400 	.word	0x40005400
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40020400 	.word	0x40020400

08001e0c <__io_putchar>:
 * @brief  Transmit a character over UART.
 * @param  ch: Character to transmit.
 * @retval int: The transmitted character.
 */
int __io_putchar(int ch)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001e14:	1d39      	adds	r1, r7, #4
 8001e16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	4807      	ldr	r0, [pc, #28]	@ (8001e3c <__io_putchar+0x30>)
 8001e1e:	f004 ff3b 	bl	8006c98 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001e22:	1d39      	adds	r1, r7, #4
 8001e24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e28:	2201      	movs	r2, #1
 8001e2a:	4805      	ldr	r0, [pc, #20]	@ (8001e40 <__io_putchar+0x34>)
 8001e2c:	f004 ff34 	bl	8006c98 <HAL_UART_Transmit>

	return ch;
 8001e30:	687b      	ldr	r3, [r7, #4]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000380 	.word	0x20000380
 8001e40:	20000338 	.word	0x20000338

08001e44 <BMP280_init>:
/**
 * @brief  Initialize BMP280 sensor.
 * @retval int: EXIT_SUCCESS if initialization is successful, EXIT_FAILURE if failed.
 */
int BMP280_init()
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
	if (BMP280_Check_id() == EXIT_FAILURE) return EXIT_FAILURE;		// Identification du BMP280
 8001e48:	f7ff f8ec 	bl	8001024 <BMP280_Check_id>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <BMP280_init+0x12>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00e      	b.n	8001e74 <BMP280_init+0x30>
	if (BMP280_Config() == EXIT_FAILURE) return EXIT_FAILURE;		// Configuration du BMP280
 8001e56:	f7ff f929 	bl	80010ac <BMP280_Config>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <BMP280_init+0x20>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e007      	b.n	8001e74 <BMP280_init+0x30>
	if (BMP280_calibration() == EXIT_FAILURE) return EXIT_FAILURE;	// Mise à jour des paramètres d'étalonage
 8001e64:	f7ff f96c 	bl	8001140 <BMP280_calibration>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d101      	bne.n	8001e72 <BMP280_init+0x2e>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <BMP280_init+0x30>

	return EXIT_SUCCESS;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <MPU9250_init>:
/**
 * @brief  Initialize the MPU9250 sensor.
 * @retval None
 */
void MPU9250_init()
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
	// Vérifie si l'IMU est configuré correctement et bloque si ce n'est pas le cas
	if (MPU_begin(&hi2c1, AD0_LOW, AFSR_4G, GFSR_500DPS, 0.98, 0.004) == TRUE)
 8001e7c:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8001ec0 <MPU9250_init+0x48>
 8001e80:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8001ec4 <MPU9250_init+0x4c>
 8001e84:	2301      	movs	r3, #1
 8001e86:	2201      	movs	r2, #1
 8001e88:	2168      	movs	r1, #104	@ 0x68
 8001e8a:	480f      	ldr	r0, [pc, #60]	@ (8001ec8 <MPU9250_init+0x50>)
 8001e8c:	f7ff fa98 	bl	80013c0 <MPU_begin>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d002      	beq.n	8001e9c <MPU9250_init+0x24>
	{
		//printf("Centrale inertielle configurée correctement\r\n");
	}
	else
	{
		printf("ERREUR!\r\n");
 8001e96:	480d      	ldr	r0, [pc, #52]	@ (8001ecc <MPU9250_init+0x54>)
 8001e98:	f007 f920 	bl	80090dc <puts>
	}

	// Calibre l'IMU
	if (VERBOSE) printf("CALIBRATION EN COURS...\r\n");
	if (gyro_K == 0) gyro_K = GYRO_CAL_POINTS;
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed0 <MPU9250_init+0x58>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d103      	bne.n	8001eac <MPU9250_init+0x34>
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed0 <MPU9250_init+0x58>)
 8001ea6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001eaa:	601a      	str	r2, [r3, #0]
	MPU_calibrateGyro(&hi2c1, gyro_K);
 8001eac:	4b08      	ldr	r3, [pc, #32]	@ (8001ed0 <MPU9250_init+0x58>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4804      	ldr	r0, [pc, #16]	@ (8001ec8 <MPU9250_init+0x50>)
 8001eb6:	f7ff fc53 	bl	8001760 <MPU_calibrateGyro>
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	3b83126f 	.word	0x3b83126f
 8001ec4:	3f7ae148 	.word	0x3f7ae148
 8001ec8:	20000284 	.word	0x20000284
 8001ecc:	0800cd94 	.word	0x0800cd94
 8001ed0:	200002e0 	.word	0x200002e0

08001ed4 <MOT_Init>:
/**
 * @brief  Initialize the motor driver and CAN interface.
 * @retval None
 */
void MOT_Init()
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	CAN_Init();
 8001ed8:	f000 f9e0 	bl	800229c <CAN_Init>
	MOT_Set_mode(MOT_MODE_ANTICLOCKWISE, 1, 1);
 8001edc:	2201      	movs	r2, #1
 8001ede:	2101      	movs	r1, #1
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f000 fae9 	bl	80024b8 <MOT_Set_mode>
	MOT_Set_origin();
 8001ee6:	f000 fb01 	bl	80024ec <MOT_Set_origin>
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <HAL_TIM_PeriodElapsedCallback>:
 * @brief  Period elapsed callback in non-blocking mode.
 * @param  htim: TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) // Check if the interrupt is from Timer 2
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f00:	d139      	bne.n	8001f76 <HAL_TIM_PeriodElapsedCallback+0x86>
	{
		// Motor movement proportional to the temperature
		angle += (int)(BMP280_get_temperature() * proportional_coeff)%360 - 180;
 8001f02:	f7ff fa1f 	bl	8001344 <BMP280_get_temperature>
 8001f06:	ee07 0a90 	vmov	s15, r0
 8001f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f0e:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001f80 <HAL_TIM_PeriodElapsedCallback+0x90>
 8001f12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f1a:	ee17 2a90 	vmov	r2, s15
 8001f1e:	4b19      	ldr	r3, [pc, #100]	@ (8001f84 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001f20:	fb83 1302 	smull	r1, r3, r3, r2
 8001f24:	4413      	add	r3, r2
 8001f26:	1219      	asrs	r1, r3, #8
 8001f28:	17d3      	asrs	r3, r2, #31
 8001f2a:	1acb      	subs	r3, r1, r3
 8001f2c:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8001f30:	fb01 f303 	mul.w	r3, r1, r3
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	f1a3 02b4 	sub.w	r2, r3, #180	@ 0xb4
 8001f3a:	4b13      	ldr	r3, [pc, #76]	@ (8001f88 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	4a11      	ldr	r2, [pc, #68]	@ (8001f88 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001f42:	6013      	str	r3, [r2, #0]

		// Sign and angle change to do complete rotations
		if (angle>0) MOT_Rotate(angle, MOT_ANGLE_POSITIVE);
 8001f44:	4b10      	ldr	r3, [pc, #64]	@ (8001f88 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	dd07      	ble.n	8001f5c <HAL_TIM_PeriodElapsedCallback+0x6c>
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f88 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2100      	movs	r1, #0
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 fad8 	bl	800250a <MOT_Rotate>
		else if (angle<0) MOT_Rotate(-angle, MOT_ANGLE_NEGATIVE);
	}
}
 8001f5a:	e00c      	b.n	8001f76 <HAL_TIM_PeriodElapsedCallback+0x86>
		else if (angle<0) MOT_Rotate(-angle, MOT_ANGLE_NEGATIVE);
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f88 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	da08      	bge.n	8001f76 <HAL_TIM_PeriodElapsedCallback+0x86>
 8001f64:	4b08      	ldr	r3, [pc, #32]	@ (8001f88 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	425b      	negs	r3, r3
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2101      	movs	r1, #1
 8001f70:	4618      	mov	r0, r3
 8001f72:	f000 faca 	bl	800250a <MOT_Rotate>
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	38d1b717 	.word	0x38d1b717
 8001f84:	b60b60b7 	.word	0xb60b60b7
 8001f88:	200002e4 	.word	0x200002e4

08001f8c <parse_RaspberryPI_Request>:
 * @brief  Process the command received from the Raspberry Pi over UART.
 * @param	String to parse, of type char
 * @retval	None
 */
void parse_RaspberryPI_Request(char* cmd)
{
 8001f8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f90:	b086      	sub	sp, #24
 8001f92:	af04      	add	r7, sp, #16
 8001f94:	6078      	str	r0, [r7, #4]
	if (!strncmp(cmd, "GET_T", 5)) {
 8001f96:	2205      	movs	r2, #5
 8001f98:	4949      	ldr	r1, [pc, #292]	@ (80020c0 <parse_RaspberryPI_Request+0x134>)
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f007 f9a6 	bl	80092ec <strncmp>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d116      	bne.n	8001fd4 <parse_RaspberryPI_Request+0x48>
		printf("T=+%.2f_C\r\n", (float) (BMP280_get_temperature()/100));
 8001fa6:	f7ff f9cd 	bl	8001344 <BMP280_get_temperature>
 8001faa:	4603      	mov	r3, r0
 8001fac:	4a45      	ldr	r2, [pc, #276]	@ (80020c4 <parse_RaspberryPI_Request+0x138>)
 8001fae:	fb82 1203 	smull	r1, r2, r2, r3
 8001fb2:	1152      	asrs	r2, r2, #5
 8001fb4:	17db      	asrs	r3, r3, #31
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	ee07 3a90 	vmov	s15, r3
 8001fbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fc0:	ee17 0a90 	vmov	r0, s15
 8001fc4:	f7fe fae0 	bl	8000588 <__aeabi_f2d>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	483e      	ldr	r0, [pc, #248]	@ (80020c8 <parse_RaspberryPI_Request+0x13c>)
 8001fce:	f007 f81d 	bl	800900c <iprintf>
		printf("A=%.1f;%.1f;%.1f\r\n", attitude.r, attitude.p, attitude.y);
	}
	else {
		printf("Unknown request: %s\r\n", cmd);
	}
}
 8001fd2:	e070      	b.n	80020b6 <parse_RaspberryPI_Request+0x12a>
	else if (!strncmp(cmd, "GET_P", 5)) {
 8001fd4:	2205      	movs	r2, #5
 8001fd6:	493d      	ldr	r1, [pc, #244]	@ (80020cc <parse_RaspberryPI_Request+0x140>)
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f007 f987 	bl	80092ec <strncmp>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10b      	bne.n	8001ffc <parse_RaspberryPI_Request+0x70>
		printf("P=%dPa\r\n", (int) (BMP280_get_pressure()/256));
 8001fe4:	f7ff f9cd 	bl	8001382 <BMP280_get_pressure>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	da00      	bge.n	8001ff0 <parse_RaspberryPI_Request+0x64>
 8001fee:	33ff      	adds	r3, #255	@ 0xff
 8001ff0:	121b      	asrs	r3, r3, #8
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4836      	ldr	r0, [pc, #216]	@ (80020d0 <parse_RaspberryPI_Request+0x144>)
 8001ff6:	f007 f809 	bl	800900c <iprintf>
}
 8001ffa:	e05c      	b.n	80020b6 <parse_RaspberryPI_Request+0x12a>
	else if (!strncmp(cmd, "SET_K", 5)) {
 8001ffc:	2205      	movs	r2, #5
 8001ffe:	4935      	ldr	r1, [pc, #212]	@ (80020d4 <parse_RaspberryPI_Request+0x148>)
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f007 f973 	bl	80092ec <strncmp>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10a      	bne.n	8002022 <parse_RaspberryPI_Request+0x96>
		MPU_calibrateGyro(&hi2c1, gyro_K);
 800200c:	4b32      	ldr	r3, [pc, #200]	@ (80020d8 <parse_RaspberryPI_Request+0x14c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	b29b      	uxth	r3, r3
 8002012:	4619      	mov	r1, r3
 8002014:	4831      	ldr	r0, [pc, #196]	@ (80020dc <parse_RaspberryPI_Request+0x150>)
 8002016:	f7ff fba3 	bl	8001760 <MPU_calibrateGyro>
		printf("SET_K=OK\r\n");
 800201a:	4831      	ldr	r0, [pc, #196]	@ (80020e0 <parse_RaspberryPI_Request+0x154>)
 800201c:	f007 f85e 	bl	80090dc <puts>
}
 8002020:	e049      	b.n	80020b6 <parse_RaspberryPI_Request+0x12a>
	else if (!strncmp(cmd, "GET_K", 5)) {
 8002022:	2205      	movs	r2, #5
 8002024:	492f      	ldr	r1, [pc, #188]	@ (80020e4 <parse_RaspberryPI_Request+0x158>)
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f007 f960 	bl	80092ec <strncmp>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d113      	bne.n	800205a <parse_RaspberryPI_Request+0xce>
		printf("K=%.5f\r\n", (float) gyro_K/100);
 8002032:	4b29      	ldr	r3, [pc, #164]	@ (80020d8 <parse_RaspberryPI_Request+0x14c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	ee07 3a90 	vmov	s15, r3
 800203a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800203e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80020e8 <parse_RaspberryPI_Request+0x15c>
 8002042:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002046:	ee16 0a90 	vmov	r0, s13
 800204a:	f7fe fa9d 	bl	8000588 <__aeabi_f2d>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4826      	ldr	r0, [pc, #152]	@ (80020ec <parse_RaspberryPI_Request+0x160>)
 8002054:	f006 ffda 	bl	800900c <iprintf>
}
 8002058:	e02d      	b.n	80020b6 <parse_RaspberryPI_Request+0x12a>
	else if (!strncmp(cmd, "GET_A", 5)) {
 800205a:	2205      	movs	r2, #5
 800205c:	4924      	ldr	r1, [pc, #144]	@ (80020f0 <parse_RaspberryPI_Request+0x164>)
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f007 f944 	bl	80092ec <strncmp>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d121      	bne.n	80020ae <parse_RaspberryPI_Request+0x122>
		MPU_calcAttitude(&hi2c1);
 800206a:	481c      	ldr	r0, [pc, #112]	@ (80020dc <parse_RaspberryPI_Request+0x150>)
 800206c:	f7ff fc74 	bl	8001958 <MPU_calcAttitude>
		printf("A=%.1f;%.1f;%.1f\r\n", attitude.r, attitude.p, attitude.y);
 8002070:	4b20      	ldr	r3, [pc, #128]	@ (80020f4 <parse_RaspberryPI_Request+0x168>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fa87 	bl	8000588 <__aeabi_f2d>
 800207a:	4680      	mov	r8, r0
 800207c:	4689      	mov	r9, r1
 800207e:	4b1d      	ldr	r3, [pc, #116]	@ (80020f4 <parse_RaspberryPI_Request+0x168>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fa80 	bl	8000588 <__aeabi_f2d>
 8002088:	4604      	mov	r4, r0
 800208a:	460d      	mov	r5, r1
 800208c:	4b19      	ldr	r3, [pc, #100]	@ (80020f4 <parse_RaspberryPI_Request+0x168>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fa79 	bl	8000588 <__aeabi_f2d>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800209e:	e9cd 4500 	strd	r4, r5, [sp]
 80020a2:	4642      	mov	r2, r8
 80020a4:	464b      	mov	r3, r9
 80020a6:	4814      	ldr	r0, [pc, #80]	@ (80020f8 <parse_RaspberryPI_Request+0x16c>)
 80020a8:	f006 ffb0 	bl	800900c <iprintf>
}
 80020ac:	e003      	b.n	80020b6 <parse_RaspberryPI_Request+0x12a>
		printf("Unknown request: %s\r\n", cmd);
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	4812      	ldr	r0, [pc, #72]	@ (80020fc <parse_RaspberryPI_Request+0x170>)
 80020b2:	f006 ffab 	bl	800900c <iprintf>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020c0:	0800cda0 	.word	0x0800cda0
 80020c4:	51eb851f 	.word	0x51eb851f
 80020c8:	0800cda8 	.word	0x0800cda8
 80020cc:	0800cdb4 	.word	0x0800cdb4
 80020d0:	0800cdbc 	.word	0x0800cdbc
 80020d4:	0800cdc8 	.word	0x0800cdc8
 80020d8:	200002e0 	.word	0x200002e0
 80020dc:	20000284 	.word	0x20000284
 80020e0:	0800cdd0 	.word	0x0800cdd0
 80020e4:	0800cddc 	.word	0x0800cddc
 80020e8:	42c80000 	.word	0x42c80000
 80020ec:	0800cde4 	.word	0x0800cde4
 80020f0:	0800cdf0 	.word	0x0800cdf0
 80020f4:	2000023c 	.word	0x2000023c
 80020f8:	0800cdf8 	.word	0x0800cdf8
 80020fc:	0800ce0c 	.word	0x0800ce0c

08002100 <HAL_UARTEx_RxEventCallback>:
 * @param  huart: Pointer to the UART handle.
 * @param  Size: Size of received data.
 * @retval None
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a07      	ldr	r2, [pc, #28]	@ (8002130 <HAL_UARTEx_RxEventCallback+0x30>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d107      	bne.n	8002126 <HAL_UARTEx_RxEventCallback+0x26>
	{
		// Restart reception for the next byte
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*)serial_buff, sizeof(serial_buff));
 8002116:	2207      	movs	r2, #7
 8002118:	4906      	ldr	r1, [pc, #24]	@ (8002134 <HAL_UARTEx_RxEventCallback+0x34>)
 800211a:	4807      	ldr	r0, [pc, #28]	@ (8002138 <HAL_UARTEx_RxEventCallback+0x38>)
 800211c:	f004 fe47 	bl	8006dae <HAL_UARTEx_ReceiveToIdle_DMA>
		parse_RaspberryPI_Request(serial_buff);
 8002120:	4804      	ldr	r0, [pc, #16]	@ (8002134 <HAL_UARTEx_RxEventCallback+0x34>)
 8002122:	f7ff ff33 	bl	8001f8c <parse_RaspberryPI_Request>
	}
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40011000 	.word	0x40011000
 8002134:	200002d8 	.word	0x200002d8
 8002138:	20000338 	.word	0x20000338

0800213c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002140:	f000 fcf0 	bl	8002b24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002144:	f000 f838 	bl	80021b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002148:	f7ff fd58 	bl	8001bfc <MX_GPIO_Init>
	MX_DMA_Init();
 800214c:	f7ff fd36 	bl	8001bbc <MX_DMA_Init>
	MX_USART2_UART_Init();
 8002150:	f000 fbdc 	bl	800290c <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 8002154:	f000 fbb0 	bl	80028b8 <MX_USART1_UART_Init>
	MX_CAN1_Init();
 8002158:	f7ff fcb2 	bl	8001ac0 <MX_CAN1_Init>
	MX_TIM2_Init();
 800215c:	f000 fb3a 	bl	80027d4 <MX_TIM2_Init>
	MX_I2C1_Init();
 8002160:	f7ff fdde 	bl	8001d20 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	printf("\r\n=== TP Capteurs & Reseaux ===\r\n");
 8002164:	4810      	ldr	r0, [pc, #64]	@ (80021a8 <main+0x6c>)
 8002166:	f006 ffb9 	bl	80090dc <puts>
	// Initialize external peripherals
	if (BMP280_init() == EXIT_FAILURE) return EXIT_FAILURE;
 800216a:	f7ff fe6b 	bl	8001e44 <BMP280_init>
 800216e:	4603      	mov	r3, r0
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <main+0x3c>
 8002174:	2301      	movs	r3, #1
 8002176:	e015      	b.n	80021a4 <main+0x68>
	MOT_Init();
 8002178:	f7ff feac 	bl	8001ed4 <MOT_Init>
	MPU9250_init();
 800217c:	f7ff fe7c 	bl	8001e78 <MPU9250_init>

	// Enable Timer 2 IT
	HAL_TIM_Base_Start_IT(&htim2);
 8002180:	480a      	ldr	r0, [pc, #40]	@ (80021ac <main+0x70>)
 8002182:	f004 f913 	bl	80063ac <HAL_TIM_Base_Start_IT>
	// Start USART1 DMA reception
	if (HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxByte, sizeof(rxByte)) != HAL_OK) {
	    printf("DMA Reception Error!\r\n");
	}
	*/
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*)serial_buff, sizeof(serial_buff));
 8002186:	2207      	movs	r2, #7
 8002188:	4909      	ldr	r1, [pc, #36]	@ (80021b0 <main+0x74>)
 800218a:	480a      	ldr	r0, [pc, #40]	@ (80021b4 <main+0x78>)
 800218c:	f004 fe0f 	bl	8006dae <HAL_UARTEx_ReceiveToIdle_DMA>
	// Enable UART IDLE interrupt
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8002190:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <main+0x78>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <main+0x78>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0210 	orr.w	r2, r2, #16
 800219e:	60da      	str	r2, [r3, #12]
	//HAL_UART_DMAResume(&huart1);
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80021a0:	bf00      	nop
 80021a2:	e7fd      	b.n	80021a0 <main+0x64>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	0800ce24 	.word	0x0800ce24
 80021ac:	200002f0 	.word	0x200002f0
 80021b0:	200002d8 	.word	0x200002d8
 80021b4:	20000338 	.word	0x20000338

080021b8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b094      	sub	sp, #80	@ 0x50
 80021bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021be:	f107 031c 	add.w	r3, r7, #28
 80021c2:	2234      	movs	r2, #52	@ 0x34
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f007 f888 	bl	80092dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021cc:	f107 0308 	add.w	r3, r7, #8
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80021dc:	2300      	movs	r3, #0
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	4b29      	ldr	r3, [pc, #164]	@ (8002288 <SystemClock_Config+0xd0>)
 80021e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e4:	4a28      	ldr	r2, [pc, #160]	@ (8002288 <SystemClock_Config+0xd0>)
 80021e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ec:	4b26      	ldr	r3, [pc, #152]	@ (8002288 <SystemClock_Config+0xd0>)
 80021ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80021f8:	2300      	movs	r3, #0
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	4b23      	ldr	r3, [pc, #140]	@ (800228c <SystemClock_Config+0xd4>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002204:	4a21      	ldr	r2, [pc, #132]	@ (800228c <SystemClock_Config+0xd4>)
 8002206:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	4b1f      	ldr	r3, [pc, #124]	@ (800228c <SystemClock_Config+0xd4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002214:	603b      	str	r3, [r7, #0]
 8002216:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002218:	2302      	movs	r3, #2
 800221a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800221c:	2301      	movs	r3, #1
 800221e:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002220:	2310      	movs	r3, #16
 8002222:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002224:	2302      	movs	r3, #2
 8002226:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002228:	2300      	movs	r3, #0
 800222a:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 800222c:	2308      	movs	r3, #8
 800222e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 80;
 8002230:	2350      	movs	r3, #80	@ 0x50
 8002232:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002234:	2302      	movs	r3, #2
 8002236:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8002238:	2302      	movs	r3, #2
 800223a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800223c:	2302      	movs	r3, #2
 800223e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002240:	f107 031c 	add.w	r3, r7, #28
 8002244:	4618      	mov	r0, r3
 8002246:	f003 fdc3 	bl	8005dd0 <HAL_RCC_OscConfig>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8002250:	f000 f81e 	bl	8002290 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002254:	230f      	movs	r3, #15
 8002256:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002258:	2302      	movs	r3, #2
 800225a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002260:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002264:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800226a:	f107 0308 	add.w	r3, r7, #8
 800226e:	2102      	movs	r1, #2
 8002270:	4618      	mov	r0, r3
 8002272:	f003 fa63 	bl	800573c <HAL_RCC_ClockConfig>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <SystemClock_Config+0xc8>
	{
		Error_Handler();
 800227c:	f000 f808 	bl	8002290 <Error_Handler>
	}
}
 8002280:	bf00      	nop
 8002282:	3750      	adds	r7, #80	@ 0x50
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40023800 	.word	0x40023800
 800228c:	40007000 	.word	0x40007000

08002290 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002294:	b672      	cpsid	i
}
 8002296:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002298:	bf00      	nop
 800229a:	e7fd      	b.n	8002298 <Error_Handler+0x8>

0800229c <CAN_Init>:

/**
 * @brief Initialises the CAN communication
 */
void CAN_Init()
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	logs = FALSE;
 80022a2:	4b26      	ldr	r3, [pc, #152]	@ (800233c <CAN_Init+0xa0>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

	status = HAL_CAN_Start(&hcan1);
 80022a8:	4825      	ldr	r0, [pc, #148]	@ (8002340 <CAN_Init+0xa4>)
 80022aa:	f000 fdcc 	bl	8002e46 <HAL_CAN_Start>
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]

	switch (status)
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d82f      	bhi.n	8002318 <CAN_Init+0x7c>
 80022b8:	a201      	add	r2, pc, #4	@ (adr r2, 80022c0 <CAN_Init+0x24>)
 80022ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022be:	bf00      	nop
 80022c0:	080022d1 	.word	0x080022d1
 80022c4:	080022e1 	.word	0x080022e1
 80022c8:	080022f5 	.word	0x080022f5
 80022cc:	08002305 	.word	0x08002305
	{
	case HAL_OK:
		if (logs == TRUE) printf("CAN started successfully.\r\n");
 80022d0:	4b1a      	ldr	r3, [pc, #104]	@ (800233c <CAN_Init+0xa0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d129      	bne.n	800232c <CAN_Init+0x90>
 80022d8:	481a      	ldr	r0, [pc, #104]	@ (8002344 <CAN_Init+0xa8>)
 80022da:	f006 feff 	bl	80090dc <puts>
		break;
 80022de:	e025      	b.n	800232c <CAN_Init+0x90>
	case HAL_ERROR:
		if (logs == TRUE) printf("Error: CAN start failed.\r\n");
 80022e0:	4b16      	ldr	r3, [pc, #88]	@ (800233c <CAN_Init+0xa0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d102      	bne.n	80022ee <CAN_Init+0x52>
 80022e8:	4817      	ldr	r0, [pc, #92]	@ (8002348 <CAN_Init+0xac>)
 80022ea:	f006 fef7 	bl	80090dc <puts>
		Error_Handler(); // Optional: Go to error handler
 80022ee:	f7ff ffcf 	bl	8002290 <Error_Handler>
		break;
 80022f2:	e01e      	b.n	8002332 <CAN_Init+0x96>
	case HAL_BUSY:
		if (logs == TRUE) printf("Warning: CAN is busy. Retry later.\r\n");
 80022f4:	4b11      	ldr	r3, [pc, #68]	@ (800233c <CAN_Init+0xa0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d119      	bne.n	8002330 <CAN_Init+0x94>
 80022fc:	4813      	ldr	r0, [pc, #76]	@ (800234c <CAN_Init+0xb0>)
 80022fe:	f006 feed 	bl	80090dc <puts>
		// Optional: add retry logic if desired
		break;
 8002302:	e015      	b.n	8002330 <CAN_Init+0x94>
	case HAL_TIMEOUT:
		if (logs == TRUE) printf("Error: CAN start timed out.\r\n");
 8002304:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <CAN_Init+0xa0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d102      	bne.n	8002312 <CAN_Init+0x76>
 800230c:	4810      	ldr	r0, [pc, #64]	@ (8002350 <CAN_Init+0xb4>)
 800230e:	f006 fee5 	bl	80090dc <puts>
		Error_Handler(); // Optional: Go to error handler
 8002312:	f7ff ffbd 	bl	8002290 <Error_Handler>
		break;
 8002316:	e00c      	b.n	8002332 <CAN_Init+0x96>
	default:
		if (logs == TRUE) printf("Unknown status returned from HAL_CAN_Start.\r\n");
 8002318:	4b08      	ldr	r3, [pc, #32]	@ (800233c <CAN_Init+0xa0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d102      	bne.n	8002326 <CAN_Init+0x8a>
 8002320:	480c      	ldr	r0, [pc, #48]	@ (8002354 <CAN_Init+0xb8>)
 8002322:	f006 fedb 	bl	80090dc <puts>
		Error_Handler(); // Optional: Go to error handler
 8002326:	f7ff ffb3 	bl	8002290 <Error_Handler>
		break;
 800232a:	e002      	b.n	8002332 <CAN_Init+0x96>
		break;
 800232c:	bf00      	nop
 800232e:	e000      	b.n	8002332 <CAN_Init+0x96>
		break;
 8002330:	bf00      	nop
	}
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	200002e8 	.word	0x200002e8
 8002340:	2000025c 	.word	0x2000025c
 8002344:	0800ce48 	.word	0x0800ce48
 8002348:	0800ce64 	.word	0x0800ce64
 800234c:	0800ce80 	.word	0x0800ce80
 8002350:	0800cea4 	.word	0x0800cea4
 8002354:	0800cec4 	.word	0x0800cec4

08002358 <CAN_Send>:
 *               			destination or type of the message being sent.
 *
 * @retval None
 */
void CAN_Send(uint8_t * aData, uint32_t size, uint32_t msg_id)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b092      	sub	sp, #72	@ 0x48
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status;
	CAN_TxHeaderTypeDef header;
	uint32_t txMailbox;
	int retryCount = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	647b      	str	r3, [r7, #68]	@ 0x44
	const int maxRetries = 5;
 8002368:	2305      	movs	r3, #5
 800236a:	63fb      	str	r3, [r7, #60]	@ 0x3c

	// Initialiser le header
	header.StdId = msg_id;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	61bb      	str	r3, [r7, #24]
	header.IDE = CAN_ID_STD;
 8002370:	2300      	movs	r3, #0
 8002372:	623b      	str	r3, [r7, #32]
	header.RTR = CAN_RTR_DATA;
 8002374:	2300      	movs	r3, #0
 8002376:	627b      	str	r3, [r7, #36]	@ 0x24
	header.DLC = size;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	62bb      	str	r3, [r7, #40]	@ 0x28
	header.TransmitGlobalTime = DISABLE;
 800237c:	2300      	movs	r3, #0
 800237e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	// Pointer vers les variables locales
	CAN_TxHeaderTypeDef *pHeader = &header;
 8002382:	f107 0318 	add.w	r3, r7, #24
 8002386:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t *pTxMailbox = &txMailbox;
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	637b      	str	r3, [r7, #52]	@ 0x34

	// Attempt to add the CAN message to the transmission mailbox with retry logic
	do {
		status = HAL_CAN_AddTxMessage(&hcan1, pHeader, aData, pTxMailbox);
 800238e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002394:	483e      	ldr	r0, [pc, #248]	@ (8002490 <CAN_Send+0x138>)
 8002396:	f000 fd9a 	bl	8002ece <HAL_CAN_AddTxMessage>
 800239a:	4603      	mov	r3, r0
 800239c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		switch (status)
 80023a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d852      	bhi.n	800244e <CAN_Send+0xf6>
 80023a8:	a201      	add	r2, pc, #4	@ (adr r2, 80023b0 <CAN_Send+0x58>)
 80023aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ae:	bf00      	nop
 80023b0:	080023c1 	.word	0x080023c1
 80023b4:	08002427 	.word	0x08002427
 80023b8:	080023fd 	.word	0x080023fd
 80023bc:	0800243b 	.word	0x0800243b
		{
		case HAL_OK:
			if (logs == TRUE)
 80023c0:	4b34      	ldr	r3, [pc, #208]	@ (8002494 <CAN_Send+0x13c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d15e      	bne.n	8002486 <CAN_Send+0x12e>
			{
			printf("CAN message ");
 80023c8:	4833      	ldr	r0, [pc, #204]	@ (8002498 <CAN_Send+0x140>)
 80023ca:	f006 fe1f 	bl	800900c <iprintf>
			for (int i = 0; i<size; i++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80023d2:	e00a      	b.n	80023ea <CAN_Send+0x92>
				printf(" 0x%X", aData[i]);
 80023d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	4413      	add	r3, r2
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	4619      	mov	r1, r3
 80023de:	482f      	ldr	r0, [pc, #188]	@ (800249c <CAN_Send+0x144>)
 80023e0:	f006 fe14 	bl	800900c <iprintf>
			for (int i = 0; i<size; i++)
 80023e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023e6:	3301      	adds	r3, #1
 80023e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80023ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d8f0      	bhi.n	80023d4 <CAN_Send+0x7c>
			printf(" sent successfully to  0x%X.\r\n", (unsigned int)msg_id);
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	482a      	ldr	r0, [pc, #168]	@ (80024a0 <CAN_Send+0x148>)
 80023f6:	f006 fe09 	bl	800900c <iprintf>
			}
			return;  // Exit the function if the message was sent successfully
 80023fa:	e044      	b.n	8002486 <CAN_Send+0x12e>

		case HAL_BUSY:
			retryCount++;
 80023fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023fe:	3301      	adds	r3, #1
 8002400:	647b      	str	r3, [r7, #68]	@ 0x44
			if (logs == TRUE) printf("Warning: CAN bus is busy, retrying (%d/%d)...\r\n", retryCount, maxRetries);
 8002402:	4b24      	ldr	r3, [pc, #144]	@ (8002494 <CAN_Send+0x13c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d104      	bne.n	8002414 <CAN_Send+0xbc>
 800240a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800240c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800240e:	4825      	ldr	r0, [pc, #148]	@ (80024a4 <CAN_Send+0x14c>)
 8002410:	f006 fdfc 	bl	800900c <iprintf>
			HAL_Delay(10);  // Optional: Add a small delay between retries
 8002414:	200a      	movs	r0, #10
 8002416:	f000 fbf7 	bl	8002c08 <HAL_Delay>
			break;
 800241a:	bf00      	nop
			if (logs == TRUE) printf("Unknown status returned from HAL_CAN_AddTxMessage.\r\n");
			Error_Handler();  // Optional: Handle unexpected status
			return;
		}

	} while (status == HAL_BUSY && retryCount < maxRetries);
 800241c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002420:	2b02      	cmp	r3, #2
 8002422:	d122      	bne.n	800246a <CAN_Send+0x112>
 8002424:	e01d      	b.n	8002462 <CAN_Send+0x10a>
			if (logs == TRUE) printf("Error: Failed to send CAN message.\r\n");
 8002426:	4b1b      	ldr	r3, [pc, #108]	@ (8002494 <CAN_Send+0x13c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d102      	bne.n	8002434 <CAN_Send+0xdc>
 800242e:	481e      	ldr	r0, [pc, #120]	@ (80024a8 <CAN_Send+0x150>)
 8002430:	f006 fe54 	bl	80090dc <puts>
			Error_Handler();  // Optional: Go to error handler for critical failure
 8002434:	f7ff ff2c 	bl	8002290 <Error_Handler>
			return;
 8002438:	e026      	b.n	8002488 <CAN_Send+0x130>
			if (logs == TRUE) printf("Error: CAN message send timed out.\r\n");
 800243a:	4b16      	ldr	r3, [pc, #88]	@ (8002494 <CAN_Send+0x13c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d102      	bne.n	8002448 <CAN_Send+0xf0>
 8002442:	481a      	ldr	r0, [pc, #104]	@ (80024ac <CAN_Send+0x154>)
 8002444:	f006 fe4a 	bl	80090dc <puts>
			Error_Handler();  // Optional: Go to error handler for timeout
 8002448:	f7ff ff22 	bl	8002290 <Error_Handler>
			return;
 800244c:	e01c      	b.n	8002488 <CAN_Send+0x130>
			if (logs == TRUE) printf("Unknown status returned from HAL_CAN_AddTxMessage.\r\n");
 800244e:	4b11      	ldr	r3, [pc, #68]	@ (8002494 <CAN_Send+0x13c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d102      	bne.n	800245c <CAN_Send+0x104>
 8002456:	4816      	ldr	r0, [pc, #88]	@ (80024b0 <CAN_Send+0x158>)
 8002458:	f006 fe40 	bl	80090dc <puts>
			Error_Handler();  // Optional: Handle unexpected status
 800245c:	f7ff ff18 	bl	8002290 <Error_Handler>
			return;
 8002460:	e012      	b.n	8002488 <CAN_Send+0x130>
	} while (status == HAL_BUSY && retryCount < maxRetries);
 8002462:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002466:	429a      	cmp	r2, r3
 8002468:	db91      	blt.n	800238e <CAN_Send+0x36>

	if (retryCount == maxRetries)
 800246a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800246c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800246e:	429a      	cmp	r2, r3
 8002470:	d10a      	bne.n	8002488 <CAN_Send+0x130>
	{
		if (logs == TRUE) printf("Error: Exceeded maximum retries for CAN message send.\r\n");
 8002472:	4b08      	ldr	r3, [pc, #32]	@ (8002494 <CAN_Send+0x13c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d102      	bne.n	8002480 <CAN_Send+0x128>
 800247a:	480e      	ldr	r0, [pc, #56]	@ (80024b4 <CAN_Send+0x15c>)
 800247c:	f006 fe2e 	bl	80090dc <puts>
		Error_Handler();  // Optional: Go to error handler after max retries
 8002480:	f7ff ff06 	bl	8002290 <Error_Handler>
 8002484:	e000      	b.n	8002488 <CAN_Send+0x130>
			return;  // Exit the function if the message was sent successfully
 8002486:	bf00      	nop
	}
}
 8002488:	3748      	adds	r7, #72	@ 0x48
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	2000025c 	.word	0x2000025c
 8002494:	200002e8 	.word	0x200002e8
 8002498:	0800cef4 	.word	0x0800cef4
 800249c:	0800cf04 	.word	0x0800cf04
 80024a0:	0800cf0c 	.word	0x0800cf0c
 80024a4:	0800cf2c 	.word	0x0800cf2c
 80024a8:	0800cf5c 	.word	0x0800cf5c
 80024ac:	0800cf80 	.word	0x0800cf80
 80024b0:	0800cfa4 	.word	0x0800cfa4
 80024b4:	0800cfd8 	.word	0x0800cfd8

080024b8 <MOT_Set_mode>:
 * @param uint8_t direction	Rotation direction: Anti-clockwise (0x00) or Clockwise (0x01).
 * @param uint8_t steps		Number of steps, range: 0x01 to 0xFF (1 unit = 1°).
 * @param uint8_t speed		Speed of the motor, range: 0x01 = 1 ms / 1 kHz to 0xFF = 255ms / 4 Hz
 */
void MOT_Set_mode(uint8_t direction, uint8_t steps, uint8_t speed)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	71fb      	strb	r3, [r7, #7]
 80024c2:	460b      	mov	r3, r1
 80024c4:	71bb      	strb	r3, [r7, #6]
 80024c6:	4613      	mov	r3, r2
 80024c8:	717b      	strb	r3, [r7, #5]
	uint8_t aData[3];

	aData[0] = direction;
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	733b      	strb	r3, [r7, #12]
	aData[1] = steps;
 80024ce:	79bb      	ldrb	r3, [r7, #6]
 80024d0:	737b      	strb	r3, [r7, #13]
	aData[2] = speed;
 80024d2:	797b      	ldrb	r3, [r7, #5]
 80024d4:	73bb      	strb	r3, [r7, #14]

	CAN_Send(aData, 3, MOT_MODE_MANUAL_ID);
 80024d6:	f107 030c 	add.w	r3, r7, #12
 80024da:	2260      	movs	r2, #96	@ 0x60
 80024dc:	2103      	movs	r1, #3
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff ff3a 	bl	8002358 <CAN_Send>
}
 80024e4:	bf00      	nop
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <MOT_Set_origin>:

/**
 * @brief Sets the current position of the motor as the origin.
 */
void MOT_Set_origin()
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
	uint8_t aData[2];

	aData[0] = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	713b      	strb	r3, [r7, #4]
	CAN_Send(aData, 1, MOT_INIT_POS_ID);
 80024f6:	1d3b      	adds	r3, r7, #4
 80024f8:	2262      	movs	r2, #98	@ 0x62
 80024fa:	2101      	movs	r1, #1
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff ff2b 	bl	8002358 <CAN_Send>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <MOT_Rotate>:
 * @brief Rotates the Step Motor of an angle in a defined direction.
 * @param uint8_t angle Angle of rotation, range: 0x01 to 0xFF (1 unit = 1°).
 * @param uint8_t sign	Angle sign, can be positive (0x00) or negative (0x01).
 */
void MOT_Rotate(uint8_t angle, uint8_t sign)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
 8002510:	4603      	mov	r3, r0
 8002512:	460a      	mov	r2, r1
 8002514:	71fb      	strb	r3, [r7, #7]
 8002516:	4613      	mov	r3, r2
 8002518:	71bb      	strb	r3, [r7, #6]
	uint8_t aData[2];

	if (angle < MOT_ANGLE_MIN) angle = 0x00;
	if (angle > MOT_ANGLE_MAX) angle = 0xFF;

	aData[0] = angle;
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	733b      	strb	r3, [r7, #12]
	aData[1] = sign;
 800251e:	79bb      	ldrb	r3, [r7, #6]
 8002520:	737b      	strb	r3, [r7, #13]

	CAN_Send(aData, MOT_ANGLE_SIZE, MOT_ANGLE_ID);
 8002522:	f107 030c 	add.w	r3, r7, #12
 8002526:	2261      	movs	r2, #97	@ 0x61
 8002528:	2102      	movs	r1, #2
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff ff14 	bl	8002358 <CAN_Send>
}
 8002530:	bf00      	nop
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	607b      	str	r3, [r7, #4]
 8002542:	4b10      	ldr	r3, [pc, #64]	@ (8002584 <HAL_MspInit+0x4c>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002546:	4a0f      	ldr	r2, [pc, #60]	@ (8002584 <HAL_MspInit+0x4c>)
 8002548:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800254c:	6453      	str	r3, [r2, #68]	@ 0x44
 800254e:	4b0d      	ldr	r3, [pc, #52]	@ (8002584 <HAL_MspInit+0x4c>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002556:	607b      	str	r3, [r7, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	603b      	str	r3, [r7, #0]
 800255e:	4b09      	ldr	r3, [pc, #36]	@ (8002584 <HAL_MspInit+0x4c>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	4a08      	ldr	r2, [pc, #32]	@ (8002584 <HAL_MspInit+0x4c>)
 8002564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002568:	6413      	str	r3, [r2, #64]	@ 0x40
 800256a:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <HAL_MspInit+0x4c>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002576:	2007      	movs	r0, #7
 8002578:	f000 fe4a 	bl	8003210 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800257c:	bf00      	nop
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40023800 	.word	0x40023800

08002588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800258c:	bf00      	nop
 800258e:	e7fd      	b.n	800258c <NMI_Handler+0x4>

08002590 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002594:	bf00      	nop
 8002596:	e7fd      	b.n	8002594 <HardFault_Handler+0x4>

08002598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800259c:	bf00      	nop
 800259e:	e7fd      	b.n	800259c <MemManage_Handler+0x4>

080025a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025a4:	bf00      	nop
 80025a6:	e7fd      	b.n	80025a4 <BusFault_Handler+0x4>

080025a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025ac:	bf00      	nop
 80025ae:	e7fd      	b.n	80025ac <UsageFault_Handler+0x4>

080025b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025be:	b480      	push	{r7}
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025de:	f000 faf3 	bl	8002bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025ec:	4802      	ldr	r0, [pc, #8]	@ (80025f8 <TIM2_IRQHandler+0x10>)
 80025ee:	f003 ff4d 	bl	800648c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	200002f0 	.word	0x200002f0

080025fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002600:	4802      	ldr	r0, [pc, #8]	@ (800260c <USART1_IRQHandler+0x10>)
 8002602:	f004 fc31 	bl	8006e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000338 	.word	0x20000338

08002610 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002614:	4802      	ldr	r0, [pc, #8]	@ (8002620 <DMA2_Stream2_IRQHandler+0x10>)
 8002616:	f000 ffd5 	bl	80035c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	200003c8 	.word	0x200003c8

08002624 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return 1;
 8002628:	2301      	movs	r3, #1
}
 800262a:	4618      	mov	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <_kill>:

int _kill(int pid, int sig)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800263e:	f006 fec1 	bl	80093c4 <__errno>
 8002642:	4603      	mov	r3, r0
 8002644:	2216      	movs	r2, #22
 8002646:	601a      	str	r2, [r3, #0]
  return -1;
 8002648:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <_exit>:

void _exit (int status)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800265c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff ffe7 	bl	8002634 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002666:	bf00      	nop
 8002668:	e7fd      	b.n	8002666 <_exit+0x12>

0800266a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b086      	sub	sp, #24
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	e00a      	b.n	8002692 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800267c:	f3af 8000 	nop.w
 8002680:	4601      	mov	r1, r0
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	60ba      	str	r2, [r7, #8]
 8002688:	b2ca      	uxtb	r2, r1
 800268a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3301      	adds	r3, #1
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	429a      	cmp	r2, r3
 8002698:	dbf0      	blt.n	800267c <_read+0x12>
  }

  return len;
 800269a:	687b      	ldr	r3, [r7, #4]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	e009      	b.n	80026ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	60ba      	str	r2, [r7, #8]
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fba4 	bl	8001e0c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3301      	adds	r3, #1
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	dbf1      	blt.n	80026b6 <_write+0x12>
  }
  return len;
 80026d2:	687b      	ldr	r3, [r7, #4]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <_close>:

int _close(int file)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002704:	605a      	str	r2, [r3, #4]
  return 0;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <_isatty>:

int _isatty(int file)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800271c:	2301      	movs	r3, #1
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800272a:	b480      	push	{r7}
 800272c:	b085      	sub	sp, #20
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800274c:	4a14      	ldr	r2, [pc, #80]	@ (80027a0 <_sbrk+0x5c>)
 800274e:	4b15      	ldr	r3, [pc, #84]	@ (80027a4 <_sbrk+0x60>)
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002758:	4b13      	ldr	r3, [pc, #76]	@ (80027a8 <_sbrk+0x64>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002760:	4b11      	ldr	r3, [pc, #68]	@ (80027a8 <_sbrk+0x64>)
 8002762:	4a12      	ldr	r2, [pc, #72]	@ (80027ac <_sbrk+0x68>)
 8002764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002766:	4b10      	ldr	r3, [pc, #64]	@ (80027a8 <_sbrk+0x64>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	429a      	cmp	r2, r3
 8002772:	d207      	bcs.n	8002784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002774:	f006 fe26 	bl	80093c4 <__errno>
 8002778:	4603      	mov	r3, r0
 800277a:	220c      	movs	r2, #12
 800277c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002782:	e009      	b.n	8002798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002784:	4b08      	ldr	r3, [pc, #32]	@ (80027a8 <_sbrk+0x64>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800278a:	4b07      	ldr	r3, [pc, #28]	@ (80027a8 <_sbrk+0x64>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	4a05      	ldr	r2, [pc, #20]	@ (80027a8 <_sbrk+0x64>)
 8002794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002796:	68fb      	ldr	r3, [r7, #12]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20020000 	.word	0x20020000
 80027a4:	00000400 	.word	0x00000400
 80027a8:	200002ec 	.word	0x200002ec
 80027ac:	20000578 	.word	0x20000578

080027b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027b4:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <SystemInit+0x20>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ba:	4a05      	ldr	r2, [pc, #20]	@ (80027d0 <SystemInit+0x20>)
 80027bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027da:	f107 0308 	add.w	r3, r7, #8
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e8:	463b      	mov	r3, r7
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002868 <MX_TIM2_Init+0x94>)
 80027f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 80027f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002868 <MX_TIM2_Init+0x94>)
 80027fa:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80027fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002800:	4b19      	ldr	r3, [pc, #100]	@ (8002868 <MX_TIM2_Init+0x94>)
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002806:	4b18      	ldr	r3, [pc, #96]	@ (8002868 <MX_TIM2_Init+0x94>)
 8002808:	2263      	movs	r2, #99	@ 0x63
 800280a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800280c:	4b16      	ldr	r3, [pc, #88]	@ (8002868 <MX_TIM2_Init+0x94>)
 800280e:	2200      	movs	r2, #0
 8002810:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002812:	4b15      	ldr	r3, [pc, #84]	@ (8002868 <MX_TIM2_Init+0x94>)
 8002814:	2200      	movs	r2, #0
 8002816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002818:	4813      	ldr	r0, [pc, #76]	@ (8002868 <MX_TIM2_Init+0x94>)
 800281a:	f003 fd77 	bl	800630c <HAL_TIM_Base_Init>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002824:	f7ff fd34 	bl	8002290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002828:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800282c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800282e:	f107 0308 	add.w	r3, r7, #8
 8002832:	4619      	mov	r1, r3
 8002834:	480c      	ldr	r0, [pc, #48]	@ (8002868 <MX_TIM2_Init+0x94>)
 8002836:	f003 ff19 	bl	800666c <HAL_TIM_ConfigClockSource>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002840:	f7ff fd26 	bl	8002290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002844:	2300      	movs	r3, #0
 8002846:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002848:	2300      	movs	r3, #0
 800284a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800284c:	463b      	mov	r3, r7
 800284e:	4619      	mov	r1, r3
 8002850:	4805      	ldr	r0, [pc, #20]	@ (8002868 <MX_TIM2_Init+0x94>)
 8002852:	f004 f941 	bl	8006ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800285c:	f7ff fd18 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002860:	bf00      	nop
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	200002f0 	.word	0x200002f0

0800286c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800287c:	d115      	bne.n	80028aa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	4b0c      	ldr	r3, [pc, #48]	@ (80028b4 <HAL_TIM_Base_MspInit+0x48>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002886:	4a0b      	ldr	r2, [pc, #44]	@ (80028b4 <HAL_TIM_Base_MspInit+0x48>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6413      	str	r3, [r2, #64]	@ 0x40
 800288e:	4b09      	ldr	r3, [pc, #36]	@ (80028b4 <HAL_TIM_Base_MspInit+0x48>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800289a:	2200      	movs	r2, #0
 800289c:	2100      	movs	r1, #0
 800289e:	201c      	movs	r0, #28
 80028a0:	f000 fcc1 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028a4:	201c      	movs	r0, #28
 80028a6:	f000 fcda 	bl	800325e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40023800 	.word	0x40023800

080028b8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028bc:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <MX_USART1_UART_Init+0x4c>)
 80028be:	4a12      	ldr	r2, [pc, #72]	@ (8002908 <MX_USART1_UART_Init+0x50>)
 80028c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028c2:	4b10      	ldr	r3, [pc, #64]	@ (8002904 <MX_USART1_UART_Init+0x4c>)
 80028c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002904 <MX_USART1_UART_Init+0x4c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002904 <MX_USART1_UART_Init+0x4c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002904 <MX_USART1_UART_Init+0x4c>)
 80028d8:	2200      	movs	r2, #0
 80028da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028dc:	4b09      	ldr	r3, [pc, #36]	@ (8002904 <MX_USART1_UART_Init+0x4c>)
 80028de:	220c      	movs	r2, #12
 80028e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028e2:	4b08      	ldr	r3, [pc, #32]	@ (8002904 <MX_USART1_UART_Init+0x4c>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e8:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <MX_USART1_UART_Init+0x4c>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028ee:	4805      	ldr	r0, [pc, #20]	@ (8002904 <MX_USART1_UART_Init+0x4c>)
 80028f0:	f004 f982 	bl	8006bf8 <HAL_UART_Init>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80028fa:	f7ff fcc9 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000338 	.word	0x20000338
 8002908:	40011000 	.word	0x40011000

0800290c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002910:	4b11      	ldr	r3, [pc, #68]	@ (8002958 <MX_USART2_UART_Init+0x4c>)
 8002912:	4a12      	ldr	r2, [pc, #72]	@ (800295c <MX_USART2_UART_Init+0x50>)
 8002914:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002916:	4b10      	ldr	r3, [pc, #64]	@ (8002958 <MX_USART2_UART_Init+0x4c>)
 8002918:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800291c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800291e:	4b0e      	ldr	r3, [pc, #56]	@ (8002958 <MX_USART2_UART_Init+0x4c>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002924:	4b0c      	ldr	r3, [pc, #48]	@ (8002958 <MX_USART2_UART_Init+0x4c>)
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800292a:	4b0b      	ldr	r3, [pc, #44]	@ (8002958 <MX_USART2_UART_Init+0x4c>)
 800292c:	2200      	movs	r2, #0
 800292e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002930:	4b09      	ldr	r3, [pc, #36]	@ (8002958 <MX_USART2_UART_Init+0x4c>)
 8002932:	220c      	movs	r2, #12
 8002934:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002936:	4b08      	ldr	r3, [pc, #32]	@ (8002958 <MX_USART2_UART_Init+0x4c>)
 8002938:	2200      	movs	r2, #0
 800293a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800293c:	4b06      	ldr	r3, [pc, #24]	@ (8002958 <MX_USART2_UART_Init+0x4c>)
 800293e:	2200      	movs	r2, #0
 8002940:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002942:	4805      	ldr	r0, [pc, #20]	@ (8002958 <MX_USART2_UART_Init+0x4c>)
 8002944:	f004 f958 	bl	8006bf8 <HAL_UART_Init>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800294e:	f7ff fc9f 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000380 	.word	0x20000380
 800295c:	40004400 	.word	0x40004400

08002960 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08c      	sub	sp, #48	@ 0x30
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002968:	f107 031c 	add.w	r3, r7, #28
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
 8002976:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a4e      	ldr	r2, [pc, #312]	@ (8002ab8 <HAL_UART_MspInit+0x158>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d164      	bne.n	8002a4c <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	61bb      	str	r3, [r7, #24]
 8002986:	4b4d      	ldr	r3, [pc, #308]	@ (8002abc <HAL_UART_MspInit+0x15c>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298a:	4a4c      	ldr	r2, [pc, #304]	@ (8002abc <HAL_UART_MspInit+0x15c>)
 800298c:	f043 0310 	orr.w	r3, r3, #16
 8002990:	6453      	str	r3, [r2, #68]	@ 0x44
 8002992:	4b4a      	ldr	r3, [pc, #296]	@ (8002abc <HAL_UART_MspInit+0x15c>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	61bb      	str	r3, [r7, #24]
 800299c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	4b46      	ldr	r3, [pc, #280]	@ (8002abc <HAL_UART_MspInit+0x15c>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a6:	4a45      	ldr	r2, [pc, #276]	@ (8002abc <HAL_UART_MspInit+0x15c>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ae:	4b43      	ldr	r3, [pc, #268]	@ (8002abc <HAL_UART_MspInit+0x15c>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80029ba:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80029be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c0:	2302      	movs	r3, #2
 80029c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c8:	2303      	movs	r3, #3
 80029ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029cc:	2307      	movs	r3, #7
 80029ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d0:	f107 031c 	add.w	r3, r7, #28
 80029d4:	4619      	mov	r1, r3
 80029d6:	483a      	ldr	r0, [pc, #232]	@ (8002ac0 <HAL_UART_MspInit+0x160>)
 80029d8:	f001 f85e 	bl	8003a98 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80029dc:	4b39      	ldr	r3, [pc, #228]	@ (8002ac4 <HAL_UART_MspInit+0x164>)
 80029de:	4a3a      	ldr	r2, [pc, #232]	@ (8002ac8 <HAL_UART_MspInit+0x168>)
 80029e0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80029e2:	4b38      	ldr	r3, [pc, #224]	@ (8002ac4 <HAL_UART_MspInit+0x164>)
 80029e4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80029e8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029ea:	4b36      	ldr	r3, [pc, #216]	@ (8002ac4 <HAL_UART_MspInit+0x164>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029f0:	4b34      	ldr	r3, [pc, #208]	@ (8002ac4 <HAL_UART_MspInit+0x164>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029f6:	4b33      	ldr	r3, [pc, #204]	@ (8002ac4 <HAL_UART_MspInit+0x164>)
 80029f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029fc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029fe:	4b31      	ldr	r3, [pc, #196]	@ (8002ac4 <HAL_UART_MspInit+0x164>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a04:	4b2f      	ldr	r3, [pc, #188]	@ (8002ac4 <HAL_UART_MspInit+0x164>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002a0a:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac4 <HAL_UART_MspInit+0x164>)
 8002a0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a10:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a12:	4b2c      	ldr	r3, [pc, #176]	@ (8002ac4 <HAL_UART_MspInit+0x164>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a18:	4b2a      	ldr	r3, [pc, #168]	@ (8002ac4 <HAL_UART_MspInit+0x164>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002a1e:	4829      	ldr	r0, [pc, #164]	@ (8002ac4 <HAL_UART_MspInit+0x164>)
 8002a20:	f000 fc38 	bl	8003294 <HAL_DMA_Init>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002a2a:	f7ff fc31 	bl	8002290 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a24      	ldr	r2, [pc, #144]	@ (8002ac4 <HAL_UART_MspInit+0x164>)
 8002a32:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a34:	4a23      	ldr	r2, [pc, #140]	@ (8002ac4 <HAL_UART_MspInit+0x164>)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	2025      	movs	r0, #37	@ 0x25
 8002a40:	f000 fbf1 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a44:	2025      	movs	r0, #37	@ 0x25
 8002a46:	f000 fc0a 	bl	800325e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a4a:	e030      	b.n	8002aae <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a1e      	ldr	r2, [pc, #120]	@ (8002acc <HAL_UART_MspInit+0x16c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d12b      	bne.n	8002aae <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	4b18      	ldr	r3, [pc, #96]	@ (8002abc <HAL_UART_MspInit+0x15c>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	4a17      	ldr	r2, [pc, #92]	@ (8002abc <HAL_UART_MspInit+0x15c>)
 8002a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a66:	4b15      	ldr	r3, [pc, #84]	@ (8002abc <HAL_UART_MspInit+0x15c>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	4b11      	ldr	r3, [pc, #68]	@ (8002abc <HAL_UART_MspInit+0x15c>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7a:	4a10      	ldr	r2, [pc, #64]	@ (8002abc <HAL_UART_MspInit+0x15c>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a82:	4b0e      	ldr	r3, [pc, #56]	@ (8002abc <HAL_UART_MspInit+0x15c>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a8e:	230c      	movs	r3, #12
 8002a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a92:	2302      	movs	r3, #2
 8002a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a9e:	2307      	movs	r3, #7
 8002aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa2:	f107 031c 	add.w	r3, r7, #28
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4805      	ldr	r0, [pc, #20]	@ (8002ac0 <HAL_UART_MspInit+0x160>)
 8002aaa:	f000 fff5 	bl	8003a98 <HAL_GPIO_Init>
}
 8002aae:	bf00      	nop
 8002ab0:	3730      	adds	r7, #48	@ 0x30
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40011000 	.word	0x40011000
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40020000 	.word	0x40020000
 8002ac4:	200003c8 	.word	0x200003c8
 8002ac8:	40026440 	.word	0x40026440
 8002acc:	40004400 	.word	0x40004400

08002ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ad0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002ad4:	f7ff fe6c 	bl	80027b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ad8:	480c      	ldr	r0, [pc, #48]	@ (8002b0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ada:	490d      	ldr	r1, [pc, #52]	@ (8002b10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002adc:	4a0d      	ldr	r2, [pc, #52]	@ (8002b14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ae0:	e002      	b.n	8002ae8 <LoopCopyDataInit>

08002ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ae6:	3304      	adds	r3, #4

08002ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aec:	d3f9      	bcc.n	8002ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aee:	4a0a      	ldr	r2, [pc, #40]	@ (8002b18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002af0:	4c0a      	ldr	r4, [pc, #40]	@ (8002b1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002af4:	e001      	b.n	8002afa <LoopFillZerobss>

08002af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002af8:	3204      	adds	r2, #4

08002afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002afc:	d3fb      	bcc.n	8002af6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002afe:	f006 fc67 	bl	80093d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b02:	f7ff fb1b 	bl	800213c <main>
  bx  lr    
 8002b06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b10:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002b14:	0800d4e0 	.word	0x0800d4e0
  ldr r2, =_sbss
 8002b18:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002b1c:	20000578 	.word	0x20000578

08002b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b20:	e7fe      	b.n	8002b20 <ADC_IRQHandler>
	...

08002b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b28:	4b0e      	ldr	r3, [pc, #56]	@ (8002b64 <HAL_Init+0x40>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b64 <HAL_Init+0x40>)
 8002b2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b34:	4b0b      	ldr	r3, [pc, #44]	@ (8002b64 <HAL_Init+0x40>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a0a      	ldr	r2, [pc, #40]	@ (8002b64 <HAL_Init+0x40>)
 8002b3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b40:	4b08      	ldr	r3, [pc, #32]	@ (8002b64 <HAL_Init+0x40>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a07      	ldr	r2, [pc, #28]	@ (8002b64 <HAL_Init+0x40>)
 8002b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b4c:	2003      	movs	r0, #3
 8002b4e:	f000 fb5f 	bl	8003210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b52:	2000      	movs	r0, #0
 8002b54:	f000 f808 	bl	8002b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b58:	f7ff fcee 	bl	8002538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40023c00 	.word	0x40023c00

08002b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b70:	4b12      	ldr	r3, [pc, #72]	@ (8002bbc <HAL_InitTick+0x54>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4b12      	ldr	r3, [pc, #72]	@ (8002bc0 <HAL_InitTick+0x58>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 fb77 	bl	800327a <HAL_SYSTICK_Config>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e00e      	b.n	8002bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b0f      	cmp	r3, #15
 8002b9a:	d80a      	bhi.n	8002bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ba4:	f000 fb3f 	bl	8003226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ba8:	4a06      	ldr	r2, [pc, #24]	@ (8002bc4 <HAL_InitTick+0x5c>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e000      	b.n	8002bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000000 	.word	0x20000000
 8002bc0:	20000008 	.word	0x20000008
 8002bc4:	20000004 	.word	0x20000004

08002bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bcc:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <HAL_IncTick+0x20>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4b06      	ldr	r3, [pc, #24]	@ (8002bec <HAL_IncTick+0x24>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	4a04      	ldr	r2, [pc, #16]	@ (8002bec <HAL_IncTick+0x24>)
 8002bda:	6013      	str	r3, [r2, #0]
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	20000008 	.word	0x20000008
 8002bec:	20000428 	.word	0x20000428

08002bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bf4:	4b03      	ldr	r3, [pc, #12]	@ (8002c04 <HAL_GetTick+0x14>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	20000428 	.word	0x20000428

08002c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c10:	f7ff ffee 	bl	8002bf0 <HAL_GetTick>
 8002c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c20:	d005      	beq.n	8002c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c22:	4b0a      	ldr	r3, [pc, #40]	@ (8002c4c <HAL_Delay+0x44>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c2e:	bf00      	nop
 8002c30:	f7ff ffde 	bl	8002bf0 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d8f7      	bhi.n	8002c30 <HAL_Delay+0x28>
  {
  }
}
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000008 	.word	0x20000008

08002c50 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e0ed      	b.n	8002e3e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d102      	bne.n	8002c74 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fe ff5c 	bl	8001b2c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0201 	orr.w	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c84:	f7ff ffb4 	bl	8002bf0 <HAL_GetTick>
 8002c88:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c8a:	e012      	b.n	8002cb2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c8c:	f7ff ffb0 	bl	8002bf0 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b0a      	cmp	r3, #10
 8002c98:	d90b      	bls.n	8002cb2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2205      	movs	r2, #5
 8002caa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e0c5      	b.n	8002e3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0e5      	beq.n	8002c8c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0202 	bic.w	r2, r2, #2
 8002cce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cd0:	f7ff ff8e 	bl	8002bf0 <HAL_GetTick>
 8002cd4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002cd6:	e012      	b.n	8002cfe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cd8:	f7ff ff8a 	bl	8002bf0 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b0a      	cmp	r3, #10
 8002ce4:	d90b      	bls.n	8002cfe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2205      	movs	r2, #5
 8002cf6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e09f      	b.n	8002e3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1e5      	bne.n	8002cd8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	7e1b      	ldrb	r3, [r3, #24]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d108      	bne.n	8002d26 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	e007      	b.n	8002d36 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	7e5b      	ldrb	r3, [r3, #25]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d108      	bne.n	8002d50 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	e007      	b.n	8002d60 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	7e9b      	ldrb	r3, [r3, #26]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d108      	bne.n	8002d7a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0220 	orr.w	r2, r2, #32
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	e007      	b.n	8002d8a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0220 	bic.w	r2, r2, #32
 8002d88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	7edb      	ldrb	r3, [r3, #27]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d108      	bne.n	8002da4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0210 	bic.w	r2, r2, #16
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	e007      	b.n	8002db4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0210 	orr.w	r2, r2, #16
 8002db2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	7f1b      	ldrb	r3, [r3, #28]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d108      	bne.n	8002dce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0208 	orr.w	r2, r2, #8
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	e007      	b.n	8002dde <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0208 	bic.w	r2, r2, #8
 8002ddc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	7f5b      	ldrb	r3, [r3, #29]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d108      	bne.n	8002df8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0204 	orr.w	r2, r2, #4
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	e007      	b.n	8002e08 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0204 	bic.w	r2, r2, #4
 8002e06:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	ea42 0103 	orr.w	r1, r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	1e5a      	subs	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d12e      	bne.n	8002eb8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0201 	bic.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e72:	f7ff febd 	bl	8002bf0 <HAL_GetTick>
 8002e76:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e78:	e012      	b.n	8002ea0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e7a:	f7ff feb9 	bl	8002bf0 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b0a      	cmp	r3, #10
 8002e86:	d90b      	bls.n	8002ea0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2205      	movs	r2, #5
 8002e98:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e012      	b.n	8002ec6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1e5      	bne.n	8002e7a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	e006      	b.n	8002ec6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
  }
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b089      	sub	sp, #36	@ 0x24
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
 8002eda:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ee2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002eec:	7ffb      	ldrb	r3, [r7, #31]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d003      	beq.n	8002efa <HAL_CAN_AddTxMessage+0x2c>
 8002ef2:	7ffb      	ldrb	r3, [r7, #31]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	f040 80ad 	bne.w	8003054 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d105      	bne.n	8002f1a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 8095 	beq.w	8003044 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	0e1b      	lsrs	r3, r3, #24
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002f24:	2201      	movs	r2, #1
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10d      	bne.n	8002f52 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f40:	68f9      	ldr	r1, [r7, #12]
 8002f42:	6809      	ldr	r1, [r1, #0]
 8002f44:	431a      	orrs	r2, r3
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	3318      	adds	r3, #24
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	440b      	add	r3, r1
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	e00f      	b.n	8002f72 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f5c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f62:	68f9      	ldr	r1, [r7, #12]
 8002f64:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002f66:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	3318      	adds	r3, #24
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	440b      	add	r3, r1
 8002f70:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6819      	ldr	r1, [r3, #0]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	3318      	adds	r3, #24
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	440b      	add	r3, r1
 8002f82:	3304      	adds	r3, #4
 8002f84:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	7d1b      	ldrb	r3, [r3, #20]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d111      	bne.n	8002fb2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	3318      	adds	r3, #24
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	4413      	add	r3, r2
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	6811      	ldr	r1, [r2, #0]
 8002fa2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	3318      	adds	r3, #24
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	440b      	add	r3, r1
 8002fae:	3304      	adds	r3, #4
 8002fb0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3307      	adds	r3, #7
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	061a      	lsls	r2, r3, #24
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3306      	adds	r3, #6
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	041b      	lsls	r3, r3, #16
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3305      	adds	r3, #5
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	021b      	lsls	r3, r3, #8
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	3204      	adds	r2, #4
 8002fd2:	7812      	ldrb	r2, [r2, #0]
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	6811      	ldr	r1, [r2, #0]
 8002fda:	ea43 0200 	orr.w	r2, r3, r0
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	440b      	add	r3, r1
 8002fe4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002fe8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3303      	adds	r3, #3
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	061a      	lsls	r2, r3, #24
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3302      	adds	r3, #2
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	041b      	lsls	r3, r3, #16
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3301      	adds	r3, #1
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	4313      	orrs	r3, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	7812      	ldrb	r2, [r2, #0]
 800300a:	4610      	mov	r0, r2
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	6811      	ldr	r1, [r2, #0]
 8003010:	ea43 0200 	orr.w	r2, r3, r0
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	440b      	add	r3, r1
 800301a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800301e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	3318      	adds	r3, #24
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	4413      	add	r3, r2
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	6811      	ldr	r1, [r2, #0]
 8003032:	f043 0201 	orr.w	r2, r3, #1
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	3318      	adds	r3, #24
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	440b      	add	r3, r1
 800303e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	e00e      	b.n	8003062 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003048:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e006      	b.n	8003062 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003058:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
  }
}
 8003062:	4618      	mov	r0, r3
 8003064:	3724      	adds	r7, #36	@ 0x24
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003080:	4b0c      	ldr	r3, [pc, #48]	@ (80030b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800308c:	4013      	ands	r3, r2
 800308e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003098:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800309c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030a2:	4a04      	ldr	r2, [pc, #16]	@ (80030b4 <__NVIC_SetPriorityGrouping+0x44>)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	60d3      	str	r3, [r2, #12]
}
 80030a8:	bf00      	nop
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	e000ed00 	.word	0xe000ed00

080030b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030bc:	4b04      	ldr	r3, [pc, #16]	@ (80030d0 <__NVIC_GetPriorityGrouping+0x18>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	0a1b      	lsrs	r3, r3, #8
 80030c2:	f003 0307 	and.w	r3, r3, #7
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	db0b      	blt.n	80030fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	f003 021f 	and.w	r2, r3, #31
 80030ec:	4907      	ldr	r1, [pc, #28]	@ (800310c <__NVIC_EnableIRQ+0x38>)
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2001      	movs	r0, #1
 80030f6:	fa00 f202 	lsl.w	r2, r0, r2
 80030fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	e000e100 	.word	0xe000e100

08003110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	6039      	str	r1, [r7, #0]
 800311a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800311c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003120:	2b00      	cmp	r3, #0
 8003122:	db0a      	blt.n	800313a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	b2da      	uxtb	r2, r3
 8003128:	490c      	ldr	r1, [pc, #48]	@ (800315c <__NVIC_SetPriority+0x4c>)
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	0112      	lsls	r2, r2, #4
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	440b      	add	r3, r1
 8003134:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003138:	e00a      	b.n	8003150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4908      	ldr	r1, [pc, #32]	@ (8003160 <__NVIC_SetPriority+0x50>)
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	3b04      	subs	r3, #4
 8003148:	0112      	lsls	r2, r2, #4
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	440b      	add	r3, r1
 800314e:	761a      	strb	r2, [r3, #24]
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000e100 	.word	0xe000e100
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003164:	b480      	push	{r7}
 8003166:	b089      	sub	sp, #36	@ 0x24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f1c3 0307 	rsb	r3, r3, #7
 800317e:	2b04      	cmp	r3, #4
 8003180:	bf28      	it	cs
 8003182:	2304      	movcs	r3, #4
 8003184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3304      	adds	r3, #4
 800318a:	2b06      	cmp	r3, #6
 800318c:	d902      	bls.n	8003194 <NVIC_EncodePriority+0x30>
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3b03      	subs	r3, #3
 8003192:	e000      	b.n	8003196 <NVIC_EncodePriority+0x32>
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003198:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43da      	mvns	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	401a      	ands	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fa01 f303 	lsl.w	r3, r1, r3
 80031b6:	43d9      	mvns	r1, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031bc:	4313      	orrs	r3, r2
         );
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3724      	adds	r7, #36	@ 0x24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
	...

080031cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031dc:	d301      	bcc.n	80031e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031de:	2301      	movs	r3, #1
 80031e0:	e00f      	b.n	8003202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031e2:	4a0a      	ldr	r2, [pc, #40]	@ (800320c <SysTick_Config+0x40>)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ea:	210f      	movs	r1, #15
 80031ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031f0:	f7ff ff8e 	bl	8003110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031f4:	4b05      	ldr	r3, [pc, #20]	@ (800320c <SysTick_Config+0x40>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031fa:	4b04      	ldr	r3, [pc, #16]	@ (800320c <SysTick_Config+0x40>)
 80031fc:	2207      	movs	r2, #7
 80031fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	e000e010 	.word	0xe000e010

08003210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff ff29 	bl	8003070 <__NVIC_SetPriorityGrouping>
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003226:	b580      	push	{r7, lr}
 8003228:	b086      	sub	sp, #24
 800322a:	af00      	add	r7, sp, #0
 800322c:	4603      	mov	r3, r0
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003238:	f7ff ff3e 	bl	80030b8 <__NVIC_GetPriorityGrouping>
 800323c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	6978      	ldr	r0, [r7, #20]
 8003244:	f7ff ff8e 	bl	8003164 <NVIC_EncodePriority>
 8003248:	4602      	mov	r2, r0
 800324a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff ff5d 	bl	8003110 <__NVIC_SetPriority>
}
 8003256:	bf00      	nop
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	4603      	mov	r3, r0
 8003266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff ff31 	bl	80030d4 <__NVIC_EnableIRQ>
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff ffa2 	bl	80031cc <SysTick_Config>
 8003288:	4603      	mov	r3, r0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032a0:	f7ff fca6 	bl	8002bf0 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e099      	b.n	80033e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032d0:	e00f      	b.n	80032f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032d2:	f7ff fc8d 	bl	8002bf0 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b05      	cmp	r3, #5
 80032de:	d908      	bls.n	80032f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2220      	movs	r2, #32
 80032e4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2203      	movs	r2, #3
 80032ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e078      	b.n	80033e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1e8      	bne.n	80032d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4b38      	ldr	r3, [pc, #224]	@ (80033ec <HAL_DMA_Init+0x158>)
 800330c:	4013      	ands	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800331e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800332a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003336:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	4313      	orrs	r3, r2
 8003342:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003348:	2b04      	cmp	r3, #4
 800334a:	d107      	bne.n	800335c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003354:	4313      	orrs	r3, r2
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f023 0307 	bic.w	r3, r3, #7
 8003372:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003382:	2b04      	cmp	r3, #4
 8003384:	d117      	bne.n	80033b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00e      	beq.n	80033b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fb01 	bl	80039a0 <DMA_CheckFifoParam>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2240      	movs	r2, #64	@ 0x40
 80033a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80033b2:	2301      	movs	r3, #1
 80033b4:	e016      	b.n	80033e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fab8 	bl	8003934 <DMA_CalcBaseAndBitshift>
 80033c4:	4603      	mov	r3, r0
 80033c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033cc:	223f      	movs	r2, #63	@ 0x3f
 80033ce:	409a      	lsls	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	f010803f 	.word	0xf010803f

080033f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003406:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_DMA_Start_IT+0x26>
 8003412:	2302      	movs	r3, #2
 8003414:	e040      	b.n	8003498 <HAL_DMA_Start_IT+0xa8>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b01      	cmp	r3, #1
 8003428:	d12f      	bne.n	800348a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2202      	movs	r2, #2
 800342e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68b9      	ldr	r1, [r7, #8]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 fa4a 	bl	80038d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003448:	223f      	movs	r2, #63	@ 0x3f
 800344a:	409a      	lsls	r2, r3
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0216 	orr.w	r2, r2, #22
 800345e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0208 	orr.w	r2, r2, #8
 8003476:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	e005      	b.n	8003496 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003492:	2302      	movs	r3, #2
 8003494:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003496:	7dfb      	ldrb	r3, [r7, #23]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034ae:	f7ff fb9f 	bl	8002bf0 <HAL_GetTick>
 80034b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d008      	beq.n	80034d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2280      	movs	r2, #128	@ 0x80
 80034c4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e052      	b.n	8003578 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0216 	bic.w	r2, r2, #22
 80034e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695a      	ldr	r2, [r3, #20]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d103      	bne.n	8003502 <HAL_DMA_Abort+0x62>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d007      	beq.n	8003512 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0208 	bic.w	r2, r2, #8
 8003510:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0201 	bic.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003522:	e013      	b.n	800354c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003524:	f7ff fb64 	bl	8002bf0 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b05      	cmp	r3, #5
 8003530:	d90c      	bls.n	800354c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2203      	movs	r2, #3
 800353c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e015      	b.n	8003578 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1e4      	bne.n	8003524 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800355e:	223f      	movs	r2, #63	@ 0x3f
 8003560:	409a      	lsls	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d004      	beq.n	800359e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2280      	movs	r2, #128	@ 0x80
 8003598:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e00c      	b.n	80035b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2205      	movs	r2, #5
 80035a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035d0:	4b8e      	ldr	r3, [pc, #568]	@ (800380c <HAL_DMA_IRQHandler+0x248>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a8e      	ldr	r2, [pc, #568]	@ (8003810 <HAL_DMA_IRQHandler+0x24c>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	0a9b      	lsrs	r3, r3, #10
 80035dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ee:	2208      	movs	r2, #8
 80035f0:	409a      	lsls	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d01a      	beq.n	8003630 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d013      	beq.n	8003630 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0204 	bic.w	r2, r2, #4
 8003616:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361c:	2208      	movs	r2, #8
 800361e:	409a      	lsls	r2, r3
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003628:	f043 0201 	orr.w	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003634:	2201      	movs	r2, #1
 8003636:	409a      	lsls	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4013      	ands	r3, r2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d012      	beq.n	8003666 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003652:	2201      	movs	r2, #1
 8003654:	409a      	lsls	r2, r3
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800365e:	f043 0202 	orr.w	r2, r3, #2
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366a:	2204      	movs	r2, #4
 800366c:	409a      	lsls	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4013      	ands	r3, r2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d012      	beq.n	800369c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00b      	beq.n	800369c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003688:	2204      	movs	r2, #4
 800368a:	409a      	lsls	r2, r3
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003694:	f043 0204 	orr.w	r2, r3, #4
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a0:	2210      	movs	r2, #16
 80036a2:	409a      	lsls	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d043      	beq.n	8003734 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d03c      	beq.n	8003734 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036be:	2210      	movs	r2, #16
 80036c0:	409a      	lsls	r2, r3
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d018      	beq.n	8003706 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d108      	bne.n	80036f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d024      	beq.n	8003734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	4798      	blx	r3
 80036f2:	e01f      	b.n	8003734 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01b      	beq.n	8003734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	4798      	blx	r3
 8003704:	e016      	b.n	8003734 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003710:	2b00      	cmp	r3, #0
 8003712:	d107      	bne.n	8003724 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0208 	bic.w	r2, r2, #8
 8003722:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003738:	2220      	movs	r2, #32
 800373a:	409a      	lsls	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4013      	ands	r3, r2
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 808f 	beq.w	8003864 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 8087 	beq.w	8003864 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800375a:	2220      	movs	r2, #32
 800375c:	409a      	lsls	r2, r3
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b05      	cmp	r3, #5
 800376c:	d136      	bne.n	80037dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0216 	bic.w	r2, r2, #22
 800377c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800378c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d103      	bne.n	800379e <HAL_DMA_IRQHandler+0x1da>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0208 	bic.w	r2, r2, #8
 80037ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b2:	223f      	movs	r2, #63	@ 0x3f
 80037b4:	409a      	lsls	r2, r3
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d07e      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	4798      	blx	r3
        }
        return;
 80037da:	e079      	b.n	80038d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d01d      	beq.n	8003826 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10d      	bne.n	8003814 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d031      	beq.n	8003864 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	4798      	blx	r3
 8003808:	e02c      	b.n	8003864 <HAL_DMA_IRQHandler+0x2a0>
 800380a:	bf00      	nop
 800380c:	20000000 	.word	0x20000000
 8003810:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003818:	2b00      	cmp	r3, #0
 800381a:	d023      	beq.n	8003864 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	4798      	blx	r3
 8003824:	e01e      	b.n	8003864 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10f      	bne.n	8003854 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0210 	bic.w	r2, r2, #16
 8003842:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003868:	2b00      	cmp	r3, #0
 800386a:	d032      	beq.n	80038d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d022      	beq.n	80038be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2205      	movs	r2, #5
 800387c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0201 	bic.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	3301      	adds	r3, #1
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	429a      	cmp	r2, r3
 800389a:	d307      	bcc.n	80038ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f2      	bne.n	8003890 <HAL_DMA_IRQHandler+0x2cc>
 80038aa:	e000      	b.n	80038ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	4798      	blx	r3
 80038ce:	e000      	b.n	80038d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80038d0:	bf00      	nop
    }
  }
}
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80038f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b40      	cmp	r3, #64	@ 0x40
 8003904:	d108      	bne.n	8003918 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003916:	e007      	b.n	8003928 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	60da      	str	r2, [r3, #12]
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	b2db      	uxtb	r3, r3
 8003942:	3b10      	subs	r3, #16
 8003944:	4a14      	ldr	r2, [pc, #80]	@ (8003998 <DMA_CalcBaseAndBitshift+0x64>)
 8003946:	fba2 2303 	umull	r2, r3, r2, r3
 800394a:	091b      	lsrs	r3, r3, #4
 800394c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800394e:	4a13      	ldr	r2, [pc, #76]	@ (800399c <DMA_CalcBaseAndBitshift+0x68>)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4413      	add	r3, r2
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d909      	bls.n	8003976 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800396a:	f023 0303 	bic.w	r3, r3, #3
 800396e:	1d1a      	adds	r2, r3, #4
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	659a      	str	r2, [r3, #88]	@ 0x58
 8003974:	e007      	b.n	8003986 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800397e:	f023 0303 	bic.w	r3, r3, #3
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	aaaaaaab 	.word	0xaaaaaaab
 800399c:	0800d028 	.word	0x0800d028

080039a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d11f      	bne.n	80039fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d856      	bhi.n	8003a6e <DMA_CheckFifoParam+0xce>
 80039c0:	a201      	add	r2, pc, #4	@ (adr r2, 80039c8 <DMA_CheckFifoParam+0x28>)
 80039c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c6:	bf00      	nop
 80039c8:	080039d9 	.word	0x080039d9
 80039cc:	080039eb 	.word	0x080039eb
 80039d0:	080039d9 	.word	0x080039d9
 80039d4:	08003a6f 	.word	0x08003a6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d046      	beq.n	8003a72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039e8:	e043      	b.n	8003a72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80039f2:	d140      	bne.n	8003a76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039f8:	e03d      	b.n	8003a76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a02:	d121      	bne.n	8003a48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d837      	bhi.n	8003a7a <DMA_CheckFifoParam+0xda>
 8003a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a10 <DMA_CheckFifoParam+0x70>)
 8003a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a10:	08003a21 	.word	0x08003a21
 8003a14:	08003a27 	.word	0x08003a27
 8003a18:	08003a21 	.word	0x08003a21
 8003a1c:	08003a39 	.word	0x08003a39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	73fb      	strb	r3, [r7, #15]
      break;
 8003a24:	e030      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d025      	beq.n	8003a7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a36:	e022      	b.n	8003a7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a40:	d11f      	bne.n	8003a82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a46:	e01c      	b.n	8003a82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d903      	bls.n	8003a56 <DMA_CheckFifoParam+0xb6>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d003      	beq.n	8003a5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a54:	e018      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	73fb      	strb	r3, [r7, #15]
      break;
 8003a5a:	e015      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00e      	beq.n	8003a86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a6c:	e00b      	b.n	8003a86 <DMA_CheckFifoParam+0xe6>
      break;
 8003a6e:	bf00      	nop
 8003a70:	e00a      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      break;
 8003a72:	bf00      	nop
 8003a74:	e008      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      break;
 8003a76:	bf00      	nop
 8003a78:	e006      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      break;
 8003a7a:	bf00      	nop
 8003a7c:	e004      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      break;
 8003a7e:	bf00      	nop
 8003a80:	e002      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a82:	bf00      	nop
 8003a84:	e000      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      break;
 8003a86:	bf00      	nop
    }
  } 
  
  return status; 
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop

08003a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b089      	sub	sp, #36	@ 0x24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61fb      	str	r3, [r7, #28]
 8003ab2:	e165      	b.n	8003d80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	f040 8154 	bne.w	8003d7a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d005      	beq.n	8003aea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d130      	bne.n	8003b4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	2203      	movs	r2, #3
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4013      	ands	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b20:	2201      	movs	r2, #1
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	091b      	lsrs	r3, r3, #4
 8003b36:	f003 0201 	and.w	r2, r3, #1
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 0303 	and.w	r3, r3, #3
 8003b54:	2b03      	cmp	r3, #3
 8003b56:	d017      	beq.n	8003b88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	2203      	movs	r2, #3
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d123      	bne.n	8003bdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	08da      	lsrs	r2, r3, #3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3208      	adds	r2, #8
 8003b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	220f      	movs	r2, #15
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	08da      	lsrs	r2, r3, #3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3208      	adds	r2, #8
 8003bd6:	69b9      	ldr	r1, [r7, #24]
 8003bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	2203      	movs	r2, #3
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 0203 	and.w	r2, r3, #3
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 80ae 	beq.w	8003d7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	4b5d      	ldr	r3, [pc, #372]	@ (8003d98 <HAL_GPIO_Init+0x300>)
 8003c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c26:	4a5c      	ldr	r2, [pc, #368]	@ (8003d98 <HAL_GPIO_Init+0x300>)
 8003c28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c2e:	4b5a      	ldr	r3, [pc, #360]	@ (8003d98 <HAL_GPIO_Init+0x300>)
 8003c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c3a:	4a58      	ldr	r2, [pc, #352]	@ (8003d9c <HAL_GPIO_Init+0x304>)
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	089b      	lsrs	r3, r3, #2
 8003c40:	3302      	adds	r3, #2
 8003c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	220f      	movs	r2, #15
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	43db      	mvns	r3, r3
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a4f      	ldr	r2, [pc, #316]	@ (8003da0 <HAL_GPIO_Init+0x308>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d025      	beq.n	8003cb2 <HAL_GPIO_Init+0x21a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a4e      	ldr	r2, [pc, #312]	@ (8003da4 <HAL_GPIO_Init+0x30c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d01f      	beq.n	8003cae <HAL_GPIO_Init+0x216>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a4d      	ldr	r2, [pc, #308]	@ (8003da8 <HAL_GPIO_Init+0x310>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d019      	beq.n	8003caa <HAL_GPIO_Init+0x212>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a4c      	ldr	r2, [pc, #304]	@ (8003dac <HAL_GPIO_Init+0x314>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d013      	beq.n	8003ca6 <HAL_GPIO_Init+0x20e>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a4b      	ldr	r2, [pc, #300]	@ (8003db0 <HAL_GPIO_Init+0x318>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d00d      	beq.n	8003ca2 <HAL_GPIO_Init+0x20a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a4a      	ldr	r2, [pc, #296]	@ (8003db4 <HAL_GPIO_Init+0x31c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d007      	beq.n	8003c9e <HAL_GPIO_Init+0x206>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a49      	ldr	r2, [pc, #292]	@ (8003db8 <HAL_GPIO_Init+0x320>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d101      	bne.n	8003c9a <HAL_GPIO_Init+0x202>
 8003c96:	2306      	movs	r3, #6
 8003c98:	e00c      	b.n	8003cb4 <HAL_GPIO_Init+0x21c>
 8003c9a:	2307      	movs	r3, #7
 8003c9c:	e00a      	b.n	8003cb4 <HAL_GPIO_Init+0x21c>
 8003c9e:	2305      	movs	r3, #5
 8003ca0:	e008      	b.n	8003cb4 <HAL_GPIO_Init+0x21c>
 8003ca2:	2304      	movs	r3, #4
 8003ca4:	e006      	b.n	8003cb4 <HAL_GPIO_Init+0x21c>
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e004      	b.n	8003cb4 <HAL_GPIO_Init+0x21c>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e002      	b.n	8003cb4 <HAL_GPIO_Init+0x21c>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e000      	b.n	8003cb4 <HAL_GPIO_Init+0x21c>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	f002 0203 	and.w	r2, r2, #3
 8003cba:	0092      	lsls	r2, r2, #2
 8003cbc:	4093      	lsls	r3, r2
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cc4:	4935      	ldr	r1, [pc, #212]	@ (8003d9c <HAL_GPIO_Init+0x304>)
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	089b      	lsrs	r3, r3, #2
 8003cca:	3302      	adds	r3, #2
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cd2:	4b3a      	ldr	r3, [pc, #232]	@ (8003dbc <HAL_GPIO_Init+0x324>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cf6:	4a31      	ldr	r2, [pc, #196]	@ (8003dbc <HAL_GPIO_Init+0x324>)
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cfc:	4b2f      	ldr	r3, [pc, #188]	@ (8003dbc <HAL_GPIO_Init+0x324>)
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	43db      	mvns	r3, r3
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d20:	4a26      	ldr	r2, [pc, #152]	@ (8003dbc <HAL_GPIO_Init+0x324>)
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d26:	4b25      	ldr	r3, [pc, #148]	@ (8003dbc <HAL_GPIO_Init+0x324>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4013      	ands	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d4a:	4a1c      	ldr	r2, [pc, #112]	@ (8003dbc <HAL_GPIO_Init+0x324>)
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d50:	4b1a      	ldr	r3, [pc, #104]	@ (8003dbc <HAL_GPIO_Init+0x324>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d74:	4a11      	ldr	r2, [pc, #68]	@ (8003dbc <HAL_GPIO_Init+0x324>)
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	61fb      	str	r3, [r7, #28]
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	2b0f      	cmp	r3, #15
 8003d84:	f67f ae96 	bls.w	8003ab4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d88:	bf00      	nop
 8003d8a:	bf00      	nop
 8003d8c:	3724      	adds	r7, #36	@ 0x24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	40013800 	.word	0x40013800
 8003da0:	40020000 	.word	0x40020000
 8003da4:	40020400 	.word	0x40020400
 8003da8:	40020800 	.word	0x40020800
 8003dac:	40020c00 	.word	0x40020c00
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40021400 	.word	0x40021400
 8003db8:	40021800 	.word	0x40021800
 8003dbc:	40013c00 	.word	0x40013c00

08003dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	807b      	strh	r3, [r7, #2]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dd0:	787b      	ldrb	r3, [r7, #1]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dd6:	887a      	ldrh	r2, [r7, #2]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ddc:	e003      	b.n	8003de6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dde:	887b      	ldrh	r3, [r7, #2]
 8003de0:	041a      	lsls	r2, r3, #16
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	619a      	str	r2, [r3, #24]
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
	...

08003df4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e12b      	b.n	800405e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7fd ffae 	bl	8001d7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2224      	movs	r2, #36	@ 0x24
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0201 	bic.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e58:	f001 fd62 	bl	8005920 <HAL_RCC_GetPCLK1Freq>
 8003e5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	4a81      	ldr	r2, [pc, #516]	@ (8004068 <HAL_I2C_Init+0x274>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d807      	bhi.n	8003e78 <HAL_I2C_Init+0x84>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4a80      	ldr	r2, [pc, #512]	@ (800406c <HAL_I2C_Init+0x278>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	bf94      	ite	ls
 8003e70:	2301      	movls	r3, #1
 8003e72:	2300      	movhi	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	e006      	b.n	8003e86 <HAL_I2C_Init+0x92>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4a7d      	ldr	r2, [pc, #500]	@ (8004070 <HAL_I2C_Init+0x27c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	bf94      	ite	ls
 8003e80:	2301      	movls	r3, #1
 8003e82:	2300      	movhi	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e0e7      	b.n	800405e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	4a78      	ldr	r2, [pc, #480]	@ (8004074 <HAL_I2C_Init+0x280>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	0c9b      	lsrs	r3, r3, #18
 8003e98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	4a6a      	ldr	r2, [pc, #424]	@ (8004068 <HAL_I2C_Init+0x274>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d802      	bhi.n	8003ec8 <HAL_I2C_Init+0xd4>
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	e009      	b.n	8003edc <HAL_I2C_Init+0xe8>
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003ece:	fb02 f303 	mul.w	r3, r2, r3
 8003ed2:	4a69      	ldr	r2, [pc, #420]	@ (8004078 <HAL_I2C_Init+0x284>)
 8003ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed8:	099b      	lsrs	r3, r3, #6
 8003eda:	3301      	adds	r3, #1
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003eee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	495c      	ldr	r1, [pc, #368]	@ (8004068 <HAL_I2C_Init+0x274>)
 8003ef8:	428b      	cmp	r3, r1
 8003efa:	d819      	bhi.n	8003f30 <HAL_I2C_Init+0x13c>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1e59      	subs	r1, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f0a:	1c59      	adds	r1, r3, #1
 8003f0c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f10:	400b      	ands	r3, r1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <HAL_I2C_Init+0x138>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	1e59      	subs	r1, r3, #1
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f24:	3301      	adds	r3, #1
 8003f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f2a:	e051      	b.n	8003fd0 <HAL_I2C_Init+0x1dc>
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	e04f      	b.n	8003fd0 <HAL_I2C_Init+0x1dc>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d111      	bne.n	8003f5c <HAL_I2C_Init+0x168>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	1e58      	subs	r0, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6859      	ldr	r1, [r3, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	440b      	add	r3, r1
 8003f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	bf0c      	ite	eq
 8003f54:	2301      	moveq	r3, #1
 8003f56:	2300      	movne	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	e012      	b.n	8003f82 <HAL_I2C_Init+0x18e>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	1e58      	subs	r0, r3, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6859      	ldr	r1, [r3, #4]
 8003f64:	460b      	mov	r3, r1
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	0099      	lsls	r1, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f72:	3301      	adds	r3, #1
 8003f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	bf0c      	ite	eq
 8003f7c:	2301      	moveq	r3, #1
 8003f7e:	2300      	movne	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_I2C_Init+0x196>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e022      	b.n	8003fd0 <HAL_I2C_Init+0x1dc>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10e      	bne.n	8003fb0 <HAL_I2C_Init+0x1bc>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	1e58      	subs	r0, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6859      	ldr	r1, [r3, #4]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	440b      	add	r3, r1
 8003fa0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003faa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fae:	e00f      	b.n	8003fd0 <HAL_I2C_Init+0x1dc>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	1e58      	subs	r0, r3, #1
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6859      	ldr	r1, [r3, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	0099      	lsls	r1, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fcc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	6809      	ldr	r1, [r1, #0]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69da      	ldr	r2, [r3, #28]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ffe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6911      	ldr	r1, [r2, #16]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	68d2      	ldr	r2, [r2, #12]
 800400a:	4311      	orrs	r1, r2
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6812      	ldr	r2, [r2, #0]
 8004010:	430b      	orrs	r3, r1
 8004012:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695a      	ldr	r2, [r3, #20]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2220      	movs	r2, #32
 800404a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	000186a0 	.word	0x000186a0
 800406c:	001e847f 	.word	0x001e847f
 8004070:	003d08ff 	.word	0x003d08ff
 8004074:	431bde83 	.word	0x431bde83
 8004078:	10624dd3 	.word	0x10624dd3

0800407c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b088      	sub	sp, #32
 8004080:	af02      	add	r7, sp, #8
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	607a      	str	r2, [r7, #4]
 8004086:	461a      	mov	r2, r3
 8004088:	460b      	mov	r3, r1
 800408a:	817b      	strh	r3, [r7, #10]
 800408c:	4613      	mov	r3, r2
 800408e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004090:	f7fe fdae 	bl	8002bf0 <HAL_GetTick>
 8004094:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b20      	cmp	r3, #32
 80040a0:	f040 80e0 	bne.w	8004264 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	2319      	movs	r3, #25
 80040aa:	2201      	movs	r2, #1
 80040ac:	4970      	ldr	r1, [pc, #448]	@ (8004270 <HAL_I2C_Master_Transmit+0x1f4>)
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f001 f90e 	bl	80052d0 <I2C_WaitOnFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80040ba:	2302      	movs	r3, #2
 80040bc:	e0d3      	b.n	8004266 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_I2C_Master_Transmit+0x50>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e0cc      	b.n	8004266 <HAL_I2C_Master_Transmit+0x1ea>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d007      	beq.n	80040f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f042 0201 	orr.w	r2, r2, #1
 80040f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004100:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2221      	movs	r2, #33	@ 0x21
 8004106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2210      	movs	r2, #16
 800410e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	893a      	ldrh	r2, [r7, #8]
 8004122:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	4a50      	ldr	r2, [pc, #320]	@ (8004274 <HAL_I2C_Master_Transmit+0x1f8>)
 8004132:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004134:	8979      	ldrh	r1, [r7, #10]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	6a3a      	ldr	r2, [r7, #32]
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 fdfa 	bl	8004d34 <I2C_MasterRequestWrite>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e08d      	b.n	8004266 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800414a:	2300      	movs	r3, #0
 800414c:	613b      	str	r3, [r7, #16]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004160:	e066      	b.n	8004230 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	6a39      	ldr	r1, [r7, #32]
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f001 f9cc 	bl	8005504 <I2C_WaitOnTXEFlagUntilTimeout>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00d      	beq.n	800418e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004176:	2b04      	cmp	r3, #4
 8004178:	d107      	bne.n	800418a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004188:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e06b      	b.n	8004266 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004192:	781a      	ldrb	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d11b      	bne.n	8004204 <HAL_I2C_Master_Transmit+0x188>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d017      	beq.n	8004204 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d8:	781a      	ldrb	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b29a      	uxth	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	6a39      	ldr	r1, [r7, #32]
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f001 f9c3 	bl	8005594 <I2C_WaitOnBTFFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00d      	beq.n	8004230 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004218:	2b04      	cmp	r3, #4
 800421a:	d107      	bne.n	800422c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800422a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e01a      	b.n	8004266 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004234:	2b00      	cmp	r3, #0
 8004236:	d194      	bne.n	8004162 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004246:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	e000      	b.n	8004266 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004264:	2302      	movs	r3, #2
  }
}
 8004266:	4618      	mov	r0, r3
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	00100002 	.word	0x00100002
 8004274:	ffff0000 	.word	0xffff0000

08004278 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08c      	sub	sp, #48	@ 0x30
 800427c:	af02      	add	r7, sp, #8
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	607a      	str	r2, [r7, #4]
 8004282:	461a      	mov	r2, r3
 8004284:	460b      	mov	r3, r1
 8004286:	817b      	strh	r3, [r7, #10]
 8004288:	4613      	mov	r3, r2
 800428a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800428c:	f7fe fcb0 	bl	8002bf0 <HAL_GetTick>
 8004290:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b20      	cmp	r3, #32
 800429c:	f040 8217 	bne.w	80046ce <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	2319      	movs	r3, #25
 80042a6:	2201      	movs	r2, #1
 80042a8:	497c      	ldr	r1, [pc, #496]	@ (800449c <HAL_I2C_Master_Receive+0x224>)
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f001 f810 	bl	80052d0 <I2C_WaitOnFlagUntilTimeout>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80042b6:	2302      	movs	r3, #2
 80042b8:	e20a      	b.n	80046d0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <HAL_I2C_Master_Receive+0x50>
 80042c4:	2302      	movs	r3, #2
 80042c6:	e203      	b.n	80046d0 <HAL_I2C_Master_Receive+0x458>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d007      	beq.n	80042ee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 0201 	orr.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2222      	movs	r2, #34	@ 0x22
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2210      	movs	r2, #16
 800430a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	893a      	ldrh	r2, [r7, #8]
 800431e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4a5c      	ldr	r2, [pc, #368]	@ (80044a0 <HAL_I2C_Master_Receive+0x228>)
 800432e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004330:	8979      	ldrh	r1, [r7, #10]
 8004332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 fd7e 	bl	8004e38 <I2C_MasterRequestRead>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e1c4      	b.n	80046d0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434a:	2b00      	cmp	r3, #0
 800434c:	d113      	bne.n	8004376 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800434e:	2300      	movs	r3, #0
 8004350:	623b      	str	r3, [r7, #32]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	623b      	str	r3, [r7, #32]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	623b      	str	r3, [r7, #32]
 8004362:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	e198      	b.n	80046a8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800437a:	2b01      	cmp	r3, #1
 800437c:	d11b      	bne.n	80043b6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800438c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800438e:	2300      	movs	r3, #0
 8004390:	61fb      	str	r3, [r7, #28]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	61fb      	str	r3, [r7, #28]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	61fb      	str	r3, [r7, #28]
 80043a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	e178      	b.n	80046a8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d11b      	bne.n	80043f6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043de:	2300      	movs	r3, #0
 80043e0:	61bb      	str	r3, [r7, #24]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	61bb      	str	r3, [r7, #24]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	61bb      	str	r3, [r7, #24]
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	e158      	b.n	80046a8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004404:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800441c:	e144      	b.n	80046a8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004422:	2b03      	cmp	r3, #3
 8004424:	f200 80f1 	bhi.w	800460a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800442c:	2b01      	cmp	r3, #1
 800442e:	d123      	bne.n	8004478 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004430:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004432:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f001 f8f5 	bl	8005624 <I2C_WaitOnRXNEFlagUntilTimeout>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e145      	b.n	80046d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691a      	ldr	r2, [r3, #16]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800446c:	b29b      	uxth	r3, r3
 800446e:	3b01      	subs	r3, #1
 8004470:	b29a      	uxth	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004476:	e117      	b.n	80046a8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800447c:	2b02      	cmp	r3, #2
 800447e:	d14e      	bne.n	800451e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004486:	2200      	movs	r2, #0
 8004488:	4906      	ldr	r1, [pc, #24]	@ (80044a4 <HAL_I2C_Master_Receive+0x22c>)
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 ff20 	bl	80052d0 <I2C_WaitOnFlagUntilTimeout>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d008      	beq.n	80044a8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e11a      	b.n	80046d0 <HAL_I2C_Master_Receive+0x458>
 800449a:	bf00      	nop
 800449c:	00100002 	.word	0x00100002
 80044a0:	ffff0000 	.word	0xffff0000
 80044a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800451c:	e0c4      	b.n	80046a8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800451e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004524:	2200      	movs	r2, #0
 8004526:	496c      	ldr	r1, [pc, #432]	@ (80046d8 <HAL_I2C_Master_Receive+0x460>)
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 fed1 	bl	80052d0 <I2C_WaitOnFlagUntilTimeout>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e0cb      	b.n	80046d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004546:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	691a      	ldr	r2, [r3, #16]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004570:	b29b      	uxth	r3, r3
 8004572:	3b01      	subs	r3, #1
 8004574:	b29a      	uxth	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800457a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004580:	2200      	movs	r2, #0
 8004582:	4955      	ldr	r1, [pc, #340]	@ (80046d8 <HAL_I2C_Master_Receive+0x460>)
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 fea3 	bl	80052d0 <I2C_WaitOnFlagUntilTimeout>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e09d      	b.n	80046d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045fe:	b29b      	uxth	r3, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004608:	e04e      	b.n	80046a8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800460a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800460c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f001 f808 	bl	8005624 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e058      	b.n	80046d0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	2b04      	cmp	r3, #4
 800465c:	d124      	bne.n	80046a8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004662:	2b03      	cmp	r3, #3
 8004664:	d107      	bne.n	8004676 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004674:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800469e:	b29b      	uxth	r3, r3
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f47f aeb6 	bne.w	800441e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	e000      	b.n	80046d0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80046ce:	2302      	movs	r3, #2
  }
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3728      	adds	r7, #40	@ 0x28
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	00010004 	.word	0x00010004

080046dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af02      	add	r7, sp, #8
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	4608      	mov	r0, r1
 80046e6:	4611      	mov	r1, r2
 80046e8:	461a      	mov	r2, r3
 80046ea:	4603      	mov	r3, r0
 80046ec:	817b      	strh	r3, [r7, #10]
 80046ee:	460b      	mov	r3, r1
 80046f0:	813b      	strh	r3, [r7, #8]
 80046f2:	4613      	mov	r3, r2
 80046f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046f6:	f7fe fa7b 	bl	8002bf0 <HAL_GetTick>
 80046fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b20      	cmp	r3, #32
 8004706:	f040 80d9 	bne.w	80048bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	2319      	movs	r3, #25
 8004710:	2201      	movs	r2, #1
 8004712:	496d      	ldr	r1, [pc, #436]	@ (80048c8 <HAL_I2C_Mem_Write+0x1ec>)
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 fddb 	bl	80052d0 <I2C_WaitOnFlagUntilTimeout>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004720:	2302      	movs	r3, #2
 8004722:	e0cc      	b.n	80048be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <HAL_I2C_Mem_Write+0x56>
 800472e:	2302      	movs	r3, #2
 8004730:	e0c5      	b.n	80048be <HAL_I2C_Mem_Write+0x1e2>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b01      	cmp	r3, #1
 8004746:	d007      	beq.n	8004758 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0201 	orr.w	r2, r2, #1
 8004756:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004766:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2221      	movs	r2, #33	@ 0x21
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2240      	movs	r2, #64	@ 0x40
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a3a      	ldr	r2, [r7, #32]
 8004782:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004788:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4a4d      	ldr	r2, [pc, #308]	@ (80048cc <HAL_I2C_Mem_Write+0x1f0>)
 8004798:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800479a:	88f8      	ldrh	r0, [r7, #6]
 800479c:	893a      	ldrh	r2, [r7, #8]
 800479e:	8979      	ldrh	r1, [r7, #10]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	9301      	str	r3, [sp, #4]
 80047a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	4603      	mov	r3, r0
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 fc12 	bl	8004fd4 <I2C_RequestMemoryWrite>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d052      	beq.n	800485c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e081      	b.n	80048be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 fea0 	bl	8005504 <I2C_WaitOnTXEFlagUntilTimeout>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00d      	beq.n	80047e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d107      	bne.n	80047e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e06b      	b.n	80048be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ea:	781a      	ldrb	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004800:	3b01      	subs	r3, #1
 8004802:	b29a      	uxth	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b04      	cmp	r3, #4
 8004822:	d11b      	bne.n	800485c <HAL_I2C_Mem_Write+0x180>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004828:	2b00      	cmp	r3, #0
 800482a:	d017      	beq.n	800485c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004830:	781a      	ldrb	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004846:	3b01      	subs	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004852:	b29b      	uxth	r3, r3
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1aa      	bne.n	80047ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 fe93 	bl	8005594 <I2C_WaitOnBTFFlagUntilTimeout>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00d      	beq.n	8004890 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004878:	2b04      	cmp	r3, #4
 800487a:	d107      	bne.n	800488c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800488a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e016      	b.n	80048be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800489e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80048b8:	2300      	movs	r3, #0
 80048ba:	e000      	b.n	80048be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80048bc:	2302      	movs	r3, #2
  }
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	00100002 	.word	0x00100002
 80048cc:	ffff0000 	.word	0xffff0000

080048d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08c      	sub	sp, #48	@ 0x30
 80048d4:	af02      	add	r7, sp, #8
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	4608      	mov	r0, r1
 80048da:	4611      	mov	r1, r2
 80048dc:	461a      	mov	r2, r3
 80048de:	4603      	mov	r3, r0
 80048e0:	817b      	strh	r3, [r7, #10]
 80048e2:	460b      	mov	r3, r1
 80048e4:	813b      	strh	r3, [r7, #8]
 80048e6:	4613      	mov	r3, r2
 80048e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048ea:	f7fe f981 	bl	8002bf0 <HAL_GetTick>
 80048ee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	f040 8214 	bne.w	8004d26 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	2319      	movs	r3, #25
 8004904:	2201      	movs	r2, #1
 8004906:	497b      	ldr	r1, [pc, #492]	@ (8004af4 <HAL_I2C_Mem_Read+0x224>)
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 fce1 	bl	80052d0 <I2C_WaitOnFlagUntilTimeout>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004914:	2302      	movs	r3, #2
 8004916:	e207      	b.n	8004d28 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <HAL_I2C_Mem_Read+0x56>
 8004922:	2302      	movs	r3, #2
 8004924:	e200      	b.n	8004d28 <HAL_I2C_Mem_Read+0x458>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b01      	cmp	r3, #1
 800493a:	d007      	beq.n	800494c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800495a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2222      	movs	r2, #34	@ 0x22
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2240      	movs	r2, #64	@ 0x40
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004976:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800497c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4a5b      	ldr	r2, [pc, #364]	@ (8004af8 <HAL_I2C_Mem_Read+0x228>)
 800498c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800498e:	88f8      	ldrh	r0, [r7, #6]
 8004990:	893a      	ldrh	r2, [r7, #8]
 8004992:	8979      	ldrh	r1, [r7, #10]
 8004994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004996:	9301      	str	r3, [sp, #4]
 8004998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	4603      	mov	r3, r0
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 fbae 	bl	8005100 <I2C_RequestMemoryRead>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e1bc      	b.n	8004d28 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d113      	bne.n	80049de <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049b6:	2300      	movs	r3, #0
 80049b8:	623b      	str	r3, [r7, #32]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	623b      	str	r3, [r7, #32]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	623b      	str	r3, [r7, #32]
 80049ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	e190      	b.n	8004d00 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d11b      	bne.n	8004a1e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	61fb      	str	r3, [r7, #28]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	61fb      	str	r3, [r7, #28]
 8004a0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	e170      	b.n	8004d00 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d11b      	bne.n	8004a5e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a46:	2300      	movs	r3, #0
 8004a48:	61bb      	str	r3, [r7, #24]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	61bb      	str	r3, [r7, #24]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	61bb      	str	r3, [r7, #24]
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	e150      	b.n	8004d00 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a5e:	2300      	movs	r3, #0
 8004a60:	617b      	str	r3, [r7, #20]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	617b      	str	r3, [r7, #20]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004a74:	e144      	b.n	8004d00 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	f200 80f1 	bhi.w	8004c62 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d123      	bne.n	8004ad0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 fdc9 	bl	8005624 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e145      	b.n	8004d28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691a      	ldr	r2, [r3, #16]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ace:	e117      	b.n	8004d00 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d14e      	bne.n	8004b76 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ade:	2200      	movs	r2, #0
 8004ae0:	4906      	ldr	r1, [pc, #24]	@ (8004afc <HAL_I2C_Mem_Read+0x22c>)
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 fbf4 	bl	80052d0 <I2C_WaitOnFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d008      	beq.n	8004b00 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e11a      	b.n	8004d28 <HAL_I2C_Mem_Read+0x458>
 8004af2:	bf00      	nop
 8004af4:	00100002 	.word	0x00100002
 8004af8:	ffff0000 	.word	0xffff0000
 8004afc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	691a      	ldr	r2, [r3, #16]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691a      	ldr	r2, [r3, #16]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4c:	b2d2      	uxtb	r2, r2
 8004b4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b74:	e0c4      	b.n	8004d00 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	496c      	ldr	r1, [pc, #432]	@ (8004d30 <HAL_I2C_Mem_Read+0x460>)
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 fba5 	bl	80052d0 <I2C_WaitOnFlagUntilTimeout>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e0cb      	b.n	8004d28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691a      	ldr	r2, [r3, #16]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd8:	2200      	movs	r2, #0
 8004bda:	4955      	ldr	r1, [pc, #340]	@ (8004d30 <HAL_I2C_Mem_Read+0x460>)
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 fb77 	bl	80052d0 <I2C_WaitOnFlagUntilTimeout>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e09d      	b.n	8004d28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b01      	subs	r3, #1
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	691a      	ldr	r2, [r3, #16]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c60:	e04e      	b.n	8004d00 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c64:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 fcdc 	bl	8005624 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e058      	b.n	8004d28 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d124      	bne.n	8004d00 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	d107      	bne.n	8004cce <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ccc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	691a      	ldr	r2, [r3, #16]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd8:	b2d2      	uxtb	r2, r2
 8004cda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cea:	3b01      	subs	r3, #1
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f47f aeb6 	bne.w	8004a76 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	e000      	b.n	8004d28 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004d26:	2302      	movs	r3, #2
  }
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3728      	adds	r7, #40	@ 0x28
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	00010004 	.word	0x00010004

08004d34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b088      	sub	sp, #32
 8004d38:	af02      	add	r7, sp, #8
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	607a      	str	r2, [r7, #4]
 8004d3e:	603b      	str	r3, [r7, #0]
 8004d40:	460b      	mov	r3, r1
 8004d42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d006      	beq.n	8004d5e <I2C_MasterRequestWrite+0x2a>
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d003      	beq.n	8004d5e <I2C_MasterRequestWrite+0x2a>
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d5c:	d108      	bne.n	8004d70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	e00b      	b.n	8004d88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d74:	2b12      	cmp	r3, #18
 8004d76:	d107      	bne.n	8004d88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 fa9b 	bl	80052d0 <I2C_WaitOnFlagUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00d      	beq.n	8004dbc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004daa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dae:	d103      	bne.n	8004db8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004db6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e035      	b.n	8004e28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dc4:	d108      	bne.n	8004dd8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dc6:	897b      	ldrh	r3, [r7, #10]
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	461a      	mov	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004dd4:	611a      	str	r2, [r3, #16]
 8004dd6:	e01b      	b.n	8004e10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004dd8:	897b      	ldrh	r3, [r7, #10]
 8004dda:	11db      	asrs	r3, r3, #7
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	f003 0306 	and.w	r3, r3, #6
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	f063 030f 	orn	r3, r3, #15
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	490e      	ldr	r1, [pc, #56]	@ (8004e30 <I2C_MasterRequestWrite+0xfc>)
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f000 fae4 	bl	80053c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e010      	b.n	8004e28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e06:	897b      	ldrh	r3, [r7, #10]
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	4907      	ldr	r1, [pc, #28]	@ (8004e34 <I2C_MasterRequestWrite+0x100>)
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 fad4 	bl	80053c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e000      	b.n	8004e28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3718      	adds	r7, #24
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	00010008 	.word	0x00010008
 8004e34:	00010002 	.word	0x00010002

08004e38 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b088      	sub	sp, #32
 8004e3c:	af02      	add	r7, sp, #8
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	607a      	str	r2, [r7, #4]
 8004e42:	603b      	str	r3, [r7, #0]
 8004e44:	460b      	mov	r3, r1
 8004e46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e5c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d006      	beq.n	8004e72 <I2C_MasterRequestRead+0x3a>
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d003      	beq.n	8004e72 <I2C_MasterRequestRead+0x3a>
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e70:	d108      	bne.n	8004e84 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	e00b      	b.n	8004e9c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e88:	2b11      	cmp	r3, #17
 8004e8a:	d107      	bne.n	8004e9c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 fa11 	bl	80052d0 <I2C_WaitOnFlagUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00d      	beq.n	8004ed0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ec2:	d103      	bne.n	8004ecc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004eca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e079      	b.n	8004fc4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ed8:	d108      	bne.n	8004eec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004eda:	897b      	ldrh	r3, [r7, #10]
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	f043 0301 	orr.w	r3, r3, #1
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	611a      	str	r2, [r3, #16]
 8004eea:	e05f      	b.n	8004fac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004eec:	897b      	ldrh	r3, [r7, #10]
 8004eee:	11db      	asrs	r3, r3, #7
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	f003 0306 	and.w	r3, r3, #6
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	f063 030f 	orn	r3, r3, #15
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	4930      	ldr	r1, [pc, #192]	@ (8004fcc <I2C_MasterRequestRead+0x194>)
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 fa5a 	bl	80053c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e054      	b.n	8004fc4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f1a:	897b      	ldrh	r3, [r7, #10]
 8004f1c:	b2da      	uxtb	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	4929      	ldr	r1, [pc, #164]	@ (8004fd0 <I2C_MasterRequestRead+0x198>)
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 fa4a 	bl	80053c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e044      	b.n	8004fc4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	613b      	str	r3, [r7, #16]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	613b      	str	r3, [r7, #16]
 8004f4e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f5e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f000 f9af 	bl	80052d0 <I2C_WaitOnFlagUntilTimeout>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00d      	beq.n	8004f94 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f86:	d103      	bne.n	8004f90 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f8e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e017      	b.n	8004fc4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004f94:	897b      	ldrh	r3, [r7, #10]
 8004f96:	11db      	asrs	r3, r3, #7
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	f003 0306 	and.w	r3, r3, #6
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	f063 030e 	orn	r3, r3, #14
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	4907      	ldr	r1, [pc, #28]	@ (8004fd0 <I2C_MasterRequestRead+0x198>)
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 fa06 	bl	80053c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e000      	b.n	8004fc4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	00010008 	.word	0x00010008
 8004fd0:	00010002 	.word	0x00010002

08004fd4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	4608      	mov	r0, r1
 8004fde:	4611      	mov	r1, r2
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	817b      	strh	r3, [r7, #10]
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	813b      	strh	r3, [r7, #8]
 8004fea:	4613      	mov	r3, r2
 8004fec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ffc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	2200      	movs	r2, #0
 8005006:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 f960 	bl	80052d0 <I2C_WaitOnFlagUntilTimeout>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00d      	beq.n	8005032 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005020:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005024:	d103      	bne.n	800502e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800502c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e05f      	b.n	80050f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005032:	897b      	ldrh	r3, [r7, #10]
 8005034:	b2db      	uxtb	r3, r3
 8005036:	461a      	mov	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005040:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005044:	6a3a      	ldr	r2, [r7, #32]
 8005046:	492d      	ldr	r1, [pc, #180]	@ (80050fc <I2C_RequestMemoryWrite+0x128>)
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 f9bb 	bl	80053c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e04c      	b.n	80050f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005058:	2300      	movs	r3, #0
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800506e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005070:	6a39      	ldr	r1, [r7, #32]
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 fa46 	bl	8005504 <I2C_WaitOnTXEFlagUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00d      	beq.n	800509a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005082:	2b04      	cmp	r3, #4
 8005084:	d107      	bne.n	8005096 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005094:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e02b      	b.n	80050f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800509a:	88fb      	ldrh	r3, [r7, #6]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d105      	bne.n	80050ac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050a0:	893b      	ldrh	r3, [r7, #8]
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	611a      	str	r2, [r3, #16]
 80050aa:	e021      	b.n	80050f0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050ac:	893b      	ldrh	r3, [r7, #8]
 80050ae:	0a1b      	lsrs	r3, r3, #8
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050bc:	6a39      	ldr	r1, [r7, #32]
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 fa20 	bl	8005504 <I2C_WaitOnTXEFlagUntilTimeout>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00d      	beq.n	80050e6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d107      	bne.n	80050e2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e005      	b.n	80050f2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050e6:	893b      	ldrh	r3, [r7, #8]
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	00010002 	.word	0x00010002

08005100 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af02      	add	r7, sp, #8
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	4608      	mov	r0, r1
 800510a:	4611      	mov	r1, r2
 800510c:	461a      	mov	r2, r3
 800510e:	4603      	mov	r3, r0
 8005110:	817b      	strh	r3, [r7, #10]
 8005112:	460b      	mov	r3, r1
 8005114:	813b      	strh	r3, [r7, #8]
 8005116:	4613      	mov	r3, r2
 8005118:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005128:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005138:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	2200      	movs	r2, #0
 8005142:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f000 f8c2 	bl	80052d0 <I2C_WaitOnFlagUntilTimeout>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00d      	beq.n	800516e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800515c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005160:	d103      	bne.n	800516a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005168:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e0aa      	b.n	80052c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800516e:	897b      	ldrh	r3, [r7, #10]
 8005170:	b2db      	uxtb	r3, r3
 8005172:	461a      	mov	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800517c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800517e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005180:	6a3a      	ldr	r2, [r7, #32]
 8005182:	4952      	ldr	r1, [pc, #328]	@ (80052cc <I2C_RequestMemoryRead+0x1cc>)
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 f91d 	bl	80053c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e097      	b.n	80052c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005194:	2300      	movs	r3, #0
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	617b      	str	r3, [r7, #20]
 80051a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ac:	6a39      	ldr	r1, [r7, #32]
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 f9a8 	bl	8005504 <I2C_WaitOnTXEFlagUntilTimeout>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00d      	beq.n	80051d6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d107      	bne.n	80051d2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e076      	b.n	80052c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051d6:	88fb      	ldrh	r3, [r7, #6]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d105      	bne.n	80051e8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051dc:	893b      	ldrh	r3, [r7, #8]
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	611a      	str	r2, [r3, #16]
 80051e6:	e021      	b.n	800522c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051e8:	893b      	ldrh	r3, [r7, #8]
 80051ea:	0a1b      	lsrs	r3, r3, #8
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051f8:	6a39      	ldr	r1, [r7, #32]
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f000 f982 	bl	8005504 <I2C_WaitOnTXEFlagUntilTimeout>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00d      	beq.n	8005222 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520a:	2b04      	cmp	r3, #4
 800520c:	d107      	bne.n	800521e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800521c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e050      	b.n	80052c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005222:	893b      	ldrh	r3, [r7, #8]
 8005224:	b2da      	uxtb	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800522c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800522e:	6a39      	ldr	r1, [r7, #32]
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 f967 	bl	8005504 <I2C_WaitOnTXEFlagUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00d      	beq.n	8005258 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005240:	2b04      	cmp	r3, #4
 8005242:	d107      	bne.n	8005254 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005252:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e035      	b.n	80052c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005266:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	2200      	movs	r2, #0
 8005270:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 f82b 	bl	80052d0 <I2C_WaitOnFlagUntilTimeout>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00d      	beq.n	800529c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800528a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800528e:	d103      	bne.n	8005298 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005296:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e013      	b.n	80052c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800529c:	897b      	ldrh	r3, [r7, #10]
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	f043 0301 	orr.w	r3, r3, #1
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ae:	6a3a      	ldr	r2, [r7, #32]
 80052b0:	4906      	ldr	r1, [pc, #24]	@ (80052cc <I2C_RequestMemoryRead+0x1cc>)
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 f886 	bl	80053c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e000      	b.n	80052c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	00010002 	.word	0x00010002

080052d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	603b      	str	r3, [r7, #0]
 80052dc:	4613      	mov	r3, r2
 80052de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052e0:	e048      	b.n	8005374 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052e8:	d044      	beq.n	8005374 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ea:	f7fd fc81 	bl	8002bf0 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d302      	bcc.n	8005300 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d139      	bne.n	8005374 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	0c1b      	lsrs	r3, r3, #16
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b01      	cmp	r3, #1
 8005308:	d10d      	bne.n	8005326 <I2C_WaitOnFlagUntilTimeout+0x56>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	43da      	mvns	r2, r3
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4013      	ands	r3, r2
 8005316:	b29b      	uxth	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	bf0c      	ite	eq
 800531c:	2301      	moveq	r3, #1
 800531e:	2300      	movne	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	e00c      	b.n	8005340 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	43da      	mvns	r2, r3
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	4013      	ands	r3, r2
 8005332:	b29b      	uxth	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	bf0c      	ite	eq
 8005338:	2301      	moveq	r3, #1
 800533a:	2300      	movne	r3, #0
 800533c:	b2db      	uxtb	r3, r3
 800533e:	461a      	mov	r2, r3
 8005340:	79fb      	ldrb	r3, [r7, #7]
 8005342:	429a      	cmp	r2, r3
 8005344:	d116      	bne.n	8005374 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005360:	f043 0220 	orr.w	r2, r3, #32
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e023      	b.n	80053bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	0c1b      	lsrs	r3, r3, #16
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b01      	cmp	r3, #1
 800537c:	d10d      	bne.n	800539a <I2C_WaitOnFlagUntilTimeout+0xca>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	43da      	mvns	r2, r3
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	4013      	ands	r3, r2
 800538a:	b29b      	uxth	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	bf0c      	ite	eq
 8005390:	2301      	moveq	r3, #1
 8005392:	2300      	movne	r3, #0
 8005394:	b2db      	uxtb	r3, r3
 8005396:	461a      	mov	r2, r3
 8005398:	e00c      	b.n	80053b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	43da      	mvns	r2, r3
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	4013      	ands	r3, r2
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	bf0c      	ite	eq
 80053ac:	2301      	moveq	r3, #1
 80053ae:	2300      	movne	r3, #0
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	461a      	mov	r2, r3
 80053b4:	79fb      	ldrb	r3, [r7, #7]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d093      	beq.n	80052e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
 80053d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053d2:	e071      	b.n	80054b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053e2:	d123      	bne.n	800542c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80053fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005418:	f043 0204 	orr.w	r2, r3, #4
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e067      	b.n	80054fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005432:	d041      	beq.n	80054b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005434:	f7fd fbdc 	bl	8002bf0 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	429a      	cmp	r2, r3
 8005442:	d302      	bcc.n	800544a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d136      	bne.n	80054b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	0c1b      	lsrs	r3, r3, #16
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b01      	cmp	r3, #1
 8005452:	d10c      	bne.n	800546e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	43da      	mvns	r2, r3
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	4013      	ands	r3, r2
 8005460:	b29b      	uxth	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	bf14      	ite	ne
 8005466:	2301      	movne	r3, #1
 8005468:	2300      	moveq	r3, #0
 800546a:	b2db      	uxtb	r3, r3
 800546c:	e00b      	b.n	8005486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	43da      	mvns	r2, r3
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	4013      	ands	r3, r2
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	bf14      	ite	ne
 8005480:	2301      	movne	r3, #1
 8005482:	2300      	moveq	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d016      	beq.n	80054b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a4:	f043 0220 	orr.w	r2, r3, #32
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e021      	b.n	80054fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	0c1b      	lsrs	r3, r3, #16
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d10c      	bne.n	80054dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	43da      	mvns	r2, r3
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	4013      	ands	r3, r2
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	bf14      	ite	ne
 80054d4:	2301      	movne	r3, #1
 80054d6:	2300      	moveq	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	e00b      	b.n	80054f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	43da      	mvns	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	4013      	ands	r3, r2
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	bf14      	ite	ne
 80054ee:	2301      	movne	r3, #1
 80054f0:	2300      	moveq	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f47f af6d 	bne.w	80053d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005510:	e034      	b.n	800557c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 f8e3 	bl	80056de <I2C_IsAcknowledgeFailed>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e034      	b.n	800558c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005528:	d028      	beq.n	800557c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800552a:	f7fd fb61 	bl	8002bf0 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	429a      	cmp	r2, r3
 8005538:	d302      	bcc.n	8005540 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d11d      	bne.n	800557c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800554a:	2b80      	cmp	r3, #128	@ 0x80
 800554c:	d016      	beq.n	800557c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005568:	f043 0220 	orr.w	r2, r3, #32
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e007      	b.n	800558c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005586:	2b80      	cmp	r3, #128	@ 0x80
 8005588:	d1c3      	bne.n	8005512 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055a0:	e034      	b.n	800560c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 f89b 	bl	80056de <I2C_IsAcknowledgeFailed>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e034      	b.n	800561c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055b8:	d028      	beq.n	800560c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ba:	f7fd fb19 	bl	8002bf0 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d302      	bcc.n	80055d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d11d      	bne.n	800560c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	f003 0304 	and.w	r3, r3, #4
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d016      	beq.n	800560c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f8:	f043 0220 	orr.w	r2, r3, #32
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e007      	b.n	800561c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	f003 0304 	and.w	r3, r3, #4
 8005616:	2b04      	cmp	r3, #4
 8005618:	d1c3      	bne.n	80055a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005630:	e049      	b.n	80056c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	f003 0310 	and.w	r3, r3, #16
 800563c:	2b10      	cmp	r3, #16
 800563e:	d119      	bne.n	8005674 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f06f 0210 	mvn.w	r2, #16
 8005648:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e030      	b.n	80056d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005674:	f7fd fabc 	bl	8002bf0 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	429a      	cmp	r2, r3
 8005682:	d302      	bcc.n	800568a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d11d      	bne.n	80056c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005694:	2b40      	cmp	r3, #64	@ 0x40
 8005696:	d016      	beq.n	80056c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b2:	f043 0220 	orr.w	r2, r3, #32
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e007      	b.n	80056d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d0:	2b40      	cmp	r3, #64	@ 0x40
 80056d2:	d1ae      	bne.n	8005632 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056f4:	d11b      	bne.n	800572e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80056fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2220      	movs	r2, #32
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571a:	f043 0204 	orr.w	r2, r3, #4
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e000      	b.n	8005730 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e0cc      	b.n	80058ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005750:	4b68      	ldr	r3, [pc, #416]	@ (80058f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 030f 	and.w	r3, r3, #15
 8005758:	683a      	ldr	r2, [r7, #0]
 800575a:	429a      	cmp	r2, r3
 800575c:	d90c      	bls.n	8005778 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800575e:	4b65      	ldr	r3, [pc, #404]	@ (80058f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005766:	4b63      	ldr	r3, [pc, #396]	@ (80058f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 030f 	and.w	r3, r3, #15
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	429a      	cmp	r2, r3
 8005772:	d001      	beq.n	8005778 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e0b8      	b.n	80058ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b00      	cmp	r3, #0
 8005782:	d020      	beq.n	80057c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	2b00      	cmp	r3, #0
 800578e:	d005      	beq.n	800579c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005790:	4b59      	ldr	r3, [pc, #356]	@ (80058f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	4a58      	ldr	r2, [pc, #352]	@ (80058f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005796:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800579a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0308 	and.w	r3, r3, #8
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d005      	beq.n	80057b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057a8:	4b53      	ldr	r3, [pc, #332]	@ (80058f8 <HAL_RCC_ClockConfig+0x1bc>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	4a52      	ldr	r2, [pc, #328]	@ (80058f8 <HAL_RCC_ClockConfig+0x1bc>)
 80057ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80057b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057b4:	4b50      	ldr	r3, [pc, #320]	@ (80058f8 <HAL_RCC_ClockConfig+0x1bc>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	494d      	ldr	r1, [pc, #308]	@ (80058f8 <HAL_RCC_ClockConfig+0x1bc>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d044      	beq.n	800585c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d107      	bne.n	80057ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057da:	4b47      	ldr	r3, [pc, #284]	@ (80058f8 <HAL_RCC_ClockConfig+0x1bc>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d119      	bne.n	800581a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e07f      	b.n	80058ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d003      	beq.n	80057fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057f6:	2b03      	cmp	r3, #3
 80057f8:	d107      	bne.n	800580a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057fa:	4b3f      	ldr	r3, [pc, #252]	@ (80058f8 <HAL_RCC_ClockConfig+0x1bc>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d109      	bne.n	800581a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e06f      	b.n	80058ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800580a:	4b3b      	ldr	r3, [pc, #236]	@ (80058f8 <HAL_RCC_ClockConfig+0x1bc>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e067      	b.n	80058ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800581a:	4b37      	ldr	r3, [pc, #220]	@ (80058f8 <HAL_RCC_ClockConfig+0x1bc>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f023 0203 	bic.w	r2, r3, #3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	4934      	ldr	r1, [pc, #208]	@ (80058f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005828:	4313      	orrs	r3, r2
 800582a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800582c:	f7fd f9e0 	bl	8002bf0 <HAL_GetTick>
 8005830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005832:	e00a      	b.n	800584a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005834:	f7fd f9dc 	bl	8002bf0 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005842:	4293      	cmp	r3, r2
 8005844:	d901      	bls.n	800584a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e04f      	b.n	80058ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800584a:	4b2b      	ldr	r3, [pc, #172]	@ (80058f8 <HAL_RCC_ClockConfig+0x1bc>)
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f003 020c 	and.w	r2, r3, #12
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	429a      	cmp	r2, r3
 800585a:	d1eb      	bne.n	8005834 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800585c:	4b25      	ldr	r3, [pc, #148]	@ (80058f4 <HAL_RCC_ClockConfig+0x1b8>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 030f 	and.w	r3, r3, #15
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d20c      	bcs.n	8005884 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800586a:	4b22      	ldr	r3, [pc, #136]	@ (80058f4 <HAL_RCC_ClockConfig+0x1b8>)
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	b2d2      	uxtb	r2, r2
 8005870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005872:	4b20      	ldr	r3, [pc, #128]	@ (80058f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d001      	beq.n	8005884 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e032      	b.n	80058ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b00      	cmp	r3, #0
 800588e:	d008      	beq.n	80058a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005890:	4b19      	ldr	r3, [pc, #100]	@ (80058f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	4916      	ldr	r1, [pc, #88]	@ (80058f8 <HAL_RCC_ClockConfig+0x1bc>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0308 	and.w	r3, r3, #8
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d009      	beq.n	80058c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058ae:	4b12      	ldr	r3, [pc, #72]	@ (80058f8 <HAL_RCC_ClockConfig+0x1bc>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	490e      	ldr	r1, [pc, #56]	@ (80058f8 <HAL_RCC_ClockConfig+0x1bc>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058c2:	f000 f855 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 80058c6:	4602      	mov	r2, r0
 80058c8:	4b0b      	ldr	r3, [pc, #44]	@ (80058f8 <HAL_RCC_ClockConfig+0x1bc>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	091b      	lsrs	r3, r3, #4
 80058ce:	f003 030f 	and.w	r3, r3, #15
 80058d2:	490a      	ldr	r1, [pc, #40]	@ (80058fc <HAL_RCC_ClockConfig+0x1c0>)
 80058d4:	5ccb      	ldrb	r3, [r1, r3]
 80058d6:	fa22 f303 	lsr.w	r3, r2, r3
 80058da:	4a09      	ldr	r2, [pc, #36]	@ (8005900 <HAL_RCC_ClockConfig+0x1c4>)
 80058dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80058de:	4b09      	ldr	r3, [pc, #36]	@ (8005904 <HAL_RCC_ClockConfig+0x1c8>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fd f940 	bl	8002b68 <HAL_InitTick>

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	40023c00 	.word	0x40023c00
 80058f8:	40023800 	.word	0x40023800
 80058fc:	0800d010 	.word	0x0800d010
 8005900:	20000000 	.word	0x20000000
 8005904:	20000004 	.word	0x20000004

08005908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800590c:	4b03      	ldr	r3, [pc, #12]	@ (800591c <HAL_RCC_GetHCLKFreq+0x14>)
 800590e:	681b      	ldr	r3, [r3, #0]
}
 8005910:	4618      	mov	r0, r3
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	20000000 	.word	0x20000000

08005920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005924:	f7ff fff0 	bl	8005908 <HAL_RCC_GetHCLKFreq>
 8005928:	4602      	mov	r2, r0
 800592a:	4b05      	ldr	r3, [pc, #20]	@ (8005940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	0a9b      	lsrs	r3, r3, #10
 8005930:	f003 0307 	and.w	r3, r3, #7
 8005934:	4903      	ldr	r1, [pc, #12]	@ (8005944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005936:	5ccb      	ldrb	r3, [r1, r3]
 8005938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800593c:	4618      	mov	r0, r3
 800593e:	bd80      	pop	{r7, pc}
 8005940:	40023800 	.word	0x40023800
 8005944:	0800d020 	.word	0x0800d020

08005948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800594c:	f7ff ffdc 	bl	8005908 <HAL_RCC_GetHCLKFreq>
 8005950:	4602      	mov	r2, r0
 8005952:	4b05      	ldr	r3, [pc, #20]	@ (8005968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	0b5b      	lsrs	r3, r3, #13
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	4903      	ldr	r1, [pc, #12]	@ (800596c <HAL_RCC_GetPCLK2Freq+0x24>)
 800595e:	5ccb      	ldrb	r3, [r1, r3]
 8005960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005964:	4618      	mov	r0, r3
 8005966:	bd80      	pop	{r7, pc}
 8005968:	40023800 	.word	0x40023800
 800596c:	0800d020 	.word	0x0800d020

08005970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005974:	b0ae      	sub	sp, #184	@ 0xb8
 8005976:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800597e:	2300      	movs	r3, #0
 8005980:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005984:	2300      	movs	r3, #0
 8005986:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800598a:	2300      	movs	r3, #0
 800598c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005996:	4bcb      	ldr	r3, [pc, #812]	@ (8005cc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 030c 	and.w	r3, r3, #12
 800599e:	2b0c      	cmp	r3, #12
 80059a0:	f200 8206 	bhi.w	8005db0 <HAL_RCC_GetSysClockFreq+0x440>
 80059a4:	a201      	add	r2, pc, #4	@ (adr r2, 80059ac <HAL_RCC_GetSysClockFreq+0x3c>)
 80059a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059aa:	bf00      	nop
 80059ac:	080059e1 	.word	0x080059e1
 80059b0:	08005db1 	.word	0x08005db1
 80059b4:	08005db1 	.word	0x08005db1
 80059b8:	08005db1 	.word	0x08005db1
 80059bc:	080059e9 	.word	0x080059e9
 80059c0:	08005db1 	.word	0x08005db1
 80059c4:	08005db1 	.word	0x08005db1
 80059c8:	08005db1 	.word	0x08005db1
 80059cc:	080059f1 	.word	0x080059f1
 80059d0:	08005db1 	.word	0x08005db1
 80059d4:	08005db1 	.word	0x08005db1
 80059d8:	08005db1 	.word	0x08005db1
 80059dc:	08005be1 	.word	0x08005be1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059e0:	4bb9      	ldr	r3, [pc, #740]	@ (8005cc8 <HAL_RCC_GetSysClockFreq+0x358>)
 80059e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80059e6:	e1e7      	b.n	8005db8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059e8:	4bb8      	ldr	r3, [pc, #736]	@ (8005ccc <HAL_RCC_GetSysClockFreq+0x35c>)
 80059ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80059ee:	e1e3      	b.n	8005db8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059f0:	4bb4      	ldr	r3, [pc, #720]	@ (8005cc4 <HAL_RCC_GetSysClockFreq+0x354>)
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059fc:	4bb1      	ldr	r3, [pc, #708]	@ (8005cc4 <HAL_RCC_GetSysClockFreq+0x354>)
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d071      	beq.n	8005aec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a08:	4bae      	ldr	r3, [pc, #696]	@ (8005cc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	099b      	lsrs	r3, r3, #6
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a14:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005a18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a24:	2300      	movs	r3, #0
 8005a26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a2e:	4622      	mov	r2, r4
 8005a30:	462b      	mov	r3, r5
 8005a32:	f04f 0000 	mov.w	r0, #0
 8005a36:	f04f 0100 	mov.w	r1, #0
 8005a3a:	0159      	lsls	r1, r3, #5
 8005a3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a40:	0150      	lsls	r0, r2, #5
 8005a42:	4602      	mov	r2, r0
 8005a44:	460b      	mov	r3, r1
 8005a46:	4621      	mov	r1, r4
 8005a48:	1a51      	subs	r1, r2, r1
 8005a4a:	6439      	str	r1, [r7, #64]	@ 0x40
 8005a4c:	4629      	mov	r1, r5
 8005a4e:	eb63 0301 	sbc.w	r3, r3, r1
 8005a52:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a54:	f04f 0200 	mov.w	r2, #0
 8005a58:	f04f 0300 	mov.w	r3, #0
 8005a5c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005a60:	4649      	mov	r1, r9
 8005a62:	018b      	lsls	r3, r1, #6
 8005a64:	4641      	mov	r1, r8
 8005a66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a6a:	4641      	mov	r1, r8
 8005a6c:	018a      	lsls	r2, r1, #6
 8005a6e:	4641      	mov	r1, r8
 8005a70:	1a51      	subs	r1, r2, r1
 8005a72:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a74:	4649      	mov	r1, r9
 8005a76:	eb63 0301 	sbc.w	r3, r3, r1
 8005a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a7c:	f04f 0200 	mov.w	r2, #0
 8005a80:	f04f 0300 	mov.w	r3, #0
 8005a84:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005a88:	4649      	mov	r1, r9
 8005a8a:	00cb      	lsls	r3, r1, #3
 8005a8c:	4641      	mov	r1, r8
 8005a8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a92:	4641      	mov	r1, r8
 8005a94:	00ca      	lsls	r2, r1, #3
 8005a96:	4610      	mov	r0, r2
 8005a98:	4619      	mov	r1, r3
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	4622      	mov	r2, r4
 8005a9e:	189b      	adds	r3, r3, r2
 8005aa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aa2:	462b      	mov	r3, r5
 8005aa4:	460a      	mov	r2, r1
 8005aa6:	eb42 0303 	adc.w	r3, r2, r3
 8005aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005ab8:	4629      	mov	r1, r5
 8005aba:	024b      	lsls	r3, r1, #9
 8005abc:	4621      	mov	r1, r4
 8005abe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	024a      	lsls	r2, r1, #9
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	4619      	mov	r1, r3
 8005aca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ad4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005ad8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005adc:	f7fb f8f4 	bl	8000cc8 <__aeabi_uldivmod>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005aea:	e067      	b.n	8005bbc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aec:	4b75      	ldr	r3, [pc, #468]	@ (8005cc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	099b      	lsrs	r3, r3, #6
 8005af2:	2200      	movs	r2, #0
 8005af4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005af8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005afc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b06:	2300      	movs	r3, #0
 8005b08:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005b0a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005b0e:	4622      	mov	r2, r4
 8005b10:	462b      	mov	r3, r5
 8005b12:	f04f 0000 	mov.w	r0, #0
 8005b16:	f04f 0100 	mov.w	r1, #0
 8005b1a:	0159      	lsls	r1, r3, #5
 8005b1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b20:	0150      	lsls	r0, r2, #5
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4621      	mov	r1, r4
 8005b28:	1a51      	subs	r1, r2, r1
 8005b2a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005b2c:	4629      	mov	r1, r5
 8005b2e:	eb63 0301 	sbc.w	r3, r3, r1
 8005b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b34:	f04f 0200 	mov.w	r2, #0
 8005b38:	f04f 0300 	mov.w	r3, #0
 8005b3c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005b40:	4649      	mov	r1, r9
 8005b42:	018b      	lsls	r3, r1, #6
 8005b44:	4641      	mov	r1, r8
 8005b46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b4a:	4641      	mov	r1, r8
 8005b4c:	018a      	lsls	r2, r1, #6
 8005b4e:	4641      	mov	r1, r8
 8005b50:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b54:	4649      	mov	r1, r9
 8005b56:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b5a:	f04f 0200 	mov.w	r2, #0
 8005b5e:	f04f 0300 	mov.w	r3, #0
 8005b62:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b66:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b6e:	4692      	mov	sl, r2
 8005b70:	469b      	mov	fp, r3
 8005b72:	4623      	mov	r3, r4
 8005b74:	eb1a 0303 	adds.w	r3, sl, r3
 8005b78:	623b      	str	r3, [r7, #32]
 8005b7a:	462b      	mov	r3, r5
 8005b7c:	eb4b 0303 	adc.w	r3, fp, r3
 8005b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b82:	f04f 0200 	mov.w	r2, #0
 8005b86:	f04f 0300 	mov.w	r3, #0
 8005b8a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005b8e:	4629      	mov	r1, r5
 8005b90:	028b      	lsls	r3, r1, #10
 8005b92:	4621      	mov	r1, r4
 8005b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b98:	4621      	mov	r1, r4
 8005b9a:	028a      	lsls	r2, r1, #10
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ba8:	677a      	str	r2, [r7, #116]	@ 0x74
 8005baa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005bae:	f7fb f88b 	bl	8000cc8 <__aeabi_uldivmod>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005bbc:	4b41      	ldr	r3, [pc, #260]	@ (8005cc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	0c1b      	lsrs	r3, r3, #16
 8005bc2:	f003 0303 	and.w	r3, r3, #3
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005bce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005bd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005bde:	e0eb      	b.n	8005db8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005be0:	4b38      	ldr	r3, [pc, #224]	@ (8005cc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005be8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bec:	4b35      	ldr	r3, [pc, #212]	@ (8005cc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d06b      	beq.n	8005cd0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bf8:	4b32      	ldr	r3, [pc, #200]	@ (8005cc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	099b      	lsrs	r3, r3, #6
 8005bfe:	2200      	movs	r2, #0
 8005c00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c10:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005c14:	4622      	mov	r2, r4
 8005c16:	462b      	mov	r3, r5
 8005c18:	f04f 0000 	mov.w	r0, #0
 8005c1c:	f04f 0100 	mov.w	r1, #0
 8005c20:	0159      	lsls	r1, r3, #5
 8005c22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c26:	0150      	lsls	r0, r2, #5
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	1a51      	subs	r1, r2, r1
 8005c30:	61b9      	str	r1, [r7, #24]
 8005c32:	4629      	mov	r1, r5
 8005c34:	eb63 0301 	sbc.w	r3, r3, r1
 8005c38:	61fb      	str	r3, [r7, #28]
 8005c3a:	f04f 0200 	mov.w	r2, #0
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005c46:	4659      	mov	r1, fp
 8005c48:	018b      	lsls	r3, r1, #6
 8005c4a:	4651      	mov	r1, sl
 8005c4c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c50:	4651      	mov	r1, sl
 8005c52:	018a      	lsls	r2, r1, #6
 8005c54:	4651      	mov	r1, sl
 8005c56:	ebb2 0801 	subs.w	r8, r2, r1
 8005c5a:	4659      	mov	r1, fp
 8005c5c:	eb63 0901 	sbc.w	r9, r3, r1
 8005c60:	f04f 0200 	mov.w	r2, #0
 8005c64:	f04f 0300 	mov.w	r3, #0
 8005c68:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c6c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c70:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c74:	4690      	mov	r8, r2
 8005c76:	4699      	mov	r9, r3
 8005c78:	4623      	mov	r3, r4
 8005c7a:	eb18 0303 	adds.w	r3, r8, r3
 8005c7e:	613b      	str	r3, [r7, #16]
 8005c80:	462b      	mov	r3, r5
 8005c82:	eb49 0303 	adc.w	r3, r9, r3
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	f04f 0200 	mov.w	r2, #0
 8005c8c:	f04f 0300 	mov.w	r3, #0
 8005c90:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005c94:	4629      	mov	r1, r5
 8005c96:	024b      	lsls	r3, r1, #9
 8005c98:	4621      	mov	r1, r4
 8005c9a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	024a      	lsls	r2, r1, #9
 8005ca2:	4610      	mov	r0, r2
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005caa:	2200      	movs	r2, #0
 8005cac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cae:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005cb0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005cb4:	f7fb f808 	bl	8000cc8 <__aeabi_uldivmod>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cc2:	e065      	b.n	8005d90 <HAL_RCC_GetSysClockFreq+0x420>
 8005cc4:	40023800 	.word	0x40023800
 8005cc8:	00f42400 	.word	0x00f42400
 8005ccc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cd0:	4b3d      	ldr	r3, [pc, #244]	@ (8005dc8 <HAL_RCC_GetSysClockFreq+0x458>)
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	099b      	lsrs	r3, r3, #6
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	4618      	mov	r0, r3
 8005cda:	4611      	mov	r1, r2
 8005cdc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005ce0:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ce6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005cea:	4642      	mov	r2, r8
 8005cec:	464b      	mov	r3, r9
 8005cee:	f04f 0000 	mov.w	r0, #0
 8005cf2:	f04f 0100 	mov.w	r1, #0
 8005cf6:	0159      	lsls	r1, r3, #5
 8005cf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cfc:	0150      	lsls	r0, r2, #5
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	4641      	mov	r1, r8
 8005d04:	1a51      	subs	r1, r2, r1
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	4649      	mov	r1, r9
 8005d0a:	eb63 0301 	sbc.w	r3, r3, r1
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	f04f 0200 	mov.w	r2, #0
 8005d14:	f04f 0300 	mov.w	r3, #0
 8005d18:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005d1c:	4659      	mov	r1, fp
 8005d1e:	018b      	lsls	r3, r1, #6
 8005d20:	4651      	mov	r1, sl
 8005d22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d26:	4651      	mov	r1, sl
 8005d28:	018a      	lsls	r2, r1, #6
 8005d2a:	4651      	mov	r1, sl
 8005d2c:	1a54      	subs	r4, r2, r1
 8005d2e:	4659      	mov	r1, fp
 8005d30:	eb63 0501 	sbc.w	r5, r3, r1
 8005d34:	f04f 0200 	mov.w	r2, #0
 8005d38:	f04f 0300 	mov.w	r3, #0
 8005d3c:	00eb      	lsls	r3, r5, #3
 8005d3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d42:	00e2      	lsls	r2, r4, #3
 8005d44:	4614      	mov	r4, r2
 8005d46:	461d      	mov	r5, r3
 8005d48:	4643      	mov	r3, r8
 8005d4a:	18e3      	adds	r3, r4, r3
 8005d4c:	603b      	str	r3, [r7, #0]
 8005d4e:	464b      	mov	r3, r9
 8005d50:	eb45 0303 	adc.w	r3, r5, r3
 8005d54:	607b      	str	r3, [r7, #4]
 8005d56:	f04f 0200 	mov.w	r2, #0
 8005d5a:	f04f 0300 	mov.w	r3, #0
 8005d5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d62:	4629      	mov	r1, r5
 8005d64:	028b      	lsls	r3, r1, #10
 8005d66:	4621      	mov	r1, r4
 8005d68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d6c:	4621      	mov	r1, r4
 8005d6e:	028a      	lsls	r2, r1, #10
 8005d70:	4610      	mov	r0, r2
 8005d72:	4619      	mov	r1, r3
 8005d74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d78:	2200      	movs	r2, #0
 8005d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d7c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005d7e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d82:	f7fa ffa1 	bl	8000cc8 <__aeabi_uldivmod>
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005d90:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc8 <HAL_RCC_GetSysClockFreq+0x458>)
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	0f1b      	lsrs	r3, r3, #28
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005d9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005da2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005daa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005dae:	e003      	b.n	8005db8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005db0:	4b06      	ldr	r3, [pc, #24]	@ (8005dcc <HAL_RCC_GetSysClockFreq+0x45c>)
 8005db2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005db6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005db8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	37b8      	adds	r7, #184	@ 0xb8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dc6:	bf00      	nop
 8005dc8:	40023800 	.word	0x40023800
 8005dcc:	00f42400 	.word	0x00f42400

08005dd0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e28d      	b.n	80062fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 8083 	beq.w	8005ef6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005df0:	4b94      	ldr	r3, [pc, #592]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f003 030c 	and.w	r3, r3, #12
 8005df8:	2b04      	cmp	r3, #4
 8005dfa:	d019      	beq.n	8005e30 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005dfc:	4b91      	ldr	r3, [pc, #580]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f003 030c 	and.w	r3, r3, #12
        || \
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	d106      	bne.n	8005e16 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005e08:	4b8e      	ldr	r3, [pc, #568]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e14:	d00c      	beq.n	8005e30 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e16:	4b8b      	ldr	r3, [pc, #556]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005e1e:	2b0c      	cmp	r3, #12
 8005e20:	d112      	bne.n	8005e48 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e22:	4b88      	ldr	r3, [pc, #544]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e2e:	d10b      	bne.n	8005e48 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e30:	4b84      	ldr	r3, [pc, #528]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d05b      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x124>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d157      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e25a      	b.n	80062fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e50:	d106      	bne.n	8005e60 <HAL_RCC_OscConfig+0x90>
 8005e52:	4b7c      	ldr	r3, [pc, #496]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a7b      	ldr	r2, [pc, #492]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e5c:	6013      	str	r3, [r2, #0]
 8005e5e:	e01d      	b.n	8005e9c <HAL_RCC_OscConfig+0xcc>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e68:	d10c      	bne.n	8005e84 <HAL_RCC_OscConfig+0xb4>
 8005e6a:	4b76      	ldr	r3, [pc, #472]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a75      	ldr	r2, [pc, #468]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005e70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	4b73      	ldr	r3, [pc, #460]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a72      	ldr	r2, [pc, #456]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e80:	6013      	str	r3, [r2, #0]
 8005e82:	e00b      	b.n	8005e9c <HAL_RCC_OscConfig+0xcc>
 8005e84:	4b6f      	ldr	r3, [pc, #444]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a6e      	ldr	r2, [pc, #440]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005e8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e8e:	6013      	str	r3, [r2, #0]
 8005e90:	4b6c      	ldr	r3, [pc, #432]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a6b      	ldr	r2, [pc, #428]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005e96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d013      	beq.n	8005ecc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea4:	f7fc fea4 	bl	8002bf0 <HAL_GetTick>
 8005ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eaa:	e008      	b.n	8005ebe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005eac:	f7fc fea0 	bl	8002bf0 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b64      	cmp	r3, #100	@ 0x64
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e21f      	b.n	80062fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ebe:	4b61      	ldr	r3, [pc, #388]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d0f0      	beq.n	8005eac <HAL_RCC_OscConfig+0xdc>
 8005eca:	e014      	b.n	8005ef6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ecc:	f7fc fe90 	bl	8002bf0 <HAL_GetTick>
 8005ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ed2:	e008      	b.n	8005ee6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ed4:	f7fc fe8c 	bl	8002bf0 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	2b64      	cmp	r3, #100	@ 0x64
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e20b      	b.n	80062fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ee6:	4b57      	ldr	r3, [pc, #348]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1f0      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x104>
 8005ef2:	e000      	b.n	8005ef6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0302 	and.w	r3, r3, #2
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d06f      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005f02:	4b50      	ldr	r3, [pc, #320]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 030c 	and.w	r3, r3, #12
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d017      	beq.n	8005f3e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005f0e:	4b4d      	ldr	r3, [pc, #308]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f003 030c 	and.w	r3, r3, #12
        || \
 8005f16:	2b08      	cmp	r3, #8
 8005f18:	d105      	bne.n	8005f26 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005f1a:	4b4a      	ldr	r3, [pc, #296]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00b      	beq.n	8005f3e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f26:	4b47      	ldr	r3, [pc, #284]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005f2e:	2b0c      	cmp	r3, #12
 8005f30:	d11c      	bne.n	8005f6c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f32:	4b44      	ldr	r3, [pc, #272]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d116      	bne.n	8005f6c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f3e:	4b41      	ldr	r3, [pc, #260]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d005      	beq.n	8005f56 <HAL_RCC_OscConfig+0x186>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d001      	beq.n	8005f56 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e1d3      	b.n	80062fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f56:	4b3b      	ldr	r3, [pc, #236]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	4937      	ldr	r1, [pc, #220]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f6a:	e03a      	b.n	8005fe2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d020      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f74:	4b34      	ldr	r3, [pc, #208]	@ (8006048 <HAL_RCC_OscConfig+0x278>)
 8005f76:	2201      	movs	r2, #1
 8005f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7a:	f7fc fe39 	bl	8002bf0 <HAL_GetTick>
 8005f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f80:	e008      	b.n	8005f94 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f82:	f7fc fe35 	bl	8002bf0 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d901      	bls.n	8005f94 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e1b4      	b.n	80062fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f94:	4b2b      	ldr	r3, [pc, #172]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0f0      	beq.n	8005f82 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fa0:	4b28      	ldr	r3, [pc, #160]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	4925      	ldr	r1, [pc, #148]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	600b      	str	r3, [r1, #0]
 8005fb4:	e015      	b.n	8005fe2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fb6:	4b24      	ldr	r3, [pc, #144]	@ (8006048 <HAL_RCC_OscConfig+0x278>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fbc:	f7fc fe18 	bl	8002bf0 <HAL_GetTick>
 8005fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fc4:	f7fc fe14 	bl	8002bf0 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e193      	b.n	80062fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1f0      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d036      	beq.n	800605c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d016      	beq.n	8006024 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ff6:	4b15      	ldr	r3, [pc, #84]	@ (800604c <HAL_RCC_OscConfig+0x27c>)
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ffc:	f7fc fdf8 	bl	8002bf0 <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006004:	f7fc fdf4 	bl	8002bf0 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b02      	cmp	r3, #2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e173      	b.n	80062fe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006016:	4b0b      	ldr	r3, [pc, #44]	@ (8006044 <HAL_RCC_OscConfig+0x274>)
 8006018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0f0      	beq.n	8006004 <HAL_RCC_OscConfig+0x234>
 8006022:	e01b      	b.n	800605c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006024:	4b09      	ldr	r3, [pc, #36]	@ (800604c <HAL_RCC_OscConfig+0x27c>)
 8006026:	2200      	movs	r2, #0
 8006028:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800602a:	f7fc fde1 	bl	8002bf0 <HAL_GetTick>
 800602e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006030:	e00e      	b.n	8006050 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006032:	f7fc fddd 	bl	8002bf0 <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	2b02      	cmp	r3, #2
 800603e:	d907      	bls.n	8006050 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e15c      	b.n	80062fe <HAL_RCC_OscConfig+0x52e>
 8006044:	40023800 	.word	0x40023800
 8006048:	42470000 	.word	0x42470000
 800604c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006050:	4b8a      	ldr	r3, [pc, #552]	@ (800627c <HAL_RCC_OscConfig+0x4ac>)
 8006052:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006054:	f003 0302 	and.w	r3, r3, #2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1ea      	bne.n	8006032 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b00      	cmp	r3, #0
 8006066:	f000 8097 	beq.w	8006198 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800606a:	2300      	movs	r3, #0
 800606c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800606e:	4b83      	ldr	r3, [pc, #524]	@ (800627c <HAL_RCC_OscConfig+0x4ac>)
 8006070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10f      	bne.n	800609a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800607a:	2300      	movs	r3, #0
 800607c:	60bb      	str	r3, [r7, #8]
 800607e:	4b7f      	ldr	r3, [pc, #508]	@ (800627c <HAL_RCC_OscConfig+0x4ac>)
 8006080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006082:	4a7e      	ldr	r2, [pc, #504]	@ (800627c <HAL_RCC_OscConfig+0x4ac>)
 8006084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006088:	6413      	str	r3, [r2, #64]	@ 0x40
 800608a:	4b7c      	ldr	r3, [pc, #496]	@ (800627c <HAL_RCC_OscConfig+0x4ac>)
 800608c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006092:	60bb      	str	r3, [r7, #8]
 8006094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006096:	2301      	movs	r3, #1
 8006098:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800609a:	4b79      	ldr	r3, [pc, #484]	@ (8006280 <HAL_RCC_OscConfig+0x4b0>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d118      	bne.n	80060d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060a6:	4b76      	ldr	r3, [pc, #472]	@ (8006280 <HAL_RCC_OscConfig+0x4b0>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a75      	ldr	r2, [pc, #468]	@ (8006280 <HAL_RCC_OscConfig+0x4b0>)
 80060ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060b2:	f7fc fd9d 	bl	8002bf0 <HAL_GetTick>
 80060b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060b8:	e008      	b.n	80060cc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060ba:	f7fc fd99 	bl	8002bf0 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d901      	bls.n	80060cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e118      	b.n	80062fe <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060cc:	4b6c      	ldr	r3, [pc, #432]	@ (8006280 <HAL_RCC_OscConfig+0x4b0>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d0f0      	beq.n	80060ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d106      	bne.n	80060ee <HAL_RCC_OscConfig+0x31e>
 80060e0:	4b66      	ldr	r3, [pc, #408]	@ (800627c <HAL_RCC_OscConfig+0x4ac>)
 80060e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e4:	4a65      	ldr	r2, [pc, #404]	@ (800627c <HAL_RCC_OscConfig+0x4ac>)
 80060e6:	f043 0301 	orr.w	r3, r3, #1
 80060ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80060ec:	e01c      	b.n	8006128 <HAL_RCC_OscConfig+0x358>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	2b05      	cmp	r3, #5
 80060f4:	d10c      	bne.n	8006110 <HAL_RCC_OscConfig+0x340>
 80060f6:	4b61      	ldr	r3, [pc, #388]	@ (800627c <HAL_RCC_OscConfig+0x4ac>)
 80060f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060fa:	4a60      	ldr	r2, [pc, #384]	@ (800627c <HAL_RCC_OscConfig+0x4ac>)
 80060fc:	f043 0304 	orr.w	r3, r3, #4
 8006100:	6713      	str	r3, [r2, #112]	@ 0x70
 8006102:	4b5e      	ldr	r3, [pc, #376]	@ (800627c <HAL_RCC_OscConfig+0x4ac>)
 8006104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006106:	4a5d      	ldr	r2, [pc, #372]	@ (800627c <HAL_RCC_OscConfig+0x4ac>)
 8006108:	f043 0301 	orr.w	r3, r3, #1
 800610c:	6713      	str	r3, [r2, #112]	@ 0x70
 800610e:	e00b      	b.n	8006128 <HAL_RCC_OscConfig+0x358>
 8006110:	4b5a      	ldr	r3, [pc, #360]	@ (800627c <HAL_RCC_OscConfig+0x4ac>)
 8006112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006114:	4a59      	ldr	r2, [pc, #356]	@ (800627c <HAL_RCC_OscConfig+0x4ac>)
 8006116:	f023 0301 	bic.w	r3, r3, #1
 800611a:	6713      	str	r3, [r2, #112]	@ 0x70
 800611c:	4b57      	ldr	r3, [pc, #348]	@ (800627c <HAL_RCC_OscConfig+0x4ac>)
 800611e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006120:	4a56      	ldr	r2, [pc, #344]	@ (800627c <HAL_RCC_OscConfig+0x4ac>)
 8006122:	f023 0304 	bic.w	r3, r3, #4
 8006126:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d015      	beq.n	800615c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006130:	f7fc fd5e 	bl	8002bf0 <HAL_GetTick>
 8006134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006136:	e00a      	b.n	800614e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006138:	f7fc fd5a 	bl	8002bf0 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006146:	4293      	cmp	r3, r2
 8006148:	d901      	bls.n	800614e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e0d7      	b.n	80062fe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800614e:	4b4b      	ldr	r3, [pc, #300]	@ (800627c <HAL_RCC_OscConfig+0x4ac>)
 8006150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d0ee      	beq.n	8006138 <HAL_RCC_OscConfig+0x368>
 800615a:	e014      	b.n	8006186 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800615c:	f7fc fd48 	bl	8002bf0 <HAL_GetTick>
 8006160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006162:	e00a      	b.n	800617a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006164:	f7fc fd44 	bl	8002bf0 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006172:	4293      	cmp	r3, r2
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e0c1      	b.n	80062fe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800617a:	4b40      	ldr	r3, [pc, #256]	@ (800627c <HAL_RCC_OscConfig+0x4ac>)
 800617c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1ee      	bne.n	8006164 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006186:	7dfb      	ldrb	r3, [r7, #23]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d105      	bne.n	8006198 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800618c:	4b3b      	ldr	r3, [pc, #236]	@ (800627c <HAL_RCC_OscConfig+0x4ac>)
 800618e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006190:	4a3a      	ldr	r2, [pc, #232]	@ (800627c <HAL_RCC_OscConfig+0x4ac>)
 8006192:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006196:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	2b00      	cmp	r3, #0
 800619e:	f000 80ad 	beq.w	80062fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061a2:	4b36      	ldr	r3, [pc, #216]	@ (800627c <HAL_RCC_OscConfig+0x4ac>)
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f003 030c 	and.w	r3, r3, #12
 80061aa:	2b08      	cmp	r3, #8
 80061ac:	d060      	beq.n	8006270 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d145      	bne.n	8006242 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061b6:	4b33      	ldr	r3, [pc, #204]	@ (8006284 <HAL_RCC_OscConfig+0x4b4>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061bc:	f7fc fd18 	bl	8002bf0 <HAL_GetTick>
 80061c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061c2:	e008      	b.n	80061d6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061c4:	f7fc fd14 	bl	8002bf0 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d901      	bls.n	80061d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e093      	b.n	80062fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061d6:	4b29      	ldr	r3, [pc, #164]	@ (800627c <HAL_RCC_OscConfig+0x4ac>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1f0      	bne.n	80061c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	69da      	ldr	r2, [r3, #28]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	431a      	orrs	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f0:	019b      	lsls	r3, r3, #6
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f8:	085b      	lsrs	r3, r3, #1
 80061fa:	3b01      	subs	r3, #1
 80061fc:	041b      	lsls	r3, r3, #16
 80061fe:	431a      	orrs	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006204:	061b      	lsls	r3, r3, #24
 8006206:	431a      	orrs	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800620c:	071b      	lsls	r3, r3, #28
 800620e:	491b      	ldr	r1, [pc, #108]	@ (800627c <HAL_RCC_OscConfig+0x4ac>)
 8006210:	4313      	orrs	r3, r2
 8006212:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006214:	4b1b      	ldr	r3, [pc, #108]	@ (8006284 <HAL_RCC_OscConfig+0x4b4>)
 8006216:	2201      	movs	r2, #1
 8006218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800621a:	f7fc fce9 	bl	8002bf0 <HAL_GetTick>
 800621e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006220:	e008      	b.n	8006234 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006222:	f7fc fce5 	bl	8002bf0 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	2b02      	cmp	r3, #2
 800622e:	d901      	bls.n	8006234 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e064      	b.n	80062fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006234:	4b11      	ldr	r3, [pc, #68]	@ (800627c <HAL_RCC_OscConfig+0x4ac>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d0f0      	beq.n	8006222 <HAL_RCC_OscConfig+0x452>
 8006240:	e05c      	b.n	80062fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006242:	4b10      	ldr	r3, [pc, #64]	@ (8006284 <HAL_RCC_OscConfig+0x4b4>)
 8006244:	2200      	movs	r2, #0
 8006246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006248:	f7fc fcd2 	bl	8002bf0 <HAL_GetTick>
 800624c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800624e:	e008      	b.n	8006262 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006250:	f7fc fcce 	bl	8002bf0 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e04d      	b.n	80062fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006262:	4b06      	ldr	r3, [pc, #24]	@ (800627c <HAL_RCC_OscConfig+0x4ac>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1f0      	bne.n	8006250 <HAL_RCC_OscConfig+0x480>
 800626e:	e045      	b.n	80062fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d107      	bne.n	8006288 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e040      	b.n	80062fe <HAL_RCC_OscConfig+0x52e>
 800627c:	40023800 	.word	0x40023800
 8006280:	40007000 	.word	0x40007000
 8006284:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006288:	4b1f      	ldr	r3, [pc, #124]	@ (8006308 <HAL_RCC_OscConfig+0x538>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d030      	beq.n	80062f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d129      	bne.n	80062f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d122      	bne.n	80062f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80062b8:	4013      	ands	r3, r2
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80062be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d119      	bne.n	80062f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ce:	085b      	lsrs	r3, r3, #1
 80062d0:	3b01      	subs	r3, #1
 80062d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d10f      	bne.n	80062f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d107      	bne.n	80062f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d001      	beq.n	80062fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e000      	b.n	80062fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3718      	adds	r7, #24
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	40023800 	.word	0x40023800

0800630c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e041      	b.n	80063a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d106      	bne.n	8006338 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7fc fa9a 	bl	800286c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3304      	adds	r3, #4
 8006348:	4619      	mov	r1, r3
 800634a:	4610      	mov	r0, r2
 800634c:	f000 fa7e 	bl	800684c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d001      	beq.n	80063c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e04e      	b.n	8006462 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68da      	ldr	r2, [r3, #12]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0201 	orr.w	r2, r2, #1
 80063da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a23      	ldr	r2, [pc, #140]	@ (8006470 <HAL_TIM_Base_Start_IT+0xc4>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d022      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x80>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ee:	d01d      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x80>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006474 <HAL_TIM_Base_Start_IT+0xc8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d018      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x80>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a1e      	ldr	r2, [pc, #120]	@ (8006478 <HAL_TIM_Base_Start_IT+0xcc>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d013      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x80>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a1c      	ldr	r2, [pc, #112]	@ (800647c <HAL_TIM_Base_Start_IT+0xd0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d00e      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x80>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a1b      	ldr	r2, [pc, #108]	@ (8006480 <HAL_TIM_Base_Start_IT+0xd4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d009      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x80>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a19      	ldr	r2, [pc, #100]	@ (8006484 <HAL_TIM_Base_Start_IT+0xd8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d004      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x80>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a18      	ldr	r2, [pc, #96]	@ (8006488 <HAL_TIM_Base_Start_IT+0xdc>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d111      	bne.n	8006450 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2b06      	cmp	r3, #6
 800643c:	d010      	beq.n	8006460 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f042 0201 	orr.w	r2, r2, #1
 800644c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800644e:	e007      	b.n	8006460 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0201 	orr.w	r2, r2, #1
 800645e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	40010000 	.word	0x40010000
 8006474:	40000400 	.word	0x40000400
 8006478:	40000800 	.word	0x40000800
 800647c:	40000c00 	.word	0x40000c00
 8006480:	40010400 	.word	0x40010400
 8006484:	40014000 	.word	0x40014000
 8006488:	40001800 	.word	0x40001800

0800648c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d020      	beq.n	80064f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f003 0302 	and.w	r3, r3, #2
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d01b      	beq.n	80064f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f06f 0202 	mvn.w	r2, #2
 80064c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	f003 0303 	and.w	r3, r3, #3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f999 	bl	800680e <HAL_TIM_IC_CaptureCallback>
 80064dc:	e005      	b.n	80064ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f98b 	bl	80067fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f99c 	bl	8006822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	f003 0304 	and.w	r3, r3, #4
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d020      	beq.n	800653c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f003 0304 	and.w	r3, r3, #4
 8006500:	2b00      	cmp	r3, #0
 8006502:	d01b      	beq.n	800653c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f06f 0204 	mvn.w	r2, #4
 800650c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2202      	movs	r2, #2
 8006512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800651e:	2b00      	cmp	r3, #0
 8006520:	d003      	beq.n	800652a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f973 	bl	800680e <HAL_TIM_IC_CaptureCallback>
 8006528:	e005      	b.n	8006536 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f965 	bl	80067fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f976 	bl	8006822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	f003 0308 	and.w	r3, r3, #8
 8006542:	2b00      	cmp	r3, #0
 8006544:	d020      	beq.n	8006588 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f003 0308 	and.w	r3, r3, #8
 800654c:	2b00      	cmp	r3, #0
 800654e:	d01b      	beq.n	8006588 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f06f 0208 	mvn.w	r2, #8
 8006558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2204      	movs	r2, #4
 800655e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	f003 0303 	and.w	r3, r3, #3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f94d 	bl	800680e <HAL_TIM_IC_CaptureCallback>
 8006574:	e005      	b.n	8006582 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f93f 	bl	80067fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 f950 	bl	8006822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f003 0310 	and.w	r3, r3, #16
 800658e:	2b00      	cmp	r3, #0
 8006590:	d020      	beq.n	80065d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f003 0310 	and.w	r3, r3, #16
 8006598:	2b00      	cmp	r3, #0
 800659a:	d01b      	beq.n	80065d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f06f 0210 	mvn.w	r2, #16
 80065a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2208      	movs	r2, #8
 80065aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f927 	bl	800680e <HAL_TIM_IC_CaptureCallback>
 80065c0:	e005      	b.n	80065ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f919 	bl	80067fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f92a 	bl	8006822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00c      	beq.n	80065f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d007      	beq.n	80065f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f06f 0201 	mvn.w	r2, #1
 80065f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7fb fc7c 	bl	8001ef0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00c      	beq.n	800661c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006608:	2b00      	cmp	r3, #0
 800660a:	d007      	beq.n	800661c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fae4 	bl	8006be4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00c      	beq.n	8006640 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800662c:	2b00      	cmp	r3, #0
 800662e:	d007      	beq.n	8006640 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f8fb 	bl	8006836 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f003 0320 	and.w	r3, r3, #32
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00c      	beq.n	8006664 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f003 0320 	and.w	r3, r3, #32
 8006650:	2b00      	cmp	r3, #0
 8006652:	d007      	beq.n	8006664 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f06f 0220 	mvn.w	r2, #32
 800665c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fab6 	bl	8006bd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006664:	bf00      	nop
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006676:	2300      	movs	r3, #0
 8006678:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006680:	2b01      	cmp	r3, #1
 8006682:	d101      	bne.n	8006688 <HAL_TIM_ConfigClockSource+0x1c>
 8006684:	2302      	movs	r3, #2
 8006686:	e0b4      	b.n	80067f2 <HAL_TIM_ConfigClockSource+0x186>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80066a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066c0:	d03e      	beq.n	8006740 <HAL_TIM_ConfigClockSource+0xd4>
 80066c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066c6:	f200 8087 	bhi.w	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
 80066ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ce:	f000 8086 	beq.w	80067de <HAL_TIM_ConfigClockSource+0x172>
 80066d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066d6:	d87f      	bhi.n	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
 80066d8:	2b70      	cmp	r3, #112	@ 0x70
 80066da:	d01a      	beq.n	8006712 <HAL_TIM_ConfigClockSource+0xa6>
 80066dc:	2b70      	cmp	r3, #112	@ 0x70
 80066de:	d87b      	bhi.n	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
 80066e0:	2b60      	cmp	r3, #96	@ 0x60
 80066e2:	d050      	beq.n	8006786 <HAL_TIM_ConfigClockSource+0x11a>
 80066e4:	2b60      	cmp	r3, #96	@ 0x60
 80066e6:	d877      	bhi.n	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
 80066e8:	2b50      	cmp	r3, #80	@ 0x50
 80066ea:	d03c      	beq.n	8006766 <HAL_TIM_ConfigClockSource+0xfa>
 80066ec:	2b50      	cmp	r3, #80	@ 0x50
 80066ee:	d873      	bhi.n	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
 80066f0:	2b40      	cmp	r3, #64	@ 0x40
 80066f2:	d058      	beq.n	80067a6 <HAL_TIM_ConfigClockSource+0x13a>
 80066f4:	2b40      	cmp	r3, #64	@ 0x40
 80066f6:	d86f      	bhi.n	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
 80066f8:	2b30      	cmp	r3, #48	@ 0x30
 80066fa:	d064      	beq.n	80067c6 <HAL_TIM_ConfigClockSource+0x15a>
 80066fc:	2b30      	cmp	r3, #48	@ 0x30
 80066fe:	d86b      	bhi.n	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006700:	2b20      	cmp	r3, #32
 8006702:	d060      	beq.n	80067c6 <HAL_TIM_ConfigClockSource+0x15a>
 8006704:	2b20      	cmp	r3, #32
 8006706:	d867      	bhi.n	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006708:	2b00      	cmp	r3, #0
 800670a:	d05c      	beq.n	80067c6 <HAL_TIM_ConfigClockSource+0x15a>
 800670c:	2b10      	cmp	r3, #16
 800670e:	d05a      	beq.n	80067c6 <HAL_TIM_ConfigClockSource+0x15a>
 8006710:	e062      	b.n	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006722:	f000 f9b9 	bl	8006a98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006734:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	609a      	str	r2, [r3, #8]
      break;
 800673e:	e04f      	b.n	80067e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006750:	f000 f9a2 	bl	8006a98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006762:	609a      	str	r2, [r3, #8]
      break;
 8006764:	e03c      	b.n	80067e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006772:	461a      	mov	r2, r3
 8006774:	f000 f916 	bl	80069a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2150      	movs	r1, #80	@ 0x50
 800677e:	4618      	mov	r0, r3
 8006780:	f000 f96f 	bl	8006a62 <TIM_ITRx_SetConfig>
      break;
 8006784:	e02c      	b.n	80067e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006792:	461a      	mov	r2, r3
 8006794:	f000 f935 	bl	8006a02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2160      	movs	r1, #96	@ 0x60
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 f95f 	bl	8006a62 <TIM_ITRx_SetConfig>
      break;
 80067a4:	e01c      	b.n	80067e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067b2:	461a      	mov	r2, r3
 80067b4:	f000 f8f6 	bl	80069a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2140      	movs	r1, #64	@ 0x40
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 f94f 	bl	8006a62 <TIM_ITRx_SetConfig>
      break;
 80067c4:	e00c      	b.n	80067e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4619      	mov	r1, r3
 80067d0:	4610      	mov	r0, r2
 80067d2:	f000 f946 	bl	8006a62 <TIM_ITRx_SetConfig>
      break;
 80067d6:	e003      	b.n	80067e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	73fb      	strb	r3, [r7, #15]
      break;
 80067dc:	e000      	b.n	80067e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006802:	bf00      	nop
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800680e:	b480      	push	{r7}
 8006810:	b083      	sub	sp, #12
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006816:	bf00      	nop
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006822:	b480      	push	{r7}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800682a:	bf00      	nop
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800683e:	bf00      	nop
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
	...

0800684c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a46      	ldr	r2, [pc, #280]	@ (8006978 <TIM_Base_SetConfig+0x12c>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d013      	beq.n	800688c <TIM_Base_SetConfig+0x40>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800686a:	d00f      	beq.n	800688c <TIM_Base_SetConfig+0x40>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a43      	ldr	r2, [pc, #268]	@ (800697c <TIM_Base_SetConfig+0x130>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d00b      	beq.n	800688c <TIM_Base_SetConfig+0x40>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a42      	ldr	r2, [pc, #264]	@ (8006980 <TIM_Base_SetConfig+0x134>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d007      	beq.n	800688c <TIM_Base_SetConfig+0x40>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a41      	ldr	r2, [pc, #260]	@ (8006984 <TIM_Base_SetConfig+0x138>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d003      	beq.n	800688c <TIM_Base_SetConfig+0x40>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a40      	ldr	r2, [pc, #256]	@ (8006988 <TIM_Base_SetConfig+0x13c>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d108      	bne.n	800689e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	4313      	orrs	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a35      	ldr	r2, [pc, #212]	@ (8006978 <TIM_Base_SetConfig+0x12c>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d02b      	beq.n	80068fe <TIM_Base_SetConfig+0xb2>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068ac:	d027      	beq.n	80068fe <TIM_Base_SetConfig+0xb2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a32      	ldr	r2, [pc, #200]	@ (800697c <TIM_Base_SetConfig+0x130>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d023      	beq.n	80068fe <TIM_Base_SetConfig+0xb2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a31      	ldr	r2, [pc, #196]	@ (8006980 <TIM_Base_SetConfig+0x134>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d01f      	beq.n	80068fe <TIM_Base_SetConfig+0xb2>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a30      	ldr	r2, [pc, #192]	@ (8006984 <TIM_Base_SetConfig+0x138>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d01b      	beq.n	80068fe <TIM_Base_SetConfig+0xb2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a2f      	ldr	r2, [pc, #188]	@ (8006988 <TIM_Base_SetConfig+0x13c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d017      	beq.n	80068fe <TIM_Base_SetConfig+0xb2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a2e      	ldr	r2, [pc, #184]	@ (800698c <TIM_Base_SetConfig+0x140>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d013      	beq.n	80068fe <TIM_Base_SetConfig+0xb2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a2d      	ldr	r2, [pc, #180]	@ (8006990 <TIM_Base_SetConfig+0x144>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d00f      	beq.n	80068fe <TIM_Base_SetConfig+0xb2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a2c      	ldr	r2, [pc, #176]	@ (8006994 <TIM_Base_SetConfig+0x148>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d00b      	beq.n	80068fe <TIM_Base_SetConfig+0xb2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a2b      	ldr	r2, [pc, #172]	@ (8006998 <TIM_Base_SetConfig+0x14c>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d007      	beq.n	80068fe <TIM_Base_SetConfig+0xb2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a2a      	ldr	r2, [pc, #168]	@ (800699c <TIM_Base_SetConfig+0x150>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d003      	beq.n	80068fe <TIM_Base_SetConfig+0xb2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a29      	ldr	r2, [pc, #164]	@ (80069a0 <TIM_Base_SetConfig+0x154>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d108      	bne.n	8006910 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	4313      	orrs	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	4313      	orrs	r3, r2
 800691c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a10      	ldr	r2, [pc, #64]	@ (8006978 <TIM_Base_SetConfig+0x12c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d003      	beq.n	8006944 <TIM_Base_SetConfig+0xf8>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a12      	ldr	r2, [pc, #72]	@ (8006988 <TIM_Base_SetConfig+0x13c>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d103      	bne.n	800694c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	691a      	ldr	r2, [r3, #16]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b01      	cmp	r3, #1
 800695c:	d105      	bne.n	800696a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	f023 0201 	bic.w	r2, r3, #1
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	611a      	str	r2, [r3, #16]
  }
}
 800696a:	bf00      	nop
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	40010000 	.word	0x40010000
 800697c:	40000400 	.word	0x40000400
 8006980:	40000800 	.word	0x40000800
 8006984:	40000c00 	.word	0x40000c00
 8006988:	40010400 	.word	0x40010400
 800698c:	40014000 	.word	0x40014000
 8006990:	40014400 	.word	0x40014400
 8006994:	40014800 	.word	0x40014800
 8006998:	40001800 	.word	0x40001800
 800699c:	40001c00 	.word	0x40001c00
 80069a0:	40002000 	.word	0x40002000

080069a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	f023 0201 	bic.w	r2, r3, #1
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	011b      	lsls	r3, r3, #4
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f023 030a 	bic.w	r3, r3, #10
 80069e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	621a      	str	r2, [r3, #32]
}
 80069f6:	bf00      	nop
 80069f8:	371c      	adds	r7, #28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b087      	sub	sp, #28
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	60f8      	str	r0, [r7, #12]
 8006a0a:	60b9      	str	r1, [r7, #8]
 8006a0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	f023 0210 	bic.w	r2, r3, #16
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	031b      	lsls	r3, r3, #12
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	011b      	lsls	r3, r3, #4
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	621a      	str	r2, [r3, #32]
}
 8006a56:	bf00      	nop
 8006a58:	371c      	adds	r7, #28
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b085      	sub	sp, #20
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	f043 0307 	orr.w	r3, r3, #7
 8006a84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	609a      	str	r2, [r3, #8]
}
 8006a8c:	bf00      	nop
 8006a8e:	3714      	adds	r7, #20
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
 8006aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ab2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	021a      	lsls	r2, r3, #8
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	431a      	orrs	r2, r3
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	609a      	str	r2, [r3, #8]
}
 8006acc:	bf00      	nop
 8006ace:	371c      	adds	r7, #28
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d101      	bne.n	8006af0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006aec:	2302      	movs	r3, #2
 8006aee:	e05a      	b.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a21      	ldr	r2, [pc, #132]	@ (8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d022      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b3c:	d01d      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a1d      	ldr	r2, [pc, #116]	@ (8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d018      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8006bbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d013      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a1a      	ldr	r2, [pc, #104]	@ (8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d00e      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a18      	ldr	r2, [pc, #96]	@ (8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d009      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a17      	ldr	r2, [pc, #92]	@ (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d004      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a15      	ldr	r2, [pc, #84]	@ (8006bcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d10c      	bne.n	8006b94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3714      	adds	r7, #20
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	40010000 	.word	0x40010000
 8006bb8:	40000400 	.word	0x40000400
 8006bbc:	40000800 	.word	0x40000800
 8006bc0:	40000c00 	.word	0x40000c00
 8006bc4:	40010400 	.word	0x40010400
 8006bc8:	40014000 	.word	0x40014000
 8006bcc:	40001800 	.word	0x40001800

08006bd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e042      	b.n	8006c90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d106      	bne.n	8006c24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7fb fe9e 	bl	8002960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2224      	movs	r2, #36	@ 0x24
 8006c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68da      	ldr	r2, [r3, #12]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 ff85 	bl	8007b4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	691a      	ldr	r2, [r3, #16]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	695a      	ldr	r2, [r3, #20]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68da      	ldr	r2, [r3, #12]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2220      	movs	r2, #32
 8006c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3708      	adds	r7, #8
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08a      	sub	sp, #40	@ 0x28
 8006c9c:	af02      	add	r7, sp, #8
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	603b      	str	r3, [r7, #0]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	d175      	bne.n	8006da4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d002      	beq.n	8006cc4 <HAL_UART_Transmit+0x2c>
 8006cbe:	88fb      	ldrh	r3, [r7, #6]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e06e      	b.n	8006da6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2221      	movs	r2, #33	@ 0x21
 8006cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cd6:	f7fb ff8b 	bl	8002bf0 <HAL_GetTick>
 8006cda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	88fa      	ldrh	r2, [r7, #6]
 8006ce0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	88fa      	ldrh	r2, [r7, #6]
 8006ce6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cf0:	d108      	bne.n	8006d04 <HAL_UART_Transmit+0x6c>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d104      	bne.n	8006d04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	61bb      	str	r3, [r7, #24]
 8006d02:	e003      	b.n	8006d0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d0c:	e02e      	b.n	8006d6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2200      	movs	r2, #0
 8006d16:	2180      	movs	r1, #128	@ 0x80
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 fc5d 	bl	80075d8 <UART_WaitOnFlagUntilTimeout>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d005      	beq.n	8006d30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2220      	movs	r2, #32
 8006d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e03a      	b.n	8006da6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10b      	bne.n	8006d4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	3302      	adds	r3, #2
 8006d4a:	61bb      	str	r3, [r7, #24]
 8006d4c:	e007      	b.n	8006d5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	781a      	ldrb	r2, [r3, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	3b01      	subs	r3, #1
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1cb      	bne.n	8006d0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	2140      	movs	r1, #64	@ 0x40
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f000 fc29 	bl	80075d8 <UART_WaitOnFlagUntilTimeout>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d005      	beq.n	8006d98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e006      	b.n	8006da6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006da0:	2300      	movs	r3, #0
 8006da2:	e000      	b.n	8006da6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006da4:	2302      	movs	r3, #2
  }
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3720      	adds	r7, #32
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b08c      	sub	sp, #48	@ 0x30
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	60f8      	str	r0, [r7, #12]
 8006db6:	60b9      	str	r1, [r7, #8]
 8006db8:	4613      	mov	r3, r2
 8006dba:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b20      	cmp	r3, #32
 8006dc6:	d14a      	bne.n	8006e5e <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d002      	beq.n	8006dd4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006dce:	88fb      	ldrh	r3, [r7, #6]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d101      	bne.n	8006dd8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e043      	b.n	8006e60 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006de4:	88fb      	ldrh	r3, [r7, #6]
 8006de6:	461a      	mov	r2, r3
 8006de8:	68b9      	ldr	r1, [r7, #8]
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 fc4e 	bl	800768c <UART_Start_Receive_DMA>
 8006df0:	4603      	mov	r3, r0
 8006df2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006df6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d12c      	bne.n	8006e58 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d125      	bne.n	8006e52 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e06:	2300      	movs	r3, #0
 8006e08:	613b      	str	r3, [r7, #16]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	613b      	str	r3, [r7, #16]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	613b      	str	r3, [r7, #16]
 8006e1a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	330c      	adds	r3, #12
 8006e22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	e853 3f00 	ldrex	r3, [r3]
 8006e2a:	617b      	str	r3, [r7, #20]
   return(result);
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f043 0310 	orr.w	r3, r3, #16
 8006e32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	330c      	adds	r3, #12
 8006e3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8006e3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e40:	6a39      	ldr	r1, [r7, #32]
 8006e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e44:	e841 2300 	strex	r3, r2, [r1]
 8006e48:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e5      	bne.n	8006e1c <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8006e50:	e002      	b.n	8006e58 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006e58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006e5c:	e000      	b.n	8006e60 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006e5e:	2302      	movs	r3, #2
  }
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3730      	adds	r7, #48	@ 0x30
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b0ba      	sub	sp, #232	@ 0xe8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006e94:	2300      	movs	r3, #0
 8006e96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e9e:	f003 030f 	and.w	r3, r3, #15
 8006ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006ea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10f      	bne.n	8006ece <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eb2:	f003 0320 	and.w	r3, r3, #32
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d009      	beq.n	8006ece <HAL_UART_IRQHandler+0x66>
 8006eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ebe:	f003 0320 	and.w	r3, r3, #32
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d003      	beq.n	8006ece <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fd81 	bl	80079ce <UART_Receive_IT>
      return;
 8006ecc:	e25b      	b.n	8007386 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006ece:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f000 80de 	beq.w	8007094 <HAL_UART_IRQHandler+0x22c>
 8006ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d106      	bne.n	8006ef2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ee8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 80d1 	beq.w	8007094 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00b      	beq.n	8006f16 <HAL_UART_IRQHandler+0xae>
 8006efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d005      	beq.n	8006f16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f0e:	f043 0201 	orr.w	r2, r3, #1
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f1a:	f003 0304 	and.w	r3, r3, #4
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00b      	beq.n	8006f3a <HAL_UART_IRQHandler+0xd2>
 8006f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d005      	beq.n	8006f3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f32:	f043 0202 	orr.w	r2, r3, #2
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00b      	beq.n	8006f5e <HAL_UART_IRQHandler+0xf6>
 8006f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d005      	beq.n	8006f5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f56:	f043 0204 	orr.w	r2, r3, #4
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f62:	f003 0308 	and.w	r3, r3, #8
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d011      	beq.n	8006f8e <HAL_UART_IRQHandler+0x126>
 8006f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f6e:	f003 0320 	and.w	r3, r3, #32
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d105      	bne.n	8006f82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d005      	beq.n	8006f8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f86:	f043 0208 	orr.w	r2, r3, #8
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 81f2 	beq.w	800737c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f9c:	f003 0320 	and.w	r3, r3, #32
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d008      	beq.n	8006fb6 <HAL_UART_IRQHandler+0x14e>
 8006fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fa8:	f003 0320 	and.w	r3, r3, #32
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 fd0c 	bl	80079ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	695b      	ldr	r3, [r3, #20]
 8006fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fc0:	2b40      	cmp	r3, #64	@ 0x40
 8006fc2:	bf0c      	ite	eq
 8006fc4:	2301      	moveq	r3, #1
 8006fc6:	2300      	movne	r3, #0
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fd2:	f003 0308 	and.w	r3, r3, #8
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d103      	bne.n	8006fe2 <HAL_UART_IRQHandler+0x17a>
 8006fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d04f      	beq.n	8007082 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fc14 	bl	8007810 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ff2:	2b40      	cmp	r3, #64	@ 0x40
 8006ff4:	d141      	bne.n	800707a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3314      	adds	r3, #20
 8006ffc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007000:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007004:	e853 3f00 	ldrex	r3, [r3]
 8007008:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800700c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007010:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007014:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3314      	adds	r3, #20
 800701e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007022:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007026:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800702e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007032:	e841 2300 	strex	r3, r2, [r1]
 8007036:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800703a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1d9      	bne.n	8006ff6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007046:	2b00      	cmp	r3, #0
 8007048:	d013      	beq.n	8007072 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800704e:	4a7e      	ldr	r2, [pc, #504]	@ (8007248 <HAL_UART_IRQHandler+0x3e0>)
 8007050:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007056:	4618      	mov	r0, r3
 8007058:	f7fc fa92 	bl	8003580 <HAL_DMA_Abort_IT>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d016      	beq.n	8007090 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800706c:	4610      	mov	r0, r2
 800706e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007070:	e00e      	b.n	8007090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f9a8 	bl	80073c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007078:	e00a      	b.n	8007090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f9a4 	bl	80073c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007080:	e006      	b.n	8007090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f9a0 	bl	80073c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800708e:	e175      	b.n	800737c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007090:	bf00      	nop
    return;
 8007092:	e173      	b.n	800737c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007098:	2b01      	cmp	r3, #1
 800709a:	f040 814f 	bne.w	800733c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800709e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070a2:	f003 0310 	and.w	r3, r3, #16
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f000 8148 	beq.w	800733c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80070ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070b0:	f003 0310 	and.w	r3, r3, #16
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 8141 	beq.w	800733c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070ba:	2300      	movs	r3, #0
 80070bc:	60bb      	str	r3, [r7, #8]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	60bb      	str	r3, [r7, #8]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	60bb      	str	r3, [r7, #8]
 80070ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070da:	2b40      	cmp	r3, #64	@ 0x40
 80070dc:	f040 80b6 	bne.w	800724c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 8145 	beq.w	8007380 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80070fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070fe:	429a      	cmp	r2, r3
 8007100:	f080 813e 	bcs.w	8007380 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800710a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007116:	f000 8088 	beq.w	800722a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	330c      	adds	r3, #12
 8007120:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007124:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007128:	e853 3f00 	ldrex	r3, [r3]
 800712c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007130:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007134:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007138:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	330c      	adds	r3, #12
 8007142:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007146:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800714a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007152:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007156:	e841 2300 	strex	r3, r2, [r1]
 800715a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800715e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1d9      	bne.n	800711a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3314      	adds	r3, #20
 800716c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007170:	e853 3f00 	ldrex	r3, [r3]
 8007174:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007176:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007178:	f023 0301 	bic.w	r3, r3, #1
 800717c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3314      	adds	r3, #20
 8007186:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800718a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800718e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007192:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800719c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e1      	bne.n	8007166 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3314      	adds	r3, #20
 80071a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071ac:	e853 3f00 	ldrex	r3, [r3]
 80071b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80071b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3314      	adds	r3, #20
 80071c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80071c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80071c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80071cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80071ce:	e841 2300 	strex	r3, r2, [r1]
 80071d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80071d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1e3      	bne.n	80071a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2220      	movs	r2, #32
 80071de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	330c      	adds	r3, #12
 80071ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071f2:	e853 3f00 	ldrex	r3, [r3]
 80071f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80071f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071fa:	f023 0310 	bic.w	r3, r3, #16
 80071fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	330c      	adds	r3, #12
 8007208:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800720c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800720e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007210:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007212:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007214:	e841 2300 	strex	r3, r2, [r1]
 8007218:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800721a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e3      	bne.n	80071e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007224:	4618      	mov	r0, r3
 8007226:	f7fc f93b 	bl	80034a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2202      	movs	r2, #2
 800722e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007238:	b29b      	uxth	r3, r3
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	b29b      	uxth	r3, r3
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7fa ff5d 	bl	8002100 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007246:	e09b      	b.n	8007380 <HAL_UART_IRQHandler+0x518>
 8007248:	080078d7 	.word	0x080078d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007254:	b29b      	uxth	r3, r3
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007260:	b29b      	uxth	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	f000 808e 	beq.w	8007384 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007268:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800726c:	2b00      	cmp	r3, #0
 800726e:	f000 8089 	beq.w	8007384 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	330c      	adds	r3, #12
 8007278:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800727c:	e853 3f00 	ldrex	r3, [r3]
 8007280:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007284:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007288:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	330c      	adds	r3, #12
 8007292:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007296:	647a      	str	r2, [r7, #68]	@ 0x44
 8007298:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800729c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800729e:	e841 2300 	strex	r3, r2, [r1]
 80072a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1e3      	bne.n	8007272 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3314      	adds	r3, #20
 80072b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b4:	e853 3f00 	ldrex	r3, [r3]
 80072b8:	623b      	str	r3, [r7, #32]
   return(result);
 80072ba:	6a3b      	ldr	r3, [r7, #32]
 80072bc:	f023 0301 	bic.w	r3, r3, #1
 80072c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3314      	adds	r3, #20
 80072ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80072ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80072d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072d6:	e841 2300 	strex	r3, r2, [r1]
 80072da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1e3      	bne.n	80072aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2220      	movs	r2, #32
 80072e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	330c      	adds	r3, #12
 80072f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	e853 3f00 	ldrex	r3, [r3]
 80072fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f023 0310 	bic.w	r3, r3, #16
 8007306:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	330c      	adds	r3, #12
 8007310:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007314:	61fa      	str	r2, [r7, #28]
 8007316:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007318:	69b9      	ldr	r1, [r7, #24]
 800731a:	69fa      	ldr	r2, [r7, #28]
 800731c:	e841 2300 	strex	r3, r2, [r1]
 8007320:	617b      	str	r3, [r7, #20]
   return(result);
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1e3      	bne.n	80072f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800732e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007332:	4619      	mov	r1, r3
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7fa fee3 	bl	8002100 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800733a:	e023      	b.n	8007384 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800733c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007344:	2b00      	cmp	r3, #0
 8007346:	d009      	beq.n	800735c <HAL_UART_IRQHandler+0x4f4>
 8007348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800734c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007350:	2b00      	cmp	r3, #0
 8007352:	d003      	beq.n	800735c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fad2 	bl	80078fe <UART_Transmit_IT>
    return;
 800735a:	e014      	b.n	8007386 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800735c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00e      	beq.n	8007386 <HAL_UART_IRQHandler+0x51e>
 8007368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800736c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007370:	2b00      	cmp	r3, #0
 8007372:	d008      	beq.n	8007386 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 fb12 	bl	800799e <UART_EndTransmit_IT>
    return;
 800737a:	e004      	b.n	8007386 <HAL_UART_IRQHandler+0x51e>
    return;
 800737c:	bf00      	nop
 800737e:	e002      	b.n	8007386 <HAL_UART_IRQHandler+0x51e>
      return;
 8007380:	bf00      	nop
 8007382:	e000      	b.n	8007386 <HAL_UART_IRQHandler+0x51e>
      return;
 8007384:	bf00      	nop
  }
}
 8007386:	37e8      	adds	r7, #232	@ 0xe8
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b09c      	sub	sp, #112	@ 0x70
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d172      	bne.n	80074de <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80073f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073fa:	2200      	movs	r2, #0
 80073fc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	330c      	adds	r3, #12
 8007404:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007406:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007408:	e853 3f00 	ldrex	r3, [r3]
 800740c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800740e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007414:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007416:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	330c      	adds	r3, #12
 800741c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800741e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007420:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007422:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007424:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007426:	e841 2300 	strex	r3, r2, [r1]
 800742a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800742c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1e5      	bne.n	80073fe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007432:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3314      	adds	r3, #20
 8007438:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007444:	f023 0301 	bic.w	r3, r3, #1
 8007448:	667b      	str	r3, [r7, #100]	@ 0x64
 800744a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3314      	adds	r3, #20
 8007450:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007452:	647a      	str	r2, [r7, #68]	@ 0x44
 8007454:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007458:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e5      	bne.n	8007432 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007466:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3314      	adds	r3, #20
 800746c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007470:	e853 3f00 	ldrex	r3, [r3]
 8007474:	623b      	str	r3, [r7, #32]
   return(result);
 8007476:	6a3b      	ldr	r3, [r7, #32]
 8007478:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800747c:	663b      	str	r3, [r7, #96]	@ 0x60
 800747e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3314      	adds	r3, #20
 8007484:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007486:	633a      	str	r2, [r7, #48]	@ 0x30
 8007488:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800748c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800748e:	e841 2300 	strex	r3, r2, [r1]
 8007492:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1e5      	bne.n	8007466 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800749a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800749c:	2220      	movs	r2, #32
 800749e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d119      	bne.n	80074de <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	330c      	adds	r3, #12
 80074b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	e853 3f00 	ldrex	r3, [r3]
 80074b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f023 0310 	bic.w	r3, r3, #16
 80074c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	330c      	adds	r3, #12
 80074c8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80074ca:	61fa      	str	r2, [r7, #28]
 80074cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ce:	69b9      	ldr	r1, [r7, #24]
 80074d0:	69fa      	ldr	r2, [r7, #28]
 80074d2:	e841 2300 	strex	r3, r2, [r1]
 80074d6:	617b      	str	r3, [r7, #20]
   return(result);
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1e5      	bne.n	80074aa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074e0:	2200      	movs	r2, #0
 80074e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d106      	bne.n	80074fa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80074f0:	4619      	mov	r1, r3
 80074f2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80074f4:	f7fa fe04 	bl	8002100 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80074f8:	e002      	b.n	8007500 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80074fa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80074fc:	f7ff ff50 	bl	80073a0 <HAL_UART_RxCpltCallback>
}
 8007500:	bf00      	nop
 8007502:	3770      	adds	r7, #112	@ 0x70
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007514:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2201      	movs	r2, #1
 800751a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007520:	2b01      	cmp	r3, #1
 8007522:	d108      	bne.n	8007536 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007528:	085b      	lsrs	r3, r3, #1
 800752a:	b29b      	uxth	r3, r3
 800752c:	4619      	mov	r1, r3
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f7fa fde6 	bl	8002100 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007534:	e002      	b.n	800753c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f7ff ff3c 	bl	80073b4 <HAL_UART_RxHalfCpltCallback>
}
 800753c:	bf00      	nop
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800754c:	2300      	movs	r3, #0
 800754e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007554:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	695b      	ldr	r3, [r3, #20]
 800755c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007560:	2b80      	cmp	r3, #128	@ 0x80
 8007562:	bf0c      	ite	eq
 8007564:	2301      	moveq	r3, #1
 8007566:	2300      	movne	r3, #0
 8007568:	b2db      	uxtb	r3, r3
 800756a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b21      	cmp	r3, #33	@ 0x21
 8007576:	d108      	bne.n	800758a <UART_DMAError+0x46>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d005      	beq.n	800758a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	2200      	movs	r2, #0
 8007582:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007584:	68b8      	ldr	r0, [r7, #8]
 8007586:	f000 f91b 	bl	80077c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007594:	2b40      	cmp	r3, #64	@ 0x40
 8007596:	bf0c      	ite	eq
 8007598:	2301      	moveq	r3, #1
 800759a:	2300      	movne	r3, #0
 800759c:	b2db      	uxtb	r3, r3
 800759e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b22      	cmp	r3, #34	@ 0x22
 80075aa:	d108      	bne.n	80075be <UART_DMAError+0x7a>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d005      	beq.n	80075be <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	2200      	movs	r2, #0
 80075b6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80075b8:	68b8      	ldr	r0, [r7, #8]
 80075ba:	f000 f929 	bl	8007810 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075c2:	f043 0210 	orr.w	r2, r3, #16
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075ca:	68b8      	ldr	r0, [r7, #8]
 80075cc:	f7ff fefc 	bl	80073c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075d0:	bf00      	nop
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	603b      	str	r3, [r7, #0]
 80075e4:	4613      	mov	r3, r2
 80075e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075e8:	e03b      	b.n	8007662 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075f0:	d037      	beq.n	8007662 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075f2:	f7fb fafd 	bl	8002bf0 <HAL_GetTick>
 80075f6:	4602      	mov	r2, r0
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	6a3a      	ldr	r2, [r7, #32]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d302      	bcc.n	8007608 <UART_WaitOnFlagUntilTimeout+0x30>
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d101      	bne.n	800760c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007608:	2303      	movs	r3, #3
 800760a:	e03a      	b.n	8007682 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	f003 0304 	and.w	r3, r3, #4
 8007616:	2b00      	cmp	r3, #0
 8007618:	d023      	beq.n	8007662 <UART_WaitOnFlagUntilTimeout+0x8a>
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	2b80      	cmp	r3, #128	@ 0x80
 800761e:	d020      	beq.n	8007662 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2b40      	cmp	r3, #64	@ 0x40
 8007624:	d01d      	beq.n	8007662 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0308 	and.w	r3, r3, #8
 8007630:	2b08      	cmp	r3, #8
 8007632:	d116      	bne.n	8007662 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007634:	2300      	movs	r3, #0
 8007636:	617b      	str	r3, [r7, #20]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	617b      	str	r3, [r7, #20]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	617b      	str	r3, [r7, #20]
 8007648:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 f8e0 	bl	8007810 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2208      	movs	r2, #8
 8007654:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e00f      	b.n	8007682 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	4013      	ands	r3, r2
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	429a      	cmp	r2, r3
 8007670:	bf0c      	ite	eq
 8007672:	2301      	moveq	r3, #1
 8007674:	2300      	movne	r3, #0
 8007676:	b2db      	uxtb	r3, r3
 8007678:	461a      	mov	r2, r3
 800767a:	79fb      	ldrb	r3, [r7, #7]
 800767c:	429a      	cmp	r2, r3
 800767e:	d0b4      	beq.n	80075ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3718      	adds	r7, #24
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
	...

0800768c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b098      	sub	sp, #96	@ 0x60
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	4613      	mov	r3, r2
 8007698:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	88fa      	ldrh	r2, [r7, #6]
 80076a4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2222      	movs	r2, #34	@ 0x22
 80076b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076b8:	4a3e      	ldr	r2, [pc, #248]	@ (80077b4 <UART_Start_Receive_DMA+0x128>)
 80076ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076c0:	4a3d      	ldr	r2, [pc, #244]	@ (80077b8 <UART_Start_Receive_DMA+0x12c>)
 80076c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076c8:	4a3c      	ldr	r2, [pc, #240]	@ (80077bc <UART_Start_Receive_DMA+0x130>)
 80076ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076d0:	2200      	movs	r2, #0
 80076d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80076d4:	f107 0308 	add.w	r3, r7, #8
 80076d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3304      	adds	r3, #4
 80076e4:	4619      	mov	r1, r3
 80076e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	88fb      	ldrh	r3, [r7, #6]
 80076ec:	f7fb fe80 	bl	80033f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80076f0:	2300      	movs	r3, #0
 80076f2:	613b      	str	r3, [r7, #16]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	613b      	str	r3, [r7, #16]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	613b      	str	r3, [r7, #16]
 8007704:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d019      	beq.n	8007742 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	330c      	adds	r3, #12
 8007714:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007718:	e853 3f00 	ldrex	r3, [r3]
 800771c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800771e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007724:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	330c      	adds	r3, #12
 800772c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800772e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007730:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007732:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007734:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007736:	e841 2300 	strex	r3, r2, [r1]
 800773a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800773c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1e5      	bne.n	800770e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3314      	adds	r3, #20
 8007748:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800774c:	e853 3f00 	ldrex	r3, [r3]
 8007750:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007754:	f043 0301 	orr.w	r3, r3, #1
 8007758:	657b      	str	r3, [r7, #84]	@ 0x54
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3314      	adds	r3, #20
 8007760:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007762:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007764:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007766:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007768:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800776a:	e841 2300 	strex	r3, r2, [r1]
 800776e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1e5      	bne.n	8007742 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3314      	adds	r3, #20
 800777c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	e853 3f00 	ldrex	r3, [r3]
 8007784:	617b      	str	r3, [r7, #20]
   return(result);
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800778c:	653b      	str	r3, [r7, #80]	@ 0x50
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3314      	adds	r3, #20
 8007794:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007796:	627a      	str	r2, [r7, #36]	@ 0x24
 8007798:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	6a39      	ldr	r1, [r7, #32]
 800779c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800779e:	e841 2300 	strex	r3, r2, [r1]
 80077a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1e5      	bne.n	8007776 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3760      	adds	r7, #96	@ 0x60
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	080073dd 	.word	0x080073dd
 80077b8:	08007509 	.word	0x08007509
 80077bc:	08007545 	.word	0x08007545

080077c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b089      	sub	sp, #36	@ 0x24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	330c      	adds	r3, #12
 80077ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	e853 3f00 	ldrex	r3, [r3]
 80077d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80077de:	61fb      	str	r3, [r7, #28]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	330c      	adds	r3, #12
 80077e6:	69fa      	ldr	r2, [r7, #28]
 80077e8:	61ba      	str	r2, [r7, #24]
 80077ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ec:	6979      	ldr	r1, [r7, #20]
 80077ee:	69ba      	ldr	r2, [r7, #24]
 80077f0:	e841 2300 	strex	r3, r2, [r1]
 80077f4:	613b      	str	r3, [r7, #16]
   return(result);
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1e5      	bne.n	80077c8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2220      	movs	r2, #32
 8007800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007804:	bf00      	nop
 8007806:	3724      	adds	r7, #36	@ 0x24
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007810:	b480      	push	{r7}
 8007812:	b095      	sub	sp, #84	@ 0x54
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	330c      	adds	r3, #12
 800781e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007822:	e853 3f00 	ldrex	r3, [r3]
 8007826:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800782e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	330c      	adds	r3, #12
 8007836:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007838:	643a      	str	r2, [r7, #64]	@ 0x40
 800783a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800783e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007840:	e841 2300 	strex	r3, r2, [r1]
 8007844:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1e5      	bne.n	8007818 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	3314      	adds	r3, #20
 8007852:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	e853 3f00 	ldrex	r3, [r3]
 800785a:	61fb      	str	r3, [r7, #28]
   return(result);
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	f023 0301 	bic.w	r3, r3, #1
 8007862:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	3314      	adds	r3, #20
 800786a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800786c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800786e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007870:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007872:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007874:	e841 2300 	strex	r3, r2, [r1]
 8007878:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800787a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1e5      	bne.n	800784c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007884:	2b01      	cmp	r3, #1
 8007886:	d119      	bne.n	80078bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	330c      	adds	r3, #12
 800788e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	e853 3f00 	ldrex	r3, [r3]
 8007896:	60bb      	str	r3, [r7, #8]
   return(result);
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f023 0310 	bic.w	r3, r3, #16
 800789e:	647b      	str	r3, [r7, #68]	@ 0x44
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	330c      	adds	r3, #12
 80078a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078a8:	61ba      	str	r2, [r7, #24]
 80078aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ac:	6979      	ldr	r1, [r7, #20]
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	e841 2300 	strex	r3, r2, [r1]
 80078b4:	613b      	str	r3, [r7, #16]
   return(result);
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e5      	bne.n	8007888 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2220      	movs	r2, #32
 80078c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80078ca:	bf00      	nop
 80078cc:	3754      	adds	r7, #84	@ 0x54
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b084      	sub	sp, #16
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f7ff fd69 	bl	80073c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078f6:	bf00      	nop
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078fe:	b480      	push	{r7}
 8007900:	b085      	sub	sp, #20
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b21      	cmp	r3, #33	@ 0x21
 8007910:	d13e      	bne.n	8007990 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800791a:	d114      	bne.n	8007946 <UART_Transmit_IT+0x48>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d110      	bne.n	8007946 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a1b      	ldr	r3, [r3, #32]
 8007928:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	881b      	ldrh	r3, [r3, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007938:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a1b      	ldr	r3, [r3, #32]
 800793e:	1c9a      	adds	r2, r3, #2
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	621a      	str	r2, [r3, #32]
 8007944:	e008      	b.n	8007958 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	1c59      	adds	r1, r3, #1
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	6211      	str	r1, [r2, #32]
 8007950:	781a      	ldrb	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800795c:	b29b      	uxth	r3, r3
 800795e:	3b01      	subs	r3, #1
 8007960:	b29b      	uxth	r3, r3
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	4619      	mov	r1, r3
 8007966:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10f      	bne.n	800798c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68da      	ldr	r2, [r3, #12]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800797a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68da      	ldr	r2, [r3, #12]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800798a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	e000      	b.n	8007992 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007990:	2302      	movs	r3, #2
  }
}
 8007992:	4618      	mov	r0, r3
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b082      	sub	sp, #8
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68da      	ldr	r2, [r3, #12]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2220      	movs	r2, #32
 80079ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7ff fce4 	bl	800738c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b08c      	sub	sp, #48	@ 0x30
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b22      	cmp	r3, #34	@ 0x22
 80079e0:	f040 80ae 	bne.w	8007b40 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079ec:	d117      	bne.n	8007a1e <UART_Receive_IT+0x50>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d113      	bne.n	8007a1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80079f6:	2300      	movs	r3, #0
 80079f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a16:	1c9a      	adds	r2, r3, #2
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8007a1c:	e026      	b.n	8007a6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007a24:	2300      	movs	r3, #0
 8007a26:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a30:	d007      	beq.n	8007a42 <UART_Receive_IT+0x74>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10a      	bne.n	8007a50 <UART_Receive_IT+0x82>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d106      	bne.n	8007a50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a4c:	701a      	strb	r2, [r3, #0]
 8007a4e:	e008      	b.n	8007a62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a5c:	b2da      	uxtb	r2, r3
 8007a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a66:	1c5a      	adds	r2, r3, #1
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	3b01      	subs	r3, #1
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	4619      	mov	r1, r3
 8007a7a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d15d      	bne.n	8007b3c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68da      	ldr	r2, [r3, #12]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 0220 	bic.w	r2, r2, #32
 8007a8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68da      	ldr	r2, [r3, #12]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	695a      	ldr	r2, [r3, #20]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f022 0201 	bic.w	r2, r2, #1
 8007aae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d135      	bne.n	8007b32 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	330c      	adds	r3, #12
 8007ad2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	e853 3f00 	ldrex	r3, [r3]
 8007ada:	613b      	str	r3, [r7, #16]
   return(result);
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	f023 0310 	bic.w	r3, r3, #16
 8007ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	330c      	adds	r3, #12
 8007aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aec:	623a      	str	r2, [r7, #32]
 8007aee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af0:	69f9      	ldr	r1, [r7, #28]
 8007af2:	6a3a      	ldr	r2, [r7, #32]
 8007af4:	e841 2300 	strex	r3, r2, [r1]
 8007af8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1e5      	bne.n	8007acc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0310 	and.w	r3, r3, #16
 8007b0a:	2b10      	cmp	r3, #16
 8007b0c:	d10a      	bne.n	8007b24 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60fb      	str	r3, [r7, #12]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	60fb      	str	r3, [r7, #12]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	60fb      	str	r3, [r7, #12]
 8007b22:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7fa fae8 	bl	8002100 <HAL_UARTEx_RxEventCallback>
 8007b30:	e002      	b.n	8007b38 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7ff fc34 	bl	80073a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	e002      	b.n	8007b42 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	e000      	b.n	8007b42 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007b40:	2302      	movs	r3, #2
  }
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3730      	adds	r7, #48	@ 0x30
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
	...

08007b4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b50:	b0c0      	sub	sp, #256	@ 0x100
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b68:	68d9      	ldr	r1, [r3, #12]
 8007b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	ea40 0301 	orr.w	r3, r0, r1
 8007b74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b7a:	689a      	ldr	r2, [r3, #8]
 8007b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	431a      	orrs	r2, r3
 8007b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b90:	69db      	ldr	r3, [r3, #28]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007ba4:	f021 010c 	bic.w	r1, r1, #12
 8007ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007bb2:	430b      	orrs	r3, r1
 8007bb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bc6:	6999      	ldr	r1, [r3, #24]
 8007bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	ea40 0301 	orr.w	r3, r0, r1
 8007bd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	4b8f      	ldr	r3, [pc, #572]	@ (8007e18 <UART_SetConfig+0x2cc>)
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d005      	beq.n	8007bec <UART_SetConfig+0xa0>
 8007be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	4b8d      	ldr	r3, [pc, #564]	@ (8007e1c <UART_SetConfig+0x2d0>)
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d104      	bne.n	8007bf6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007bec:	f7fd feac 	bl	8005948 <HAL_RCC_GetPCLK2Freq>
 8007bf0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007bf4:	e003      	b.n	8007bfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007bf6:	f7fd fe93 	bl	8005920 <HAL_RCC_GetPCLK1Freq>
 8007bfa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c02:	69db      	ldr	r3, [r3, #28]
 8007c04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c08:	f040 810c 	bne.w	8007e24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c10:	2200      	movs	r2, #0
 8007c12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c16:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007c1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007c1e:	4622      	mov	r2, r4
 8007c20:	462b      	mov	r3, r5
 8007c22:	1891      	adds	r1, r2, r2
 8007c24:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007c26:	415b      	adcs	r3, r3
 8007c28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007c2e:	4621      	mov	r1, r4
 8007c30:	eb12 0801 	adds.w	r8, r2, r1
 8007c34:	4629      	mov	r1, r5
 8007c36:	eb43 0901 	adc.w	r9, r3, r1
 8007c3a:	f04f 0200 	mov.w	r2, #0
 8007c3e:	f04f 0300 	mov.w	r3, #0
 8007c42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c4e:	4690      	mov	r8, r2
 8007c50:	4699      	mov	r9, r3
 8007c52:	4623      	mov	r3, r4
 8007c54:	eb18 0303 	adds.w	r3, r8, r3
 8007c58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007c5c:	462b      	mov	r3, r5
 8007c5e:	eb49 0303 	adc.w	r3, r9, r3
 8007c62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c72:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007c76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	18db      	adds	r3, r3, r3
 8007c7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c80:	4613      	mov	r3, r2
 8007c82:	eb42 0303 	adc.w	r3, r2, r3
 8007c86:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007c8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007c90:	f7f9 f81a 	bl	8000cc8 <__aeabi_uldivmod>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	4b61      	ldr	r3, [pc, #388]	@ (8007e20 <UART_SetConfig+0x2d4>)
 8007c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8007c9e:	095b      	lsrs	r3, r3, #5
 8007ca0:	011c      	lsls	r4, r3, #4
 8007ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007cac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007cb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007cb4:	4642      	mov	r2, r8
 8007cb6:	464b      	mov	r3, r9
 8007cb8:	1891      	adds	r1, r2, r2
 8007cba:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007cbc:	415b      	adcs	r3, r3
 8007cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007cc4:	4641      	mov	r1, r8
 8007cc6:	eb12 0a01 	adds.w	sl, r2, r1
 8007cca:	4649      	mov	r1, r9
 8007ccc:	eb43 0b01 	adc.w	fp, r3, r1
 8007cd0:	f04f 0200 	mov.w	r2, #0
 8007cd4:	f04f 0300 	mov.w	r3, #0
 8007cd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007cdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ce0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ce4:	4692      	mov	sl, r2
 8007ce6:	469b      	mov	fp, r3
 8007ce8:	4643      	mov	r3, r8
 8007cea:	eb1a 0303 	adds.w	r3, sl, r3
 8007cee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007cf2:	464b      	mov	r3, r9
 8007cf4:	eb4b 0303 	adc.w	r3, fp, r3
 8007cf8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d08:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007d0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007d10:	460b      	mov	r3, r1
 8007d12:	18db      	adds	r3, r3, r3
 8007d14:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d16:	4613      	mov	r3, r2
 8007d18:	eb42 0303 	adc.w	r3, r2, r3
 8007d1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007d22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007d26:	f7f8 ffcf 	bl	8000cc8 <__aeabi_uldivmod>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4611      	mov	r1, r2
 8007d30:	4b3b      	ldr	r3, [pc, #236]	@ (8007e20 <UART_SetConfig+0x2d4>)
 8007d32:	fba3 2301 	umull	r2, r3, r3, r1
 8007d36:	095b      	lsrs	r3, r3, #5
 8007d38:	2264      	movs	r2, #100	@ 0x64
 8007d3a:	fb02 f303 	mul.w	r3, r2, r3
 8007d3e:	1acb      	subs	r3, r1, r3
 8007d40:	00db      	lsls	r3, r3, #3
 8007d42:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007d46:	4b36      	ldr	r3, [pc, #216]	@ (8007e20 <UART_SetConfig+0x2d4>)
 8007d48:	fba3 2302 	umull	r2, r3, r3, r2
 8007d4c:	095b      	lsrs	r3, r3, #5
 8007d4e:	005b      	lsls	r3, r3, #1
 8007d50:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007d54:	441c      	add	r4, r3
 8007d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d60:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007d64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007d68:	4642      	mov	r2, r8
 8007d6a:	464b      	mov	r3, r9
 8007d6c:	1891      	adds	r1, r2, r2
 8007d6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007d70:	415b      	adcs	r3, r3
 8007d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007d78:	4641      	mov	r1, r8
 8007d7a:	1851      	adds	r1, r2, r1
 8007d7c:	6339      	str	r1, [r7, #48]	@ 0x30
 8007d7e:	4649      	mov	r1, r9
 8007d80:	414b      	adcs	r3, r1
 8007d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d84:	f04f 0200 	mov.w	r2, #0
 8007d88:	f04f 0300 	mov.w	r3, #0
 8007d8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007d90:	4659      	mov	r1, fp
 8007d92:	00cb      	lsls	r3, r1, #3
 8007d94:	4651      	mov	r1, sl
 8007d96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d9a:	4651      	mov	r1, sl
 8007d9c:	00ca      	lsls	r2, r1, #3
 8007d9e:	4610      	mov	r0, r2
 8007da0:	4619      	mov	r1, r3
 8007da2:	4603      	mov	r3, r0
 8007da4:	4642      	mov	r2, r8
 8007da6:	189b      	adds	r3, r3, r2
 8007da8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007dac:	464b      	mov	r3, r9
 8007dae:	460a      	mov	r2, r1
 8007db0:	eb42 0303 	adc.w	r3, r2, r3
 8007db4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007dc4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007dc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007dcc:	460b      	mov	r3, r1
 8007dce:	18db      	adds	r3, r3, r3
 8007dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	eb42 0303 	adc.w	r3, r2, r3
 8007dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007dde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007de2:	f7f8 ff71 	bl	8000cc8 <__aeabi_uldivmod>
 8007de6:	4602      	mov	r2, r0
 8007de8:	460b      	mov	r3, r1
 8007dea:	4b0d      	ldr	r3, [pc, #52]	@ (8007e20 <UART_SetConfig+0x2d4>)
 8007dec:	fba3 1302 	umull	r1, r3, r3, r2
 8007df0:	095b      	lsrs	r3, r3, #5
 8007df2:	2164      	movs	r1, #100	@ 0x64
 8007df4:	fb01 f303 	mul.w	r3, r1, r3
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	00db      	lsls	r3, r3, #3
 8007dfc:	3332      	adds	r3, #50	@ 0x32
 8007dfe:	4a08      	ldr	r2, [pc, #32]	@ (8007e20 <UART_SetConfig+0x2d4>)
 8007e00:	fba2 2303 	umull	r2, r3, r2, r3
 8007e04:	095b      	lsrs	r3, r3, #5
 8007e06:	f003 0207 	and.w	r2, r3, #7
 8007e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4422      	add	r2, r4
 8007e12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e14:	e106      	b.n	8008024 <UART_SetConfig+0x4d8>
 8007e16:	bf00      	nop
 8007e18:	40011000 	.word	0x40011000
 8007e1c:	40011400 	.word	0x40011400
 8007e20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e2e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007e32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007e36:	4642      	mov	r2, r8
 8007e38:	464b      	mov	r3, r9
 8007e3a:	1891      	adds	r1, r2, r2
 8007e3c:	6239      	str	r1, [r7, #32]
 8007e3e:	415b      	adcs	r3, r3
 8007e40:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e46:	4641      	mov	r1, r8
 8007e48:	1854      	adds	r4, r2, r1
 8007e4a:	4649      	mov	r1, r9
 8007e4c:	eb43 0501 	adc.w	r5, r3, r1
 8007e50:	f04f 0200 	mov.w	r2, #0
 8007e54:	f04f 0300 	mov.w	r3, #0
 8007e58:	00eb      	lsls	r3, r5, #3
 8007e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e5e:	00e2      	lsls	r2, r4, #3
 8007e60:	4614      	mov	r4, r2
 8007e62:	461d      	mov	r5, r3
 8007e64:	4643      	mov	r3, r8
 8007e66:	18e3      	adds	r3, r4, r3
 8007e68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e6c:	464b      	mov	r3, r9
 8007e6e:	eb45 0303 	adc.w	r3, r5, r3
 8007e72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007e86:	f04f 0200 	mov.w	r2, #0
 8007e8a:	f04f 0300 	mov.w	r3, #0
 8007e8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007e92:	4629      	mov	r1, r5
 8007e94:	008b      	lsls	r3, r1, #2
 8007e96:	4621      	mov	r1, r4
 8007e98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	008a      	lsls	r2, r1, #2
 8007ea0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007ea4:	f7f8 ff10 	bl	8000cc8 <__aeabi_uldivmod>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	460b      	mov	r3, r1
 8007eac:	4b60      	ldr	r3, [pc, #384]	@ (8008030 <UART_SetConfig+0x4e4>)
 8007eae:	fba3 2302 	umull	r2, r3, r3, r2
 8007eb2:	095b      	lsrs	r3, r3, #5
 8007eb4:	011c      	lsls	r4, r3, #4
 8007eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ec0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007ec4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007ec8:	4642      	mov	r2, r8
 8007eca:	464b      	mov	r3, r9
 8007ecc:	1891      	adds	r1, r2, r2
 8007ece:	61b9      	str	r1, [r7, #24]
 8007ed0:	415b      	adcs	r3, r3
 8007ed2:	61fb      	str	r3, [r7, #28]
 8007ed4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ed8:	4641      	mov	r1, r8
 8007eda:	1851      	adds	r1, r2, r1
 8007edc:	6139      	str	r1, [r7, #16]
 8007ede:	4649      	mov	r1, r9
 8007ee0:	414b      	adcs	r3, r1
 8007ee2:	617b      	str	r3, [r7, #20]
 8007ee4:	f04f 0200 	mov.w	r2, #0
 8007ee8:	f04f 0300 	mov.w	r3, #0
 8007eec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ef0:	4659      	mov	r1, fp
 8007ef2:	00cb      	lsls	r3, r1, #3
 8007ef4:	4651      	mov	r1, sl
 8007ef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007efa:	4651      	mov	r1, sl
 8007efc:	00ca      	lsls	r2, r1, #3
 8007efe:	4610      	mov	r0, r2
 8007f00:	4619      	mov	r1, r3
 8007f02:	4603      	mov	r3, r0
 8007f04:	4642      	mov	r2, r8
 8007f06:	189b      	adds	r3, r3, r2
 8007f08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f0c:	464b      	mov	r3, r9
 8007f0e:	460a      	mov	r2, r1
 8007f10:	eb42 0303 	adc.w	r3, r2, r3
 8007f14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007f22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007f24:	f04f 0200 	mov.w	r2, #0
 8007f28:	f04f 0300 	mov.w	r3, #0
 8007f2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007f30:	4649      	mov	r1, r9
 8007f32:	008b      	lsls	r3, r1, #2
 8007f34:	4641      	mov	r1, r8
 8007f36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f3a:	4641      	mov	r1, r8
 8007f3c:	008a      	lsls	r2, r1, #2
 8007f3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007f42:	f7f8 fec1 	bl	8000cc8 <__aeabi_uldivmod>
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	4b38      	ldr	r3, [pc, #224]	@ (8008030 <UART_SetConfig+0x4e4>)
 8007f4e:	fba3 2301 	umull	r2, r3, r3, r1
 8007f52:	095b      	lsrs	r3, r3, #5
 8007f54:	2264      	movs	r2, #100	@ 0x64
 8007f56:	fb02 f303 	mul.w	r3, r2, r3
 8007f5a:	1acb      	subs	r3, r1, r3
 8007f5c:	011b      	lsls	r3, r3, #4
 8007f5e:	3332      	adds	r3, #50	@ 0x32
 8007f60:	4a33      	ldr	r2, [pc, #204]	@ (8008030 <UART_SetConfig+0x4e4>)
 8007f62:	fba2 2303 	umull	r2, r3, r2, r3
 8007f66:	095b      	lsrs	r3, r3, #5
 8007f68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007f6c:	441c      	add	r4, r3
 8007f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f72:	2200      	movs	r2, #0
 8007f74:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f76:	677a      	str	r2, [r7, #116]	@ 0x74
 8007f78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007f7c:	4642      	mov	r2, r8
 8007f7e:	464b      	mov	r3, r9
 8007f80:	1891      	adds	r1, r2, r2
 8007f82:	60b9      	str	r1, [r7, #8]
 8007f84:	415b      	adcs	r3, r3
 8007f86:	60fb      	str	r3, [r7, #12]
 8007f88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f8c:	4641      	mov	r1, r8
 8007f8e:	1851      	adds	r1, r2, r1
 8007f90:	6039      	str	r1, [r7, #0]
 8007f92:	4649      	mov	r1, r9
 8007f94:	414b      	adcs	r3, r1
 8007f96:	607b      	str	r3, [r7, #4]
 8007f98:	f04f 0200 	mov.w	r2, #0
 8007f9c:	f04f 0300 	mov.w	r3, #0
 8007fa0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007fa4:	4659      	mov	r1, fp
 8007fa6:	00cb      	lsls	r3, r1, #3
 8007fa8:	4651      	mov	r1, sl
 8007faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fae:	4651      	mov	r1, sl
 8007fb0:	00ca      	lsls	r2, r1, #3
 8007fb2:	4610      	mov	r0, r2
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	4642      	mov	r2, r8
 8007fba:	189b      	adds	r3, r3, r2
 8007fbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007fbe:	464b      	mov	r3, r9
 8007fc0:	460a      	mov	r2, r1
 8007fc2:	eb42 0303 	adc.w	r3, r2, r3
 8007fc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007fd2:	667a      	str	r2, [r7, #100]	@ 0x64
 8007fd4:	f04f 0200 	mov.w	r2, #0
 8007fd8:	f04f 0300 	mov.w	r3, #0
 8007fdc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007fe0:	4649      	mov	r1, r9
 8007fe2:	008b      	lsls	r3, r1, #2
 8007fe4:	4641      	mov	r1, r8
 8007fe6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fea:	4641      	mov	r1, r8
 8007fec:	008a      	lsls	r2, r1, #2
 8007fee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007ff2:	f7f8 fe69 	bl	8000cc8 <__aeabi_uldivmod>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8008030 <UART_SetConfig+0x4e4>)
 8007ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8008000:	095b      	lsrs	r3, r3, #5
 8008002:	2164      	movs	r1, #100	@ 0x64
 8008004:	fb01 f303 	mul.w	r3, r1, r3
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	011b      	lsls	r3, r3, #4
 800800c:	3332      	adds	r3, #50	@ 0x32
 800800e:	4a08      	ldr	r2, [pc, #32]	@ (8008030 <UART_SetConfig+0x4e4>)
 8008010:	fba2 2303 	umull	r2, r3, r2, r3
 8008014:	095b      	lsrs	r3, r3, #5
 8008016:	f003 020f 	and.w	r2, r3, #15
 800801a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4422      	add	r2, r4
 8008022:	609a      	str	r2, [r3, #8]
}
 8008024:	bf00      	nop
 8008026:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800802a:	46bd      	mov	sp, r7
 800802c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008030:	51eb851f 	.word	0x51eb851f

08008034 <malloc>:
 8008034:	4b02      	ldr	r3, [pc, #8]	@ (8008040 <malloc+0xc>)
 8008036:	4601      	mov	r1, r0
 8008038:	6818      	ldr	r0, [r3, #0]
 800803a:	f000 b82d 	b.w	8008098 <_malloc_r>
 800803e:	bf00      	nop
 8008040:	20000018 	.word	0x20000018

08008044 <free>:
 8008044:	4b02      	ldr	r3, [pc, #8]	@ (8008050 <free+0xc>)
 8008046:	4601      	mov	r1, r0
 8008048:	6818      	ldr	r0, [r3, #0]
 800804a:	f002 b83d 	b.w	800a0c8 <_free_r>
 800804e:	bf00      	nop
 8008050:	20000018 	.word	0x20000018

08008054 <sbrk_aligned>:
 8008054:	b570      	push	{r4, r5, r6, lr}
 8008056:	4e0f      	ldr	r6, [pc, #60]	@ (8008094 <sbrk_aligned+0x40>)
 8008058:	460c      	mov	r4, r1
 800805a:	6831      	ldr	r1, [r6, #0]
 800805c:	4605      	mov	r5, r0
 800805e:	b911      	cbnz	r1, 8008066 <sbrk_aligned+0x12>
 8008060:	f001 f98e 	bl	8009380 <_sbrk_r>
 8008064:	6030      	str	r0, [r6, #0]
 8008066:	4621      	mov	r1, r4
 8008068:	4628      	mov	r0, r5
 800806a:	f001 f989 	bl	8009380 <_sbrk_r>
 800806e:	1c43      	adds	r3, r0, #1
 8008070:	d103      	bne.n	800807a <sbrk_aligned+0x26>
 8008072:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008076:	4620      	mov	r0, r4
 8008078:	bd70      	pop	{r4, r5, r6, pc}
 800807a:	1cc4      	adds	r4, r0, #3
 800807c:	f024 0403 	bic.w	r4, r4, #3
 8008080:	42a0      	cmp	r0, r4
 8008082:	d0f8      	beq.n	8008076 <sbrk_aligned+0x22>
 8008084:	1a21      	subs	r1, r4, r0
 8008086:	4628      	mov	r0, r5
 8008088:	f001 f97a 	bl	8009380 <_sbrk_r>
 800808c:	3001      	adds	r0, #1
 800808e:	d1f2      	bne.n	8008076 <sbrk_aligned+0x22>
 8008090:	e7ef      	b.n	8008072 <sbrk_aligned+0x1e>
 8008092:	bf00      	nop
 8008094:	2000042c 	.word	0x2000042c

08008098 <_malloc_r>:
 8008098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800809c:	1ccd      	adds	r5, r1, #3
 800809e:	f025 0503 	bic.w	r5, r5, #3
 80080a2:	3508      	adds	r5, #8
 80080a4:	2d0c      	cmp	r5, #12
 80080a6:	bf38      	it	cc
 80080a8:	250c      	movcc	r5, #12
 80080aa:	2d00      	cmp	r5, #0
 80080ac:	4606      	mov	r6, r0
 80080ae:	db01      	blt.n	80080b4 <_malloc_r+0x1c>
 80080b0:	42a9      	cmp	r1, r5
 80080b2:	d904      	bls.n	80080be <_malloc_r+0x26>
 80080b4:	230c      	movs	r3, #12
 80080b6:	6033      	str	r3, [r6, #0]
 80080b8:	2000      	movs	r0, #0
 80080ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008194 <_malloc_r+0xfc>
 80080c2:	f000 f869 	bl	8008198 <__malloc_lock>
 80080c6:	f8d8 3000 	ldr.w	r3, [r8]
 80080ca:	461c      	mov	r4, r3
 80080cc:	bb44      	cbnz	r4, 8008120 <_malloc_r+0x88>
 80080ce:	4629      	mov	r1, r5
 80080d0:	4630      	mov	r0, r6
 80080d2:	f7ff ffbf 	bl	8008054 <sbrk_aligned>
 80080d6:	1c43      	adds	r3, r0, #1
 80080d8:	4604      	mov	r4, r0
 80080da:	d158      	bne.n	800818e <_malloc_r+0xf6>
 80080dc:	f8d8 4000 	ldr.w	r4, [r8]
 80080e0:	4627      	mov	r7, r4
 80080e2:	2f00      	cmp	r7, #0
 80080e4:	d143      	bne.n	800816e <_malloc_r+0xd6>
 80080e6:	2c00      	cmp	r4, #0
 80080e8:	d04b      	beq.n	8008182 <_malloc_r+0xea>
 80080ea:	6823      	ldr	r3, [r4, #0]
 80080ec:	4639      	mov	r1, r7
 80080ee:	4630      	mov	r0, r6
 80080f0:	eb04 0903 	add.w	r9, r4, r3
 80080f4:	f001 f944 	bl	8009380 <_sbrk_r>
 80080f8:	4581      	cmp	r9, r0
 80080fa:	d142      	bne.n	8008182 <_malloc_r+0xea>
 80080fc:	6821      	ldr	r1, [r4, #0]
 80080fe:	1a6d      	subs	r5, r5, r1
 8008100:	4629      	mov	r1, r5
 8008102:	4630      	mov	r0, r6
 8008104:	f7ff ffa6 	bl	8008054 <sbrk_aligned>
 8008108:	3001      	adds	r0, #1
 800810a:	d03a      	beq.n	8008182 <_malloc_r+0xea>
 800810c:	6823      	ldr	r3, [r4, #0]
 800810e:	442b      	add	r3, r5
 8008110:	6023      	str	r3, [r4, #0]
 8008112:	f8d8 3000 	ldr.w	r3, [r8]
 8008116:	685a      	ldr	r2, [r3, #4]
 8008118:	bb62      	cbnz	r2, 8008174 <_malloc_r+0xdc>
 800811a:	f8c8 7000 	str.w	r7, [r8]
 800811e:	e00f      	b.n	8008140 <_malloc_r+0xa8>
 8008120:	6822      	ldr	r2, [r4, #0]
 8008122:	1b52      	subs	r2, r2, r5
 8008124:	d420      	bmi.n	8008168 <_malloc_r+0xd0>
 8008126:	2a0b      	cmp	r2, #11
 8008128:	d917      	bls.n	800815a <_malloc_r+0xc2>
 800812a:	1961      	adds	r1, r4, r5
 800812c:	42a3      	cmp	r3, r4
 800812e:	6025      	str	r5, [r4, #0]
 8008130:	bf18      	it	ne
 8008132:	6059      	strne	r1, [r3, #4]
 8008134:	6863      	ldr	r3, [r4, #4]
 8008136:	bf08      	it	eq
 8008138:	f8c8 1000 	streq.w	r1, [r8]
 800813c:	5162      	str	r2, [r4, r5]
 800813e:	604b      	str	r3, [r1, #4]
 8008140:	4630      	mov	r0, r6
 8008142:	f000 f82f 	bl	80081a4 <__malloc_unlock>
 8008146:	f104 000b 	add.w	r0, r4, #11
 800814a:	1d23      	adds	r3, r4, #4
 800814c:	f020 0007 	bic.w	r0, r0, #7
 8008150:	1ac2      	subs	r2, r0, r3
 8008152:	bf1c      	itt	ne
 8008154:	1a1b      	subne	r3, r3, r0
 8008156:	50a3      	strne	r3, [r4, r2]
 8008158:	e7af      	b.n	80080ba <_malloc_r+0x22>
 800815a:	6862      	ldr	r2, [r4, #4]
 800815c:	42a3      	cmp	r3, r4
 800815e:	bf0c      	ite	eq
 8008160:	f8c8 2000 	streq.w	r2, [r8]
 8008164:	605a      	strne	r2, [r3, #4]
 8008166:	e7eb      	b.n	8008140 <_malloc_r+0xa8>
 8008168:	4623      	mov	r3, r4
 800816a:	6864      	ldr	r4, [r4, #4]
 800816c:	e7ae      	b.n	80080cc <_malloc_r+0x34>
 800816e:	463c      	mov	r4, r7
 8008170:	687f      	ldr	r7, [r7, #4]
 8008172:	e7b6      	b.n	80080e2 <_malloc_r+0x4a>
 8008174:	461a      	mov	r2, r3
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	42a3      	cmp	r3, r4
 800817a:	d1fb      	bne.n	8008174 <_malloc_r+0xdc>
 800817c:	2300      	movs	r3, #0
 800817e:	6053      	str	r3, [r2, #4]
 8008180:	e7de      	b.n	8008140 <_malloc_r+0xa8>
 8008182:	230c      	movs	r3, #12
 8008184:	6033      	str	r3, [r6, #0]
 8008186:	4630      	mov	r0, r6
 8008188:	f000 f80c 	bl	80081a4 <__malloc_unlock>
 800818c:	e794      	b.n	80080b8 <_malloc_r+0x20>
 800818e:	6005      	str	r5, [r0, #0]
 8008190:	e7d6      	b.n	8008140 <_malloc_r+0xa8>
 8008192:	bf00      	nop
 8008194:	20000430 	.word	0x20000430

08008198 <__malloc_lock>:
 8008198:	4801      	ldr	r0, [pc, #4]	@ (80081a0 <__malloc_lock+0x8>)
 800819a:	f001 b93e 	b.w	800941a <__retarget_lock_acquire_recursive>
 800819e:	bf00      	nop
 80081a0:	20000574 	.word	0x20000574

080081a4 <__malloc_unlock>:
 80081a4:	4801      	ldr	r0, [pc, #4]	@ (80081ac <__malloc_unlock+0x8>)
 80081a6:	f001 b939 	b.w	800941c <__retarget_lock_release_recursive>
 80081aa:	bf00      	nop
 80081ac:	20000574 	.word	0x20000574

080081b0 <__cvt>:
 80081b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081b4:	ec57 6b10 	vmov	r6, r7, d0
 80081b8:	2f00      	cmp	r7, #0
 80081ba:	460c      	mov	r4, r1
 80081bc:	4619      	mov	r1, r3
 80081be:	463b      	mov	r3, r7
 80081c0:	bfbb      	ittet	lt
 80081c2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80081c6:	461f      	movlt	r7, r3
 80081c8:	2300      	movge	r3, #0
 80081ca:	232d      	movlt	r3, #45	@ 0x2d
 80081cc:	700b      	strb	r3, [r1, #0]
 80081ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081d0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80081d4:	4691      	mov	r9, r2
 80081d6:	f023 0820 	bic.w	r8, r3, #32
 80081da:	bfbc      	itt	lt
 80081dc:	4632      	movlt	r2, r6
 80081de:	4616      	movlt	r6, r2
 80081e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80081e4:	d005      	beq.n	80081f2 <__cvt+0x42>
 80081e6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80081ea:	d100      	bne.n	80081ee <__cvt+0x3e>
 80081ec:	3401      	adds	r4, #1
 80081ee:	2102      	movs	r1, #2
 80081f0:	e000      	b.n	80081f4 <__cvt+0x44>
 80081f2:	2103      	movs	r1, #3
 80081f4:	ab03      	add	r3, sp, #12
 80081f6:	9301      	str	r3, [sp, #4]
 80081f8:	ab02      	add	r3, sp, #8
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	ec47 6b10 	vmov	d0, r6, r7
 8008200:	4653      	mov	r3, sl
 8008202:	4622      	mov	r2, r4
 8008204:	f001 f99c 	bl	8009540 <_dtoa_r>
 8008208:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800820c:	4605      	mov	r5, r0
 800820e:	d119      	bne.n	8008244 <__cvt+0x94>
 8008210:	f019 0f01 	tst.w	r9, #1
 8008214:	d00e      	beq.n	8008234 <__cvt+0x84>
 8008216:	eb00 0904 	add.w	r9, r0, r4
 800821a:	2200      	movs	r2, #0
 800821c:	2300      	movs	r3, #0
 800821e:	4630      	mov	r0, r6
 8008220:	4639      	mov	r1, r7
 8008222:	f7f8 fc71 	bl	8000b08 <__aeabi_dcmpeq>
 8008226:	b108      	cbz	r0, 800822c <__cvt+0x7c>
 8008228:	f8cd 900c 	str.w	r9, [sp, #12]
 800822c:	2230      	movs	r2, #48	@ 0x30
 800822e:	9b03      	ldr	r3, [sp, #12]
 8008230:	454b      	cmp	r3, r9
 8008232:	d31e      	bcc.n	8008272 <__cvt+0xc2>
 8008234:	9b03      	ldr	r3, [sp, #12]
 8008236:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008238:	1b5b      	subs	r3, r3, r5
 800823a:	4628      	mov	r0, r5
 800823c:	6013      	str	r3, [r2, #0]
 800823e:	b004      	add	sp, #16
 8008240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008244:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008248:	eb00 0904 	add.w	r9, r0, r4
 800824c:	d1e5      	bne.n	800821a <__cvt+0x6a>
 800824e:	7803      	ldrb	r3, [r0, #0]
 8008250:	2b30      	cmp	r3, #48	@ 0x30
 8008252:	d10a      	bne.n	800826a <__cvt+0xba>
 8008254:	2200      	movs	r2, #0
 8008256:	2300      	movs	r3, #0
 8008258:	4630      	mov	r0, r6
 800825a:	4639      	mov	r1, r7
 800825c:	f7f8 fc54 	bl	8000b08 <__aeabi_dcmpeq>
 8008260:	b918      	cbnz	r0, 800826a <__cvt+0xba>
 8008262:	f1c4 0401 	rsb	r4, r4, #1
 8008266:	f8ca 4000 	str.w	r4, [sl]
 800826a:	f8da 3000 	ldr.w	r3, [sl]
 800826e:	4499      	add	r9, r3
 8008270:	e7d3      	b.n	800821a <__cvt+0x6a>
 8008272:	1c59      	adds	r1, r3, #1
 8008274:	9103      	str	r1, [sp, #12]
 8008276:	701a      	strb	r2, [r3, #0]
 8008278:	e7d9      	b.n	800822e <__cvt+0x7e>

0800827a <__exponent>:
 800827a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800827c:	2900      	cmp	r1, #0
 800827e:	bfba      	itte	lt
 8008280:	4249      	neglt	r1, r1
 8008282:	232d      	movlt	r3, #45	@ 0x2d
 8008284:	232b      	movge	r3, #43	@ 0x2b
 8008286:	2909      	cmp	r1, #9
 8008288:	7002      	strb	r2, [r0, #0]
 800828a:	7043      	strb	r3, [r0, #1]
 800828c:	dd29      	ble.n	80082e2 <__exponent+0x68>
 800828e:	f10d 0307 	add.w	r3, sp, #7
 8008292:	461d      	mov	r5, r3
 8008294:	270a      	movs	r7, #10
 8008296:	461a      	mov	r2, r3
 8008298:	fbb1 f6f7 	udiv	r6, r1, r7
 800829c:	fb07 1416 	mls	r4, r7, r6, r1
 80082a0:	3430      	adds	r4, #48	@ 0x30
 80082a2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80082a6:	460c      	mov	r4, r1
 80082a8:	2c63      	cmp	r4, #99	@ 0x63
 80082aa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80082ae:	4631      	mov	r1, r6
 80082b0:	dcf1      	bgt.n	8008296 <__exponent+0x1c>
 80082b2:	3130      	adds	r1, #48	@ 0x30
 80082b4:	1e94      	subs	r4, r2, #2
 80082b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80082ba:	1c41      	adds	r1, r0, #1
 80082bc:	4623      	mov	r3, r4
 80082be:	42ab      	cmp	r3, r5
 80082c0:	d30a      	bcc.n	80082d8 <__exponent+0x5e>
 80082c2:	f10d 0309 	add.w	r3, sp, #9
 80082c6:	1a9b      	subs	r3, r3, r2
 80082c8:	42ac      	cmp	r4, r5
 80082ca:	bf88      	it	hi
 80082cc:	2300      	movhi	r3, #0
 80082ce:	3302      	adds	r3, #2
 80082d0:	4403      	add	r3, r0
 80082d2:	1a18      	subs	r0, r3, r0
 80082d4:	b003      	add	sp, #12
 80082d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082d8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80082dc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80082e0:	e7ed      	b.n	80082be <__exponent+0x44>
 80082e2:	2330      	movs	r3, #48	@ 0x30
 80082e4:	3130      	adds	r1, #48	@ 0x30
 80082e6:	7083      	strb	r3, [r0, #2]
 80082e8:	70c1      	strb	r1, [r0, #3]
 80082ea:	1d03      	adds	r3, r0, #4
 80082ec:	e7f1      	b.n	80082d2 <__exponent+0x58>
	...

080082f0 <_printf_float>:
 80082f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f4:	b08d      	sub	sp, #52	@ 0x34
 80082f6:	460c      	mov	r4, r1
 80082f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80082fc:	4616      	mov	r6, r2
 80082fe:	461f      	mov	r7, r3
 8008300:	4605      	mov	r5, r0
 8008302:	f001 f805 	bl	8009310 <_localeconv_r>
 8008306:	6803      	ldr	r3, [r0, #0]
 8008308:	9304      	str	r3, [sp, #16]
 800830a:	4618      	mov	r0, r3
 800830c:	f7f7 ffd0 	bl	80002b0 <strlen>
 8008310:	2300      	movs	r3, #0
 8008312:	930a      	str	r3, [sp, #40]	@ 0x28
 8008314:	f8d8 3000 	ldr.w	r3, [r8]
 8008318:	9005      	str	r0, [sp, #20]
 800831a:	3307      	adds	r3, #7
 800831c:	f023 0307 	bic.w	r3, r3, #7
 8008320:	f103 0208 	add.w	r2, r3, #8
 8008324:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008328:	f8d4 b000 	ldr.w	fp, [r4]
 800832c:	f8c8 2000 	str.w	r2, [r8]
 8008330:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008334:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008338:	9307      	str	r3, [sp, #28]
 800833a:	f8cd 8018 	str.w	r8, [sp, #24]
 800833e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008342:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008346:	4b9c      	ldr	r3, [pc, #624]	@ (80085b8 <_printf_float+0x2c8>)
 8008348:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800834c:	f7f8 fc0e 	bl	8000b6c <__aeabi_dcmpun>
 8008350:	bb70      	cbnz	r0, 80083b0 <_printf_float+0xc0>
 8008352:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008356:	4b98      	ldr	r3, [pc, #608]	@ (80085b8 <_printf_float+0x2c8>)
 8008358:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800835c:	f7f8 fbe8 	bl	8000b30 <__aeabi_dcmple>
 8008360:	bb30      	cbnz	r0, 80083b0 <_printf_float+0xc0>
 8008362:	2200      	movs	r2, #0
 8008364:	2300      	movs	r3, #0
 8008366:	4640      	mov	r0, r8
 8008368:	4649      	mov	r1, r9
 800836a:	f7f8 fbd7 	bl	8000b1c <__aeabi_dcmplt>
 800836e:	b110      	cbz	r0, 8008376 <_printf_float+0x86>
 8008370:	232d      	movs	r3, #45	@ 0x2d
 8008372:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008376:	4a91      	ldr	r2, [pc, #580]	@ (80085bc <_printf_float+0x2cc>)
 8008378:	4b91      	ldr	r3, [pc, #580]	@ (80085c0 <_printf_float+0x2d0>)
 800837a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800837e:	bf94      	ite	ls
 8008380:	4690      	movls	r8, r2
 8008382:	4698      	movhi	r8, r3
 8008384:	2303      	movs	r3, #3
 8008386:	6123      	str	r3, [r4, #16]
 8008388:	f02b 0304 	bic.w	r3, fp, #4
 800838c:	6023      	str	r3, [r4, #0]
 800838e:	f04f 0900 	mov.w	r9, #0
 8008392:	9700      	str	r7, [sp, #0]
 8008394:	4633      	mov	r3, r6
 8008396:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008398:	4621      	mov	r1, r4
 800839a:	4628      	mov	r0, r5
 800839c:	f000 f9d2 	bl	8008744 <_printf_common>
 80083a0:	3001      	adds	r0, #1
 80083a2:	f040 808d 	bne.w	80084c0 <_printf_float+0x1d0>
 80083a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083aa:	b00d      	add	sp, #52	@ 0x34
 80083ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b0:	4642      	mov	r2, r8
 80083b2:	464b      	mov	r3, r9
 80083b4:	4640      	mov	r0, r8
 80083b6:	4649      	mov	r1, r9
 80083b8:	f7f8 fbd8 	bl	8000b6c <__aeabi_dcmpun>
 80083bc:	b140      	cbz	r0, 80083d0 <_printf_float+0xe0>
 80083be:	464b      	mov	r3, r9
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	bfbc      	itt	lt
 80083c4:	232d      	movlt	r3, #45	@ 0x2d
 80083c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80083ca:	4a7e      	ldr	r2, [pc, #504]	@ (80085c4 <_printf_float+0x2d4>)
 80083cc:	4b7e      	ldr	r3, [pc, #504]	@ (80085c8 <_printf_float+0x2d8>)
 80083ce:	e7d4      	b.n	800837a <_printf_float+0x8a>
 80083d0:	6863      	ldr	r3, [r4, #4]
 80083d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80083d6:	9206      	str	r2, [sp, #24]
 80083d8:	1c5a      	adds	r2, r3, #1
 80083da:	d13b      	bne.n	8008454 <_printf_float+0x164>
 80083dc:	2306      	movs	r3, #6
 80083de:	6063      	str	r3, [r4, #4]
 80083e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80083e4:	2300      	movs	r3, #0
 80083e6:	6022      	str	r2, [r4, #0]
 80083e8:	9303      	str	r3, [sp, #12]
 80083ea:	ab0a      	add	r3, sp, #40	@ 0x28
 80083ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 80083f0:	ab09      	add	r3, sp, #36	@ 0x24
 80083f2:	9300      	str	r3, [sp, #0]
 80083f4:	6861      	ldr	r1, [r4, #4]
 80083f6:	ec49 8b10 	vmov	d0, r8, r9
 80083fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80083fe:	4628      	mov	r0, r5
 8008400:	f7ff fed6 	bl	80081b0 <__cvt>
 8008404:	9b06      	ldr	r3, [sp, #24]
 8008406:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008408:	2b47      	cmp	r3, #71	@ 0x47
 800840a:	4680      	mov	r8, r0
 800840c:	d129      	bne.n	8008462 <_printf_float+0x172>
 800840e:	1cc8      	adds	r0, r1, #3
 8008410:	db02      	blt.n	8008418 <_printf_float+0x128>
 8008412:	6863      	ldr	r3, [r4, #4]
 8008414:	4299      	cmp	r1, r3
 8008416:	dd41      	ble.n	800849c <_printf_float+0x1ac>
 8008418:	f1aa 0a02 	sub.w	sl, sl, #2
 800841c:	fa5f fa8a 	uxtb.w	sl, sl
 8008420:	3901      	subs	r1, #1
 8008422:	4652      	mov	r2, sl
 8008424:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008428:	9109      	str	r1, [sp, #36]	@ 0x24
 800842a:	f7ff ff26 	bl	800827a <__exponent>
 800842e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008430:	1813      	adds	r3, r2, r0
 8008432:	2a01      	cmp	r2, #1
 8008434:	4681      	mov	r9, r0
 8008436:	6123      	str	r3, [r4, #16]
 8008438:	dc02      	bgt.n	8008440 <_printf_float+0x150>
 800843a:	6822      	ldr	r2, [r4, #0]
 800843c:	07d2      	lsls	r2, r2, #31
 800843e:	d501      	bpl.n	8008444 <_printf_float+0x154>
 8008440:	3301      	adds	r3, #1
 8008442:	6123      	str	r3, [r4, #16]
 8008444:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008448:	2b00      	cmp	r3, #0
 800844a:	d0a2      	beq.n	8008392 <_printf_float+0xa2>
 800844c:	232d      	movs	r3, #45	@ 0x2d
 800844e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008452:	e79e      	b.n	8008392 <_printf_float+0xa2>
 8008454:	9a06      	ldr	r2, [sp, #24]
 8008456:	2a47      	cmp	r2, #71	@ 0x47
 8008458:	d1c2      	bne.n	80083e0 <_printf_float+0xf0>
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1c0      	bne.n	80083e0 <_printf_float+0xf0>
 800845e:	2301      	movs	r3, #1
 8008460:	e7bd      	b.n	80083de <_printf_float+0xee>
 8008462:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008466:	d9db      	bls.n	8008420 <_printf_float+0x130>
 8008468:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800846c:	d118      	bne.n	80084a0 <_printf_float+0x1b0>
 800846e:	2900      	cmp	r1, #0
 8008470:	6863      	ldr	r3, [r4, #4]
 8008472:	dd0b      	ble.n	800848c <_printf_float+0x19c>
 8008474:	6121      	str	r1, [r4, #16]
 8008476:	b913      	cbnz	r3, 800847e <_printf_float+0x18e>
 8008478:	6822      	ldr	r2, [r4, #0]
 800847a:	07d0      	lsls	r0, r2, #31
 800847c:	d502      	bpl.n	8008484 <_printf_float+0x194>
 800847e:	3301      	adds	r3, #1
 8008480:	440b      	add	r3, r1
 8008482:	6123      	str	r3, [r4, #16]
 8008484:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008486:	f04f 0900 	mov.w	r9, #0
 800848a:	e7db      	b.n	8008444 <_printf_float+0x154>
 800848c:	b913      	cbnz	r3, 8008494 <_printf_float+0x1a4>
 800848e:	6822      	ldr	r2, [r4, #0]
 8008490:	07d2      	lsls	r2, r2, #31
 8008492:	d501      	bpl.n	8008498 <_printf_float+0x1a8>
 8008494:	3302      	adds	r3, #2
 8008496:	e7f4      	b.n	8008482 <_printf_float+0x192>
 8008498:	2301      	movs	r3, #1
 800849a:	e7f2      	b.n	8008482 <_printf_float+0x192>
 800849c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80084a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084a2:	4299      	cmp	r1, r3
 80084a4:	db05      	blt.n	80084b2 <_printf_float+0x1c2>
 80084a6:	6823      	ldr	r3, [r4, #0]
 80084a8:	6121      	str	r1, [r4, #16]
 80084aa:	07d8      	lsls	r0, r3, #31
 80084ac:	d5ea      	bpl.n	8008484 <_printf_float+0x194>
 80084ae:	1c4b      	adds	r3, r1, #1
 80084b0:	e7e7      	b.n	8008482 <_printf_float+0x192>
 80084b2:	2900      	cmp	r1, #0
 80084b4:	bfd4      	ite	le
 80084b6:	f1c1 0202 	rsble	r2, r1, #2
 80084ba:	2201      	movgt	r2, #1
 80084bc:	4413      	add	r3, r2
 80084be:	e7e0      	b.n	8008482 <_printf_float+0x192>
 80084c0:	6823      	ldr	r3, [r4, #0]
 80084c2:	055a      	lsls	r2, r3, #21
 80084c4:	d407      	bmi.n	80084d6 <_printf_float+0x1e6>
 80084c6:	6923      	ldr	r3, [r4, #16]
 80084c8:	4642      	mov	r2, r8
 80084ca:	4631      	mov	r1, r6
 80084cc:	4628      	mov	r0, r5
 80084ce:	47b8      	blx	r7
 80084d0:	3001      	adds	r0, #1
 80084d2:	d12b      	bne.n	800852c <_printf_float+0x23c>
 80084d4:	e767      	b.n	80083a6 <_printf_float+0xb6>
 80084d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80084da:	f240 80dd 	bls.w	8008698 <_printf_float+0x3a8>
 80084de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80084e2:	2200      	movs	r2, #0
 80084e4:	2300      	movs	r3, #0
 80084e6:	f7f8 fb0f 	bl	8000b08 <__aeabi_dcmpeq>
 80084ea:	2800      	cmp	r0, #0
 80084ec:	d033      	beq.n	8008556 <_printf_float+0x266>
 80084ee:	4a37      	ldr	r2, [pc, #220]	@ (80085cc <_printf_float+0x2dc>)
 80084f0:	2301      	movs	r3, #1
 80084f2:	4631      	mov	r1, r6
 80084f4:	4628      	mov	r0, r5
 80084f6:	47b8      	blx	r7
 80084f8:	3001      	adds	r0, #1
 80084fa:	f43f af54 	beq.w	80083a6 <_printf_float+0xb6>
 80084fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008502:	4543      	cmp	r3, r8
 8008504:	db02      	blt.n	800850c <_printf_float+0x21c>
 8008506:	6823      	ldr	r3, [r4, #0]
 8008508:	07d8      	lsls	r0, r3, #31
 800850a:	d50f      	bpl.n	800852c <_printf_float+0x23c>
 800850c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008510:	4631      	mov	r1, r6
 8008512:	4628      	mov	r0, r5
 8008514:	47b8      	blx	r7
 8008516:	3001      	adds	r0, #1
 8008518:	f43f af45 	beq.w	80083a6 <_printf_float+0xb6>
 800851c:	f04f 0900 	mov.w	r9, #0
 8008520:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008524:	f104 0a1a 	add.w	sl, r4, #26
 8008528:	45c8      	cmp	r8, r9
 800852a:	dc09      	bgt.n	8008540 <_printf_float+0x250>
 800852c:	6823      	ldr	r3, [r4, #0]
 800852e:	079b      	lsls	r3, r3, #30
 8008530:	f100 8103 	bmi.w	800873a <_printf_float+0x44a>
 8008534:	68e0      	ldr	r0, [r4, #12]
 8008536:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008538:	4298      	cmp	r0, r3
 800853a:	bfb8      	it	lt
 800853c:	4618      	movlt	r0, r3
 800853e:	e734      	b.n	80083aa <_printf_float+0xba>
 8008540:	2301      	movs	r3, #1
 8008542:	4652      	mov	r2, sl
 8008544:	4631      	mov	r1, r6
 8008546:	4628      	mov	r0, r5
 8008548:	47b8      	blx	r7
 800854a:	3001      	adds	r0, #1
 800854c:	f43f af2b 	beq.w	80083a6 <_printf_float+0xb6>
 8008550:	f109 0901 	add.w	r9, r9, #1
 8008554:	e7e8      	b.n	8008528 <_printf_float+0x238>
 8008556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008558:	2b00      	cmp	r3, #0
 800855a:	dc39      	bgt.n	80085d0 <_printf_float+0x2e0>
 800855c:	4a1b      	ldr	r2, [pc, #108]	@ (80085cc <_printf_float+0x2dc>)
 800855e:	2301      	movs	r3, #1
 8008560:	4631      	mov	r1, r6
 8008562:	4628      	mov	r0, r5
 8008564:	47b8      	blx	r7
 8008566:	3001      	adds	r0, #1
 8008568:	f43f af1d 	beq.w	80083a6 <_printf_float+0xb6>
 800856c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008570:	ea59 0303 	orrs.w	r3, r9, r3
 8008574:	d102      	bne.n	800857c <_printf_float+0x28c>
 8008576:	6823      	ldr	r3, [r4, #0]
 8008578:	07d9      	lsls	r1, r3, #31
 800857a:	d5d7      	bpl.n	800852c <_printf_float+0x23c>
 800857c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008580:	4631      	mov	r1, r6
 8008582:	4628      	mov	r0, r5
 8008584:	47b8      	blx	r7
 8008586:	3001      	adds	r0, #1
 8008588:	f43f af0d 	beq.w	80083a6 <_printf_float+0xb6>
 800858c:	f04f 0a00 	mov.w	sl, #0
 8008590:	f104 0b1a 	add.w	fp, r4, #26
 8008594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008596:	425b      	negs	r3, r3
 8008598:	4553      	cmp	r3, sl
 800859a:	dc01      	bgt.n	80085a0 <_printf_float+0x2b0>
 800859c:	464b      	mov	r3, r9
 800859e:	e793      	b.n	80084c8 <_printf_float+0x1d8>
 80085a0:	2301      	movs	r3, #1
 80085a2:	465a      	mov	r2, fp
 80085a4:	4631      	mov	r1, r6
 80085a6:	4628      	mov	r0, r5
 80085a8:	47b8      	blx	r7
 80085aa:	3001      	adds	r0, #1
 80085ac:	f43f aefb 	beq.w	80083a6 <_printf_float+0xb6>
 80085b0:	f10a 0a01 	add.w	sl, sl, #1
 80085b4:	e7ee      	b.n	8008594 <_printf_float+0x2a4>
 80085b6:	bf00      	nop
 80085b8:	7fefffff 	.word	0x7fefffff
 80085bc:	0800d030 	.word	0x0800d030
 80085c0:	0800d034 	.word	0x0800d034
 80085c4:	0800d038 	.word	0x0800d038
 80085c8:	0800d03c 	.word	0x0800d03c
 80085cc:	0800d040 	.word	0x0800d040
 80085d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80085d2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80085d6:	4553      	cmp	r3, sl
 80085d8:	bfa8      	it	ge
 80085da:	4653      	movge	r3, sl
 80085dc:	2b00      	cmp	r3, #0
 80085de:	4699      	mov	r9, r3
 80085e0:	dc36      	bgt.n	8008650 <_printf_float+0x360>
 80085e2:	f04f 0b00 	mov.w	fp, #0
 80085e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085ea:	f104 021a 	add.w	r2, r4, #26
 80085ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80085f0:	9306      	str	r3, [sp, #24]
 80085f2:	eba3 0309 	sub.w	r3, r3, r9
 80085f6:	455b      	cmp	r3, fp
 80085f8:	dc31      	bgt.n	800865e <_printf_float+0x36e>
 80085fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085fc:	459a      	cmp	sl, r3
 80085fe:	dc3a      	bgt.n	8008676 <_printf_float+0x386>
 8008600:	6823      	ldr	r3, [r4, #0]
 8008602:	07da      	lsls	r2, r3, #31
 8008604:	d437      	bmi.n	8008676 <_printf_float+0x386>
 8008606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008608:	ebaa 0903 	sub.w	r9, sl, r3
 800860c:	9b06      	ldr	r3, [sp, #24]
 800860e:	ebaa 0303 	sub.w	r3, sl, r3
 8008612:	4599      	cmp	r9, r3
 8008614:	bfa8      	it	ge
 8008616:	4699      	movge	r9, r3
 8008618:	f1b9 0f00 	cmp.w	r9, #0
 800861c:	dc33      	bgt.n	8008686 <_printf_float+0x396>
 800861e:	f04f 0800 	mov.w	r8, #0
 8008622:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008626:	f104 0b1a 	add.w	fp, r4, #26
 800862a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800862c:	ebaa 0303 	sub.w	r3, sl, r3
 8008630:	eba3 0309 	sub.w	r3, r3, r9
 8008634:	4543      	cmp	r3, r8
 8008636:	f77f af79 	ble.w	800852c <_printf_float+0x23c>
 800863a:	2301      	movs	r3, #1
 800863c:	465a      	mov	r2, fp
 800863e:	4631      	mov	r1, r6
 8008640:	4628      	mov	r0, r5
 8008642:	47b8      	blx	r7
 8008644:	3001      	adds	r0, #1
 8008646:	f43f aeae 	beq.w	80083a6 <_printf_float+0xb6>
 800864a:	f108 0801 	add.w	r8, r8, #1
 800864e:	e7ec      	b.n	800862a <_printf_float+0x33a>
 8008650:	4642      	mov	r2, r8
 8008652:	4631      	mov	r1, r6
 8008654:	4628      	mov	r0, r5
 8008656:	47b8      	blx	r7
 8008658:	3001      	adds	r0, #1
 800865a:	d1c2      	bne.n	80085e2 <_printf_float+0x2f2>
 800865c:	e6a3      	b.n	80083a6 <_printf_float+0xb6>
 800865e:	2301      	movs	r3, #1
 8008660:	4631      	mov	r1, r6
 8008662:	4628      	mov	r0, r5
 8008664:	9206      	str	r2, [sp, #24]
 8008666:	47b8      	blx	r7
 8008668:	3001      	adds	r0, #1
 800866a:	f43f ae9c 	beq.w	80083a6 <_printf_float+0xb6>
 800866e:	9a06      	ldr	r2, [sp, #24]
 8008670:	f10b 0b01 	add.w	fp, fp, #1
 8008674:	e7bb      	b.n	80085ee <_printf_float+0x2fe>
 8008676:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800867a:	4631      	mov	r1, r6
 800867c:	4628      	mov	r0, r5
 800867e:	47b8      	blx	r7
 8008680:	3001      	adds	r0, #1
 8008682:	d1c0      	bne.n	8008606 <_printf_float+0x316>
 8008684:	e68f      	b.n	80083a6 <_printf_float+0xb6>
 8008686:	9a06      	ldr	r2, [sp, #24]
 8008688:	464b      	mov	r3, r9
 800868a:	4442      	add	r2, r8
 800868c:	4631      	mov	r1, r6
 800868e:	4628      	mov	r0, r5
 8008690:	47b8      	blx	r7
 8008692:	3001      	adds	r0, #1
 8008694:	d1c3      	bne.n	800861e <_printf_float+0x32e>
 8008696:	e686      	b.n	80083a6 <_printf_float+0xb6>
 8008698:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800869c:	f1ba 0f01 	cmp.w	sl, #1
 80086a0:	dc01      	bgt.n	80086a6 <_printf_float+0x3b6>
 80086a2:	07db      	lsls	r3, r3, #31
 80086a4:	d536      	bpl.n	8008714 <_printf_float+0x424>
 80086a6:	2301      	movs	r3, #1
 80086a8:	4642      	mov	r2, r8
 80086aa:	4631      	mov	r1, r6
 80086ac:	4628      	mov	r0, r5
 80086ae:	47b8      	blx	r7
 80086b0:	3001      	adds	r0, #1
 80086b2:	f43f ae78 	beq.w	80083a6 <_printf_float+0xb6>
 80086b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086ba:	4631      	mov	r1, r6
 80086bc:	4628      	mov	r0, r5
 80086be:	47b8      	blx	r7
 80086c0:	3001      	adds	r0, #1
 80086c2:	f43f ae70 	beq.w	80083a6 <_printf_float+0xb6>
 80086c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80086ca:	2200      	movs	r2, #0
 80086cc:	2300      	movs	r3, #0
 80086ce:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80086d2:	f7f8 fa19 	bl	8000b08 <__aeabi_dcmpeq>
 80086d6:	b9c0      	cbnz	r0, 800870a <_printf_float+0x41a>
 80086d8:	4653      	mov	r3, sl
 80086da:	f108 0201 	add.w	r2, r8, #1
 80086de:	4631      	mov	r1, r6
 80086e0:	4628      	mov	r0, r5
 80086e2:	47b8      	blx	r7
 80086e4:	3001      	adds	r0, #1
 80086e6:	d10c      	bne.n	8008702 <_printf_float+0x412>
 80086e8:	e65d      	b.n	80083a6 <_printf_float+0xb6>
 80086ea:	2301      	movs	r3, #1
 80086ec:	465a      	mov	r2, fp
 80086ee:	4631      	mov	r1, r6
 80086f0:	4628      	mov	r0, r5
 80086f2:	47b8      	blx	r7
 80086f4:	3001      	adds	r0, #1
 80086f6:	f43f ae56 	beq.w	80083a6 <_printf_float+0xb6>
 80086fa:	f108 0801 	add.w	r8, r8, #1
 80086fe:	45d0      	cmp	r8, sl
 8008700:	dbf3      	blt.n	80086ea <_printf_float+0x3fa>
 8008702:	464b      	mov	r3, r9
 8008704:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008708:	e6df      	b.n	80084ca <_printf_float+0x1da>
 800870a:	f04f 0800 	mov.w	r8, #0
 800870e:	f104 0b1a 	add.w	fp, r4, #26
 8008712:	e7f4      	b.n	80086fe <_printf_float+0x40e>
 8008714:	2301      	movs	r3, #1
 8008716:	4642      	mov	r2, r8
 8008718:	e7e1      	b.n	80086de <_printf_float+0x3ee>
 800871a:	2301      	movs	r3, #1
 800871c:	464a      	mov	r2, r9
 800871e:	4631      	mov	r1, r6
 8008720:	4628      	mov	r0, r5
 8008722:	47b8      	blx	r7
 8008724:	3001      	adds	r0, #1
 8008726:	f43f ae3e 	beq.w	80083a6 <_printf_float+0xb6>
 800872a:	f108 0801 	add.w	r8, r8, #1
 800872e:	68e3      	ldr	r3, [r4, #12]
 8008730:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008732:	1a5b      	subs	r3, r3, r1
 8008734:	4543      	cmp	r3, r8
 8008736:	dcf0      	bgt.n	800871a <_printf_float+0x42a>
 8008738:	e6fc      	b.n	8008534 <_printf_float+0x244>
 800873a:	f04f 0800 	mov.w	r8, #0
 800873e:	f104 0919 	add.w	r9, r4, #25
 8008742:	e7f4      	b.n	800872e <_printf_float+0x43e>

08008744 <_printf_common>:
 8008744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008748:	4616      	mov	r6, r2
 800874a:	4698      	mov	r8, r3
 800874c:	688a      	ldr	r2, [r1, #8]
 800874e:	690b      	ldr	r3, [r1, #16]
 8008750:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008754:	4293      	cmp	r3, r2
 8008756:	bfb8      	it	lt
 8008758:	4613      	movlt	r3, r2
 800875a:	6033      	str	r3, [r6, #0]
 800875c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008760:	4607      	mov	r7, r0
 8008762:	460c      	mov	r4, r1
 8008764:	b10a      	cbz	r2, 800876a <_printf_common+0x26>
 8008766:	3301      	adds	r3, #1
 8008768:	6033      	str	r3, [r6, #0]
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	0699      	lsls	r1, r3, #26
 800876e:	bf42      	ittt	mi
 8008770:	6833      	ldrmi	r3, [r6, #0]
 8008772:	3302      	addmi	r3, #2
 8008774:	6033      	strmi	r3, [r6, #0]
 8008776:	6825      	ldr	r5, [r4, #0]
 8008778:	f015 0506 	ands.w	r5, r5, #6
 800877c:	d106      	bne.n	800878c <_printf_common+0x48>
 800877e:	f104 0a19 	add.w	sl, r4, #25
 8008782:	68e3      	ldr	r3, [r4, #12]
 8008784:	6832      	ldr	r2, [r6, #0]
 8008786:	1a9b      	subs	r3, r3, r2
 8008788:	42ab      	cmp	r3, r5
 800878a:	dc26      	bgt.n	80087da <_printf_common+0x96>
 800878c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008790:	6822      	ldr	r2, [r4, #0]
 8008792:	3b00      	subs	r3, #0
 8008794:	bf18      	it	ne
 8008796:	2301      	movne	r3, #1
 8008798:	0692      	lsls	r2, r2, #26
 800879a:	d42b      	bmi.n	80087f4 <_printf_common+0xb0>
 800879c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087a0:	4641      	mov	r1, r8
 80087a2:	4638      	mov	r0, r7
 80087a4:	47c8      	blx	r9
 80087a6:	3001      	adds	r0, #1
 80087a8:	d01e      	beq.n	80087e8 <_printf_common+0xa4>
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	6922      	ldr	r2, [r4, #16]
 80087ae:	f003 0306 	and.w	r3, r3, #6
 80087b2:	2b04      	cmp	r3, #4
 80087b4:	bf02      	ittt	eq
 80087b6:	68e5      	ldreq	r5, [r4, #12]
 80087b8:	6833      	ldreq	r3, [r6, #0]
 80087ba:	1aed      	subeq	r5, r5, r3
 80087bc:	68a3      	ldr	r3, [r4, #8]
 80087be:	bf0c      	ite	eq
 80087c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087c4:	2500      	movne	r5, #0
 80087c6:	4293      	cmp	r3, r2
 80087c8:	bfc4      	itt	gt
 80087ca:	1a9b      	subgt	r3, r3, r2
 80087cc:	18ed      	addgt	r5, r5, r3
 80087ce:	2600      	movs	r6, #0
 80087d0:	341a      	adds	r4, #26
 80087d2:	42b5      	cmp	r5, r6
 80087d4:	d11a      	bne.n	800880c <_printf_common+0xc8>
 80087d6:	2000      	movs	r0, #0
 80087d8:	e008      	b.n	80087ec <_printf_common+0xa8>
 80087da:	2301      	movs	r3, #1
 80087dc:	4652      	mov	r2, sl
 80087de:	4641      	mov	r1, r8
 80087e0:	4638      	mov	r0, r7
 80087e2:	47c8      	blx	r9
 80087e4:	3001      	adds	r0, #1
 80087e6:	d103      	bne.n	80087f0 <_printf_common+0xac>
 80087e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087f0:	3501      	adds	r5, #1
 80087f2:	e7c6      	b.n	8008782 <_printf_common+0x3e>
 80087f4:	18e1      	adds	r1, r4, r3
 80087f6:	1c5a      	adds	r2, r3, #1
 80087f8:	2030      	movs	r0, #48	@ 0x30
 80087fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80087fe:	4422      	add	r2, r4
 8008800:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008804:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008808:	3302      	adds	r3, #2
 800880a:	e7c7      	b.n	800879c <_printf_common+0x58>
 800880c:	2301      	movs	r3, #1
 800880e:	4622      	mov	r2, r4
 8008810:	4641      	mov	r1, r8
 8008812:	4638      	mov	r0, r7
 8008814:	47c8      	blx	r9
 8008816:	3001      	adds	r0, #1
 8008818:	d0e6      	beq.n	80087e8 <_printf_common+0xa4>
 800881a:	3601      	adds	r6, #1
 800881c:	e7d9      	b.n	80087d2 <_printf_common+0x8e>
	...

08008820 <_printf_i>:
 8008820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008824:	7e0f      	ldrb	r7, [r1, #24]
 8008826:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008828:	2f78      	cmp	r7, #120	@ 0x78
 800882a:	4691      	mov	r9, r2
 800882c:	4680      	mov	r8, r0
 800882e:	460c      	mov	r4, r1
 8008830:	469a      	mov	sl, r3
 8008832:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008836:	d807      	bhi.n	8008848 <_printf_i+0x28>
 8008838:	2f62      	cmp	r7, #98	@ 0x62
 800883a:	d80a      	bhi.n	8008852 <_printf_i+0x32>
 800883c:	2f00      	cmp	r7, #0
 800883e:	f000 80d2 	beq.w	80089e6 <_printf_i+0x1c6>
 8008842:	2f58      	cmp	r7, #88	@ 0x58
 8008844:	f000 80b9 	beq.w	80089ba <_printf_i+0x19a>
 8008848:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800884c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008850:	e03a      	b.n	80088c8 <_printf_i+0xa8>
 8008852:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008856:	2b15      	cmp	r3, #21
 8008858:	d8f6      	bhi.n	8008848 <_printf_i+0x28>
 800885a:	a101      	add	r1, pc, #4	@ (adr r1, 8008860 <_printf_i+0x40>)
 800885c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008860:	080088b9 	.word	0x080088b9
 8008864:	080088cd 	.word	0x080088cd
 8008868:	08008849 	.word	0x08008849
 800886c:	08008849 	.word	0x08008849
 8008870:	08008849 	.word	0x08008849
 8008874:	08008849 	.word	0x08008849
 8008878:	080088cd 	.word	0x080088cd
 800887c:	08008849 	.word	0x08008849
 8008880:	08008849 	.word	0x08008849
 8008884:	08008849 	.word	0x08008849
 8008888:	08008849 	.word	0x08008849
 800888c:	080089cd 	.word	0x080089cd
 8008890:	080088f7 	.word	0x080088f7
 8008894:	08008987 	.word	0x08008987
 8008898:	08008849 	.word	0x08008849
 800889c:	08008849 	.word	0x08008849
 80088a0:	080089ef 	.word	0x080089ef
 80088a4:	08008849 	.word	0x08008849
 80088a8:	080088f7 	.word	0x080088f7
 80088ac:	08008849 	.word	0x08008849
 80088b0:	08008849 	.word	0x08008849
 80088b4:	0800898f 	.word	0x0800898f
 80088b8:	6833      	ldr	r3, [r6, #0]
 80088ba:	1d1a      	adds	r2, r3, #4
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	6032      	str	r2, [r6, #0]
 80088c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088c8:	2301      	movs	r3, #1
 80088ca:	e09d      	b.n	8008a08 <_printf_i+0x1e8>
 80088cc:	6833      	ldr	r3, [r6, #0]
 80088ce:	6820      	ldr	r0, [r4, #0]
 80088d0:	1d19      	adds	r1, r3, #4
 80088d2:	6031      	str	r1, [r6, #0]
 80088d4:	0606      	lsls	r6, r0, #24
 80088d6:	d501      	bpl.n	80088dc <_printf_i+0xbc>
 80088d8:	681d      	ldr	r5, [r3, #0]
 80088da:	e003      	b.n	80088e4 <_printf_i+0xc4>
 80088dc:	0645      	lsls	r5, r0, #25
 80088de:	d5fb      	bpl.n	80088d8 <_printf_i+0xb8>
 80088e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80088e4:	2d00      	cmp	r5, #0
 80088e6:	da03      	bge.n	80088f0 <_printf_i+0xd0>
 80088e8:	232d      	movs	r3, #45	@ 0x2d
 80088ea:	426d      	negs	r5, r5
 80088ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088f0:	4859      	ldr	r0, [pc, #356]	@ (8008a58 <_printf_i+0x238>)
 80088f2:	230a      	movs	r3, #10
 80088f4:	e011      	b.n	800891a <_printf_i+0xfa>
 80088f6:	6821      	ldr	r1, [r4, #0]
 80088f8:	6833      	ldr	r3, [r6, #0]
 80088fa:	0608      	lsls	r0, r1, #24
 80088fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8008900:	d402      	bmi.n	8008908 <_printf_i+0xe8>
 8008902:	0649      	lsls	r1, r1, #25
 8008904:	bf48      	it	mi
 8008906:	b2ad      	uxthmi	r5, r5
 8008908:	2f6f      	cmp	r7, #111	@ 0x6f
 800890a:	4853      	ldr	r0, [pc, #332]	@ (8008a58 <_printf_i+0x238>)
 800890c:	6033      	str	r3, [r6, #0]
 800890e:	bf14      	ite	ne
 8008910:	230a      	movne	r3, #10
 8008912:	2308      	moveq	r3, #8
 8008914:	2100      	movs	r1, #0
 8008916:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800891a:	6866      	ldr	r6, [r4, #4]
 800891c:	60a6      	str	r6, [r4, #8]
 800891e:	2e00      	cmp	r6, #0
 8008920:	bfa2      	ittt	ge
 8008922:	6821      	ldrge	r1, [r4, #0]
 8008924:	f021 0104 	bicge.w	r1, r1, #4
 8008928:	6021      	strge	r1, [r4, #0]
 800892a:	b90d      	cbnz	r5, 8008930 <_printf_i+0x110>
 800892c:	2e00      	cmp	r6, #0
 800892e:	d04b      	beq.n	80089c8 <_printf_i+0x1a8>
 8008930:	4616      	mov	r6, r2
 8008932:	fbb5 f1f3 	udiv	r1, r5, r3
 8008936:	fb03 5711 	mls	r7, r3, r1, r5
 800893a:	5dc7      	ldrb	r7, [r0, r7]
 800893c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008940:	462f      	mov	r7, r5
 8008942:	42bb      	cmp	r3, r7
 8008944:	460d      	mov	r5, r1
 8008946:	d9f4      	bls.n	8008932 <_printf_i+0x112>
 8008948:	2b08      	cmp	r3, #8
 800894a:	d10b      	bne.n	8008964 <_printf_i+0x144>
 800894c:	6823      	ldr	r3, [r4, #0]
 800894e:	07df      	lsls	r7, r3, #31
 8008950:	d508      	bpl.n	8008964 <_printf_i+0x144>
 8008952:	6923      	ldr	r3, [r4, #16]
 8008954:	6861      	ldr	r1, [r4, #4]
 8008956:	4299      	cmp	r1, r3
 8008958:	bfde      	ittt	le
 800895a:	2330      	movle	r3, #48	@ 0x30
 800895c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008960:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008964:	1b92      	subs	r2, r2, r6
 8008966:	6122      	str	r2, [r4, #16]
 8008968:	f8cd a000 	str.w	sl, [sp]
 800896c:	464b      	mov	r3, r9
 800896e:	aa03      	add	r2, sp, #12
 8008970:	4621      	mov	r1, r4
 8008972:	4640      	mov	r0, r8
 8008974:	f7ff fee6 	bl	8008744 <_printf_common>
 8008978:	3001      	adds	r0, #1
 800897a:	d14a      	bne.n	8008a12 <_printf_i+0x1f2>
 800897c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008980:	b004      	add	sp, #16
 8008982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008986:	6823      	ldr	r3, [r4, #0]
 8008988:	f043 0320 	orr.w	r3, r3, #32
 800898c:	6023      	str	r3, [r4, #0]
 800898e:	4833      	ldr	r0, [pc, #204]	@ (8008a5c <_printf_i+0x23c>)
 8008990:	2778      	movs	r7, #120	@ 0x78
 8008992:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	6831      	ldr	r1, [r6, #0]
 800899a:	061f      	lsls	r7, r3, #24
 800899c:	f851 5b04 	ldr.w	r5, [r1], #4
 80089a0:	d402      	bmi.n	80089a8 <_printf_i+0x188>
 80089a2:	065f      	lsls	r7, r3, #25
 80089a4:	bf48      	it	mi
 80089a6:	b2ad      	uxthmi	r5, r5
 80089a8:	6031      	str	r1, [r6, #0]
 80089aa:	07d9      	lsls	r1, r3, #31
 80089ac:	bf44      	itt	mi
 80089ae:	f043 0320 	orrmi.w	r3, r3, #32
 80089b2:	6023      	strmi	r3, [r4, #0]
 80089b4:	b11d      	cbz	r5, 80089be <_printf_i+0x19e>
 80089b6:	2310      	movs	r3, #16
 80089b8:	e7ac      	b.n	8008914 <_printf_i+0xf4>
 80089ba:	4827      	ldr	r0, [pc, #156]	@ (8008a58 <_printf_i+0x238>)
 80089bc:	e7e9      	b.n	8008992 <_printf_i+0x172>
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	f023 0320 	bic.w	r3, r3, #32
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	e7f6      	b.n	80089b6 <_printf_i+0x196>
 80089c8:	4616      	mov	r6, r2
 80089ca:	e7bd      	b.n	8008948 <_printf_i+0x128>
 80089cc:	6833      	ldr	r3, [r6, #0]
 80089ce:	6825      	ldr	r5, [r4, #0]
 80089d0:	6961      	ldr	r1, [r4, #20]
 80089d2:	1d18      	adds	r0, r3, #4
 80089d4:	6030      	str	r0, [r6, #0]
 80089d6:	062e      	lsls	r6, r5, #24
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	d501      	bpl.n	80089e0 <_printf_i+0x1c0>
 80089dc:	6019      	str	r1, [r3, #0]
 80089de:	e002      	b.n	80089e6 <_printf_i+0x1c6>
 80089e0:	0668      	lsls	r0, r5, #25
 80089e2:	d5fb      	bpl.n	80089dc <_printf_i+0x1bc>
 80089e4:	8019      	strh	r1, [r3, #0]
 80089e6:	2300      	movs	r3, #0
 80089e8:	6123      	str	r3, [r4, #16]
 80089ea:	4616      	mov	r6, r2
 80089ec:	e7bc      	b.n	8008968 <_printf_i+0x148>
 80089ee:	6833      	ldr	r3, [r6, #0]
 80089f0:	1d1a      	adds	r2, r3, #4
 80089f2:	6032      	str	r2, [r6, #0]
 80089f4:	681e      	ldr	r6, [r3, #0]
 80089f6:	6862      	ldr	r2, [r4, #4]
 80089f8:	2100      	movs	r1, #0
 80089fa:	4630      	mov	r0, r6
 80089fc:	f7f7 fc08 	bl	8000210 <memchr>
 8008a00:	b108      	cbz	r0, 8008a06 <_printf_i+0x1e6>
 8008a02:	1b80      	subs	r0, r0, r6
 8008a04:	6060      	str	r0, [r4, #4]
 8008a06:	6863      	ldr	r3, [r4, #4]
 8008a08:	6123      	str	r3, [r4, #16]
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a10:	e7aa      	b.n	8008968 <_printf_i+0x148>
 8008a12:	6923      	ldr	r3, [r4, #16]
 8008a14:	4632      	mov	r2, r6
 8008a16:	4649      	mov	r1, r9
 8008a18:	4640      	mov	r0, r8
 8008a1a:	47d0      	blx	sl
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	d0ad      	beq.n	800897c <_printf_i+0x15c>
 8008a20:	6823      	ldr	r3, [r4, #0]
 8008a22:	079b      	lsls	r3, r3, #30
 8008a24:	d413      	bmi.n	8008a4e <_printf_i+0x22e>
 8008a26:	68e0      	ldr	r0, [r4, #12]
 8008a28:	9b03      	ldr	r3, [sp, #12]
 8008a2a:	4298      	cmp	r0, r3
 8008a2c:	bfb8      	it	lt
 8008a2e:	4618      	movlt	r0, r3
 8008a30:	e7a6      	b.n	8008980 <_printf_i+0x160>
 8008a32:	2301      	movs	r3, #1
 8008a34:	4632      	mov	r2, r6
 8008a36:	4649      	mov	r1, r9
 8008a38:	4640      	mov	r0, r8
 8008a3a:	47d0      	blx	sl
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	d09d      	beq.n	800897c <_printf_i+0x15c>
 8008a40:	3501      	adds	r5, #1
 8008a42:	68e3      	ldr	r3, [r4, #12]
 8008a44:	9903      	ldr	r1, [sp, #12]
 8008a46:	1a5b      	subs	r3, r3, r1
 8008a48:	42ab      	cmp	r3, r5
 8008a4a:	dcf2      	bgt.n	8008a32 <_printf_i+0x212>
 8008a4c:	e7eb      	b.n	8008a26 <_printf_i+0x206>
 8008a4e:	2500      	movs	r5, #0
 8008a50:	f104 0619 	add.w	r6, r4, #25
 8008a54:	e7f5      	b.n	8008a42 <_printf_i+0x222>
 8008a56:	bf00      	nop
 8008a58:	0800d042 	.word	0x0800d042
 8008a5c:	0800d053 	.word	0x0800d053

08008a60 <_scanf_float>:
 8008a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a64:	b087      	sub	sp, #28
 8008a66:	4617      	mov	r7, r2
 8008a68:	9303      	str	r3, [sp, #12]
 8008a6a:	688b      	ldr	r3, [r1, #8]
 8008a6c:	1e5a      	subs	r2, r3, #1
 8008a6e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008a72:	bf81      	itttt	hi
 8008a74:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008a78:	eb03 0b05 	addhi.w	fp, r3, r5
 8008a7c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008a80:	608b      	strhi	r3, [r1, #8]
 8008a82:	680b      	ldr	r3, [r1, #0]
 8008a84:	460a      	mov	r2, r1
 8008a86:	f04f 0500 	mov.w	r5, #0
 8008a8a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008a8e:	f842 3b1c 	str.w	r3, [r2], #28
 8008a92:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008a96:	4680      	mov	r8, r0
 8008a98:	460c      	mov	r4, r1
 8008a9a:	bf98      	it	ls
 8008a9c:	f04f 0b00 	movls.w	fp, #0
 8008aa0:	9201      	str	r2, [sp, #4]
 8008aa2:	4616      	mov	r6, r2
 8008aa4:	46aa      	mov	sl, r5
 8008aa6:	46a9      	mov	r9, r5
 8008aa8:	9502      	str	r5, [sp, #8]
 8008aaa:	68a2      	ldr	r2, [r4, #8]
 8008aac:	b152      	cbz	r2, 8008ac4 <_scanf_float+0x64>
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	2b4e      	cmp	r3, #78	@ 0x4e
 8008ab4:	d864      	bhi.n	8008b80 <_scanf_float+0x120>
 8008ab6:	2b40      	cmp	r3, #64	@ 0x40
 8008ab8:	d83c      	bhi.n	8008b34 <_scanf_float+0xd4>
 8008aba:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008abe:	b2c8      	uxtb	r0, r1
 8008ac0:	280e      	cmp	r0, #14
 8008ac2:	d93a      	bls.n	8008b3a <_scanf_float+0xda>
 8008ac4:	f1b9 0f00 	cmp.w	r9, #0
 8008ac8:	d003      	beq.n	8008ad2 <_scanf_float+0x72>
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ad0:	6023      	str	r3, [r4, #0]
 8008ad2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008ad6:	f1ba 0f01 	cmp.w	sl, #1
 8008ada:	f200 8117 	bhi.w	8008d0c <_scanf_float+0x2ac>
 8008ade:	9b01      	ldr	r3, [sp, #4]
 8008ae0:	429e      	cmp	r6, r3
 8008ae2:	f200 8108 	bhi.w	8008cf6 <_scanf_float+0x296>
 8008ae6:	2001      	movs	r0, #1
 8008ae8:	b007      	add	sp, #28
 8008aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aee:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008af2:	2a0d      	cmp	r2, #13
 8008af4:	d8e6      	bhi.n	8008ac4 <_scanf_float+0x64>
 8008af6:	a101      	add	r1, pc, #4	@ (adr r1, 8008afc <_scanf_float+0x9c>)
 8008af8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008afc:	08008c43 	.word	0x08008c43
 8008b00:	08008ac5 	.word	0x08008ac5
 8008b04:	08008ac5 	.word	0x08008ac5
 8008b08:	08008ac5 	.word	0x08008ac5
 8008b0c:	08008ca3 	.word	0x08008ca3
 8008b10:	08008c7b 	.word	0x08008c7b
 8008b14:	08008ac5 	.word	0x08008ac5
 8008b18:	08008ac5 	.word	0x08008ac5
 8008b1c:	08008c51 	.word	0x08008c51
 8008b20:	08008ac5 	.word	0x08008ac5
 8008b24:	08008ac5 	.word	0x08008ac5
 8008b28:	08008ac5 	.word	0x08008ac5
 8008b2c:	08008ac5 	.word	0x08008ac5
 8008b30:	08008c09 	.word	0x08008c09
 8008b34:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008b38:	e7db      	b.n	8008af2 <_scanf_float+0x92>
 8008b3a:	290e      	cmp	r1, #14
 8008b3c:	d8c2      	bhi.n	8008ac4 <_scanf_float+0x64>
 8008b3e:	a001      	add	r0, pc, #4	@ (adr r0, 8008b44 <_scanf_float+0xe4>)
 8008b40:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008b44:	08008bf9 	.word	0x08008bf9
 8008b48:	08008ac5 	.word	0x08008ac5
 8008b4c:	08008bf9 	.word	0x08008bf9
 8008b50:	08008c8f 	.word	0x08008c8f
 8008b54:	08008ac5 	.word	0x08008ac5
 8008b58:	08008ba1 	.word	0x08008ba1
 8008b5c:	08008bdf 	.word	0x08008bdf
 8008b60:	08008bdf 	.word	0x08008bdf
 8008b64:	08008bdf 	.word	0x08008bdf
 8008b68:	08008bdf 	.word	0x08008bdf
 8008b6c:	08008bdf 	.word	0x08008bdf
 8008b70:	08008bdf 	.word	0x08008bdf
 8008b74:	08008bdf 	.word	0x08008bdf
 8008b78:	08008bdf 	.word	0x08008bdf
 8008b7c:	08008bdf 	.word	0x08008bdf
 8008b80:	2b6e      	cmp	r3, #110	@ 0x6e
 8008b82:	d809      	bhi.n	8008b98 <_scanf_float+0x138>
 8008b84:	2b60      	cmp	r3, #96	@ 0x60
 8008b86:	d8b2      	bhi.n	8008aee <_scanf_float+0x8e>
 8008b88:	2b54      	cmp	r3, #84	@ 0x54
 8008b8a:	d07b      	beq.n	8008c84 <_scanf_float+0x224>
 8008b8c:	2b59      	cmp	r3, #89	@ 0x59
 8008b8e:	d199      	bne.n	8008ac4 <_scanf_float+0x64>
 8008b90:	2d07      	cmp	r5, #7
 8008b92:	d197      	bne.n	8008ac4 <_scanf_float+0x64>
 8008b94:	2508      	movs	r5, #8
 8008b96:	e02c      	b.n	8008bf2 <_scanf_float+0x192>
 8008b98:	2b74      	cmp	r3, #116	@ 0x74
 8008b9a:	d073      	beq.n	8008c84 <_scanf_float+0x224>
 8008b9c:	2b79      	cmp	r3, #121	@ 0x79
 8008b9e:	e7f6      	b.n	8008b8e <_scanf_float+0x12e>
 8008ba0:	6821      	ldr	r1, [r4, #0]
 8008ba2:	05c8      	lsls	r0, r1, #23
 8008ba4:	d51b      	bpl.n	8008bde <_scanf_float+0x17e>
 8008ba6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008baa:	6021      	str	r1, [r4, #0]
 8008bac:	f109 0901 	add.w	r9, r9, #1
 8008bb0:	f1bb 0f00 	cmp.w	fp, #0
 8008bb4:	d003      	beq.n	8008bbe <_scanf_float+0x15e>
 8008bb6:	3201      	adds	r2, #1
 8008bb8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8008bbc:	60a2      	str	r2, [r4, #8]
 8008bbe:	68a3      	ldr	r3, [r4, #8]
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	60a3      	str	r3, [r4, #8]
 8008bc4:	6923      	ldr	r3, [r4, #16]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	6123      	str	r3, [r4, #16]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	607b      	str	r3, [r7, #4]
 8008bd2:	f340 8087 	ble.w	8008ce4 <_scanf_float+0x284>
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	603b      	str	r3, [r7, #0]
 8008bdc:	e765      	b.n	8008aaa <_scanf_float+0x4a>
 8008bde:	eb1a 0105 	adds.w	r1, sl, r5
 8008be2:	f47f af6f 	bne.w	8008ac4 <_scanf_float+0x64>
 8008be6:	6822      	ldr	r2, [r4, #0]
 8008be8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008bec:	6022      	str	r2, [r4, #0]
 8008bee:	460d      	mov	r5, r1
 8008bf0:	468a      	mov	sl, r1
 8008bf2:	f806 3b01 	strb.w	r3, [r6], #1
 8008bf6:	e7e2      	b.n	8008bbe <_scanf_float+0x15e>
 8008bf8:	6822      	ldr	r2, [r4, #0]
 8008bfa:	0610      	lsls	r0, r2, #24
 8008bfc:	f57f af62 	bpl.w	8008ac4 <_scanf_float+0x64>
 8008c00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c04:	6022      	str	r2, [r4, #0]
 8008c06:	e7f4      	b.n	8008bf2 <_scanf_float+0x192>
 8008c08:	f1ba 0f00 	cmp.w	sl, #0
 8008c0c:	d10e      	bne.n	8008c2c <_scanf_float+0x1cc>
 8008c0e:	f1b9 0f00 	cmp.w	r9, #0
 8008c12:	d10e      	bne.n	8008c32 <_scanf_float+0x1d2>
 8008c14:	6822      	ldr	r2, [r4, #0]
 8008c16:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008c1a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008c1e:	d108      	bne.n	8008c32 <_scanf_float+0x1d2>
 8008c20:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c24:	6022      	str	r2, [r4, #0]
 8008c26:	f04f 0a01 	mov.w	sl, #1
 8008c2a:	e7e2      	b.n	8008bf2 <_scanf_float+0x192>
 8008c2c:	f1ba 0f02 	cmp.w	sl, #2
 8008c30:	d055      	beq.n	8008cde <_scanf_float+0x27e>
 8008c32:	2d01      	cmp	r5, #1
 8008c34:	d002      	beq.n	8008c3c <_scanf_float+0x1dc>
 8008c36:	2d04      	cmp	r5, #4
 8008c38:	f47f af44 	bne.w	8008ac4 <_scanf_float+0x64>
 8008c3c:	3501      	adds	r5, #1
 8008c3e:	b2ed      	uxtb	r5, r5
 8008c40:	e7d7      	b.n	8008bf2 <_scanf_float+0x192>
 8008c42:	f1ba 0f01 	cmp.w	sl, #1
 8008c46:	f47f af3d 	bne.w	8008ac4 <_scanf_float+0x64>
 8008c4a:	f04f 0a02 	mov.w	sl, #2
 8008c4e:	e7d0      	b.n	8008bf2 <_scanf_float+0x192>
 8008c50:	b97d      	cbnz	r5, 8008c72 <_scanf_float+0x212>
 8008c52:	f1b9 0f00 	cmp.w	r9, #0
 8008c56:	f47f af38 	bne.w	8008aca <_scanf_float+0x6a>
 8008c5a:	6822      	ldr	r2, [r4, #0]
 8008c5c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008c60:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008c64:	f040 8108 	bne.w	8008e78 <_scanf_float+0x418>
 8008c68:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c6c:	6022      	str	r2, [r4, #0]
 8008c6e:	2501      	movs	r5, #1
 8008c70:	e7bf      	b.n	8008bf2 <_scanf_float+0x192>
 8008c72:	2d03      	cmp	r5, #3
 8008c74:	d0e2      	beq.n	8008c3c <_scanf_float+0x1dc>
 8008c76:	2d05      	cmp	r5, #5
 8008c78:	e7de      	b.n	8008c38 <_scanf_float+0x1d8>
 8008c7a:	2d02      	cmp	r5, #2
 8008c7c:	f47f af22 	bne.w	8008ac4 <_scanf_float+0x64>
 8008c80:	2503      	movs	r5, #3
 8008c82:	e7b6      	b.n	8008bf2 <_scanf_float+0x192>
 8008c84:	2d06      	cmp	r5, #6
 8008c86:	f47f af1d 	bne.w	8008ac4 <_scanf_float+0x64>
 8008c8a:	2507      	movs	r5, #7
 8008c8c:	e7b1      	b.n	8008bf2 <_scanf_float+0x192>
 8008c8e:	6822      	ldr	r2, [r4, #0]
 8008c90:	0591      	lsls	r1, r2, #22
 8008c92:	f57f af17 	bpl.w	8008ac4 <_scanf_float+0x64>
 8008c96:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008c9a:	6022      	str	r2, [r4, #0]
 8008c9c:	f8cd 9008 	str.w	r9, [sp, #8]
 8008ca0:	e7a7      	b.n	8008bf2 <_scanf_float+0x192>
 8008ca2:	6822      	ldr	r2, [r4, #0]
 8008ca4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008ca8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008cac:	d006      	beq.n	8008cbc <_scanf_float+0x25c>
 8008cae:	0550      	lsls	r0, r2, #21
 8008cb0:	f57f af08 	bpl.w	8008ac4 <_scanf_float+0x64>
 8008cb4:	f1b9 0f00 	cmp.w	r9, #0
 8008cb8:	f000 80de 	beq.w	8008e78 <_scanf_float+0x418>
 8008cbc:	0591      	lsls	r1, r2, #22
 8008cbe:	bf58      	it	pl
 8008cc0:	9902      	ldrpl	r1, [sp, #8]
 8008cc2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008cc6:	bf58      	it	pl
 8008cc8:	eba9 0101 	subpl.w	r1, r9, r1
 8008ccc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008cd0:	bf58      	it	pl
 8008cd2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008cd6:	6022      	str	r2, [r4, #0]
 8008cd8:	f04f 0900 	mov.w	r9, #0
 8008cdc:	e789      	b.n	8008bf2 <_scanf_float+0x192>
 8008cde:	f04f 0a03 	mov.w	sl, #3
 8008ce2:	e786      	b.n	8008bf2 <_scanf_float+0x192>
 8008ce4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008ce8:	4639      	mov	r1, r7
 8008cea:	4640      	mov	r0, r8
 8008cec:	4798      	blx	r3
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	f43f aedb 	beq.w	8008aaa <_scanf_float+0x4a>
 8008cf4:	e6e6      	b.n	8008ac4 <_scanf_float+0x64>
 8008cf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008cfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008cfe:	463a      	mov	r2, r7
 8008d00:	4640      	mov	r0, r8
 8008d02:	4798      	blx	r3
 8008d04:	6923      	ldr	r3, [r4, #16]
 8008d06:	3b01      	subs	r3, #1
 8008d08:	6123      	str	r3, [r4, #16]
 8008d0a:	e6e8      	b.n	8008ade <_scanf_float+0x7e>
 8008d0c:	1e6b      	subs	r3, r5, #1
 8008d0e:	2b06      	cmp	r3, #6
 8008d10:	d824      	bhi.n	8008d5c <_scanf_float+0x2fc>
 8008d12:	2d02      	cmp	r5, #2
 8008d14:	d836      	bhi.n	8008d84 <_scanf_float+0x324>
 8008d16:	9b01      	ldr	r3, [sp, #4]
 8008d18:	429e      	cmp	r6, r3
 8008d1a:	f67f aee4 	bls.w	8008ae6 <_scanf_float+0x86>
 8008d1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d26:	463a      	mov	r2, r7
 8008d28:	4640      	mov	r0, r8
 8008d2a:	4798      	blx	r3
 8008d2c:	6923      	ldr	r3, [r4, #16]
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	6123      	str	r3, [r4, #16]
 8008d32:	e7f0      	b.n	8008d16 <_scanf_float+0x2b6>
 8008d34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d38:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008d3c:	463a      	mov	r2, r7
 8008d3e:	4640      	mov	r0, r8
 8008d40:	4798      	blx	r3
 8008d42:	6923      	ldr	r3, [r4, #16]
 8008d44:	3b01      	subs	r3, #1
 8008d46:	6123      	str	r3, [r4, #16]
 8008d48:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008d4c:	fa5f fa8a 	uxtb.w	sl, sl
 8008d50:	f1ba 0f02 	cmp.w	sl, #2
 8008d54:	d1ee      	bne.n	8008d34 <_scanf_float+0x2d4>
 8008d56:	3d03      	subs	r5, #3
 8008d58:	b2ed      	uxtb	r5, r5
 8008d5a:	1b76      	subs	r6, r6, r5
 8008d5c:	6823      	ldr	r3, [r4, #0]
 8008d5e:	05da      	lsls	r2, r3, #23
 8008d60:	d530      	bpl.n	8008dc4 <_scanf_float+0x364>
 8008d62:	055b      	lsls	r3, r3, #21
 8008d64:	d511      	bpl.n	8008d8a <_scanf_float+0x32a>
 8008d66:	9b01      	ldr	r3, [sp, #4]
 8008d68:	429e      	cmp	r6, r3
 8008d6a:	f67f aebc 	bls.w	8008ae6 <_scanf_float+0x86>
 8008d6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d76:	463a      	mov	r2, r7
 8008d78:	4640      	mov	r0, r8
 8008d7a:	4798      	blx	r3
 8008d7c:	6923      	ldr	r3, [r4, #16]
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	6123      	str	r3, [r4, #16]
 8008d82:	e7f0      	b.n	8008d66 <_scanf_float+0x306>
 8008d84:	46aa      	mov	sl, r5
 8008d86:	46b3      	mov	fp, r6
 8008d88:	e7de      	b.n	8008d48 <_scanf_float+0x2e8>
 8008d8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008d8e:	6923      	ldr	r3, [r4, #16]
 8008d90:	2965      	cmp	r1, #101	@ 0x65
 8008d92:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008d96:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8008d9a:	6123      	str	r3, [r4, #16]
 8008d9c:	d00c      	beq.n	8008db8 <_scanf_float+0x358>
 8008d9e:	2945      	cmp	r1, #69	@ 0x45
 8008da0:	d00a      	beq.n	8008db8 <_scanf_float+0x358>
 8008da2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008da6:	463a      	mov	r2, r7
 8008da8:	4640      	mov	r0, r8
 8008daa:	4798      	blx	r3
 8008dac:	6923      	ldr	r3, [r4, #16]
 8008dae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008db2:	3b01      	subs	r3, #1
 8008db4:	1eb5      	subs	r5, r6, #2
 8008db6:	6123      	str	r3, [r4, #16]
 8008db8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008dbc:	463a      	mov	r2, r7
 8008dbe:	4640      	mov	r0, r8
 8008dc0:	4798      	blx	r3
 8008dc2:	462e      	mov	r6, r5
 8008dc4:	6822      	ldr	r2, [r4, #0]
 8008dc6:	f012 0210 	ands.w	r2, r2, #16
 8008dca:	d001      	beq.n	8008dd0 <_scanf_float+0x370>
 8008dcc:	2000      	movs	r0, #0
 8008dce:	e68b      	b.n	8008ae8 <_scanf_float+0x88>
 8008dd0:	7032      	strb	r2, [r6, #0]
 8008dd2:	6823      	ldr	r3, [r4, #0]
 8008dd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008dd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ddc:	d11c      	bne.n	8008e18 <_scanf_float+0x3b8>
 8008dde:	9b02      	ldr	r3, [sp, #8]
 8008de0:	454b      	cmp	r3, r9
 8008de2:	eba3 0209 	sub.w	r2, r3, r9
 8008de6:	d123      	bne.n	8008e30 <_scanf_float+0x3d0>
 8008de8:	9901      	ldr	r1, [sp, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	4640      	mov	r0, r8
 8008dee:	f002 fc6b 	bl	800b6c8 <_strtod_r>
 8008df2:	9b03      	ldr	r3, [sp, #12]
 8008df4:	6821      	ldr	r1, [r4, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f011 0f02 	tst.w	r1, #2
 8008dfc:	ec57 6b10 	vmov	r6, r7, d0
 8008e00:	f103 0204 	add.w	r2, r3, #4
 8008e04:	d01f      	beq.n	8008e46 <_scanf_float+0x3e6>
 8008e06:	9903      	ldr	r1, [sp, #12]
 8008e08:	600a      	str	r2, [r1, #0]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	e9c3 6700 	strd	r6, r7, [r3]
 8008e10:	68e3      	ldr	r3, [r4, #12]
 8008e12:	3301      	adds	r3, #1
 8008e14:	60e3      	str	r3, [r4, #12]
 8008e16:	e7d9      	b.n	8008dcc <_scanf_float+0x36c>
 8008e18:	9b04      	ldr	r3, [sp, #16]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d0e4      	beq.n	8008de8 <_scanf_float+0x388>
 8008e1e:	9905      	ldr	r1, [sp, #20]
 8008e20:	230a      	movs	r3, #10
 8008e22:	3101      	adds	r1, #1
 8008e24:	4640      	mov	r0, r8
 8008e26:	f002 fccf 	bl	800b7c8 <_strtol_r>
 8008e2a:	9b04      	ldr	r3, [sp, #16]
 8008e2c:	9e05      	ldr	r6, [sp, #20]
 8008e2e:	1ac2      	subs	r2, r0, r3
 8008e30:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008e34:	429e      	cmp	r6, r3
 8008e36:	bf28      	it	cs
 8008e38:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008e3c:	4910      	ldr	r1, [pc, #64]	@ (8008e80 <_scanf_float+0x420>)
 8008e3e:	4630      	mov	r0, r6
 8008e40:	f000 f954 	bl	80090ec <siprintf>
 8008e44:	e7d0      	b.n	8008de8 <_scanf_float+0x388>
 8008e46:	f011 0f04 	tst.w	r1, #4
 8008e4a:	9903      	ldr	r1, [sp, #12]
 8008e4c:	600a      	str	r2, [r1, #0]
 8008e4e:	d1dc      	bne.n	8008e0a <_scanf_float+0x3aa>
 8008e50:	681d      	ldr	r5, [r3, #0]
 8008e52:	4632      	mov	r2, r6
 8008e54:	463b      	mov	r3, r7
 8008e56:	4630      	mov	r0, r6
 8008e58:	4639      	mov	r1, r7
 8008e5a:	f7f7 fe87 	bl	8000b6c <__aeabi_dcmpun>
 8008e5e:	b128      	cbz	r0, 8008e6c <_scanf_float+0x40c>
 8008e60:	4808      	ldr	r0, [pc, #32]	@ (8008e84 <_scanf_float+0x424>)
 8008e62:	f000 fadd 	bl	8009420 <nanf>
 8008e66:	ed85 0a00 	vstr	s0, [r5]
 8008e6a:	e7d1      	b.n	8008e10 <_scanf_float+0x3b0>
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	4639      	mov	r1, r7
 8008e70:	f7f7 feda 	bl	8000c28 <__aeabi_d2f>
 8008e74:	6028      	str	r0, [r5, #0]
 8008e76:	e7cb      	b.n	8008e10 <_scanf_float+0x3b0>
 8008e78:	f04f 0900 	mov.w	r9, #0
 8008e7c:	e629      	b.n	8008ad2 <_scanf_float+0x72>
 8008e7e:	bf00      	nop
 8008e80:	0800d064 	.word	0x0800d064
 8008e84:	0800d3fd 	.word	0x0800d3fd

08008e88 <std>:
 8008e88:	2300      	movs	r3, #0
 8008e8a:	b510      	push	{r4, lr}
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	e9c0 3300 	strd	r3, r3, [r0]
 8008e92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e96:	6083      	str	r3, [r0, #8]
 8008e98:	8181      	strh	r1, [r0, #12]
 8008e9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008e9c:	81c2      	strh	r2, [r0, #14]
 8008e9e:	6183      	str	r3, [r0, #24]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	2208      	movs	r2, #8
 8008ea4:	305c      	adds	r0, #92	@ 0x5c
 8008ea6:	f000 fa19 	bl	80092dc <memset>
 8008eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8008ee0 <std+0x58>)
 8008eac:	6263      	str	r3, [r4, #36]	@ 0x24
 8008eae:	4b0d      	ldr	r3, [pc, #52]	@ (8008ee4 <std+0x5c>)
 8008eb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ee8 <std+0x60>)
 8008eb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8008eec <std+0x64>)
 8008eb8:	6323      	str	r3, [r4, #48]	@ 0x30
 8008eba:	4b0d      	ldr	r3, [pc, #52]	@ (8008ef0 <std+0x68>)
 8008ebc:	6224      	str	r4, [r4, #32]
 8008ebe:	429c      	cmp	r4, r3
 8008ec0:	d006      	beq.n	8008ed0 <std+0x48>
 8008ec2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008ec6:	4294      	cmp	r4, r2
 8008ec8:	d002      	beq.n	8008ed0 <std+0x48>
 8008eca:	33d0      	adds	r3, #208	@ 0xd0
 8008ecc:	429c      	cmp	r4, r3
 8008ece:	d105      	bne.n	8008edc <std+0x54>
 8008ed0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ed8:	f000 ba9e 	b.w	8009418 <__retarget_lock_init_recursive>
 8008edc:	bd10      	pop	{r4, pc}
 8008ede:	bf00      	nop
 8008ee0:	0800912d 	.word	0x0800912d
 8008ee4:	0800914f 	.word	0x0800914f
 8008ee8:	08009187 	.word	0x08009187
 8008eec:	080091ab 	.word	0x080091ab
 8008ef0:	20000434 	.word	0x20000434

08008ef4 <stdio_exit_handler>:
 8008ef4:	4a02      	ldr	r2, [pc, #8]	@ (8008f00 <stdio_exit_handler+0xc>)
 8008ef6:	4903      	ldr	r1, [pc, #12]	@ (8008f04 <stdio_exit_handler+0x10>)
 8008ef8:	4803      	ldr	r0, [pc, #12]	@ (8008f08 <stdio_exit_handler+0x14>)
 8008efa:	f000 b869 	b.w	8008fd0 <_fwalk_sglue>
 8008efe:	bf00      	nop
 8008f00:	2000000c 	.word	0x2000000c
 8008f04:	0800be09 	.word	0x0800be09
 8008f08:	2000001c 	.word	0x2000001c

08008f0c <cleanup_stdio>:
 8008f0c:	6841      	ldr	r1, [r0, #4]
 8008f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8008f40 <cleanup_stdio+0x34>)
 8008f10:	4299      	cmp	r1, r3
 8008f12:	b510      	push	{r4, lr}
 8008f14:	4604      	mov	r4, r0
 8008f16:	d001      	beq.n	8008f1c <cleanup_stdio+0x10>
 8008f18:	f002 ff76 	bl	800be08 <_fflush_r>
 8008f1c:	68a1      	ldr	r1, [r4, #8]
 8008f1e:	4b09      	ldr	r3, [pc, #36]	@ (8008f44 <cleanup_stdio+0x38>)
 8008f20:	4299      	cmp	r1, r3
 8008f22:	d002      	beq.n	8008f2a <cleanup_stdio+0x1e>
 8008f24:	4620      	mov	r0, r4
 8008f26:	f002 ff6f 	bl	800be08 <_fflush_r>
 8008f2a:	68e1      	ldr	r1, [r4, #12]
 8008f2c:	4b06      	ldr	r3, [pc, #24]	@ (8008f48 <cleanup_stdio+0x3c>)
 8008f2e:	4299      	cmp	r1, r3
 8008f30:	d004      	beq.n	8008f3c <cleanup_stdio+0x30>
 8008f32:	4620      	mov	r0, r4
 8008f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f38:	f002 bf66 	b.w	800be08 <_fflush_r>
 8008f3c:	bd10      	pop	{r4, pc}
 8008f3e:	bf00      	nop
 8008f40:	20000434 	.word	0x20000434
 8008f44:	2000049c 	.word	0x2000049c
 8008f48:	20000504 	.word	0x20000504

08008f4c <global_stdio_init.part.0>:
 8008f4c:	b510      	push	{r4, lr}
 8008f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8008f7c <global_stdio_init.part.0+0x30>)
 8008f50:	4c0b      	ldr	r4, [pc, #44]	@ (8008f80 <global_stdio_init.part.0+0x34>)
 8008f52:	4a0c      	ldr	r2, [pc, #48]	@ (8008f84 <global_stdio_init.part.0+0x38>)
 8008f54:	601a      	str	r2, [r3, #0]
 8008f56:	4620      	mov	r0, r4
 8008f58:	2200      	movs	r2, #0
 8008f5a:	2104      	movs	r1, #4
 8008f5c:	f7ff ff94 	bl	8008e88 <std>
 8008f60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008f64:	2201      	movs	r2, #1
 8008f66:	2109      	movs	r1, #9
 8008f68:	f7ff ff8e 	bl	8008e88 <std>
 8008f6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008f70:	2202      	movs	r2, #2
 8008f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f76:	2112      	movs	r1, #18
 8008f78:	f7ff bf86 	b.w	8008e88 <std>
 8008f7c:	2000056c 	.word	0x2000056c
 8008f80:	20000434 	.word	0x20000434
 8008f84:	08008ef5 	.word	0x08008ef5

08008f88 <__sfp_lock_acquire>:
 8008f88:	4801      	ldr	r0, [pc, #4]	@ (8008f90 <__sfp_lock_acquire+0x8>)
 8008f8a:	f000 ba46 	b.w	800941a <__retarget_lock_acquire_recursive>
 8008f8e:	bf00      	nop
 8008f90:	20000575 	.word	0x20000575

08008f94 <__sfp_lock_release>:
 8008f94:	4801      	ldr	r0, [pc, #4]	@ (8008f9c <__sfp_lock_release+0x8>)
 8008f96:	f000 ba41 	b.w	800941c <__retarget_lock_release_recursive>
 8008f9a:	bf00      	nop
 8008f9c:	20000575 	.word	0x20000575

08008fa0 <__sinit>:
 8008fa0:	b510      	push	{r4, lr}
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	f7ff fff0 	bl	8008f88 <__sfp_lock_acquire>
 8008fa8:	6a23      	ldr	r3, [r4, #32]
 8008faa:	b11b      	cbz	r3, 8008fb4 <__sinit+0x14>
 8008fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fb0:	f7ff bff0 	b.w	8008f94 <__sfp_lock_release>
 8008fb4:	4b04      	ldr	r3, [pc, #16]	@ (8008fc8 <__sinit+0x28>)
 8008fb6:	6223      	str	r3, [r4, #32]
 8008fb8:	4b04      	ldr	r3, [pc, #16]	@ (8008fcc <__sinit+0x2c>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1f5      	bne.n	8008fac <__sinit+0xc>
 8008fc0:	f7ff ffc4 	bl	8008f4c <global_stdio_init.part.0>
 8008fc4:	e7f2      	b.n	8008fac <__sinit+0xc>
 8008fc6:	bf00      	nop
 8008fc8:	08008f0d 	.word	0x08008f0d
 8008fcc:	2000056c 	.word	0x2000056c

08008fd0 <_fwalk_sglue>:
 8008fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fd4:	4607      	mov	r7, r0
 8008fd6:	4688      	mov	r8, r1
 8008fd8:	4614      	mov	r4, r2
 8008fda:	2600      	movs	r6, #0
 8008fdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fe0:	f1b9 0901 	subs.w	r9, r9, #1
 8008fe4:	d505      	bpl.n	8008ff2 <_fwalk_sglue+0x22>
 8008fe6:	6824      	ldr	r4, [r4, #0]
 8008fe8:	2c00      	cmp	r4, #0
 8008fea:	d1f7      	bne.n	8008fdc <_fwalk_sglue+0xc>
 8008fec:	4630      	mov	r0, r6
 8008fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ff2:	89ab      	ldrh	r3, [r5, #12]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d907      	bls.n	8009008 <_fwalk_sglue+0x38>
 8008ff8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	d003      	beq.n	8009008 <_fwalk_sglue+0x38>
 8009000:	4629      	mov	r1, r5
 8009002:	4638      	mov	r0, r7
 8009004:	47c0      	blx	r8
 8009006:	4306      	orrs	r6, r0
 8009008:	3568      	adds	r5, #104	@ 0x68
 800900a:	e7e9      	b.n	8008fe0 <_fwalk_sglue+0x10>

0800900c <iprintf>:
 800900c:	b40f      	push	{r0, r1, r2, r3}
 800900e:	b507      	push	{r0, r1, r2, lr}
 8009010:	4906      	ldr	r1, [pc, #24]	@ (800902c <iprintf+0x20>)
 8009012:	ab04      	add	r3, sp, #16
 8009014:	6808      	ldr	r0, [r1, #0]
 8009016:	f853 2b04 	ldr.w	r2, [r3], #4
 800901a:	6881      	ldr	r1, [r0, #8]
 800901c:	9301      	str	r3, [sp, #4]
 800901e:	f002 fd57 	bl	800bad0 <_vfiprintf_r>
 8009022:	b003      	add	sp, #12
 8009024:	f85d eb04 	ldr.w	lr, [sp], #4
 8009028:	b004      	add	sp, #16
 800902a:	4770      	bx	lr
 800902c:	20000018 	.word	0x20000018

08009030 <_puts_r>:
 8009030:	6a03      	ldr	r3, [r0, #32]
 8009032:	b570      	push	{r4, r5, r6, lr}
 8009034:	6884      	ldr	r4, [r0, #8]
 8009036:	4605      	mov	r5, r0
 8009038:	460e      	mov	r6, r1
 800903a:	b90b      	cbnz	r3, 8009040 <_puts_r+0x10>
 800903c:	f7ff ffb0 	bl	8008fa0 <__sinit>
 8009040:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009042:	07db      	lsls	r3, r3, #31
 8009044:	d405      	bmi.n	8009052 <_puts_r+0x22>
 8009046:	89a3      	ldrh	r3, [r4, #12]
 8009048:	0598      	lsls	r0, r3, #22
 800904a:	d402      	bmi.n	8009052 <_puts_r+0x22>
 800904c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800904e:	f000 f9e4 	bl	800941a <__retarget_lock_acquire_recursive>
 8009052:	89a3      	ldrh	r3, [r4, #12]
 8009054:	0719      	lsls	r1, r3, #28
 8009056:	d502      	bpl.n	800905e <_puts_r+0x2e>
 8009058:	6923      	ldr	r3, [r4, #16]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d135      	bne.n	80090ca <_puts_r+0x9a>
 800905e:	4621      	mov	r1, r4
 8009060:	4628      	mov	r0, r5
 8009062:	f000 f8e5 	bl	8009230 <__swsetup_r>
 8009066:	b380      	cbz	r0, 80090ca <_puts_r+0x9a>
 8009068:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800906c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800906e:	07da      	lsls	r2, r3, #31
 8009070:	d405      	bmi.n	800907e <_puts_r+0x4e>
 8009072:	89a3      	ldrh	r3, [r4, #12]
 8009074:	059b      	lsls	r3, r3, #22
 8009076:	d402      	bmi.n	800907e <_puts_r+0x4e>
 8009078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800907a:	f000 f9cf 	bl	800941c <__retarget_lock_release_recursive>
 800907e:	4628      	mov	r0, r5
 8009080:	bd70      	pop	{r4, r5, r6, pc}
 8009082:	2b00      	cmp	r3, #0
 8009084:	da04      	bge.n	8009090 <_puts_r+0x60>
 8009086:	69a2      	ldr	r2, [r4, #24]
 8009088:	429a      	cmp	r2, r3
 800908a:	dc17      	bgt.n	80090bc <_puts_r+0x8c>
 800908c:	290a      	cmp	r1, #10
 800908e:	d015      	beq.n	80090bc <_puts_r+0x8c>
 8009090:	6823      	ldr	r3, [r4, #0]
 8009092:	1c5a      	adds	r2, r3, #1
 8009094:	6022      	str	r2, [r4, #0]
 8009096:	7019      	strb	r1, [r3, #0]
 8009098:	68a3      	ldr	r3, [r4, #8]
 800909a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800909e:	3b01      	subs	r3, #1
 80090a0:	60a3      	str	r3, [r4, #8]
 80090a2:	2900      	cmp	r1, #0
 80090a4:	d1ed      	bne.n	8009082 <_puts_r+0x52>
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	da11      	bge.n	80090ce <_puts_r+0x9e>
 80090aa:	4622      	mov	r2, r4
 80090ac:	210a      	movs	r1, #10
 80090ae:	4628      	mov	r0, r5
 80090b0:	f000 f87f 	bl	80091b2 <__swbuf_r>
 80090b4:	3001      	adds	r0, #1
 80090b6:	d0d7      	beq.n	8009068 <_puts_r+0x38>
 80090b8:	250a      	movs	r5, #10
 80090ba:	e7d7      	b.n	800906c <_puts_r+0x3c>
 80090bc:	4622      	mov	r2, r4
 80090be:	4628      	mov	r0, r5
 80090c0:	f000 f877 	bl	80091b2 <__swbuf_r>
 80090c4:	3001      	adds	r0, #1
 80090c6:	d1e7      	bne.n	8009098 <_puts_r+0x68>
 80090c8:	e7ce      	b.n	8009068 <_puts_r+0x38>
 80090ca:	3e01      	subs	r6, #1
 80090cc:	e7e4      	b.n	8009098 <_puts_r+0x68>
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	1c5a      	adds	r2, r3, #1
 80090d2:	6022      	str	r2, [r4, #0]
 80090d4:	220a      	movs	r2, #10
 80090d6:	701a      	strb	r2, [r3, #0]
 80090d8:	e7ee      	b.n	80090b8 <_puts_r+0x88>
	...

080090dc <puts>:
 80090dc:	4b02      	ldr	r3, [pc, #8]	@ (80090e8 <puts+0xc>)
 80090de:	4601      	mov	r1, r0
 80090e0:	6818      	ldr	r0, [r3, #0]
 80090e2:	f7ff bfa5 	b.w	8009030 <_puts_r>
 80090e6:	bf00      	nop
 80090e8:	20000018 	.word	0x20000018

080090ec <siprintf>:
 80090ec:	b40e      	push	{r1, r2, r3}
 80090ee:	b500      	push	{lr}
 80090f0:	b09c      	sub	sp, #112	@ 0x70
 80090f2:	ab1d      	add	r3, sp, #116	@ 0x74
 80090f4:	9002      	str	r0, [sp, #8]
 80090f6:	9006      	str	r0, [sp, #24]
 80090f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80090fc:	4809      	ldr	r0, [pc, #36]	@ (8009124 <siprintf+0x38>)
 80090fe:	9107      	str	r1, [sp, #28]
 8009100:	9104      	str	r1, [sp, #16]
 8009102:	4909      	ldr	r1, [pc, #36]	@ (8009128 <siprintf+0x3c>)
 8009104:	f853 2b04 	ldr.w	r2, [r3], #4
 8009108:	9105      	str	r1, [sp, #20]
 800910a:	6800      	ldr	r0, [r0, #0]
 800910c:	9301      	str	r3, [sp, #4]
 800910e:	a902      	add	r1, sp, #8
 8009110:	f002 fbb8 	bl	800b884 <_svfiprintf_r>
 8009114:	9b02      	ldr	r3, [sp, #8]
 8009116:	2200      	movs	r2, #0
 8009118:	701a      	strb	r2, [r3, #0]
 800911a:	b01c      	add	sp, #112	@ 0x70
 800911c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009120:	b003      	add	sp, #12
 8009122:	4770      	bx	lr
 8009124:	20000018 	.word	0x20000018
 8009128:	ffff0208 	.word	0xffff0208

0800912c <__sread>:
 800912c:	b510      	push	{r4, lr}
 800912e:	460c      	mov	r4, r1
 8009130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009134:	f000 f912 	bl	800935c <_read_r>
 8009138:	2800      	cmp	r0, #0
 800913a:	bfab      	itete	ge
 800913c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800913e:	89a3      	ldrhlt	r3, [r4, #12]
 8009140:	181b      	addge	r3, r3, r0
 8009142:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009146:	bfac      	ite	ge
 8009148:	6563      	strge	r3, [r4, #84]	@ 0x54
 800914a:	81a3      	strhlt	r3, [r4, #12]
 800914c:	bd10      	pop	{r4, pc}

0800914e <__swrite>:
 800914e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009152:	461f      	mov	r7, r3
 8009154:	898b      	ldrh	r3, [r1, #12]
 8009156:	05db      	lsls	r3, r3, #23
 8009158:	4605      	mov	r5, r0
 800915a:	460c      	mov	r4, r1
 800915c:	4616      	mov	r6, r2
 800915e:	d505      	bpl.n	800916c <__swrite+0x1e>
 8009160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009164:	2302      	movs	r3, #2
 8009166:	2200      	movs	r2, #0
 8009168:	f000 f8e6 	bl	8009338 <_lseek_r>
 800916c:	89a3      	ldrh	r3, [r4, #12]
 800916e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009172:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009176:	81a3      	strh	r3, [r4, #12]
 8009178:	4632      	mov	r2, r6
 800917a:	463b      	mov	r3, r7
 800917c:	4628      	mov	r0, r5
 800917e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009182:	f000 b90d 	b.w	80093a0 <_write_r>

08009186 <__sseek>:
 8009186:	b510      	push	{r4, lr}
 8009188:	460c      	mov	r4, r1
 800918a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800918e:	f000 f8d3 	bl	8009338 <_lseek_r>
 8009192:	1c43      	adds	r3, r0, #1
 8009194:	89a3      	ldrh	r3, [r4, #12]
 8009196:	bf15      	itete	ne
 8009198:	6560      	strne	r0, [r4, #84]	@ 0x54
 800919a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800919e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80091a2:	81a3      	strheq	r3, [r4, #12]
 80091a4:	bf18      	it	ne
 80091a6:	81a3      	strhne	r3, [r4, #12]
 80091a8:	bd10      	pop	{r4, pc}

080091aa <__sclose>:
 80091aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ae:	f000 b8b3 	b.w	8009318 <_close_r>

080091b2 <__swbuf_r>:
 80091b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b4:	460e      	mov	r6, r1
 80091b6:	4614      	mov	r4, r2
 80091b8:	4605      	mov	r5, r0
 80091ba:	b118      	cbz	r0, 80091c4 <__swbuf_r+0x12>
 80091bc:	6a03      	ldr	r3, [r0, #32]
 80091be:	b90b      	cbnz	r3, 80091c4 <__swbuf_r+0x12>
 80091c0:	f7ff feee 	bl	8008fa0 <__sinit>
 80091c4:	69a3      	ldr	r3, [r4, #24]
 80091c6:	60a3      	str	r3, [r4, #8]
 80091c8:	89a3      	ldrh	r3, [r4, #12]
 80091ca:	071a      	lsls	r2, r3, #28
 80091cc:	d501      	bpl.n	80091d2 <__swbuf_r+0x20>
 80091ce:	6923      	ldr	r3, [r4, #16]
 80091d0:	b943      	cbnz	r3, 80091e4 <__swbuf_r+0x32>
 80091d2:	4621      	mov	r1, r4
 80091d4:	4628      	mov	r0, r5
 80091d6:	f000 f82b 	bl	8009230 <__swsetup_r>
 80091da:	b118      	cbz	r0, 80091e4 <__swbuf_r+0x32>
 80091dc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80091e0:	4638      	mov	r0, r7
 80091e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091e4:	6823      	ldr	r3, [r4, #0]
 80091e6:	6922      	ldr	r2, [r4, #16]
 80091e8:	1a98      	subs	r0, r3, r2
 80091ea:	6963      	ldr	r3, [r4, #20]
 80091ec:	b2f6      	uxtb	r6, r6
 80091ee:	4283      	cmp	r3, r0
 80091f0:	4637      	mov	r7, r6
 80091f2:	dc05      	bgt.n	8009200 <__swbuf_r+0x4e>
 80091f4:	4621      	mov	r1, r4
 80091f6:	4628      	mov	r0, r5
 80091f8:	f002 fe06 	bl	800be08 <_fflush_r>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	d1ed      	bne.n	80091dc <__swbuf_r+0x2a>
 8009200:	68a3      	ldr	r3, [r4, #8]
 8009202:	3b01      	subs	r3, #1
 8009204:	60a3      	str	r3, [r4, #8]
 8009206:	6823      	ldr	r3, [r4, #0]
 8009208:	1c5a      	adds	r2, r3, #1
 800920a:	6022      	str	r2, [r4, #0]
 800920c:	701e      	strb	r6, [r3, #0]
 800920e:	6962      	ldr	r2, [r4, #20]
 8009210:	1c43      	adds	r3, r0, #1
 8009212:	429a      	cmp	r2, r3
 8009214:	d004      	beq.n	8009220 <__swbuf_r+0x6e>
 8009216:	89a3      	ldrh	r3, [r4, #12]
 8009218:	07db      	lsls	r3, r3, #31
 800921a:	d5e1      	bpl.n	80091e0 <__swbuf_r+0x2e>
 800921c:	2e0a      	cmp	r6, #10
 800921e:	d1df      	bne.n	80091e0 <__swbuf_r+0x2e>
 8009220:	4621      	mov	r1, r4
 8009222:	4628      	mov	r0, r5
 8009224:	f002 fdf0 	bl	800be08 <_fflush_r>
 8009228:	2800      	cmp	r0, #0
 800922a:	d0d9      	beq.n	80091e0 <__swbuf_r+0x2e>
 800922c:	e7d6      	b.n	80091dc <__swbuf_r+0x2a>
	...

08009230 <__swsetup_r>:
 8009230:	b538      	push	{r3, r4, r5, lr}
 8009232:	4b29      	ldr	r3, [pc, #164]	@ (80092d8 <__swsetup_r+0xa8>)
 8009234:	4605      	mov	r5, r0
 8009236:	6818      	ldr	r0, [r3, #0]
 8009238:	460c      	mov	r4, r1
 800923a:	b118      	cbz	r0, 8009244 <__swsetup_r+0x14>
 800923c:	6a03      	ldr	r3, [r0, #32]
 800923e:	b90b      	cbnz	r3, 8009244 <__swsetup_r+0x14>
 8009240:	f7ff feae 	bl	8008fa0 <__sinit>
 8009244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009248:	0719      	lsls	r1, r3, #28
 800924a:	d422      	bmi.n	8009292 <__swsetup_r+0x62>
 800924c:	06da      	lsls	r2, r3, #27
 800924e:	d407      	bmi.n	8009260 <__swsetup_r+0x30>
 8009250:	2209      	movs	r2, #9
 8009252:	602a      	str	r2, [r5, #0]
 8009254:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009258:	81a3      	strh	r3, [r4, #12]
 800925a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800925e:	e033      	b.n	80092c8 <__swsetup_r+0x98>
 8009260:	0758      	lsls	r0, r3, #29
 8009262:	d512      	bpl.n	800928a <__swsetup_r+0x5a>
 8009264:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009266:	b141      	cbz	r1, 800927a <__swsetup_r+0x4a>
 8009268:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800926c:	4299      	cmp	r1, r3
 800926e:	d002      	beq.n	8009276 <__swsetup_r+0x46>
 8009270:	4628      	mov	r0, r5
 8009272:	f000 ff29 	bl	800a0c8 <_free_r>
 8009276:	2300      	movs	r3, #0
 8009278:	6363      	str	r3, [r4, #52]	@ 0x34
 800927a:	89a3      	ldrh	r3, [r4, #12]
 800927c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009280:	81a3      	strh	r3, [r4, #12]
 8009282:	2300      	movs	r3, #0
 8009284:	6063      	str	r3, [r4, #4]
 8009286:	6923      	ldr	r3, [r4, #16]
 8009288:	6023      	str	r3, [r4, #0]
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	f043 0308 	orr.w	r3, r3, #8
 8009290:	81a3      	strh	r3, [r4, #12]
 8009292:	6923      	ldr	r3, [r4, #16]
 8009294:	b94b      	cbnz	r3, 80092aa <__swsetup_r+0x7a>
 8009296:	89a3      	ldrh	r3, [r4, #12]
 8009298:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800929c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092a0:	d003      	beq.n	80092aa <__swsetup_r+0x7a>
 80092a2:	4621      	mov	r1, r4
 80092a4:	4628      	mov	r0, r5
 80092a6:	f002 fdfd 	bl	800bea4 <__smakebuf_r>
 80092aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092ae:	f013 0201 	ands.w	r2, r3, #1
 80092b2:	d00a      	beq.n	80092ca <__swsetup_r+0x9a>
 80092b4:	2200      	movs	r2, #0
 80092b6:	60a2      	str	r2, [r4, #8]
 80092b8:	6962      	ldr	r2, [r4, #20]
 80092ba:	4252      	negs	r2, r2
 80092bc:	61a2      	str	r2, [r4, #24]
 80092be:	6922      	ldr	r2, [r4, #16]
 80092c0:	b942      	cbnz	r2, 80092d4 <__swsetup_r+0xa4>
 80092c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80092c6:	d1c5      	bne.n	8009254 <__swsetup_r+0x24>
 80092c8:	bd38      	pop	{r3, r4, r5, pc}
 80092ca:	0799      	lsls	r1, r3, #30
 80092cc:	bf58      	it	pl
 80092ce:	6962      	ldrpl	r2, [r4, #20]
 80092d0:	60a2      	str	r2, [r4, #8]
 80092d2:	e7f4      	b.n	80092be <__swsetup_r+0x8e>
 80092d4:	2000      	movs	r0, #0
 80092d6:	e7f7      	b.n	80092c8 <__swsetup_r+0x98>
 80092d8:	20000018 	.word	0x20000018

080092dc <memset>:
 80092dc:	4402      	add	r2, r0
 80092de:	4603      	mov	r3, r0
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d100      	bne.n	80092e6 <memset+0xa>
 80092e4:	4770      	bx	lr
 80092e6:	f803 1b01 	strb.w	r1, [r3], #1
 80092ea:	e7f9      	b.n	80092e0 <memset+0x4>

080092ec <strncmp>:
 80092ec:	b510      	push	{r4, lr}
 80092ee:	b16a      	cbz	r2, 800930c <strncmp+0x20>
 80092f0:	3901      	subs	r1, #1
 80092f2:	1884      	adds	r4, r0, r2
 80092f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d103      	bne.n	8009308 <strncmp+0x1c>
 8009300:	42a0      	cmp	r0, r4
 8009302:	d001      	beq.n	8009308 <strncmp+0x1c>
 8009304:	2a00      	cmp	r2, #0
 8009306:	d1f5      	bne.n	80092f4 <strncmp+0x8>
 8009308:	1ad0      	subs	r0, r2, r3
 800930a:	bd10      	pop	{r4, pc}
 800930c:	4610      	mov	r0, r2
 800930e:	e7fc      	b.n	800930a <strncmp+0x1e>

08009310 <_localeconv_r>:
 8009310:	4800      	ldr	r0, [pc, #0]	@ (8009314 <_localeconv_r+0x4>)
 8009312:	4770      	bx	lr
 8009314:	20000158 	.word	0x20000158

08009318 <_close_r>:
 8009318:	b538      	push	{r3, r4, r5, lr}
 800931a:	4d06      	ldr	r5, [pc, #24]	@ (8009334 <_close_r+0x1c>)
 800931c:	2300      	movs	r3, #0
 800931e:	4604      	mov	r4, r0
 8009320:	4608      	mov	r0, r1
 8009322:	602b      	str	r3, [r5, #0]
 8009324:	f7f9 f9da 	bl	80026dc <_close>
 8009328:	1c43      	adds	r3, r0, #1
 800932a:	d102      	bne.n	8009332 <_close_r+0x1a>
 800932c:	682b      	ldr	r3, [r5, #0]
 800932e:	b103      	cbz	r3, 8009332 <_close_r+0x1a>
 8009330:	6023      	str	r3, [r4, #0]
 8009332:	bd38      	pop	{r3, r4, r5, pc}
 8009334:	20000570 	.word	0x20000570

08009338 <_lseek_r>:
 8009338:	b538      	push	{r3, r4, r5, lr}
 800933a:	4d07      	ldr	r5, [pc, #28]	@ (8009358 <_lseek_r+0x20>)
 800933c:	4604      	mov	r4, r0
 800933e:	4608      	mov	r0, r1
 8009340:	4611      	mov	r1, r2
 8009342:	2200      	movs	r2, #0
 8009344:	602a      	str	r2, [r5, #0]
 8009346:	461a      	mov	r2, r3
 8009348:	f7f9 f9ef 	bl	800272a <_lseek>
 800934c:	1c43      	adds	r3, r0, #1
 800934e:	d102      	bne.n	8009356 <_lseek_r+0x1e>
 8009350:	682b      	ldr	r3, [r5, #0]
 8009352:	b103      	cbz	r3, 8009356 <_lseek_r+0x1e>
 8009354:	6023      	str	r3, [r4, #0]
 8009356:	bd38      	pop	{r3, r4, r5, pc}
 8009358:	20000570 	.word	0x20000570

0800935c <_read_r>:
 800935c:	b538      	push	{r3, r4, r5, lr}
 800935e:	4d07      	ldr	r5, [pc, #28]	@ (800937c <_read_r+0x20>)
 8009360:	4604      	mov	r4, r0
 8009362:	4608      	mov	r0, r1
 8009364:	4611      	mov	r1, r2
 8009366:	2200      	movs	r2, #0
 8009368:	602a      	str	r2, [r5, #0]
 800936a:	461a      	mov	r2, r3
 800936c:	f7f9 f97d 	bl	800266a <_read>
 8009370:	1c43      	adds	r3, r0, #1
 8009372:	d102      	bne.n	800937a <_read_r+0x1e>
 8009374:	682b      	ldr	r3, [r5, #0]
 8009376:	b103      	cbz	r3, 800937a <_read_r+0x1e>
 8009378:	6023      	str	r3, [r4, #0]
 800937a:	bd38      	pop	{r3, r4, r5, pc}
 800937c:	20000570 	.word	0x20000570

08009380 <_sbrk_r>:
 8009380:	b538      	push	{r3, r4, r5, lr}
 8009382:	4d06      	ldr	r5, [pc, #24]	@ (800939c <_sbrk_r+0x1c>)
 8009384:	2300      	movs	r3, #0
 8009386:	4604      	mov	r4, r0
 8009388:	4608      	mov	r0, r1
 800938a:	602b      	str	r3, [r5, #0]
 800938c:	f7f9 f9da 	bl	8002744 <_sbrk>
 8009390:	1c43      	adds	r3, r0, #1
 8009392:	d102      	bne.n	800939a <_sbrk_r+0x1a>
 8009394:	682b      	ldr	r3, [r5, #0]
 8009396:	b103      	cbz	r3, 800939a <_sbrk_r+0x1a>
 8009398:	6023      	str	r3, [r4, #0]
 800939a:	bd38      	pop	{r3, r4, r5, pc}
 800939c:	20000570 	.word	0x20000570

080093a0 <_write_r>:
 80093a0:	b538      	push	{r3, r4, r5, lr}
 80093a2:	4d07      	ldr	r5, [pc, #28]	@ (80093c0 <_write_r+0x20>)
 80093a4:	4604      	mov	r4, r0
 80093a6:	4608      	mov	r0, r1
 80093a8:	4611      	mov	r1, r2
 80093aa:	2200      	movs	r2, #0
 80093ac:	602a      	str	r2, [r5, #0]
 80093ae:	461a      	mov	r2, r3
 80093b0:	f7f9 f978 	bl	80026a4 <_write>
 80093b4:	1c43      	adds	r3, r0, #1
 80093b6:	d102      	bne.n	80093be <_write_r+0x1e>
 80093b8:	682b      	ldr	r3, [r5, #0]
 80093ba:	b103      	cbz	r3, 80093be <_write_r+0x1e>
 80093bc:	6023      	str	r3, [r4, #0]
 80093be:	bd38      	pop	{r3, r4, r5, pc}
 80093c0:	20000570 	.word	0x20000570

080093c4 <__errno>:
 80093c4:	4b01      	ldr	r3, [pc, #4]	@ (80093cc <__errno+0x8>)
 80093c6:	6818      	ldr	r0, [r3, #0]
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	20000018 	.word	0x20000018

080093d0 <__libc_init_array>:
 80093d0:	b570      	push	{r4, r5, r6, lr}
 80093d2:	4d0d      	ldr	r5, [pc, #52]	@ (8009408 <__libc_init_array+0x38>)
 80093d4:	4c0d      	ldr	r4, [pc, #52]	@ (800940c <__libc_init_array+0x3c>)
 80093d6:	1b64      	subs	r4, r4, r5
 80093d8:	10a4      	asrs	r4, r4, #2
 80093da:	2600      	movs	r6, #0
 80093dc:	42a6      	cmp	r6, r4
 80093de:	d109      	bne.n	80093f4 <__libc_init_array+0x24>
 80093e0:	4d0b      	ldr	r5, [pc, #44]	@ (8009410 <__libc_init_array+0x40>)
 80093e2:	4c0c      	ldr	r4, [pc, #48]	@ (8009414 <__libc_init_array+0x44>)
 80093e4:	f003 fc74 	bl	800ccd0 <_init>
 80093e8:	1b64      	subs	r4, r4, r5
 80093ea:	10a4      	asrs	r4, r4, #2
 80093ec:	2600      	movs	r6, #0
 80093ee:	42a6      	cmp	r6, r4
 80093f0:	d105      	bne.n	80093fe <__libc_init_array+0x2e>
 80093f2:	bd70      	pop	{r4, r5, r6, pc}
 80093f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80093f8:	4798      	blx	r3
 80093fa:	3601      	adds	r6, #1
 80093fc:	e7ee      	b.n	80093dc <__libc_init_array+0xc>
 80093fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009402:	4798      	blx	r3
 8009404:	3601      	adds	r6, #1
 8009406:	e7f2      	b.n	80093ee <__libc_init_array+0x1e>
 8009408:	0800d4d8 	.word	0x0800d4d8
 800940c:	0800d4d8 	.word	0x0800d4d8
 8009410:	0800d4d8 	.word	0x0800d4d8
 8009414:	0800d4dc 	.word	0x0800d4dc

08009418 <__retarget_lock_init_recursive>:
 8009418:	4770      	bx	lr

0800941a <__retarget_lock_acquire_recursive>:
 800941a:	4770      	bx	lr

0800941c <__retarget_lock_release_recursive>:
 800941c:	4770      	bx	lr
	...

08009420 <nanf>:
 8009420:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009428 <nanf+0x8>
 8009424:	4770      	bx	lr
 8009426:	bf00      	nop
 8009428:	7fc00000 	.word	0x7fc00000

0800942c <quorem>:
 800942c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009430:	6903      	ldr	r3, [r0, #16]
 8009432:	690c      	ldr	r4, [r1, #16]
 8009434:	42a3      	cmp	r3, r4
 8009436:	4607      	mov	r7, r0
 8009438:	db7e      	blt.n	8009538 <quorem+0x10c>
 800943a:	3c01      	subs	r4, #1
 800943c:	f101 0814 	add.w	r8, r1, #20
 8009440:	00a3      	lsls	r3, r4, #2
 8009442:	f100 0514 	add.w	r5, r0, #20
 8009446:	9300      	str	r3, [sp, #0]
 8009448:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800944c:	9301      	str	r3, [sp, #4]
 800944e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009452:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009456:	3301      	adds	r3, #1
 8009458:	429a      	cmp	r2, r3
 800945a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800945e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009462:	d32e      	bcc.n	80094c2 <quorem+0x96>
 8009464:	f04f 0a00 	mov.w	sl, #0
 8009468:	46c4      	mov	ip, r8
 800946a:	46ae      	mov	lr, r5
 800946c:	46d3      	mov	fp, sl
 800946e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009472:	b298      	uxth	r0, r3
 8009474:	fb06 a000 	mla	r0, r6, r0, sl
 8009478:	0c02      	lsrs	r2, r0, #16
 800947a:	0c1b      	lsrs	r3, r3, #16
 800947c:	fb06 2303 	mla	r3, r6, r3, r2
 8009480:	f8de 2000 	ldr.w	r2, [lr]
 8009484:	b280      	uxth	r0, r0
 8009486:	b292      	uxth	r2, r2
 8009488:	1a12      	subs	r2, r2, r0
 800948a:	445a      	add	r2, fp
 800948c:	f8de 0000 	ldr.w	r0, [lr]
 8009490:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009494:	b29b      	uxth	r3, r3
 8009496:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800949a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800949e:	b292      	uxth	r2, r2
 80094a0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80094a4:	45e1      	cmp	r9, ip
 80094a6:	f84e 2b04 	str.w	r2, [lr], #4
 80094aa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80094ae:	d2de      	bcs.n	800946e <quorem+0x42>
 80094b0:	9b00      	ldr	r3, [sp, #0]
 80094b2:	58eb      	ldr	r3, [r5, r3]
 80094b4:	b92b      	cbnz	r3, 80094c2 <quorem+0x96>
 80094b6:	9b01      	ldr	r3, [sp, #4]
 80094b8:	3b04      	subs	r3, #4
 80094ba:	429d      	cmp	r5, r3
 80094bc:	461a      	mov	r2, r3
 80094be:	d32f      	bcc.n	8009520 <quorem+0xf4>
 80094c0:	613c      	str	r4, [r7, #16]
 80094c2:	4638      	mov	r0, r7
 80094c4:	f001 f90e 	bl	800a6e4 <__mcmp>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	db25      	blt.n	8009518 <quorem+0xec>
 80094cc:	4629      	mov	r1, r5
 80094ce:	2000      	movs	r0, #0
 80094d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80094d4:	f8d1 c000 	ldr.w	ip, [r1]
 80094d8:	fa1f fe82 	uxth.w	lr, r2
 80094dc:	fa1f f38c 	uxth.w	r3, ip
 80094e0:	eba3 030e 	sub.w	r3, r3, lr
 80094e4:	4403      	add	r3, r0
 80094e6:	0c12      	lsrs	r2, r2, #16
 80094e8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80094ec:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094f6:	45c1      	cmp	r9, r8
 80094f8:	f841 3b04 	str.w	r3, [r1], #4
 80094fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009500:	d2e6      	bcs.n	80094d0 <quorem+0xa4>
 8009502:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009506:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800950a:	b922      	cbnz	r2, 8009516 <quorem+0xea>
 800950c:	3b04      	subs	r3, #4
 800950e:	429d      	cmp	r5, r3
 8009510:	461a      	mov	r2, r3
 8009512:	d30b      	bcc.n	800952c <quorem+0x100>
 8009514:	613c      	str	r4, [r7, #16]
 8009516:	3601      	adds	r6, #1
 8009518:	4630      	mov	r0, r6
 800951a:	b003      	add	sp, #12
 800951c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009520:	6812      	ldr	r2, [r2, #0]
 8009522:	3b04      	subs	r3, #4
 8009524:	2a00      	cmp	r2, #0
 8009526:	d1cb      	bne.n	80094c0 <quorem+0x94>
 8009528:	3c01      	subs	r4, #1
 800952a:	e7c6      	b.n	80094ba <quorem+0x8e>
 800952c:	6812      	ldr	r2, [r2, #0]
 800952e:	3b04      	subs	r3, #4
 8009530:	2a00      	cmp	r2, #0
 8009532:	d1ef      	bne.n	8009514 <quorem+0xe8>
 8009534:	3c01      	subs	r4, #1
 8009536:	e7ea      	b.n	800950e <quorem+0xe2>
 8009538:	2000      	movs	r0, #0
 800953a:	e7ee      	b.n	800951a <quorem+0xee>
 800953c:	0000      	movs	r0, r0
	...

08009540 <_dtoa_r>:
 8009540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009544:	69c7      	ldr	r7, [r0, #28]
 8009546:	b099      	sub	sp, #100	@ 0x64
 8009548:	ed8d 0b02 	vstr	d0, [sp, #8]
 800954c:	ec55 4b10 	vmov	r4, r5, d0
 8009550:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009552:	9109      	str	r1, [sp, #36]	@ 0x24
 8009554:	4683      	mov	fp, r0
 8009556:	920e      	str	r2, [sp, #56]	@ 0x38
 8009558:	9313      	str	r3, [sp, #76]	@ 0x4c
 800955a:	b97f      	cbnz	r7, 800957c <_dtoa_r+0x3c>
 800955c:	2010      	movs	r0, #16
 800955e:	f7fe fd69 	bl	8008034 <malloc>
 8009562:	4602      	mov	r2, r0
 8009564:	f8cb 001c 	str.w	r0, [fp, #28]
 8009568:	b920      	cbnz	r0, 8009574 <_dtoa_r+0x34>
 800956a:	4ba7      	ldr	r3, [pc, #668]	@ (8009808 <_dtoa_r+0x2c8>)
 800956c:	21ef      	movs	r1, #239	@ 0xef
 800956e:	48a7      	ldr	r0, [pc, #668]	@ (800980c <_dtoa_r+0x2cc>)
 8009570:	f002 fd26 	bl	800bfc0 <__assert_func>
 8009574:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009578:	6007      	str	r7, [r0, #0]
 800957a:	60c7      	str	r7, [r0, #12]
 800957c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009580:	6819      	ldr	r1, [r3, #0]
 8009582:	b159      	cbz	r1, 800959c <_dtoa_r+0x5c>
 8009584:	685a      	ldr	r2, [r3, #4]
 8009586:	604a      	str	r2, [r1, #4]
 8009588:	2301      	movs	r3, #1
 800958a:	4093      	lsls	r3, r2
 800958c:	608b      	str	r3, [r1, #8]
 800958e:	4658      	mov	r0, fp
 8009590:	f000 fe24 	bl	800a1dc <_Bfree>
 8009594:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009598:	2200      	movs	r2, #0
 800959a:	601a      	str	r2, [r3, #0]
 800959c:	1e2b      	subs	r3, r5, #0
 800959e:	bfb9      	ittee	lt
 80095a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80095a4:	9303      	strlt	r3, [sp, #12]
 80095a6:	2300      	movge	r3, #0
 80095a8:	6033      	strge	r3, [r6, #0]
 80095aa:	9f03      	ldr	r7, [sp, #12]
 80095ac:	4b98      	ldr	r3, [pc, #608]	@ (8009810 <_dtoa_r+0x2d0>)
 80095ae:	bfbc      	itt	lt
 80095b0:	2201      	movlt	r2, #1
 80095b2:	6032      	strlt	r2, [r6, #0]
 80095b4:	43bb      	bics	r3, r7
 80095b6:	d112      	bne.n	80095de <_dtoa_r+0x9e>
 80095b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80095ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80095be:	6013      	str	r3, [r2, #0]
 80095c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80095c4:	4323      	orrs	r3, r4
 80095c6:	f000 854d 	beq.w	800a064 <_dtoa_r+0xb24>
 80095ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80095cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009824 <_dtoa_r+0x2e4>
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f000 854f 	beq.w	800a074 <_dtoa_r+0xb34>
 80095d6:	f10a 0303 	add.w	r3, sl, #3
 80095da:	f000 bd49 	b.w	800a070 <_dtoa_r+0xb30>
 80095de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095e2:	2200      	movs	r2, #0
 80095e4:	ec51 0b17 	vmov	r0, r1, d7
 80095e8:	2300      	movs	r3, #0
 80095ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80095ee:	f7f7 fa8b 	bl	8000b08 <__aeabi_dcmpeq>
 80095f2:	4680      	mov	r8, r0
 80095f4:	b158      	cbz	r0, 800960e <_dtoa_r+0xce>
 80095f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80095f8:	2301      	movs	r3, #1
 80095fa:	6013      	str	r3, [r2, #0]
 80095fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80095fe:	b113      	cbz	r3, 8009606 <_dtoa_r+0xc6>
 8009600:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009602:	4b84      	ldr	r3, [pc, #528]	@ (8009814 <_dtoa_r+0x2d4>)
 8009604:	6013      	str	r3, [r2, #0]
 8009606:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009828 <_dtoa_r+0x2e8>
 800960a:	f000 bd33 	b.w	800a074 <_dtoa_r+0xb34>
 800960e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009612:	aa16      	add	r2, sp, #88	@ 0x58
 8009614:	a917      	add	r1, sp, #92	@ 0x5c
 8009616:	4658      	mov	r0, fp
 8009618:	f001 f984 	bl	800a924 <__d2b>
 800961c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009620:	4681      	mov	r9, r0
 8009622:	2e00      	cmp	r6, #0
 8009624:	d077      	beq.n	8009716 <_dtoa_r+0x1d6>
 8009626:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009628:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800962c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009630:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009634:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009638:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800963c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009640:	4619      	mov	r1, r3
 8009642:	2200      	movs	r2, #0
 8009644:	4b74      	ldr	r3, [pc, #464]	@ (8009818 <_dtoa_r+0x2d8>)
 8009646:	f7f6 fe3f 	bl	80002c8 <__aeabi_dsub>
 800964a:	a369      	add	r3, pc, #420	@ (adr r3, 80097f0 <_dtoa_r+0x2b0>)
 800964c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009650:	f7f6 fff2 	bl	8000638 <__aeabi_dmul>
 8009654:	a368      	add	r3, pc, #416	@ (adr r3, 80097f8 <_dtoa_r+0x2b8>)
 8009656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965a:	f7f6 fe37 	bl	80002cc <__adddf3>
 800965e:	4604      	mov	r4, r0
 8009660:	4630      	mov	r0, r6
 8009662:	460d      	mov	r5, r1
 8009664:	f7f6 ff7e 	bl	8000564 <__aeabi_i2d>
 8009668:	a365      	add	r3, pc, #404	@ (adr r3, 8009800 <_dtoa_r+0x2c0>)
 800966a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966e:	f7f6 ffe3 	bl	8000638 <__aeabi_dmul>
 8009672:	4602      	mov	r2, r0
 8009674:	460b      	mov	r3, r1
 8009676:	4620      	mov	r0, r4
 8009678:	4629      	mov	r1, r5
 800967a:	f7f6 fe27 	bl	80002cc <__adddf3>
 800967e:	4604      	mov	r4, r0
 8009680:	460d      	mov	r5, r1
 8009682:	f7f7 fa89 	bl	8000b98 <__aeabi_d2iz>
 8009686:	2200      	movs	r2, #0
 8009688:	4607      	mov	r7, r0
 800968a:	2300      	movs	r3, #0
 800968c:	4620      	mov	r0, r4
 800968e:	4629      	mov	r1, r5
 8009690:	f7f7 fa44 	bl	8000b1c <__aeabi_dcmplt>
 8009694:	b140      	cbz	r0, 80096a8 <_dtoa_r+0x168>
 8009696:	4638      	mov	r0, r7
 8009698:	f7f6 ff64 	bl	8000564 <__aeabi_i2d>
 800969c:	4622      	mov	r2, r4
 800969e:	462b      	mov	r3, r5
 80096a0:	f7f7 fa32 	bl	8000b08 <__aeabi_dcmpeq>
 80096a4:	b900      	cbnz	r0, 80096a8 <_dtoa_r+0x168>
 80096a6:	3f01      	subs	r7, #1
 80096a8:	2f16      	cmp	r7, #22
 80096aa:	d851      	bhi.n	8009750 <_dtoa_r+0x210>
 80096ac:	4b5b      	ldr	r3, [pc, #364]	@ (800981c <_dtoa_r+0x2dc>)
 80096ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096ba:	f7f7 fa2f 	bl	8000b1c <__aeabi_dcmplt>
 80096be:	2800      	cmp	r0, #0
 80096c0:	d048      	beq.n	8009754 <_dtoa_r+0x214>
 80096c2:	3f01      	subs	r7, #1
 80096c4:	2300      	movs	r3, #0
 80096c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80096c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80096ca:	1b9b      	subs	r3, r3, r6
 80096cc:	1e5a      	subs	r2, r3, #1
 80096ce:	bf44      	itt	mi
 80096d0:	f1c3 0801 	rsbmi	r8, r3, #1
 80096d4:	2300      	movmi	r3, #0
 80096d6:	9208      	str	r2, [sp, #32]
 80096d8:	bf54      	ite	pl
 80096da:	f04f 0800 	movpl.w	r8, #0
 80096de:	9308      	strmi	r3, [sp, #32]
 80096e0:	2f00      	cmp	r7, #0
 80096e2:	db39      	blt.n	8009758 <_dtoa_r+0x218>
 80096e4:	9b08      	ldr	r3, [sp, #32]
 80096e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80096e8:	443b      	add	r3, r7
 80096ea:	9308      	str	r3, [sp, #32]
 80096ec:	2300      	movs	r3, #0
 80096ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80096f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096f2:	2b09      	cmp	r3, #9
 80096f4:	d864      	bhi.n	80097c0 <_dtoa_r+0x280>
 80096f6:	2b05      	cmp	r3, #5
 80096f8:	bfc4      	itt	gt
 80096fa:	3b04      	subgt	r3, #4
 80096fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80096fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009700:	f1a3 0302 	sub.w	r3, r3, #2
 8009704:	bfcc      	ite	gt
 8009706:	2400      	movgt	r4, #0
 8009708:	2401      	movle	r4, #1
 800970a:	2b03      	cmp	r3, #3
 800970c:	d863      	bhi.n	80097d6 <_dtoa_r+0x296>
 800970e:	e8df f003 	tbb	[pc, r3]
 8009712:	372a      	.short	0x372a
 8009714:	5535      	.short	0x5535
 8009716:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800971a:	441e      	add	r6, r3
 800971c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009720:	2b20      	cmp	r3, #32
 8009722:	bfc1      	itttt	gt
 8009724:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009728:	409f      	lslgt	r7, r3
 800972a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800972e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009732:	bfd6      	itet	le
 8009734:	f1c3 0320 	rsble	r3, r3, #32
 8009738:	ea47 0003 	orrgt.w	r0, r7, r3
 800973c:	fa04 f003 	lslle.w	r0, r4, r3
 8009740:	f7f6 ff00 	bl	8000544 <__aeabi_ui2d>
 8009744:	2201      	movs	r2, #1
 8009746:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800974a:	3e01      	subs	r6, #1
 800974c:	9214      	str	r2, [sp, #80]	@ 0x50
 800974e:	e777      	b.n	8009640 <_dtoa_r+0x100>
 8009750:	2301      	movs	r3, #1
 8009752:	e7b8      	b.n	80096c6 <_dtoa_r+0x186>
 8009754:	9012      	str	r0, [sp, #72]	@ 0x48
 8009756:	e7b7      	b.n	80096c8 <_dtoa_r+0x188>
 8009758:	427b      	negs	r3, r7
 800975a:	930a      	str	r3, [sp, #40]	@ 0x28
 800975c:	2300      	movs	r3, #0
 800975e:	eba8 0807 	sub.w	r8, r8, r7
 8009762:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009764:	e7c4      	b.n	80096f0 <_dtoa_r+0x1b0>
 8009766:	2300      	movs	r3, #0
 8009768:	930b      	str	r3, [sp, #44]	@ 0x2c
 800976a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800976c:	2b00      	cmp	r3, #0
 800976e:	dc35      	bgt.n	80097dc <_dtoa_r+0x29c>
 8009770:	2301      	movs	r3, #1
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	9307      	str	r3, [sp, #28]
 8009776:	461a      	mov	r2, r3
 8009778:	920e      	str	r2, [sp, #56]	@ 0x38
 800977a:	e00b      	b.n	8009794 <_dtoa_r+0x254>
 800977c:	2301      	movs	r3, #1
 800977e:	e7f3      	b.n	8009768 <_dtoa_r+0x228>
 8009780:	2300      	movs	r3, #0
 8009782:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009784:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009786:	18fb      	adds	r3, r7, r3
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	3301      	adds	r3, #1
 800978c:	2b01      	cmp	r3, #1
 800978e:	9307      	str	r3, [sp, #28]
 8009790:	bfb8      	it	lt
 8009792:	2301      	movlt	r3, #1
 8009794:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009798:	2100      	movs	r1, #0
 800979a:	2204      	movs	r2, #4
 800979c:	f102 0514 	add.w	r5, r2, #20
 80097a0:	429d      	cmp	r5, r3
 80097a2:	d91f      	bls.n	80097e4 <_dtoa_r+0x2a4>
 80097a4:	6041      	str	r1, [r0, #4]
 80097a6:	4658      	mov	r0, fp
 80097a8:	f000 fcd8 	bl	800a15c <_Balloc>
 80097ac:	4682      	mov	sl, r0
 80097ae:	2800      	cmp	r0, #0
 80097b0:	d13c      	bne.n	800982c <_dtoa_r+0x2ec>
 80097b2:	4b1b      	ldr	r3, [pc, #108]	@ (8009820 <_dtoa_r+0x2e0>)
 80097b4:	4602      	mov	r2, r0
 80097b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80097ba:	e6d8      	b.n	800956e <_dtoa_r+0x2e>
 80097bc:	2301      	movs	r3, #1
 80097be:	e7e0      	b.n	8009782 <_dtoa_r+0x242>
 80097c0:	2401      	movs	r4, #1
 80097c2:	2300      	movs	r3, #0
 80097c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80097c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80097c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80097cc:	9300      	str	r3, [sp, #0]
 80097ce:	9307      	str	r3, [sp, #28]
 80097d0:	2200      	movs	r2, #0
 80097d2:	2312      	movs	r3, #18
 80097d4:	e7d0      	b.n	8009778 <_dtoa_r+0x238>
 80097d6:	2301      	movs	r3, #1
 80097d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097da:	e7f5      	b.n	80097c8 <_dtoa_r+0x288>
 80097dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097de:	9300      	str	r3, [sp, #0]
 80097e0:	9307      	str	r3, [sp, #28]
 80097e2:	e7d7      	b.n	8009794 <_dtoa_r+0x254>
 80097e4:	3101      	adds	r1, #1
 80097e6:	0052      	lsls	r2, r2, #1
 80097e8:	e7d8      	b.n	800979c <_dtoa_r+0x25c>
 80097ea:	bf00      	nop
 80097ec:	f3af 8000 	nop.w
 80097f0:	636f4361 	.word	0x636f4361
 80097f4:	3fd287a7 	.word	0x3fd287a7
 80097f8:	8b60c8b3 	.word	0x8b60c8b3
 80097fc:	3fc68a28 	.word	0x3fc68a28
 8009800:	509f79fb 	.word	0x509f79fb
 8009804:	3fd34413 	.word	0x3fd34413
 8009808:	0800d076 	.word	0x0800d076
 800980c:	0800d08d 	.word	0x0800d08d
 8009810:	7ff00000 	.word	0x7ff00000
 8009814:	0800d041 	.word	0x0800d041
 8009818:	3ff80000 	.word	0x3ff80000
 800981c:	0800d188 	.word	0x0800d188
 8009820:	0800d0e5 	.word	0x0800d0e5
 8009824:	0800d072 	.word	0x0800d072
 8009828:	0800d040 	.word	0x0800d040
 800982c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009830:	6018      	str	r0, [r3, #0]
 8009832:	9b07      	ldr	r3, [sp, #28]
 8009834:	2b0e      	cmp	r3, #14
 8009836:	f200 80a4 	bhi.w	8009982 <_dtoa_r+0x442>
 800983a:	2c00      	cmp	r4, #0
 800983c:	f000 80a1 	beq.w	8009982 <_dtoa_r+0x442>
 8009840:	2f00      	cmp	r7, #0
 8009842:	dd33      	ble.n	80098ac <_dtoa_r+0x36c>
 8009844:	4bad      	ldr	r3, [pc, #692]	@ (8009afc <_dtoa_r+0x5bc>)
 8009846:	f007 020f 	and.w	r2, r7, #15
 800984a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800984e:	ed93 7b00 	vldr	d7, [r3]
 8009852:	05f8      	lsls	r0, r7, #23
 8009854:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009858:	ea4f 1427 	mov.w	r4, r7, asr #4
 800985c:	d516      	bpl.n	800988c <_dtoa_r+0x34c>
 800985e:	4ba8      	ldr	r3, [pc, #672]	@ (8009b00 <_dtoa_r+0x5c0>)
 8009860:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009864:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009868:	f7f7 f810 	bl	800088c <__aeabi_ddiv>
 800986c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009870:	f004 040f 	and.w	r4, r4, #15
 8009874:	2603      	movs	r6, #3
 8009876:	4da2      	ldr	r5, [pc, #648]	@ (8009b00 <_dtoa_r+0x5c0>)
 8009878:	b954      	cbnz	r4, 8009890 <_dtoa_r+0x350>
 800987a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800987e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009882:	f7f7 f803 	bl	800088c <__aeabi_ddiv>
 8009886:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800988a:	e028      	b.n	80098de <_dtoa_r+0x39e>
 800988c:	2602      	movs	r6, #2
 800988e:	e7f2      	b.n	8009876 <_dtoa_r+0x336>
 8009890:	07e1      	lsls	r1, r4, #31
 8009892:	d508      	bpl.n	80098a6 <_dtoa_r+0x366>
 8009894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009898:	e9d5 2300 	ldrd	r2, r3, [r5]
 800989c:	f7f6 fecc 	bl	8000638 <__aeabi_dmul>
 80098a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098a4:	3601      	adds	r6, #1
 80098a6:	1064      	asrs	r4, r4, #1
 80098a8:	3508      	adds	r5, #8
 80098aa:	e7e5      	b.n	8009878 <_dtoa_r+0x338>
 80098ac:	f000 80d2 	beq.w	8009a54 <_dtoa_r+0x514>
 80098b0:	427c      	negs	r4, r7
 80098b2:	4b92      	ldr	r3, [pc, #584]	@ (8009afc <_dtoa_r+0x5bc>)
 80098b4:	4d92      	ldr	r5, [pc, #584]	@ (8009b00 <_dtoa_r+0x5c0>)
 80098b6:	f004 020f 	and.w	r2, r4, #15
 80098ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098c6:	f7f6 feb7 	bl	8000638 <__aeabi_dmul>
 80098ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098ce:	1124      	asrs	r4, r4, #4
 80098d0:	2300      	movs	r3, #0
 80098d2:	2602      	movs	r6, #2
 80098d4:	2c00      	cmp	r4, #0
 80098d6:	f040 80b2 	bne.w	8009a3e <_dtoa_r+0x4fe>
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1d3      	bne.n	8009886 <_dtoa_r+0x346>
 80098de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80098e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f000 80b7 	beq.w	8009a58 <_dtoa_r+0x518>
 80098ea:	4b86      	ldr	r3, [pc, #536]	@ (8009b04 <_dtoa_r+0x5c4>)
 80098ec:	2200      	movs	r2, #0
 80098ee:	4620      	mov	r0, r4
 80098f0:	4629      	mov	r1, r5
 80098f2:	f7f7 f913 	bl	8000b1c <__aeabi_dcmplt>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	f000 80ae 	beq.w	8009a58 <_dtoa_r+0x518>
 80098fc:	9b07      	ldr	r3, [sp, #28]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f000 80aa 	beq.w	8009a58 <_dtoa_r+0x518>
 8009904:	9b00      	ldr	r3, [sp, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	dd37      	ble.n	800997a <_dtoa_r+0x43a>
 800990a:	1e7b      	subs	r3, r7, #1
 800990c:	9304      	str	r3, [sp, #16]
 800990e:	4620      	mov	r0, r4
 8009910:	4b7d      	ldr	r3, [pc, #500]	@ (8009b08 <_dtoa_r+0x5c8>)
 8009912:	2200      	movs	r2, #0
 8009914:	4629      	mov	r1, r5
 8009916:	f7f6 fe8f 	bl	8000638 <__aeabi_dmul>
 800991a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800991e:	9c00      	ldr	r4, [sp, #0]
 8009920:	3601      	adds	r6, #1
 8009922:	4630      	mov	r0, r6
 8009924:	f7f6 fe1e 	bl	8000564 <__aeabi_i2d>
 8009928:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800992c:	f7f6 fe84 	bl	8000638 <__aeabi_dmul>
 8009930:	4b76      	ldr	r3, [pc, #472]	@ (8009b0c <_dtoa_r+0x5cc>)
 8009932:	2200      	movs	r2, #0
 8009934:	f7f6 fcca 	bl	80002cc <__adddf3>
 8009938:	4605      	mov	r5, r0
 800993a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800993e:	2c00      	cmp	r4, #0
 8009940:	f040 808d 	bne.w	8009a5e <_dtoa_r+0x51e>
 8009944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009948:	4b71      	ldr	r3, [pc, #452]	@ (8009b10 <_dtoa_r+0x5d0>)
 800994a:	2200      	movs	r2, #0
 800994c:	f7f6 fcbc 	bl	80002c8 <__aeabi_dsub>
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009958:	462a      	mov	r2, r5
 800995a:	4633      	mov	r3, r6
 800995c:	f7f7 f8fc 	bl	8000b58 <__aeabi_dcmpgt>
 8009960:	2800      	cmp	r0, #0
 8009962:	f040 828b 	bne.w	8009e7c <_dtoa_r+0x93c>
 8009966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800996a:	462a      	mov	r2, r5
 800996c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009970:	f7f7 f8d4 	bl	8000b1c <__aeabi_dcmplt>
 8009974:	2800      	cmp	r0, #0
 8009976:	f040 8128 	bne.w	8009bca <_dtoa_r+0x68a>
 800997a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800997e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009982:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009984:	2b00      	cmp	r3, #0
 8009986:	f2c0 815a 	blt.w	8009c3e <_dtoa_r+0x6fe>
 800998a:	2f0e      	cmp	r7, #14
 800998c:	f300 8157 	bgt.w	8009c3e <_dtoa_r+0x6fe>
 8009990:	4b5a      	ldr	r3, [pc, #360]	@ (8009afc <_dtoa_r+0x5bc>)
 8009992:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009996:	ed93 7b00 	vldr	d7, [r3]
 800999a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800999c:	2b00      	cmp	r3, #0
 800999e:	ed8d 7b00 	vstr	d7, [sp]
 80099a2:	da03      	bge.n	80099ac <_dtoa_r+0x46c>
 80099a4:	9b07      	ldr	r3, [sp, #28]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f340 8101 	ble.w	8009bae <_dtoa_r+0x66e>
 80099ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80099b0:	4656      	mov	r6, sl
 80099b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099b6:	4620      	mov	r0, r4
 80099b8:	4629      	mov	r1, r5
 80099ba:	f7f6 ff67 	bl	800088c <__aeabi_ddiv>
 80099be:	f7f7 f8eb 	bl	8000b98 <__aeabi_d2iz>
 80099c2:	4680      	mov	r8, r0
 80099c4:	f7f6 fdce 	bl	8000564 <__aeabi_i2d>
 80099c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099cc:	f7f6 fe34 	bl	8000638 <__aeabi_dmul>
 80099d0:	4602      	mov	r2, r0
 80099d2:	460b      	mov	r3, r1
 80099d4:	4620      	mov	r0, r4
 80099d6:	4629      	mov	r1, r5
 80099d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80099dc:	f7f6 fc74 	bl	80002c8 <__aeabi_dsub>
 80099e0:	f806 4b01 	strb.w	r4, [r6], #1
 80099e4:	9d07      	ldr	r5, [sp, #28]
 80099e6:	eba6 040a 	sub.w	r4, r6, sl
 80099ea:	42a5      	cmp	r5, r4
 80099ec:	4602      	mov	r2, r0
 80099ee:	460b      	mov	r3, r1
 80099f0:	f040 8117 	bne.w	8009c22 <_dtoa_r+0x6e2>
 80099f4:	f7f6 fc6a 	bl	80002cc <__adddf3>
 80099f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099fc:	4604      	mov	r4, r0
 80099fe:	460d      	mov	r5, r1
 8009a00:	f7f7 f8aa 	bl	8000b58 <__aeabi_dcmpgt>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	f040 80f9 	bne.w	8009bfc <_dtoa_r+0x6bc>
 8009a0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a0e:	4620      	mov	r0, r4
 8009a10:	4629      	mov	r1, r5
 8009a12:	f7f7 f879 	bl	8000b08 <__aeabi_dcmpeq>
 8009a16:	b118      	cbz	r0, 8009a20 <_dtoa_r+0x4e0>
 8009a18:	f018 0f01 	tst.w	r8, #1
 8009a1c:	f040 80ee 	bne.w	8009bfc <_dtoa_r+0x6bc>
 8009a20:	4649      	mov	r1, r9
 8009a22:	4658      	mov	r0, fp
 8009a24:	f000 fbda 	bl	800a1dc <_Bfree>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	7033      	strb	r3, [r6, #0]
 8009a2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a2e:	3701      	adds	r7, #1
 8009a30:	601f      	str	r7, [r3, #0]
 8009a32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f000 831d 	beq.w	800a074 <_dtoa_r+0xb34>
 8009a3a:	601e      	str	r6, [r3, #0]
 8009a3c:	e31a      	b.n	800a074 <_dtoa_r+0xb34>
 8009a3e:	07e2      	lsls	r2, r4, #31
 8009a40:	d505      	bpl.n	8009a4e <_dtoa_r+0x50e>
 8009a42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a46:	f7f6 fdf7 	bl	8000638 <__aeabi_dmul>
 8009a4a:	3601      	adds	r6, #1
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	1064      	asrs	r4, r4, #1
 8009a50:	3508      	adds	r5, #8
 8009a52:	e73f      	b.n	80098d4 <_dtoa_r+0x394>
 8009a54:	2602      	movs	r6, #2
 8009a56:	e742      	b.n	80098de <_dtoa_r+0x39e>
 8009a58:	9c07      	ldr	r4, [sp, #28]
 8009a5a:	9704      	str	r7, [sp, #16]
 8009a5c:	e761      	b.n	8009922 <_dtoa_r+0x3e2>
 8009a5e:	4b27      	ldr	r3, [pc, #156]	@ (8009afc <_dtoa_r+0x5bc>)
 8009a60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009a62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a6a:	4454      	add	r4, sl
 8009a6c:	2900      	cmp	r1, #0
 8009a6e:	d053      	beq.n	8009b18 <_dtoa_r+0x5d8>
 8009a70:	4928      	ldr	r1, [pc, #160]	@ (8009b14 <_dtoa_r+0x5d4>)
 8009a72:	2000      	movs	r0, #0
 8009a74:	f7f6 ff0a 	bl	800088c <__aeabi_ddiv>
 8009a78:	4633      	mov	r3, r6
 8009a7a:	462a      	mov	r2, r5
 8009a7c:	f7f6 fc24 	bl	80002c8 <__aeabi_dsub>
 8009a80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a84:	4656      	mov	r6, sl
 8009a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a8a:	f7f7 f885 	bl	8000b98 <__aeabi_d2iz>
 8009a8e:	4605      	mov	r5, r0
 8009a90:	f7f6 fd68 	bl	8000564 <__aeabi_i2d>
 8009a94:	4602      	mov	r2, r0
 8009a96:	460b      	mov	r3, r1
 8009a98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a9c:	f7f6 fc14 	bl	80002c8 <__aeabi_dsub>
 8009aa0:	3530      	adds	r5, #48	@ 0x30
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009aaa:	f806 5b01 	strb.w	r5, [r6], #1
 8009aae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009ab2:	f7f7 f833 	bl	8000b1c <__aeabi_dcmplt>
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	d171      	bne.n	8009b9e <_dtoa_r+0x65e>
 8009aba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009abe:	4911      	ldr	r1, [pc, #68]	@ (8009b04 <_dtoa_r+0x5c4>)
 8009ac0:	2000      	movs	r0, #0
 8009ac2:	f7f6 fc01 	bl	80002c8 <__aeabi_dsub>
 8009ac6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009aca:	f7f7 f827 	bl	8000b1c <__aeabi_dcmplt>
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	f040 8095 	bne.w	8009bfe <_dtoa_r+0x6be>
 8009ad4:	42a6      	cmp	r6, r4
 8009ad6:	f43f af50 	beq.w	800997a <_dtoa_r+0x43a>
 8009ada:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009ade:	4b0a      	ldr	r3, [pc, #40]	@ (8009b08 <_dtoa_r+0x5c8>)
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f7f6 fda9 	bl	8000638 <__aeabi_dmul>
 8009ae6:	4b08      	ldr	r3, [pc, #32]	@ (8009b08 <_dtoa_r+0x5c8>)
 8009ae8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009aec:	2200      	movs	r2, #0
 8009aee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009af2:	f7f6 fda1 	bl	8000638 <__aeabi_dmul>
 8009af6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009afa:	e7c4      	b.n	8009a86 <_dtoa_r+0x546>
 8009afc:	0800d188 	.word	0x0800d188
 8009b00:	0800d160 	.word	0x0800d160
 8009b04:	3ff00000 	.word	0x3ff00000
 8009b08:	40240000 	.word	0x40240000
 8009b0c:	401c0000 	.word	0x401c0000
 8009b10:	40140000 	.word	0x40140000
 8009b14:	3fe00000 	.word	0x3fe00000
 8009b18:	4631      	mov	r1, r6
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	f7f6 fd8c 	bl	8000638 <__aeabi_dmul>
 8009b20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009b24:	9415      	str	r4, [sp, #84]	@ 0x54
 8009b26:	4656      	mov	r6, sl
 8009b28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b2c:	f7f7 f834 	bl	8000b98 <__aeabi_d2iz>
 8009b30:	4605      	mov	r5, r0
 8009b32:	f7f6 fd17 	bl	8000564 <__aeabi_i2d>
 8009b36:	4602      	mov	r2, r0
 8009b38:	460b      	mov	r3, r1
 8009b3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b3e:	f7f6 fbc3 	bl	80002c8 <__aeabi_dsub>
 8009b42:	3530      	adds	r5, #48	@ 0x30
 8009b44:	f806 5b01 	strb.w	r5, [r6], #1
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	42a6      	cmp	r6, r4
 8009b4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b52:	f04f 0200 	mov.w	r2, #0
 8009b56:	d124      	bne.n	8009ba2 <_dtoa_r+0x662>
 8009b58:	4bac      	ldr	r3, [pc, #688]	@ (8009e0c <_dtoa_r+0x8cc>)
 8009b5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009b5e:	f7f6 fbb5 	bl	80002cc <__adddf3>
 8009b62:	4602      	mov	r2, r0
 8009b64:	460b      	mov	r3, r1
 8009b66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b6a:	f7f6 fff5 	bl	8000b58 <__aeabi_dcmpgt>
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	d145      	bne.n	8009bfe <_dtoa_r+0x6be>
 8009b72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009b76:	49a5      	ldr	r1, [pc, #660]	@ (8009e0c <_dtoa_r+0x8cc>)
 8009b78:	2000      	movs	r0, #0
 8009b7a:	f7f6 fba5 	bl	80002c8 <__aeabi_dsub>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	460b      	mov	r3, r1
 8009b82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b86:	f7f6 ffc9 	bl	8000b1c <__aeabi_dcmplt>
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	f43f aef5 	beq.w	800997a <_dtoa_r+0x43a>
 8009b90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009b92:	1e73      	subs	r3, r6, #1
 8009b94:	9315      	str	r3, [sp, #84]	@ 0x54
 8009b96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b9a:	2b30      	cmp	r3, #48	@ 0x30
 8009b9c:	d0f8      	beq.n	8009b90 <_dtoa_r+0x650>
 8009b9e:	9f04      	ldr	r7, [sp, #16]
 8009ba0:	e73e      	b.n	8009a20 <_dtoa_r+0x4e0>
 8009ba2:	4b9b      	ldr	r3, [pc, #620]	@ (8009e10 <_dtoa_r+0x8d0>)
 8009ba4:	f7f6 fd48 	bl	8000638 <__aeabi_dmul>
 8009ba8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bac:	e7bc      	b.n	8009b28 <_dtoa_r+0x5e8>
 8009bae:	d10c      	bne.n	8009bca <_dtoa_r+0x68a>
 8009bb0:	4b98      	ldr	r3, [pc, #608]	@ (8009e14 <_dtoa_r+0x8d4>)
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009bb8:	f7f6 fd3e 	bl	8000638 <__aeabi_dmul>
 8009bbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bc0:	f7f6 ffc0 	bl	8000b44 <__aeabi_dcmpge>
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	f000 8157 	beq.w	8009e78 <_dtoa_r+0x938>
 8009bca:	2400      	movs	r4, #0
 8009bcc:	4625      	mov	r5, r4
 8009bce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bd0:	43db      	mvns	r3, r3
 8009bd2:	9304      	str	r3, [sp, #16]
 8009bd4:	4656      	mov	r6, sl
 8009bd6:	2700      	movs	r7, #0
 8009bd8:	4621      	mov	r1, r4
 8009bda:	4658      	mov	r0, fp
 8009bdc:	f000 fafe 	bl	800a1dc <_Bfree>
 8009be0:	2d00      	cmp	r5, #0
 8009be2:	d0dc      	beq.n	8009b9e <_dtoa_r+0x65e>
 8009be4:	b12f      	cbz	r7, 8009bf2 <_dtoa_r+0x6b2>
 8009be6:	42af      	cmp	r7, r5
 8009be8:	d003      	beq.n	8009bf2 <_dtoa_r+0x6b2>
 8009bea:	4639      	mov	r1, r7
 8009bec:	4658      	mov	r0, fp
 8009bee:	f000 faf5 	bl	800a1dc <_Bfree>
 8009bf2:	4629      	mov	r1, r5
 8009bf4:	4658      	mov	r0, fp
 8009bf6:	f000 faf1 	bl	800a1dc <_Bfree>
 8009bfa:	e7d0      	b.n	8009b9e <_dtoa_r+0x65e>
 8009bfc:	9704      	str	r7, [sp, #16]
 8009bfe:	4633      	mov	r3, r6
 8009c00:	461e      	mov	r6, r3
 8009c02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c06:	2a39      	cmp	r2, #57	@ 0x39
 8009c08:	d107      	bne.n	8009c1a <_dtoa_r+0x6da>
 8009c0a:	459a      	cmp	sl, r3
 8009c0c:	d1f8      	bne.n	8009c00 <_dtoa_r+0x6c0>
 8009c0e:	9a04      	ldr	r2, [sp, #16]
 8009c10:	3201      	adds	r2, #1
 8009c12:	9204      	str	r2, [sp, #16]
 8009c14:	2230      	movs	r2, #48	@ 0x30
 8009c16:	f88a 2000 	strb.w	r2, [sl]
 8009c1a:	781a      	ldrb	r2, [r3, #0]
 8009c1c:	3201      	adds	r2, #1
 8009c1e:	701a      	strb	r2, [r3, #0]
 8009c20:	e7bd      	b.n	8009b9e <_dtoa_r+0x65e>
 8009c22:	4b7b      	ldr	r3, [pc, #492]	@ (8009e10 <_dtoa_r+0x8d0>)
 8009c24:	2200      	movs	r2, #0
 8009c26:	f7f6 fd07 	bl	8000638 <__aeabi_dmul>
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	4604      	mov	r4, r0
 8009c30:	460d      	mov	r5, r1
 8009c32:	f7f6 ff69 	bl	8000b08 <__aeabi_dcmpeq>
 8009c36:	2800      	cmp	r0, #0
 8009c38:	f43f aebb 	beq.w	80099b2 <_dtoa_r+0x472>
 8009c3c:	e6f0      	b.n	8009a20 <_dtoa_r+0x4e0>
 8009c3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009c40:	2a00      	cmp	r2, #0
 8009c42:	f000 80db 	beq.w	8009dfc <_dtoa_r+0x8bc>
 8009c46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c48:	2a01      	cmp	r2, #1
 8009c4a:	f300 80bf 	bgt.w	8009dcc <_dtoa_r+0x88c>
 8009c4e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009c50:	2a00      	cmp	r2, #0
 8009c52:	f000 80b7 	beq.w	8009dc4 <_dtoa_r+0x884>
 8009c56:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009c5a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009c5c:	4646      	mov	r6, r8
 8009c5e:	9a08      	ldr	r2, [sp, #32]
 8009c60:	2101      	movs	r1, #1
 8009c62:	441a      	add	r2, r3
 8009c64:	4658      	mov	r0, fp
 8009c66:	4498      	add	r8, r3
 8009c68:	9208      	str	r2, [sp, #32]
 8009c6a:	f000 fbb5 	bl	800a3d8 <__i2b>
 8009c6e:	4605      	mov	r5, r0
 8009c70:	b15e      	cbz	r6, 8009c8a <_dtoa_r+0x74a>
 8009c72:	9b08      	ldr	r3, [sp, #32]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	dd08      	ble.n	8009c8a <_dtoa_r+0x74a>
 8009c78:	42b3      	cmp	r3, r6
 8009c7a:	9a08      	ldr	r2, [sp, #32]
 8009c7c:	bfa8      	it	ge
 8009c7e:	4633      	movge	r3, r6
 8009c80:	eba8 0803 	sub.w	r8, r8, r3
 8009c84:	1af6      	subs	r6, r6, r3
 8009c86:	1ad3      	subs	r3, r2, r3
 8009c88:	9308      	str	r3, [sp, #32]
 8009c8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c8c:	b1f3      	cbz	r3, 8009ccc <_dtoa_r+0x78c>
 8009c8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f000 80b7 	beq.w	8009e04 <_dtoa_r+0x8c4>
 8009c96:	b18c      	cbz	r4, 8009cbc <_dtoa_r+0x77c>
 8009c98:	4629      	mov	r1, r5
 8009c9a:	4622      	mov	r2, r4
 8009c9c:	4658      	mov	r0, fp
 8009c9e:	f000 fc5b 	bl	800a558 <__pow5mult>
 8009ca2:	464a      	mov	r2, r9
 8009ca4:	4601      	mov	r1, r0
 8009ca6:	4605      	mov	r5, r0
 8009ca8:	4658      	mov	r0, fp
 8009caa:	f000 fbab 	bl	800a404 <__multiply>
 8009cae:	4649      	mov	r1, r9
 8009cb0:	9004      	str	r0, [sp, #16]
 8009cb2:	4658      	mov	r0, fp
 8009cb4:	f000 fa92 	bl	800a1dc <_Bfree>
 8009cb8:	9b04      	ldr	r3, [sp, #16]
 8009cba:	4699      	mov	r9, r3
 8009cbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cbe:	1b1a      	subs	r2, r3, r4
 8009cc0:	d004      	beq.n	8009ccc <_dtoa_r+0x78c>
 8009cc2:	4649      	mov	r1, r9
 8009cc4:	4658      	mov	r0, fp
 8009cc6:	f000 fc47 	bl	800a558 <__pow5mult>
 8009cca:	4681      	mov	r9, r0
 8009ccc:	2101      	movs	r1, #1
 8009cce:	4658      	mov	r0, fp
 8009cd0:	f000 fb82 	bl	800a3d8 <__i2b>
 8009cd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f000 81cf 	beq.w	800a07c <_dtoa_r+0xb3c>
 8009cde:	461a      	mov	r2, r3
 8009ce0:	4601      	mov	r1, r0
 8009ce2:	4658      	mov	r0, fp
 8009ce4:	f000 fc38 	bl	800a558 <__pow5mult>
 8009ce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	4604      	mov	r4, r0
 8009cee:	f300 8095 	bgt.w	8009e1c <_dtoa_r+0x8dc>
 8009cf2:	9b02      	ldr	r3, [sp, #8]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f040 8087 	bne.w	8009e08 <_dtoa_r+0x8c8>
 8009cfa:	9b03      	ldr	r3, [sp, #12]
 8009cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f040 8089 	bne.w	8009e18 <_dtoa_r+0x8d8>
 8009d06:	9b03      	ldr	r3, [sp, #12]
 8009d08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009d0c:	0d1b      	lsrs	r3, r3, #20
 8009d0e:	051b      	lsls	r3, r3, #20
 8009d10:	b12b      	cbz	r3, 8009d1e <_dtoa_r+0x7de>
 8009d12:	9b08      	ldr	r3, [sp, #32]
 8009d14:	3301      	adds	r3, #1
 8009d16:	9308      	str	r3, [sp, #32]
 8009d18:	f108 0801 	add.w	r8, r8, #1
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	f000 81b0 	beq.w	800a088 <_dtoa_r+0xb48>
 8009d28:	6923      	ldr	r3, [r4, #16]
 8009d2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d2e:	6918      	ldr	r0, [r3, #16]
 8009d30:	f000 fb06 	bl	800a340 <__hi0bits>
 8009d34:	f1c0 0020 	rsb	r0, r0, #32
 8009d38:	9b08      	ldr	r3, [sp, #32]
 8009d3a:	4418      	add	r0, r3
 8009d3c:	f010 001f 	ands.w	r0, r0, #31
 8009d40:	d077      	beq.n	8009e32 <_dtoa_r+0x8f2>
 8009d42:	f1c0 0320 	rsb	r3, r0, #32
 8009d46:	2b04      	cmp	r3, #4
 8009d48:	dd6b      	ble.n	8009e22 <_dtoa_r+0x8e2>
 8009d4a:	9b08      	ldr	r3, [sp, #32]
 8009d4c:	f1c0 001c 	rsb	r0, r0, #28
 8009d50:	4403      	add	r3, r0
 8009d52:	4480      	add	r8, r0
 8009d54:	4406      	add	r6, r0
 8009d56:	9308      	str	r3, [sp, #32]
 8009d58:	f1b8 0f00 	cmp.w	r8, #0
 8009d5c:	dd05      	ble.n	8009d6a <_dtoa_r+0x82a>
 8009d5e:	4649      	mov	r1, r9
 8009d60:	4642      	mov	r2, r8
 8009d62:	4658      	mov	r0, fp
 8009d64:	f000 fc52 	bl	800a60c <__lshift>
 8009d68:	4681      	mov	r9, r0
 8009d6a:	9b08      	ldr	r3, [sp, #32]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	dd05      	ble.n	8009d7c <_dtoa_r+0x83c>
 8009d70:	4621      	mov	r1, r4
 8009d72:	461a      	mov	r2, r3
 8009d74:	4658      	mov	r0, fp
 8009d76:	f000 fc49 	bl	800a60c <__lshift>
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d059      	beq.n	8009e36 <_dtoa_r+0x8f6>
 8009d82:	4621      	mov	r1, r4
 8009d84:	4648      	mov	r0, r9
 8009d86:	f000 fcad 	bl	800a6e4 <__mcmp>
 8009d8a:	2800      	cmp	r0, #0
 8009d8c:	da53      	bge.n	8009e36 <_dtoa_r+0x8f6>
 8009d8e:	1e7b      	subs	r3, r7, #1
 8009d90:	9304      	str	r3, [sp, #16]
 8009d92:	4649      	mov	r1, r9
 8009d94:	2300      	movs	r3, #0
 8009d96:	220a      	movs	r2, #10
 8009d98:	4658      	mov	r0, fp
 8009d9a:	f000 fa41 	bl	800a220 <__multadd>
 8009d9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009da0:	4681      	mov	r9, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f000 8172 	beq.w	800a08c <_dtoa_r+0xb4c>
 8009da8:	2300      	movs	r3, #0
 8009daa:	4629      	mov	r1, r5
 8009dac:	220a      	movs	r2, #10
 8009dae:	4658      	mov	r0, fp
 8009db0:	f000 fa36 	bl	800a220 <__multadd>
 8009db4:	9b00      	ldr	r3, [sp, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	4605      	mov	r5, r0
 8009dba:	dc67      	bgt.n	8009e8c <_dtoa_r+0x94c>
 8009dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dbe:	2b02      	cmp	r3, #2
 8009dc0:	dc41      	bgt.n	8009e46 <_dtoa_r+0x906>
 8009dc2:	e063      	b.n	8009e8c <_dtoa_r+0x94c>
 8009dc4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009dc6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009dca:	e746      	b.n	8009c5a <_dtoa_r+0x71a>
 8009dcc:	9b07      	ldr	r3, [sp, #28]
 8009dce:	1e5c      	subs	r4, r3, #1
 8009dd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dd2:	42a3      	cmp	r3, r4
 8009dd4:	bfbf      	itttt	lt
 8009dd6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009dd8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009dda:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009ddc:	1ae3      	sublt	r3, r4, r3
 8009dde:	bfb4      	ite	lt
 8009de0:	18d2      	addlt	r2, r2, r3
 8009de2:	1b1c      	subge	r4, r3, r4
 8009de4:	9b07      	ldr	r3, [sp, #28]
 8009de6:	bfbc      	itt	lt
 8009de8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009dea:	2400      	movlt	r4, #0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	bfb5      	itete	lt
 8009df0:	eba8 0603 	sublt.w	r6, r8, r3
 8009df4:	9b07      	ldrge	r3, [sp, #28]
 8009df6:	2300      	movlt	r3, #0
 8009df8:	4646      	movge	r6, r8
 8009dfa:	e730      	b.n	8009c5e <_dtoa_r+0x71e>
 8009dfc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009dfe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009e00:	4646      	mov	r6, r8
 8009e02:	e735      	b.n	8009c70 <_dtoa_r+0x730>
 8009e04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e06:	e75c      	b.n	8009cc2 <_dtoa_r+0x782>
 8009e08:	2300      	movs	r3, #0
 8009e0a:	e788      	b.n	8009d1e <_dtoa_r+0x7de>
 8009e0c:	3fe00000 	.word	0x3fe00000
 8009e10:	40240000 	.word	0x40240000
 8009e14:	40140000 	.word	0x40140000
 8009e18:	9b02      	ldr	r3, [sp, #8]
 8009e1a:	e780      	b.n	8009d1e <_dtoa_r+0x7de>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e20:	e782      	b.n	8009d28 <_dtoa_r+0x7e8>
 8009e22:	d099      	beq.n	8009d58 <_dtoa_r+0x818>
 8009e24:	9a08      	ldr	r2, [sp, #32]
 8009e26:	331c      	adds	r3, #28
 8009e28:	441a      	add	r2, r3
 8009e2a:	4498      	add	r8, r3
 8009e2c:	441e      	add	r6, r3
 8009e2e:	9208      	str	r2, [sp, #32]
 8009e30:	e792      	b.n	8009d58 <_dtoa_r+0x818>
 8009e32:	4603      	mov	r3, r0
 8009e34:	e7f6      	b.n	8009e24 <_dtoa_r+0x8e4>
 8009e36:	9b07      	ldr	r3, [sp, #28]
 8009e38:	9704      	str	r7, [sp, #16]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	dc20      	bgt.n	8009e80 <_dtoa_r+0x940>
 8009e3e:	9300      	str	r3, [sp, #0]
 8009e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e42:	2b02      	cmp	r3, #2
 8009e44:	dd1e      	ble.n	8009e84 <_dtoa_r+0x944>
 8009e46:	9b00      	ldr	r3, [sp, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f47f aec0 	bne.w	8009bce <_dtoa_r+0x68e>
 8009e4e:	4621      	mov	r1, r4
 8009e50:	2205      	movs	r2, #5
 8009e52:	4658      	mov	r0, fp
 8009e54:	f000 f9e4 	bl	800a220 <__multadd>
 8009e58:	4601      	mov	r1, r0
 8009e5a:	4604      	mov	r4, r0
 8009e5c:	4648      	mov	r0, r9
 8009e5e:	f000 fc41 	bl	800a6e4 <__mcmp>
 8009e62:	2800      	cmp	r0, #0
 8009e64:	f77f aeb3 	ble.w	8009bce <_dtoa_r+0x68e>
 8009e68:	4656      	mov	r6, sl
 8009e6a:	2331      	movs	r3, #49	@ 0x31
 8009e6c:	f806 3b01 	strb.w	r3, [r6], #1
 8009e70:	9b04      	ldr	r3, [sp, #16]
 8009e72:	3301      	adds	r3, #1
 8009e74:	9304      	str	r3, [sp, #16]
 8009e76:	e6ae      	b.n	8009bd6 <_dtoa_r+0x696>
 8009e78:	9c07      	ldr	r4, [sp, #28]
 8009e7a:	9704      	str	r7, [sp, #16]
 8009e7c:	4625      	mov	r5, r4
 8009e7e:	e7f3      	b.n	8009e68 <_dtoa_r+0x928>
 8009e80:	9b07      	ldr	r3, [sp, #28]
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f000 8104 	beq.w	800a094 <_dtoa_r+0xb54>
 8009e8c:	2e00      	cmp	r6, #0
 8009e8e:	dd05      	ble.n	8009e9c <_dtoa_r+0x95c>
 8009e90:	4629      	mov	r1, r5
 8009e92:	4632      	mov	r2, r6
 8009e94:	4658      	mov	r0, fp
 8009e96:	f000 fbb9 	bl	800a60c <__lshift>
 8009e9a:	4605      	mov	r5, r0
 8009e9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d05a      	beq.n	8009f58 <_dtoa_r+0xa18>
 8009ea2:	6869      	ldr	r1, [r5, #4]
 8009ea4:	4658      	mov	r0, fp
 8009ea6:	f000 f959 	bl	800a15c <_Balloc>
 8009eaa:	4606      	mov	r6, r0
 8009eac:	b928      	cbnz	r0, 8009eba <_dtoa_r+0x97a>
 8009eae:	4b84      	ldr	r3, [pc, #528]	@ (800a0c0 <_dtoa_r+0xb80>)
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009eb6:	f7ff bb5a 	b.w	800956e <_dtoa_r+0x2e>
 8009eba:	692a      	ldr	r2, [r5, #16]
 8009ebc:	3202      	adds	r2, #2
 8009ebe:	0092      	lsls	r2, r2, #2
 8009ec0:	f105 010c 	add.w	r1, r5, #12
 8009ec4:	300c      	adds	r0, #12
 8009ec6:	f002 f865 	bl	800bf94 <memcpy>
 8009eca:	2201      	movs	r2, #1
 8009ecc:	4631      	mov	r1, r6
 8009ece:	4658      	mov	r0, fp
 8009ed0:	f000 fb9c 	bl	800a60c <__lshift>
 8009ed4:	f10a 0301 	add.w	r3, sl, #1
 8009ed8:	9307      	str	r3, [sp, #28]
 8009eda:	9b00      	ldr	r3, [sp, #0]
 8009edc:	4453      	add	r3, sl
 8009ede:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ee0:	9b02      	ldr	r3, [sp, #8]
 8009ee2:	f003 0301 	and.w	r3, r3, #1
 8009ee6:	462f      	mov	r7, r5
 8009ee8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009eea:	4605      	mov	r5, r0
 8009eec:	9b07      	ldr	r3, [sp, #28]
 8009eee:	4621      	mov	r1, r4
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	4648      	mov	r0, r9
 8009ef4:	9300      	str	r3, [sp, #0]
 8009ef6:	f7ff fa99 	bl	800942c <quorem>
 8009efa:	4639      	mov	r1, r7
 8009efc:	9002      	str	r0, [sp, #8]
 8009efe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009f02:	4648      	mov	r0, r9
 8009f04:	f000 fbee 	bl	800a6e4 <__mcmp>
 8009f08:	462a      	mov	r2, r5
 8009f0a:	9008      	str	r0, [sp, #32]
 8009f0c:	4621      	mov	r1, r4
 8009f0e:	4658      	mov	r0, fp
 8009f10:	f000 fc04 	bl	800a71c <__mdiff>
 8009f14:	68c2      	ldr	r2, [r0, #12]
 8009f16:	4606      	mov	r6, r0
 8009f18:	bb02      	cbnz	r2, 8009f5c <_dtoa_r+0xa1c>
 8009f1a:	4601      	mov	r1, r0
 8009f1c:	4648      	mov	r0, r9
 8009f1e:	f000 fbe1 	bl	800a6e4 <__mcmp>
 8009f22:	4602      	mov	r2, r0
 8009f24:	4631      	mov	r1, r6
 8009f26:	4658      	mov	r0, fp
 8009f28:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f2a:	f000 f957 	bl	800a1dc <_Bfree>
 8009f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f32:	9e07      	ldr	r6, [sp, #28]
 8009f34:	ea43 0102 	orr.w	r1, r3, r2
 8009f38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f3a:	4319      	orrs	r1, r3
 8009f3c:	d110      	bne.n	8009f60 <_dtoa_r+0xa20>
 8009f3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f42:	d029      	beq.n	8009f98 <_dtoa_r+0xa58>
 8009f44:	9b08      	ldr	r3, [sp, #32]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	dd02      	ble.n	8009f50 <_dtoa_r+0xa10>
 8009f4a:	9b02      	ldr	r3, [sp, #8]
 8009f4c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009f50:	9b00      	ldr	r3, [sp, #0]
 8009f52:	f883 8000 	strb.w	r8, [r3]
 8009f56:	e63f      	b.n	8009bd8 <_dtoa_r+0x698>
 8009f58:	4628      	mov	r0, r5
 8009f5a:	e7bb      	b.n	8009ed4 <_dtoa_r+0x994>
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	e7e1      	b.n	8009f24 <_dtoa_r+0x9e4>
 8009f60:	9b08      	ldr	r3, [sp, #32]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	db04      	blt.n	8009f70 <_dtoa_r+0xa30>
 8009f66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009f68:	430b      	orrs	r3, r1
 8009f6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009f6c:	430b      	orrs	r3, r1
 8009f6e:	d120      	bne.n	8009fb2 <_dtoa_r+0xa72>
 8009f70:	2a00      	cmp	r2, #0
 8009f72:	dded      	ble.n	8009f50 <_dtoa_r+0xa10>
 8009f74:	4649      	mov	r1, r9
 8009f76:	2201      	movs	r2, #1
 8009f78:	4658      	mov	r0, fp
 8009f7a:	f000 fb47 	bl	800a60c <__lshift>
 8009f7e:	4621      	mov	r1, r4
 8009f80:	4681      	mov	r9, r0
 8009f82:	f000 fbaf 	bl	800a6e4 <__mcmp>
 8009f86:	2800      	cmp	r0, #0
 8009f88:	dc03      	bgt.n	8009f92 <_dtoa_r+0xa52>
 8009f8a:	d1e1      	bne.n	8009f50 <_dtoa_r+0xa10>
 8009f8c:	f018 0f01 	tst.w	r8, #1
 8009f90:	d0de      	beq.n	8009f50 <_dtoa_r+0xa10>
 8009f92:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f96:	d1d8      	bne.n	8009f4a <_dtoa_r+0xa0a>
 8009f98:	9a00      	ldr	r2, [sp, #0]
 8009f9a:	2339      	movs	r3, #57	@ 0x39
 8009f9c:	7013      	strb	r3, [r2, #0]
 8009f9e:	4633      	mov	r3, r6
 8009fa0:	461e      	mov	r6, r3
 8009fa2:	3b01      	subs	r3, #1
 8009fa4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009fa8:	2a39      	cmp	r2, #57	@ 0x39
 8009faa:	d052      	beq.n	800a052 <_dtoa_r+0xb12>
 8009fac:	3201      	adds	r2, #1
 8009fae:	701a      	strb	r2, [r3, #0]
 8009fb0:	e612      	b.n	8009bd8 <_dtoa_r+0x698>
 8009fb2:	2a00      	cmp	r2, #0
 8009fb4:	dd07      	ble.n	8009fc6 <_dtoa_r+0xa86>
 8009fb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009fba:	d0ed      	beq.n	8009f98 <_dtoa_r+0xa58>
 8009fbc:	9a00      	ldr	r2, [sp, #0]
 8009fbe:	f108 0301 	add.w	r3, r8, #1
 8009fc2:	7013      	strb	r3, [r2, #0]
 8009fc4:	e608      	b.n	8009bd8 <_dtoa_r+0x698>
 8009fc6:	9b07      	ldr	r3, [sp, #28]
 8009fc8:	9a07      	ldr	r2, [sp, #28]
 8009fca:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009fce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d028      	beq.n	800a026 <_dtoa_r+0xae6>
 8009fd4:	4649      	mov	r1, r9
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	220a      	movs	r2, #10
 8009fda:	4658      	mov	r0, fp
 8009fdc:	f000 f920 	bl	800a220 <__multadd>
 8009fe0:	42af      	cmp	r7, r5
 8009fe2:	4681      	mov	r9, r0
 8009fe4:	f04f 0300 	mov.w	r3, #0
 8009fe8:	f04f 020a 	mov.w	r2, #10
 8009fec:	4639      	mov	r1, r7
 8009fee:	4658      	mov	r0, fp
 8009ff0:	d107      	bne.n	800a002 <_dtoa_r+0xac2>
 8009ff2:	f000 f915 	bl	800a220 <__multadd>
 8009ff6:	4607      	mov	r7, r0
 8009ff8:	4605      	mov	r5, r0
 8009ffa:	9b07      	ldr	r3, [sp, #28]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	9307      	str	r3, [sp, #28]
 800a000:	e774      	b.n	8009eec <_dtoa_r+0x9ac>
 800a002:	f000 f90d 	bl	800a220 <__multadd>
 800a006:	4629      	mov	r1, r5
 800a008:	4607      	mov	r7, r0
 800a00a:	2300      	movs	r3, #0
 800a00c:	220a      	movs	r2, #10
 800a00e:	4658      	mov	r0, fp
 800a010:	f000 f906 	bl	800a220 <__multadd>
 800a014:	4605      	mov	r5, r0
 800a016:	e7f0      	b.n	8009ffa <_dtoa_r+0xaba>
 800a018:	9b00      	ldr	r3, [sp, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	bfcc      	ite	gt
 800a01e:	461e      	movgt	r6, r3
 800a020:	2601      	movle	r6, #1
 800a022:	4456      	add	r6, sl
 800a024:	2700      	movs	r7, #0
 800a026:	4649      	mov	r1, r9
 800a028:	2201      	movs	r2, #1
 800a02a:	4658      	mov	r0, fp
 800a02c:	f000 faee 	bl	800a60c <__lshift>
 800a030:	4621      	mov	r1, r4
 800a032:	4681      	mov	r9, r0
 800a034:	f000 fb56 	bl	800a6e4 <__mcmp>
 800a038:	2800      	cmp	r0, #0
 800a03a:	dcb0      	bgt.n	8009f9e <_dtoa_r+0xa5e>
 800a03c:	d102      	bne.n	800a044 <_dtoa_r+0xb04>
 800a03e:	f018 0f01 	tst.w	r8, #1
 800a042:	d1ac      	bne.n	8009f9e <_dtoa_r+0xa5e>
 800a044:	4633      	mov	r3, r6
 800a046:	461e      	mov	r6, r3
 800a048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a04c:	2a30      	cmp	r2, #48	@ 0x30
 800a04e:	d0fa      	beq.n	800a046 <_dtoa_r+0xb06>
 800a050:	e5c2      	b.n	8009bd8 <_dtoa_r+0x698>
 800a052:	459a      	cmp	sl, r3
 800a054:	d1a4      	bne.n	8009fa0 <_dtoa_r+0xa60>
 800a056:	9b04      	ldr	r3, [sp, #16]
 800a058:	3301      	adds	r3, #1
 800a05a:	9304      	str	r3, [sp, #16]
 800a05c:	2331      	movs	r3, #49	@ 0x31
 800a05e:	f88a 3000 	strb.w	r3, [sl]
 800a062:	e5b9      	b.n	8009bd8 <_dtoa_r+0x698>
 800a064:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a066:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a0c4 <_dtoa_r+0xb84>
 800a06a:	b11b      	cbz	r3, 800a074 <_dtoa_r+0xb34>
 800a06c:	f10a 0308 	add.w	r3, sl, #8
 800a070:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a072:	6013      	str	r3, [r2, #0]
 800a074:	4650      	mov	r0, sl
 800a076:	b019      	add	sp, #100	@ 0x64
 800a078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a07c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a07e:	2b01      	cmp	r3, #1
 800a080:	f77f ae37 	ble.w	8009cf2 <_dtoa_r+0x7b2>
 800a084:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a086:	930a      	str	r3, [sp, #40]	@ 0x28
 800a088:	2001      	movs	r0, #1
 800a08a:	e655      	b.n	8009d38 <_dtoa_r+0x7f8>
 800a08c:	9b00      	ldr	r3, [sp, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	f77f aed6 	ble.w	8009e40 <_dtoa_r+0x900>
 800a094:	4656      	mov	r6, sl
 800a096:	4621      	mov	r1, r4
 800a098:	4648      	mov	r0, r9
 800a09a:	f7ff f9c7 	bl	800942c <quorem>
 800a09e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a0a2:	f806 8b01 	strb.w	r8, [r6], #1
 800a0a6:	9b00      	ldr	r3, [sp, #0]
 800a0a8:	eba6 020a 	sub.w	r2, r6, sl
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	ddb3      	ble.n	800a018 <_dtoa_r+0xad8>
 800a0b0:	4649      	mov	r1, r9
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	220a      	movs	r2, #10
 800a0b6:	4658      	mov	r0, fp
 800a0b8:	f000 f8b2 	bl	800a220 <__multadd>
 800a0bc:	4681      	mov	r9, r0
 800a0be:	e7ea      	b.n	800a096 <_dtoa_r+0xb56>
 800a0c0:	0800d0e5 	.word	0x0800d0e5
 800a0c4:	0800d069 	.word	0x0800d069

0800a0c8 <_free_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4605      	mov	r5, r0
 800a0cc:	2900      	cmp	r1, #0
 800a0ce:	d041      	beq.n	800a154 <_free_r+0x8c>
 800a0d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0d4:	1f0c      	subs	r4, r1, #4
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	bfb8      	it	lt
 800a0da:	18e4      	addlt	r4, r4, r3
 800a0dc:	f7fe f85c 	bl	8008198 <__malloc_lock>
 800a0e0:	4a1d      	ldr	r2, [pc, #116]	@ (800a158 <_free_r+0x90>)
 800a0e2:	6813      	ldr	r3, [r2, #0]
 800a0e4:	b933      	cbnz	r3, 800a0f4 <_free_r+0x2c>
 800a0e6:	6063      	str	r3, [r4, #4]
 800a0e8:	6014      	str	r4, [r2, #0]
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0f0:	f7fe b858 	b.w	80081a4 <__malloc_unlock>
 800a0f4:	42a3      	cmp	r3, r4
 800a0f6:	d908      	bls.n	800a10a <_free_r+0x42>
 800a0f8:	6820      	ldr	r0, [r4, #0]
 800a0fa:	1821      	adds	r1, r4, r0
 800a0fc:	428b      	cmp	r3, r1
 800a0fe:	bf01      	itttt	eq
 800a100:	6819      	ldreq	r1, [r3, #0]
 800a102:	685b      	ldreq	r3, [r3, #4]
 800a104:	1809      	addeq	r1, r1, r0
 800a106:	6021      	streq	r1, [r4, #0]
 800a108:	e7ed      	b.n	800a0e6 <_free_r+0x1e>
 800a10a:	461a      	mov	r2, r3
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	b10b      	cbz	r3, 800a114 <_free_r+0x4c>
 800a110:	42a3      	cmp	r3, r4
 800a112:	d9fa      	bls.n	800a10a <_free_r+0x42>
 800a114:	6811      	ldr	r1, [r2, #0]
 800a116:	1850      	adds	r0, r2, r1
 800a118:	42a0      	cmp	r0, r4
 800a11a:	d10b      	bne.n	800a134 <_free_r+0x6c>
 800a11c:	6820      	ldr	r0, [r4, #0]
 800a11e:	4401      	add	r1, r0
 800a120:	1850      	adds	r0, r2, r1
 800a122:	4283      	cmp	r3, r0
 800a124:	6011      	str	r1, [r2, #0]
 800a126:	d1e0      	bne.n	800a0ea <_free_r+0x22>
 800a128:	6818      	ldr	r0, [r3, #0]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	6053      	str	r3, [r2, #4]
 800a12e:	4408      	add	r0, r1
 800a130:	6010      	str	r0, [r2, #0]
 800a132:	e7da      	b.n	800a0ea <_free_r+0x22>
 800a134:	d902      	bls.n	800a13c <_free_r+0x74>
 800a136:	230c      	movs	r3, #12
 800a138:	602b      	str	r3, [r5, #0]
 800a13a:	e7d6      	b.n	800a0ea <_free_r+0x22>
 800a13c:	6820      	ldr	r0, [r4, #0]
 800a13e:	1821      	adds	r1, r4, r0
 800a140:	428b      	cmp	r3, r1
 800a142:	bf04      	itt	eq
 800a144:	6819      	ldreq	r1, [r3, #0]
 800a146:	685b      	ldreq	r3, [r3, #4]
 800a148:	6063      	str	r3, [r4, #4]
 800a14a:	bf04      	itt	eq
 800a14c:	1809      	addeq	r1, r1, r0
 800a14e:	6021      	streq	r1, [r4, #0]
 800a150:	6054      	str	r4, [r2, #4]
 800a152:	e7ca      	b.n	800a0ea <_free_r+0x22>
 800a154:	bd38      	pop	{r3, r4, r5, pc}
 800a156:	bf00      	nop
 800a158:	20000430 	.word	0x20000430

0800a15c <_Balloc>:
 800a15c:	b570      	push	{r4, r5, r6, lr}
 800a15e:	69c6      	ldr	r6, [r0, #28]
 800a160:	4604      	mov	r4, r0
 800a162:	460d      	mov	r5, r1
 800a164:	b976      	cbnz	r6, 800a184 <_Balloc+0x28>
 800a166:	2010      	movs	r0, #16
 800a168:	f7fd ff64 	bl	8008034 <malloc>
 800a16c:	4602      	mov	r2, r0
 800a16e:	61e0      	str	r0, [r4, #28]
 800a170:	b920      	cbnz	r0, 800a17c <_Balloc+0x20>
 800a172:	4b18      	ldr	r3, [pc, #96]	@ (800a1d4 <_Balloc+0x78>)
 800a174:	4818      	ldr	r0, [pc, #96]	@ (800a1d8 <_Balloc+0x7c>)
 800a176:	216b      	movs	r1, #107	@ 0x6b
 800a178:	f001 ff22 	bl	800bfc0 <__assert_func>
 800a17c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a180:	6006      	str	r6, [r0, #0]
 800a182:	60c6      	str	r6, [r0, #12]
 800a184:	69e6      	ldr	r6, [r4, #28]
 800a186:	68f3      	ldr	r3, [r6, #12]
 800a188:	b183      	cbz	r3, 800a1ac <_Balloc+0x50>
 800a18a:	69e3      	ldr	r3, [r4, #28]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a192:	b9b8      	cbnz	r0, 800a1c4 <_Balloc+0x68>
 800a194:	2101      	movs	r1, #1
 800a196:	fa01 f605 	lsl.w	r6, r1, r5
 800a19a:	1d72      	adds	r2, r6, #5
 800a19c:	0092      	lsls	r2, r2, #2
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f001 ff2c 	bl	800bffc <_calloc_r>
 800a1a4:	b160      	cbz	r0, 800a1c0 <_Balloc+0x64>
 800a1a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1aa:	e00e      	b.n	800a1ca <_Balloc+0x6e>
 800a1ac:	2221      	movs	r2, #33	@ 0x21
 800a1ae:	2104      	movs	r1, #4
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f001 ff23 	bl	800bffc <_calloc_r>
 800a1b6:	69e3      	ldr	r3, [r4, #28]
 800a1b8:	60f0      	str	r0, [r6, #12]
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1e4      	bne.n	800a18a <_Balloc+0x2e>
 800a1c0:	2000      	movs	r0, #0
 800a1c2:	bd70      	pop	{r4, r5, r6, pc}
 800a1c4:	6802      	ldr	r2, [r0, #0]
 800a1c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1d0:	e7f7      	b.n	800a1c2 <_Balloc+0x66>
 800a1d2:	bf00      	nop
 800a1d4:	0800d076 	.word	0x0800d076
 800a1d8:	0800d0f6 	.word	0x0800d0f6

0800a1dc <_Bfree>:
 800a1dc:	b570      	push	{r4, r5, r6, lr}
 800a1de:	69c6      	ldr	r6, [r0, #28]
 800a1e0:	4605      	mov	r5, r0
 800a1e2:	460c      	mov	r4, r1
 800a1e4:	b976      	cbnz	r6, 800a204 <_Bfree+0x28>
 800a1e6:	2010      	movs	r0, #16
 800a1e8:	f7fd ff24 	bl	8008034 <malloc>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	61e8      	str	r0, [r5, #28]
 800a1f0:	b920      	cbnz	r0, 800a1fc <_Bfree+0x20>
 800a1f2:	4b09      	ldr	r3, [pc, #36]	@ (800a218 <_Bfree+0x3c>)
 800a1f4:	4809      	ldr	r0, [pc, #36]	@ (800a21c <_Bfree+0x40>)
 800a1f6:	218f      	movs	r1, #143	@ 0x8f
 800a1f8:	f001 fee2 	bl	800bfc0 <__assert_func>
 800a1fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a200:	6006      	str	r6, [r0, #0]
 800a202:	60c6      	str	r6, [r0, #12]
 800a204:	b13c      	cbz	r4, 800a216 <_Bfree+0x3a>
 800a206:	69eb      	ldr	r3, [r5, #28]
 800a208:	6862      	ldr	r2, [r4, #4]
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a210:	6021      	str	r1, [r4, #0]
 800a212:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a216:	bd70      	pop	{r4, r5, r6, pc}
 800a218:	0800d076 	.word	0x0800d076
 800a21c:	0800d0f6 	.word	0x0800d0f6

0800a220 <__multadd>:
 800a220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a224:	690d      	ldr	r5, [r1, #16]
 800a226:	4607      	mov	r7, r0
 800a228:	460c      	mov	r4, r1
 800a22a:	461e      	mov	r6, r3
 800a22c:	f101 0c14 	add.w	ip, r1, #20
 800a230:	2000      	movs	r0, #0
 800a232:	f8dc 3000 	ldr.w	r3, [ip]
 800a236:	b299      	uxth	r1, r3
 800a238:	fb02 6101 	mla	r1, r2, r1, r6
 800a23c:	0c1e      	lsrs	r6, r3, #16
 800a23e:	0c0b      	lsrs	r3, r1, #16
 800a240:	fb02 3306 	mla	r3, r2, r6, r3
 800a244:	b289      	uxth	r1, r1
 800a246:	3001      	adds	r0, #1
 800a248:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a24c:	4285      	cmp	r5, r0
 800a24e:	f84c 1b04 	str.w	r1, [ip], #4
 800a252:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a256:	dcec      	bgt.n	800a232 <__multadd+0x12>
 800a258:	b30e      	cbz	r6, 800a29e <__multadd+0x7e>
 800a25a:	68a3      	ldr	r3, [r4, #8]
 800a25c:	42ab      	cmp	r3, r5
 800a25e:	dc19      	bgt.n	800a294 <__multadd+0x74>
 800a260:	6861      	ldr	r1, [r4, #4]
 800a262:	4638      	mov	r0, r7
 800a264:	3101      	adds	r1, #1
 800a266:	f7ff ff79 	bl	800a15c <_Balloc>
 800a26a:	4680      	mov	r8, r0
 800a26c:	b928      	cbnz	r0, 800a27a <__multadd+0x5a>
 800a26e:	4602      	mov	r2, r0
 800a270:	4b0c      	ldr	r3, [pc, #48]	@ (800a2a4 <__multadd+0x84>)
 800a272:	480d      	ldr	r0, [pc, #52]	@ (800a2a8 <__multadd+0x88>)
 800a274:	21ba      	movs	r1, #186	@ 0xba
 800a276:	f001 fea3 	bl	800bfc0 <__assert_func>
 800a27a:	6922      	ldr	r2, [r4, #16]
 800a27c:	3202      	adds	r2, #2
 800a27e:	f104 010c 	add.w	r1, r4, #12
 800a282:	0092      	lsls	r2, r2, #2
 800a284:	300c      	adds	r0, #12
 800a286:	f001 fe85 	bl	800bf94 <memcpy>
 800a28a:	4621      	mov	r1, r4
 800a28c:	4638      	mov	r0, r7
 800a28e:	f7ff ffa5 	bl	800a1dc <_Bfree>
 800a292:	4644      	mov	r4, r8
 800a294:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a298:	3501      	adds	r5, #1
 800a29a:	615e      	str	r6, [r3, #20]
 800a29c:	6125      	str	r5, [r4, #16]
 800a29e:	4620      	mov	r0, r4
 800a2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2a4:	0800d0e5 	.word	0x0800d0e5
 800a2a8:	0800d0f6 	.word	0x0800d0f6

0800a2ac <__s2b>:
 800a2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2b0:	460c      	mov	r4, r1
 800a2b2:	4615      	mov	r5, r2
 800a2b4:	461f      	mov	r7, r3
 800a2b6:	2209      	movs	r2, #9
 800a2b8:	3308      	adds	r3, #8
 800a2ba:	4606      	mov	r6, r0
 800a2bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	db09      	blt.n	800a2dc <__s2b+0x30>
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	f7ff ff47 	bl	800a15c <_Balloc>
 800a2ce:	b940      	cbnz	r0, 800a2e2 <__s2b+0x36>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	4b19      	ldr	r3, [pc, #100]	@ (800a338 <__s2b+0x8c>)
 800a2d4:	4819      	ldr	r0, [pc, #100]	@ (800a33c <__s2b+0x90>)
 800a2d6:	21d3      	movs	r1, #211	@ 0xd3
 800a2d8:	f001 fe72 	bl	800bfc0 <__assert_func>
 800a2dc:	0052      	lsls	r2, r2, #1
 800a2de:	3101      	adds	r1, #1
 800a2e0:	e7f0      	b.n	800a2c4 <__s2b+0x18>
 800a2e2:	9b08      	ldr	r3, [sp, #32]
 800a2e4:	6143      	str	r3, [r0, #20]
 800a2e6:	2d09      	cmp	r5, #9
 800a2e8:	f04f 0301 	mov.w	r3, #1
 800a2ec:	6103      	str	r3, [r0, #16]
 800a2ee:	dd16      	ble.n	800a31e <__s2b+0x72>
 800a2f0:	f104 0909 	add.w	r9, r4, #9
 800a2f4:	46c8      	mov	r8, r9
 800a2f6:	442c      	add	r4, r5
 800a2f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a2fc:	4601      	mov	r1, r0
 800a2fe:	3b30      	subs	r3, #48	@ 0x30
 800a300:	220a      	movs	r2, #10
 800a302:	4630      	mov	r0, r6
 800a304:	f7ff ff8c 	bl	800a220 <__multadd>
 800a308:	45a0      	cmp	r8, r4
 800a30a:	d1f5      	bne.n	800a2f8 <__s2b+0x4c>
 800a30c:	f1a5 0408 	sub.w	r4, r5, #8
 800a310:	444c      	add	r4, r9
 800a312:	1b2d      	subs	r5, r5, r4
 800a314:	1963      	adds	r3, r4, r5
 800a316:	42bb      	cmp	r3, r7
 800a318:	db04      	blt.n	800a324 <__s2b+0x78>
 800a31a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a31e:	340a      	adds	r4, #10
 800a320:	2509      	movs	r5, #9
 800a322:	e7f6      	b.n	800a312 <__s2b+0x66>
 800a324:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a328:	4601      	mov	r1, r0
 800a32a:	3b30      	subs	r3, #48	@ 0x30
 800a32c:	220a      	movs	r2, #10
 800a32e:	4630      	mov	r0, r6
 800a330:	f7ff ff76 	bl	800a220 <__multadd>
 800a334:	e7ee      	b.n	800a314 <__s2b+0x68>
 800a336:	bf00      	nop
 800a338:	0800d0e5 	.word	0x0800d0e5
 800a33c:	0800d0f6 	.word	0x0800d0f6

0800a340 <__hi0bits>:
 800a340:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a344:	4603      	mov	r3, r0
 800a346:	bf36      	itet	cc
 800a348:	0403      	lslcc	r3, r0, #16
 800a34a:	2000      	movcs	r0, #0
 800a34c:	2010      	movcc	r0, #16
 800a34e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a352:	bf3c      	itt	cc
 800a354:	021b      	lslcc	r3, r3, #8
 800a356:	3008      	addcc	r0, #8
 800a358:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a35c:	bf3c      	itt	cc
 800a35e:	011b      	lslcc	r3, r3, #4
 800a360:	3004      	addcc	r0, #4
 800a362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a366:	bf3c      	itt	cc
 800a368:	009b      	lslcc	r3, r3, #2
 800a36a:	3002      	addcc	r0, #2
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	db05      	blt.n	800a37c <__hi0bits+0x3c>
 800a370:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a374:	f100 0001 	add.w	r0, r0, #1
 800a378:	bf08      	it	eq
 800a37a:	2020      	moveq	r0, #32
 800a37c:	4770      	bx	lr

0800a37e <__lo0bits>:
 800a37e:	6803      	ldr	r3, [r0, #0]
 800a380:	4602      	mov	r2, r0
 800a382:	f013 0007 	ands.w	r0, r3, #7
 800a386:	d00b      	beq.n	800a3a0 <__lo0bits+0x22>
 800a388:	07d9      	lsls	r1, r3, #31
 800a38a:	d421      	bmi.n	800a3d0 <__lo0bits+0x52>
 800a38c:	0798      	lsls	r0, r3, #30
 800a38e:	bf49      	itett	mi
 800a390:	085b      	lsrmi	r3, r3, #1
 800a392:	089b      	lsrpl	r3, r3, #2
 800a394:	2001      	movmi	r0, #1
 800a396:	6013      	strmi	r3, [r2, #0]
 800a398:	bf5c      	itt	pl
 800a39a:	6013      	strpl	r3, [r2, #0]
 800a39c:	2002      	movpl	r0, #2
 800a39e:	4770      	bx	lr
 800a3a0:	b299      	uxth	r1, r3
 800a3a2:	b909      	cbnz	r1, 800a3a8 <__lo0bits+0x2a>
 800a3a4:	0c1b      	lsrs	r3, r3, #16
 800a3a6:	2010      	movs	r0, #16
 800a3a8:	b2d9      	uxtb	r1, r3
 800a3aa:	b909      	cbnz	r1, 800a3b0 <__lo0bits+0x32>
 800a3ac:	3008      	adds	r0, #8
 800a3ae:	0a1b      	lsrs	r3, r3, #8
 800a3b0:	0719      	lsls	r1, r3, #28
 800a3b2:	bf04      	itt	eq
 800a3b4:	091b      	lsreq	r3, r3, #4
 800a3b6:	3004      	addeq	r0, #4
 800a3b8:	0799      	lsls	r1, r3, #30
 800a3ba:	bf04      	itt	eq
 800a3bc:	089b      	lsreq	r3, r3, #2
 800a3be:	3002      	addeq	r0, #2
 800a3c0:	07d9      	lsls	r1, r3, #31
 800a3c2:	d403      	bmi.n	800a3cc <__lo0bits+0x4e>
 800a3c4:	085b      	lsrs	r3, r3, #1
 800a3c6:	f100 0001 	add.w	r0, r0, #1
 800a3ca:	d003      	beq.n	800a3d4 <__lo0bits+0x56>
 800a3cc:	6013      	str	r3, [r2, #0]
 800a3ce:	4770      	bx	lr
 800a3d0:	2000      	movs	r0, #0
 800a3d2:	4770      	bx	lr
 800a3d4:	2020      	movs	r0, #32
 800a3d6:	4770      	bx	lr

0800a3d8 <__i2b>:
 800a3d8:	b510      	push	{r4, lr}
 800a3da:	460c      	mov	r4, r1
 800a3dc:	2101      	movs	r1, #1
 800a3de:	f7ff febd 	bl	800a15c <_Balloc>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	b928      	cbnz	r0, 800a3f2 <__i2b+0x1a>
 800a3e6:	4b05      	ldr	r3, [pc, #20]	@ (800a3fc <__i2b+0x24>)
 800a3e8:	4805      	ldr	r0, [pc, #20]	@ (800a400 <__i2b+0x28>)
 800a3ea:	f240 1145 	movw	r1, #325	@ 0x145
 800a3ee:	f001 fde7 	bl	800bfc0 <__assert_func>
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	6144      	str	r4, [r0, #20]
 800a3f6:	6103      	str	r3, [r0, #16]
 800a3f8:	bd10      	pop	{r4, pc}
 800a3fa:	bf00      	nop
 800a3fc:	0800d0e5 	.word	0x0800d0e5
 800a400:	0800d0f6 	.word	0x0800d0f6

0800a404 <__multiply>:
 800a404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a408:	4614      	mov	r4, r2
 800a40a:	690a      	ldr	r2, [r1, #16]
 800a40c:	6923      	ldr	r3, [r4, #16]
 800a40e:	429a      	cmp	r2, r3
 800a410:	bfa8      	it	ge
 800a412:	4623      	movge	r3, r4
 800a414:	460f      	mov	r7, r1
 800a416:	bfa4      	itt	ge
 800a418:	460c      	movge	r4, r1
 800a41a:	461f      	movge	r7, r3
 800a41c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a420:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a424:	68a3      	ldr	r3, [r4, #8]
 800a426:	6861      	ldr	r1, [r4, #4]
 800a428:	eb0a 0609 	add.w	r6, sl, r9
 800a42c:	42b3      	cmp	r3, r6
 800a42e:	b085      	sub	sp, #20
 800a430:	bfb8      	it	lt
 800a432:	3101      	addlt	r1, #1
 800a434:	f7ff fe92 	bl	800a15c <_Balloc>
 800a438:	b930      	cbnz	r0, 800a448 <__multiply+0x44>
 800a43a:	4602      	mov	r2, r0
 800a43c:	4b44      	ldr	r3, [pc, #272]	@ (800a550 <__multiply+0x14c>)
 800a43e:	4845      	ldr	r0, [pc, #276]	@ (800a554 <__multiply+0x150>)
 800a440:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a444:	f001 fdbc 	bl	800bfc0 <__assert_func>
 800a448:	f100 0514 	add.w	r5, r0, #20
 800a44c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a450:	462b      	mov	r3, r5
 800a452:	2200      	movs	r2, #0
 800a454:	4543      	cmp	r3, r8
 800a456:	d321      	bcc.n	800a49c <__multiply+0x98>
 800a458:	f107 0114 	add.w	r1, r7, #20
 800a45c:	f104 0214 	add.w	r2, r4, #20
 800a460:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a464:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a468:	9302      	str	r3, [sp, #8]
 800a46a:	1b13      	subs	r3, r2, r4
 800a46c:	3b15      	subs	r3, #21
 800a46e:	f023 0303 	bic.w	r3, r3, #3
 800a472:	3304      	adds	r3, #4
 800a474:	f104 0715 	add.w	r7, r4, #21
 800a478:	42ba      	cmp	r2, r7
 800a47a:	bf38      	it	cc
 800a47c:	2304      	movcc	r3, #4
 800a47e:	9301      	str	r3, [sp, #4]
 800a480:	9b02      	ldr	r3, [sp, #8]
 800a482:	9103      	str	r1, [sp, #12]
 800a484:	428b      	cmp	r3, r1
 800a486:	d80c      	bhi.n	800a4a2 <__multiply+0x9e>
 800a488:	2e00      	cmp	r6, #0
 800a48a:	dd03      	ble.n	800a494 <__multiply+0x90>
 800a48c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a490:	2b00      	cmp	r3, #0
 800a492:	d05b      	beq.n	800a54c <__multiply+0x148>
 800a494:	6106      	str	r6, [r0, #16]
 800a496:	b005      	add	sp, #20
 800a498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a49c:	f843 2b04 	str.w	r2, [r3], #4
 800a4a0:	e7d8      	b.n	800a454 <__multiply+0x50>
 800a4a2:	f8b1 a000 	ldrh.w	sl, [r1]
 800a4a6:	f1ba 0f00 	cmp.w	sl, #0
 800a4aa:	d024      	beq.n	800a4f6 <__multiply+0xf2>
 800a4ac:	f104 0e14 	add.w	lr, r4, #20
 800a4b0:	46a9      	mov	r9, r5
 800a4b2:	f04f 0c00 	mov.w	ip, #0
 800a4b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a4ba:	f8d9 3000 	ldr.w	r3, [r9]
 800a4be:	fa1f fb87 	uxth.w	fp, r7
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	fb0a 330b 	mla	r3, sl, fp, r3
 800a4c8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a4cc:	f8d9 7000 	ldr.w	r7, [r9]
 800a4d0:	4463      	add	r3, ip
 800a4d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a4d6:	fb0a c70b 	mla	r7, sl, fp, ip
 800a4da:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a4e4:	4572      	cmp	r2, lr
 800a4e6:	f849 3b04 	str.w	r3, [r9], #4
 800a4ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a4ee:	d8e2      	bhi.n	800a4b6 <__multiply+0xb2>
 800a4f0:	9b01      	ldr	r3, [sp, #4]
 800a4f2:	f845 c003 	str.w	ip, [r5, r3]
 800a4f6:	9b03      	ldr	r3, [sp, #12]
 800a4f8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a4fc:	3104      	adds	r1, #4
 800a4fe:	f1b9 0f00 	cmp.w	r9, #0
 800a502:	d021      	beq.n	800a548 <__multiply+0x144>
 800a504:	682b      	ldr	r3, [r5, #0]
 800a506:	f104 0c14 	add.w	ip, r4, #20
 800a50a:	46ae      	mov	lr, r5
 800a50c:	f04f 0a00 	mov.w	sl, #0
 800a510:	f8bc b000 	ldrh.w	fp, [ip]
 800a514:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a518:	fb09 770b 	mla	r7, r9, fp, r7
 800a51c:	4457      	add	r7, sl
 800a51e:	b29b      	uxth	r3, r3
 800a520:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a524:	f84e 3b04 	str.w	r3, [lr], #4
 800a528:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a52c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a530:	f8be 3000 	ldrh.w	r3, [lr]
 800a534:	fb09 330a 	mla	r3, r9, sl, r3
 800a538:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a53c:	4562      	cmp	r2, ip
 800a53e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a542:	d8e5      	bhi.n	800a510 <__multiply+0x10c>
 800a544:	9f01      	ldr	r7, [sp, #4]
 800a546:	51eb      	str	r3, [r5, r7]
 800a548:	3504      	adds	r5, #4
 800a54a:	e799      	b.n	800a480 <__multiply+0x7c>
 800a54c:	3e01      	subs	r6, #1
 800a54e:	e79b      	b.n	800a488 <__multiply+0x84>
 800a550:	0800d0e5 	.word	0x0800d0e5
 800a554:	0800d0f6 	.word	0x0800d0f6

0800a558 <__pow5mult>:
 800a558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a55c:	4615      	mov	r5, r2
 800a55e:	f012 0203 	ands.w	r2, r2, #3
 800a562:	4607      	mov	r7, r0
 800a564:	460e      	mov	r6, r1
 800a566:	d007      	beq.n	800a578 <__pow5mult+0x20>
 800a568:	4c25      	ldr	r4, [pc, #148]	@ (800a600 <__pow5mult+0xa8>)
 800a56a:	3a01      	subs	r2, #1
 800a56c:	2300      	movs	r3, #0
 800a56e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a572:	f7ff fe55 	bl	800a220 <__multadd>
 800a576:	4606      	mov	r6, r0
 800a578:	10ad      	asrs	r5, r5, #2
 800a57a:	d03d      	beq.n	800a5f8 <__pow5mult+0xa0>
 800a57c:	69fc      	ldr	r4, [r7, #28]
 800a57e:	b97c      	cbnz	r4, 800a5a0 <__pow5mult+0x48>
 800a580:	2010      	movs	r0, #16
 800a582:	f7fd fd57 	bl	8008034 <malloc>
 800a586:	4602      	mov	r2, r0
 800a588:	61f8      	str	r0, [r7, #28]
 800a58a:	b928      	cbnz	r0, 800a598 <__pow5mult+0x40>
 800a58c:	4b1d      	ldr	r3, [pc, #116]	@ (800a604 <__pow5mult+0xac>)
 800a58e:	481e      	ldr	r0, [pc, #120]	@ (800a608 <__pow5mult+0xb0>)
 800a590:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a594:	f001 fd14 	bl	800bfc0 <__assert_func>
 800a598:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a59c:	6004      	str	r4, [r0, #0]
 800a59e:	60c4      	str	r4, [r0, #12]
 800a5a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a5a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a5a8:	b94c      	cbnz	r4, 800a5be <__pow5mult+0x66>
 800a5aa:	f240 2171 	movw	r1, #625	@ 0x271
 800a5ae:	4638      	mov	r0, r7
 800a5b0:	f7ff ff12 	bl	800a3d8 <__i2b>
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	6003      	str	r3, [r0, #0]
 800a5be:	f04f 0900 	mov.w	r9, #0
 800a5c2:	07eb      	lsls	r3, r5, #31
 800a5c4:	d50a      	bpl.n	800a5dc <__pow5mult+0x84>
 800a5c6:	4631      	mov	r1, r6
 800a5c8:	4622      	mov	r2, r4
 800a5ca:	4638      	mov	r0, r7
 800a5cc:	f7ff ff1a 	bl	800a404 <__multiply>
 800a5d0:	4631      	mov	r1, r6
 800a5d2:	4680      	mov	r8, r0
 800a5d4:	4638      	mov	r0, r7
 800a5d6:	f7ff fe01 	bl	800a1dc <_Bfree>
 800a5da:	4646      	mov	r6, r8
 800a5dc:	106d      	asrs	r5, r5, #1
 800a5de:	d00b      	beq.n	800a5f8 <__pow5mult+0xa0>
 800a5e0:	6820      	ldr	r0, [r4, #0]
 800a5e2:	b938      	cbnz	r0, 800a5f4 <__pow5mult+0x9c>
 800a5e4:	4622      	mov	r2, r4
 800a5e6:	4621      	mov	r1, r4
 800a5e8:	4638      	mov	r0, r7
 800a5ea:	f7ff ff0b 	bl	800a404 <__multiply>
 800a5ee:	6020      	str	r0, [r4, #0]
 800a5f0:	f8c0 9000 	str.w	r9, [r0]
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	e7e4      	b.n	800a5c2 <__pow5mult+0x6a>
 800a5f8:	4630      	mov	r0, r6
 800a5fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5fe:	bf00      	nop
 800a600:	0800d150 	.word	0x0800d150
 800a604:	0800d076 	.word	0x0800d076
 800a608:	0800d0f6 	.word	0x0800d0f6

0800a60c <__lshift>:
 800a60c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a610:	460c      	mov	r4, r1
 800a612:	6849      	ldr	r1, [r1, #4]
 800a614:	6923      	ldr	r3, [r4, #16]
 800a616:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a61a:	68a3      	ldr	r3, [r4, #8]
 800a61c:	4607      	mov	r7, r0
 800a61e:	4691      	mov	r9, r2
 800a620:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a624:	f108 0601 	add.w	r6, r8, #1
 800a628:	42b3      	cmp	r3, r6
 800a62a:	db0b      	blt.n	800a644 <__lshift+0x38>
 800a62c:	4638      	mov	r0, r7
 800a62e:	f7ff fd95 	bl	800a15c <_Balloc>
 800a632:	4605      	mov	r5, r0
 800a634:	b948      	cbnz	r0, 800a64a <__lshift+0x3e>
 800a636:	4602      	mov	r2, r0
 800a638:	4b28      	ldr	r3, [pc, #160]	@ (800a6dc <__lshift+0xd0>)
 800a63a:	4829      	ldr	r0, [pc, #164]	@ (800a6e0 <__lshift+0xd4>)
 800a63c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a640:	f001 fcbe 	bl	800bfc0 <__assert_func>
 800a644:	3101      	adds	r1, #1
 800a646:	005b      	lsls	r3, r3, #1
 800a648:	e7ee      	b.n	800a628 <__lshift+0x1c>
 800a64a:	2300      	movs	r3, #0
 800a64c:	f100 0114 	add.w	r1, r0, #20
 800a650:	f100 0210 	add.w	r2, r0, #16
 800a654:	4618      	mov	r0, r3
 800a656:	4553      	cmp	r3, sl
 800a658:	db33      	blt.n	800a6c2 <__lshift+0xb6>
 800a65a:	6920      	ldr	r0, [r4, #16]
 800a65c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a660:	f104 0314 	add.w	r3, r4, #20
 800a664:	f019 091f 	ands.w	r9, r9, #31
 800a668:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a66c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a670:	d02b      	beq.n	800a6ca <__lshift+0xbe>
 800a672:	f1c9 0e20 	rsb	lr, r9, #32
 800a676:	468a      	mov	sl, r1
 800a678:	2200      	movs	r2, #0
 800a67a:	6818      	ldr	r0, [r3, #0]
 800a67c:	fa00 f009 	lsl.w	r0, r0, r9
 800a680:	4310      	orrs	r0, r2
 800a682:	f84a 0b04 	str.w	r0, [sl], #4
 800a686:	f853 2b04 	ldr.w	r2, [r3], #4
 800a68a:	459c      	cmp	ip, r3
 800a68c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a690:	d8f3      	bhi.n	800a67a <__lshift+0x6e>
 800a692:	ebac 0304 	sub.w	r3, ip, r4
 800a696:	3b15      	subs	r3, #21
 800a698:	f023 0303 	bic.w	r3, r3, #3
 800a69c:	3304      	adds	r3, #4
 800a69e:	f104 0015 	add.w	r0, r4, #21
 800a6a2:	4584      	cmp	ip, r0
 800a6a4:	bf38      	it	cc
 800a6a6:	2304      	movcc	r3, #4
 800a6a8:	50ca      	str	r2, [r1, r3]
 800a6aa:	b10a      	cbz	r2, 800a6b0 <__lshift+0xa4>
 800a6ac:	f108 0602 	add.w	r6, r8, #2
 800a6b0:	3e01      	subs	r6, #1
 800a6b2:	4638      	mov	r0, r7
 800a6b4:	612e      	str	r6, [r5, #16]
 800a6b6:	4621      	mov	r1, r4
 800a6b8:	f7ff fd90 	bl	800a1dc <_Bfree>
 800a6bc:	4628      	mov	r0, r5
 800a6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6c2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	e7c5      	b.n	800a656 <__lshift+0x4a>
 800a6ca:	3904      	subs	r1, #4
 800a6cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6d0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6d4:	459c      	cmp	ip, r3
 800a6d6:	d8f9      	bhi.n	800a6cc <__lshift+0xc0>
 800a6d8:	e7ea      	b.n	800a6b0 <__lshift+0xa4>
 800a6da:	bf00      	nop
 800a6dc:	0800d0e5 	.word	0x0800d0e5
 800a6e0:	0800d0f6 	.word	0x0800d0f6

0800a6e4 <__mcmp>:
 800a6e4:	690a      	ldr	r2, [r1, #16]
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	6900      	ldr	r0, [r0, #16]
 800a6ea:	1a80      	subs	r0, r0, r2
 800a6ec:	b530      	push	{r4, r5, lr}
 800a6ee:	d10e      	bne.n	800a70e <__mcmp+0x2a>
 800a6f0:	3314      	adds	r3, #20
 800a6f2:	3114      	adds	r1, #20
 800a6f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a6f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a6fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a700:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a704:	4295      	cmp	r5, r2
 800a706:	d003      	beq.n	800a710 <__mcmp+0x2c>
 800a708:	d205      	bcs.n	800a716 <__mcmp+0x32>
 800a70a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a70e:	bd30      	pop	{r4, r5, pc}
 800a710:	42a3      	cmp	r3, r4
 800a712:	d3f3      	bcc.n	800a6fc <__mcmp+0x18>
 800a714:	e7fb      	b.n	800a70e <__mcmp+0x2a>
 800a716:	2001      	movs	r0, #1
 800a718:	e7f9      	b.n	800a70e <__mcmp+0x2a>
	...

0800a71c <__mdiff>:
 800a71c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a720:	4689      	mov	r9, r1
 800a722:	4606      	mov	r6, r0
 800a724:	4611      	mov	r1, r2
 800a726:	4648      	mov	r0, r9
 800a728:	4614      	mov	r4, r2
 800a72a:	f7ff ffdb 	bl	800a6e4 <__mcmp>
 800a72e:	1e05      	subs	r5, r0, #0
 800a730:	d112      	bne.n	800a758 <__mdiff+0x3c>
 800a732:	4629      	mov	r1, r5
 800a734:	4630      	mov	r0, r6
 800a736:	f7ff fd11 	bl	800a15c <_Balloc>
 800a73a:	4602      	mov	r2, r0
 800a73c:	b928      	cbnz	r0, 800a74a <__mdiff+0x2e>
 800a73e:	4b3f      	ldr	r3, [pc, #252]	@ (800a83c <__mdiff+0x120>)
 800a740:	f240 2137 	movw	r1, #567	@ 0x237
 800a744:	483e      	ldr	r0, [pc, #248]	@ (800a840 <__mdiff+0x124>)
 800a746:	f001 fc3b 	bl	800bfc0 <__assert_func>
 800a74a:	2301      	movs	r3, #1
 800a74c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a750:	4610      	mov	r0, r2
 800a752:	b003      	add	sp, #12
 800a754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a758:	bfbc      	itt	lt
 800a75a:	464b      	movlt	r3, r9
 800a75c:	46a1      	movlt	r9, r4
 800a75e:	4630      	mov	r0, r6
 800a760:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a764:	bfba      	itte	lt
 800a766:	461c      	movlt	r4, r3
 800a768:	2501      	movlt	r5, #1
 800a76a:	2500      	movge	r5, #0
 800a76c:	f7ff fcf6 	bl	800a15c <_Balloc>
 800a770:	4602      	mov	r2, r0
 800a772:	b918      	cbnz	r0, 800a77c <__mdiff+0x60>
 800a774:	4b31      	ldr	r3, [pc, #196]	@ (800a83c <__mdiff+0x120>)
 800a776:	f240 2145 	movw	r1, #581	@ 0x245
 800a77a:	e7e3      	b.n	800a744 <__mdiff+0x28>
 800a77c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a780:	6926      	ldr	r6, [r4, #16]
 800a782:	60c5      	str	r5, [r0, #12]
 800a784:	f109 0310 	add.w	r3, r9, #16
 800a788:	f109 0514 	add.w	r5, r9, #20
 800a78c:	f104 0e14 	add.w	lr, r4, #20
 800a790:	f100 0b14 	add.w	fp, r0, #20
 800a794:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a798:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a79c:	9301      	str	r3, [sp, #4]
 800a79e:	46d9      	mov	r9, fp
 800a7a0:	f04f 0c00 	mov.w	ip, #0
 800a7a4:	9b01      	ldr	r3, [sp, #4]
 800a7a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a7aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a7ae:	9301      	str	r3, [sp, #4]
 800a7b0:	fa1f f38a 	uxth.w	r3, sl
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	b283      	uxth	r3, r0
 800a7b8:	1acb      	subs	r3, r1, r3
 800a7ba:	0c00      	lsrs	r0, r0, #16
 800a7bc:	4463      	add	r3, ip
 800a7be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a7c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a7cc:	4576      	cmp	r6, lr
 800a7ce:	f849 3b04 	str.w	r3, [r9], #4
 800a7d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a7d6:	d8e5      	bhi.n	800a7a4 <__mdiff+0x88>
 800a7d8:	1b33      	subs	r3, r6, r4
 800a7da:	3b15      	subs	r3, #21
 800a7dc:	f023 0303 	bic.w	r3, r3, #3
 800a7e0:	3415      	adds	r4, #21
 800a7e2:	3304      	adds	r3, #4
 800a7e4:	42a6      	cmp	r6, r4
 800a7e6:	bf38      	it	cc
 800a7e8:	2304      	movcc	r3, #4
 800a7ea:	441d      	add	r5, r3
 800a7ec:	445b      	add	r3, fp
 800a7ee:	461e      	mov	r6, r3
 800a7f0:	462c      	mov	r4, r5
 800a7f2:	4544      	cmp	r4, r8
 800a7f4:	d30e      	bcc.n	800a814 <__mdiff+0xf8>
 800a7f6:	f108 0103 	add.w	r1, r8, #3
 800a7fa:	1b49      	subs	r1, r1, r5
 800a7fc:	f021 0103 	bic.w	r1, r1, #3
 800a800:	3d03      	subs	r5, #3
 800a802:	45a8      	cmp	r8, r5
 800a804:	bf38      	it	cc
 800a806:	2100      	movcc	r1, #0
 800a808:	440b      	add	r3, r1
 800a80a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a80e:	b191      	cbz	r1, 800a836 <__mdiff+0x11a>
 800a810:	6117      	str	r7, [r2, #16]
 800a812:	e79d      	b.n	800a750 <__mdiff+0x34>
 800a814:	f854 1b04 	ldr.w	r1, [r4], #4
 800a818:	46e6      	mov	lr, ip
 800a81a:	0c08      	lsrs	r0, r1, #16
 800a81c:	fa1c fc81 	uxtah	ip, ip, r1
 800a820:	4471      	add	r1, lr
 800a822:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a826:	b289      	uxth	r1, r1
 800a828:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a82c:	f846 1b04 	str.w	r1, [r6], #4
 800a830:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a834:	e7dd      	b.n	800a7f2 <__mdiff+0xd6>
 800a836:	3f01      	subs	r7, #1
 800a838:	e7e7      	b.n	800a80a <__mdiff+0xee>
 800a83a:	bf00      	nop
 800a83c:	0800d0e5 	.word	0x0800d0e5
 800a840:	0800d0f6 	.word	0x0800d0f6

0800a844 <__ulp>:
 800a844:	b082      	sub	sp, #8
 800a846:	ed8d 0b00 	vstr	d0, [sp]
 800a84a:	9a01      	ldr	r2, [sp, #4]
 800a84c:	4b0f      	ldr	r3, [pc, #60]	@ (800a88c <__ulp+0x48>)
 800a84e:	4013      	ands	r3, r2
 800a850:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a854:	2b00      	cmp	r3, #0
 800a856:	dc08      	bgt.n	800a86a <__ulp+0x26>
 800a858:	425b      	negs	r3, r3
 800a85a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a85e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a862:	da04      	bge.n	800a86e <__ulp+0x2a>
 800a864:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a868:	4113      	asrs	r3, r2
 800a86a:	2200      	movs	r2, #0
 800a86c:	e008      	b.n	800a880 <__ulp+0x3c>
 800a86e:	f1a2 0314 	sub.w	r3, r2, #20
 800a872:	2b1e      	cmp	r3, #30
 800a874:	bfda      	itte	le
 800a876:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a87a:	40da      	lsrle	r2, r3
 800a87c:	2201      	movgt	r2, #1
 800a87e:	2300      	movs	r3, #0
 800a880:	4619      	mov	r1, r3
 800a882:	4610      	mov	r0, r2
 800a884:	ec41 0b10 	vmov	d0, r0, r1
 800a888:	b002      	add	sp, #8
 800a88a:	4770      	bx	lr
 800a88c:	7ff00000 	.word	0x7ff00000

0800a890 <__b2d>:
 800a890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a894:	6906      	ldr	r6, [r0, #16]
 800a896:	f100 0814 	add.w	r8, r0, #20
 800a89a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a89e:	1f37      	subs	r7, r6, #4
 800a8a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a8a4:	4610      	mov	r0, r2
 800a8a6:	f7ff fd4b 	bl	800a340 <__hi0bits>
 800a8aa:	f1c0 0320 	rsb	r3, r0, #32
 800a8ae:	280a      	cmp	r0, #10
 800a8b0:	600b      	str	r3, [r1, #0]
 800a8b2:	491b      	ldr	r1, [pc, #108]	@ (800a920 <__b2d+0x90>)
 800a8b4:	dc15      	bgt.n	800a8e2 <__b2d+0x52>
 800a8b6:	f1c0 0c0b 	rsb	ip, r0, #11
 800a8ba:	fa22 f30c 	lsr.w	r3, r2, ip
 800a8be:	45b8      	cmp	r8, r7
 800a8c0:	ea43 0501 	orr.w	r5, r3, r1
 800a8c4:	bf34      	ite	cc
 800a8c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a8ca:	2300      	movcs	r3, #0
 800a8cc:	3015      	adds	r0, #21
 800a8ce:	fa02 f000 	lsl.w	r0, r2, r0
 800a8d2:	fa23 f30c 	lsr.w	r3, r3, ip
 800a8d6:	4303      	orrs	r3, r0
 800a8d8:	461c      	mov	r4, r3
 800a8da:	ec45 4b10 	vmov	d0, r4, r5
 800a8de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8e2:	45b8      	cmp	r8, r7
 800a8e4:	bf3a      	itte	cc
 800a8e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a8ea:	f1a6 0708 	subcc.w	r7, r6, #8
 800a8ee:	2300      	movcs	r3, #0
 800a8f0:	380b      	subs	r0, #11
 800a8f2:	d012      	beq.n	800a91a <__b2d+0x8a>
 800a8f4:	f1c0 0120 	rsb	r1, r0, #32
 800a8f8:	fa23 f401 	lsr.w	r4, r3, r1
 800a8fc:	4082      	lsls	r2, r0
 800a8fe:	4322      	orrs	r2, r4
 800a900:	4547      	cmp	r7, r8
 800a902:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a906:	bf8c      	ite	hi
 800a908:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a90c:	2200      	movls	r2, #0
 800a90e:	4083      	lsls	r3, r0
 800a910:	40ca      	lsrs	r2, r1
 800a912:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a916:	4313      	orrs	r3, r2
 800a918:	e7de      	b.n	800a8d8 <__b2d+0x48>
 800a91a:	ea42 0501 	orr.w	r5, r2, r1
 800a91e:	e7db      	b.n	800a8d8 <__b2d+0x48>
 800a920:	3ff00000 	.word	0x3ff00000

0800a924 <__d2b>:
 800a924:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a928:	460f      	mov	r7, r1
 800a92a:	2101      	movs	r1, #1
 800a92c:	ec59 8b10 	vmov	r8, r9, d0
 800a930:	4616      	mov	r6, r2
 800a932:	f7ff fc13 	bl	800a15c <_Balloc>
 800a936:	4604      	mov	r4, r0
 800a938:	b930      	cbnz	r0, 800a948 <__d2b+0x24>
 800a93a:	4602      	mov	r2, r0
 800a93c:	4b23      	ldr	r3, [pc, #140]	@ (800a9cc <__d2b+0xa8>)
 800a93e:	4824      	ldr	r0, [pc, #144]	@ (800a9d0 <__d2b+0xac>)
 800a940:	f240 310f 	movw	r1, #783	@ 0x30f
 800a944:	f001 fb3c 	bl	800bfc0 <__assert_func>
 800a948:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a94c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a950:	b10d      	cbz	r5, 800a956 <__d2b+0x32>
 800a952:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a956:	9301      	str	r3, [sp, #4]
 800a958:	f1b8 0300 	subs.w	r3, r8, #0
 800a95c:	d023      	beq.n	800a9a6 <__d2b+0x82>
 800a95e:	4668      	mov	r0, sp
 800a960:	9300      	str	r3, [sp, #0]
 800a962:	f7ff fd0c 	bl	800a37e <__lo0bits>
 800a966:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a96a:	b1d0      	cbz	r0, 800a9a2 <__d2b+0x7e>
 800a96c:	f1c0 0320 	rsb	r3, r0, #32
 800a970:	fa02 f303 	lsl.w	r3, r2, r3
 800a974:	430b      	orrs	r3, r1
 800a976:	40c2      	lsrs	r2, r0
 800a978:	6163      	str	r3, [r4, #20]
 800a97a:	9201      	str	r2, [sp, #4]
 800a97c:	9b01      	ldr	r3, [sp, #4]
 800a97e:	61a3      	str	r3, [r4, #24]
 800a980:	2b00      	cmp	r3, #0
 800a982:	bf0c      	ite	eq
 800a984:	2201      	moveq	r2, #1
 800a986:	2202      	movne	r2, #2
 800a988:	6122      	str	r2, [r4, #16]
 800a98a:	b1a5      	cbz	r5, 800a9b6 <__d2b+0x92>
 800a98c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a990:	4405      	add	r5, r0
 800a992:	603d      	str	r5, [r7, #0]
 800a994:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a998:	6030      	str	r0, [r6, #0]
 800a99a:	4620      	mov	r0, r4
 800a99c:	b003      	add	sp, #12
 800a99e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9a2:	6161      	str	r1, [r4, #20]
 800a9a4:	e7ea      	b.n	800a97c <__d2b+0x58>
 800a9a6:	a801      	add	r0, sp, #4
 800a9a8:	f7ff fce9 	bl	800a37e <__lo0bits>
 800a9ac:	9b01      	ldr	r3, [sp, #4]
 800a9ae:	6163      	str	r3, [r4, #20]
 800a9b0:	3020      	adds	r0, #32
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	e7e8      	b.n	800a988 <__d2b+0x64>
 800a9b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a9ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a9be:	6038      	str	r0, [r7, #0]
 800a9c0:	6918      	ldr	r0, [r3, #16]
 800a9c2:	f7ff fcbd 	bl	800a340 <__hi0bits>
 800a9c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a9ca:	e7e5      	b.n	800a998 <__d2b+0x74>
 800a9cc:	0800d0e5 	.word	0x0800d0e5
 800a9d0:	0800d0f6 	.word	0x0800d0f6

0800a9d4 <__ratio>:
 800a9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d8:	b085      	sub	sp, #20
 800a9da:	e9cd 1000 	strd	r1, r0, [sp]
 800a9de:	a902      	add	r1, sp, #8
 800a9e0:	f7ff ff56 	bl	800a890 <__b2d>
 800a9e4:	9800      	ldr	r0, [sp, #0]
 800a9e6:	a903      	add	r1, sp, #12
 800a9e8:	ec55 4b10 	vmov	r4, r5, d0
 800a9ec:	f7ff ff50 	bl	800a890 <__b2d>
 800a9f0:	9b01      	ldr	r3, [sp, #4]
 800a9f2:	6919      	ldr	r1, [r3, #16]
 800a9f4:	9b00      	ldr	r3, [sp, #0]
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	1ac9      	subs	r1, r1, r3
 800a9fa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a9fe:	1a9b      	subs	r3, r3, r2
 800aa00:	ec5b ab10 	vmov	sl, fp, d0
 800aa04:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	bfce      	itee	gt
 800aa0c:	462a      	movgt	r2, r5
 800aa0e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aa12:	465a      	movle	r2, fp
 800aa14:	462f      	mov	r7, r5
 800aa16:	46d9      	mov	r9, fp
 800aa18:	bfcc      	ite	gt
 800aa1a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aa1e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800aa22:	464b      	mov	r3, r9
 800aa24:	4652      	mov	r2, sl
 800aa26:	4620      	mov	r0, r4
 800aa28:	4639      	mov	r1, r7
 800aa2a:	f7f5 ff2f 	bl	800088c <__aeabi_ddiv>
 800aa2e:	ec41 0b10 	vmov	d0, r0, r1
 800aa32:	b005      	add	sp, #20
 800aa34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa38 <__copybits>:
 800aa38:	3901      	subs	r1, #1
 800aa3a:	b570      	push	{r4, r5, r6, lr}
 800aa3c:	1149      	asrs	r1, r1, #5
 800aa3e:	6914      	ldr	r4, [r2, #16]
 800aa40:	3101      	adds	r1, #1
 800aa42:	f102 0314 	add.w	r3, r2, #20
 800aa46:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aa4a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aa4e:	1f05      	subs	r5, r0, #4
 800aa50:	42a3      	cmp	r3, r4
 800aa52:	d30c      	bcc.n	800aa6e <__copybits+0x36>
 800aa54:	1aa3      	subs	r3, r4, r2
 800aa56:	3b11      	subs	r3, #17
 800aa58:	f023 0303 	bic.w	r3, r3, #3
 800aa5c:	3211      	adds	r2, #17
 800aa5e:	42a2      	cmp	r2, r4
 800aa60:	bf88      	it	hi
 800aa62:	2300      	movhi	r3, #0
 800aa64:	4418      	add	r0, r3
 800aa66:	2300      	movs	r3, #0
 800aa68:	4288      	cmp	r0, r1
 800aa6a:	d305      	bcc.n	800aa78 <__copybits+0x40>
 800aa6c:	bd70      	pop	{r4, r5, r6, pc}
 800aa6e:	f853 6b04 	ldr.w	r6, [r3], #4
 800aa72:	f845 6f04 	str.w	r6, [r5, #4]!
 800aa76:	e7eb      	b.n	800aa50 <__copybits+0x18>
 800aa78:	f840 3b04 	str.w	r3, [r0], #4
 800aa7c:	e7f4      	b.n	800aa68 <__copybits+0x30>

0800aa7e <__any_on>:
 800aa7e:	f100 0214 	add.w	r2, r0, #20
 800aa82:	6900      	ldr	r0, [r0, #16]
 800aa84:	114b      	asrs	r3, r1, #5
 800aa86:	4298      	cmp	r0, r3
 800aa88:	b510      	push	{r4, lr}
 800aa8a:	db11      	blt.n	800aab0 <__any_on+0x32>
 800aa8c:	dd0a      	ble.n	800aaa4 <__any_on+0x26>
 800aa8e:	f011 011f 	ands.w	r1, r1, #31
 800aa92:	d007      	beq.n	800aaa4 <__any_on+0x26>
 800aa94:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aa98:	fa24 f001 	lsr.w	r0, r4, r1
 800aa9c:	fa00 f101 	lsl.w	r1, r0, r1
 800aaa0:	428c      	cmp	r4, r1
 800aaa2:	d10b      	bne.n	800aabc <__any_on+0x3e>
 800aaa4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d803      	bhi.n	800aab4 <__any_on+0x36>
 800aaac:	2000      	movs	r0, #0
 800aaae:	bd10      	pop	{r4, pc}
 800aab0:	4603      	mov	r3, r0
 800aab2:	e7f7      	b.n	800aaa4 <__any_on+0x26>
 800aab4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aab8:	2900      	cmp	r1, #0
 800aaba:	d0f5      	beq.n	800aaa8 <__any_on+0x2a>
 800aabc:	2001      	movs	r0, #1
 800aabe:	e7f6      	b.n	800aaae <__any_on+0x30>

0800aac0 <sulp>:
 800aac0:	b570      	push	{r4, r5, r6, lr}
 800aac2:	4604      	mov	r4, r0
 800aac4:	460d      	mov	r5, r1
 800aac6:	ec45 4b10 	vmov	d0, r4, r5
 800aaca:	4616      	mov	r6, r2
 800aacc:	f7ff feba 	bl	800a844 <__ulp>
 800aad0:	ec51 0b10 	vmov	r0, r1, d0
 800aad4:	b17e      	cbz	r6, 800aaf6 <sulp+0x36>
 800aad6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aada:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aade:	2b00      	cmp	r3, #0
 800aae0:	dd09      	ble.n	800aaf6 <sulp+0x36>
 800aae2:	051b      	lsls	r3, r3, #20
 800aae4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800aae8:	2400      	movs	r4, #0
 800aaea:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800aaee:	4622      	mov	r2, r4
 800aaf0:	462b      	mov	r3, r5
 800aaf2:	f7f5 fda1 	bl	8000638 <__aeabi_dmul>
 800aaf6:	ec41 0b10 	vmov	d0, r0, r1
 800aafa:	bd70      	pop	{r4, r5, r6, pc}
 800aafc:	0000      	movs	r0, r0
	...

0800ab00 <_strtod_l>:
 800ab00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab04:	b09f      	sub	sp, #124	@ 0x7c
 800ab06:	460c      	mov	r4, r1
 800ab08:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ab0e:	9005      	str	r0, [sp, #20]
 800ab10:	f04f 0a00 	mov.w	sl, #0
 800ab14:	f04f 0b00 	mov.w	fp, #0
 800ab18:	460a      	mov	r2, r1
 800ab1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab1c:	7811      	ldrb	r1, [r2, #0]
 800ab1e:	292b      	cmp	r1, #43	@ 0x2b
 800ab20:	d04a      	beq.n	800abb8 <_strtod_l+0xb8>
 800ab22:	d838      	bhi.n	800ab96 <_strtod_l+0x96>
 800ab24:	290d      	cmp	r1, #13
 800ab26:	d832      	bhi.n	800ab8e <_strtod_l+0x8e>
 800ab28:	2908      	cmp	r1, #8
 800ab2a:	d832      	bhi.n	800ab92 <_strtod_l+0x92>
 800ab2c:	2900      	cmp	r1, #0
 800ab2e:	d03b      	beq.n	800aba8 <_strtod_l+0xa8>
 800ab30:	2200      	movs	r2, #0
 800ab32:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ab34:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ab36:	782a      	ldrb	r2, [r5, #0]
 800ab38:	2a30      	cmp	r2, #48	@ 0x30
 800ab3a:	f040 80b3 	bne.w	800aca4 <_strtod_l+0x1a4>
 800ab3e:	786a      	ldrb	r2, [r5, #1]
 800ab40:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ab44:	2a58      	cmp	r2, #88	@ 0x58
 800ab46:	d16e      	bne.n	800ac26 <_strtod_l+0x126>
 800ab48:	9302      	str	r3, [sp, #8]
 800ab4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab4c:	9301      	str	r3, [sp, #4]
 800ab4e:	ab1a      	add	r3, sp, #104	@ 0x68
 800ab50:	9300      	str	r3, [sp, #0]
 800ab52:	4a8e      	ldr	r2, [pc, #568]	@ (800ad8c <_strtod_l+0x28c>)
 800ab54:	9805      	ldr	r0, [sp, #20]
 800ab56:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ab58:	a919      	add	r1, sp, #100	@ 0x64
 800ab5a:	f001 facb 	bl	800c0f4 <__gethex>
 800ab5e:	f010 060f 	ands.w	r6, r0, #15
 800ab62:	4604      	mov	r4, r0
 800ab64:	d005      	beq.n	800ab72 <_strtod_l+0x72>
 800ab66:	2e06      	cmp	r6, #6
 800ab68:	d128      	bne.n	800abbc <_strtod_l+0xbc>
 800ab6a:	3501      	adds	r5, #1
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	9519      	str	r5, [sp, #100]	@ 0x64
 800ab70:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f040 858e 	bne.w	800b696 <_strtod_l+0xb96>
 800ab7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab7c:	b1cb      	cbz	r3, 800abb2 <_strtod_l+0xb2>
 800ab7e:	4652      	mov	r2, sl
 800ab80:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ab84:	ec43 2b10 	vmov	d0, r2, r3
 800ab88:	b01f      	add	sp, #124	@ 0x7c
 800ab8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab8e:	2920      	cmp	r1, #32
 800ab90:	d1ce      	bne.n	800ab30 <_strtod_l+0x30>
 800ab92:	3201      	adds	r2, #1
 800ab94:	e7c1      	b.n	800ab1a <_strtod_l+0x1a>
 800ab96:	292d      	cmp	r1, #45	@ 0x2d
 800ab98:	d1ca      	bne.n	800ab30 <_strtod_l+0x30>
 800ab9a:	2101      	movs	r1, #1
 800ab9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ab9e:	1c51      	adds	r1, r2, #1
 800aba0:	9119      	str	r1, [sp, #100]	@ 0x64
 800aba2:	7852      	ldrb	r2, [r2, #1]
 800aba4:	2a00      	cmp	r2, #0
 800aba6:	d1c5      	bne.n	800ab34 <_strtod_l+0x34>
 800aba8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800abaa:	9419      	str	r4, [sp, #100]	@ 0x64
 800abac:	2b00      	cmp	r3, #0
 800abae:	f040 8570 	bne.w	800b692 <_strtod_l+0xb92>
 800abb2:	4652      	mov	r2, sl
 800abb4:	465b      	mov	r3, fp
 800abb6:	e7e5      	b.n	800ab84 <_strtod_l+0x84>
 800abb8:	2100      	movs	r1, #0
 800abba:	e7ef      	b.n	800ab9c <_strtod_l+0x9c>
 800abbc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800abbe:	b13a      	cbz	r2, 800abd0 <_strtod_l+0xd0>
 800abc0:	2135      	movs	r1, #53	@ 0x35
 800abc2:	a81c      	add	r0, sp, #112	@ 0x70
 800abc4:	f7ff ff38 	bl	800aa38 <__copybits>
 800abc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800abca:	9805      	ldr	r0, [sp, #20]
 800abcc:	f7ff fb06 	bl	800a1dc <_Bfree>
 800abd0:	3e01      	subs	r6, #1
 800abd2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800abd4:	2e04      	cmp	r6, #4
 800abd6:	d806      	bhi.n	800abe6 <_strtod_l+0xe6>
 800abd8:	e8df f006 	tbb	[pc, r6]
 800abdc:	201d0314 	.word	0x201d0314
 800abe0:	14          	.byte	0x14
 800abe1:	00          	.byte	0x00
 800abe2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800abe6:	05e1      	lsls	r1, r4, #23
 800abe8:	bf48      	it	mi
 800abea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800abee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800abf2:	0d1b      	lsrs	r3, r3, #20
 800abf4:	051b      	lsls	r3, r3, #20
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d1bb      	bne.n	800ab72 <_strtod_l+0x72>
 800abfa:	f7fe fbe3 	bl	80093c4 <__errno>
 800abfe:	2322      	movs	r3, #34	@ 0x22
 800ac00:	6003      	str	r3, [r0, #0]
 800ac02:	e7b6      	b.n	800ab72 <_strtod_l+0x72>
 800ac04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ac08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ac0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ac10:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ac14:	e7e7      	b.n	800abe6 <_strtod_l+0xe6>
 800ac16:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ad94 <_strtod_l+0x294>
 800ac1a:	e7e4      	b.n	800abe6 <_strtod_l+0xe6>
 800ac1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ac20:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ac24:	e7df      	b.n	800abe6 <_strtod_l+0xe6>
 800ac26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac28:	1c5a      	adds	r2, r3, #1
 800ac2a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac2c:	785b      	ldrb	r3, [r3, #1]
 800ac2e:	2b30      	cmp	r3, #48	@ 0x30
 800ac30:	d0f9      	beq.n	800ac26 <_strtod_l+0x126>
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d09d      	beq.n	800ab72 <_strtod_l+0x72>
 800ac36:	2301      	movs	r3, #1
 800ac38:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac3c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac3e:	2300      	movs	r3, #0
 800ac40:	9308      	str	r3, [sp, #32]
 800ac42:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac44:	461f      	mov	r7, r3
 800ac46:	220a      	movs	r2, #10
 800ac48:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ac4a:	7805      	ldrb	r5, [r0, #0]
 800ac4c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ac50:	b2d9      	uxtb	r1, r3
 800ac52:	2909      	cmp	r1, #9
 800ac54:	d928      	bls.n	800aca8 <_strtod_l+0x1a8>
 800ac56:	494e      	ldr	r1, [pc, #312]	@ (800ad90 <_strtod_l+0x290>)
 800ac58:	2201      	movs	r2, #1
 800ac5a:	f7fe fb47 	bl	80092ec <strncmp>
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	d032      	beq.n	800acc8 <_strtod_l+0x1c8>
 800ac62:	2000      	movs	r0, #0
 800ac64:	462a      	mov	r2, r5
 800ac66:	4681      	mov	r9, r0
 800ac68:	463d      	mov	r5, r7
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2a65      	cmp	r2, #101	@ 0x65
 800ac6e:	d001      	beq.n	800ac74 <_strtod_l+0x174>
 800ac70:	2a45      	cmp	r2, #69	@ 0x45
 800ac72:	d114      	bne.n	800ac9e <_strtod_l+0x19e>
 800ac74:	b91d      	cbnz	r5, 800ac7e <_strtod_l+0x17e>
 800ac76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac78:	4302      	orrs	r2, r0
 800ac7a:	d095      	beq.n	800aba8 <_strtod_l+0xa8>
 800ac7c:	2500      	movs	r5, #0
 800ac7e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ac80:	1c62      	adds	r2, r4, #1
 800ac82:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac84:	7862      	ldrb	r2, [r4, #1]
 800ac86:	2a2b      	cmp	r2, #43	@ 0x2b
 800ac88:	d077      	beq.n	800ad7a <_strtod_l+0x27a>
 800ac8a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ac8c:	d07b      	beq.n	800ad86 <_strtod_l+0x286>
 800ac8e:	f04f 0c00 	mov.w	ip, #0
 800ac92:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ac96:	2909      	cmp	r1, #9
 800ac98:	f240 8082 	bls.w	800ada0 <_strtod_l+0x2a0>
 800ac9c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ac9e:	f04f 0800 	mov.w	r8, #0
 800aca2:	e0a2      	b.n	800adea <_strtod_l+0x2ea>
 800aca4:	2300      	movs	r3, #0
 800aca6:	e7c7      	b.n	800ac38 <_strtod_l+0x138>
 800aca8:	2f08      	cmp	r7, #8
 800acaa:	bfd5      	itete	le
 800acac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800acae:	9908      	ldrgt	r1, [sp, #32]
 800acb0:	fb02 3301 	mlale	r3, r2, r1, r3
 800acb4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800acb8:	f100 0001 	add.w	r0, r0, #1
 800acbc:	bfd4      	ite	le
 800acbe:	930a      	strle	r3, [sp, #40]	@ 0x28
 800acc0:	9308      	strgt	r3, [sp, #32]
 800acc2:	3701      	adds	r7, #1
 800acc4:	9019      	str	r0, [sp, #100]	@ 0x64
 800acc6:	e7bf      	b.n	800ac48 <_strtod_l+0x148>
 800acc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acca:	1c5a      	adds	r2, r3, #1
 800accc:	9219      	str	r2, [sp, #100]	@ 0x64
 800acce:	785a      	ldrb	r2, [r3, #1]
 800acd0:	b37f      	cbz	r7, 800ad32 <_strtod_l+0x232>
 800acd2:	4681      	mov	r9, r0
 800acd4:	463d      	mov	r5, r7
 800acd6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800acda:	2b09      	cmp	r3, #9
 800acdc:	d912      	bls.n	800ad04 <_strtod_l+0x204>
 800acde:	2301      	movs	r3, #1
 800ace0:	e7c4      	b.n	800ac6c <_strtod_l+0x16c>
 800ace2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ace4:	1c5a      	adds	r2, r3, #1
 800ace6:	9219      	str	r2, [sp, #100]	@ 0x64
 800ace8:	785a      	ldrb	r2, [r3, #1]
 800acea:	3001      	adds	r0, #1
 800acec:	2a30      	cmp	r2, #48	@ 0x30
 800acee:	d0f8      	beq.n	800ace2 <_strtod_l+0x1e2>
 800acf0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800acf4:	2b08      	cmp	r3, #8
 800acf6:	f200 84d3 	bhi.w	800b6a0 <_strtod_l+0xba0>
 800acfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acfc:	930c      	str	r3, [sp, #48]	@ 0x30
 800acfe:	4681      	mov	r9, r0
 800ad00:	2000      	movs	r0, #0
 800ad02:	4605      	mov	r5, r0
 800ad04:	3a30      	subs	r2, #48	@ 0x30
 800ad06:	f100 0301 	add.w	r3, r0, #1
 800ad0a:	d02a      	beq.n	800ad62 <_strtod_l+0x262>
 800ad0c:	4499      	add	r9, r3
 800ad0e:	eb00 0c05 	add.w	ip, r0, r5
 800ad12:	462b      	mov	r3, r5
 800ad14:	210a      	movs	r1, #10
 800ad16:	4563      	cmp	r3, ip
 800ad18:	d10d      	bne.n	800ad36 <_strtod_l+0x236>
 800ad1a:	1c69      	adds	r1, r5, #1
 800ad1c:	4401      	add	r1, r0
 800ad1e:	4428      	add	r0, r5
 800ad20:	2808      	cmp	r0, #8
 800ad22:	dc16      	bgt.n	800ad52 <_strtod_l+0x252>
 800ad24:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ad26:	230a      	movs	r3, #10
 800ad28:	fb03 2300 	mla	r3, r3, r0, r2
 800ad2c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad2e:	2300      	movs	r3, #0
 800ad30:	e018      	b.n	800ad64 <_strtod_l+0x264>
 800ad32:	4638      	mov	r0, r7
 800ad34:	e7da      	b.n	800acec <_strtod_l+0x1ec>
 800ad36:	2b08      	cmp	r3, #8
 800ad38:	f103 0301 	add.w	r3, r3, #1
 800ad3c:	dc03      	bgt.n	800ad46 <_strtod_l+0x246>
 800ad3e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ad40:	434e      	muls	r6, r1
 800ad42:	960a      	str	r6, [sp, #40]	@ 0x28
 800ad44:	e7e7      	b.n	800ad16 <_strtod_l+0x216>
 800ad46:	2b10      	cmp	r3, #16
 800ad48:	bfde      	ittt	le
 800ad4a:	9e08      	ldrle	r6, [sp, #32]
 800ad4c:	434e      	mulle	r6, r1
 800ad4e:	9608      	strle	r6, [sp, #32]
 800ad50:	e7e1      	b.n	800ad16 <_strtod_l+0x216>
 800ad52:	280f      	cmp	r0, #15
 800ad54:	dceb      	bgt.n	800ad2e <_strtod_l+0x22e>
 800ad56:	9808      	ldr	r0, [sp, #32]
 800ad58:	230a      	movs	r3, #10
 800ad5a:	fb03 2300 	mla	r3, r3, r0, r2
 800ad5e:	9308      	str	r3, [sp, #32]
 800ad60:	e7e5      	b.n	800ad2e <_strtod_l+0x22e>
 800ad62:	4629      	mov	r1, r5
 800ad64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad66:	1c50      	adds	r0, r2, #1
 800ad68:	9019      	str	r0, [sp, #100]	@ 0x64
 800ad6a:	7852      	ldrb	r2, [r2, #1]
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	460d      	mov	r5, r1
 800ad70:	e7b1      	b.n	800acd6 <_strtod_l+0x1d6>
 800ad72:	f04f 0900 	mov.w	r9, #0
 800ad76:	2301      	movs	r3, #1
 800ad78:	e77d      	b.n	800ac76 <_strtod_l+0x176>
 800ad7a:	f04f 0c00 	mov.w	ip, #0
 800ad7e:	1ca2      	adds	r2, r4, #2
 800ad80:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad82:	78a2      	ldrb	r2, [r4, #2]
 800ad84:	e785      	b.n	800ac92 <_strtod_l+0x192>
 800ad86:	f04f 0c01 	mov.w	ip, #1
 800ad8a:	e7f8      	b.n	800ad7e <_strtod_l+0x27e>
 800ad8c:	0800d268 	.word	0x0800d268
 800ad90:	0800d250 	.word	0x0800d250
 800ad94:	7ff00000 	.word	0x7ff00000
 800ad98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad9a:	1c51      	adds	r1, r2, #1
 800ad9c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ad9e:	7852      	ldrb	r2, [r2, #1]
 800ada0:	2a30      	cmp	r2, #48	@ 0x30
 800ada2:	d0f9      	beq.n	800ad98 <_strtod_l+0x298>
 800ada4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ada8:	2908      	cmp	r1, #8
 800adaa:	f63f af78 	bhi.w	800ac9e <_strtod_l+0x19e>
 800adae:	3a30      	subs	r2, #48	@ 0x30
 800adb0:	920e      	str	r2, [sp, #56]	@ 0x38
 800adb2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800adb4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800adb6:	f04f 080a 	mov.w	r8, #10
 800adba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800adbc:	1c56      	adds	r6, r2, #1
 800adbe:	9619      	str	r6, [sp, #100]	@ 0x64
 800adc0:	7852      	ldrb	r2, [r2, #1]
 800adc2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800adc6:	f1be 0f09 	cmp.w	lr, #9
 800adca:	d939      	bls.n	800ae40 <_strtod_l+0x340>
 800adcc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800adce:	1a76      	subs	r6, r6, r1
 800add0:	2e08      	cmp	r6, #8
 800add2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800add6:	dc03      	bgt.n	800ade0 <_strtod_l+0x2e0>
 800add8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800adda:	4588      	cmp	r8, r1
 800addc:	bfa8      	it	ge
 800adde:	4688      	movge	r8, r1
 800ade0:	f1bc 0f00 	cmp.w	ip, #0
 800ade4:	d001      	beq.n	800adea <_strtod_l+0x2ea>
 800ade6:	f1c8 0800 	rsb	r8, r8, #0
 800adea:	2d00      	cmp	r5, #0
 800adec:	d14e      	bne.n	800ae8c <_strtod_l+0x38c>
 800adee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800adf0:	4308      	orrs	r0, r1
 800adf2:	f47f aebe 	bne.w	800ab72 <_strtod_l+0x72>
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	f47f aed6 	bne.w	800aba8 <_strtod_l+0xa8>
 800adfc:	2a69      	cmp	r2, #105	@ 0x69
 800adfe:	d028      	beq.n	800ae52 <_strtod_l+0x352>
 800ae00:	dc25      	bgt.n	800ae4e <_strtod_l+0x34e>
 800ae02:	2a49      	cmp	r2, #73	@ 0x49
 800ae04:	d025      	beq.n	800ae52 <_strtod_l+0x352>
 800ae06:	2a4e      	cmp	r2, #78	@ 0x4e
 800ae08:	f47f aece 	bne.w	800aba8 <_strtod_l+0xa8>
 800ae0c:	499b      	ldr	r1, [pc, #620]	@ (800b07c <_strtod_l+0x57c>)
 800ae0e:	a819      	add	r0, sp, #100	@ 0x64
 800ae10:	f001 fb92 	bl	800c538 <__match>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	f43f aec7 	beq.w	800aba8 <_strtod_l+0xa8>
 800ae1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	2b28      	cmp	r3, #40	@ 0x28
 800ae20:	d12e      	bne.n	800ae80 <_strtod_l+0x380>
 800ae22:	4997      	ldr	r1, [pc, #604]	@ (800b080 <_strtod_l+0x580>)
 800ae24:	aa1c      	add	r2, sp, #112	@ 0x70
 800ae26:	a819      	add	r0, sp, #100	@ 0x64
 800ae28:	f001 fb9a 	bl	800c560 <__hexnan>
 800ae2c:	2805      	cmp	r0, #5
 800ae2e:	d127      	bne.n	800ae80 <_strtod_l+0x380>
 800ae30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ae32:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ae36:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ae3a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ae3e:	e698      	b.n	800ab72 <_strtod_l+0x72>
 800ae40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ae42:	fb08 2101 	mla	r1, r8, r1, r2
 800ae46:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ae4a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae4c:	e7b5      	b.n	800adba <_strtod_l+0x2ba>
 800ae4e:	2a6e      	cmp	r2, #110	@ 0x6e
 800ae50:	e7da      	b.n	800ae08 <_strtod_l+0x308>
 800ae52:	498c      	ldr	r1, [pc, #560]	@ (800b084 <_strtod_l+0x584>)
 800ae54:	a819      	add	r0, sp, #100	@ 0x64
 800ae56:	f001 fb6f 	bl	800c538 <__match>
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	f43f aea4 	beq.w	800aba8 <_strtod_l+0xa8>
 800ae60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae62:	4989      	ldr	r1, [pc, #548]	@ (800b088 <_strtod_l+0x588>)
 800ae64:	3b01      	subs	r3, #1
 800ae66:	a819      	add	r0, sp, #100	@ 0x64
 800ae68:	9319      	str	r3, [sp, #100]	@ 0x64
 800ae6a:	f001 fb65 	bl	800c538 <__match>
 800ae6e:	b910      	cbnz	r0, 800ae76 <_strtod_l+0x376>
 800ae70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae72:	3301      	adds	r3, #1
 800ae74:	9319      	str	r3, [sp, #100]	@ 0x64
 800ae76:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b098 <_strtod_l+0x598>
 800ae7a:	f04f 0a00 	mov.w	sl, #0
 800ae7e:	e678      	b.n	800ab72 <_strtod_l+0x72>
 800ae80:	4882      	ldr	r0, [pc, #520]	@ (800b08c <_strtod_l+0x58c>)
 800ae82:	f001 f895 	bl	800bfb0 <nan>
 800ae86:	ec5b ab10 	vmov	sl, fp, d0
 800ae8a:	e672      	b.n	800ab72 <_strtod_l+0x72>
 800ae8c:	eba8 0309 	sub.w	r3, r8, r9
 800ae90:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ae92:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae94:	2f00      	cmp	r7, #0
 800ae96:	bf08      	it	eq
 800ae98:	462f      	moveq	r7, r5
 800ae9a:	2d10      	cmp	r5, #16
 800ae9c:	462c      	mov	r4, r5
 800ae9e:	bfa8      	it	ge
 800aea0:	2410      	movge	r4, #16
 800aea2:	f7f5 fb4f 	bl	8000544 <__aeabi_ui2d>
 800aea6:	2d09      	cmp	r5, #9
 800aea8:	4682      	mov	sl, r0
 800aeaa:	468b      	mov	fp, r1
 800aeac:	dc13      	bgt.n	800aed6 <_strtod_l+0x3d6>
 800aeae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f43f ae5e 	beq.w	800ab72 <_strtod_l+0x72>
 800aeb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeb8:	dd78      	ble.n	800afac <_strtod_l+0x4ac>
 800aeba:	2b16      	cmp	r3, #22
 800aebc:	dc5f      	bgt.n	800af7e <_strtod_l+0x47e>
 800aebe:	4974      	ldr	r1, [pc, #464]	@ (800b090 <_strtod_l+0x590>)
 800aec0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aec8:	4652      	mov	r2, sl
 800aeca:	465b      	mov	r3, fp
 800aecc:	f7f5 fbb4 	bl	8000638 <__aeabi_dmul>
 800aed0:	4682      	mov	sl, r0
 800aed2:	468b      	mov	fp, r1
 800aed4:	e64d      	b.n	800ab72 <_strtod_l+0x72>
 800aed6:	4b6e      	ldr	r3, [pc, #440]	@ (800b090 <_strtod_l+0x590>)
 800aed8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aedc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800aee0:	f7f5 fbaa 	bl	8000638 <__aeabi_dmul>
 800aee4:	4682      	mov	sl, r0
 800aee6:	9808      	ldr	r0, [sp, #32]
 800aee8:	468b      	mov	fp, r1
 800aeea:	f7f5 fb2b 	bl	8000544 <__aeabi_ui2d>
 800aeee:	4602      	mov	r2, r0
 800aef0:	460b      	mov	r3, r1
 800aef2:	4650      	mov	r0, sl
 800aef4:	4659      	mov	r1, fp
 800aef6:	f7f5 f9e9 	bl	80002cc <__adddf3>
 800aefa:	2d0f      	cmp	r5, #15
 800aefc:	4682      	mov	sl, r0
 800aefe:	468b      	mov	fp, r1
 800af00:	ddd5      	ble.n	800aeae <_strtod_l+0x3ae>
 800af02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af04:	1b2c      	subs	r4, r5, r4
 800af06:	441c      	add	r4, r3
 800af08:	2c00      	cmp	r4, #0
 800af0a:	f340 8096 	ble.w	800b03a <_strtod_l+0x53a>
 800af0e:	f014 030f 	ands.w	r3, r4, #15
 800af12:	d00a      	beq.n	800af2a <_strtod_l+0x42a>
 800af14:	495e      	ldr	r1, [pc, #376]	@ (800b090 <_strtod_l+0x590>)
 800af16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af1a:	4652      	mov	r2, sl
 800af1c:	465b      	mov	r3, fp
 800af1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af22:	f7f5 fb89 	bl	8000638 <__aeabi_dmul>
 800af26:	4682      	mov	sl, r0
 800af28:	468b      	mov	fp, r1
 800af2a:	f034 040f 	bics.w	r4, r4, #15
 800af2e:	d073      	beq.n	800b018 <_strtod_l+0x518>
 800af30:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800af34:	dd48      	ble.n	800afc8 <_strtod_l+0x4c8>
 800af36:	2400      	movs	r4, #0
 800af38:	46a0      	mov	r8, r4
 800af3a:	940a      	str	r4, [sp, #40]	@ 0x28
 800af3c:	46a1      	mov	r9, r4
 800af3e:	9a05      	ldr	r2, [sp, #20]
 800af40:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b098 <_strtod_l+0x598>
 800af44:	2322      	movs	r3, #34	@ 0x22
 800af46:	6013      	str	r3, [r2, #0]
 800af48:	f04f 0a00 	mov.w	sl, #0
 800af4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af4e:	2b00      	cmp	r3, #0
 800af50:	f43f ae0f 	beq.w	800ab72 <_strtod_l+0x72>
 800af54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800af56:	9805      	ldr	r0, [sp, #20]
 800af58:	f7ff f940 	bl	800a1dc <_Bfree>
 800af5c:	9805      	ldr	r0, [sp, #20]
 800af5e:	4649      	mov	r1, r9
 800af60:	f7ff f93c 	bl	800a1dc <_Bfree>
 800af64:	9805      	ldr	r0, [sp, #20]
 800af66:	4641      	mov	r1, r8
 800af68:	f7ff f938 	bl	800a1dc <_Bfree>
 800af6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800af6e:	9805      	ldr	r0, [sp, #20]
 800af70:	f7ff f934 	bl	800a1dc <_Bfree>
 800af74:	9805      	ldr	r0, [sp, #20]
 800af76:	4621      	mov	r1, r4
 800af78:	f7ff f930 	bl	800a1dc <_Bfree>
 800af7c:	e5f9      	b.n	800ab72 <_strtod_l+0x72>
 800af7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af80:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800af84:	4293      	cmp	r3, r2
 800af86:	dbbc      	blt.n	800af02 <_strtod_l+0x402>
 800af88:	4c41      	ldr	r4, [pc, #260]	@ (800b090 <_strtod_l+0x590>)
 800af8a:	f1c5 050f 	rsb	r5, r5, #15
 800af8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800af92:	4652      	mov	r2, sl
 800af94:	465b      	mov	r3, fp
 800af96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af9a:	f7f5 fb4d 	bl	8000638 <__aeabi_dmul>
 800af9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afa0:	1b5d      	subs	r5, r3, r5
 800afa2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800afa6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800afaa:	e78f      	b.n	800aecc <_strtod_l+0x3cc>
 800afac:	3316      	adds	r3, #22
 800afae:	dba8      	blt.n	800af02 <_strtod_l+0x402>
 800afb0:	4b37      	ldr	r3, [pc, #220]	@ (800b090 <_strtod_l+0x590>)
 800afb2:	eba9 0808 	sub.w	r8, r9, r8
 800afb6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800afba:	e9d8 2300 	ldrd	r2, r3, [r8]
 800afbe:	4650      	mov	r0, sl
 800afc0:	4659      	mov	r1, fp
 800afc2:	f7f5 fc63 	bl	800088c <__aeabi_ddiv>
 800afc6:	e783      	b.n	800aed0 <_strtod_l+0x3d0>
 800afc8:	4b32      	ldr	r3, [pc, #200]	@ (800b094 <_strtod_l+0x594>)
 800afca:	9308      	str	r3, [sp, #32]
 800afcc:	2300      	movs	r3, #0
 800afce:	1124      	asrs	r4, r4, #4
 800afd0:	4650      	mov	r0, sl
 800afd2:	4659      	mov	r1, fp
 800afd4:	461e      	mov	r6, r3
 800afd6:	2c01      	cmp	r4, #1
 800afd8:	dc21      	bgt.n	800b01e <_strtod_l+0x51e>
 800afda:	b10b      	cbz	r3, 800afe0 <_strtod_l+0x4e0>
 800afdc:	4682      	mov	sl, r0
 800afde:	468b      	mov	fp, r1
 800afe0:	492c      	ldr	r1, [pc, #176]	@ (800b094 <_strtod_l+0x594>)
 800afe2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800afe6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800afea:	4652      	mov	r2, sl
 800afec:	465b      	mov	r3, fp
 800afee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aff2:	f7f5 fb21 	bl	8000638 <__aeabi_dmul>
 800aff6:	4b28      	ldr	r3, [pc, #160]	@ (800b098 <_strtod_l+0x598>)
 800aff8:	460a      	mov	r2, r1
 800affa:	400b      	ands	r3, r1
 800affc:	4927      	ldr	r1, [pc, #156]	@ (800b09c <_strtod_l+0x59c>)
 800affe:	428b      	cmp	r3, r1
 800b000:	4682      	mov	sl, r0
 800b002:	d898      	bhi.n	800af36 <_strtod_l+0x436>
 800b004:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b008:	428b      	cmp	r3, r1
 800b00a:	bf86      	itte	hi
 800b00c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b0a0 <_strtod_l+0x5a0>
 800b010:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800b014:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b018:	2300      	movs	r3, #0
 800b01a:	9308      	str	r3, [sp, #32]
 800b01c:	e07a      	b.n	800b114 <_strtod_l+0x614>
 800b01e:	07e2      	lsls	r2, r4, #31
 800b020:	d505      	bpl.n	800b02e <_strtod_l+0x52e>
 800b022:	9b08      	ldr	r3, [sp, #32]
 800b024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b028:	f7f5 fb06 	bl	8000638 <__aeabi_dmul>
 800b02c:	2301      	movs	r3, #1
 800b02e:	9a08      	ldr	r2, [sp, #32]
 800b030:	3208      	adds	r2, #8
 800b032:	3601      	adds	r6, #1
 800b034:	1064      	asrs	r4, r4, #1
 800b036:	9208      	str	r2, [sp, #32]
 800b038:	e7cd      	b.n	800afd6 <_strtod_l+0x4d6>
 800b03a:	d0ed      	beq.n	800b018 <_strtod_l+0x518>
 800b03c:	4264      	negs	r4, r4
 800b03e:	f014 020f 	ands.w	r2, r4, #15
 800b042:	d00a      	beq.n	800b05a <_strtod_l+0x55a>
 800b044:	4b12      	ldr	r3, [pc, #72]	@ (800b090 <_strtod_l+0x590>)
 800b046:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b04a:	4650      	mov	r0, sl
 800b04c:	4659      	mov	r1, fp
 800b04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b052:	f7f5 fc1b 	bl	800088c <__aeabi_ddiv>
 800b056:	4682      	mov	sl, r0
 800b058:	468b      	mov	fp, r1
 800b05a:	1124      	asrs	r4, r4, #4
 800b05c:	d0dc      	beq.n	800b018 <_strtod_l+0x518>
 800b05e:	2c1f      	cmp	r4, #31
 800b060:	dd20      	ble.n	800b0a4 <_strtod_l+0x5a4>
 800b062:	2400      	movs	r4, #0
 800b064:	46a0      	mov	r8, r4
 800b066:	940a      	str	r4, [sp, #40]	@ 0x28
 800b068:	46a1      	mov	r9, r4
 800b06a:	9a05      	ldr	r2, [sp, #20]
 800b06c:	2322      	movs	r3, #34	@ 0x22
 800b06e:	f04f 0a00 	mov.w	sl, #0
 800b072:	f04f 0b00 	mov.w	fp, #0
 800b076:	6013      	str	r3, [r2, #0]
 800b078:	e768      	b.n	800af4c <_strtod_l+0x44c>
 800b07a:	bf00      	nop
 800b07c:	0800d03d 	.word	0x0800d03d
 800b080:	0800d254 	.word	0x0800d254
 800b084:	0800d035 	.word	0x0800d035
 800b088:	0800d06c 	.word	0x0800d06c
 800b08c:	0800d3fd 	.word	0x0800d3fd
 800b090:	0800d188 	.word	0x0800d188
 800b094:	0800d160 	.word	0x0800d160
 800b098:	7ff00000 	.word	0x7ff00000
 800b09c:	7ca00000 	.word	0x7ca00000
 800b0a0:	7fefffff 	.word	0x7fefffff
 800b0a4:	f014 0310 	ands.w	r3, r4, #16
 800b0a8:	bf18      	it	ne
 800b0aa:	236a      	movne	r3, #106	@ 0x6a
 800b0ac:	4ea9      	ldr	r6, [pc, #676]	@ (800b354 <_strtod_l+0x854>)
 800b0ae:	9308      	str	r3, [sp, #32]
 800b0b0:	4650      	mov	r0, sl
 800b0b2:	4659      	mov	r1, fp
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	07e2      	lsls	r2, r4, #31
 800b0b8:	d504      	bpl.n	800b0c4 <_strtod_l+0x5c4>
 800b0ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b0be:	f7f5 fabb 	bl	8000638 <__aeabi_dmul>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	1064      	asrs	r4, r4, #1
 800b0c6:	f106 0608 	add.w	r6, r6, #8
 800b0ca:	d1f4      	bne.n	800b0b6 <_strtod_l+0x5b6>
 800b0cc:	b10b      	cbz	r3, 800b0d2 <_strtod_l+0x5d2>
 800b0ce:	4682      	mov	sl, r0
 800b0d0:	468b      	mov	fp, r1
 800b0d2:	9b08      	ldr	r3, [sp, #32]
 800b0d4:	b1b3      	cbz	r3, 800b104 <_strtod_l+0x604>
 800b0d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b0da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	4659      	mov	r1, fp
 800b0e2:	dd0f      	ble.n	800b104 <_strtod_l+0x604>
 800b0e4:	2b1f      	cmp	r3, #31
 800b0e6:	dd55      	ble.n	800b194 <_strtod_l+0x694>
 800b0e8:	2b34      	cmp	r3, #52	@ 0x34
 800b0ea:	bfde      	ittt	le
 800b0ec:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800b0f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b0f4:	4093      	lslle	r3, r2
 800b0f6:	f04f 0a00 	mov.w	sl, #0
 800b0fa:	bfcc      	ite	gt
 800b0fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b100:	ea03 0b01 	andle.w	fp, r3, r1
 800b104:	2200      	movs	r2, #0
 800b106:	2300      	movs	r3, #0
 800b108:	4650      	mov	r0, sl
 800b10a:	4659      	mov	r1, fp
 800b10c:	f7f5 fcfc 	bl	8000b08 <__aeabi_dcmpeq>
 800b110:	2800      	cmp	r0, #0
 800b112:	d1a6      	bne.n	800b062 <_strtod_l+0x562>
 800b114:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b116:	9300      	str	r3, [sp, #0]
 800b118:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b11a:	9805      	ldr	r0, [sp, #20]
 800b11c:	462b      	mov	r3, r5
 800b11e:	463a      	mov	r2, r7
 800b120:	f7ff f8c4 	bl	800a2ac <__s2b>
 800b124:	900a      	str	r0, [sp, #40]	@ 0x28
 800b126:	2800      	cmp	r0, #0
 800b128:	f43f af05 	beq.w	800af36 <_strtod_l+0x436>
 800b12c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b12e:	2a00      	cmp	r2, #0
 800b130:	eba9 0308 	sub.w	r3, r9, r8
 800b134:	bfa8      	it	ge
 800b136:	2300      	movge	r3, #0
 800b138:	9312      	str	r3, [sp, #72]	@ 0x48
 800b13a:	2400      	movs	r4, #0
 800b13c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b140:	9316      	str	r3, [sp, #88]	@ 0x58
 800b142:	46a0      	mov	r8, r4
 800b144:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b146:	9805      	ldr	r0, [sp, #20]
 800b148:	6859      	ldr	r1, [r3, #4]
 800b14a:	f7ff f807 	bl	800a15c <_Balloc>
 800b14e:	4681      	mov	r9, r0
 800b150:	2800      	cmp	r0, #0
 800b152:	f43f aef4 	beq.w	800af3e <_strtod_l+0x43e>
 800b156:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b158:	691a      	ldr	r2, [r3, #16]
 800b15a:	3202      	adds	r2, #2
 800b15c:	f103 010c 	add.w	r1, r3, #12
 800b160:	0092      	lsls	r2, r2, #2
 800b162:	300c      	adds	r0, #12
 800b164:	f000 ff16 	bl	800bf94 <memcpy>
 800b168:	ec4b ab10 	vmov	d0, sl, fp
 800b16c:	9805      	ldr	r0, [sp, #20]
 800b16e:	aa1c      	add	r2, sp, #112	@ 0x70
 800b170:	a91b      	add	r1, sp, #108	@ 0x6c
 800b172:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b176:	f7ff fbd5 	bl	800a924 <__d2b>
 800b17a:	901a      	str	r0, [sp, #104]	@ 0x68
 800b17c:	2800      	cmp	r0, #0
 800b17e:	f43f aede 	beq.w	800af3e <_strtod_l+0x43e>
 800b182:	9805      	ldr	r0, [sp, #20]
 800b184:	2101      	movs	r1, #1
 800b186:	f7ff f927 	bl	800a3d8 <__i2b>
 800b18a:	4680      	mov	r8, r0
 800b18c:	b948      	cbnz	r0, 800b1a2 <_strtod_l+0x6a2>
 800b18e:	f04f 0800 	mov.w	r8, #0
 800b192:	e6d4      	b.n	800af3e <_strtod_l+0x43e>
 800b194:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b198:	fa02 f303 	lsl.w	r3, r2, r3
 800b19c:	ea03 0a0a 	and.w	sl, r3, sl
 800b1a0:	e7b0      	b.n	800b104 <_strtod_l+0x604>
 800b1a2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b1a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b1a6:	2d00      	cmp	r5, #0
 800b1a8:	bfab      	itete	ge
 800b1aa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b1ac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b1ae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b1b0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b1b2:	bfac      	ite	ge
 800b1b4:	18ef      	addge	r7, r5, r3
 800b1b6:	1b5e      	sublt	r6, r3, r5
 800b1b8:	9b08      	ldr	r3, [sp, #32]
 800b1ba:	1aed      	subs	r5, r5, r3
 800b1bc:	4415      	add	r5, r2
 800b1be:	4b66      	ldr	r3, [pc, #408]	@ (800b358 <_strtod_l+0x858>)
 800b1c0:	3d01      	subs	r5, #1
 800b1c2:	429d      	cmp	r5, r3
 800b1c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b1c8:	da50      	bge.n	800b26c <_strtod_l+0x76c>
 800b1ca:	1b5b      	subs	r3, r3, r5
 800b1cc:	2b1f      	cmp	r3, #31
 800b1ce:	eba2 0203 	sub.w	r2, r2, r3
 800b1d2:	f04f 0101 	mov.w	r1, #1
 800b1d6:	dc3d      	bgt.n	800b254 <_strtod_l+0x754>
 800b1d8:	fa01 f303 	lsl.w	r3, r1, r3
 800b1dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b1de:	2300      	movs	r3, #0
 800b1e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1e2:	18bd      	adds	r5, r7, r2
 800b1e4:	9b08      	ldr	r3, [sp, #32]
 800b1e6:	42af      	cmp	r7, r5
 800b1e8:	4416      	add	r6, r2
 800b1ea:	441e      	add	r6, r3
 800b1ec:	463b      	mov	r3, r7
 800b1ee:	bfa8      	it	ge
 800b1f0:	462b      	movge	r3, r5
 800b1f2:	42b3      	cmp	r3, r6
 800b1f4:	bfa8      	it	ge
 800b1f6:	4633      	movge	r3, r6
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	bfc2      	ittt	gt
 800b1fc:	1aed      	subgt	r5, r5, r3
 800b1fe:	1af6      	subgt	r6, r6, r3
 800b200:	1aff      	subgt	r7, r7, r3
 800b202:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b204:	2b00      	cmp	r3, #0
 800b206:	dd16      	ble.n	800b236 <_strtod_l+0x736>
 800b208:	4641      	mov	r1, r8
 800b20a:	9805      	ldr	r0, [sp, #20]
 800b20c:	461a      	mov	r2, r3
 800b20e:	f7ff f9a3 	bl	800a558 <__pow5mult>
 800b212:	4680      	mov	r8, r0
 800b214:	2800      	cmp	r0, #0
 800b216:	d0ba      	beq.n	800b18e <_strtod_l+0x68e>
 800b218:	4601      	mov	r1, r0
 800b21a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b21c:	9805      	ldr	r0, [sp, #20]
 800b21e:	f7ff f8f1 	bl	800a404 <__multiply>
 800b222:	900e      	str	r0, [sp, #56]	@ 0x38
 800b224:	2800      	cmp	r0, #0
 800b226:	f43f ae8a 	beq.w	800af3e <_strtod_l+0x43e>
 800b22a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b22c:	9805      	ldr	r0, [sp, #20]
 800b22e:	f7fe ffd5 	bl	800a1dc <_Bfree>
 800b232:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b234:	931a      	str	r3, [sp, #104]	@ 0x68
 800b236:	2d00      	cmp	r5, #0
 800b238:	dc1d      	bgt.n	800b276 <_strtod_l+0x776>
 800b23a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	dd23      	ble.n	800b288 <_strtod_l+0x788>
 800b240:	4649      	mov	r1, r9
 800b242:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b244:	9805      	ldr	r0, [sp, #20]
 800b246:	f7ff f987 	bl	800a558 <__pow5mult>
 800b24a:	4681      	mov	r9, r0
 800b24c:	b9e0      	cbnz	r0, 800b288 <_strtod_l+0x788>
 800b24e:	f04f 0900 	mov.w	r9, #0
 800b252:	e674      	b.n	800af3e <_strtod_l+0x43e>
 800b254:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b258:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b25c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b260:	35e2      	adds	r5, #226	@ 0xe2
 800b262:	fa01 f305 	lsl.w	r3, r1, r5
 800b266:	9310      	str	r3, [sp, #64]	@ 0x40
 800b268:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b26a:	e7ba      	b.n	800b1e2 <_strtod_l+0x6e2>
 800b26c:	2300      	movs	r3, #0
 800b26e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b270:	2301      	movs	r3, #1
 800b272:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b274:	e7b5      	b.n	800b1e2 <_strtod_l+0x6e2>
 800b276:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b278:	9805      	ldr	r0, [sp, #20]
 800b27a:	462a      	mov	r2, r5
 800b27c:	f7ff f9c6 	bl	800a60c <__lshift>
 800b280:	901a      	str	r0, [sp, #104]	@ 0x68
 800b282:	2800      	cmp	r0, #0
 800b284:	d1d9      	bne.n	800b23a <_strtod_l+0x73a>
 800b286:	e65a      	b.n	800af3e <_strtod_l+0x43e>
 800b288:	2e00      	cmp	r6, #0
 800b28a:	dd07      	ble.n	800b29c <_strtod_l+0x79c>
 800b28c:	4649      	mov	r1, r9
 800b28e:	9805      	ldr	r0, [sp, #20]
 800b290:	4632      	mov	r2, r6
 800b292:	f7ff f9bb 	bl	800a60c <__lshift>
 800b296:	4681      	mov	r9, r0
 800b298:	2800      	cmp	r0, #0
 800b29a:	d0d8      	beq.n	800b24e <_strtod_l+0x74e>
 800b29c:	2f00      	cmp	r7, #0
 800b29e:	dd08      	ble.n	800b2b2 <_strtod_l+0x7b2>
 800b2a0:	4641      	mov	r1, r8
 800b2a2:	9805      	ldr	r0, [sp, #20]
 800b2a4:	463a      	mov	r2, r7
 800b2a6:	f7ff f9b1 	bl	800a60c <__lshift>
 800b2aa:	4680      	mov	r8, r0
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	f43f ae46 	beq.w	800af3e <_strtod_l+0x43e>
 800b2b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2b4:	9805      	ldr	r0, [sp, #20]
 800b2b6:	464a      	mov	r2, r9
 800b2b8:	f7ff fa30 	bl	800a71c <__mdiff>
 800b2bc:	4604      	mov	r4, r0
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	f43f ae3d 	beq.w	800af3e <_strtod_l+0x43e>
 800b2c4:	68c3      	ldr	r3, [r0, #12]
 800b2c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	60c3      	str	r3, [r0, #12]
 800b2cc:	4641      	mov	r1, r8
 800b2ce:	f7ff fa09 	bl	800a6e4 <__mcmp>
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	da46      	bge.n	800b364 <_strtod_l+0x864>
 800b2d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2d8:	ea53 030a 	orrs.w	r3, r3, sl
 800b2dc:	d16c      	bne.n	800b3b8 <_strtod_l+0x8b8>
 800b2de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d168      	bne.n	800b3b8 <_strtod_l+0x8b8>
 800b2e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b2ea:	0d1b      	lsrs	r3, r3, #20
 800b2ec:	051b      	lsls	r3, r3, #20
 800b2ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b2f2:	d961      	bls.n	800b3b8 <_strtod_l+0x8b8>
 800b2f4:	6963      	ldr	r3, [r4, #20]
 800b2f6:	b913      	cbnz	r3, 800b2fe <_strtod_l+0x7fe>
 800b2f8:	6923      	ldr	r3, [r4, #16]
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	dd5c      	ble.n	800b3b8 <_strtod_l+0x8b8>
 800b2fe:	4621      	mov	r1, r4
 800b300:	2201      	movs	r2, #1
 800b302:	9805      	ldr	r0, [sp, #20]
 800b304:	f7ff f982 	bl	800a60c <__lshift>
 800b308:	4641      	mov	r1, r8
 800b30a:	4604      	mov	r4, r0
 800b30c:	f7ff f9ea 	bl	800a6e4 <__mcmp>
 800b310:	2800      	cmp	r0, #0
 800b312:	dd51      	ble.n	800b3b8 <_strtod_l+0x8b8>
 800b314:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b318:	9a08      	ldr	r2, [sp, #32]
 800b31a:	0d1b      	lsrs	r3, r3, #20
 800b31c:	051b      	lsls	r3, r3, #20
 800b31e:	2a00      	cmp	r2, #0
 800b320:	d06b      	beq.n	800b3fa <_strtod_l+0x8fa>
 800b322:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b326:	d868      	bhi.n	800b3fa <_strtod_l+0x8fa>
 800b328:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b32c:	f67f ae9d 	bls.w	800b06a <_strtod_l+0x56a>
 800b330:	4b0a      	ldr	r3, [pc, #40]	@ (800b35c <_strtod_l+0x85c>)
 800b332:	4650      	mov	r0, sl
 800b334:	4659      	mov	r1, fp
 800b336:	2200      	movs	r2, #0
 800b338:	f7f5 f97e 	bl	8000638 <__aeabi_dmul>
 800b33c:	4b08      	ldr	r3, [pc, #32]	@ (800b360 <_strtod_l+0x860>)
 800b33e:	400b      	ands	r3, r1
 800b340:	4682      	mov	sl, r0
 800b342:	468b      	mov	fp, r1
 800b344:	2b00      	cmp	r3, #0
 800b346:	f47f ae05 	bne.w	800af54 <_strtod_l+0x454>
 800b34a:	9a05      	ldr	r2, [sp, #20]
 800b34c:	2322      	movs	r3, #34	@ 0x22
 800b34e:	6013      	str	r3, [r2, #0]
 800b350:	e600      	b.n	800af54 <_strtod_l+0x454>
 800b352:	bf00      	nop
 800b354:	0800d280 	.word	0x0800d280
 800b358:	fffffc02 	.word	0xfffffc02
 800b35c:	39500000 	.word	0x39500000
 800b360:	7ff00000 	.word	0x7ff00000
 800b364:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b368:	d165      	bne.n	800b436 <_strtod_l+0x936>
 800b36a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b36c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b370:	b35a      	cbz	r2, 800b3ca <_strtod_l+0x8ca>
 800b372:	4a9f      	ldr	r2, [pc, #636]	@ (800b5f0 <_strtod_l+0xaf0>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d12b      	bne.n	800b3d0 <_strtod_l+0x8d0>
 800b378:	9b08      	ldr	r3, [sp, #32]
 800b37a:	4651      	mov	r1, sl
 800b37c:	b303      	cbz	r3, 800b3c0 <_strtod_l+0x8c0>
 800b37e:	4b9d      	ldr	r3, [pc, #628]	@ (800b5f4 <_strtod_l+0xaf4>)
 800b380:	465a      	mov	r2, fp
 800b382:	4013      	ands	r3, r2
 800b384:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b388:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b38c:	d81b      	bhi.n	800b3c6 <_strtod_l+0x8c6>
 800b38e:	0d1b      	lsrs	r3, r3, #20
 800b390:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b394:	fa02 f303 	lsl.w	r3, r2, r3
 800b398:	4299      	cmp	r1, r3
 800b39a:	d119      	bne.n	800b3d0 <_strtod_l+0x8d0>
 800b39c:	4b96      	ldr	r3, [pc, #600]	@ (800b5f8 <_strtod_l+0xaf8>)
 800b39e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d102      	bne.n	800b3aa <_strtod_l+0x8aa>
 800b3a4:	3101      	adds	r1, #1
 800b3a6:	f43f adca 	beq.w	800af3e <_strtod_l+0x43e>
 800b3aa:	4b92      	ldr	r3, [pc, #584]	@ (800b5f4 <_strtod_l+0xaf4>)
 800b3ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3ae:	401a      	ands	r2, r3
 800b3b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b3b4:	f04f 0a00 	mov.w	sl, #0
 800b3b8:	9b08      	ldr	r3, [sp, #32]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d1b8      	bne.n	800b330 <_strtod_l+0x830>
 800b3be:	e5c9      	b.n	800af54 <_strtod_l+0x454>
 800b3c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b3c4:	e7e8      	b.n	800b398 <_strtod_l+0x898>
 800b3c6:	4613      	mov	r3, r2
 800b3c8:	e7e6      	b.n	800b398 <_strtod_l+0x898>
 800b3ca:	ea53 030a 	orrs.w	r3, r3, sl
 800b3ce:	d0a1      	beq.n	800b314 <_strtod_l+0x814>
 800b3d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b3d2:	b1db      	cbz	r3, 800b40c <_strtod_l+0x90c>
 800b3d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3d6:	4213      	tst	r3, r2
 800b3d8:	d0ee      	beq.n	800b3b8 <_strtod_l+0x8b8>
 800b3da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3dc:	9a08      	ldr	r2, [sp, #32]
 800b3de:	4650      	mov	r0, sl
 800b3e0:	4659      	mov	r1, fp
 800b3e2:	b1bb      	cbz	r3, 800b414 <_strtod_l+0x914>
 800b3e4:	f7ff fb6c 	bl	800aac0 <sulp>
 800b3e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3ec:	ec53 2b10 	vmov	r2, r3, d0
 800b3f0:	f7f4 ff6c 	bl	80002cc <__adddf3>
 800b3f4:	4682      	mov	sl, r0
 800b3f6:	468b      	mov	fp, r1
 800b3f8:	e7de      	b.n	800b3b8 <_strtod_l+0x8b8>
 800b3fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b3fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b402:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b406:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b40a:	e7d5      	b.n	800b3b8 <_strtod_l+0x8b8>
 800b40c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b40e:	ea13 0f0a 	tst.w	r3, sl
 800b412:	e7e1      	b.n	800b3d8 <_strtod_l+0x8d8>
 800b414:	f7ff fb54 	bl	800aac0 <sulp>
 800b418:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b41c:	ec53 2b10 	vmov	r2, r3, d0
 800b420:	f7f4 ff52 	bl	80002c8 <__aeabi_dsub>
 800b424:	2200      	movs	r2, #0
 800b426:	2300      	movs	r3, #0
 800b428:	4682      	mov	sl, r0
 800b42a:	468b      	mov	fp, r1
 800b42c:	f7f5 fb6c 	bl	8000b08 <__aeabi_dcmpeq>
 800b430:	2800      	cmp	r0, #0
 800b432:	d0c1      	beq.n	800b3b8 <_strtod_l+0x8b8>
 800b434:	e619      	b.n	800b06a <_strtod_l+0x56a>
 800b436:	4641      	mov	r1, r8
 800b438:	4620      	mov	r0, r4
 800b43a:	f7ff facb 	bl	800a9d4 <__ratio>
 800b43e:	ec57 6b10 	vmov	r6, r7, d0
 800b442:	2200      	movs	r2, #0
 800b444:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b448:	4630      	mov	r0, r6
 800b44a:	4639      	mov	r1, r7
 800b44c:	f7f5 fb70 	bl	8000b30 <__aeabi_dcmple>
 800b450:	2800      	cmp	r0, #0
 800b452:	d06f      	beq.n	800b534 <_strtod_l+0xa34>
 800b454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b456:	2b00      	cmp	r3, #0
 800b458:	d17a      	bne.n	800b550 <_strtod_l+0xa50>
 800b45a:	f1ba 0f00 	cmp.w	sl, #0
 800b45e:	d158      	bne.n	800b512 <_strtod_l+0xa12>
 800b460:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b462:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b466:	2b00      	cmp	r3, #0
 800b468:	d15a      	bne.n	800b520 <_strtod_l+0xa20>
 800b46a:	4b64      	ldr	r3, [pc, #400]	@ (800b5fc <_strtod_l+0xafc>)
 800b46c:	2200      	movs	r2, #0
 800b46e:	4630      	mov	r0, r6
 800b470:	4639      	mov	r1, r7
 800b472:	f7f5 fb53 	bl	8000b1c <__aeabi_dcmplt>
 800b476:	2800      	cmp	r0, #0
 800b478:	d159      	bne.n	800b52e <_strtod_l+0xa2e>
 800b47a:	4630      	mov	r0, r6
 800b47c:	4639      	mov	r1, r7
 800b47e:	4b60      	ldr	r3, [pc, #384]	@ (800b600 <_strtod_l+0xb00>)
 800b480:	2200      	movs	r2, #0
 800b482:	f7f5 f8d9 	bl	8000638 <__aeabi_dmul>
 800b486:	4606      	mov	r6, r0
 800b488:	460f      	mov	r7, r1
 800b48a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b48e:	9606      	str	r6, [sp, #24]
 800b490:	9307      	str	r3, [sp, #28]
 800b492:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b496:	4d57      	ldr	r5, [pc, #348]	@ (800b5f4 <_strtod_l+0xaf4>)
 800b498:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b49c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b49e:	401d      	ands	r5, r3
 800b4a0:	4b58      	ldr	r3, [pc, #352]	@ (800b604 <_strtod_l+0xb04>)
 800b4a2:	429d      	cmp	r5, r3
 800b4a4:	f040 80b2 	bne.w	800b60c <_strtod_l+0xb0c>
 800b4a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b4ae:	ec4b ab10 	vmov	d0, sl, fp
 800b4b2:	f7ff f9c7 	bl	800a844 <__ulp>
 800b4b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4ba:	ec51 0b10 	vmov	r0, r1, d0
 800b4be:	f7f5 f8bb 	bl	8000638 <__aeabi_dmul>
 800b4c2:	4652      	mov	r2, sl
 800b4c4:	465b      	mov	r3, fp
 800b4c6:	f7f4 ff01 	bl	80002cc <__adddf3>
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	4949      	ldr	r1, [pc, #292]	@ (800b5f4 <_strtod_l+0xaf4>)
 800b4ce:	4a4e      	ldr	r2, [pc, #312]	@ (800b608 <_strtod_l+0xb08>)
 800b4d0:	4019      	ands	r1, r3
 800b4d2:	4291      	cmp	r1, r2
 800b4d4:	4682      	mov	sl, r0
 800b4d6:	d942      	bls.n	800b55e <_strtod_l+0xa5e>
 800b4d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b4da:	4b47      	ldr	r3, [pc, #284]	@ (800b5f8 <_strtod_l+0xaf8>)
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d103      	bne.n	800b4e8 <_strtod_l+0x9e8>
 800b4e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	f43f ad2b 	beq.w	800af3e <_strtod_l+0x43e>
 800b4e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b5f8 <_strtod_l+0xaf8>
 800b4ec:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b4f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b4f2:	9805      	ldr	r0, [sp, #20]
 800b4f4:	f7fe fe72 	bl	800a1dc <_Bfree>
 800b4f8:	9805      	ldr	r0, [sp, #20]
 800b4fa:	4649      	mov	r1, r9
 800b4fc:	f7fe fe6e 	bl	800a1dc <_Bfree>
 800b500:	9805      	ldr	r0, [sp, #20]
 800b502:	4641      	mov	r1, r8
 800b504:	f7fe fe6a 	bl	800a1dc <_Bfree>
 800b508:	9805      	ldr	r0, [sp, #20]
 800b50a:	4621      	mov	r1, r4
 800b50c:	f7fe fe66 	bl	800a1dc <_Bfree>
 800b510:	e618      	b.n	800b144 <_strtod_l+0x644>
 800b512:	f1ba 0f01 	cmp.w	sl, #1
 800b516:	d103      	bne.n	800b520 <_strtod_l+0xa20>
 800b518:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	f43f ada5 	beq.w	800b06a <_strtod_l+0x56a>
 800b520:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b5d0 <_strtod_l+0xad0>
 800b524:	4f35      	ldr	r7, [pc, #212]	@ (800b5fc <_strtod_l+0xafc>)
 800b526:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b52a:	2600      	movs	r6, #0
 800b52c:	e7b1      	b.n	800b492 <_strtod_l+0x992>
 800b52e:	4f34      	ldr	r7, [pc, #208]	@ (800b600 <_strtod_l+0xb00>)
 800b530:	2600      	movs	r6, #0
 800b532:	e7aa      	b.n	800b48a <_strtod_l+0x98a>
 800b534:	4b32      	ldr	r3, [pc, #200]	@ (800b600 <_strtod_l+0xb00>)
 800b536:	4630      	mov	r0, r6
 800b538:	4639      	mov	r1, r7
 800b53a:	2200      	movs	r2, #0
 800b53c:	f7f5 f87c 	bl	8000638 <__aeabi_dmul>
 800b540:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b542:	4606      	mov	r6, r0
 800b544:	460f      	mov	r7, r1
 800b546:	2b00      	cmp	r3, #0
 800b548:	d09f      	beq.n	800b48a <_strtod_l+0x98a>
 800b54a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b54e:	e7a0      	b.n	800b492 <_strtod_l+0x992>
 800b550:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b5d8 <_strtod_l+0xad8>
 800b554:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b558:	ec57 6b17 	vmov	r6, r7, d7
 800b55c:	e799      	b.n	800b492 <_strtod_l+0x992>
 800b55e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b562:	9b08      	ldr	r3, [sp, #32]
 800b564:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d1c1      	bne.n	800b4f0 <_strtod_l+0x9f0>
 800b56c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b570:	0d1b      	lsrs	r3, r3, #20
 800b572:	051b      	lsls	r3, r3, #20
 800b574:	429d      	cmp	r5, r3
 800b576:	d1bb      	bne.n	800b4f0 <_strtod_l+0x9f0>
 800b578:	4630      	mov	r0, r6
 800b57a:	4639      	mov	r1, r7
 800b57c:	f7f5 fbbc 	bl	8000cf8 <__aeabi_d2lz>
 800b580:	f7f5 f82c 	bl	80005dc <__aeabi_l2d>
 800b584:	4602      	mov	r2, r0
 800b586:	460b      	mov	r3, r1
 800b588:	4630      	mov	r0, r6
 800b58a:	4639      	mov	r1, r7
 800b58c:	f7f4 fe9c 	bl	80002c8 <__aeabi_dsub>
 800b590:	460b      	mov	r3, r1
 800b592:	4602      	mov	r2, r0
 800b594:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b598:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b59c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b59e:	ea46 060a 	orr.w	r6, r6, sl
 800b5a2:	431e      	orrs	r6, r3
 800b5a4:	d06f      	beq.n	800b686 <_strtod_l+0xb86>
 800b5a6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b5e0 <_strtod_l+0xae0>)
 800b5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ac:	f7f5 fab6 	bl	8000b1c <__aeabi_dcmplt>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	f47f accf 	bne.w	800af54 <_strtod_l+0x454>
 800b5b6:	a30c      	add	r3, pc, #48	@ (adr r3, 800b5e8 <_strtod_l+0xae8>)
 800b5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5c0:	f7f5 faca 	bl	8000b58 <__aeabi_dcmpgt>
 800b5c4:	2800      	cmp	r0, #0
 800b5c6:	d093      	beq.n	800b4f0 <_strtod_l+0x9f0>
 800b5c8:	e4c4      	b.n	800af54 <_strtod_l+0x454>
 800b5ca:	bf00      	nop
 800b5cc:	f3af 8000 	nop.w
 800b5d0:	00000000 	.word	0x00000000
 800b5d4:	bff00000 	.word	0xbff00000
 800b5d8:	00000000 	.word	0x00000000
 800b5dc:	3ff00000 	.word	0x3ff00000
 800b5e0:	94a03595 	.word	0x94a03595
 800b5e4:	3fdfffff 	.word	0x3fdfffff
 800b5e8:	35afe535 	.word	0x35afe535
 800b5ec:	3fe00000 	.word	0x3fe00000
 800b5f0:	000fffff 	.word	0x000fffff
 800b5f4:	7ff00000 	.word	0x7ff00000
 800b5f8:	7fefffff 	.word	0x7fefffff
 800b5fc:	3ff00000 	.word	0x3ff00000
 800b600:	3fe00000 	.word	0x3fe00000
 800b604:	7fe00000 	.word	0x7fe00000
 800b608:	7c9fffff 	.word	0x7c9fffff
 800b60c:	9b08      	ldr	r3, [sp, #32]
 800b60e:	b323      	cbz	r3, 800b65a <_strtod_l+0xb5a>
 800b610:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b614:	d821      	bhi.n	800b65a <_strtod_l+0xb5a>
 800b616:	a328      	add	r3, pc, #160	@ (adr r3, 800b6b8 <_strtod_l+0xbb8>)
 800b618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61c:	4630      	mov	r0, r6
 800b61e:	4639      	mov	r1, r7
 800b620:	f7f5 fa86 	bl	8000b30 <__aeabi_dcmple>
 800b624:	b1a0      	cbz	r0, 800b650 <_strtod_l+0xb50>
 800b626:	4639      	mov	r1, r7
 800b628:	4630      	mov	r0, r6
 800b62a:	f7f5 fadd 	bl	8000be8 <__aeabi_d2uiz>
 800b62e:	2801      	cmp	r0, #1
 800b630:	bf38      	it	cc
 800b632:	2001      	movcc	r0, #1
 800b634:	f7f4 ff86 	bl	8000544 <__aeabi_ui2d>
 800b638:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b63a:	4606      	mov	r6, r0
 800b63c:	460f      	mov	r7, r1
 800b63e:	b9fb      	cbnz	r3, 800b680 <_strtod_l+0xb80>
 800b640:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b644:	9014      	str	r0, [sp, #80]	@ 0x50
 800b646:	9315      	str	r3, [sp, #84]	@ 0x54
 800b648:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b64c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b650:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b652:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b656:	1b5b      	subs	r3, r3, r5
 800b658:	9311      	str	r3, [sp, #68]	@ 0x44
 800b65a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b65e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b662:	f7ff f8ef 	bl	800a844 <__ulp>
 800b666:	4650      	mov	r0, sl
 800b668:	ec53 2b10 	vmov	r2, r3, d0
 800b66c:	4659      	mov	r1, fp
 800b66e:	f7f4 ffe3 	bl	8000638 <__aeabi_dmul>
 800b672:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b676:	f7f4 fe29 	bl	80002cc <__adddf3>
 800b67a:	4682      	mov	sl, r0
 800b67c:	468b      	mov	fp, r1
 800b67e:	e770      	b.n	800b562 <_strtod_l+0xa62>
 800b680:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b684:	e7e0      	b.n	800b648 <_strtod_l+0xb48>
 800b686:	a30e      	add	r3, pc, #56	@ (adr r3, 800b6c0 <_strtod_l+0xbc0>)
 800b688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68c:	f7f5 fa46 	bl	8000b1c <__aeabi_dcmplt>
 800b690:	e798      	b.n	800b5c4 <_strtod_l+0xac4>
 800b692:	2300      	movs	r3, #0
 800b694:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b696:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b698:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b69a:	6013      	str	r3, [r2, #0]
 800b69c:	f7ff ba6d 	b.w	800ab7a <_strtod_l+0x7a>
 800b6a0:	2a65      	cmp	r2, #101	@ 0x65
 800b6a2:	f43f ab66 	beq.w	800ad72 <_strtod_l+0x272>
 800b6a6:	2a45      	cmp	r2, #69	@ 0x45
 800b6a8:	f43f ab63 	beq.w	800ad72 <_strtod_l+0x272>
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	f7ff bb9e 	b.w	800adee <_strtod_l+0x2ee>
 800b6b2:	bf00      	nop
 800b6b4:	f3af 8000 	nop.w
 800b6b8:	ffc00000 	.word	0xffc00000
 800b6bc:	41dfffff 	.word	0x41dfffff
 800b6c0:	94a03595 	.word	0x94a03595
 800b6c4:	3fcfffff 	.word	0x3fcfffff

0800b6c8 <_strtod_r>:
 800b6c8:	4b01      	ldr	r3, [pc, #4]	@ (800b6d0 <_strtod_r+0x8>)
 800b6ca:	f7ff ba19 	b.w	800ab00 <_strtod_l>
 800b6ce:	bf00      	nop
 800b6d0:	20000068 	.word	0x20000068

0800b6d4 <_strtol_l.constprop.0>:
 800b6d4:	2b24      	cmp	r3, #36	@ 0x24
 800b6d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6da:	4686      	mov	lr, r0
 800b6dc:	4690      	mov	r8, r2
 800b6de:	d801      	bhi.n	800b6e4 <_strtol_l.constprop.0+0x10>
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d106      	bne.n	800b6f2 <_strtol_l.constprop.0+0x1e>
 800b6e4:	f7fd fe6e 	bl	80093c4 <__errno>
 800b6e8:	2316      	movs	r3, #22
 800b6ea:	6003      	str	r3, [r0, #0]
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6f2:	4834      	ldr	r0, [pc, #208]	@ (800b7c4 <_strtol_l.constprop.0+0xf0>)
 800b6f4:	460d      	mov	r5, r1
 800b6f6:	462a      	mov	r2, r5
 800b6f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b6fc:	5d06      	ldrb	r6, [r0, r4]
 800b6fe:	f016 0608 	ands.w	r6, r6, #8
 800b702:	d1f8      	bne.n	800b6f6 <_strtol_l.constprop.0+0x22>
 800b704:	2c2d      	cmp	r4, #45	@ 0x2d
 800b706:	d12d      	bne.n	800b764 <_strtol_l.constprop.0+0x90>
 800b708:	782c      	ldrb	r4, [r5, #0]
 800b70a:	2601      	movs	r6, #1
 800b70c:	1c95      	adds	r5, r2, #2
 800b70e:	f033 0210 	bics.w	r2, r3, #16
 800b712:	d109      	bne.n	800b728 <_strtol_l.constprop.0+0x54>
 800b714:	2c30      	cmp	r4, #48	@ 0x30
 800b716:	d12a      	bne.n	800b76e <_strtol_l.constprop.0+0x9a>
 800b718:	782a      	ldrb	r2, [r5, #0]
 800b71a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b71e:	2a58      	cmp	r2, #88	@ 0x58
 800b720:	d125      	bne.n	800b76e <_strtol_l.constprop.0+0x9a>
 800b722:	786c      	ldrb	r4, [r5, #1]
 800b724:	2310      	movs	r3, #16
 800b726:	3502      	adds	r5, #2
 800b728:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b72c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800b730:	2200      	movs	r2, #0
 800b732:	fbbc f9f3 	udiv	r9, ip, r3
 800b736:	4610      	mov	r0, r2
 800b738:	fb03 ca19 	mls	sl, r3, r9, ip
 800b73c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b740:	2f09      	cmp	r7, #9
 800b742:	d81b      	bhi.n	800b77c <_strtol_l.constprop.0+0xa8>
 800b744:	463c      	mov	r4, r7
 800b746:	42a3      	cmp	r3, r4
 800b748:	dd27      	ble.n	800b79a <_strtol_l.constprop.0+0xc6>
 800b74a:	1c57      	adds	r7, r2, #1
 800b74c:	d007      	beq.n	800b75e <_strtol_l.constprop.0+0x8a>
 800b74e:	4581      	cmp	r9, r0
 800b750:	d320      	bcc.n	800b794 <_strtol_l.constprop.0+0xc0>
 800b752:	d101      	bne.n	800b758 <_strtol_l.constprop.0+0x84>
 800b754:	45a2      	cmp	sl, r4
 800b756:	db1d      	blt.n	800b794 <_strtol_l.constprop.0+0xc0>
 800b758:	fb00 4003 	mla	r0, r0, r3, r4
 800b75c:	2201      	movs	r2, #1
 800b75e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b762:	e7eb      	b.n	800b73c <_strtol_l.constprop.0+0x68>
 800b764:	2c2b      	cmp	r4, #43	@ 0x2b
 800b766:	bf04      	itt	eq
 800b768:	782c      	ldrbeq	r4, [r5, #0]
 800b76a:	1c95      	addeq	r5, r2, #2
 800b76c:	e7cf      	b.n	800b70e <_strtol_l.constprop.0+0x3a>
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d1da      	bne.n	800b728 <_strtol_l.constprop.0+0x54>
 800b772:	2c30      	cmp	r4, #48	@ 0x30
 800b774:	bf0c      	ite	eq
 800b776:	2308      	moveq	r3, #8
 800b778:	230a      	movne	r3, #10
 800b77a:	e7d5      	b.n	800b728 <_strtol_l.constprop.0+0x54>
 800b77c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b780:	2f19      	cmp	r7, #25
 800b782:	d801      	bhi.n	800b788 <_strtol_l.constprop.0+0xb4>
 800b784:	3c37      	subs	r4, #55	@ 0x37
 800b786:	e7de      	b.n	800b746 <_strtol_l.constprop.0+0x72>
 800b788:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b78c:	2f19      	cmp	r7, #25
 800b78e:	d804      	bhi.n	800b79a <_strtol_l.constprop.0+0xc6>
 800b790:	3c57      	subs	r4, #87	@ 0x57
 800b792:	e7d8      	b.n	800b746 <_strtol_l.constprop.0+0x72>
 800b794:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b798:	e7e1      	b.n	800b75e <_strtol_l.constprop.0+0x8a>
 800b79a:	1c53      	adds	r3, r2, #1
 800b79c:	d108      	bne.n	800b7b0 <_strtol_l.constprop.0+0xdc>
 800b79e:	2322      	movs	r3, #34	@ 0x22
 800b7a0:	f8ce 3000 	str.w	r3, [lr]
 800b7a4:	4660      	mov	r0, ip
 800b7a6:	f1b8 0f00 	cmp.w	r8, #0
 800b7aa:	d0a0      	beq.n	800b6ee <_strtol_l.constprop.0+0x1a>
 800b7ac:	1e69      	subs	r1, r5, #1
 800b7ae:	e006      	b.n	800b7be <_strtol_l.constprop.0+0xea>
 800b7b0:	b106      	cbz	r6, 800b7b4 <_strtol_l.constprop.0+0xe0>
 800b7b2:	4240      	negs	r0, r0
 800b7b4:	f1b8 0f00 	cmp.w	r8, #0
 800b7b8:	d099      	beq.n	800b6ee <_strtol_l.constprop.0+0x1a>
 800b7ba:	2a00      	cmp	r2, #0
 800b7bc:	d1f6      	bne.n	800b7ac <_strtol_l.constprop.0+0xd8>
 800b7be:	f8c8 1000 	str.w	r1, [r8]
 800b7c2:	e794      	b.n	800b6ee <_strtol_l.constprop.0+0x1a>
 800b7c4:	0800d2a9 	.word	0x0800d2a9

0800b7c8 <_strtol_r>:
 800b7c8:	f7ff bf84 	b.w	800b6d4 <_strtol_l.constprop.0>

0800b7cc <__ssputs_r>:
 800b7cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7d0:	688e      	ldr	r6, [r1, #8]
 800b7d2:	461f      	mov	r7, r3
 800b7d4:	42be      	cmp	r6, r7
 800b7d6:	680b      	ldr	r3, [r1, #0]
 800b7d8:	4682      	mov	sl, r0
 800b7da:	460c      	mov	r4, r1
 800b7dc:	4690      	mov	r8, r2
 800b7de:	d82d      	bhi.n	800b83c <__ssputs_r+0x70>
 800b7e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b7e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b7e8:	d026      	beq.n	800b838 <__ssputs_r+0x6c>
 800b7ea:	6965      	ldr	r5, [r4, #20]
 800b7ec:	6909      	ldr	r1, [r1, #16]
 800b7ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b7f2:	eba3 0901 	sub.w	r9, r3, r1
 800b7f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b7fa:	1c7b      	adds	r3, r7, #1
 800b7fc:	444b      	add	r3, r9
 800b7fe:	106d      	asrs	r5, r5, #1
 800b800:	429d      	cmp	r5, r3
 800b802:	bf38      	it	cc
 800b804:	461d      	movcc	r5, r3
 800b806:	0553      	lsls	r3, r2, #21
 800b808:	d527      	bpl.n	800b85a <__ssputs_r+0x8e>
 800b80a:	4629      	mov	r1, r5
 800b80c:	f7fc fc44 	bl	8008098 <_malloc_r>
 800b810:	4606      	mov	r6, r0
 800b812:	b360      	cbz	r0, 800b86e <__ssputs_r+0xa2>
 800b814:	6921      	ldr	r1, [r4, #16]
 800b816:	464a      	mov	r2, r9
 800b818:	f000 fbbc 	bl	800bf94 <memcpy>
 800b81c:	89a3      	ldrh	r3, [r4, #12]
 800b81e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b826:	81a3      	strh	r3, [r4, #12]
 800b828:	6126      	str	r6, [r4, #16]
 800b82a:	6165      	str	r5, [r4, #20]
 800b82c:	444e      	add	r6, r9
 800b82e:	eba5 0509 	sub.w	r5, r5, r9
 800b832:	6026      	str	r6, [r4, #0]
 800b834:	60a5      	str	r5, [r4, #8]
 800b836:	463e      	mov	r6, r7
 800b838:	42be      	cmp	r6, r7
 800b83a:	d900      	bls.n	800b83e <__ssputs_r+0x72>
 800b83c:	463e      	mov	r6, r7
 800b83e:	6820      	ldr	r0, [r4, #0]
 800b840:	4632      	mov	r2, r6
 800b842:	4641      	mov	r1, r8
 800b844:	f000 fb6a 	bl	800bf1c <memmove>
 800b848:	68a3      	ldr	r3, [r4, #8]
 800b84a:	1b9b      	subs	r3, r3, r6
 800b84c:	60a3      	str	r3, [r4, #8]
 800b84e:	6823      	ldr	r3, [r4, #0]
 800b850:	4433      	add	r3, r6
 800b852:	6023      	str	r3, [r4, #0]
 800b854:	2000      	movs	r0, #0
 800b856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b85a:	462a      	mov	r2, r5
 800b85c:	f000 ff2d 	bl	800c6ba <_realloc_r>
 800b860:	4606      	mov	r6, r0
 800b862:	2800      	cmp	r0, #0
 800b864:	d1e0      	bne.n	800b828 <__ssputs_r+0x5c>
 800b866:	6921      	ldr	r1, [r4, #16]
 800b868:	4650      	mov	r0, sl
 800b86a:	f7fe fc2d 	bl	800a0c8 <_free_r>
 800b86e:	230c      	movs	r3, #12
 800b870:	f8ca 3000 	str.w	r3, [sl]
 800b874:	89a3      	ldrh	r3, [r4, #12]
 800b876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b87a:	81a3      	strh	r3, [r4, #12]
 800b87c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b880:	e7e9      	b.n	800b856 <__ssputs_r+0x8a>
	...

0800b884 <_svfiprintf_r>:
 800b884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b888:	4698      	mov	r8, r3
 800b88a:	898b      	ldrh	r3, [r1, #12]
 800b88c:	061b      	lsls	r3, r3, #24
 800b88e:	b09d      	sub	sp, #116	@ 0x74
 800b890:	4607      	mov	r7, r0
 800b892:	460d      	mov	r5, r1
 800b894:	4614      	mov	r4, r2
 800b896:	d510      	bpl.n	800b8ba <_svfiprintf_r+0x36>
 800b898:	690b      	ldr	r3, [r1, #16]
 800b89a:	b973      	cbnz	r3, 800b8ba <_svfiprintf_r+0x36>
 800b89c:	2140      	movs	r1, #64	@ 0x40
 800b89e:	f7fc fbfb 	bl	8008098 <_malloc_r>
 800b8a2:	6028      	str	r0, [r5, #0]
 800b8a4:	6128      	str	r0, [r5, #16]
 800b8a6:	b930      	cbnz	r0, 800b8b6 <_svfiprintf_r+0x32>
 800b8a8:	230c      	movs	r3, #12
 800b8aa:	603b      	str	r3, [r7, #0]
 800b8ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b8b0:	b01d      	add	sp, #116	@ 0x74
 800b8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8b6:	2340      	movs	r3, #64	@ 0x40
 800b8b8:	616b      	str	r3, [r5, #20]
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8be:	2320      	movs	r3, #32
 800b8c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b8c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8c8:	2330      	movs	r3, #48	@ 0x30
 800b8ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ba68 <_svfiprintf_r+0x1e4>
 800b8ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b8d2:	f04f 0901 	mov.w	r9, #1
 800b8d6:	4623      	mov	r3, r4
 800b8d8:	469a      	mov	sl, r3
 800b8da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8de:	b10a      	cbz	r2, 800b8e4 <_svfiprintf_r+0x60>
 800b8e0:	2a25      	cmp	r2, #37	@ 0x25
 800b8e2:	d1f9      	bne.n	800b8d8 <_svfiprintf_r+0x54>
 800b8e4:	ebba 0b04 	subs.w	fp, sl, r4
 800b8e8:	d00b      	beq.n	800b902 <_svfiprintf_r+0x7e>
 800b8ea:	465b      	mov	r3, fp
 800b8ec:	4622      	mov	r2, r4
 800b8ee:	4629      	mov	r1, r5
 800b8f0:	4638      	mov	r0, r7
 800b8f2:	f7ff ff6b 	bl	800b7cc <__ssputs_r>
 800b8f6:	3001      	adds	r0, #1
 800b8f8:	f000 80a7 	beq.w	800ba4a <_svfiprintf_r+0x1c6>
 800b8fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8fe:	445a      	add	r2, fp
 800b900:	9209      	str	r2, [sp, #36]	@ 0x24
 800b902:	f89a 3000 	ldrb.w	r3, [sl]
 800b906:	2b00      	cmp	r3, #0
 800b908:	f000 809f 	beq.w	800ba4a <_svfiprintf_r+0x1c6>
 800b90c:	2300      	movs	r3, #0
 800b90e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b916:	f10a 0a01 	add.w	sl, sl, #1
 800b91a:	9304      	str	r3, [sp, #16]
 800b91c:	9307      	str	r3, [sp, #28]
 800b91e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b922:	931a      	str	r3, [sp, #104]	@ 0x68
 800b924:	4654      	mov	r4, sl
 800b926:	2205      	movs	r2, #5
 800b928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b92c:	484e      	ldr	r0, [pc, #312]	@ (800ba68 <_svfiprintf_r+0x1e4>)
 800b92e:	f7f4 fc6f 	bl	8000210 <memchr>
 800b932:	9a04      	ldr	r2, [sp, #16]
 800b934:	b9d8      	cbnz	r0, 800b96e <_svfiprintf_r+0xea>
 800b936:	06d0      	lsls	r0, r2, #27
 800b938:	bf44      	itt	mi
 800b93a:	2320      	movmi	r3, #32
 800b93c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b940:	0711      	lsls	r1, r2, #28
 800b942:	bf44      	itt	mi
 800b944:	232b      	movmi	r3, #43	@ 0x2b
 800b946:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b94a:	f89a 3000 	ldrb.w	r3, [sl]
 800b94e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b950:	d015      	beq.n	800b97e <_svfiprintf_r+0xfa>
 800b952:	9a07      	ldr	r2, [sp, #28]
 800b954:	4654      	mov	r4, sl
 800b956:	2000      	movs	r0, #0
 800b958:	f04f 0c0a 	mov.w	ip, #10
 800b95c:	4621      	mov	r1, r4
 800b95e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b962:	3b30      	subs	r3, #48	@ 0x30
 800b964:	2b09      	cmp	r3, #9
 800b966:	d94b      	bls.n	800ba00 <_svfiprintf_r+0x17c>
 800b968:	b1b0      	cbz	r0, 800b998 <_svfiprintf_r+0x114>
 800b96a:	9207      	str	r2, [sp, #28]
 800b96c:	e014      	b.n	800b998 <_svfiprintf_r+0x114>
 800b96e:	eba0 0308 	sub.w	r3, r0, r8
 800b972:	fa09 f303 	lsl.w	r3, r9, r3
 800b976:	4313      	orrs	r3, r2
 800b978:	9304      	str	r3, [sp, #16]
 800b97a:	46a2      	mov	sl, r4
 800b97c:	e7d2      	b.n	800b924 <_svfiprintf_r+0xa0>
 800b97e:	9b03      	ldr	r3, [sp, #12]
 800b980:	1d19      	adds	r1, r3, #4
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	9103      	str	r1, [sp, #12]
 800b986:	2b00      	cmp	r3, #0
 800b988:	bfbb      	ittet	lt
 800b98a:	425b      	neglt	r3, r3
 800b98c:	f042 0202 	orrlt.w	r2, r2, #2
 800b990:	9307      	strge	r3, [sp, #28]
 800b992:	9307      	strlt	r3, [sp, #28]
 800b994:	bfb8      	it	lt
 800b996:	9204      	strlt	r2, [sp, #16]
 800b998:	7823      	ldrb	r3, [r4, #0]
 800b99a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b99c:	d10a      	bne.n	800b9b4 <_svfiprintf_r+0x130>
 800b99e:	7863      	ldrb	r3, [r4, #1]
 800b9a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9a2:	d132      	bne.n	800ba0a <_svfiprintf_r+0x186>
 800b9a4:	9b03      	ldr	r3, [sp, #12]
 800b9a6:	1d1a      	adds	r2, r3, #4
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	9203      	str	r2, [sp, #12]
 800b9ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b9b0:	3402      	adds	r4, #2
 800b9b2:	9305      	str	r3, [sp, #20]
 800b9b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ba78 <_svfiprintf_r+0x1f4>
 800b9b8:	7821      	ldrb	r1, [r4, #0]
 800b9ba:	2203      	movs	r2, #3
 800b9bc:	4650      	mov	r0, sl
 800b9be:	f7f4 fc27 	bl	8000210 <memchr>
 800b9c2:	b138      	cbz	r0, 800b9d4 <_svfiprintf_r+0x150>
 800b9c4:	9b04      	ldr	r3, [sp, #16]
 800b9c6:	eba0 000a 	sub.w	r0, r0, sl
 800b9ca:	2240      	movs	r2, #64	@ 0x40
 800b9cc:	4082      	lsls	r2, r0
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	3401      	adds	r4, #1
 800b9d2:	9304      	str	r3, [sp, #16]
 800b9d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9d8:	4824      	ldr	r0, [pc, #144]	@ (800ba6c <_svfiprintf_r+0x1e8>)
 800b9da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b9de:	2206      	movs	r2, #6
 800b9e0:	f7f4 fc16 	bl	8000210 <memchr>
 800b9e4:	2800      	cmp	r0, #0
 800b9e6:	d036      	beq.n	800ba56 <_svfiprintf_r+0x1d2>
 800b9e8:	4b21      	ldr	r3, [pc, #132]	@ (800ba70 <_svfiprintf_r+0x1ec>)
 800b9ea:	bb1b      	cbnz	r3, 800ba34 <_svfiprintf_r+0x1b0>
 800b9ec:	9b03      	ldr	r3, [sp, #12]
 800b9ee:	3307      	adds	r3, #7
 800b9f0:	f023 0307 	bic.w	r3, r3, #7
 800b9f4:	3308      	adds	r3, #8
 800b9f6:	9303      	str	r3, [sp, #12]
 800b9f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9fa:	4433      	add	r3, r6
 800b9fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9fe:	e76a      	b.n	800b8d6 <_svfiprintf_r+0x52>
 800ba00:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba04:	460c      	mov	r4, r1
 800ba06:	2001      	movs	r0, #1
 800ba08:	e7a8      	b.n	800b95c <_svfiprintf_r+0xd8>
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	3401      	adds	r4, #1
 800ba0e:	9305      	str	r3, [sp, #20]
 800ba10:	4619      	mov	r1, r3
 800ba12:	f04f 0c0a 	mov.w	ip, #10
 800ba16:	4620      	mov	r0, r4
 800ba18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba1c:	3a30      	subs	r2, #48	@ 0x30
 800ba1e:	2a09      	cmp	r2, #9
 800ba20:	d903      	bls.n	800ba2a <_svfiprintf_r+0x1a6>
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d0c6      	beq.n	800b9b4 <_svfiprintf_r+0x130>
 800ba26:	9105      	str	r1, [sp, #20]
 800ba28:	e7c4      	b.n	800b9b4 <_svfiprintf_r+0x130>
 800ba2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba2e:	4604      	mov	r4, r0
 800ba30:	2301      	movs	r3, #1
 800ba32:	e7f0      	b.n	800ba16 <_svfiprintf_r+0x192>
 800ba34:	ab03      	add	r3, sp, #12
 800ba36:	9300      	str	r3, [sp, #0]
 800ba38:	462a      	mov	r2, r5
 800ba3a:	4b0e      	ldr	r3, [pc, #56]	@ (800ba74 <_svfiprintf_r+0x1f0>)
 800ba3c:	a904      	add	r1, sp, #16
 800ba3e:	4638      	mov	r0, r7
 800ba40:	f7fc fc56 	bl	80082f0 <_printf_float>
 800ba44:	1c42      	adds	r2, r0, #1
 800ba46:	4606      	mov	r6, r0
 800ba48:	d1d6      	bne.n	800b9f8 <_svfiprintf_r+0x174>
 800ba4a:	89ab      	ldrh	r3, [r5, #12]
 800ba4c:	065b      	lsls	r3, r3, #25
 800ba4e:	f53f af2d 	bmi.w	800b8ac <_svfiprintf_r+0x28>
 800ba52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ba54:	e72c      	b.n	800b8b0 <_svfiprintf_r+0x2c>
 800ba56:	ab03      	add	r3, sp, #12
 800ba58:	9300      	str	r3, [sp, #0]
 800ba5a:	462a      	mov	r2, r5
 800ba5c:	4b05      	ldr	r3, [pc, #20]	@ (800ba74 <_svfiprintf_r+0x1f0>)
 800ba5e:	a904      	add	r1, sp, #16
 800ba60:	4638      	mov	r0, r7
 800ba62:	f7fc fedd 	bl	8008820 <_printf_i>
 800ba66:	e7ed      	b.n	800ba44 <_svfiprintf_r+0x1c0>
 800ba68:	0800d3a9 	.word	0x0800d3a9
 800ba6c:	0800d3b3 	.word	0x0800d3b3
 800ba70:	080082f1 	.word	0x080082f1
 800ba74:	0800b7cd 	.word	0x0800b7cd
 800ba78:	0800d3af 	.word	0x0800d3af

0800ba7c <__sfputc_r>:
 800ba7c:	6893      	ldr	r3, [r2, #8]
 800ba7e:	3b01      	subs	r3, #1
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	b410      	push	{r4}
 800ba84:	6093      	str	r3, [r2, #8]
 800ba86:	da08      	bge.n	800ba9a <__sfputc_r+0x1e>
 800ba88:	6994      	ldr	r4, [r2, #24]
 800ba8a:	42a3      	cmp	r3, r4
 800ba8c:	db01      	blt.n	800ba92 <__sfputc_r+0x16>
 800ba8e:	290a      	cmp	r1, #10
 800ba90:	d103      	bne.n	800ba9a <__sfputc_r+0x1e>
 800ba92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba96:	f7fd bb8c 	b.w	80091b2 <__swbuf_r>
 800ba9a:	6813      	ldr	r3, [r2, #0]
 800ba9c:	1c58      	adds	r0, r3, #1
 800ba9e:	6010      	str	r0, [r2, #0]
 800baa0:	7019      	strb	r1, [r3, #0]
 800baa2:	4608      	mov	r0, r1
 800baa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baa8:	4770      	bx	lr

0800baaa <__sfputs_r>:
 800baaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baac:	4606      	mov	r6, r0
 800baae:	460f      	mov	r7, r1
 800bab0:	4614      	mov	r4, r2
 800bab2:	18d5      	adds	r5, r2, r3
 800bab4:	42ac      	cmp	r4, r5
 800bab6:	d101      	bne.n	800babc <__sfputs_r+0x12>
 800bab8:	2000      	movs	r0, #0
 800baba:	e007      	b.n	800bacc <__sfputs_r+0x22>
 800babc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bac0:	463a      	mov	r2, r7
 800bac2:	4630      	mov	r0, r6
 800bac4:	f7ff ffda 	bl	800ba7c <__sfputc_r>
 800bac8:	1c43      	adds	r3, r0, #1
 800baca:	d1f3      	bne.n	800bab4 <__sfputs_r+0xa>
 800bacc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bad0 <_vfiprintf_r>:
 800bad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bad4:	460d      	mov	r5, r1
 800bad6:	b09d      	sub	sp, #116	@ 0x74
 800bad8:	4614      	mov	r4, r2
 800bada:	4698      	mov	r8, r3
 800badc:	4606      	mov	r6, r0
 800bade:	b118      	cbz	r0, 800bae8 <_vfiprintf_r+0x18>
 800bae0:	6a03      	ldr	r3, [r0, #32]
 800bae2:	b90b      	cbnz	r3, 800bae8 <_vfiprintf_r+0x18>
 800bae4:	f7fd fa5c 	bl	8008fa0 <__sinit>
 800bae8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800baea:	07d9      	lsls	r1, r3, #31
 800baec:	d405      	bmi.n	800bafa <_vfiprintf_r+0x2a>
 800baee:	89ab      	ldrh	r3, [r5, #12]
 800baf0:	059a      	lsls	r2, r3, #22
 800baf2:	d402      	bmi.n	800bafa <_vfiprintf_r+0x2a>
 800baf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800baf6:	f7fd fc90 	bl	800941a <__retarget_lock_acquire_recursive>
 800bafa:	89ab      	ldrh	r3, [r5, #12]
 800bafc:	071b      	lsls	r3, r3, #28
 800bafe:	d501      	bpl.n	800bb04 <_vfiprintf_r+0x34>
 800bb00:	692b      	ldr	r3, [r5, #16]
 800bb02:	b99b      	cbnz	r3, 800bb2c <_vfiprintf_r+0x5c>
 800bb04:	4629      	mov	r1, r5
 800bb06:	4630      	mov	r0, r6
 800bb08:	f7fd fb92 	bl	8009230 <__swsetup_r>
 800bb0c:	b170      	cbz	r0, 800bb2c <_vfiprintf_r+0x5c>
 800bb0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb10:	07dc      	lsls	r4, r3, #31
 800bb12:	d504      	bpl.n	800bb1e <_vfiprintf_r+0x4e>
 800bb14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb18:	b01d      	add	sp, #116	@ 0x74
 800bb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb1e:	89ab      	ldrh	r3, [r5, #12]
 800bb20:	0598      	lsls	r0, r3, #22
 800bb22:	d4f7      	bmi.n	800bb14 <_vfiprintf_r+0x44>
 800bb24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb26:	f7fd fc79 	bl	800941c <__retarget_lock_release_recursive>
 800bb2a:	e7f3      	b.n	800bb14 <_vfiprintf_r+0x44>
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb30:	2320      	movs	r3, #32
 800bb32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb36:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb3a:	2330      	movs	r3, #48	@ 0x30
 800bb3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bcec <_vfiprintf_r+0x21c>
 800bb40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb44:	f04f 0901 	mov.w	r9, #1
 800bb48:	4623      	mov	r3, r4
 800bb4a:	469a      	mov	sl, r3
 800bb4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb50:	b10a      	cbz	r2, 800bb56 <_vfiprintf_r+0x86>
 800bb52:	2a25      	cmp	r2, #37	@ 0x25
 800bb54:	d1f9      	bne.n	800bb4a <_vfiprintf_r+0x7a>
 800bb56:	ebba 0b04 	subs.w	fp, sl, r4
 800bb5a:	d00b      	beq.n	800bb74 <_vfiprintf_r+0xa4>
 800bb5c:	465b      	mov	r3, fp
 800bb5e:	4622      	mov	r2, r4
 800bb60:	4629      	mov	r1, r5
 800bb62:	4630      	mov	r0, r6
 800bb64:	f7ff ffa1 	bl	800baaa <__sfputs_r>
 800bb68:	3001      	adds	r0, #1
 800bb6a:	f000 80a7 	beq.w	800bcbc <_vfiprintf_r+0x1ec>
 800bb6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb70:	445a      	add	r2, fp
 800bb72:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb74:	f89a 3000 	ldrb.w	r3, [sl]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f000 809f 	beq.w	800bcbc <_vfiprintf_r+0x1ec>
 800bb7e:	2300      	movs	r3, #0
 800bb80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bb84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb88:	f10a 0a01 	add.w	sl, sl, #1
 800bb8c:	9304      	str	r3, [sp, #16]
 800bb8e:	9307      	str	r3, [sp, #28]
 800bb90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb94:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb96:	4654      	mov	r4, sl
 800bb98:	2205      	movs	r2, #5
 800bb9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb9e:	4853      	ldr	r0, [pc, #332]	@ (800bcec <_vfiprintf_r+0x21c>)
 800bba0:	f7f4 fb36 	bl	8000210 <memchr>
 800bba4:	9a04      	ldr	r2, [sp, #16]
 800bba6:	b9d8      	cbnz	r0, 800bbe0 <_vfiprintf_r+0x110>
 800bba8:	06d1      	lsls	r1, r2, #27
 800bbaa:	bf44      	itt	mi
 800bbac:	2320      	movmi	r3, #32
 800bbae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbb2:	0713      	lsls	r3, r2, #28
 800bbb4:	bf44      	itt	mi
 800bbb6:	232b      	movmi	r3, #43	@ 0x2b
 800bbb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbbc:	f89a 3000 	ldrb.w	r3, [sl]
 800bbc0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbc2:	d015      	beq.n	800bbf0 <_vfiprintf_r+0x120>
 800bbc4:	9a07      	ldr	r2, [sp, #28]
 800bbc6:	4654      	mov	r4, sl
 800bbc8:	2000      	movs	r0, #0
 800bbca:	f04f 0c0a 	mov.w	ip, #10
 800bbce:	4621      	mov	r1, r4
 800bbd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbd4:	3b30      	subs	r3, #48	@ 0x30
 800bbd6:	2b09      	cmp	r3, #9
 800bbd8:	d94b      	bls.n	800bc72 <_vfiprintf_r+0x1a2>
 800bbda:	b1b0      	cbz	r0, 800bc0a <_vfiprintf_r+0x13a>
 800bbdc:	9207      	str	r2, [sp, #28]
 800bbde:	e014      	b.n	800bc0a <_vfiprintf_r+0x13a>
 800bbe0:	eba0 0308 	sub.w	r3, r0, r8
 800bbe4:	fa09 f303 	lsl.w	r3, r9, r3
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	9304      	str	r3, [sp, #16]
 800bbec:	46a2      	mov	sl, r4
 800bbee:	e7d2      	b.n	800bb96 <_vfiprintf_r+0xc6>
 800bbf0:	9b03      	ldr	r3, [sp, #12]
 800bbf2:	1d19      	adds	r1, r3, #4
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	9103      	str	r1, [sp, #12]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	bfbb      	ittet	lt
 800bbfc:	425b      	neglt	r3, r3
 800bbfe:	f042 0202 	orrlt.w	r2, r2, #2
 800bc02:	9307      	strge	r3, [sp, #28]
 800bc04:	9307      	strlt	r3, [sp, #28]
 800bc06:	bfb8      	it	lt
 800bc08:	9204      	strlt	r2, [sp, #16]
 800bc0a:	7823      	ldrb	r3, [r4, #0]
 800bc0c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc0e:	d10a      	bne.n	800bc26 <_vfiprintf_r+0x156>
 800bc10:	7863      	ldrb	r3, [r4, #1]
 800bc12:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc14:	d132      	bne.n	800bc7c <_vfiprintf_r+0x1ac>
 800bc16:	9b03      	ldr	r3, [sp, #12]
 800bc18:	1d1a      	adds	r2, r3, #4
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	9203      	str	r2, [sp, #12]
 800bc1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc22:	3402      	adds	r4, #2
 800bc24:	9305      	str	r3, [sp, #20]
 800bc26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bcfc <_vfiprintf_r+0x22c>
 800bc2a:	7821      	ldrb	r1, [r4, #0]
 800bc2c:	2203      	movs	r2, #3
 800bc2e:	4650      	mov	r0, sl
 800bc30:	f7f4 faee 	bl	8000210 <memchr>
 800bc34:	b138      	cbz	r0, 800bc46 <_vfiprintf_r+0x176>
 800bc36:	9b04      	ldr	r3, [sp, #16]
 800bc38:	eba0 000a 	sub.w	r0, r0, sl
 800bc3c:	2240      	movs	r2, #64	@ 0x40
 800bc3e:	4082      	lsls	r2, r0
 800bc40:	4313      	orrs	r3, r2
 800bc42:	3401      	adds	r4, #1
 800bc44:	9304      	str	r3, [sp, #16]
 800bc46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc4a:	4829      	ldr	r0, [pc, #164]	@ (800bcf0 <_vfiprintf_r+0x220>)
 800bc4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc50:	2206      	movs	r2, #6
 800bc52:	f7f4 fadd 	bl	8000210 <memchr>
 800bc56:	2800      	cmp	r0, #0
 800bc58:	d03f      	beq.n	800bcda <_vfiprintf_r+0x20a>
 800bc5a:	4b26      	ldr	r3, [pc, #152]	@ (800bcf4 <_vfiprintf_r+0x224>)
 800bc5c:	bb1b      	cbnz	r3, 800bca6 <_vfiprintf_r+0x1d6>
 800bc5e:	9b03      	ldr	r3, [sp, #12]
 800bc60:	3307      	adds	r3, #7
 800bc62:	f023 0307 	bic.w	r3, r3, #7
 800bc66:	3308      	adds	r3, #8
 800bc68:	9303      	str	r3, [sp, #12]
 800bc6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc6c:	443b      	add	r3, r7
 800bc6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc70:	e76a      	b.n	800bb48 <_vfiprintf_r+0x78>
 800bc72:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc76:	460c      	mov	r4, r1
 800bc78:	2001      	movs	r0, #1
 800bc7a:	e7a8      	b.n	800bbce <_vfiprintf_r+0xfe>
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	3401      	adds	r4, #1
 800bc80:	9305      	str	r3, [sp, #20]
 800bc82:	4619      	mov	r1, r3
 800bc84:	f04f 0c0a 	mov.w	ip, #10
 800bc88:	4620      	mov	r0, r4
 800bc8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc8e:	3a30      	subs	r2, #48	@ 0x30
 800bc90:	2a09      	cmp	r2, #9
 800bc92:	d903      	bls.n	800bc9c <_vfiprintf_r+0x1cc>
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d0c6      	beq.n	800bc26 <_vfiprintf_r+0x156>
 800bc98:	9105      	str	r1, [sp, #20]
 800bc9a:	e7c4      	b.n	800bc26 <_vfiprintf_r+0x156>
 800bc9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bca0:	4604      	mov	r4, r0
 800bca2:	2301      	movs	r3, #1
 800bca4:	e7f0      	b.n	800bc88 <_vfiprintf_r+0x1b8>
 800bca6:	ab03      	add	r3, sp, #12
 800bca8:	9300      	str	r3, [sp, #0]
 800bcaa:	462a      	mov	r2, r5
 800bcac:	4b12      	ldr	r3, [pc, #72]	@ (800bcf8 <_vfiprintf_r+0x228>)
 800bcae:	a904      	add	r1, sp, #16
 800bcb0:	4630      	mov	r0, r6
 800bcb2:	f7fc fb1d 	bl	80082f0 <_printf_float>
 800bcb6:	4607      	mov	r7, r0
 800bcb8:	1c78      	adds	r0, r7, #1
 800bcba:	d1d6      	bne.n	800bc6a <_vfiprintf_r+0x19a>
 800bcbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcbe:	07d9      	lsls	r1, r3, #31
 800bcc0:	d405      	bmi.n	800bcce <_vfiprintf_r+0x1fe>
 800bcc2:	89ab      	ldrh	r3, [r5, #12]
 800bcc4:	059a      	lsls	r2, r3, #22
 800bcc6:	d402      	bmi.n	800bcce <_vfiprintf_r+0x1fe>
 800bcc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcca:	f7fd fba7 	bl	800941c <__retarget_lock_release_recursive>
 800bcce:	89ab      	ldrh	r3, [r5, #12]
 800bcd0:	065b      	lsls	r3, r3, #25
 800bcd2:	f53f af1f 	bmi.w	800bb14 <_vfiprintf_r+0x44>
 800bcd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bcd8:	e71e      	b.n	800bb18 <_vfiprintf_r+0x48>
 800bcda:	ab03      	add	r3, sp, #12
 800bcdc:	9300      	str	r3, [sp, #0]
 800bcde:	462a      	mov	r2, r5
 800bce0:	4b05      	ldr	r3, [pc, #20]	@ (800bcf8 <_vfiprintf_r+0x228>)
 800bce2:	a904      	add	r1, sp, #16
 800bce4:	4630      	mov	r0, r6
 800bce6:	f7fc fd9b 	bl	8008820 <_printf_i>
 800bcea:	e7e4      	b.n	800bcb6 <_vfiprintf_r+0x1e6>
 800bcec:	0800d3a9 	.word	0x0800d3a9
 800bcf0:	0800d3b3 	.word	0x0800d3b3
 800bcf4:	080082f1 	.word	0x080082f1
 800bcf8:	0800baab 	.word	0x0800baab
 800bcfc:	0800d3af 	.word	0x0800d3af

0800bd00 <__sflush_r>:
 800bd00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd08:	0716      	lsls	r6, r2, #28
 800bd0a:	4605      	mov	r5, r0
 800bd0c:	460c      	mov	r4, r1
 800bd0e:	d454      	bmi.n	800bdba <__sflush_r+0xba>
 800bd10:	684b      	ldr	r3, [r1, #4]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	dc02      	bgt.n	800bd1c <__sflush_r+0x1c>
 800bd16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	dd48      	ble.n	800bdae <__sflush_r+0xae>
 800bd1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd1e:	2e00      	cmp	r6, #0
 800bd20:	d045      	beq.n	800bdae <__sflush_r+0xae>
 800bd22:	2300      	movs	r3, #0
 800bd24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bd28:	682f      	ldr	r7, [r5, #0]
 800bd2a:	6a21      	ldr	r1, [r4, #32]
 800bd2c:	602b      	str	r3, [r5, #0]
 800bd2e:	d030      	beq.n	800bd92 <__sflush_r+0x92>
 800bd30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bd32:	89a3      	ldrh	r3, [r4, #12]
 800bd34:	0759      	lsls	r1, r3, #29
 800bd36:	d505      	bpl.n	800bd44 <__sflush_r+0x44>
 800bd38:	6863      	ldr	r3, [r4, #4]
 800bd3a:	1ad2      	subs	r2, r2, r3
 800bd3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bd3e:	b10b      	cbz	r3, 800bd44 <__sflush_r+0x44>
 800bd40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bd42:	1ad2      	subs	r2, r2, r3
 800bd44:	2300      	movs	r3, #0
 800bd46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd48:	6a21      	ldr	r1, [r4, #32]
 800bd4a:	4628      	mov	r0, r5
 800bd4c:	47b0      	blx	r6
 800bd4e:	1c43      	adds	r3, r0, #1
 800bd50:	89a3      	ldrh	r3, [r4, #12]
 800bd52:	d106      	bne.n	800bd62 <__sflush_r+0x62>
 800bd54:	6829      	ldr	r1, [r5, #0]
 800bd56:	291d      	cmp	r1, #29
 800bd58:	d82b      	bhi.n	800bdb2 <__sflush_r+0xb2>
 800bd5a:	4a2a      	ldr	r2, [pc, #168]	@ (800be04 <__sflush_r+0x104>)
 800bd5c:	410a      	asrs	r2, r1
 800bd5e:	07d6      	lsls	r6, r2, #31
 800bd60:	d427      	bmi.n	800bdb2 <__sflush_r+0xb2>
 800bd62:	2200      	movs	r2, #0
 800bd64:	6062      	str	r2, [r4, #4]
 800bd66:	04d9      	lsls	r1, r3, #19
 800bd68:	6922      	ldr	r2, [r4, #16]
 800bd6a:	6022      	str	r2, [r4, #0]
 800bd6c:	d504      	bpl.n	800bd78 <__sflush_r+0x78>
 800bd6e:	1c42      	adds	r2, r0, #1
 800bd70:	d101      	bne.n	800bd76 <__sflush_r+0x76>
 800bd72:	682b      	ldr	r3, [r5, #0]
 800bd74:	b903      	cbnz	r3, 800bd78 <__sflush_r+0x78>
 800bd76:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd7a:	602f      	str	r7, [r5, #0]
 800bd7c:	b1b9      	cbz	r1, 800bdae <__sflush_r+0xae>
 800bd7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd82:	4299      	cmp	r1, r3
 800bd84:	d002      	beq.n	800bd8c <__sflush_r+0x8c>
 800bd86:	4628      	mov	r0, r5
 800bd88:	f7fe f99e 	bl	800a0c8 <_free_r>
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd90:	e00d      	b.n	800bdae <__sflush_r+0xae>
 800bd92:	2301      	movs	r3, #1
 800bd94:	4628      	mov	r0, r5
 800bd96:	47b0      	blx	r6
 800bd98:	4602      	mov	r2, r0
 800bd9a:	1c50      	adds	r0, r2, #1
 800bd9c:	d1c9      	bne.n	800bd32 <__sflush_r+0x32>
 800bd9e:	682b      	ldr	r3, [r5, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d0c6      	beq.n	800bd32 <__sflush_r+0x32>
 800bda4:	2b1d      	cmp	r3, #29
 800bda6:	d001      	beq.n	800bdac <__sflush_r+0xac>
 800bda8:	2b16      	cmp	r3, #22
 800bdaa:	d11e      	bne.n	800bdea <__sflush_r+0xea>
 800bdac:	602f      	str	r7, [r5, #0]
 800bdae:	2000      	movs	r0, #0
 800bdb0:	e022      	b.n	800bdf8 <__sflush_r+0xf8>
 800bdb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdb6:	b21b      	sxth	r3, r3
 800bdb8:	e01b      	b.n	800bdf2 <__sflush_r+0xf2>
 800bdba:	690f      	ldr	r7, [r1, #16]
 800bdbc:	2f00      	cmp	r7, #0
 800bdbe:	d0f6      	beq.n	800bdae <__sflush_r+0xae>
 800bdc0:	0793      	lsls	r3, r2, #30
 800bdc2:	680e      	ldr	r6, [r1, #0]
 800bdc4:	bf08      	it	eq
 800bdc6:	694b      	ldreq	r3, [r1, #20]
 800bdc8:	600f      	str	r7, [r1, #0]
 800bdca:	bf18      	it	ne
 800bdcc:	2300      	movne	r3, #0
 800bdce:	eba6 0807 	sub.w	r8, r6, r7
 800bdd2:	608b      	str	r3, [r1, #8]
 800bdd4:	f1b8 0f00 	cmp.w	r8, #0
 800bdd8:	dde9      	ble.n	800bdae <__sflush_r+0xae>
 800bdda:	6a21      	ldr	r1, [r4, #32]
 800bddc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bdde:	4643      	mov	r3, r8
 800bde0:	463a      	mov	r2, r7
 800bde2:	4628      	mov	r0, r5
 800bde4:	47b0      	blx	r6
 800bde6:	2800      	cmp	r0, #0
 800bde8:	dc08      	bgt.n	800bdfc <__sflush_r+0xfc>
 800bdea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdf2:	81a3      	strh	r3, [r4, #12]
 800bdf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdfc:	4407      	add	r7, r0
 800bdfe:	eba8 0800 	sub.w	r8, r8, r0
 800be02:	e7e7      	b.n	800bdd4 <__sflush_r+0xd4>
 800be04:	dfbffffe 	.word	0xdfbffffe

0800be08 <_fflush_r>:
 800be08:	b538      	push	{r3, r4, r5, lr}
 800be0a:	690b      	ldr	r3, [r1, #16]
 800be0c:	4605      	mov	r5, r0
 800be0e:	460c      	mov	r4, r1
 800be10:	b913      	cbnz	r3, 800be18 <_fflush_r+0x10>
 800be12:	2500      	movs	r5, #0
 800be14:	4628      	mov	r0, r5
 800be16:	bd38      	pop	{r3, r4, r5, pc}
 800be18:	b118      	cbz	r0, 800be22 <_fflush_r+0x1a>
 800be1a:	6a03      	ldr	r3, [r0, #32]
 800be1c:	b90b      	cbnz	r3, 800be22 <_fflush_r+0x1a>
 800be1e:	f7fd f8bf 	bl	8008fa0 <__sinit>
 800be22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d0f3      	beq.n	800be12 <_fflush_r+0xa>
 800be2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800be2c:	07d0      	lsls	r0, r2, #31
 800be2e:	d404      	bmi.n	800be3a <_fflush_r+0x32>
 800be30:	0599      	lsls	r1, r3, #22
 800be32:	d402      	bmi.n	800be3a <_fflush_r+0x32>
 800be34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be36:	f7fd faf0 	bl	800941a <__retarget_lock_acquire_recursive>
 800be3a:	4628      	mov	r0, r5
 800be3c:	4621      	mov	r1, r4
 800be3e:	f7ff ff5f 	bl	800bd00 <__sflush_r>
 800be42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be44:	07da      	lsls	r2, r3, #31
 800be46:	4605      	mov	r5, r0
 800be48:	d4e4      	bmi.n	800be14 <_fflush_r+0xc>
 800be4a:	89a3      	ldrh	r3, [r4, #12]
 800be4c:	059b      	lsls	r3, r3, #22
 800be4e:	d4e1      	bmi.n	800be14 <_fflush_r+0xc>
 800be50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be52:	f7fd fae3 	bl	800941c <__retarget_lock_release_recursive>
 800be56:	e7dd      	b.n	800be14 <_fflush_r+0xc>

0800be58 <__swhatbuf_r>:
 800be58:	b570      	push	{r4, r5, r6, lr}
 800be5a:	460c      	mov	r4, r1
 800be5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be60:	2900      	cmp	r1, #0
 800be62:	b096      	sub	sp, #88	@ 0x58
 800be64:	4615      	mov	r5, r2
 800be66:	461e      	mov	r6, r3
 800be68:	da0d      	bge.n	800be86 <__swhatbuf_r+0x2e>
 800be6a:	89a3      	ldrh	r3, [r4, #12]
 800be6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800be70:	f04f 0100 	mov.w	r1, #0
 800be74:	bf14      	ite	ne
 800be76:	2340      	movne	r3, #64	@ 0x40
 800be78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800be7c:	2000      	movs	r0, #0
 800be7e:	6031      	str	r1, [r6, #0]
 800be80:	602b      	str	r3, [r5, #0]
 800be82:	b016      	add	sp, #88	@ 0x58
 800be84:	bd70      	pop	{r4, r5, r6, pc}
 800be86:	466a      	mov	r2, sp
 800be88:	f000 f862 	bl	800bf50 <_fstat_r>
 800be8c:	2800      	cmp	r0, #0
 800be8e:	dbec      	blt.n	800be6a <__swhatbuf_r+0x12>
 800be90:	9901      	ldr	r1, [sp, #4]
 800be92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be9a:	4259      	negs	r1, r3
 800be9c:	4159      	adcs	r1, r3
 800be9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bea2:	e7eb      	b.n	800be7c <__swhatbuf_r+0x24>

0800bea4 <__smakebuf_r>:
 800bea4:	898b      	ldrh	r3, [r1, #12]
 800bea6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bea8:	079d      	lsls	r5, r3, #30
 800beaa:	4606      	mov	r6, r0
 800beac:	460c      	mov	r4, r1
 800beae:	d507      	bpl.n	800bec0 <__smakebuf_r+0x1c>
 800beb0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800beb4:	6023      	str	r3, [r4, #0]
 800beb6:	6123      	str	r3, [r4, #16]
 800beb8:	2301      	movs	r3, #1
 800beba:	6163      	str	r3, [r4, #20]
 800bebc:	b003      	add	sp, #12
 800bebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bec0:	ab01      	add	r3, sp, #4
 800bec2:	466a      	mov	r2, sp
 800bec4:	f7ff ffc8 	bl	800be58 <__swhatbuf_r>
 800bec8:	9f00      	ldr	r7, [sp, #0]
 800beca:	4605      	mov	r5, r0
 800becc:	4639      	mov	r1, r7
 800bece:	4630      	mov	r0, r6
 800bed0:	f7fc f8e2 	bl	8008098 <_malloc_r>
 800bed4:	b948      	cbnz	r0, 800beea <__smakebuf_r+0x46>
 800bed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beda:	059a      	lsls	r2, r3, #22
 800bedc:	d4ee      	bmi.n	800bebc <__smakebuf_r+0x18>
 800bede:	f023 0303 	bic.w	r3, r3, #3
 800bee2:	f043 0302 	orr.w	r3, r3, #2
 800bee6:	81a3      	strh	r3, [r4, #12]
 800bee8:	e7e2      	b.n	800beb0 <__smakebuf_r+0xc>
 800beea:	89a3      	ldrh	r3, [r4, #12]
 800beec:	6020      	str	r0, [r4, #0]
 800beee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bef2:	81a3      	strh	r3, [r4, #12]
 800bef4:	9b01      	ldr	r3, [sp, #4]
 800bef6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800befa:	b15b      	cbz	r3, 800bf14 <__smakebuf_r+0x70>
 800befc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf00:	4630      	mov	r0, r6
 800bf02:	f000 f837 	bl	800bf74 <_isatty_r>
 800bf06:	b128      	cbz	r0, 800bf14 <__smakebuf_r+0x70>
 800bf08:	89a3      	ldrh	r3, [r4, #12]
 800bf0a:	f023 0303 	bic.w	r3, r3, #3
 800bf0e:	f043 0301 	orr.w	r3, r3, #1
 800bf12:	81a3      	strh	r3, [r4, #12]
 800bf14:	89a3      	ldrh	r3, [r4, #12]
 800bf16:	431d      	orrs	r5, r3
 800bf18:	81a5      	strh	r5, [r4, #12]
 800bf1a:	e7cf      	b.n	800bebc <__smakebuf_r+0x18>

0800bf1c <memmove>:
 800bf1c:	4288      	cmp	r0, r1
 800bf1e:	b510      	push	{r4, lr}
 800bf20:	eb01 0402 	add.w	r4, r1, r2
 800bf24:	d902      	bls.n	800bf2c <memmove+0x10>
 800bf26:	4284      	cmp	r4, r0
 800bf28:	4623      	mov	r3, r4
 800bf2a:	d807      	bhi.n	800bf3c <memmove+0x20>
 800bf2c:	1e43      	subs	r3, r0, #1
 800bf2e:	42a1      	cmp	r1, r4
 800bf30:	d008      	beq.n	800bf44 <memmove+0x28>
 800bf32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf3a:	e7f8      	b.n	800bf2e <memmove+0x12>
 800bf3c:	4402      	add	r2, r0
 800bf3e:	4601      	mov	r1, r0
 800bf40:	428a      	cmp	r2, r1
 800bf42:	d100      	bne.n	800bf46 <memmove+0x2a>
 800bf44:	bd10      	pop	{r4, pc}
 800bf46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf4e:	e7f7      	b.n	800bf40 <memmove+0x24>

0800bf50 <_fstat_r>:
 800bf50:	b538      	push	{r3, r4, r5, lr}
 800bf52:	4d07      	ldr	r5, [pc, #28]	@ (800bf70 <_fstat_r+0x20>)
 800bf54:	2300      	movs	r3, #0
 800bf56:	4604      	mov	r4, r0
 800bf58:	4608      	mov	r0, r1
 800bf5a:	4611      	mov	r1, r2
 800bf5c:	602b      	str	r3, [r5, #0]
 800bf5e:	f7f6 fbc9 	bl	80026f4 <_fstat>
 800bf62:	1c43      	adds	r3, r0, #1
 800bf64:	d102      	bne.n	800bf6c <_fstat_r+0x1c>
 800bf66:	682b      	ldr	r3, [r5, #0]
 800bf68:	b103      	cbz	r3, 800bf6c <_fstat_r+0x1c>
 800bf6a:	6023      	str	r3, [r4, #0]
 800bf6c:	bd38      	pop	{r3, r4, r5, pc}
 800bf6e:	bf00      	nop
 800bf70:	20000570 	.word	0x20000570

0800bf74 <_isatty_r>:
 800bf74:	b538      	push	{r3, r4, r5, lr}
 800bf76:	4d06      	ldr	r5, [pc, #24]	@ (800bf90 <_isatty_r+0x1c>)
 800bf78:	2300      	movs	r3, #0
 800bf7a:	4604      	mov	r4, r0
 800bf7c:	4608      	mov	r0, r1
 800bf7e:	602b      	str	r3, [r5, #0]
 800bf80:	f7f6 fbc8 	bl	8002714 <_isatty>
 800bf84:	1c43      	adds	r3, r0, #1
 800bf86:	d102      	bne.n	800bf8e <_isatty_r+0x1a>
 800bf88:	682b      	ldr	r3, [r5, #0]
 800bf8a:	b103      	cbz	r3, 800bf8e <_isatty_r+0x1a>
 800bf8c:	6023      	str	r3, [r4, #0]
 800bf8e:	bd38      	pop	{r3, r4, r5, pc}
 800bf90:	20000570 	.word	0x20000570

0800bf94 <memcpy>:
 800bf94:	440a      	add	r2, r1
 800bf96:	4291      	cmp	r1, r2
 800bf98:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800bf9c:	d100      	bne.n	800bfa0 <memcpy+0xc>
 800bf9e:	4770      	bx	lr
 800bfa0:	b510      	push	{r4, lr}
 800bfa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfaa:	4291      	cmp	r1, r2
 800bfac:	d1f9      	bne.n	800bfa2 <memcpy+0xe>
 800bfae:	bd10      	pop	{r4, pc}

0800bfb0 <nan>:
 800bfb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bfb8 <nan+0x8>
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop
 800bfb8:	00000000 	.word	0x00000000
 800bfbc:	7ff80000 	.word	0x7ff80000

0800bfc0 <__assert_func>:
 800bfc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bfc2:	4614      	mov	r4, r2
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	4b09      	ldr	r3, [pc, #36]	@ (800bfec <__assert_func+0x2c>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4605      	mov	r5, r0
 800bfcc:	68d8      	ldr	r0, [r3, #12]
 800bfce:	b954      	cbnz	r4, 800bfe6 <__assert_func+0x26>
 800bfd0:	4b07      	ldr	r3, [pc, #28]	@ (800bff0 <__assert_func+0x30>)
 800bfd2:	461c      	mov	r4, r3
 800bfd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bfd8:	9100      	str	r1, [sp, #0]
 800bfda:	462b      	mov	r3, r5
 800bfdc:	4905      	ldr	r1, [pc, #20]	@ (800bff4 <__assert_func+0x34>)
 800bfde:	f000 fba7 	bl	800c730 <fiprintf>
 800bfe2:	f000 fbb7 	bl	800c754 <abort>
 800bfe6:	4b04      	ldr	r3, [pc, #16]	@ (800bff8 <__assert_func+0x38>)
 800bfe8:	e7f4      	b.n	800bfd4 <__assert_func+0x14>
 800bfea:	bf00      	nop
 800bfec:	20000018 	.word	0x20000018
 800bff0:	0800d3fd 	.word	0x0800d3fd
 800bff4:	0800d3cf 	.word	0x0800d3cf
 800bff8:	0800d3c2 	.word	0x0800d3c2

0800bffc <_calloc_r>:
 800bffc:	b570      	push	{r4, r5, r6, lr}
 800bffe:	fba1 5402 	umull	r5, r4, r1, r2
 800c002:	b93c      	cbnz	r4, 800c014 <_calloc_r+0x18>
 800c004:	4629      	mov	r1, r5
 800c006:	f7fc f847 	bl	8008098 <_malloc_r>
 800c00a:	4606      	mov	r6, r0
 800c00c:	b928      	cbnz	r0, 800c01a <_calloc_r+0x1e>
 800c00e:	2600      	movs	r6, #0
 800c010:	4630      	mov	r0, r6
 800c012:	bd70      	pop	{r4, r5, r6, pc}
 800c014:	220c      	movs	r2, #12
 800c016:	6002      	str	r2, [r0, #0]
 800c018:	e7f9      	b.n	800c00e <_calloc_r+0x12>
 800c01a:	462a      	mov	r2, r5
 800c01c:	4621      	mov	r1, r4
 800c01e:	f7fd f95d 	bl	80092dc <memset>
 800c022:	e7f5      	b.n	800c010 <_calloc_r+0x14>

0800c024 <rshift>:
 800c024:	6903      	ldr	r3, [r0, #16]
 800c026:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c02a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c02e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c032:	f100 0414 	add.w	r4, r0, #20
 800c036:	dd45      	ble.n	800c0c4 <rshift+0xa0>
 800c038:	f011 011f 	ands.w	r1, r1, #31
 800c03c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c040:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c044:	d10c      	bne.n	800c060 <rshift+0x3c>
 800c046:	f100 0710 	add.w	r7, r0, #16
 800c04a:	4629      	mov	r1, r5
 800c04c:	42b1      	cmp	r1, r6
 800c04e:	d334      	bcc.n	800c0ba <rshift+0x96>
 800c050:	1a9b      	subs	r3, r3, r2
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	1eea      	subs	r2, r5, #3
 800c056:	4296      	cmp	r6, r2
 800c058:	bf38      	it	cc
 800c05a:	2300      	movcc	r3, #0
 800c05c:	4423      	add	r3, r4
 800c05e:	e015      	b.n	800c08c <rshift+0x68>
 800c060:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c064:	f1c1 0820 	rsb	r8, r1, #32
 800c068:	40cf      	lsrs	r7, r1
 800c06a:	f105 0e04 	add.w	lr, r5, #4
 800c06e:	46a1      	mov	r9, r4
 800c070:	4576      	cmp	r6, lr
 800c072:	46f4      	mov	ip, lr
 800c074:	d815      	bhi.n	800c0a2 <rshift+0x7e>
 800c076:	1a9a      	subs	r2, r3, r2
 800c078:	0092      	lsls	r2, r2, #2
 800c07a:	3a04      	subs	r2, #4
 800c07c:	3501      	adds	r5, #1
 800c07e:	42ae      	cmp	r6, r5
 800c080:	bf38      	it	cc
 800c082:	2200      	movcc	r2, #0
 800c084:	18a3      	adds	r3, r4, r2
 800c086:	50a7      	str	r7, [r4, r2]
 800c088:	b107      	cbz	r7, 800c08c <rshift+0x68>
 800c08a:	3304      	adds	r3, #4
 800c08c:	1b1a      	subs	r2, r3, r4
 800c08e:	42a3      	cmp	r3, r4
 800c090:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c094:	bf08      	it	eq
 800c096:	2300      	moveq	r3, #0
 800c098:	6102      	str	r2, [r0, #16]
 800c09a:	bf08      	it	eq
 800c09c:	6143      	streq	r3, [r0, #20]
 800c09e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0a2:	f8dc c000 	ldr.w	ip, [ip]
 800c0a6:	fa0c fc08 	lsl.w	ip, ip, r8
 800c0aa:	ea4c 0707 	orr.w	r7, ip, r7
 800c0ae:	f849 7b04 	str.w	r7, [r9], #4
 800c0b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c0b6:	40cf      	lsrs	r7, r1
 800c0b8:	e7da      	b.n	800c070 <rshift+0x4c>
 800c0ba:	f851 cb04 	ldr.w	ip, [r1], #4
 800c0be:	f847 cf04 	str.w	ip, [r7, #4]!
 800c0c2:	e7c3      	b.n	800c04c <rshift+0x28>
 800c0c4:	4623      	mov	r3, r4
 800c0c6:	e7e1      	b.n	800c08c <rshift+0x68>

0800c0c8 <__hexdig_fun>:
 800c0c8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c0cc:	2b09      	cmp	r3, #9
 800c0ce:	d802      	bhi.n	800c0d6 <__hexdig_fun+0xe>
 800c0d0:	3820      	subs	r0, #32
 800c0d2:	b2c0      	uxtb	r0, r0
 800c0d4:	4770      	bx	lr
 800c0d6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c0da:	2b05      	cmp	r3, #5
 800c0dc:	d801      	bhi.n	800c0e2 <__hexdig_fun+0x1a>
 800c0de:	3847      	subs	r0, #71	@ 0x47
 800c0e0:	e7f7      	b.n	800c0d2 <__hexdig_fun+0xa>
 800c0e2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c0e6:	2b05      	cmp	r3, #5
 800c0e8:	d801      	bhi.n	800c0ee <__hexdig_fun+0x26>
 800c0ea:	3827      	subs	r0, #39	@ 0x27
 800c0ec:	e7f1      	b.n	800c0d2 <__hexdig_fun+0xa>
 800c0ee:	2000      	movs	r0, #0
 800c0f0:	4770      	bx	lr
	...

0800c0f4 <__gethex>:
 800c0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f8:	b085      	sub	sp, #20
 800c0fa:	468a      	mov	sl, r1
 800c0fc:	9302      	str	r3, [sp, #8]
 800c0fe:	680b      	ldr	r3, [r1, #0]
 800c100:	9001      	str	r0, [sp, #4]
 800c102:	4690      	mov	r8, r2
 800c104:	1c9c      	adds	r4, r3, #2
 800c106:	46a1      	mov	r9, r4
 800c108:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c10c:	2830      	cmp	r0, #48	@ 0x30
 800c10e:	d0fa      	beq.n	800c106 <__gethex+0x12>
 800c110:	eba9 0303 	sub.w	r3, r9, r3
 800c114:	f1a3 0b02 	sub.w	fp, r3, #2
 800c118:	f7ff ffd6 	bl	800c0c8 <__hexdig_fun>
 800c11c:	4605      	mov	r5, r0
 800c11e:	2800      	cmp	r0, #0
 800c120:	d168      	bne.n	800c1f4 <__gethex+0x100>
 800c122:	49a0      	ldr	r1, [pc, #640]	@ (800c3a4 <__gethex+0x2b0>)
 800c124:	2201      	movs	r2, #1
 800c126:	4648      	mov	r0, r9
 800c128:	f7fd f8e0 	bl	80092ec <strncmp>
 800c12c:	4607      	mov	r7, r0
 800c12e:	2800      	cmp	r0, #0
 800c130:	d167      	bne.n	800c202 <__gethex+0x10e>
 800c132:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c136:	4626      	mov	r6, r4
 800c138:	f7ff ffc6 	bl	800c0c8 <__hexdig_fun>
 800c13c:	2800      	cmp	r0, #0
 800c13e:	d062      	beq.n	800c206 <__gethex+0x112>
 800c140:	4623      	mov	r3, r4
 800c142:	7818      	ldrb	r0, [r3, #0]
 800c144:	2830      	cmp	r0, #48	@ 0x30
 800c146:	4699      	mov	r9, r3
 800c148:	f103 0301 	add.w	r3, r3, #1
 800c14c:	d0f9      	beq.n	800c142 <__gethex+0x4e>
 800c14e:	f7ff ffbb 	bl	800c0c8 <__hexdig_fun>
 800c152:	fab0 f580 	clz	r5, r0
 800c156:	096d      	lsrs	r5, r5, #5
 800c158:	f04f 0b01 	mov.w	fp, #1
 800c15c:	464a      	mov	r2, r9
 800c15e:	4616      	mov	r6, r2
 800c160:	3201      	adds	r2, #1
 800c162:	7830      	ldrb	r0, [r6, #0]
 800c164:	f7ff ffb0 	bl	800c0c8 <__hexdig_fun>
 800c168:	2800      	cmp	r0, #0
 800c16a:	d1f8      	bne.n	800c15e <__gethex+0x6a>
 800c16c:	498d      	ldr	r1, [pc, #564]	@ (800c3a4 <__gethex+0x2b0>)
 800c16e:	2201      	movs	r2, #1
 800c170:	4630      	mov	r0, r6
 800c172:	f7fd f8bb 	bl	80092ec <strncmp>
 800c176:	2800      	cmp	r0, #0
 800c178:	d13f      	bne.n	800c1fa <__gethex+0x106>
 800c17a:	b944      	cbnz	r4, 800c18e <__gethex+0x9a>
 800c17c:	1c74      	adds	r4, r6, #1
 800c17e:	4622      	mov	r2, r4
 800c180:	4616      	mov	r6, r2
 800c182:	3201      	adds	r2, #1
 800c184:	7830      	ldrb	r0, [r6, #0]
 800c186:	f7ff ff9f 	bl	800c0c8 <__hexdig_fun>
 800c18a:	2800      	cmp	r0, #0
 800c18c:	d1f8      	bne.n	800c180 <__gethex+0x8c>
 800c18e:	1ba4      	subs	r4, r4, r6
 800c190:	00a7      	lsls	r7, r4, #2
 800c192:	7833      	ldrb	r3, [r6, #0]
 800c194:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c198:	2b50      	cmp	r3, #80	@ 0x50
 800c19a:	d13e      	bne.n	800c21a <__gethex+0x126>
 800c19c:	7873      	ldrb	r3, [r6, #1]
 800c19e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c1a0:	d033      	beq.n	800c20a <__gethex+0x116>
 800c1a2:	2b2d      	cmp	r3, #45	@ 0x2d
 800c1a4:	d034      	beq.n	800c210 <__gethex+0x11c>
 800c1a6:	1c71      	adds	r1, r6, #1
 800c1a8:	2400      	movs	r4, #0
 800c1aa:	7808      	ldrb	r0, [r1, #0]
 800c1ac:	f7ff ff8c 	bl	800c0c8 <__hexdig_fun>
 800c1b0:	1e43      	subs	r3, r0, #1
 800c1b2:	b2db      	uxtb	r3, r3
 800c1b4:	2b18      	cmp	r3, #24
 800c1b6:	d830      	bhi.n	800c21a <__gethex+0x126>
 800c1b8:	f1a0 0210 	sub.w	r2, r0, #16
 800c1bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c1c0:	f7ff ff82 	bl	800c0c8 <__hexdig_fun>
 800c1c4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800c1c8:	fa5f fc8c 	uxtb.w	ip, ip
 800c1cc:	f1bc 0f18 	cmp.w	ip, #24
 800c1d0:	f04f 030a 	mov.w	r3, #10
 800c1d4:	d91e      	bls.n	800c214 <__gethex+0x120>
 800c1d6:	b104      	cbz	r4, 800c1da <__gethex+0xe6>
 800c1d8:	4252      	negs	r2, r2
 800c1da:	4417      	add	r7, r2
 800c1dc:	f8ca 1000 	str.w	r1, [sl]
 800c1e0:	b1ed      	cbz	r5, 800c21e <__gethex+0x12a>
 800c1e2:	f1bb 0f00 	cmp.w	fp, #0
 800c1e6:	bf0c      	ite	eq
 800c1e8:	2506      	moveq	r5, #6
 800c1ea:	2500      	movne	r5, #0
 800c1ec:	4628      	mov	r0, r5
 800c1ee:	b005      	add	sp, #20
 800c1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f4:	2500      	movs	r5, #0
 800c1f6:	462c      	mov	r4, r5
 800c1f8:	e7b0      	b.n	800c15c <__gethex+0x68>
 800c1fa:	2c00      	cmp	r4, #0
 800c1fc:	d1c7      	bne.n	800c18e <__gethex+0x9a>
 800c1fe:	4627      	mov	r7, r4
 800c200:	e7c7      	b.n	800c192 <__gethex+0x9e>
 800c202:	464e      	mov	r6, r9
 800c204:	462f      	mov	r7, r5
 800c206:	2501      	movs	r5, #1
 800c208:	e7c3      	b.n	800c192 <__gethex+0x9e>
 800c20a:	2400      	movs	r4, #0
 800c20c:	1cb1      	adds	r1, r6, #2
 800c20e:	e7cc      	b.n	800c1aa <__gethex+0xb6>
 800c210:	2401      	movs	r4, #1
 800c212:	e7fb      	b.n	800c20c <__gethex+0x118>
 800c214:	fb03 0002 	mla	r0, r3, r2, r0
 800c218:	e7ce      	b.n	800c1b8 <__gethex+0xc4>
 800c21a:	4631      	mov	r1, r6
 800c21c:	e7de      	b.n	800c1dc <__gethex+0xe8>
 800c21e:	eba6 0309 	sub.w	r3, r6, r9
 800c222:	3b01      	subs	r3, #1
 800c224:	4629      	mov	r1, r5
 800c226:	2b07      	cmp	r3, #7
 800c228:	dc0a      	bgt.n	800c240 <__gethex+0x14c>
 800c22a:	9801      	ldr	r0, [sp, #4]
 800c22c:	f7fd ff96 	bl	800a15c <_Balloc>
 800c230:	4604      	mov	r4, r0
 800c232:	b940      	cbnz	r0, 800c246 <__gethex+0x152>
 800c234:	4b5c      	ldr	r3, [pc, #368]	@ (800c3a8 <__gethex+0x2b4>)
 800c236:	4602      	mov	r2, r0
 800c238:	21e4      	movs	r1, #228	@ 0xe4
 800c23a:	485c      	ldr	r0, [pc, #368]	@ (800c3ac <__gethex+0x2b8>)
 800c23c:	f7ff fec0 	bl	800bfc0 <__assert_func>
 800c240:	3101      	adds	r1, #1
 800c242:	105b      	asrs	r3, r3, #1
 800c244:	e7ef      	b.n	800c226 <__gethex+0x132>
 800c246:	f100 0a14 	add.w	sl, r0, #20
 800c24a:	2300      	movs	r3, #0
 800c24c:	4655      	mov	r5, sl
 800c24e:	469b      	mov	fp, r3
 800c250:	45b1      	cmp	r9, r6
 800c252:	d337      	bcc.n	800c2c4 <__gethex+0x1d0>
 800c254:	f845 bb04 	str.w	fp, [r5], #4
 800c258:	eba5 050a 	sub.w	r5, r5, sl
 800c25c:	10ad      	asrs	r5, r5, #2
 800c25e:	6125      	str	r5, [r4, #16]
 800c260:	4658      	mov	r0, fp
 800c262:	f7fe f86d 	bl	800a340 <__hi0bits>
 800c266:	016d      	lsls	r5, r5, #5
 800c268:	f8d8 6000 	ldr.w	r6, [r8]
 800c26c:	1a2d      	subs	r5, r5, r0
 800c26e:	42b5      	cmp	r5, r6
 800c270:	dd54      	ble.n	800c31c <__gethex+0x228>
 800c272:	1bad      	subs	r5, r5, r6
 800c274:	4629      	mov	r1, r5
 800c276:	4620      	mov	r0, r4
 800c278:	f7fe fc01 	bl	800aa7e <__any_on>
 800c27c:	4681      	mov	r9, r0
 800c27e:	b178      	cbz	r0, 800c2a0 <__gethex+0x1ac>
 800c280:	1e6b      	subs	r3, r5, #1
 800c282:	1159      	asrs	r1, r3, #5
 800c284:	f003 021f 	and.w	r2, r3, #31
 800c288:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c28c:	f04f 0901 	mov.w	r9, #1
 800c290:	fa09 f202 	lsl.w	r2, r9, r2
 800c294:	420a      	tst	r2, r1
 800c296:	d003      	beq.n	800c2a0 <__gethex+0x1ac>
 800c298:	454b      	cmp	r3, r9
 800c29a:	dc36      	bgt.n	800c30a <__gethex+0x216>
 800c29c:	f04f 0902 	mov.w	r9, #2
 800c2a0:	4629      	mov	r1, r5
 800c2a2:	4620      	mov	r0, r4
 800c2a4:	f7ff febe 	bl	800c024 <rshift>
 800c2a8:	442f      	add	r7, r5
 800c2aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c2ae:	42bb      	cmp	r3, r7
 800c2b0:	da42      	bge.n	800c338 <__gethex+0x244>
 800c2b2:	9801      	ldr	r0, [sp, #4]
 800c2b4:	4621      	mov	r1, r4
 800c2b6:	f7fd ff91 	bl	800a1dc <_Bfree>
 800c2ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c2bc:	2300      	movs	r3, #0
 800c2be:	6013      	str	r3, [r2, #0]
 800c2c0:	25a3      	movs	r5, #163	@ 0xa3
 800c2c2:	e793      	b.n	800c1ec <__gethex+0xf8>
 800c2c4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c2c8:	2a2e      	cmp	r2, #46	@ 0x2e
 800c2ca:	d012      	beq.n	800c2f2 <__gethex+0x1fe>
 800c2cc:	2b20      	cmp	r3, #32
 800c2ce:	d104      	bne.n	800c2da <__gethex+0x1e6>
 800c2d0:	f845 bb04 	str.w	fp, [r5], #4
 800c2d4:	f04f 0b00 	mov.w	fp, #0
 800c2d8:	465b      	mov	r3, fp
 800c2da:	7830      	ldrb	r0, [r6, #0]
 800c2dc:	9303      	str	r3, [sp, #12]
 800c2de:	f7ff fef3 	bl	800c0c8 <__hexdig_fun>
 800c2e2:	9b03      	ldr	r3, [sp, #12]
 800c2e4:	f000 000f 	and.w	r0, r0, #15
 800c2e8:	4098      	lsls	r0, r3
 800c2ea:	ea4b 0b00 	orr.w	fp, fp, r0
 800c2ee:	3304      	adds	r3, #4
 800c2f0:	e7ae      	b.n	800c250 <__gethex+0x15c>
 800c2f2:	45b1      	cmp	r9, r6
 800c2f4:	d8ea      	bhi.n	800c2cc <__gethex+0x1d8>
 800c2f6:	492b      	ldr	r1, [pc, #172]	@ (800c3a4 <__gethex+0x2b0>)
 800c2f8:	9303      	str	r3, [sp, #12]
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	4630      	mov	r0, r6
 800c2fe:	f7fc fff5 	bl	80092ec <strncmp>
 800c302:	9b03      	ldr	r3, [sp, #12]
 800c304:	2800      	cmp	r0, #0
 800c306:	d1e1      	bne.n	800c2cc <__gethex+0x1d8>
 800c308:	e7a2      	b.n	800c250 <__gethex+0x15c>
 800c30a:	1ea9      	subs	r1, r5, #2
 800c30c:	4620      	mov	r0, r4
 800c30e:	f7fe fbb6 	bl	800aa7e <__any_on>
 800c312:	2800      	cmp	r0, #0
 800c314:	d0c2      	beq.n	800c29c <__gethex+0x1a8>
 800c316:	f04f 0903 	mov.w	r9, #3
 800c31a:	e7c1      	b.n	800c2a0 <__gethex+0x1ac>
 800c31c:	da09      	bge.n	800c332 <__gethex+0x23e>
 800c31e:	1b75      	subs	r5, r6, r5
 800c320:	4621      	mov	r1, r4
 800c322:	9801      	ldr	r0, [sp, #4]
 800c324:	462a      	mov	r2, r5
 800c326:	f7fe f971 	bl	800a60c <__lshift>
 800c32a:	1b7f      	subs	r7, r7, r5
 800c32c:	4604      	mov	r4, r0
 800c32e:	f100 0a14 	add.w	sl, r0, #20
 800c332:	f04f 0900 	mov.w	r9, #0
 800c336:	e7b8      	b.n	800c2aa <__gethex+0x1b6>
 800c338:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c33c:	42bd      	cmp	r5, r7
 800c33e:	dd6f      	ble.n	800c420 <__gethex+0x32c>
 800c340:	1bed      	subs	r5, r5, r7
 800c342:	42ae      	cmp	r6, r5
 800c344:	dc34      	bgt.n	800c3b0 <__gethex+0x2bc>
 800c346:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c34a:	2b02      	cmp	r3, #2
 800c34c:	d022      	beq.n	800c394 <__gethex+0x2a0>
 800c34e:	2b03      	cmp	r3, #3
 800c350:	d024      	beq.n	800c39c <__gethex+0x2a8>
 800c352:	2b01      	cmp	r3, #1
 800c354:	d115      	bne.n	800c382 <__gethex+0x28e>
 800c356:	42ae      	cmp	r6, r5
 800c358:	d113      	bne.n	800c382 <__gethex+0x28e>
 800c35a:	2e01      	cmp	r6, #1
 800c35c:	d10b      	bne.n	800c376 <__gethex+0x282>
 800c35e:	9a02      	ldr	r2, [sp, #8]
 800c360:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c364:	6013      	str	r3, [r2, #0]
 800c366:	2301      	movs	r3, #1
 800c368:	6123      	str	r3, [r4, #16]
 800c36a:	f8ca 3000 	str.w	r3, [sl]
 800c36e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c370:	2562      	movs	r5, #98	@ 0x62
 800c372:	601c      	str	r4, [r3, #0]
 800c374:	e73a      	b.n	800c1ec <__gethex+0xf8>
 800c376:	1e71      	subs	r1, r6, #1
 800c378:	4620      	mov	r0, r4
 800c37a:	f7fe fb80 	bl	800aa7e <__any_on>
 800c37e:	2800      	cmp	r0, #0
 800c380:	d1ed      	bne.n	800c35e <__gethex+0x26a>
 800c382:	9801      	ldr	r0, [sp, #4]
 800c384:	4621      	mov	r1, r4
 800c386:	f7fd ff29 	bl	800a1dc <_Bfree>
 800c38a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c38c:	2300      	movs	r3, #0
 800c38e:	6013      	str	r3, [r2, #0]
 800c390:	2550      	movs	r5, #80	@ 0x50
 800c392:	e72b      	b.n	800c1ec <__gethex+0xf8>
 800c394:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c396:	2b00      	cmp	r3, #0
 800c398:	d1f3      	bne.n	800c382 <__gethex+0x28e>
 800c39a:	e7e0      	b.n	800c35e <__gethex+0x26a>
 800c39c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d1dd      	bne.n	800c35e <__gethex+0x26a>
 800c3a2:	e7ee      	b.n	800c382 <__gethex+0x28e>
 800c3a4:	0800d250 	.word	0x0800d250
 800c3a8:	0800d0e5 	.word	0x0800d0e5
 800c3ac:	0800d3fe 	.word	0x0800d3fe
 800c3b0:	1e6f      	subs	r7, r5, #1
 800c3b2:	f1b9 0f00 	cmp.w	r9, #0
 800c3b6:	d130      	bne.n	800c41a <__gethex+0x326>
 800c3b8:	b127      	cbz	r7, 800c3c4 <__gethex+0x2d0>
 800c3ba:	4639      	mov	r1, r7
 800c3bc:	4620      	mov	r0, r4
 800c3be:	f7fe fb5e 	bl	800aa7e <__any_on>
 800c3c2:	4681      	mov	r9, r0
 800c3c4:	117a      	asrs	r2, r7, #5
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c3cc:	f007 071f 	and.w	r7, r7, #31
 800c3d0:	40bb      	lsls	r3, r7
 800c3d2:	4213      	tst	r3, r2
 800c3d4:	4629      	mov	r1, r5
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	bf18      	it	ne
 800c3da:	f049 0902 	orrne.w	r9, r9, #2
 800c3de:	f7ff fe21 	bl	800c024 <rshift>
 800c3e2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c3e6:	1b76      	subs	r6, r6, r5
 800c3e8:	2502      	movs	r5, #2
 800c3ea:	f1b9 0f00 	cmp.w	r9, #0
 800c3ee:	d047      	beq.n	800c480 <__gethex+0x38c>
 800c3f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c3f4:	2b02      	cmp	r3, #2
 800c3f6:	d015      	beq.n	800c424 <__gethex+0x330>
 800c3f8:	2b03      	cmp	r3, #3
 800c3fa:	d017      	beq.n	800c42c <__gethex+0x338>
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d109      	bne.n	800c414 <__gethex+0x320>
 800c400:	f019 0f02 	tst.w	r9, #2
 800c404:	d006      	beq.n	800c414 <__gethex+0x320>
 800c406:	f8da 3000 	ldr.w	r3, [sl]
 800c40a:	ea49 0903 	orr.w	r9, r9, r3
 800c40e:	f019 0f01 	tst.w	r9, #1
 800c412:	d10e      	bne.n	800c432 <__gethex+0x33e>
 800c414:	f045 0510 	orr.w	r5, r5, #16
 800c418:	e032      	b.n	800c480 <__gethex+0x38c>
 800c41a:	f04f 0901 	mov.w	r9, #1
 800c41e:	e7d1      	b.n	800c3c4 <__gethex+0x2d0>
 800c420:	2501      	movs	r5, #1
 800c422:	e7e2      	b.n	800c3ea <__gethex+0x2f6>
 800c424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c426:	f1c3 0301 	rsb	r3, r3, #1
 800c42a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c42c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d0f0      	beq.n	800c414 <__gethex+0x320>
 800c432:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c436:	f104 0314 	add.w	r3, r4, #20
 800c43a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c43e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c442:	f04f 0c00 	mov.w	ip, #0
 800c446:	4618      	mov	r0, r3
 800c448:	f853 2b04 	ldr.w	r2, [r3], #4
 800c44c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800c450:	d01b      	beq.n	800c48a <__gethex+0x396>
 800c452:	3201      	adds	r2, #1
 800c454:	6002      	str	r2, [r0, #0]
 800c456:	2d02      	cmp	r5, #2
 800c458:	f104 0314 	add.w	r3, r4, #20
 800c45c:	d13c      	bne.n	800c4d8 <__gethex+0x3e4>
 800c45e:	f8d8 2000 	ldr.w	r2, [r8]
 800c462:	3a01      	subs	r2, #1
 800c464:	42b2      	cmp	r2, r6
 800c466:	d109      	bne.n	800c47c <__gethex+0x388>
 800c468:	1171      	asrs	r1, r6, #5
 800c46a:	2201      	movs	r2, #1
 800c46c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c470:	f006 061f 	and.w	r6, r6, #31
 800c474:	fa02 f606 	lsl.w	r6, r2, r6
 800c478:	421e      	tst	r6, r3
 800c47a:	d13a      	bne.n	800c4f2 <__gethex+0x3fe>
 800c47c:	f045 0520 	orr.w	r5, r5, #32
 800c480:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c482:	601c      	str	r4, [r3, #0]
 800c484:	9b02      	ldr	r3, [sp, #8]
 800c486:	601f      	str	r7, [r3, #0]
 800c488:	e6b0      	b.n	800c1ec <__gethex+0xf8>
 800c48a:	4299      	cmp	r1, r3
 800c48c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c490:	d8d9      	bhi.n	800c446 <__gethex+0x352>
 800c492:	68a3      	ldr	r3, [r4, #8]
 800c494:	459b      	cmp	fp, r3
 800c496:	db17      	blt.n	800c4c8 <__gethex+0x3d4>
 800c498:	6861      	ldr	r1, [r4, #4]
 800c49a:	9801      	ldr	r0, [sp, #4]
 800c49c:	3101      	adds	r1, #1
 800c49e:	f7fd fe5d 	bl	800a15c <_Balloc>
 800c4a2:	4681      	mov	r9, r0
 800c4a4:	b918      	cbnz	r0, 800c4ae <__gethex+0x3ba>
 800c4a6:	4b1a      	ldr	r3, [pc, #104]	@ (800c510 <__gethex+0x41c>)
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	2184      	movs	r1, #132	@ 0x84
 800c4ac:	e6c5      	b.n	800c23a <__gethex+0x146>
 800c4ae:	6922      	ldr	r2, [r4, #16]
 800c4b0:	3202      	adds	r2, #2
 800c4b2:	f104 010c 	add.w	r1, r4, #12
 800c4b6:	0092      	lsls	r2, r2, #2
 800c4b8:	300c      	adds	r0, #12
 800c4ba:	f7ff fd6b 	bl	800bf94 <memcpy>
 800c4be:	4621      	mov	r1, r4
 800c4c0:	9801      	ldr	r0, [sp, #4]
 800c4c2:	f7fd fe8b 	bl	800a1dc <_Bfree>
 800c4c6:	464c      	mov	r4, r9
 800c4c8:	6923      	ldr	r3, [r4, #16]
 800c4ca:	1c5a      	adds	r2, r3, #1
 800c4cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c4d0:	6122      	str	r2, [r4, #16]
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	615a      	str	r2, [r3, #20]
 800c4d6:	e7be      	b.n	800c456 <__gethex+0x362>
 800c4d8:	6922      	ldr	r2, [r4, #16]
 800c4da:	455a      	cmp	r2, fp
 800c4dc:	dd0b      	ble.n	800c4f6 <__gethex+0x402>
 800c4de:	2101      	movs	r1, #1
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	f7ff fd9f 	bl	800c024 <rshift>
 800c4e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c4ea:	3701      	adds	r7, #1
 800c4ec:	42bb      	cmp	r3, r7
 800c4ee:	f6ff aee0 	blt.w	800c2b2 <__gethex+0x1be>
 800c4f2:	2501      	movs	r5, #1
 800c4f4:	e7c2      	b.n	800c47c <__gethex+0x388>
 800c4f6:	f016 061f 	ands.w	r6, r6, #31
 800c4fa:	d0fa      	beq.n	800c4f2 <__gethex+0x3fe>
 800c4fc:	4453      	add	r3, sl
 800c4fe:	f1c6 0620 	rsb	r6, r6, #32
 800c502:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c506:	f7fd ff1b 	bl	800a340 <__hi0bits>
 800c50a:	42b0      	cmp	r0, r6
 800c50c:	dbe7      	blt.n	800c4de <__gethex+0x3ea>
 800c50e:	e7f0      	b.n	800c4f2 <__gethex+0x3fe>
 800c510:	0800d0e5 	.word	0x0800d0e5

0800c514 <L_shift>:
 800c514:	f1c2 0208 	rsb	r2, r2, #8
 800c518:	0092      	lsls	r2, r2, #2
 800c51a:	b570      	push	{r4, r5, r6, lr}
 800c51c:	f1c2 0620 	rsb	r6, r2, #32
 800c520:	6843      	ldr	r3, [r0, #4]
 800c522:	6804      	ldr	r4, [r0, #0]
 800c524:	fa03 f506 	lsl.w	r5, r3, r6
 800c528:	432c      	orrs	r4, r5
 800c52a:	40d3      	lsrs	r3, r2
 800c52c:	6004      	str	r4, [r0, #0]
 800c52e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c532:	4288      	cmp	r0, r1
 800c534:	d3f4      	bcc.n	800c520 <L_shift+0xc>
 800c536:	bd70      	pop	{r4, r5, r6, pc}

0800c538 <__match>:
 800c538:	b530      	push	{r4, r5, lr}
 800c53a:	6803      	ldr	r3, [r0, #0]
 800c53c:	3301      	adds	r3, #1
 800c53e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c542:	b914      	cbnz	r4, 800c54a <__match+0x12>
 800c544:	6003      	str	r3, [r0, #0]
 800c546:	2001      	movs	r0, #1
 800c548:	bd30      	pop	{r4, r5, pc}
 800c54a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c54e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c552:	2d19      	cmp	r5, #25
 800c554:	bf98      	it	ls
 800c556:	3220      	addls	r2, #32
 800c558:	42a2      	cmp	r2, r4
 800c55a:	d0f0      	beq.n	800c53e <__match+0x6>
 800c55c:	2000      	movs	r0, #0
 800c55e:	e7f3      	b.n	800c548 <__match+0x10>

0800c560 <__hexnan>:
 800c560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c564:	680b      	ldr	r3, [r1, #0]
 800c566:	6801      	ldr	r1, [r0, #0]
 800c568:	115e      	asrs	r6, r3, #5
 800c56a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c56e:	f013 031f 	ands.w	r3, r3, #31
 800c572:	b087      	sub	sp, #28
 800c574:	bf18      	it	ne
 800c576:	3604      	addne	r6, #4
 800c578:	2500      	movs	r5, #0
 800c57a:	1f37      	subs	r7, r6, #4
 800c57c:	4682      	mov	sl, r0
 800c57e:	4690      	mov	r8, r2
 800c580:	9301      	str	r3, [sp, #4]
 800c582:	f846 5c04 	str.w	r5, [r6, #-4]
 800c586:	46b9      	mov	r9, r7
 800c588:	463c      	mov	r4, r7
 800c58a:	9502      	str	r5, [sp, #8]
 800c58c:	46ab      	mov	fp, r5
 800c58e:	784a      	ldrb	r2, [r1, #1]
 800c590:	1c4b      	adds	r3, r1, #1
 800c592:	9303      	str	r3, [sp, #12]
 800c594:	b342      	cbz	r2, 800c5e8 <__hexnan+0x88>
 800c596:	4610      	mov	r0, r2
 800c598:	9105      	str	r1, [sp, #20]
 800c59a:	9204      	str	r2, [sp, #16]
 800c59c:	f7ff fd94 	bl	800c0c8 <__hexdig_fun>
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	d151      	bne.n	800c648 <__hexnan+0xe8>
 800c5a4:	9a04      	ldr	r2, [sp, #16]
 800c5a6:	9905      	ldr	r1, [sp, #20]
 800c5a8:	2a20      	cmp	r2, #32
 800c5aa:	d818      	bhi.n	800c5de <__hexnan+0x7e>
 800c5ac:	9b02      	ldr	r3, [sp, #8]
 800c5ae:	459b      	cmp	fp, r3
 800c5b0:	dd13      	ble.n	800c5da <__hexnan+0x7a>
 800c5b2:	454c      	cmp	r4, r9
 800c5b4:	d206      	bcs.n	800c5c4 <__hexnan+0x64>
 800c5b6:	2d07      	cmp	r5, #7
 800c5b8:	dc04      	bgt.n	800c5c4 <__hexnan+0x64>
 800c5ba:	462a      	mov	r2, r5
 800c5bc:	4649      	mov	r1, r9
 800c5be:	4620      	mov	r0, r4
 800c5c0:	f7ff ffa8 	bl	800c514 <L_shift>
 800c5c4:	4544      	cmp	r4, r8
 800c5c6:	d952      	bls.n	800c66e <__hexnan+0x10e>
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	f1a4 0904 	sub.w	r9, r4, #4
 800c5ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800c5d2:	f8cd b008 	str.w	fp, [sp, #8]
 800c5d6:	464c      	mov	r4, r9
 800c5d8:	461d      	mov	r5, r3
 800c5da:	9903      	ldr	r1, [sp, #12]
 800c5dc:	e7d7      	b.n	800c58e <__hexnan+0x2e>
 800c5de:	2a29      	cmp	r2, #41	@ 0x29
 800c5e0:	d157      	bne.n	800c692 <__hexnan+0x132>
 800c5e2:	3102      	adds	r1, #2
 800c5e4:	f8ca 1000 	str.w	r1, [sl]
 800c5e8:	f1bb 0f00 	cmp.w	fp, #0
 800c5ec:	d051      	beq.n	800c692 <__hexnan+0x132>
 800c5ee:	454c      	cmp	r4, r9
 800c5f0:	d206      	bcs.n	800c600 <__hexnan+0xa0>
 800c5f2:	2d07      	cmp	r5, #7
 800c5f4:	dc04      	bgt.n	800c600 <__hexnan+0xa0>
 800c5f6:	462a      	mov	r2, r5
 800c5f8:	4649      	mov	r1, r9
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	f7ff ff8a 	bl	800c514 <L_shift>
 800c600:	4544      	cmp	r4, r8
 800c602:	d936      	bls.n	800c672 <__hexnan+0x112>
 800c604:	f1a8 0204 	sub.w	r2, r8, #4
 800c608:	4623      	mov	r3, r4
 800c60a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c60e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c612:	429f      	cmp	r7, r3
 800c614:	d2f9      	bcs.n	800c60a <__hexnan+0xaa>
 800c616:	1b3b      	subs	r3, r7, r4
 800c618:	f023 0303 	bic.w	r3, r3, #3
 800c61c:	3304      	adds	r3, #4
 800c61e:	3401      	adds	r4, #1
 800c620:	3e03      	subs	r6, #3
 800c622:	42b4      	cmp	r4, r6
 800c624:	bf88      	it	hi
 800c626:	2304      	movhi	r3, #4
 800c628:	4443      	add	r3, r8
 800c62a:	2200      	movs	r2, #0
 800c62c:	f843 2b04 	str.w	r2, [r3], #4
 800c630:	429f      	cmp	r7, r3
 800c632:	d2fb      	bcs.n	800c62c <__hexnan+0xcc>
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	b91b      	cbnz	r3, 800c640 <__hexnan+0xe0>
 800c638:	4547      	cmp	r7, r8
 800c63a:	d128      	bne.n	800c68e <__hexnan+0x12e>
 800c63c:	2301      	movs	r3, #1
 800c63e:	603b      	str	r3, [r7, #0]
 800c640:	2005      	movs	r0, #5
 800c642:	b007      	add	sp, #28
 800c644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c648:	3501      	adds	r5, #1
 800c64a:	2d08      	cmp	r5, #8
 800c64c:	f10b 0b01 	add.w	fp, fp, #1
 800c650:	dd06      	ble.n	800c660 <__hexnan+0x100>
 800c652:	4544      	cmp	r4, r8
 800c654:	d9c1      	bls.n	800c5da <__hexnan+0x7a>
 800c656:	2300      	movs	r3, #0
 800c658:	f844 3c04 	str.w	r3, [r4, #-4]
 800c65c:	2501      	movs	r5, #1
 800c65e:	3c04      	subs	r4, #4
 800c660:	6822      	ldr	r2, [r4, #0]
 800c662:	f000 000f 	and.w	r0, r0, #15
 800c666:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c66a:	6020      	str	r0, [r4, #0]
 800c66c:	e7b5      	b.n	800c5da <__hexnan+0x7a>
 800c66e:	2508      	movs	r5, #8
 800c670:	e7b3      	b.n	800c5da <__hexnan+0x7a>
 800c672:	9b01      	ldr	r3, [sp, #4]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d0dd      	beq.n	800c634 <__hexnan+0xd4>
 800c678:	f1c3 0320 	rsb	r3, r3, #32
 800c67c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c680:	40da      	lsrs	r2, r3
 800c682:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c686:	4013      	ands	r3, r2
 800c688:	f846 3c04 	str.w	r3, [r6, #-4]
 800c68c:	e7d2      	b.n	800c634 <__hexnan+0xd4>
 800c68e:	3f04      	subs	r7, #4
 800c690:	e7d0      	b.n	800c634 <__hexnan+0xd4>
 800c692:	2004      	movs	r0, #4
 800c694:	e7d5      	b.n	800c642 <__hexnan+0xe2>

0800c696 <__ascii_mbtowc>:
 800c696:	b082      	sub	sp, #8
 800c698:	b901      	cbnz	r1, 800c69c <__ascii_mbtowc+0x6>
 800c69a:	a901      	add	r1, sp, #4
 800c69c:	b142      	cbz	r2, 800c6b0 <__ascii_mbtowc+0x1a>
 800c69e:	b14b      	cbz	r3, 800c6b4 <__ascii_mbtowc+0x1e>
 800c6a0:	7813      	ldrb	r3, [r2, #0]
 800c6a2:	600b      	str	r3, [r1, #0]
 800c6a4:	7812      	ldrb	r2, [r2, #0]
 800c6a6:	1e10      	subs	r0, r2, #0
 800c6a8:	bf18      	it	ne
 800c6aa:	2001      	movne	r0, #1
 800c6ac:	b002      	add	sp, #8
 800c6ae:	4770      	bx	lr
 800c6b0:	4610      	mov	r0, r2
 800c6b2:	e7fb      	b.n	800c6ac <__ascii_mbtowc+0x16>
 800c6b4:	f06f 0001 	mvn.w	r0, #1
 800c6b8:	e7f8      	b.n	800c6ac <__ascii_mbtowc+0x16>

0800c6ba <_realloc_r>:
 800c6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6be:	4680      	mov	r8, r0
 800c6c0:	4615      	mov	r5, r2
 800c6c2:	460c      	mov	r4, r1
 800c6c4:	b921      	cbnz	r1, 800c6d0 <_realloc_r+0x16>
 800c6c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ca:	4611      	mov	r1, r2
 800c6cc:	f7fb bce4 	b.w	8008098 <_malloc_r>
 800c6d0:	b92a      	cbnz	r2, 800c6de <_realloc_r+0x24>
 800c6d2:	f7fd fcf9 	bl	800a0c8 <_free_r>
 800c6d6:	2400      	movs	r4, #0
 800c6d8:	4620      	mov	r0, r4
 800c6da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6de:	f000 f840 	bl	800c762 <_malloc_usable_size_r>
 800c6e2:	4285      	cmp	r5, r0
 800c6e4:	4606      	mov	r6, r0
 800c6e6:	d802      	bhi.n	800c6ee <_realloc_r+0x34>
 800c6e8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c6ec:	d8f4      	bhi.n	800c6d8 <_realloc_r+0x1e>
 800c6ee:	4629      	mov	r1, r5
 800c6f0:	4640      	mov	r0, r8
 800c6f2:	f7fb fcd1 	bl	8008098 <_malloc_r>
 800c6f6:	4607      	mov	r7, r0
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	d0ec      	beq.n	800c6d6 <_realloc_r+0x1c>
 800c6fc:	42b5      	cmp	r5, r6
 800c6fe:	462a      	mov	r2, r5
 800c700:	4621      	mov	r1, r4
 800c702:	bf28      	it	cs
 800c704:	4632      	movcs	r2, r6
 800c706:	f7ff fc45 	bl	800bf94 <memcpy>
 800c70a:	4621      	mov	r1, r4
 800c70c:	4640      	mov	r0, r8
 800c70e:	f7fd fcdb 	bl	800a0c8 <_free_r>
 800c712:	463c      	mov	r4, r7
 800c714:	e7e0      	b.n	800c6d8 <_realloc_r+0x1e>

0800c716 <__ascii_wctomb>:
 800c716:	4603      	mov	r3, r0
 800c718:	4608      	mov	r0, r1
 800c71a:	b141      	cbz	r1, 800c72e <__ascii_wctomb+0x18>
 800c71c:	2aff      	cmp	r2, #255	@ 0xff
 800c71e:	d904      	bls.n	800c72a <__ascii_wctomb+0x14>
 800c720:	228a      	movs	r2, #138	@ 0x8a
 800c722:	601a      	str	r2, [r3, #0]
 800c724:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c728:	4770      	bx	lr
 800c72a:	700a      	strb	r2, [r1, #0]
 800c72c:	2001      	movs	r0, #1
 800c72e:	4770      	bx	lr

0800c730 <fiprintf>:
 800c730:	b40e      	push	{r1, r2, r3}
 800c732:	b503      	push	{r0, r1, lr}
 800c734:	4601      	mov	r1, r0
 800c736:	ab03      	add	r3, sp, #12
 800c738:	4805      	ldr	r0, [pc, #20]	@ (800c750 <fiprintf+0x20>)
 800c73a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c73e:	6800      	ldr	r0, [r0, #0]
 800c740:	9301      	str	r3, [sp, #4]
 800c742:	f7ff f9c5 	bl	800bad0 <_vfiprintf_r>
 800c746:	b002      	add	sp, #8
 800c748:	f85d eb04 	ldr.w	lr, [sp], #4
 800c74c:	b003      	add	sp, #12
 800c74e:	4770      	bx	lr
 800c750:	20000018 	.word	0x20000018

0800c754 <abort>:
 800c754:	b508      	push	{r3, lr}
 800c756:	2006      	movs	r0, #6
 800c758:	f000 f834 	bl	800c7c4 <raise>
 800c75c:	2001      	movs	r0, #1
 800c75e:	f7f5 ff79 	bl	8002654 <_exit>

0800c762 <_malloc_usable_size_r>:
 800c762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c766:	1f18      	subs	r0, r3, #4
 800c768:	2b00      	cmp	r3, #0
 800c76a:	bfbc      	itt	lt
 800c76c:	580b      	ldrlt	r3, [r1, r0]
 800c76e:	18c0      	addlt	r0, r0, r3
 800c770:	4770      	bx	lr

0800c772 <_raise_r>:
 800c772:	291f      	cmp	r1, #31
 800c774:	b538      	push	{r3, r4, r5, lr}
 800c776:	4605      	mov	r5, r0
 800c778:	460c      	mov	r4, r1
 800c77a:	d904      	bls.n	800c786 <_raise_r+0x14>
 800c77c:	2316      	movs	r3, #22
 800c77e:	6003      	str	r3, [r0, #0]
 800c780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c784:	bd38      	pop	{r3, r4, r5, pc}
 800c786:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c788:	b112      	cbz	r2, 800c790 <_raise_r+0x1e>
 800c78a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c78e:	b94b      	cbnz	r3, 800c7a4 <_raise_r+0x32>
 800c790:	4628      	mov	r0, r5
 800c792:	f000 f831 	bl	800c7f8 <_getpid_r>
 800c796:	4622      	mov	r2, r4
 800c798:	4601      	mov	r1, r0
 800c79a:	4628      	mov	r0, r5
 800c79c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7a0:	f000 b818 	b.w	800c7d4 <_kill_r>
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	d00a      	beq.n	800c7be <_raise_r+0x4c>
 800c7a8:	1c59      	adds	r1, r3, #1
 800c7aa:	d103      	bne.n	800c7b4 <_raise_r+0x42>
 800c7ac:	2316      	movs	r3, #22
 800c7ae:	6003      	str	r3, [r0, #0]
 800c7b0:	2001      	movs	r0, #1
 800c7b2:	e7e7      	b.n	800c784 <_raise_r+0x12>
 800c7b4:	2100      	movs	r1, #0
 800c7b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	4798      	blx	r3
 800c7be:	2000      	movs	r0, #0
 800c7c0:	e7e0      	b.n	800c784 <_raise_r+0x12>
	...

0800c7c4 <raise>:
 800c7c4:	4b02      	ldr	r3, [pc, #8]	@ (800c7d0 <raise+0xc>)
 800c7c6:	4601      	mov	r1, r0
 800c7c8:	6818      	ldr	r0, [r3, #0]
 800c7ca:	f7ff bfd2 	b.w	800c772 <_raise_r>
 800c7ce:	bf00      	nop
 800c7d0:	20000018 	.word	0x20000018

0800c7d4 <_kill_r>:
 800c7d4:	b538      	push	{r3, r4, r5, lr}
 800c7d6:	4d07      	ldr	r5, [pc, #28]	@ (800c7f4 <_kill_r+0x20>)
 800c7d8:	2300      	movs	r3, #0
 800c7da:	4604      	mov	r4, r0
 800c7dc:	4608      	mov	r0, r1
 800c7de:	4611      	mov	r1, r2
 800c7e0:	602b      	str	r3, [r5, #0]
 800c7e2:	f7f5 ff27 	bl	8002634 <_kill>
 800c7e6:	1c43      	adds	r3, r0, #1
 800c7e8:	d102      	bne.n	800c7f0 <_kill_r+0x1c>
 800c7ea:	682b      	ldr	r3, [r5, #0]
 800c7ec:	b103      	cbz	r3, 800c7f0 <_kill_r+0x1c>
 800c7ee:	6023      	str	r3, [r4, #0]
 800c7f0:	bd38      	pop	{r3, r4, r5, pc}
 800c7f2:	bf00      	nop
 800c7f4:	20000570 	.word	0x20000570

0800c7f8 <_getpid_r>:
 800c7f8:	f7f5 bf14 	b.w	8002624 <_getpid>

0800c7fc <atan2>:
 800c7fc:	f000 b800 	b.w	800c800 <__ieee754_atan2>

0800c800 <__ieee754_atan2>:
 800c800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c804:	ec57 6b11 	vmov	r6, r7, d1
 800c808:	4273      	negs	r3, r6
 800c80a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800c988 <__ieee754_atan2+0x188>
 800c80e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800c812:	4333      	orrs	r3, r6
 800c814:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c818:	4543      	cmp	r3, r8
 800c81a:	ec51 0b10 	vmov	r0, r1, d0
 800c81e:	4635      	mov	r5, r6
 800c820:	d809      	bhi.n	800c836 <__ieee754_atan2+0x36>
 800c822:	4244      	negs	r4, r0
 800c824:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c828:	4304      	orrs	r4, r0
 800c82a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c82e:	4544      	cmp	r4, r8
 800c830:	468e      	mov	lr, r1
 800c832:	4681      	mov	r9, r0
 800c834:	d907      	bls.n	800c846 <__ieee754_atan2+0x46>
 800c836:	4632      	mov	r2, r6
 800c838:	463b      	mov	r3, r7
 800c83a:	f7f3 fd47 	bl	80002cc <__adddf3>
 800c83e:	ec41 0b10 	vmov	d0, r0, r1
 800c842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c846:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800c84a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800c84e:	4334      	orrs	r4, r6
 800c850:	d103      	bne.n	800c85a <__ieee754_atan2+0x5a>
 800c852:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c856:	f000 b89b 	b.w	800c990 <atan>
 800c85a:	17bc      	asrs	r4, r7, #30
 800c85c:	f004 0402 	and.w	r4, r4, #2
 800c860:	ea53 0909 	orrs.w	r9, r3, r9
 800c864:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c868:	d107      	bne.n	800c87a <__ieee754_atan2+0x7a>
 800c86a:	2c02      	cmp	r4, #2
 800c86c:	d05f      	beq.n	800c92e <__ieee754_atan2+0x12e>
 800c86e:	2c03      	cmp	r4, #3
 800c870:	d1e5      	bne.n	800c83e <__ieee754_atan2+0x3e>
 800c872:	a141      	add	r1, pc, #260	@ (adr r1, 800c978 <__ieee754_atan2+0x178>)
 800c874:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c878:	e7e1      	b.n	800c83e <__ieee754_atan2+0x3e>
 800c87a:	4315      	orrs	r5, r2
 800c87c:	d106      	bne.n	800c88c <__ieee754_atan2+0x8c>
 800c87e:	f1be 0f00 	cmp.w	lr, #0
 800c882:	da5f      	bge.n	800c944 <__ieee754_atan2+0x144>
 800c884:	a13e      	add	r1, pc, #248	@ (adr r1, 800c980 <__ieee754_atan2+0x180>)
 800c886:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c88a:	e7d8      	b.n	800c83e <__ieee754_atan2+0x3e>
 800c88c:	4542      	cmp	r2, r8
 800c88e:	d10f      	bne.n	800c8b0 <__ieee754_atan2+0xb0>
 800c890:	4293      	cmp	r3, r2
 800c892:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800c896:	d107      	bne.n	800c8a8 <__ieee754_atan2+0xa8>
 800c898:	2c02      	cmp	r4, #2
 800c89a:	d84c      	bhi.n	800c936 <__ieee754_atan2+0x136>
 800c89c:	4b34      	ldr	r3, [pc, #208]	@ (800c970 <__ieee754_atan2+0x170>)
 800c89e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c8a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c8a6:	e7ca      	b.n	800c83e <__ieee754_atan2+0x3e>
 800c8a8:	2c02      	cmp	r4, #2
 800c8aa:	d848      	bhi.n	800c93e <__ieee754_atan2+0x13e>
 800c8ac:	4b31      	ldr	r3, [pc, #196]	@ (800c974 <__ieee754_atan2+0x174>)
 800c8ae:	e7f6      	b.n	800c89e <__ieee754_atan2+0x9e>
 800c8b0:	4543      	cmp	r3, r8
 800c8b2:	d0e4      	beq.n	800c87e <__ieee754_atan2+0x7e>
 800c8b4:	1a9b      	subs	r3, r3, r2
 800c8b6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800c8ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c8be:	da1e      	bge.n	800c8fe <__ieee754_atan2+0xfe>
 800c8c0:	2f00      	cmp	r7, #0
 800c8c2:	da01      	bge.n	800c8c8 <__ieee754_atan2+0xc8>
 800c8c4:	323c      	adds	r2, #60	@ 0x3c
 800c8c6:	db1e      	blt.n	800c906 <__ieee754_atan2+0x106>
 800c8c8:	4632      	mov	r2, r6
 800c8ca:	463b      	mov	r3, r7
 800c8cc:	f7f3 ffde 	bl	800088c <__aeabi_ddiv>
 800c8d0:	ec41 0b10 	vmov	d0, r0, r1
 800c8d4:	f000 f9f4 	bl	800ccc0 <fabs>
 800c8d8:	f000 f85a 	bl	800c990 <atan>
 800c8dc:	ec51 0b10 	vmov	r0, r1, d0
 800c8e0:	2c01      	cmp	r4, #1
 800c8e2:	d013      	beq.n	800c90c <__ieee754_atan2+0x10c>
 800c8e4:	2c02      	cmp	r4, #2
 800c8e6:	d015      	beq.n	800c914 <__ieee754_atan2+0x114>
 800c8e8:	2c00      	cmp	r4, #0
 800c8ea:	d0a8      	beq.n	800c83e <__ieee754_atan2+0x3e>
 800c8ec:	a318      	add	r3, pc, #96	@ (adr r3, 800c950 <__ieee754_atan2+0x150>)
 800c8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f2:	f7f3 fce9 	bl	80002c8 <__aeabi_dsub>
 800c8f6:	a318      	add	r3, pc, #96	@ (adr r3, 800c958 <__ieee754_atan2+0x158>)
 800c8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fc:	e014      	b.n	800c928 <__ieee754_atan2+0x128>
 800c8fe:	a118      	add	r1, pc, #96	@ (adr r1, 800c960 <__ieee754_atan2+0x160>)
 800c900:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c904:	e7ec      	b.n	800c8e0 <__ieee754_atan2+0xe0>
 800c906:	2000      	movs	r0, #0
 800c908:	2100      	movs	r1, #0
 800c90a:	e7e9      	b.n	800c8e0 <__ieee754_atan2+0xe0>
 800c90c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c910:	4619      	mov	r1, r3
 800c912:	e794      	b.n	800c83e <__ieee754_atan2+0x3e>
 800c914:	a30e      	add	r3, pc, #56	@ (adr r3, 800c950 <__ieee754_atan2+0x150>)
 800c916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91a:	f7f3 fcd5 	bl	80002c8 <__aeabi_dsub>
 800c91e:	4602      	mov	r2, r0
 800c920:	460b      	mov	r3, r1
 800c922:	a10d      	add	r1, pc, #52	@ (adr r1, 800c958 <__ieee754_atan2+0x158>)
 800c924:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c928:	f7f3 fcce 	bl	80002c8 <__aeabi_dsub>
 800c92c:	e787      	b.n	800c83e <__ieee754_atan2+0x3e>
 800c92e:	a10a      	add	r1, pc, #40	@ (adr r1, 800c958 <__ieee754_atan2+0x158>)
 800c930:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c934:	e783      	b.n	800c83e <__ieee754_atan2+0x3e>
 800c936:	a10c      	add	r1, pc, #48	@ (adr r1, 800c968 <__ieee754_atan2+0x168>)
 800c938:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c93c:	e77f      	b.n	800c83e <__ieee754_atan2+0x3e>
 800c93e:	2000      	movs	r0, #0
 800c940:	2100      	movs	r1, #0
 800c942:	e77c      	b.n	800c83e <__ieee754_atan2+0x3e>
 800c944:	a106      	add	r1, pc, #24	@ (adr r1, 800c960 <__ieee754_atan2+0x160>)
 800c946:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c94a:	e778      	b.n	800c83e <__ieee754_atan2+0x3e>
 800c94c:	f3af 8000 	nop.w
 800c950:	33145c07 	.word	0x33145c07
 800c954:	3ca1a626 	.word	0x3ca1a626
 800c958:	54442d18 	.word	0x54442d18
 800c95c:	400921fb 	.word	0x400921fb
 800c960:	54442d18 	.word	0x54442d18
 800c964:	3ff921fb 	.word	0x3ff921fb
 800c968:	54442d18 	.word	0x54442d18
 800c96c:	3fe921fb 	.word	0x3fe921fb
 800c970:	0800d478 	.word	0x0800d478
 800c974:	0800d460 	.word	0x0800d460
 800c978:	54442d18 	.word	0x54442d18
 800c97c:	c00921fb 	.word	0xc00921fb
 800c980:	54442d18 	.word	0x54442d18
 800c984:	bff921fb 	.word	0xbff921fb
 800c988:	7ff00000 	.word	0x7ff00000
 800c98c:	00000000 	.word	0x00000000

0800c990 <atan>:
 800c990:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c994:	ec55 4b10 	vmov	r4, r5, d0
 800c998:	4bbf      	ldr	r3, [pc, #764]	@ (800cc98 <atan+0x308>)
 800c99a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800c99e:	429e      	cmp	r6, r3
 800c9a0:	46ab      	mov	fp, r5
 800c9a2:	d918      	bls.n	800c9d6 <atan+0x46>
 800c9a4:	4bbd      	ldr	r3, [pc, #756]	@ (800cc9c <atan+0x30c>)
 800c9a6:	429e      	cmp	r6, r3
 800c9a8:	d801      	bhi.n	800c9ae <atan+0x1e>
 800c9aa:	d109      	bne.n	800c9c0 <atan+0x30>
 800c9ac:	b144      	cbz	r4, 800c9c0 <atan+0x30>
 800c9ae:	4622      	mov	r2, r4
 800c9b0:	462b      	mov	r3, r5
 800c9b2:	4620      	mov	r0, r4
 800c9b4:	4629      	mov	r1, r5
 800c9b6:	f7f3 fc89 	bl	80002cc <__adddf3>
 800c9ba:	4604      	mov	r4, r0
 800c9bc:	460d      	mov	r5, r1
 800c9be:	e006      	b.n	800c9ce <atan+0x3e>
 800c9c0:	f1bb 0f00 	cmp.w	fp, #0
 800c9c4:	f340 812b 	ble.w	800cc1e <atan+0x28e>
 800c9c8:	a597      	add	r5, pc, #604	@ (adr r5, 800cc28 <atan+0x298>)
 800c9ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c9ce:	ec45 4b10 	vmov	d0, r4, r5
 800c9d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d6:	4bb2      	ldr	r3, [pc, #712]	@ (800cca0 <atan+0x310>)
 800c9d8:	429e      	cmp	r6, r3
 800c9da:	d813      	bhi.n	800ca04 <atan+0x74>
 800c9dc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800c9e0:	429e      	cmp	r6, r3
 800c9e2:	d80c      	bhi.n	800c9fe <atan+0x6e>
 800c9e4:	a392      	add	r3, pc, #584	@ (adr r3, 800cc30 <atan+0x2a0>)
 800c9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ea:	4620      	mov	r0, r4
 800c9ec:	4629      	mov	r1, r5
 800c9ee:	f7f3 fc6d 	bl	80002cc <__adddf3>
 800c9f2:	4bac      	ldr	r3, [pc, #688]	@ (800cca4 <atan+0x314>)
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	f7f4 f8af 	bl	8000b58 <__aeabi_dcmpgt>
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	d1e7      	bne.n	800c9ce <atan+0x3e>
 800c9fe:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ca02:	e029      	b.n	800ca58 <atan+0xc8>
 800ca04:	f000 f95c 	bl	800ccc0 <fabs>
 800ca08:	4ba7      	ldr	r3, [pc, #668]	@ (800cca8 <atan+0x318>)
 800ca0a:	429e      	cmp	r6, r3
 800ca0c:	ec55 4b10 	vmov	r4, r5, d0
 800ca10:	f200 80bc 	bhi.w	800cb8c <atan+0x1fc>
 800ca14:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800ca18:	429e      	cmp	r6, r3
 800ca1a:	f200 809e 	bhi.w	800cb5a <atan+0x1ca>
 800ca1e:	4622      	mov	r2, r4
 800ca20:	462b      	mov	r3, r5
 800ca22:	4620      	mov	r0, r4
 800ca24:	4629      	mov	r1, r5
 800ca26:	f7f3 fc51 	bl	80002cc <__adddf3>
 800ca2a:	4b9e      	ldr	r3, [pc, #632]	@ (800cca4 <atan+0x314>)
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	f7f3 fc4b 	bl	80002c8 <__aeabi_dsub>
 800ca32:	2200      	movs	r2, #0
 800ca34:	4606      	mov	r6, r0
 800ca36:	460f      	mov	r7, r1
 800ca38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	4629      	mov	r1, r5
 800ca40:	f7f3 fc44 	bl	80002cc <__adddf3>
 800ca44:	4602      	mov	r2, r0
 800ca46:	460b      	mov	r3, r1
 800ca48:	4630      	mov	r0, r6
 800ca4a:	4639      	mov	r1, r7
 800ca4c:	f7f3 ff1e 	bl	800088c <__aeabi_ddiv>
 800ca50:	f04f 0a00 	mov.w	sl, #0
 800ca54:	4604      	mov	r4, r0
 800ca56:	460d      	mov	r5, r1
 800ca58:	4622      	mov	r2, r4
 800ca5a:	462b      	mov	r3, r5
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	4629      	mov	r1, r5
 800ca60:	f7f3 fdea 	bl	8000638 <__aeabi_dmul>
 800ca64:	4602      	mov	r2, r0
 800ca66:	460b      	mov	r3, r1
 800ca68:	4680      	mov	r8, r0
 800ca6a:	4689      	mov	r9, r1
 800ca6c:	f7f3 fde4 	bl	8000638 <__aeabi_dmul>
 800ca70:	a371      	add	r3, pc, #452	@ (adr r3, 800cc38 <atan+0x2a8>)
 800ca72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca76:	4606      	mov	r6, r0
 800ca78:	460f      	mov	r7, r1
 800ca7a:	f7f3 fddd 	bl	8000638 <__aeabi_dmul>
 800ca7e:	a370      	add	r3, pc, #448	@ (adr r3, 800cc40 <atan+0x2b0>)
 800ca80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca84:	f7f3 fc22 	bl	80002cc <__adddf3>
 800ca88:	4632      	mov	r2, r6
 800ca8a:	463b      	mov	r3, r7
 800ca8c:	f7f3 fdd4 	bl	8000638 <__aeabi_dmul>
 800ca90:	a36d      	add	r3, pc, #436	@ (adr r3, 800cc48 <atan+0x2b8>)
 800ca92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca96:	f7f3 fc19 	bl	80002cc <__adddf3>
 800ca9a:	4632      	mov	r2, r6
 800ca9c:	463b      	mov	r3, r7
 800ca9e:	f7f3 fdcb 	bl	8000638 <__aeabi_dmul>
 800caa2:	a36b      	add	r3, pc, #428	@ (adr r3, 800cc50 <atan+0x2c0>)
 800caa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa8:	f7f3 fc10 	bl	80002cc <__adddf3>
 800caac:	4632      	mov	r2, r6
 800caae:	463b      	mov	r3, r7
 800cab0:	f7f3 fdc2 	bl	8000638 <__aeabi_dmul>
 800cab4:	a368      	add	r3, pc, #416	@ (adr r3, 800cc58 <atan+0x2c8>)
 800cab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caba:	f7f3 fc07 	bl	80002cc <__adddf3>
 800cabe:	4632      	mov	r2, r6
 800cac0:	463b      	mov	r3, r7
 800cac2:	f7f3 fdb9 	bl	8000638 <__aeabi_dmul>
 800cac6:	a366      	add	r3, pc, #408	@ (adr r3, 800cc60 <atan+0x2d0>)
 800cac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cacc:	f7f3 fbfe 	bl	80002cc <__adddf3>
 800cad0:	4642      	mov	r2, r8
 800cad2:	464b      	mov	r3, r9
 800cad4:	f7f3 fdb0 	bl	8000638 <__aeabi_dmul>
 800cad8:	a363      	add	r3, pc, #396	@ (adr r3, 800cc68 <atan+0x2d8>)
 800cada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cade:	4680      	mov	r8, r0
 800cae0:	4689      	mov	r9, r1
 800cae2:	4630      	mov	r0, r6
 800cae4:	4639      	mov	r1, r7
 800cae6:	f7f3 fda7 	bl	8000638 <__aeabi_dmul>
 800caea:	a361      	add	r3, pc, #388	@ (adr r3, 800cc70 <atan+0x2e0>)
 800caec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf0:	f7f3 fbea 	bl	80002c8 <__aeabi_dsub>
 800caf4:	4632      	mov	r2, r6
 800caf6:	463b      	mov	r3, r7
 800caf8:	f7f3 fd9e 	bl	8000638 <__aeabi_dmul>
 800cafc:	a35e      	add	r3, pc, #376	@ (adr r3, 800cc78 <atan+0x2e8>)
 800cafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb02:	f7f3 fbe1 	bl	80002c8 <__aeabi_dsub>
 800cb06:	4632      	mov	r2, r6
 800cb08:	463b      	mov	r3, r7
 800cb0a:	f7f3 fd95 	bl	8000638 <__aeabi_dmul>
 800cb0e:	a35c      	add	r3, pc, #368	@ (adr r3, 800cc80 <atan+0x2f0>)
 800cb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb14:	f7f3 fbd8 	bl	80002c8 <__aeabi_dsub>
 800cb18:	4632      	mov	r2, r6
 800cb1a:	463b      	mov	r3, r7
 800cb1c:	f7f3 fd8c 	bl	8000638 <__aeabi_dmul>
 800cb20:	a359      	add	r3, pc, #356	@ (adr r3, 800cc88 <atan+0x2f8>)
 800cb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb26:	f7f3 fbcf 	bl	80002c8 <__aeabi_dsub>
 800cb2a:	4632      	mov	r2, r6
 800cb2c:	463b      	mov	r3, r7
 800cb2e:	f7f3 fd83 	bl	8000638 <__aeabi_dmul>
 800cb32:	4602      	mov	r2, r0
 800cb34:	460b      	mov	r3, r1
 800cb36:	4640      	mov	r0, r8
 800cb38:	4649      	mov	r1, r9
 800cb3a:	f7f3 fbc7 	bl	80002cc <__adddf3>
 800cb3e:	4622      	mov	r2, r4
 800cb40:	462b      	mov	r3, r5
 800cb42:	f7f3 fd79 	bl	8000638 <__aeabi_dmul>
 800cb46:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	d148      	bne.n	800cbe2 <atan+0x252>
 800cb50:	4620      	mov	r0, r4
 800cb52:	4629      	mov	r1, r5
 800cb54:	f7f3 fbb8 	bl	80002c8 <__aeabi_dsub>
 800cb58:	e72f      	b.n	800c9ba <atan+0x2a>
 800cb5a:	4b52      	ldr	r3, [pc, #328]	@ (800cca4 <atan+0x314>)
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	4620      	mov	r0, r4
 800cb60:	4629      	mov	r1, r5
 800cb62:	f7f3 fbb1 	bl	80002c8 <__aeabi_dsub>
 800cb66:	4b4f      	ldr	r3, [pc, #316]	@ (800cca4 <atan+0x314>)
 800cb68:	4606      	mov	r6, r0
 800cb6a:	460f      	mov	r7, r1
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	4620      	mov	r0, r4
 800cb70:	4629      	mov	r1, r5
 800cb72:	f7f3 fbab 	bl	80002cc <__adddf3>
 800cb76:	4602      	mov	r2, r0
 800cb78:	460b      	mov	r3, r1
 800cb7a:	4630      	mov	r0, r6
 800cb7c:	4639      	mov	r1, r7
 800cb7e:	f7f3 fe85 	bl	800088c <__aeabi_ddiv>
 800cb82:	f04f 0a01 	mov.w	sl, #1
 800cb86:	4604      	mov	r4, r0
 800cb88:	460d      	mov	r5, r1
 800cb8a:	e765      	b.n	800ca58 <atan+0xc8>
 800cb8c:	4b47      	ldr	r3, [pc, #284]	@ (800ccac <atan+0x31c>)
 800cb8e:	429e      	cmp	r6, r3
 800cb90:	d21c      	bcs.n	800cbcc <atan+0x23c>
 800cb92:	4b47      	ldr	r3, [pc, #284]	@ (800ccb0 <atan+0x320>)
 800cb94:	2200      	movs	r2, #0
 800cb96:	4620      	mov	r0, r4
 800cb98:	4629      	mov	r1, r5
 800cb9a:	f7f3 fb95 	bl	80002c8 <__aeabi_dsub>
 800cb9e:	4b44      	ldr	r3, [pc, #272]	@ (800ccb0 <atan+0x320>)
 800cba0:	4606      	mov	r6, r0
 800cba2:	460f      	mov	r7, r1
 800cba4:	2200      	movs	r2, #0
 800cba6:	4620      	mov	r0, r4
 800cba8:	4629      	mov	r1, r5
 800cbaa:	f7f3 fd45 	bl	8000638 <__aeabi_dmul>
 800cbae:	4b3d      	ldr	r3, [pc, #244]	@ (800cca4 <atan+0x314>)
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	f7f3 fb8b 	bl	80002cc <__adddf3>
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	460b      	mov	r3, r1
 800cbba:	4630      	mov	r0, r6
 800cbbc:	4639      	mov	r1, r7
 800cbbe:	f7f3 fe65 	bl	800088c <__aeabi_ddiv>
 800cbc2:	f04f 0a02 	mov.w	sl, #2
 800cbc6:	4604      	mov	r4, r0
 800cbc8:	460d      	mov	r5, r1
 800cbca:	e745      	b.n	800ca58 <atan+0xc8>
 800cbcc:	4622      	mov	r2, r4
 800cbce:	462b      	mov	r3, r5
 800cbd0:	4938      	ldr	r1, [pc, #224]	@ (800ccb4 <atan+0x324>)
 800cbd2:	2000      	movs	r0, #0
 800cbd4:	f7f3 fe5a 	bl	800088c <__aeabi_ddiv>
 800cbd8:	f04f 0a03 	mov.w	sl, #3
 800cbdc:	4604      	mov	r4, r0
 800cbde:	460d      	mov	r5, r1
 800cbe0:	e73a      	b.n	800ca58 <atan+0xc8>
 800cbe2:	4b35      	ldr	r3, [pc, #212]	@ (800ccb8 <atan+0x328>)
 800cbe4:	4e35      	ldr	r6, [pc, #212]	@ (800ccbc <atan+0x32c>)
 800cbe6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbee:	f7f3 fb6b 	bl	80002c8 <__aeabi_dsub>
 800cbf2:	4622      	mov	r2, r4
 800cbf4:	462b      	mov	r3, r5
 800cbf6:	f7f3 fb67 	bl	80002c8 <__aeabi_dsub>
 800cbfa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cbfe:	4602      	mov	r2, r0
 800cc00:	460b      	mov	r3, r1
 800cc02:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cc06:	f7f3 fb5f 	bl	80002c8 <__aeabi_dsub>
 800cc0a:	f1bb 0f00 	cmp.w	fp, #0
 800cc0e:	4604      	mov	r4, r0
 800cc10:	460d      	mov	r5, r1
 800cc12:	f6bf aedc 	bge.w	800c9ce <atan+0x3e>
 800cc16:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cc1a:	461d      	mov	r5, r3
 800cc1c:	e6d7      	b.n	800c9ce <atan+0x3e>
 800cc1e:	a51c      	add	r5, pc, #112	@ (adr r5, 800cc90 <atan+0x300>)
 800cc20:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cc24:	e6d3      	b.n	800c9ce <atan+0x3e>
 800cc26:	bf00      	nop
 800cc28:	54442d18 	.word	0x54442d18
 800cc2c:	3ff921fb 	.word	0x3ff921fb
 800cc30:	8800759c 	.word	0x8800759c
 800cc34:	7e37e43c 	.word	0x7e37e43c
 800cc38:	e322da11 	.word	0xe322da11
 800cc3c:	3f90ad3a 	.word	0x3f90ad3a
 800cc40:	24760deb 	.word	0x24760deb
 800cc44:	3fa97b4b 	.word	0x3fa97b4b
 800cc48:	a0d03d51 	.word	0xa0d03d51
 800cc4c:	3fb10d66 	.word	0x3fb10d66
 800cc50:	c54c206e 	.word	0xc54c206e
 800cc54:	3fb745cd 	.word	0x3fb745cd
 800cc58:	920083ff 	.word	0x920083ff
 800cc5c:	3fc24924 	.word	0x3fc24924
 800cc60:	5555550d 	.word	0x5555550d
 800cc64:	3fd55555 	.word	0x3fd55555
 800cc68:	2c6a6c2f 	.word	0x2c6a6c2f
 800cc6c:	bfa2b444 	.word	0xbfa2b444
 800cc70:	52defd9a 	.word	0x52defd9a
 800cc74:	3fadde2d 	.word	0x3fadde2d
 800cc78:	af749a6d 	.word	0xaf749a6d
 800cc7c:	3fb3b0f2 	.word	0x3fb3b0f2
 800cc80:	fe231671 	.word	0xfe231671
 800cc84:	3fbc71c6 	.word	0x3fbc71c6
 800cc88:	9998ebc4 	.word	0x9998ebc4
 800cc8c:	3fc99999 	.word	0x3fc99999
 800cc90:	54442d18 	.word	0x54442d18
 800cc94:	bff921fb 	.word	0xbff921fb
 800cc98:	440fffff 	.word	0x440fffff
 800cc9c:	7ff00000 	.word	0x7ff00000
 800cca0:	3fdbffff 	.word	0x3fdbffff
 800cca4:	3ff00000 	.word	0x3ff00000
 800cca8:	3ff2ffff 	.word	0x3ff2ffff
 800ccac:	40038000 	.word	0x40038000
 800ccb0:	3ff80000 	.word	0x3ff80000
 800ccb4:	bff00000 	.word	0xbff00000
 800ccb8:	0800d490 	.word	0x0800d490
 800ccbc:	0800d4b0 	.word	0x0800d4b0

0800ccc0 <fabs>:
 800ccc0:	ec51 0b10 	vmov	r0, r1, d0
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ccca:	ec43 2b10 	vmov	d0, r2, r3
 800ccce:	4770      	bx	lr

0800ccd0 <_init>:
 800ccd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccd2:	bf00      	nop
 800ccd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccd6:	bc08      	pop	{r3}
 800ccd8:	469e      	mov	lr, r3
 800ccda:	4770      	bx	lr

0800ccdc <_fini>:
 800ccdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccde:	bf00      	nop
 800cce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cce2:	bc08      	pop	{r3}
 800cce4:	469e      	mov	lr, r3
 800cce6:	4770      	bx	lr
