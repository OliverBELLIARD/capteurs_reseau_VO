
capteurs_reseaux_VO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ee0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  080040b0  080040b0  000050b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004340  08004340  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004340  08004340  00005340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004348  08004348  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004348  08004348  00005348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800434c  0800434c  0000534c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004350  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000068  080043b8  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  080043b8  000062e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da64  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002509  00000000  00000000  00013afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  00016008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000096c  00000000  00000000  00016c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000035b7  00000000  00000000  000175b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b0d  00000000  00000000  0001ab6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cff91  00000000  00000000  0002b678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb609  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003950  00000000  00000000  000fb64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000fef9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004098 	.word	0x08004098

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004098 	.word	0x08004098

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005a4:	4b17      	ldr	r3, [pc, #92]	@ (8000604 <MX_CAN1_Init+0x64>)
 80005a6:	4a18      	ldr	r2, [pc, #96]	@ (8000608 <MX_CAN1_Init+0x68>)
 80005a8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 80005aa:	4b16      	ldr	r3, [pc, #88]	@ (8000604 <MX_CAN1_Init+0x64>)
 80005ac:	220a      	movs	r2, #10
 80005ae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005b0:	4b14      	ldr	r3, [pc, #80]	@ (8000604 <MX_CAN1_Init+0x64>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005b6:	4b13      	ldr	r3, [pc, #76]	@ (8000604 <MX_CAN1_Init+0x64>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80005bc:	4b11      	ldr	r3, [pc, #68]	@ (8000604 <MX_CAN1_Init+0x64>)
 80005be:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 80005c2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000604 <MX_CAN1_Init+0x64>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <MX_CAN1_Init+0x64>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <MX_CAN1_Init+0x64>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000604 <MX_CAN1_Init+0x64>)
 80005d8:	2200      	movs	r2, #0
 80005da:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005dc:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <MX_CAN1_Init+0x64>)
 80005de:	2200      	movs	r2, #0
 80005e0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005e2:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <MX_CAN1_Init+0x64>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005e8:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <MX_CAN1_Init+0x64>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005ee:	4805      	ldr	r0, [pc, #20]	@ (8000604 <MX_CAN1_Init+0x64>)
 80005f0:	f000 fde8 	bl	80011c4 <HAL_CAN_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80005fa:	f000 f9f3 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000084 	.word	0x20000084
 8000608:	40006400 	.word	0x40006400

0800060c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	@ 0x28
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a19      	ldr	r2, [pc, #100]	@ (8000690 <HAL_CAN_MspInit+0x84>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d12c      	bne.n	8000688 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
 8000632:	4b18      	ldr	r3, [pc, #96]	@ (8000694 <HAL_CAN_MspInit+0x88>)
 8000634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000636:	4a17      	ldr	r2, [pc, #92]	@ (8000694 <HAL_CAN_MspInit+0x88>)
 8000638:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800063c:	6413      	str	r3, [r2, #64]	@ 0x40
 800063e:	4b15      	ldr	r3, [pc, #84]	@ (8000694 <HAL_CAN_MspInit+0x88>)
 8000640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <HAL_CAN_MspInit+0x88>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	4a10      	ldr	r2, [pc, #64]	@ (8000694 <HAL_CAN_MspInit+0x88>)
 8000654:	f043 0302 	orr.w	r3, r3, #2
 8000658:	6313      	str	r3, [r2, #48]	@ 0x30
 800065a:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <HAL_CAN_MspInit+0x88>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	f003 0302 	and.w	r3, r3, #2
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000666:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800066a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066c:	2302      	movs	r3, #2
 800066e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000674:	2303      	movs	r3, #3
 8000676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000678:	2309      	movs	r3, #9
 800067a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4619      	mov	r1, r3
 8000682:	4805      	ldr	r0, [pc, #20]	@ (8000698 <HAL_CAN_MspInit+0x8c>)
 8000684:	f001 f894 	bl	80017b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000688:	bf00      	nop
 800068a:	3728      	adds	r7, #40	@ 0x28
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40006400 	.word	0x40006400
 8000694:	40023800 	.word	0x40023800
 8000698:	40020400 	.word	0x40020400

0800069c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	@ 0x28
 80006a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	4b2d      	ldr	r3, [pc, #180]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a2c      	ldr	r2, [pc, #176]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006bc:	f043 0304 	orr.w	r3, r3, #4
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b2a      	ldr	r3, [pc, #168]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0304 	and.w	r3, r3, #4
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	4b26      	ldr	r3, [pc, #152]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	4a25      	ldr	r2, [pc, #148]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006de:	4b23      	ldr	r3, [pc, #140]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	4a1e      	ldr	r2, [pc, #120]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fa:	4b1c      	ldr	r3, [pc, #112]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b18      	ldr	r3, [pc, #96]	@ (800076c <MX_GPIO_Init+0xd0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a17      	ldr	r2, [pc, #92]	@ (800076c <MX_GPIO_Init+0xd0>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
 8000716:	4b15      	ldr	r3, [pc, #84]	@ (800076c <MX_GPIO_Init+0xd0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2120      	movs	r1, #32
 8000726:	4812      	ldr	r0, [pc, #72]	@ (8000770 <MX_GPIO_Init+0xd4>)
 8000728:	f001 f9d6 	bl	8001ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800072c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000732:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	480c      	ldr	r0, [pc, #48]	@ (8000774 <MX_GPIO_Init+0xd8>)
 8000744:	f001 f834 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000748:	2320      	movs	r3, #32
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	4804      	ldr	r0, [pc, #16]	@ (8000770 <MX_GPIO_Init+0xd4>)
 8000760:	f001 f826 	bl	80017b0 <HAL_GPIO_Init>

}
 8000764:	bf00      	nop
 8000766:	3728      	adds	r7, #40	@ 0x28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800
 8000770:	40020000 	.word	0x40020000
 8000774:	40020800 	.word	0x40020800

08000778 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800077c:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <MX_I2C1_Init+0x50>)
 800077e:	4a13      	ldr	r2, [pc, #76]	@ (80007cc <MX_I2C1_Init+0x54>)
 8000780:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <MX_I2C1_Init+0x50>)
 8000784:	4a12      	ldr	r2, [pc, #72]	@ (80007d0 <MX_I2C1_Init+0x58>)
 8000786:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000788:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <MX_I2C1_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800078e:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <MX_I2C1_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000794:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <MX_I2C1_Init+0x50>)
 8000796:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800079a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800079c:	4b0a      	ldr	r3, [pc, #40]	@ (80007c8 <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007a2:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a8:	4b07      	ldr	r3, [pc, #28]	@ (80007c8 <MX_I2C1_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ae:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <MX_I2C1_Init+0x50>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b4:	4804      	ldr	r0, [pc, #16]	@ (80007c8 <MX_I2C1_Init+0x50>)
 80007b6:	f001 f9a9 	bl	8001b0c <HAL_I2C_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007c0:	f000 f910 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200000ac 	.word	0x200000ac
 80007cc:	40005400 	.word	0x40005400
 80007d0:	000186a0 	.word	0x000186a0

080007d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	@ 0x28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a19      	ldr	r2, [pc, #100]	@ (8000858 <HAL_I2C_MspInit+0x84>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d12b      	bne.n	800084e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	4b18      	ldr	r3, [pc, #96]	@ (800085c <HAL_I2C_MspInit+0x88>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a17      	ldr	r2, [pc, #92]	@ (800085c <HAL_I2C_MspInit+0x88>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b15      	ldr	r3, [pc, #84]	@ (800085c <HAL_I2C_MspInit+0x88>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000812:	23c0      	movs	r3, #192	@ 0xc0
 8000814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000816:	2312      	movs	r3, #18
 8000818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081e:	2303      	movs	r3, #3
 8000820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000822:	2304      	movs	r3, #4
 8000824:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	480c      	ldr	r0, [pc, #48]	@ (8000860 <HAL_I2C_MspInit+0x8c>)
 800082e:	f000 ffbf 	bl	80017b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	4b09      	ldr	r3, [pc, #36]	@ (800085c <HAL_I2C_MspInit+0x88>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083a:	4a08      	ldr	r2, [pc, #32]	@ (800085c <HAL_I2C_MspInit+0x88>)
 800083c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000840:	6413      	str	r3, [r2, #64]	@ 0x40
 8000842:	4b06      	ldr	r3, [pc, #24]	@ (800085c <HAL_I2C_MspInit+0x88>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000846:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800084e:	bf00      	nop
 8000850:	3728      	adds	r7, #40	@ 0x28
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40005400 	.word	0x40005400
 800085c:	40023800 	.word	0x40023800
 8000860:	40020400 	.word	0x40020400

08000864 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800086c:	1d39      	adds	r1, r7, #4
 800086e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000872:	2201      	movs	r2, #1
 8000874:	4807      	ldr	r0, [pc, #28]	@ (8000894 <__io_putchar+0x30>)
 8000876:	f002 f8c5 	bl	8002a04 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800087a:	1d39      	adds	r1, r7, #4
 800087c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000880:	2201      	movs	r2, #1
 8000882:	4805      	ldr	r0, [pc, #20]	@ (8000898 <__io_putchar+0x34>)
 8000884:	f002 f8be 	bl	8002a04 <HAL_UART_Transmit>

	return ch;
 8000888:	687b      	ldr	r3, [r7, #4]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000150 	.word	0x20000150
 8000898:	20000108 	.word	0x20000108

0800089c <MOT_Init>:
	printf("CALIBRATION EN COURS...\r\n");
	MPU_calibrateGyro(&hi2c1, 1500);
}

void MOT_Init()
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	CAN_Init();
 80008a0:	f000 f8a6 	bl	80009f0 <CAN_Init>
	MOT_Set_mode(MOT_MODE_ANTICLOCKWISE, 1, 1);
 80008a4:	2201      	movs	r2, #1
 80008a6:	2101      	movs	r1, #1
 80008a8:	2000      	movs	r0, #0
 80008aa:	f000 f9af 	bl	8000c0c <MOT_Set_mode>
	MOT_Set_origin();
 80008ae:	f000 f9c7 	bl	8000c40 <MOT_Set_origin>
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	int angle = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008c2:	f000 fbe9 	bl	8001098 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008c6:	f000 f821 	bl	800090c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008ca:	f7ff fee7 	bl	800069c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80008ce:	f000 fb13 	bl	8000ef8 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80008d2:	f7ff ff51 	bl	8000778 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80008d6:	f000 fae5 	bl	8000ea4 <MX_USART1_UART_Init>
	MX_CAN1_Init();
 80008da:	f7ff fe61 	bl	80005a0 <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */
	printf("\r\n=== TP Capteurs & Reseaux ===\r\n");
 80008de:	480a      	ldr	r0, [pc, #40]	@ (8000908 <main+0x50>)
 80008e0:	f002 fe24 	bl	800352c <puts>
	MOT_Init();
 80008e4:	f7ff ffda 	bl	800089c <MOT_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		angle += 30;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	331e      	adds	r3, #30
 80008ec:	607b      	str	r3, [r7, #4]
		MOT_Rotate(angle, MOT_ANGLE_POSITIVE);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	2100      	movs	r1, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 f9b2 	bl	8000c5e <MOT_Rotate>
		HAL_Delay(1000);
 80008fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008fe:	f000 fc3d 	bl	800117c <HAL_Delay>
		angle += 30;
 8000902:	bf00      	nop
 8000904:	e7f0      	b.n	80008e8 <main+0x30>
 8000906:	bf00      	nop
 8000908:	08004108 	.word	0x08004108

0800090c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b094      	sub	sp, #80	@ 0x50
 8000910:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	2234      	movs	r2, #52	@ 0x34
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f002 fee6 	bl	80036ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000920:	f107 0308 	add.w	r3, r7, #8
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	4b29      	ldr	r3, [pc, #164]	@ (80009dc <SystemClock_Config+0xd0>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000938:	4a28      	ldr	r2, [pc, #160]	@ (80009dc <SystemClock_Config+0xd0>)
 800093a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800093e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000940:	4b26      	ldr	r3, [pc, #152]	@ (80009dc <SystemClock_Config+0xd0>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000944:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800094c:	2300      	movs	r3, #0
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	4b23      	ldr	r3, [pc, #140]	@ (80009e0 <SystemClock_Config+0xd4>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000958:	4a21      	ldr	r2, [pc, #132]	@ (80009e0 <SystemClock_Config+0xd4>)
 800095a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800095e:	6013      	str	r3, [r2, #0]
 8000960:	4b1f      	ldr	r3, [pc, #124]	@ (80009e0 <SystemClock_Config+0xd4>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800096c:	2302      	movs	r3, #2
 800096e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000970:	2301      	movs	r3, #1
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000974:	2310      	movs	r3, #16
 8000976:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000978:	2302      	movs	r3, #2
 800097a:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800097c:	2300      	movs	r3, #0
 800097e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000980:	2308      	movs	r3, #8
 8000982:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 80;
 8000984:	2350      	movs	r3, #80	@ 0x50
 8000986:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000988:	2302      	movs	r3, #2
 800098a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800098c:	2302      	movs	r3, #2
 800098e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000990:	2302      	movs	r3, #2
 8000992:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4618      	mov	r0, r3
 800099a:	f001 fd45 	bl	8002428 <HAL_RCC_OscConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 80009a4:	f000 f81e 	bl	80009e4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a8:	230f      	movs	r3, #15
 80009aa:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ac:	2302      	movs	r3, #2
 80009ae:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009b8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	2102      	movs	r1, #2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 f9e5 	bl	8001d94 <HAL_RCC_ClockConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0xc8>
	{
		Error_Handler();
 80009d0:	f000 f808 	bl	80009e4 <Error_Handler>
	}
}
 80009d4:	bf00      	nop
 80009d6:	3750      	adds	r7, #80	@ 0x50
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40007000 	.word	0x40007000

080009e4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <Error_Handler+0x8>

080009f0 <CAN_Init>:

/**
 * @brief Initialises the CAN communication
 */
void CAN_Init()
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	logs = TRUE;
 80009f6:	4b26      	ldr	r3, [pc, #152]	@ (8000a90 <CAN_Init+0xa0>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	601a      	str	r2, [r3, #0]

	status = HAL_CAN_Start(&hcan1);
 80009fc:	4825      	ldr	r0, [pc, #148]	@ (8000a94 <CAN_Init+0xa4>)
 80009fe:	f000 fcdc 	bl	80013ba <HAL_CAN_Start>
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]

	switch (status)
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2b03      	cmp	r3, #3
 8000a0a:	d82f      	bhi.n	8000a6c <CAN_Init+0x7c>
 8000a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8000a14 <CAN_Init+0x24>)
 8000a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a12:	bf00      	nop
 8000a14:	08000a25 	.word	0x08000a25
 8000a18:	08000a35 	.word	0x08000a35
 8000a1c:	08000a49 	.word	0x08000a49
 8000a20:	08000a59 	.word	0x08000a59
	{
	case HAL_OK:
		if (logs == TRUE) printf("CAN started successfully.\r\n");
 8000a24:	4b1a      	ldr	r3, [pc, #104]	@ (8000a90 <CAN_Init+0xa0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d129      	bne.n	8000a80 <CAN_Init+0x90>
 8000a2c:	481a      	ldr	r0, [pc, #104]	@ (8000a98 <CAN_Init+0xa8>)
 8000a2e:	f002 fd7d 	bl	800352c <puts>
		break;
 8000a32:	e025      	b.n	8000a80 <CAN_Init+0x90>
	case HAL_ERROR:
		if (logs == TRUE) printf("Error: CAN start failed.\r\n");
 8000a34:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <CAN_Init+0xa0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d102      	bne.n	8000a42 <CAN_Init+0x52>
 8000a3c:	4817      	ldr	r0, [pc, #92]	@ (8000a9c <CAN_Init+0xac>)
 8000a3e:	f002 fd75 	bl	800352c <puts>
		Error_Handler(); // Optional: Go to error handler
 8000a42:	f7ff ffcf 	bl	80009e4 <Error_Handler>
		break;
 8000a46:	e01e      	b.n	8000a86 <CAN_Init+0x96>
	case HAL_BUSY:
		if (logs == TRUE) printf("Warning: CAN is busy. Retry later.\r\n");
 8000a48:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <CAN_Init+0xa0>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d119      	bne.n	8000a84 <CAN_Init+0x94>
 8000a50:	4813      	ldr	r0, [pc, #76]	@ (8000aa0 <CAN_Init+0xb0>)
 8000a52:	f002 fd6b 	bl	800352c <puts>
		// Optional: add retry logic if desired
		break;
 8000a56:	e015      	b.n	8000a84 <CAN_Init+0x94>
	case HAL_TIMEOUT:
		if (logs == TRUE) printf("Error: CAN start timed out.\r\n");
 8000a58:	4b0d      	ldr	r3, [pc, #52]	@ (8000a90 <CAN_Init+0xa0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d102      	bne.n	8000a66 <CAN_Init+0x76>
 8000a60:	4810      	ldr	r0, [pc, #64]	@ (8000aa4 <CAN_Init+0xb4>)
 8000a62:	f002 fd63 	bl	800352c <puts>
		Error_Handler(); // Optional: Go to error handler
 8000a66:	f7ff ffbd 	bl	80009e4 <Error_Handler>
		break;
 8000a6a:	e00c      	b.n	8000a86 <CAN_Init+0x96>
	default:
		if (logs == TRUE) printf("Unknown status returned from HAL_CAN_Start.\r\n");
 8000a6c:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <CAN_Init+0xa0>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d102      	bne.n	8000a7a <CAN_Init+0x8a>
 8000a74:	480c      	ldr	r0, [pc, #48]	@ (8000aa8 <CAN_Init+0xb8>)
 8000a76:	f002 fd59 	bl	800352c <puts>
		Error_Handler(); // Optional: Go to error handler
 8000a7a:	f7ff ffb3 	bl	80009e4 <Error_Handler>
		break;
 8000a7e:	e002      	b.n	8000a86 <CAN_Init+0x96>
		break;
 8000a80:	bf00      	nop
 8000a82:	e000      	b.n	8000a86 <CAN_Init+0x96>
		break;
 8000a84:	bf00      	nop
	}
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000100 	.word	0x20000100
 8000a94:	20000084 	.word	0x20000084
 8000a98:	0800412c 	.word	0x0800412c
 8000a9c:	08004148 	.word	0x08004148
 8000aa0:	08004164 	.word	0x08004164
 8000aa4:	08004188 	.word	0x08004188
 8000aa8:	080041a8 	.word	0x080041a8

08000aac <CAN_Send>:
 *               			destination or type of the message being sent.
 *
 * @retval None
 */
void CAN_Send(uint8_t * aData, uint32_t size, uint32_t msg_id)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b092      	sub	sp, #72	@ 0x48
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status;
	CAN_TxHeaderTypeDef header;
	uint32_t txMailbox;
	int retryCount = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	647b      	str	r3, [r7, #68]	@ 0x44
	const int maxRetries = 5;
 8000abc:	2305      	movs	r3, #5
 8000abe:	63fb      	str	r3, [r7, #60]	@ 0x3c

	// Initialiser le header
	header.StdId = msg_id;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	61bb      	str	r3, [r7, #24]
	header.IDE = CAN_ID_STD;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
	header.RTR = CAN_RTR_DATA;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
	header.DLC = size;
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	62bb      	str	r3, [r7, #40]	@ 0x28
	header.TransmitGlobalTime = DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	// Pointer vers les variables locales
	CAN_TxHeaderTypeDef *pHeader = &header;
 8000ad6:	f107 0318 	add.w	r3, r7, #24
 8000ada:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t *pTxMailbox = &txMailbox;
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	637b      	str	r3, [r7, #52]	@ 0x34

	// Attempt to add the CAN message to the transmission mailbox with retry logic
	do {
		status = HAL_CAN_AddTxMessage(&hcan1, pHeader, aData, pTxMailbox);
 8000ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000ae8:	483e      	ldr	r0, [pc, #248]	@ (8000be4 <CAN_Send+0x138>)
 8000aea:	f000 fcaa 	bl	8001442 <HAL_CAN_AddTxMessage>
 8000aee:	4603      	mov	r3, r0
 8000af0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		switch (status)
 8000af4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000af8:	2b03      	cmp	r3, #3
 8000afa:	d852      	bhi.n	8000ba2 <CAN_Send+0xf6>
 8000afc:	a201      	add	r2, pc, #4	@ (adr r2, 8000b04 <CAN_Send+0x58>)
 8000afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b02:	bf00      	nop
 8000b04:	08000b15 	.word	0x08000b15
 8000b08:	08000b7b 	.word	0x08000b7b
 8000b0c:	08000b51 	.word	0x08000b51
 8000b10:	08000b8f 	.word	0x08000b8f
		{
		case HAL_OK:
			if (logs == TRUE)
 8000b14:	4b34      	ldr	r3, [pc, #208]	@ (8000be8 <CAN_Send+0x13c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d15e      	bne.n	8000bda <CAN_Send+0x12e>
			{
			printf("CAN message ");
 8000b1c:	4833      	ldr	r0, [pc, #204]	@ (8000bec <CAN_Send+0x140>)
 8000b1e:	f002 fc9d 	bl	800345c <iprintf>
			for (int i = 0; i<size; i++)
 8000b22:	2300      	movs	r3, #0
 8000b24:	643b      	str	r3, [r7, #64]	@ 0x40
 8000b26:	e00a      	b.n	8000b3e <CAN_Send+0x92>
				printf(" 0x%X", aData[i]);
 8000b28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	482f      	ldr	r0, [pc, #188]	@ (8000bf0 <CAN_Send+0x144>)
 8000b34:	f002 fc92 	bl	800345c <iprintf>
			for (int i = 0; i<size; i++)
 8000b38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8000b3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b40:	68ba      	ldr	r2, [r7, #8]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d8f0      	bhi.n	8000b28 <CAN_Send+0x7c>
			printf(" sent successfully to  0x%X.\r\n", (unsigned int)msg_id);
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	482a      	ldr	r0, [pc, #168]	@ (8000bf4 <CAN_Send+0x148>)
 8000b4a:	f002 fc87 	bl	800345c <iprintf>
			}
			return;  // Exit the function if the message was sent successfully
 8000b4e:	e044      	b.n	8000bda <CAN_Send+0x12e>

		case HAL_BUSY:
			retryCount++;
 8000b50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b52:	3301      	adds	r3, #1
 8000b54:	647b      	str	r3, [r7, #68]	@ 0x44
			if (logs == TRUE) printf("Warning: CAN bus is busy, retrying (%d/%d)...\r\n", retryCount, maxRetries);
 8000b56:	4b24      	ldr	r3, [pc, #144]	@ (8000be8 <CAN_Send+0x13c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d104      	bne.n	8000b68 <CAN_Send+0xbc>
 8000b5e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000b60:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000b62:	4825      	ldr	r0, [pc, #148]	@ (8000bf8 <CAN_Send+0x14c>)
 8000b64:	f002 fc7a 	bl	800345c <iprintf>
			HAL_Delay(10);  // Optional: Add a small delay between retries
 8000b68:	200a      	movs	r0, #10
 8000b6a:	f000 fb07 	bl	800117c <HAL_Delay>
			break;
 8000b6e:	bf00      	nop
			if (logs == TRUE) printf("Unknown status returned from HAL_CAN_AddTxMessage.\r\n");
			Error_Handler();  // Optional: Handle unexpected status
			return;
		}

	} while (status == HAL_BUSY && retryCount < maxRetries);
 8000b70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d122      	bne.n	8000bbe <CAN_Send+0x112>
 8000b78:	e01d      	b.n	8000bb6 <CAN_Send+0x10a>
			if (logs == TRUE) printf("Error: Failed to send CAN message.\r\n");
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <CAN_Send+0x13c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d102      	bne.n	8000b88 <CAN_Send+0xdc>
 8000b82:	481e      	ldr	r0, [pc, #120]	@ (8000bfc <CAN_Send+0x150>)
 8000b84:	f002 fcd2 	bl	800352c <puts>
			Error_Handler();  // Optional: Go to error handler for critical failure
 8000b88:	f7ff ff2c 	bl	80009e4 <Error_Handler>
			return;
 8000b8c:	e026      	b.n	8000bdc <CAN_Send+0x130>
			if (logs == TRUE) printf("Error: CAN message send timed out.\r\n");
 8000b8e:	4b16      	ldr	r3, [pc, #88]	@ (8000be8 <CAN_Send+0x13c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d102      	bne.n	8000b9c <CAN_Send+0xf0>
 8000b96:	481a      	ldr	r0, [pc, #104]	@ (8000c00 <CAN_Send+0x154>)
 8000b98:	f002 fcc8 	bl	800352c <puts>
			Error_Handler();  // Optional: Go to error handler for timeout
 8000b9c:	f7ff ff22 	bl	80009e4 <Error_Handler>
			return;
 8000ba0:	e01c      	b.n	8000bdc <CAN_Send+0x130>
			if (logs == TRUE) printf("Unknown status returned from HAL_CAN_AddTxMessage.\r\n");
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <CAN_Send+0x13c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d102      	bne.n	8000bb0 <CAN_Send+0x104>
 8000baa:	4816      	ldr	r0, [pc, #88]	@ (8000c04 <CAN_Send+0x158>)
 8000bac:	f002 fcbe 	bl	800352c <puts>
			Error_Handler();  // Optional: Handle unexpected status
 8000bb0:	f7ff ff18 	bl	80009e4 <Error_Handler>
			return;
 8000bb4:	e012      	b.n	8000bdc <CAN_Send+0x130>
	} while (status == HAL_BUSY && retryCount < maxRetries);
 8000bb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	db91      	blt.n	8000ae2 <CAN_Send+0x36>

	if (retryCount == maxRetries)
 8000bbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d10a      	bne.n	8000bdc <CAN_Send+0x130>
	{
		if (logs == TRUE) printf("Error: Exceeded maximum retries for CAN message send.\r\n");
 8000bc6:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <CAN_Send+0x13c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d102      	bne.n	8000bd4 <CAN_Send+0x128>
 8000bce:	480e      	ldr	r0, [pc, #56]	@ (8000c08 <CAN_Send+0x15c>)
 8000bd0:	f002 fcac 	bl	800352c <puts>
		Error_Handler();  // Optional: Go to error handler after max retries
 8000bd4:	f7ff ff06 	bl	80009e4 <Error_Handler>
 8000bd8:	e000      	b.n	8000bdc <CAN_Send+0x130>
			return;  // Exit the function if the message was sent successfully
 8000bda:	bf00      	nop
	}
}
 8000bdc:	3748      	adds	r7, #72	@ 0x48
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000084 	.word	0x20000084
 8000be8:	20000100 	.word	0x20000100
 8000bec:	080041d8 	.word	0x080041d8
 8000bf0:	080041e8 	.word	0x080041e8
 8000bf4:	080041f0 	.word	0x080041f0
 8000bf8:	08004210 	.word	0x08004210
 8000bfc:	08004240 	.word	0x08004240
 8000c00:	08004264 	.word	0x08004264
 8000c04:	08004288 	.word	0x08004288
 8000c08:	080042bc 	.word	0x080042bc

08000c0c <MOT_Set_mode>:
 * @param uint8_t direction	Rotation direction: Anti-clockwise (0x00) or Clockwise (0x01).
 * @param uint8_t steps		Number of steps, range: 0x01 to 0xFF (1 unit = 1°).
 * @param uint8_t speed		Speed of the motor, range: 0x01 = 1 ms / 1 kHz to 0xFF = 255ms / 4 Hz
 */
void MOT_Set_mode(uint8_t direction, uint8_t steps, uint8_t speed)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
 8000c16:	460b      	mov	r3, r1
 8000c18:	71bb      	strb	r3, [r7, #6]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	717b      	strb	r3, [r7, #5]
	uint8_t aData[3];

	aData[0] = direction;
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	733b      	strb	r3, [r7, #12]
	aData[1] = steps;
 8000c22:	79bb      	ldrb	r3, [r7, #6]
 8000c24:	737b      	strb	r3, [r7, #13]
	aData[2] = speed;
 8000c26:	797b      	ldrb	r3, [r7, #5]
 8000c28:	73bb      	strb	r3, [r7, #14]

	CAN_Send(aData, 3, MOT_MODE_MANUAL_ID);
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	2260      	movs	r2, #96	@ 0x60
 8000c30:	2103      	movs	r1, #3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff ff3a 	bl	8000aac <CAN_Send>
}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <MOT_Set_origin>:

/**
 * @brief Sets the current position of the motor as the origin.
 */
void MOT_Set_origin()
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
	uint8_t aData[2];

	aData[0] = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	713b      	strb	r3, [r7, #4]
	CAN_Send(aData, 1, MOT_INIT_POS_ID);
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2262      	movs	r2, #98	@ 0x62
 8000c4e:	2101      	movs	r1, #1
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff2b 	bl	8000aac <CAN_Send>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <MOT_Rotate>:
 * @brief Rotates the Step Motor of an angle in a defined direction.
 * @param uint8_t angle Angle of rotation, range: 0x01 to 0xFF (1 unit = 1°).
 * @param uint8_t sign	Angle sign, can be positive (0x00) or negative (0x01).
 */
void MOT_Rotate(uint8_t angle, uint8_t sign)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b084      	sub	sp, #16
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	4603      	mov	r3, r0
 8000c66:	460a      	mov	r2, r1
 8000c68:	71fb      	strb	r3, [r7, #7]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	71bb      	strb	r3, [r7, #6]
	uint8_t aData[2];

	if (angle < MOT_ANGLE_MIN) angle = 0x00;
	if (angle > MOT_ANGLE_MAX) angle = 0xFF;

	aData[0] = angle;
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	733b      	strb	r3, [r7, #12]
	aData[1] = sign;
 8000c72:	79bb      	ldrb	r3, [r7, #6]
 8000c74:	737b      	strb	r3, [r7, #13]

	CAN_Send(aData, MOT_ANGLE_SIZE, MOT_ANGLE_ID);
 8000c76:	f107 030c 	add.w	r3, r7, #12
 8000c7a:	2261      	movs	r2, #97	@ 0x61
 8000c7c:	2102      	movs	r1, #2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ff14 	bl	8000aac <CAN_Send>
}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	4a08      	ldr	r2, [pc, #32]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cca:	2007      	movs	r0, #7
 8000ccc:	f000 fd3c 	bl	8001748 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40023800 	.word	0x40023800

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d32:	f000 fa03 	bl	800113c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b086      	sub	sp, #24
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	60f8      	str	r0, [r7, #12]
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	e00a      	b.n	8000d62 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d4c:	f3af 8000 	nop.w
 8000d50:	4601      	mov	r1, r0
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	1c5a      	adds	r2, r3, #1
 8000d56:	60ba      	str	r2, [r7, #8]
 8000d58:	b2ca      	uxtb	r2, r1
 8000d5a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	697a      	ldr	r2, [r7, #20]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	dbf0      	blt.n	8000d4c <_read+0x12>
  }

  return len;
 8000d6a:	687b      	ldr	r3, [r7, #4]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	e009      	b.n	8000d9a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1c5a      	adds	r2, r3, #1
 8000d8a:	60ba      	str	r2, [r7, #8]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fd68 	bl	8000864 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	3301      	adds	r3, #1
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	dbf1      	blt.n	8000d86 <_write+0x12>
  }
  return len;
 8000da2:	687b      	ldr	r3, [r7, #4]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <_close>:

int _close(int file)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000db4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dd4:	605a      	str	r2, [r3, #4]
  return 0;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <_isatty>:

int _isatty(int file)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dec:	2301      	movs	r3, #1
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b085      	sub	sp, #20
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	60f8      	str	r0, [r7, #12]
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e1c:	4a14      	ldr	r2, [pc, #80]	@ (8000e70 <_sbrk+0x5c>)
 8000e1e:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <_sbrk+0x60>)
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e28:	4b13      	ldr	r3, [pc, #76]	@ (8000e78 <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e30:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <_sbrk+0x64>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	@ (8000e7c <_sbrk+0x68>)
 8000e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e36:	4b10      	ldr	r3, [pc, #64]	@ (8000e78 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d207      	bcs.n	8000e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e44:	f002 fcb0 	bl	80037a8 <__errno>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e52:	e009      	b.n	8000e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e54:	4b08      	ldr	r3, [pc, #32]	@ (8000e78 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5a:	4b07      	ldr	r3, [pc, #28]	@ (8000e78 <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	4a05      	ldr	r2, [pc, #20]	@ (8000e78 <_sbrk+0x64>)
 8000e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e66:	68fb      	ldr	r3, [r7, #12]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20020000 	.word	0x20020000
 8000e74:	00000400 	.word	0x00000400
 8000e78:	20000104 	.word	0x20000104
 8000e7c:	200002e8 	.word	0x200002e8

08000e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e84:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <SystemInit+0x20>)
 8000e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ea0 <SystemInit+0x20>)
 8000e8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <MX_USART1_UART_Init+0x4c>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	@ (8000ef4 <MX_USART1_UART_Init+0x50>)
 8000eac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eae:	4b10      	ldr	r3, [pc, #64]	@ (8000ef0 <MX_USART1_UART_Init+0x4c>)
 8000eb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000eb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef0 <MX_USART1_UART_Init+0x4c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef0 <MX_USART1_UART_Init+0x4c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <MX_USART1_UART_Init+0x4c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ec8:	4b09      	ldr	r3, [pc, #36]	@ (8000ef0 <MX_USART1_UART_Init+0x4c>)
 8000eca:	220c      	movs	r2, #12
 8000ecc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ece:	4b08      	ldr	r3, [pc, #32]	@ (8000ef0 <MX_USART1_UART_Init+0x4c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <MX_USART1_UART_Init+0x4c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eda:	4805      	ldr	r0, [pc, #20]	@ (8000ef0 <MX_USART1_UART_Init+0x4c>)
 8000edc:	f001 fd42 	bl	8002964 <HAL_UART_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ee6:	f7ff fd7d 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000108 	.word	0x20000108
 8000ef4:	40011000 	.word	0x40011000

08000ef8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000efc:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	@ (8000f48 <MX_USART2_UART_Init+0x50>)
 8000f00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f02:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f1e:	220c      	movs	r2, #12
 8000f20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f22:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f2e:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f30:	f001 fd18 	bl	8002964 <HAL_UART_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f3a:	f7ff fd53 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000150 	.word	0x20000150
 8000f48:	40004400 	.word	0x40004400

08000f4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08c      	sub	sp, #48	@ 0x30
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a32      	ldr	r2, [pc, #200]	@ (8001034 <HAL_UART_MspInit+0xe8>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d12d      	bne.n	8000fca <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
 8000f72:	4b31      	ldr	r3, [pc, #196]	@ (8001038 <HAL_UART_MspInit+0xec>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f76:	4a30      	ldr	r2, [pc, #192]	@ (8001038 <HAL_UART_MspInit+0xec>)
 8000f78:	f043 0310 	orr.w	r3, r3, #16
 8000f7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001038 <HAL_UART_MspInit+0xec>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f82:	f003 0310 	and.w	r3, r3, #16
 8000f86:	61bb      	str	r3, [r7, #24]
 8000f88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001038 <HAL_UART_MspInit+0xec>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	4a29      	ldr	r2, [pc, #164]	@ (8001038 <HAL_UART_MspInit+0xec>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9a:	4b27      	ldr	r3, [pc, #156]	@ (8001038 <HAL_UART_MspInit+0xec>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fa6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	481e      	ldr	r0, [pc, #120]	@ (800103c <HAL_UART_MspInit+0xf0>)
 8000fc4:	f000 fbf4 	bl	80017b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fc8:	e030      	b.n	800102c <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a1c      	ldr	r2, [pc, #112]	@ (8001040 <HAL_UART_MspInit+0xf4>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d12b      	bne.n	800102c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <HAL_UART_MspInit+0xec>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fdc:	4a16      	ldr	r2, [pc, #88]	@ (8001038 <HAL_UART_MspInit+0xec>)
 8000fde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe4:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <HAL_UART_MspInit+0xec>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <HAL_UART_MspInit+0xec>)
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff8:	4a0f      	ldr	r2, [pc, #60]	@ (8001038 <HAL_UART_MspInit+0xec>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001000:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <HAL_UART_MspInit+0xec>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800100c:	230c      	movs	r3, #12
 800100e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800101c:	2307      	movs	r3, #7
 800101e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	4619      	mov	r1, r3
 8001026:	4805      	ldr	r0, [pc, #20]	@ (800103c <HAL_UART_MspInit+0xf0>)
 8001028:	f000 fbc2 	bl	80017b0 <HAL_GPIO_Init>
}
 800102c:	bf00      	nop
 800102e:	3730      	adds	r7, #48	@ 0x30
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40011000 	.word	0x40011000
 8001038:	40023800 	.word	0x40023800
 800103c:	40020000 	.word	0x40020000
 8001040:	40004400 	.word	0x40004400

08001044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001044:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800107c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001048:	f7ff ff1a 	bl	8000e80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800104c:	480c      	ldr	r0, [pc, #48]	@ (8001080 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800104e:	490d      	ldr	r1, [pc, #52]	@ (8001084 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001050:	4a0d      	ldr	r2, [pc, #52]	@ (8001088 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001054:	e002      	b.n	800105c <LoopCopyDataInit>

08001056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105a:	3304      	adds	r3, #4

0800105c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800105c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001060:	d3f9      	bcc.n	8001056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001062:	4a0a      	ldr	r2, [pc, #40]	@ (800108c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001064:	4c0a      	ldr	r4, [pc, #40]	@ (8001090 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001068:	e001      	b.n	800106e <LoopFillZerobss>

0800106a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800106c:	3204      	adds	r2, #4

0800106e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001070:	d3fb      	bcc.n	800106a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001072:	f002 fb9f 	bl	80037b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001076:	f7ff fc1f 	bl	80008b8 <main>
  bx  lr    
 800107a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800107c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001084:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001088:	08004350 	.word	0x08004350
  ldr r2, =_sbss
 800108c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001090:	200002e8 	.word	0x200002e8

08001094 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001094:	e7fe      	b.n	8001094 <ADC_IRQHandler>
	...

08001098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800109c:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <HAL_Init+0x40>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0d      	ldr	r2, [pc, #52]	@ (80010d8 <HAL_Init+0x40>)
 80010a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010a8:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <HAL_Init+0x40>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <HAL_Init+0x40>)
 80010ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b4:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <HAL_Init+0x40>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a07      	ldr	r2, [pc, #28]	@ (80010d8 <HAL_Init+0x40>)
 80010ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c0:	2003      	movs	r0, #3
 80010c2:	f000 fb41 	bl	8001748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c6:	2000      	movs	r0, #0
 80010c8:	f000 f808 	bl	80010dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010cc:	f7ff fdde 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40023c00 	.word	0x40023c00

080010dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <HAL_InitTick+0x54>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <HAL_InitTick+0x58>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 fb4b 	bl	8001796 <HAL_SYSTICK_Config>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e00e      	b.n	8001128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b0f      	cmp	r3, #15
 800110e:	d80a      	bhi.n	8001126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001110:	2200      	movs	r2, #0
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001118:	f000 fb21 	bl	800175e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800111c:	4a06      	ldr	r2, [pc, #24]	@ (8001138 <HAL_InitTick+0x5c>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e000      	b.n	8001128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000000 	.word	0x20000000
 8001134:	20000008 	.word	0x20000008
 8001138:	20000004 	.word	0x20000004

0800113c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <HAL_IncTick+0x20>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_IncTick+0x24>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4413      	add	r3, r2
 800114c:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <HAL_IncTick+0x24>)
 800114e:	6013      	str	r3, [r2, #0]
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000008 	.word	0x20000008
 8001160:	20000198 	.word	0x20000198

08001164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return uwTick;
 8001168:	4b03      	ldr	r3, [pc, #12]	@ (8001178 <HAL_GetTick+0x14>)
 800116a:	681b      	ldr	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000198 	.word	0x20000198

0800117c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001184:	f7ff ffee 	bl	8001164 <HAL_GetTick>
 8001188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001194:	d005      	beq.n	80011a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001196:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <HAL_Delay+0x44>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4413      	add	r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011a2:	bf00      	nop
 80011a4:	f7ff ffde 	bl	8001164 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d8f7      	bhi.n	80011a4 <HAL_Delay+0x28>
  {
  }
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000008 	.word	0x20000008

080011c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e0ed      	b.n	80013b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d102      	bne.n	80011e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff fa12 	bl	800060c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f042 0201 	orr.w	r2, r2, #1
 80011f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011f8:	f7ff ffb4 	bl	8001164 <HAL_GetTick>
 80011fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011fe:	e012      	b.n	8001226 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001200:	f7ff ffb0 	bl	8001164 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b0a      	cmp	r3, #10
 800120c:	d90b      	bls.n	8001226 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001212:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2205      	movs	r2, #5
 800121e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e0c5      	b.n	80013b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0e5      	beq.n	8001200 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0202 	bic.w	r2, r2, #2
 8001242:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001244:	f7ff ff8e 	bl	8001164 <HAL_GetTick>
 8001248:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800124a:	e012      	b.n	8001272 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800124c:	f7ff ff8a 	bl	8001164 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b0a      	cmp	r3, #10
 8001258:	d90b      	bls.n	8001272 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2205      	movs	r2, #5
 800126a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e09f      	b.n	80013b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1e5      	bne.n	800124c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	7e1b      	ldrb	r3, [r3, #24]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d108      	bne.n	800129a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	e007      	b.n	80012aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7e5b      	ldrb	r3, [r3, #25]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d108      	bne.n	80012c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	e007      	b.n	80012d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80012d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	7e9b      	ldrb	r3, [r3, #26]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d108      	bne.n	80012ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f042 0220 	orr.w	r2, r2, #32
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	e007      	b.n	80012fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 0220 	bic.w	r2, r2, #32
 80012fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	7edb      	ldrb	r3, [r3, #27]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d108      	bne.n	8001318 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f022 0210 	bic.w	r2, r2, #16
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	e007      	b.n	8001328 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 0210 	orr.w	r2, r2, #16
 8001326:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	7f1b      	ldrb	r3, [r3, #28]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d108      	bne.n	8001342 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 0208 	orr.w	r2, r2, #8
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	e007      	b.n	8001352 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0208 	bic.w	r2, r2, #8
 8001350:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	7f5b      	ldrb	r3, [r3, #29]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d108      	bne.n	800136c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f042 0204 	orr.w	r2, r2, #4
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	e007      	b.n	800137c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0204 	bic.w	r2, r2, #4
 800137a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	431a      	orrs	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	431a      	orrs	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	ea42 0103 	orr.w	r1, r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	1e5a      	subs	r2, r3, #1
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	430a      	orrs	r2, r1
 80013a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d12e      	bne.n	800142c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2202      	movs	r2, #2
 80013d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 0201 	bic.w	r2, r2, #1
 80013e4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013e6:	f7ff febd 	bl	8001164 <HAL_GetTick>
 80013ea:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013ec:	e012      	b.n	8001414 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013ee:	f7ff feb9 	bl	8001164 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b0a      	cmp	r3, #10
 80013fa:	d90b      	bls.n	8001414 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001400:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2205      	movs	r2, #5
 800140c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e012      	b.n	800143a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1e5      	bne.n	80013ee <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001428:	2300      	movs	r3, #0
 800142a:	e006      	b.n	800143a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001430:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
  }
}
 800143a:	4618      	mov	r0, r3
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001442:	b480      	push	{r7}
 8001444:	b089      	sub	sp, #36	@ 0x24
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001456:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001460:	7ffb      	ldrb	r3, [r7, #31]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d003      	beq.n	800146e <HAL_CAN_AddTxMessage+0x2c>
 8001466:	7ffb      	ldrb	r3, [r7, #31]
 8001468:	2b02      	cmp	r3, #2
 800146a:	f040 80ad 	bne.w	80015c8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d10a      	bne.n	800148e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800147e:	2b00      	cmp	r3, #0
 8001480:	d105      	bne.n	800148e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 8095 	beq.w	80015b8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	0e1b      	lsrs	r3, r3, #24
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001498:	2201      	movs	r2, #1
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	409a      	lsls	r2, r3
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10d      	bne.n	80014c6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014b4:	68f9      	ldr	r1, [r7, #12]
 80014b6:	6809      	ldr	r1, [r1, #0]
 80014b8:	431a      	orrs	r2, r3
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3318      	adds	r3, #24
 80014be:	011b      	lsls	r3, r3, #4
 80014c0:	440b      	add	r3, r1
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	e00f      	b.n	80014e6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014d0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014d6:	68f9      	ldr	r1, [r7, #12]
 80014d8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80014da:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	3318      	adds	r3, #24
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	440b      	add	r3, r1
 80014e4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6819      	ldr	r1, [r3, #0]
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	691a      	ldr	r2, [r3, #16]
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	3318      	adds	r3, #24
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	440b      	add	r3, r1
 80014f6:	3304      	adds	r3, #4
 80014f8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	7d1b      	ldrb	r3, [r3, #20]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d111      	bne.n	8001526 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3318      	adds	r3, #24
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	4413      	add	r3, r2
 800150e:	3304      	adds	r3, #4
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	6811      	ldr	r1, [r2, #0]
 8001516:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3318      	adds	r3, #24
 800151e:	011b      	lsls	r3, r3, #4
 8001520:	440b      	add	r3, r1
 8001522:	3304      	adds	r3, #4
 8001524:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3307      	adds	r3, #7
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	061a      	lsls	r2, r3, #24
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3306      	adds	r3, #6
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	041b      	lsls	r3, r3, #16
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3305      	adds	r3, #5
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	4313      	orrs	r3, r2
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	3204      	adds	r2, #4
 8001546:	7812      	ldrb	r2, [r2, #0]
 8001548:	4610      	mov	r0, r2
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	6811      	ldr	r1, [r2, #0]
 800154e:	ea43 0200 	orr.w	r2, r3, r0
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	440b      	add	r3, r1
 8001558:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800155c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3303      	adds	r3, #3
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	061a      	lsls	r2, r3, #24
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3302      	adds	r3, #2
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	041b      	lsls	r3, r3, #16
 800156e:	431a      	orrs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3301      	adds	r3, #1
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	4313      	orrs	r3, r2
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	7812      	ldrb	r2, [r2, #0]
 800157e:	4610      	mov	r0, r2
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	6811      	ldr	r1, [r2, #0]
 8001584:	ea43 0200 	orr.w	r2, r3, r0
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	440b      	add	r3, r1
 800158e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001592:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	3318      	adds	r3, #24
 800159c:	011b      	lsls	r3, r3, #4
 800159e:	4413      	add	r3, r2
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	6811      	ldr	r1, [r2, #0]
 80015a6:	f043 0201 	orr.w	r2, r3, #1
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3318      	adds	r3, #24
 80015ae:	011b      	lsls	r3, r3, #4
 80015b0:	440b      	add	r3, r1
 80015b2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80015b4:	2300      	movs	r3, #0
 80015b6:	e00e      	b.n	80015d6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015bc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e006      	b.n	80015d6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015cc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
  }
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3724      	adds	r7, #36	@ 0x24
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001600:	4013      	ands	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800160c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001616:	4a04      	ldr	r2, [pc, #16]	@ (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	60d3      	str	r3, [r2, #12]
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001630:	4b04      	ldr	r3, [pc, #16]	@ (8001644 <__NVIC_GetPriorityGrouping+0x18>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	f003 0307 	and.w	r3, r3, #7
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	6039      	str	r1, [r7, #0]
 8001652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001658:	2b00      	cmp	r3, #0
 800165a:	db0a      	blt.n	8001672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	b2da      	uxtb	r2, r3
 8001660:	490c      	ldr	r1, [pc, #48]	@ (8001694 <__NVIC_SetPriority+0x4c>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	0112      	lsls	r2, r2, #4
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	440b      	add	r3, r1
 800166c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001670:	e00a      	b.n	8001688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4908      	ldr	r1, [pc, #32]	@ (8001698 <__NVIC_SetPriority+0x50>)
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	3b04      	subs	r3, #4
 8001680:	0112      	lsls	r2, r2, #4
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	440b      	add	r3, r1
 8001686:	761a      	strb	r2, [r3, #24]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000e100 	.word	0xe000e100
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169c:	b480      	push	{r7}
 800169e:	b089      	sub	sp, #36	@ 0x24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f1c3 0307 	rsb	r3, r3, #7
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	bf28      	it	cs
 80016ba:	2304      	movcs	r3, #4
 80016bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3304      	adds	r3, #4
 80016c2:	2b06      	cmp	r3, #6
 80016c4:	d902      	bls.n	80016cc <NVIC_EncodePriority+0x30>
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3b03      	subs	r3, #3
 80016ca:	e000      	b.n	80016ce <NVIC_EncodePriority+0x32>
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43da      	mvns	r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	401a      	ands	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fa01 f303 	lsl.w	r3, r1, r3
 80016ee:	43d9      	mvns	r1, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	4313      	orrs	r3, r2
         );
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3724      	adds	r7, #36	@ 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001714:	d301      	bcc.n	800171a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001716:	2301      	movs	r3, #1
 8001718:	e00f      	b.n	800173a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171a:	4a0a      	ldr	r2, [pc, #40]	@ (8001744 <SysTick_Config+0x40>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001722:	210f      	movs	r1, #15
 8001724:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001728:	f7ff ff8e 	bl	8001648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800172c:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <SysTick_Config+0x40>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001732:	4b04      	ldr	r3, [pc, #16]	@ (8001744 <SysTick_Config+0x40>)
 8001734:	2207      	movs	r2, #7
 8001736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	e000e010 	.word	0xe000e010

08001748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff ff47 	bl	80015e4 <__NVIC_SetPriorityGrouping>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175e:	b580      	push	{r7, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af00      	add	r7, sp, #0
 8001764:	4603      	mov	r3, r0
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001770:	f7ff ff5c 	bl	800162c <__NVIC_GetPriorityGrouping>
 8001774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	6978      	ldr	r0, [r7, #20]
 800177c:	f7ff ff8e 	bl	800169c <NVIC_EncodePriority>
 8001780:	4602      	mov	r2, r0
 8001782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001786:	4611      	mov	r1, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff5d 	bl	8001648 <__NVIC_SetPriority>
}
 800178e:	bf00      	nop
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ffb0 	bl	8001704 <SysTick_Config>
 80017a4:	4603      	mov	r3, r0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b089      	sub	sp, #36	@ 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	e165      	b.n	8001a98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017cc:	2201      	movs	r2, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	f040 8154 	bne.w	8001a92 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d005      	beq.n	8001802 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d130      	bne.n	8001864 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001838:	2201      	movs	r2, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	f003 0201 	and.w	r2, r3, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	2b03      	cmp	r3, #3
 800186e:	d017      	beq.n	80018a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	2203      	movs	r2, #3
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d123      	bne.n	80018f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	08da      	lsrs	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3208      	adds	r2, #8
 80018b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	220f      	movs	r2, #15
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	08da      	lsrs	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3208      	adds	r2, #8
 80018ee:	69b9      	ldr	r1, [r7, #24]
 80018f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0203 	and.w	r2, r3, #3
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 80ae 	beq.w	8001a92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ab0 <HAL_GPIO_Init+0x300>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ab0 <HAL_GPIO_Init+0x300>)
 8001940:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001944:	6453      	str	r3, [r2, #68]	@ 0x44
 8001946:	4b5a      	ldr	r3, [pc, #360]	@ (8001ab0 <HAL_GPIO_Init+0x300>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001952:	4a58      	ldr	r2, [pc, #352]	@ (8001ab4 <HAL_GPIO_Init+0x304>)
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	3302      	adds	r3, #2
 800195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	220f      	movs	r2, #15
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4f      	ldr	r2, [pc, #316]	@ (8001ab8 <HAL_GPIO_Init+0x308>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d025      	beq.n	80019ca <HAL_GPIO_Init+0x21a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4e      	ldr	r2, [pc, #312]	@ (8001abc <HAL_GPIO_Init+0x30c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d01f      	beq.n	80019c6 <HAL_GPIO_Init+0x216>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a4d      	ldr	r2, [pc, #308]	@ (8001ac0 <HAL_GPIO_Init+0x310>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d019      	beq.n	80019c2 <HAL_GPIO_Init+0x212>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a4c      	ldr	r2, [pc, #304]	@ (8001ac4 <HAL_GPIO_Init+0x314>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d013      	beq.n	80019be <HAL_GPIO_Init+0x20e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a4b      	ldr	r2, [pc, #300]	@ (8001ac8 <HAL_GPIO_Init+0x318>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d00d      	beq.n	80019ba <HAL_GPIO_Init+0x20a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4a      	ldr	r2, [pc, #296]	@ (8001acc <HAL_GPIO_Init+0x31c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d007      	beq.n	80019b6 <HAL_GPIO_Init+0x206>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a49      	ldr	r2, [pc, #292]	@ (8001ad0 <HAL_GPIO_Init+0x320>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d101      	bne.n	80019b2 <HAL_GPIO_Init+0x202>
 80019ae:	2306      	movs	r3, #6
 80019b0:	e00c      	b.n	80019cc <HAL_GPIO_Init+0x21c>
 80019b2:	2307      	movs	r3, #7
 80019b4:	e00a      	b.n	80019cc <HAL_GPIO_Init+0x21c>
 80019b6:	2305      	movs	r3, #5
 80019b8:	e008      	b.n	80019cc <HAL_GPIO_Init+0x21c>
 80019ba:	2304      	movs	r3, #4
 80019bc:	e006      	b.n	80019cc <HAL_GPIO_Init+0x21c>
 80019be:	2303      	movs	r3, #3
 80019c0:	e004      	b.n	80019cc <HAL_GPIO_Init+0x21c>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e002      	b.n	80019cc <HAL_GPIO_Init+0x21c>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <HAL_GPIO_Init+0x21c>
 80019ca:	2300      	movs	r3, #0
 80019cc:	69fa      	ldr	r2, [r7, #28]
 80019ce:	f002 0203 	and.w	r2, r2, #3
 80019d2:	0092      	lsls	r2, r2, #2
 80019d4:	4093      	lsls	r3, r2
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019dc:	4935      	ldr	r1, [pc, #212]	@ (8001ab4 <HAL_GPIO_Init+0x304>)
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	089b      	lsrs	r3, r3, #2
 80019e2:	3302      	adds	r3, #2
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ea:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad4 <HAL_GPIO_Init+0x324>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a0e:	4a31      	ldr	r2, [pc, #196]	@ (8001ad4 <HAL_GPIO_Init+0x324>)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a14:	4b2f      	ldr	r3, [pc, #188]	@ (8001ad4 <HAL_GPIO_Init+0x324>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a38:	4a26      	ldr	r2, [pc, #152]	@ (8001ad4 <HAL_GPIO_Init+0x324>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a3e:	4b25      	ldr	r3, [pc, #148]	@ (8001ad4 <HAL_GPIO_Init+0x324>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a62:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad4 <HAL_GPIO_Init+0x324>)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a68:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad4 <HAL_GPIO_Init+0x324>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a8c:	4a11      	ldr	r2, [pc, #68]	@ (8001ad4 <HAL_GPIO_Init+0x324>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3301      	adds	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	2b0f      	cmp	r3, #15
 8001a9c:	f67f ae96 	bls.w	80017cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3724      	adds	r7, #36	@ 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40013800 	.word	0x40013800
 8001ab8:	40020000 	.word	0x40020000
 8001abc:	40020400 	.word	0x40020400
 8001ac0:	40020800 	.word	0x40020800
 8001ac4:	40020c00 	.word	0x40020c00
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40021400 	.word	0x40021400
 8001ad0:	40021800 	.word	0x40021800
 8001ad4:	40013c00 	.word	0x40013c00

08001ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ae8:	787b      	ldrb	r3, [r7, #1]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001af4:	e003      	b.n	8001afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001af6:	887b      	ldrh	r3, [r7, #2]
 8001af8:	041a      	lsls	r2, r3, #16
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	619a      	str	r2, [r3, #24]
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e12b      	b.n	8001d76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d106      	bne.n	8001b38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7fe fe4e 	bl	80007d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2224      	movs	r2, #36	@ 0x24
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0201 	bic.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b70:	f000 fa02 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 8001b74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	4a81      	ldr	r2, [pc, #516]	@ (8001d80 <HAL_I2C_Init+0x274>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d807      	bhi.n	8001b90 <HAL_I2C_Init+0x84>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4a80      	ldr	r2, [pc, #512]	@ (8001d84 <HAL_I2C_Init+0x278>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	bf94      	ite	ls
 8001b88:	2301      	movls	r3, #1
 8001b8a:	2300      	movhi	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	e006      	b.n	8001b9e <HAL_I2C_Init+0x92>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4a7d      	ldr	r2, [pc, #500]	@ (8001d88 <HAL_I2C_Init+0x27c>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	bf94      	ite	ls
 8001b98:	2301      	movls	r3, #1
 8001b9a:	2300      	movhi	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e0e7      	b.n	8001d76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4a78      	ldr	r2, [pc, #480]	@ (8001d8c <HAL_I2C_Init+0x280>)
 8001baa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bae:	0c9b      	lsrs	r3, r3, #18
 8001bb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4a6a      	ldr	r2, [pc, #424]	@ (8001d80 <HAL_I2C_Init+0x274>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d802      	bhi.n	8001be0 <HAL_I2C_Init+0xd4>
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	e009      	b.n	8001bf4 <HAL_I2C_Init+0xe8>
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001be6:	fb02 f303 	mul.w	r3, r2, r3
 8001bea:	4a69      	ldr	r2, [pc, #420]	@ (8001d90 <HAL_I2C_Init+0x284>)
 8001bec:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf0:	099b      	lsrs	r3, r3, #6
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	430b      	orrs	r3, r1
 8001bfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c06:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	495c      	ldr	r1, [pc, #368]	@ (8001d80 <HAL_I2C_Init+0x274>)
 8001c10:	428b      	cmp	r3, r1
 8001c12:	d819      	bhi.n	8001c48 <HAL_I2C_Init+0x13c>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1e59      	subs	r1, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c22:	1c59      	adds	r1, r3, #1
 8001c24:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c28:	400b      	ands	r3, r1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00a      	beq.n	8001c44 <HAL_I2C_Init+0x138>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	1e59      	subs	r1, r3, #1
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c42:	e051      	b.n	8001ce8 <HAL_I2C_Init+0x1dc>
 8001c44:	2304      	movs	r3, #4
 8001c46:	e04f      	b.n	8001ce8 <HAL_I2C_Init+0x1dc>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d111      	bne.n	8001c74 <HAL_I2C_Init+0x168>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1e58      	subs	r0, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6859      	ldr	r1, [r3, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	440b      	add	r3, r1
 8001c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c62:	3301      	adds	r3, #1
 8001c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bf0c      	ite	eq
 8001c6c:	2301      	moveq	r3, #1
 8001c6e:	2300      	movne	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	e012      	b.n	8001c9a <HAL_I2C_Init+0x18e>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	1e58      	subs	r0, r3, #1
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6859      	ldr	r1, [r3, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	0099      	lsls	r1, r3, #2
 8001c84:	440b      	add	r3, r1
 8001c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	bf0c      	ite	eq
 8001c94:	2301      	moveq	r3, #1
 8001c96:	2300      	movne	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_I2C_Init+0x196>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e022      	b.n	8001ce8 <HAL_I2C_Init+0x1dc>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10e      	bne.n	8001cc8 <HAL_I2C_Init+0x1bc>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1e58      	subs	r0, r3, #1
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6859      	ldr	r1, [r3, #4]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	440b      	add	r3, r1
 8001cb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cc6:	e00f      	b.n	8001ce8 <HAL_I2C_Init+0x1dc>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	1e58      	subs	r0, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6859      	ldr	r1, [r3, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	0099      	lsls	r1, r3, #2
 8001cd8:	440b      	add	r3, r1
 8001cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cde:	3301      	adds	r3, #1
 8001ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	6809      	ldr	r1, [r1, #0]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69da      	ldr	r2, [r3, #28]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6911      	ldr	r1, [r2, #16]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	68d2      	ldr	r2, [r2, #12]
 8001d22:	4311      	orrs	r1, r2
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	430b      	orrs	r3, r1
 8001d2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695a      	ldr	r2, [r3, #20]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0201 	orr.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2220      	movs	r2, #32
 8001d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	000186a0 	.word	0x000186a0
 8001d84:	001e847f 	.word	0x001e847f
 8001d88:	003d08ff 	.word	0x003d08ff
 8001d8c:	431bde83 	.word	0x431bde83
 8001d90:	10624dd3 	.word	0x10624dd3

08001d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0cc      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001da8:	4b68      	ldr	r3, [pc, #416]	@ (8001f4c <HAL_RCC_ClockConfig+0x1b8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d90c      	bls.n	8001dd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db6:	4b65      	ldr	r3, [pc, #404]	@ (8001f4c <HAL_RCC_ClockConfig+0x1b8>)
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbe:	4b63      	ldr	r3, [pc, #396]	@ (8001f4c <HAL_RCC_ClockConfig+0x1b8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0b8      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d020      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de8:	4b59      	ldr	r3, [pc, #356]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	4a58      	ldr	r2, [pc, #352]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001dee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001df2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e00:	4b53      	ldr	r3, [pc, #332]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	4a52      	ldr	r2, [pc, #328]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e0c:	4b50      	ldr	r3, [pc, #320]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	494d      	ldr	r1, [pc, #308]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d044      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d107      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e32:	4b47      	ldr	r3, [pc, #284]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d119      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e07f      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d003      	beq.n	8001e52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d107      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e52:	4b3f      	ldr	r3, [pc, #252]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d109      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e06f      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e62:	4b3b      	ldr	r3, [pc, #236]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e067      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e72:	4b37      	ldr	r3, [pc, #220]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f023 0203 	bic.w	r2, r3, #3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4934      	ldr	r1, [pc, #208]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e84:	f7ff f96e 	bl	8001164 <HAL_GetTick>
 8001e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e8c:	f7ff f96a 	bl	8001164 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e04f      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea2:	4b2b      	ldr	r3, [pc, #172]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 020c 	and.w	r2, r3, #12
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d1eb      	bne.n	8001e8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb4:	4b25      	ldr	r3, [pc, #148]	@ (8001f4c <HAL_RCC_ClockConfig+0x1b8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 030f 	and.w	r3, r3, #15
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d20c      	bcs.n	8001edc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec2:	4b22      	ldr	r3, [pc, #136]	@ (8001f4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eca:	4b20      	ldr	r3, [pc, #128]	@ (8001f4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d001      	beq.n	8001edc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e032      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d008      	beq.n	8001efa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee8:	4b19      	ldr	r3, [pc, #100]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	4916      	ldr	r1, [pc, #88]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d009      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f06:	4b12      	ldr	r3, [pc, #72]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	490e      	ldr	r1, [pc, #56]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f1a:	f000 f855 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	4b0b      	ldr	r3, [pc, #44]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	490a      	ldr	r1, [pc, #40]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001f2c:	5ccb      	ldrb	r3, [r1, r3]
 8001f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f32:	4a09      	ldr	r2, [pc, #36]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001f36:	4b09      	ldr	r3, [pc, #36]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff f8ce 	bl	80010dc <HAL_InitTick>

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023c00 	.word	0x40023c00
 8001f50:	40023800 	.word	0x40023800
 8001f54:	080042f4 	.word	0x080042f4
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	20000004 	.word	0x20000004

08001f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f64:	4b03      	ldr	r3, [pc, #12]	@ (8001f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000000 	.word	0x20000000

08001f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f7c:	f7ff fff0 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8001f80:	4602      	mov	r2, r0
 8001f82:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	0a9b      	lsrs	r3, r3, #10
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	4903      	ldr	r1, [pc, #12]	@ (8001f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f8e:	5ccb      	ldrb	r3, [r1, r3]
 8001f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	08004304 	.word	0x08004304

08001fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fa4:	f7ff ffdc 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	0b5b      	lsrs	r3, r3, #13
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	4903      	ldr	r1, [pc, #12]	@ (8001fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fb6:	5ccb      	ldrb	r3, [r1, r3]
 8001fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	08004304 	.word	0x08004304

08001fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fcc:	b0ae      	sub	sp, #184	@ 0xb8
 8001fce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fee:	4bcb      	ldr	r3, [pc, #812]	@ (800231c <HAL_RCC_GetSysClockFreq+0x354>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
 8001ff6:	2b0c      	cmp	r3, #12
 8001ff8:	f200 8206 	bhi.w	8002408 <HAL_RCC_GetSysClockFreq+0x440>
 8001ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8002004 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002002:	bf00      	nop
 8002004:	08002039 	.word	0x08002039
 8002008:	08002409 	.word	0x08002409
 800200c:	08002409 	.word	0x08002409
 8002010:	08002409 	.word	0x08002409
 8002014:	08002041 	.word	0x08002041
 8002018:	08002409 	.word	0x08002409
 800201c:	08002409 	.word	0x08002409
 8002020:	08002409 	.word	0x08002409
 8002024:	08002049 	.word	0x08002049
 8002028:	08002409 	.word	0x08002409
 800202c:	08002409 	.word	0x08002409
 8002030:	08002409 	.word	0x08002409
 8002034:	08002239 	.word	0x08002239
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002038:	4bb9      	ldr	r3, [pc, #740]	@ (8002320 <HAL_RCC_GetSysClockFreq+0x358>)
 800203a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800203e:	e1e7      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002040:	4bb8      	ldr	r3, [pc, #736]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002042:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002046:	e1e3      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002048:	4bb4      	ldr	r3, [pc, #720]	@ (800231c <HAL_RCC_GetSysClockFreq+0x354>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002050:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002054:	4bb1      	ldr	r3, [pc, #708]	@ (800231c <HAL_RCC_GetSysClockFreq+0x354>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d071      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002060:	4bae      	ldr	r3, [pc, #696]	@ (800231c <HAL_RCC_GetSysClockFreq+0x354>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	099b      	lsrs	r3, r3, #6
 8002066:	2200      	movs	r2, #0
 8002068:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800206c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002070:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002078:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002082:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002086:	4622      	mov	r2, r4
 8002088:	462b      	mov	r3, r5
 800208a:	f04f 0000 	mov.w	r0, #0
 800208e:	f04f 0100 	mov.w	r1, #0
 8002092:	0159      	lsls	r1, r3, #5
 8002094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002098:	0150      	lsls	r0, r2, #5
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4621      	mov	r1, r4
 80020a0:	1a51      	subs	r1, r2, r1
 80020a2:	6439      	str	r1, [r7, #64]	@ 0x40
 80020a4:	4629      	mov	r1, r5
 80020a6:	eb63 0301 	sbc.w	r3, r3, r1
 80020aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80020b8:	4649      	mov	r1, r9
 80020ba:	018b      	lsls	r3, r1, #6
 80020bc:	4641      	mov	r1, r8
 80020be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020c2:	4641      	mov	r1, r8
 80020c4:	018a      	lsls	r2, r1, #6
 80020c6:	4641      	mov	r1, r8
 80020c8:	1a51      	subs	r1, r2, r1
 80020ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80020cc:	4649      	mov	r1, r9
 80020ce:	eb63 0301 	sbc.w	r3, r3, r1
 80020d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80020e0:	4649      	mov	r1, r9
 80020e2:	00cb      	lsls	r3, r1, #3
 80020e4:	4641      	mov	r1, r8
 80020e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020ea:	4641      	mov	r1, r8
 80020ec:	00ca      	lsls	r2, r1, #3
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	4603      	mov	r3, r0
 80020f4:	4622      	mov	r2, r4
 80020f6:	189b      	adds	r3, r3, r2
 80020f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80020fa:	462b      	mov	r3, r5
 80020fc:	460a      	mov	r2, r1
 80020fe:	eb42 0303 	adc.w	r3, r2, r3
 8002102:	637b      	str	r3, [r7, #52]	@ 0x34
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002110:	4629      	mov	r1, r5
 8002112:	024b      	lsls	r3, r1, #9
 8002114:	4621      	mov	r1, r4
 8002116:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800211a:	4621      	mov	r1, r4
 800211c:	024a      	lsls	r2, r1, #9
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002126:	2200      	movs	r2, #0
 8002128:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800212c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002130:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002134:	f7fe f8bc 	bl	80002b0 <__aeabi_uldivmod>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4613      	mov	r3, r2
 800213e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002142:	e067      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002144:	4b75      	ldr	r3, [pc, #468]	@ (800231c <HAL_RCC_GetSysClockFreq+0x354>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	099b      	lsrs	r3, r3, #6
 800214a:	2200      	movs	r2, #0
 800214c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002150:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002154:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800215c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800215e:	2300      	movs	r3, #0
 8002160:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002162:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002166:	4622      	mov	r2, r4
 8002168:	462b      	mov	r3, r5
 800216a:	f04f 0000 	mov.w	r0, #0
 800216e:	f04f 0100 	mov.w	r1, #0
 8002172:	0159      	lsls	r1, r3, #5
 8002174:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002178:	0150      	lsls	r0, r2, #5
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4621      	mov	r1, r4
 8002180:	1a51      	subs	r1, r2, r1
 8002182:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002184:	4629      	mov	r1, r5
 8002186:	eb63 0301 	sbc.w	r3, r3, r1
 800218a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002198:	4649      	mov	r1, r9
 800219a:	018b      	lsls	r3, r1, #6
 800219c:	4641      	mov	r1, r8
 800219e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021a2:	4641      	mov	r1, r8
 80021a4:	018a      	lsls	r2, r1, #6
 80021a6:	4641      	mov	r1, r8
 80021a8:	ebb2 0a01 	subs.w	sl, r2, r1
 80021ac:	4649      	mov	r1, r9
 80021ae:	eb63 0b01 	sbc.w	fp, r3, r1
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021c6:	4692      	mov	sl, r2
 80021c8:	469b      	mov	fp, r3
 80021ca:	4623      	mov	r3, r4
 80021cc:	eb1a 0303 	adds.w	r3, sl, r3
 80021d0:	623b      	str	r3, [r7, #32]
 80021d2:	462b      	mov	r3, r5
 80021d4:	eb4b 0303 	adc.w	r3, fp, r3
 80021d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80021e6:	4629      	mov	r1, r5
 80021e8:	028b      	lsls	r3, r1, #10
 80021ea:	4621      	mov	r1, r4
 80021ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021f0:	4621      	mov	r1, r4
 80021f2:	028a      	lsls	r2, r1, #10
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021fc:	2200      	movs	r2, #0
 80021fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8002200:	677a      	str	r2, [r7, #116]	@ 0x74
 8002202:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002206:	f7fe f853 	bl	80002b0 <__aeabi_uldivmod>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4613      	mov	r3, r2
 8002210:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002214:	4b41      	ldr	r3, [pc, #260]	@ (800231c <HAL_RCC_GetSysClockFreq+0x354>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	0c1b      	lsrs	r3, r3, #16
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	3301      	adds	r3, #1
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002226:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800222a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800222e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002232:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002236:	e0eb      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002238:	4b38      	ldr	r3, [pc, #224]	@ (800231c <HAL_RCC_GetSysClockFreq+0x354>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002240:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002244:	4b35      	ldr	r3, [pc, #212]	@ (800231c <HAL_RCC_GetSysClockFreq+0x354>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d06b      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002250:	4b32      	ldr	r3, [pc, #200]	@ (800231c <HAL_RCC_GetSysClockFreq+0x354>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	099b      	lsrs	r3, r3, #6
 8002256:	2200      	movs	r2, #0
 8002258:	66bb      	str	r3, [r7, #104]	@ 0x68
 800225a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800225c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800225e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002262:	663b      	str	r3, [r7, #96]	@ 0x60
 8002264:	2300      	movs	r3, #0
 8002266:	667b      	str	r3, [r7, #100]	@ 0x64
 8002268:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800226c:	4622      	mov	r2, r4
 800226e:	462b      	mov	r3, r5
 8002270:	f04f 0000 	mov.w	r0, #0
 8002274:	f04f 0100 	mov.w	r1, #0
 8002278:	0159      	lsls	r1, r3, #5
 800227a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800227e:	0150      	lsls	r0, r2, #5
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4621      	mov	r1, r4
 8002286:	1a51      	subs	r1, r2, r1
 8002288:	61b9      	str	r1, [r7, #24]
 800228a:	4629      	mov	r1, r5
 800228c:	eb63 0301 	sbc.w	r3, r3, r1
 8002290:	61fb      	str	r3, [r7, #28]
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	f04f 0300 	mov.w	r3, #0
 800229a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800229e:	4659      	mov	r1, fp
 80022a0:	018b      	lsls	r3, r1, #6
 80022a2:	4651      	mov	r1, sl
 80022a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022a8:	4651      	mov	r1, sl
 80022aa:	018a      	lsls	r2, r1, #6
 80022ac:	4651      	mov	r1, sl
 80022ae:	ebb2 0801 	subs.w	r8, r2, r1
 80022b2:	4659      	mov	r1, fp
 80022b4:	eb63 0901 	sbc.w	r9, r3, r1
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022cc:	4690      	mov	r8, r2
 80022ce:	4699      	mov	r9, r3
 80022d0:	4623      	mov	r3, r4
 80022d2:	eb18 0303 	adds.w	r3, r8, r3
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	462b      	mov	r3, r5
 80022da:	eb49 0303 	adc.w	r3, r9, r3
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80022ec:	4629      	mov	r1, r5
 80022ee:	024b      	lsls	r3, r1, #9
 80022f0:	4621      	mov	r1, r4
 80022f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022f6:	4621      	mov	r1, r4
 80022f8:	024a      	lsls	r2, r1, #9
 80022fa:	4610      	mov	r0, r2
 80022fc:	4619      	mov	r1, r3
 80022fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002302:	2200      	movs	r2, #0
 8002304:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002306:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002308:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800230c:	f7fd ffd0 	bl	80002b0 <__aeabi_uldivmod>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4613      	mov	r3, r2
 8002316:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800231a:	e065      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x420>
 800231c:	40023800 	.word	0x40023800
 8002320:	00f42400 	.word	0x00f42400
 8002324:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002328:	4b3d      	ldr	r3, [pc, #244]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x458>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	099b      	lsrs	r3, r3, #6
 800232e:	2200      	movs	r2, #0
 8002330:	4618      	mov	r0, r3
 8002332:	4611      	mov	r1, r2
 8002334:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002338:	653b      	str	r3, [r7, #80]	@ 0x50
 800233a:	2300      	movs	r3, #0
 800233c:	657b      	str	r3, [r7, #84]	@ 0x54
 800233e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002342:	4642      	mov	r2, r8
 8002344:	464b      	mov	r3, r9
 8002346:	f04f 0000 	mov.w	r0, #0
 800234a:	f04f 0100 	mov.w	r1, #0
 800234e:	0159      	lsls	r1, r3, #5
 8002350:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002354:	0150      	lsls	r0, r2, #5
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4641      	mov	r1, r8
 800235c:	1a51      	subs	r1, r2, r1
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	4649      	mov	r1, r9
 8002362:	eb63 0301 	sbc.w	r3, r3, r1
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	f04f 0300 	mov.w	r3, #0
 8002370:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002374:	4659      	mov	r1, fp
 8002376:	018b      	lsls	r3, r1, #6
 8002378:	4651      	mov	r1, sl
 800237a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800237e:	4651      	mov	r1, sl
 8002380:	018a      	lsls	r2, r1, #6
 8002382:	4651      	mov	r1, sl
 8002384:	1a54      	subs	r4, r2, r1
 8002386:	4659      	mov	r1, fp
 8002388:	eb63 0501 	sbc.w	r5, r3, r1
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	00eb      	lsls	r3, r5, #3
 8002396:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800239a:	00e2      	lsls	r2, r4, #3
 800239c:	4614      	mov	r4, r2
 800239e:	461d      	mov	r5, r3
 80023a0:	4643      	mov	r3, r8
 80023a2:	18e3      	adds	r3, r4, r3
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	464b      	mov	r3, r9
 80023a8:	eb45 0303 	adc.w	r3, r5, r3
 80023ac:	607b      	str	r3, [r7, #4]
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ba:	4629      	mov	r1, r5
 80023bc:	028b      	lsls	r3, r1, #10
 80023be:	4621      	mov	r1, r4
 80023c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023c4:	4621      	mov	r1, r4
 80023c6:	028a      	lsls	r2, r1, #10
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023d0:	2200      	movs	r2, #0
 80023d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023d4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80023d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80023da:	f7fd ff69 	bl	80002b0 <__aeabi_uldivmod>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4613      	mov	r3, r2
 80023e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80023e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x458>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	0f1b      	lsrs	r3, r3, #28
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80023f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80023fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002402:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002406:	e003      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002408:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x45c>)
 800240a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800240e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002410:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002414:	4618      	mov	r0, r3
 8002416:	37b8      	adds	r7, #184	@ 0xb8
 8002418:	46bd      	mov	sp, r7
 800241a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
 8002424:	00f42400 	.word	0x00f42400

08002428 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e28d      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 8083 	beq.w	800254e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002448:	4b94      	ldr	r3, [pc, #592]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 030c 	and.w	r3, r3, #12
 8002450:	2b04      	cmp	r3, #4
 8002452:	d019      	beq.n	8002488 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002454:	4b91      	ldr	r3, [pc, #580]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 030c 	and.w	r3, r3, #12
        || \
 800245c:	2b08      	cmp	r3, #8
 800245e:	d106      	bne.n	800246e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002460:	4b8e      	ldr	r3, [pc, #568]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002468:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800246c:	d00c      	beq.n	8002488 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800246e:	4b8b      	ldr	r3, [pc, #556]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002476:	2b0c      	cmp	r3, #12
 8002478:	d112      	bne.n	80024a0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247a:	4b88      	ldr	r3, [pc, #544]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002482:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002486:	d10b      	bne.n	80024a0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002488:	4b84      	ldr	r3, [pc, #528]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d05b      	beq.n	800254c <HAL_RCC_OscConfig+0x124>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d157      	bne.n	800254c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e25a      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a8:	d106      	bne.n	80024b8 <HAL_RCC_OscConfig+0x90>
 80024aa:	4b7c      	ldr	r3, [pc, #496]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a7b      	ldr	r2, [pc, #492]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80024b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e01d      	b.n	80024f4 <HAL_RCC_OscConfig+0xcc>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024c0:	d10c      	bne.n	80024dc <HAL_RCC_OscConfig+0xb4>
 80024c2:	4b76      	ldr	r3, [pc, #472]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a75      	ldr	r2, [pc, #468]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80024c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	4b73      	ldr	r3, [pc, #460]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a72      	ldr	r2, [pc, #456]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	e00b      	b.n	80024f4 <HAL_RCC_OscConfig+0xcc>
 80024dc:	4b6f      	ldr	r3, [pc, #444]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a6e      	ldr	r2, [pc, #440]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80024e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	4b6c      	ldr	r3, [pc, #432]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a6b      	ldr	r2, [pc, #428]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80024ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d013      	beq.n	8002524 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7fe fe32 	bl	8001164 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002504:	f7fe fe2e 	bl	8001164 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	@ 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e21f      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002516:	4b61      	ldr	r3, [pc, #388]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0xdc>
 8002522:	e014      	b.n	800254e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7fe fe1e 	bl	8001164 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800252c:	f7fe fe1a 	bl	8001164 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b64      	cmp	r3, #100	@ 0x64
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e20b      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253e:	4b57      	ldr	r3, [pc, #348]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x104>
 800254a:	e000      	b.n	800254e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d06f      	beq.n	800263a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800255a:	4b50      	ldr	r3, [pc, #320]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b00      	cmp	r3, #0
 8002564:	d017      	beq.n	8002596 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002566:	4b4d      	ldr	r3, [pc, #308]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
        || \
 800256e:	2b08      	cmp	r3, #8
 8002570:	d105      	bne.n	800257e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002572:	4b4a      	ldr	r3, [pc, #296]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00b      	beq.n	8002596 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800257e:	4b47      	ldr	r3, [pc, #284]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002586:	2b0c      	cmp	r3, #12
 8002588:	d11c      	bne.n	80025c4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800258a:	4b44      	ldr	r3, [pc, #272]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d116      	bne.n	80025c4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002596:	4b41      	ldr	r3, [pc, #260]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d005      	beq.n	80025ae <HAL_RCC_OscConfig+0x186>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d001      	beq.n	80025ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e1d3      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ae:	4b3b      	ldr	r3, [pc, #236]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	4937      	ldr	r1, [pc, #220]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c2:	e03a      	b.n	800263a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d020      	beq.n	800260e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025cc:	4b34      	ldr	r3, [pc, #208]	@ (80026a0 <HAL_RCC_OscConfig+0x278>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d2:	f7fe fdc7 	bl	8001164 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025da:	f7fe fdc3 	bl	8001164 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e1b4      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ec:	4b2b      	ldr	r3, [pc, #172]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0f0      	beq.n	80025da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f8:	4b28      	ldr	r3, [pc, #160]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	4925      	ldr	r1, [pc, #148]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 8002608:	4313      	orrs	r3, r2
 800260a:	600b      	str	r3, [r1, #0]
 800260c:	e015      	b.n	800263a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800260e:	4b24      	ldr	r3, [pc, #144]	@ (80026a0 <HAL_RCC_OscConfig+0x278>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7fe fda6 	bl	8001164 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261c:	f7fe fda2 	bl	8001164 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e193      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262e:	4b1b      	ldr	r3, [pc, #108]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d036      	beq.n	80026b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d016      	beq.n	800267c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800264e:	4b15      	ldr	r3, [pc, #84]	@ (80026a4 <HAL_RCC_OscConfig+0x27c>)
 8002650:	2201      	movs	r2, #1
 8002652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002654:	f7fe fd86 	bl	8001164 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800265c:	f7fe fd82 	bl	8001164 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e173      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266e:	4b0b      	ldr	r3, [pc, #44]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 8002670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x234>
 800267a:	e01b      	b.n	80026b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800267c:	4b09      	ldr	r3, [pc, #36]	@ (80026a4 <HAL_RCC_OscConfig+0x27c>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002682:	f7fe fd6f 	bl	8001164 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002688:	e00e      	b.n	80026a8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800268a:	f7fe fd6b 	bl	8001164 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d907      	bls.n	80026a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e15c      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
 800269c:	40023800 	.word	0x40023800
 80026a0:	42470000 	.word	0x42470000
 80026a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a8:	4b8a      	ldr	r3, [pc, #552]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 80026aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1ea      	bne.n	800268a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 8097 	beq.w	80027f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c2:	2300      	movs	r3, #0
 80026c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026c6:	4b83      	ldr	r3, [pc, #524]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10f      	bne.n	80026f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	4b7f      	ldr	r3, [pc, #508]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026da:	4a7e      	ldr	r2, [pc, #504]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 80026dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80026e2:	4b7c      	ldr	r3, [pc, #496]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ee:	2301      	movs	r3, #1
 80026f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f2:	4b79      	ldr	r3, [pc, #484]	@ (80028d8 <HAL_RCC_OscConfig+0x4b0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d118      	bne.n	8002730 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026fe:	4b76      	ldr	r3, [pc, #472]	@ (80028d8 <HAL_RCC_OscConfig+0x4b0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a75      	ldr	r2, [pc, #468]	@ (80028d8 <HAL_RCC_OscConfig+0x4b0>)
 8002704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800270a:	f7fe fd2b 	bl	8001164 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002712:	f7fe fd27 	bl	8001164 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e118      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002724:	4b6c      	ldr	r3, [pc, #432]	@ (80028d8 <HAL_RCC_OscConfig+0x4b0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d106      	bne.n	8002746 <HAL_RCC_OscConfig+0x31e>
 8002738:	4b66      	ldr	r3, [pc, #408]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800273c:	4a65      	ldr	r2, [pc, #404]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6713      	str	r3, [r2, #112]	@ 0x70
 8002744:	e01c      	b.n	8002780 <HAL_RCC_OscConfig+0x358>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b05      	cmp	r3, #5
 800274c:	d10c      	bne.n	8002768 <HAL_RCC_OscConfig+0x340>
 800274e:	4b61      	ldr	r3, [pc, #388]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002752:	4a60      	ldr	r2, [pc, #384]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 8002754:	f043 0304 	orr.w	r3, r3, #4
 8002758:	6713      	str	r3, [r2, #112]	@ 0x70
 800275a:	4b5e      	ldr	r3, [pc, #376]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275e:	4a5d      	ldr	r2, [pc, #372]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6713      	str	r3, [r2, #112]	@ 0x70
 8002766:	e00b      	b.n	8002780 <HAL_RCC_OscConfig+0x358>
 8002768:	4b5a      	ldr	r3, [pc, #360]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276c:	4a59      	ldr	r2, [pc, #356]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 800276e:	f023 0301 	bic.w	r3, r3, #1
 8002772:	6713      	str	r3, [r2, #112]	@ 0x70
 8002774:	4b57      	ldr	r3, [pc, #348]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002778:	4a56      	ldr	r2, [pc, #344]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 800277a:	f023 0304 	bic.w	r3, r3, #4
 800277e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d015      	beq.n	80027b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002788:	f7fe fcec 	bl	8001164 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278e:	e00a      	b.n	80027a6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002790:	f7fe fce8 	bl	8001164 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e0d7      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a6:	4b4b      	ldr	r3, [pc, #300]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0ee      	beq.n	8002790 <HAL_RCC_OscConfig+0x368>
 80027b2:	e014      	b.n	80027de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b4:	f7fe fcd6 	bl	8001164 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ba:	e00a      	b.n	80027d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027bc:	f7fe fcd2 	bl	8001164 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e0c1      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d2:	4b40      	ldr	r3, [pc, #256]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1ee      	bne.n	80027bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027de:	7dfb      	ldrb	r3, [r7, #23]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d105      	bne.n	80027f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e4:	4b3b      	ldr	r3, [pc, #236]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 80027e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e8:	4a3a      	ldr	r2, [pc, #232]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 80027ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 80ad 	beq.w	8002954 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027fa:	4b36      	ldr	r3, [pc, #216]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b08      	cmp	r3, #8
 8002804:	d060      	beq.n	80028c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	2b02      	cmp	r3, #2
 800280c:	d145      	bne.n	800289a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280e:	4b33      	ldr	r3, [pc, #204]	@ (80028dc <HAL_RCC_OscConfig+0x4b4>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7fe fca6 	bl	8001164 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281c:	f7fe fca2 	bl	8001164 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e093      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282e:	4b29      	ldr	r3, [pc, #164]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69da      	ldr	r2, [r3, #28]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002848:	019b      	lsls	r3, r3, #6
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002850:	085b      	lsrs	r3, r3, #1
 8002852:	3b01      	subs	r3, #1
 8002854:	041b      	lsls	r3, r3, #16
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285c:	061b      	lsls	r3, r3, #24
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002864:	071b      	lsls	r3, r3, #28
 8002866:	491b      	ldr	r1, [pc, #108]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800286c:	4b1b      	ldr	r3, [pc, #108]	@ (80028dc <HAL_RCC_OscConfig+0x4b4>)
 800286e:	2201      	movs	r2, #1
 8002870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002872:	f7fe fc77 	bl	8001164 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287a:	f7fe fc73 	bl	8001164 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e064      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288c:	4b11      	ldr	r3, [pc, #68]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x452>
 8002898:	e05c      	b.n	8002954 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289a:	4b10      	ldr	r3, [pc, #64]	@ (80028dc <HAL_RCC_OscConfig+0x4b4>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7fe fc60 	bl	8001164 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a8:	f7fe fc5c 	bl	8001164 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e04d      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ba:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x480>
 80028c6:	e045      	b.n	8002954 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d107      	bne.n	80028e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e040      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40007000 	.word	0x40007000
 80028dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002960 <HAL_RCC_OscConfig+0x538>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d030      	beq.n	8002950 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d129      	bne.n	8002950 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002906:	429a      	cmp	r2, r3
 8002908:	d122      	bne.n	8002950 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002910:	4013      	ands	r3, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002916:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002918:	4293      	cmp	r3, r2
 800291a:	d119      	bne.n	8002950 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002926:	085b      	lsrs	r3, r3, #1
 8002928:	3b01      	subs	r3, #1
 800292a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800292c:	429a      	cmp	r2, r3
 800292e:	d10f      	bne.n	8002950 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d107      	bne.n	8002950 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800294c:	429a      	cmp	r2, r3
 800294e:	d001      	beq.n	8002954 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800

08002964 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e042      	b.n	80029fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fe fade 	bl	8000f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2224      	movs	r2, #36	@ 0x24
 8002994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f973 	bl	8002c94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08a      	sub	sp, #40	@ 0x28
 8002a08:	af02      	add	r7, sp, #8
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	4613      	mov	r3, r2
 8002a12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b20      	cmp	r3, #32
 8002a22:	d175      	bne.n	8002b10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <HAL_UART_Transmit+0x2c>
 8002a2a:	88fb      	ldrh	r3, [r7, #6]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e06e      	b.n	8002b12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2221      	movs	r2, #33	@ 0x21
 8002a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a42:	f7fe fb8f 	bl	8001164 <HAL_GetTick>
 8002a46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	88fa      	ldrh	r2, [r7, #6]
 8002a4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	88fa      	ldrh	r2, [r7, #6]
 8002a52:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a5c:	d108      	bne.n	8002a70 <HAL_UART_Transmit+0x6c>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d104      	bne.n	8002a70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	e003      	b.n	8002a78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a78:	e02e      	b.n	8002ad8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2200      	movs	r2, #0
 8002a82:	2180      	movs	r1, #128	@ 0x80
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f848 	bl	8002b1a <UART_WaitOnFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e03a      	b.n	8002b12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10b      	bne.n	8002aba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ab0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	3302      	adds	r3, #2
 8002ab6:	61bb      	str	r3, [r7, #24]
 8002ab8:	e007      	b.n	8002aca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	781a      	ldrb	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1cb      	bne.n	8002a7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2140      	movs	r1, #64	@ 0x40
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f814 	bl	8002b1a <UART_WaitOnFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e006      	b.n	8002b12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	e000      	b.n	8002b12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002b10:	2302      	movs	r3, #2
  }
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3720      	adds	r7, #32
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b086      	sub	sp, #24
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	603b      	str	r3, [r7, #0]
 8002b26:	4613      	mov	r3, r2
 8002b28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b2a:	e03b      	b.n	8002ba4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b32:	d037      	beq.n	8002ba4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b34:	f7fe fb16 	bl	8001164 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	6a3a      	ldr	r2, [r7, #32]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d302      	bcc.n	8002b4a <UART_WaitOnFlagUntilTimeout+0x30>
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e03a      	b.n	8002bc4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d023      	beq.n	8002ba4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b80      	cmp	r3, #128	@ 0x80
 8002b60:	d020      	beq.n	8002ba4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b40      	cmp	r3, #64	@ 0x40
 8002b66:	d01d      	beq.n	8002ba4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d116      	bne.n	8002ba4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 f81d 	bl	8002bcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2208      	movs	r2, #8
 8002b96:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e00f      	b.n	8002bc4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	4013      	ands	r3, r2
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	bf0c      	ite	eq
 8002bb4:	2301      	moveq	r3, #1
 8002bb6:	2300      	movne	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d0b4      	beq.n	8002b2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b095      	sub	sp, #84	@ 0x54
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	330c      	adds	r3, #12
 8002bda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bde:	e853 3f00 	ldrex	r3, [r3]
 8002be2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	330c      	adds	r3, #12
 8002bf2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bf4:	643a      	str	r2, [r7, #64]	@ 0x40
 8002bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002bfa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002bfc:	e841 2300 	strex	r3, r2, [r1]
 8002c00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1e5      	bne.n	8002bd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	3314      	adds	r3, #20
 8002c0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	e853 3f00 	ldrex	r3, [r3]
 8002c16:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	3314      	adds	r3, #20
 8002c26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c30:	e841 2300 	strex	r3, r2, [r1]
 8002c34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1e5      	bne.n	8002c08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d119      	bne.n	8002c78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	330c      	adds	r3, #12
 8002c4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	e853 3f00 	ldrex	r3, [r3]
 8002c52:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f023 0310 	bic.w	r3, r3, #16
 8002c5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	330c      	adds	r3, #12
 8002c62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c64:	61ba      	str	r2, [r7, #24]
 8002c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c68:	6979      	ldr	r1, [r7, #20]
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	e841 2300 	strex	r3, r2, [r1]
 8002c70:	613b      	str	r3, [r7, #16]
   return(result);
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1e5      	bne.n	8002c44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002c86:	bf00      	nop
 8002c88:	3754      	adds	r7, #84	@ 0x54
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
	...

08002c94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c98:	b0c0      	sub	sp, #256	@ 0x100
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cb0:	68d9      	ldr	r1, [r3, #12]
 8002cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	ea40 0301 	orr.w	r3, r0, r1
 8002cbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002cec:	f021 010c 	bic.w	r1, r1, #12
 8002cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002cfa:	430b      	orrs	r3, r1
 8002cfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d0e:	6999      	ldr	r1, [r3, #24]
 8002d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	ea40 0301 	orr.w	r3, r0, r1
 8002d1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	4b8f      	ldr	r3, [pc, #572]	@ (8002f60 <UART_SetConfig+0x2cc>)
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d005      	beq.n	8002d34 <UART_SetConfig+0xa0>
 8002d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	4b8d      	ldr	r3, [pc, #564]	@ (8002f64 <UART_SetConfig+0x2d0>)
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d104      	bne.n	8002d3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d34:	f7ff f934 	bl	8001fa0 <HAL_RCC_GetPCLK2Freq>
 8002d38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002d3c:	e003      	b.n	8002d46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d3e:	f7ff f91b 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 8002d42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d50:	f040 810c 	bne.w	8002f6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002d62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002d66:	4622      	mov	r2, r4
 8002d68:	462b      	mov	r3, r5
 8002d6a:	1891      	adds	r1, r2, r2
 8002d6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002d6e:	415b      	adcs	r3, r3
 8002d70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d76:	4621      	mov	r1, r4
 8002d78:	eb12 0801 	adds.w	r8, r2, r1
 8002d7c:	4629      	mov	r1, r5
 8002d7e:	eb43 0901 	adc.w	r9, r3, r1
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d96:	4690      	mov	r8, r2
 8002d98:	4699      	mov	r9, r3
 8002d9a:	4623      	mov	r3, r4
 8002d9c:	eb18 0303 	adds.w	r3, r8, r3
 8002da0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002da4:	462b      	mov	r3, r5
 8002da6:	eb49 0303 	adc.w	r3, r9, r3
 8002daa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002dba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002dbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	18db      	adds	r3, r3, r3
 8002dc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dc8:	4613      	mov	r3, r2
 8002dca:	eb42 0303 	adc.w	r3, r2, r3
 8002dce:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002dd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002dd8:	f7fd fa6a 	bl	80002b0 <__aeabi_uldivmod>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4b61      	ldr	r3, [pc, #388]	@ (8002f68 <UART_SetConfig+0x2d4>)
 8002de2:	fba3 2302 	umull	r2, r3, r3, r2
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	011c      	lsls	r4, r3, #4
 8002dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dee:	2200      	movs	r2, #0
 8002df0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002df4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002df8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002dfc:	4642      	mov	r2, r8
 8002dfe:	464b      	mov	r3, r9
 8002e00:	1891      	adds	r1, r2, r2
 8002e02:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002e04:	415b      	adcs	r3, r3
 8002e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e0c:	4641      	mov	r1, r8
 8002e0e:	eb12 0a01 	adds.w	sl, r2, r1
 8002e12:	4649      	mov	r1, r9
 8002e14:	eb43 0b01 	adc.w	fp, r3, r1
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e2c:	4692      	mov	sl, r2
 8002e2e:	469b      	mov	fp, r3
 8002e30:	4643      	mov	r3, r8
 8002e32:	eb1a 0303 	adds.w	r3, sl, r3
 8002e36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e3a:	464b      	mov	r3, r9
 8002e3c:	eb4b 0303 	adc.w	r3, fp, r3
 8002e40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	18db      	adds	r3, r3, r3
 8002e5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e5e:	4613      	mov	r3, r2
 8002e60:	eb42 0303 	adc.w	r3, r2, r3
 8002e64:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002e6e:	f7fd fa1f 	bl	80002b0 <__aeabi_uldivmod>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4611      	mov	r1, r2
 8002e78:	4b3b      	ldr	r3, [pc, #236]	@ (8002f68 <UART_SetConfig+0x2d4>)
 8002e7a:	fba3 2301 	umull	r2, r3, r3, r1
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	2264      	movs	r2, #100	@ 0x64
 8002e82:	fb02 f303 	mul.w	r3, r2, r3
 8002e86:	1acb      	subs	r3, r1, r3
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002e8e:	4b36      	ldr	r3, [pc, #216]	@ (8002f68 <UART_SetConfig+0x2d4>)
 8002e90:	fba3 2302 	umull	r2, r3, r3, r2
 8002e94:	095b      	lsrs	r3, r3, #5
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002e9c:	441c      	add	r4, r3
 8002e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ea8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002eac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002eb0:	4642      	mov	r2, r8
 8002eb2:	464b      	mov	r3, r9
 8002eb4:	1891      	adds	r1, r2, r2
 8002eb6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002eb8:	415b      	adcs	r3, r3
 8002eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ebc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ec0:	4641      	mov	r1, r8
 8002ec2:	1851      	adds	r1, r2, r1
 8002ec4:	6339      	str	r1, [r7, #48]	@ 0x30
 8002ec6:	4649      	mov	r1, r9
 8002ec8:	414b      	adcs	r3, r1
 8002eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ed8:	4659      	mov	r1, fp
 8002eda:	00cb      	lsls	r3, r1, #3
 8002edc:	4651      	mov	r1, sl
 8002ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ee2:	4651      	mov	r1, sl
 8002ee4:	00ca      	lsls	r2, r1, #3
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4603      	mov	r3, r0
 8002eec:	4642      	mov	r2, r8
 8002eee:	189b      	adds	r3, r3, r2
 8002ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ef4:	464b      	mov	r3, r9
 8002ef6:	460a      	mov	r2, r1
 8002ef8:	eb42 0303 	adc.w	r3, r2, r3
 8002efc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002f0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002f10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f14:	460b      	mov	r3, r1
 8002f16:	18db      	adds	r3, r3, r3
 8002f18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	eb42 0303 	adc.w	r3, r2, r3
 8002f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002f2a:	f7fd f9c1 	bl	80002b0 <__aeabi_uldivmod>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	4b0d      	ldr	r3, [pc, #52]	@ (8002f68 <UART_SetConfig+0x2d4>)
 8002f34:	fba3 1302 	umull	r1, r3, r3, r2
 8002f38:	095b      	lsrs	r3, r3, #5
 8002f3a:	2164      	movs	r1, #100	@ 0x64
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	3332      	adds	r3, #50	@ 0x32
 8002f46:	4a08      	ldr	r2, [pc, #32]	@ (8002f68 <UART_SetConfig+0x2d4>)
 8002f48:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	f003 0207 	and.w	r2, r3, #7
 8002f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4422      	add	r2, r4
 8002f5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f5c:	e106      	b.n	800316c <UART_SetConfig+0x4d8>
 8002f5e:	bf00      	nop
 8002f60:	40011000 	.word	0x40011000
 8002f64:	40011400 	.word	0x40011400
 8002f68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f70:	2200      	movs	r2, #0
 8002f72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f76:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002f7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002f7e:	4642      	mov	r2, r8
 8002f80:	464b      	mov	r3, r9
 8002f82:	1891      	adds	r1, r2, r2
 8002f84:	6239      	str	r1, [r7, #32]
 8002f86:	415b      	adcs	r3, r3
 8002f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f8e:	4641      	mov	r1, r8
 8002f90:	1854      	adds	r4, r2, r1
 8002f92:	4649      	mov	r1, r9
 8002f94:	eb43 0501 	adc.w	r5, r3, r1
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	00eb      	lsls	r3, r5, #3
 8002fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fa6:	00e2      	lsls	r2, r4, #3
 8002fa8:	4614      	mov	r4, r2
 8002faa:	461d      	mov	r5, r3
 8002fac:	4643      	mov	r3, r8
 8002fae:	18e3      	adds	r3, r4, r3
 8002fb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002fb4:	464b      	mov	r3, r9
 8002fb6:	eb45 0303 	adc.w	r3, r5, r3
 8002fba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002fca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002fda:	4629      	mov	r1, r5
 8002fdc:	008b      	lsls	r3, r1, #2
 8002fde:	4621      	mov	r1, r4
 8002fe0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fe4:	4621      	mov	r1, r4
 8002fe6:	008a      	lsls	r2, r1, #2
 8002fe8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002fec:	f7fd f960 	bl	80002b0 <__aeabi_uldivmod>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4b60      	ldr	r3, [pc, #384]	@ (8003178 <UART_SetConfig+0x4e4>)
 8002ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	011c      	lsls	r4, r3, #4
 8002ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003002:	2200      	movs	r2, #0
 8003004:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003008:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800300c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003010:	4642      	mov	r2, r8
 8003012:	464b      	mov	r3, r9
 8003014:	1891      	adds	r1, r2, r2
 8003016:	61b9      	str	r1, [r7, #24]
 8003018:	415b      	adcs	r3, r3
 800301a:	61fb      	str	r3, [r7, #28]
 800301c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003020:	4641      	mov	r1, r8
 8003022:	1851      	adds	r1, r2, r1
 8003024:	6139      	str	r1, [r7, #16]
 8003026:	4649      	mov	r1, r9
 8003028:	414b      	adcs	r3, r1
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003038:	4659      	mov	r1, fp
 800303a:	00cb      	lsls	r3, r1, #3
 800303c:	4651      	mov	r1, sl
 800303e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003042:	4651      	mov	r1, sl
 8003044:	00ca      	lsls	r2, r1, #3
 8003046:	4610      	mov	r0, r2
 8003048:	4619      	mov	r1, r3
 800304a:	4603      	mov	r3, r0
 800304c:	4642      	mov	r2, r8
 800304e:	189b      	adds	r3, r3, r2
 8003050:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003054:	464b      	mov	r3, r9
 8003056:	460a      	mov	r2, r1
 8003058:	eb42 0303 	adc.w	r3, r2, r3
 800305c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	67bb      	str	r3, [r7, #120]	@ 0x78
 800306a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003078:	4649      	mov	r1, r9
 800307a:	008b      	lsls	r3, r1, #2
 800307c:	4641      	mov	r1, r8
 800307e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003082:	4641      	mov	r1, r8
 8003084:	008a      	lsls	r2, r1, #2
 8003086:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800308a:	f7fd f911 	bl	80002b0 <__aeabi_uldivmod>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4611      	mov	r1, r2
 8003094:	4b38      	ldr	r3, [pc, #224]	@ (8003178 <UART_SetConfig+0x4e4>)
 8003096:	fba3 2301 	umull	r2, r3, r3, r1
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	2264      	movs	r2, #100	@ 0x64
 800309e:	fb02 f303 	mul.w	r3, r2, r3
 80030a2:	1acb      	subs	r3, r1, r3
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	3332      	adds	r3, #50	@ 0x32
 80030a8:	4a33      	ldr	r2, [pc, #204]	@ (8003178 <UART_SetConfig+0x4e4>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030b4:	441c      	add	r4, r3
 80030b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030ba:	2200      	movs	r2, #0
 80030bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80030be:	677a      	str	r2, [r7, #116]	@ 0x74
 80030c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80030c4:	4642      	mov	r2, r8
 80030c6:	464b      	mov	r3, r9
 80030c8:	1891      	adds	r1, r2, r2
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	415b      	adcs	r3, r3
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030d4:	4641      	mov	r1, r8
 80030d6:	1851      	adds	r1, r2, r1
 80030d8:	6039      	str	r1, [r7, #0]
 80030da:	4649      	mov	r1, r9
 80030dc:	414b      	adcs	r3, r1
 80030de:	607b      	str	r3, [r7, #4]
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030ec:	4659      	mov	r1, fp
 80030ee:	00cb      	lsls	r3, r1, #3
 80030f0:	4651      	mov	r1, sl
 80030f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030f6:	4651      	mov	r1, sl
 80030f8:	00ca      	lsls	r2, r1, #3
 80030fa:	4610      	mov	r0, r2
 80030fc:	4619      	mov	r1, r3
 80030fe:	4603      	mov	r3, r0
 8003100:	4642      	mov	r2, r8
 8003102:	189b      	adds	r3, r3, r2
 8003104:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003106:	464b      	mov	r3, r9
 8003108:	460a      	mov	r2, r1
 800310a:	eb42 0303 	adc.w	r3, r2, r3
 800310e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	663b      	str	r3, [r7, #96]	@ 0x60
 800311a:	667a      	str	r2, [r7, #100]	@ 0x64
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003128:	4649      	mov	r1, r9
 800312a:	008b      	lsls	r3, r1, #2
 800312c:	4641      	mov	r1, r8
 800312e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003132:	4641      	mov	r1, r8
 8003134:	008a      	lsls	r2, r1, #2
 8003136:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800313a:	f7fd f8b9 	bl	80002b0 <__aeabi_uldivmod>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4b0d      	ldr	r3, [pc, #52]	@ (8003178 <UART_SetConfig+0x4e4>)
 8003144:	fba3 1302 	umull	r1, r3, r3, r2
 8003148:	095b      	lsrs	r3, r3, #5
 800314a:	2164      	movs	r1, #100	@ 0x64
 800314c:	fb01 f303 	mul.w	r3, r1, r3
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	3332      	adds	r3, #50	@ 0x32
 8003156:	4a08      	ldr	r2, [pc, #32]	@ (8003178 <UART_SetConfig+0x4e4>)
 8003158:	fba2 2303 	umull	r2, r3, r2, r3
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	f003 020f 	and.w	r2, r3, #15
 8003162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4422      	add	r2, r4
 800316a:	609a      	str	r2, [r3, #8]
}
 800316c:	bf00      	nop
 800316e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003172:	46bd      	mov	sp, r7
 8003174:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003178:	51eb851f 	.word	0x51eb851f

0800317c <sbrk_aligned>:
 800317c:	b570      	push	{r4, r5, r6, lr}
 800317e:	4e0f      	ldr	r6, [pc, #60]	@ (80031bc <sbrk_aligned+0x40>)
 8003180:	460c      	mov	r4, r1
 8003182:	6831      	ldr	r1, [r6, #0]
 8003184:	4605      	mov	r5, r0
 8003186:	b911      	cbnz	r1, 800318e <sbrk_aligned+0x12>
 8003188:	f000 faec 	bl	8003764 <_sbrk_r>
 800318c:	6030      	str	r0, [r6, #0]
 800318e:	4621      	mov	r1, r4
 8003190:	4628      	mov	r0, r5
 8003192:	f000 fae7 	bl	8003764 <_sbrk_r>
 8003196:	1c43      	adds	r3, r0, #1
 8003198:	d103      	bne.n	80031a2 <sbrk_aligned+0x26>
 800319a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800319e:	4620      	mov	r0, r4
 80031a0:	bd70      	pop	{r4, r5, r6, pc}
 80031a2:	1cc4      	adds	r4, r0, #3
 80031a4:	f024 0403 	bic.w	r4, r4, #3
 80031a8:	42a0      	cmp	r0, r4
 80031aa:	d0f8      	beq.n	800319e <sbrk_aligned+0x22>
 80031ac:	1a21      	subs	r1, r4, r0
 80031ae:	4628      	mov	r0, r5
 80031b0:	f000 fad8 	bl	8003764 <_sbrk_r>
 80031b4:	3001      	adds	r0, #1
 80031b6:	d1f2      	bne.n	800319e <sbrk_aligned+0x22>
 80031b8:	e7ef      	b.n	800319a <sbrk_aligned+0x1e>
 80031ba:	bf00      	nop
 80031bc:	2000019c 	.word	0x2000019c

080031c0 <_malloc_r>:
 80031c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031c4:	1ccd      	adds	r5, r1, #3
 80031c6:	f025 0503 	bic.w	r5, r5, #3
 80031ca:	3508      	adds	r5, #8
 80031cc:	2d0c      	cmp	r5, #12
 80031ce:	bf38      	it	cc
 80031d0:	250c      	movcc	r5, #12
 80031d2:	2d00      	cmp	r5, #0
 80031d4:	4606      	mov	r6, r0
 80031d6:	db01      	blt.n	80031dc <_malloc_r+0x1c>
 80031d8:	42a9      	cmp	r1, r5
 80031da:	d904      	bls.n	80031e6 <_malloc_r+0x26>
 80031dc:	230c      	movs	r3, #12
 80031de:	6033      	str	r3, [r6, #0]
 80031e0:	2000      	movs	r0, #0
 80031e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80032bc <_malloc_r+0xfc>
 80031ea:	f000 f869 	bl	80032c0 <__malloc_lock>
 80031ee:	f8d8 3000 	ldr.w	r3, [r8]
 80031f2:	461c      	mov	r4, r3
 80031f4:	bb44      	cbnz	r4, 8003248 <_malloc_r+0x88>
 80031f6:	4629      	mov	r1, r5
 80031f8:	4630      	mov	r0, r6
 80031fa:	f7ff ffbf 	bl	800317c <sbrk_aligned>
 80031fe:	1c43      	adds	r3, r0, #1
 8003200:	4604      	mov	r4, r0
 8003202:	d158      	bne.n	80032b6 <_malloc_r+0xf6>
 8003204:	f8d8 4000 	ldr.w	r4, [r8]
 8003208:	4627      	mov	r7, r4
 800320a:	2f00      	cmp	r7, #0
 800320c:	d143      	bne.n	8003296 <_malloc_r+0xd6>
 800320e:	2c00      	cmp	r4, #0
 8003210:	d04b      	beq.n	80032aa <_malloc_r+0xea>
 8003212:	6823      	ldr	r3, [r4, #0]
 8003214:	4639      	mov	r1, r7
 8003216:	4630      	mov	r0, r6
 8003218:	eb04 0903 	add.w	r9, r4, r3
 800321c:	f000 faa2 	bl	8003764 <_sbrk_r>
 8003220:	4581      	cmp	r9, r0
 8003222:	d142      	bne.n	80032aa <_malloc_r+0xea>
 8003224:	6821      	ldr	r1, [r4, #0]
 8003226:	1a6d      	subs	r5, r5, r1
 8003228:	4629      	mov	r1, r5
 800322a:	4630      	mov	r0, r6
 800322c:	f7ff ffa6 	bl	800317c <sbrk_aligned>
 8003230:	3001      	adds	r0, #1
 8003232:	d03a      	beq.n	80032aa <_malloc_r+0xea>
 8003234:	6823      	ldr	r3, [r4, #0]
 8003236:	442b      	add	r3, r5
 8003238:	6023      	str	r3, [r4, #0]
 800323a:	f8d8 3000 	ldr.w	r3, [r8]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	bb62      	cbnz	r2, 800329c <_malloc_r+0xdc>
 8003242:	f8c8 7000 	str.w	r7, [r8]
 8003246:	e00f      	b.n	8003268 <_malloc_r+0xa8>
 8003248:	6822      	ldr	r2, [r4, #0]
 800324a:	1b52      	subs	r2, r2, r5
 800324c:	d420      	bmi.n	8003290 <_malloc_r+0xd0>
 800324e:	2a0b      	cmp	r2, #11
 8003250:	d917      	bls.n	8003282 <_malloc_r+0xc2>
 8003252:	1961      	adds	r1, r4, r5
 8003254:	42a3      	cmp	r3, r4
 8003256:	6025      	str	r5, [r4, #0]
 8003258:	bf18      	it	ne
 800325a:	6059      	strne	r1, [r3, #4]
 800325c:	6863      	ldr	r3, [r4, #4]
 800325e:	bf08      	it	eq
 8003260:	f8c8 1000 	streq.w	r1, [r8]
 8003264:	5162      	str	r2, [r4, r5]
 8003266:	604b      	str	r3, [r1, #4]
 8003268:	4630      	mov	r0, r6
 800326a:	f000 f82f 	bl	80032cc <__malloc_unlock>
 800326e:	f104 000b 	add.w	r0, r4, #11
 8003272:	1d23      	adds	r3, r4, #4
 8003274:	f020 0007 	bic.w	r0, r0, #7
 8003278:	1ac2      	subs	r2, r0, r3
 800327a:	bf1c      	itt	ne
 800327c:	1a1b      	subne	r3, r3, r0
 800327e:	50a3      	strne	r3, [r4, r2]
 8003280:	e7af      	b.n	80031e2 <_malloc_r+0x22>
 8003282:	6862      	ldr	r2, [r4, #4]
 8003284:	42a3      	cmp	r3, r4
 8003286:	bf0c      	ite	eq
 8003288:	f8c8 2000 	streq.w	r2, [r8]
 800328c:	605a      	strne	r2, [r3, #4]
 800328e:	e7eb      	b.n	8003268 <_malloc_r+0xa8>
 8003290:	4623      	mov	r3, r4
 8003292:	6864      	ldr	r4, [r4, #4]
 8003294:	e7ae      	b.n	80031f4 <_malloc_r+0x34>
 8003296:	463c      	mov	r4, r7
 8003298:	687f      	ldr	r7, [r7, #4]
 800329a:	e7b6      	b.n	800320a <_malloc_r+0x4a>
 800329c:	461a      	mov	r2, r3
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	42a3      	cmp	r3, r4
 80032a2:	d1fb      	bne.n	800329c <_malloc_r+0xdc>
 80032a4:	2300      	movs	r3, #0
 80032a6:	6053      	str	r3, [r2, #4]
 80032a8:	e7de      	b.n	8003268 <_malloc_r+0xa8>
 80032aa:	230c      	movs	r3, #12
 80032ac:	6033      	str	r3, [r6, #0]
 80032ae:	4630      	mov	r0, r6
 80032b0:	f000 f80c 	bl	80032cc <__malloc_unlock>
 80032b4:	e794      	b.n	80031e0 <_malloc_r+0x20>
 80032b6:	6005      	str	r5, [r0, #0]
 80032b8:	e7d6      	b.n	8003268 <_malloc_r+0xa8>
 80032ba:	bf00      	nop
 80032bc:	200001a0 	.word	0x200001a0

080032c0 <__malloc_lock>:
 80032c0:	4801      	ldr	r0, [pc, #4]	@ (80032c8 <__malloc_lock+0x8>)
 80032c2:	f000 ba9c 	b.w	80037fe <__retarget_lock_acquire_recursive>
 80032c6:	bf00      	nop
 80032c8:	200002e4 	.word	0x200002e4

080032cc <__malloc_unlock>:
 80032cc:	4801      	ldr	r0, [pc, #4]	@ (80032d4 <__malloc_unlock+0x8>)
 80032ce:	f000 ba97 	b.w	8003800 <__retarget_lock_release_recursive>
 80032d2:	bf00      	nop
 80032d4:	200002e4 	.word	0x200002e4

080032d8 <std>:
 80032d8:	2300      	movs	r3, #0
 80032da:	b510      	push	{r4, lr}
 80032dc:	4604      	mov	r4, r0
 80032de:	e9c0 3300 	strd	r3, r3, [r0]
 80032e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032e6:	6083      	str	r3, [r0, #8]
 80032e8:	8181      	strh	r1, [r0, #12]
 80032ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80032ec:	81c2      	strh	r2, [r0, #14]
 80032ee:	6183      	str	r3, [r0, #24]
 80032f0:	4619      	mov	r1, r3
 80032f2:	2208      	movs	r2, #8
 80032f4:	305c      	adds	r0, #92	@ 0x5c
 80032f6:	f000 f9f9 	bl	80036ec <memset>
 80032fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003330 <std+0x58>)
 80032fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80032fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003334 <std+0x5c>)
 8003300:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003302:	4b0d      	ldr	r3, [pc, #52]	@ (8003338 <std+0x60>)
 8003304:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003306:	4b0d      	ldr	r3, [pc, #52]	@ (800333c <std+0x64>)
 8003308:	6323      	str	r3, [r4, #48]	@ 0x30
 800330a:	4b0d      	ldr	r3, [pc, #52]	@ (8003340 <std+0x68>)
 800330c:	6224      	str	r4, [r4, #32]
 800330e:	429c      	cmp	r4, r3
 8003310:	d006      	beq.n	8003320 <std+0x48>
 8003312:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003316:	4294      	cmp	r4, r2
 8003318:	d002      	beq.n	8003320 <std+0x48>
 800331a:	33d0      	adds	r3, #208	@ 0xd0
 800331c:	429c      	cmp	r4, r3
 800331e:	d105      	bne.n	800332c <std+0x54>
 8003320:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003328:	f000 ba68 	b.w	80037fc <__retarget_lock_init_recursive>
 800332c:	bd10      	pop	{r4, pc}
 800332e:	bf00      	nop
 8003330:	0800353d 	.word	0x0800353d
 8003334:	0800355f 	.word	0x0800355f
 8003338:	08003597 	.word	0x08003597
 800333c:	080035bb 	.word	0x080035bb
 8003340:	200001a4 	.word	0x200001a4

08003344 <stdio_exit_handler>:
 8003344:	4a02      	ldr	r2, [pc, #8]	@ (8003350 <stdio_exit_handler+0xc>)
 8003346:	4903      	ldr	r1, [pc, #12]	@ (8003354 <stdio_exit_handler+0x10>)
 8003348:	4803      	ldr	r0, [pc, #12]	@ (8003358 <stdio_exit_handler+0x14>)
 800334a:	f000 b869 	b.w	8003420 <_fwalk_sglue>
 800334e:	bf00      	nop
 8003350:	2000000c 	.word	0x2000000c
 8003354:	08003f41 	.word	0x08003f41
 8003358:	2000001c 	.word	0x2000001c

0800335c <cleanup_stdio>:
 800335c:	6841      	ldr	r1, [r0, #4]
 800335e:	4b0c      	ldr	r3, [pc, #48]	@ (8003390 <cleanup_stdio+0x34>)
 8003360:	4299      	cmp	r1, r3
 8003362:	b510      	push	{r4, lr}
 8003364:	4604      	mov	r4, r0
 8003366:	d001      	beq.n	800336c <cleanup_stdio+0x10>
 8003368:	f000 fdea 	bl	8003f40 <_fflush_r>
 800336c:	68a1      	ldr	r1, [r4, #8]
 800336e:	4b09      	ldr	r3, [pc, #36]	@ (8003394 <cleanup_stdio+0x38>)
 8003370:	4299      	cmp	r1, r3
 8003372:	d002      	beq.n	800337a <cleanup_stdio+0x1e>
 8003374:	4620      	mov	r0, r4
 8003376:	f000 fde3 	bl	8003f40 <_fflush_r>
 800337a:	68e1      	ldr	r1, [r4, #12]
 800337c:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <cleanup_stdio+0x3c>)
 800337e:	4299      	cmp	r1, r3
 8003380:	d004      	beq.n	800338c <cleanup_stdio+0x30>
 8003382:	4620      	mov	r0, r4
 8003384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003388:	f000 bdda 	b.w	8003f40 <_fflush_r>
 800338c:	bd10      	pop	{r4, pc}
 800338e:	bf00      	nop
 8003390:	200001a4 	.word	0x200001a4
 8003394:	2000020c 	.word	0x2000020c
 8003398:	20000274 	.word	0x20000274

0800339c <global_stdio_init.part.0>:
 800339c:	b510      	push	{r4, lr}
 800339e:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <global_stdio_init.part.0+0x30>)
 80033a0:	4c0b      	ldr	r4, [pc, #44]	@ (80033d0 <global_stdio_init.part.0+0x34>)
 80033a2:	4a0c      	ldr	r2, [pc, #48]	@ (80033d4 <global_stdio_init.part.0+0x38>)
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	4620      	mov	r0, r4
 80033a8:	2200      	movs	r2, #0
 80033aa:	2104      	movs	r1, #4
 80033ac:	f7ff ff94 	bl	80032d8 <std>
 80033b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80033b4:	2201      	movs	r2, #1
 80033b6:	2109      	movs	r1, #9
 80033b8:	f7ff ff8e 	bl	80032d8 <std>
 80033bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80033c0:	2202      	movs	r2, #2
 80033c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033c6:	2112      	movs	r1, #18
 80033c8:	f7ff bf86 	b.w	80032d8 <std>
 80033cc:	200002dc 	.word	0x200002dc
 80033d0:	200001a4 	.word	0x200001a4
 80033d4:	08003345 	.word	0x08003345

080033d8 <__sfp_lock_acquire>:
 80033d8:	4801      	ldr	r0, [pc, #4]	@ (80033e0 <__sfp_lock_acquire+0x8>)
 80033da:	f000 ba10 	b.w	80037fe <__retarget_lock_acquire_recursive>
 80033de:	bf00      	nop
 80033e0:	200002e5 	.word	0x200002e5

080033e4 <__sfp_lock_release>:
 80033e4:	4801      	ldr	r0, [pc, #4]	@ (80033ec <__sfp_lock_release+0x8>)
 80033e6:	f000 ba0b 	b.w	8003800 <__retarget_lock_release_recursive>
 80033ea:	bf00      	nop
 80033ec:	200002e5 	.word	0x200002e5

080033f0 <__sinit>:
 80033f0:	b510      	push	{r4, lr}
 80033f2:	4604      	mov	r4, r0
 80033f4:	f7ff fff0 	bl	80033d8 <__sfp_lock_acquire>
 80033f8:	6a23      	ldr	r3, [r4, #32]
 80033fa:	b11b      	cbz	r3, 8003404 <__sinit+0x14>
 80033fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003400:	f7ff bff0 	b.w	80033e4 <__sfp_lock_release>
 8003404:	4b04      	ldr	r3, [pc, #16]	@ (8003418 <__sinit+0x28>)
 8003406:	6223      	str	r3, [r4, #32]
 8003408:	4b04      	ldr	r3, [pc, #16]	@ (800341c <__sinit+0x2c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1f5      	bne.n	80033fc <__sinit+0xc>
 8003410:	f7ff ffc4 	bl	800339c <global_stdio_init.part.0>
 8003414:	e7f2      	b.n	80033fc <__sinit+0xc>
 8003416:	bf00      	nop
 8003418:	0800335d 	.word	0x0800335d
 800341c:	200002dc 	.word	0x200002dc

08003420 <_fwalk_sglue>:
 8003420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003424:	4607      	mov	r7, r0
 8003426:	4688      	mov	r8, r1
 8003428:	4614      	mov	r4, r2
 800342a:	2600      	movs	r6, #0
 800342c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003430:	f1b9 0901 	subs.w	r9, r9, #1
 8003434:	d505      	bpl.n	8003442 <_fwalk_sglue+0x22>
 8003436:	6824      	ldr	r4, [r4, #0]
 8003438:	2c00      	cmp	r4, #0
 800343a:	d1f7      	bne.n	800342c <_fwalk_sglue+0xc>
 800343c:	4630      	mov	r0, r6
 800343e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003442:	89ab      	ldrh	r3, [r5, #12]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d907      	bls.n	8003458 <_fwalk_sglue+0x38>
 8003448:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800344c:	3301      	adds	r3, #1
 800344e:	d003      	beq.n	8003458 <_fwalk_sglue+0x38>
 8003450:	4629      	mov	r1, r5
 8003452:	4638      	mov	r0, r7
 8003454:	47c0      	blx	r8
 8003456:	4306      	orrs	r6, r0
 8003458:	3568      	adds	r5, #104	@ 0x68
 800345a:	e7e9      	b.n	8003430 <_fwalk_sglue+0x10>

0800345c <iprintf>:
 800345c:	b40f      	push	{r0, r1, r2, r3}
 800345e:	b507      	push	{r0, r1, r2, lr}
 8003460:	4906      	ldr	r1, [pc, #24]	@ (800347c <iprintf+0x20>)
 8003462:	ab04      	add	r3, sp, #16
 8003464:	6808      	ldr	r0, [r1, #0]
 8003466:	f853 2b04 	ldr.w	r2, [r3], #4
 800346a:	6881      	ldr	r1, [r0, #8]
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	f000 fa3d 	bl	80038ec <_vfiprintf_r>
 8003472:	b003      	add	sp, #12
 8003474:	f85d eb04 	ldr.w	lr, [sp], #4
 8003478:	b004      	add	sp, #16
 800347a:	4770      	bx	lr
 800347c:	20000018 	.word	0x20000018

08003480 <_puts_r>:
 8003480:	6a03      	ldr	r3, [r0, #32]
 8003482:	b570      	push	{r4, r5, r6, lr}
 8003484:	6884      	ldr	r4, [r0, #8]
 8003486:	4605      	mov	r5, r0
 8003488:	460e      	mov	r6, r1
 800348a:	b90b      	cbnz	r3, 8003490 <_puts_r+0x10>
 800348c:	f7ff ffb0 	bl	80033f0 <__sinit>
 8003490:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003492:	07db      	lsls	r3, r3, #31
 8003494:	d405      	bmi.n	80034a2 <_puts_r+0x22>
 8003496:	89a3      	ldrh	r3, [r4, #12]
 8003498:	0598      	lsls	r0, r3, #22
 800349a:	d402      	bmi.n	80034a2 <_puts_r+0x22>
 800349c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800349e:	f000 f9ae 	bl	80037fe <__retarget_lock_acquire_recursive>
 80034a2:	89a3      	ldrh	r3, [r4, #12]
 80034a4:	0719      	lsls	r1, r3, #28
 80034a6:	d502      	bpl.n	80034ae <_puts_r+0x2e>
 80034a8:	6923      	ldr	r3, [r4, #16]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d135      	bne.n	800351a <_puts_r+0x9a>
 80034ae:	4621      	mov	r1, r4
 80034b0:	4628      	mov	r0, r5
 80034b2:	f000 f8c5 	bl	8003640 <__swsetup_r>
 80034b6:	b380      	cbz	r0, 800351a <_puts_r+0x9a>
 80034b8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80034bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80034be:	07da      	lsls	r2, r3, #31
 80034c0:	d405      	bmi.n	80034ce <_puts_r+0x4e>
 80034c2:	89a3      	ldrh	r3, [r4, #12]
 80034c4:	059b      	lsls	r3, r3, #22
 80034c6:	d402      	bmi.n	80034ce <_puts_r+0x4e>
 80034c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034ca:	f000 f999 	bl	8003800 <__retarget_lock_release_recursive>
 80034ce:	4628      	mov	r0, r5
 80034d0:	bd70      	pop	{r4, r5, r6, pc}
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	da04      	bge.n	80034e0 <_puts_r+0x60>
 80034d6:	69a2      	ldr	r2, [r4, #24]
 80034d8:	429a      	cmp	r2, r3
 80034da:	dc17      	bgt.n	800350c <_puts_r+0x8c>
 80034dc:	290a      	cmp	r1, #10
 80034de:	d015      	beq.n	800350c <_puts_r+0x8c>
 80034e0:	6823      	ldr	r3, [r4, #0]
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	6022      	str	r2, [r4, #0]
 80034e6:	7019      	strb	r1, [r3, #0]
 80034e8:	68a3      	ldr	r3, [r4, #8]
 80034ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80034ee:	3b01      	subs	r3, #1
 80034f0:	60a3      	str	r3, [r4, #8]
 80034f2:	2900      	cmp	r1, #0
 80034f4:	d1ed      	bne.n	80034d2 <_puts_r+0x52>
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	da11      	bge.n	800351e <_puts_r+0x9e>
 80034fa:	4622      	mov	r2, r4
 80034fc:	210a      	movs	r1, #10
 80034fe:	4628      	mov	r0, r5
 8003500:	f000 f85f 	bl	80035c2 <__swbuf_r>
 8003504:	3001      	adds	r0, #1
 8003506:	d0d7      	beq.n	80034b8 <_puts_r+0x38>
 8003508:	250a      	movs	r5, #10
 800350a:	e7d7      	b.n	80034bc <_puts_r+0x3c>
 800350c:	4622      	mov	r2, r4
 800350e:	4628      	mov	r0, r5
 8003510:	f000 f857 	bl	80035c2 <__swbuf_r>
 8003514:	3001      	adds	r0, #1
 8003516:	d1e7      	bne.n	80034e8 <_puts_r+0x68>
 8003518:	e7ce      	b.n	80034b8 <_puts_r+0x38>
 800351a:	3e01      	subs	r6, #1
 800351c:	e7e4      	b.n	80034e8 <_puts_r+0x68>
 800351e:	6823      	ldr	r3, [r4, #0]
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	6022      	str	r2, [r4, #0]
 8003524:	220a      	movs	r2, #10
 8003526:	701a      	strb	r2, [r3, #0]
 8003528:	e7ee      	b.n	8003508 <_puts_r+0x88>
	...

0800352c <puts>:
 800352c:	4b02      	ldr	r3, [pc, #8]	@ (8003538 <puts+0xc>)
 800352e:	4601      	mov	r1, r0
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	f7ff bfa5 	b.w	8003480 <_puts_r>
 8003536:	bf00      	nop
 8003538:	20000018 	.word	0x20000018

0800353c <__sread>:
 800353c:	b510      	push	{r4, lr}
 800353e:	460c      	mov	r4, r1
 8003540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003544:	f000 f8fc 	bl	8003740 <_read_r>
 8003548:	2800      	cmp	r0, #0
 800354a:	bfab      	itete	ge
 800354c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800354e:	89a3      	ldrhlt	r3, [r4, #12]
 8003550:	181b      	addge	r3, r3, r0
 8003552:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003556:	bfac      	ite	ge
 8003558:	6563      	strge	r3, [r4, #84]	@ 0x54
 800355a:	81a3      	strhlt	r3, [r4, #12]
 800355c:	bd10      	pop	{r4, pc}

0800355e <__swrite>:
 800355e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003562:	461f      	mov	r7, r3
 8003564:	898b      	ldrh	r3, [r1, #12]
 8003566:	05db      	lsls	r3, r3, #23
 8003568:	4605      	mov	r5, r0
 800356a:	460c      	mov	r4, r1
 800356c:	4616      	mov	r6, r2
 800356e:	d505      	bpl.n	800357c <__swrite+0x1e>
 8003570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003574:	2302      	movs	r3, #2
 8003576:	2200      	movs	r2, #0
 8003578:	f000 f8d0 	bl	800371c <_lseek_r>
 800357c:	89a3      	ldrh	r3, [r4, #12]
 800357e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003582:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003586:	81a3      	strh	r3, [r4, #12]
 8003588:	4632      	mov	r2, r6
 800358a:	463b      	mov	r3, r7
 800358c:	4628      	mov	r0, r5
 800358e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003592:	f000 b8f7 	b.w	8003784 <_write_r>

08003596 <__sseek>:
 8003596:	b510      	push	{r4, lr}
 8003598:	460c      	mov	r4, r1
 800359a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800359e:	f000 f8bd 	bl	800371c <_lseek_r>
 80035a2:	1c43      	adds	r3, r0, #1
 80035a4:	89a3      	ldrh	r3, [r4, #12]
 80035a6:	bf15      	itete	ne
 80035a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80035aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80035ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80035b2:	81a3      	strheq	r3, [r4, #12]
 80035b4:	bf18      	it	ne
 80035b6:	81a3      	strhne	r3, [r4, #12]
 80035b8:	bd10      	pop	{r4, pc}

080035ba <__sclose>:
 80035ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035be:	f000 b89d 	b.w	80036fc <_close_r>

080035c2 <__swbuf_r>:
 80035c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c4:	460e      	mov	r6, r1
 80035c6:	4614      	mov	r4, r2
 80035c8:	4605      	mov	r5, r0
 80035ca:	b118      	cbz	r0, 80035d4 <__swbuf_r+0x12>
 80035cc:	6a03      	ldr	r3, [r0, #32]
 80035ce:	b90b      	cbnz	r3, 80035d4 <__swbuf_r+0x12>
 80035d0:	f7ff ff0e 	bl	80033f0 <__sinit>
 80035d4:	69a3      	ldr	r3, [r4, #24]
 80035d6:	60a3      	str	r3, [r4, #8]
 80035d8:	89a3      	ldrh	r3, [r4, #12]
 80035da:	071a      	lsls	r2, r3, #28
 80035dc:	d501      	bpl.n	80035e2 <__swbuf_r+0x20>
 80035de:	6923      	ldr	r3, [r4, #16]
 80035e0:	b943      	cbnz	r3, 80035f4 <__swbuf_r+0x32>
 80035e2:	4621      	mov	r1, r4
 80035e4:	4628      	mov	r0, r5
 80035e6:	f000 f82b 	bl	8003640 <__swsetup_r>
 80035ea:	b118      	cbz	r0, 80035f4 <__swbuf_r+0x32>
 80035ec:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80035f0:	4638      	mov	r0, r7
 80035f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035f4:	6823      	ldr	r3, [r4, #0]
 80035f6:	6922      	ldr	r2, [r4, #16]
 80035f8:	1a98      	subs	r0, r3, r2
 80035fa:	6963      	ldr	r3, [r4, #20]
 80035fc:	b2f6      	uxtb	r6, r6
 80035fe:	4283      	cmp	r3, r0
 8003600:	4637      	mov	r7, r6
 8003602:	dc05      	bgt.n	8003610 <__swbuf_r+0x4e>
 8003604:	4621      	mov	r1, r4
 8003606:	4628      	mov	r0, r5
 8003608:	f000 fc9a 	bl	8003f40 <_fflush_r>
 800360c:	2800      	cmp	r0, #0
 800360e:	d1ed      	bne.n	80035ec <__swbuf_r+0x2a>
 8003610:	68a3      	ldr	r3, [r4, #8]
 8003612:	3b01      	subs	r3, #1
 8003614:	60a3      	str	r3, [r4, #8]
 8003616:	6823      	ldr	r3, [r4, #0]
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	6022      	str	r2, [r4, #0]
 800361c:	701e      	strb	r6, [r3, #0]
 800361e:	6962      	ldr	r2, [r4, #20]
 8003620:	1c43      	adds	r3, r0, #1
 8003622:	429a      	cmp	r2, r3
 8003624:	d004      	beq.n	8003630 <__swbuf_r+0x6e>
 8003626:	89a3      	ldrh	r3, [r4, #12]
 8003628:	07db      	lsls	r3, r3, #31
 800362a:	d5e1      	bpl.n	80035f0 <__swbuf_r+0x2e>
 800362c:	2e0a      	cmp	r6, #10
 800362e:	d1df      	bne.n	80035f0 <__swbuf_r+0x2e>
 8003630:	4621      	mov	r1, r4
 8003632:	4628      	mov	r0, r5
 8003634:	f000 fc84 	bl	8003f40 <_fflush_r>
 8003638:	2800      	cmp	r0, #0
 800363a:	d0d9      	beq.n	80035f0 <__swbuf_r+0x2e>
 800363c:	e7d6      	b.n	80035ec <__swbuf_r+0x2a>
	...

08003640 <__swsetup_r>:
 8003640:	b538      	push	{r3, r4, r5, lr}
 8003642:	4b29      	ldr	r3, [pc, #164]	@ (80036e8 <__swsetup_r+0xa8>)
 8003644:	4605      	mov	r5, r0
 8003646:	6818      	ldr	r0, [r3, #0]
 8003648:	460c      	mov	r4, r1
 800364a:	b118      	cbz	r0, 8003654 <__swsetup_r+0x14>
 800364c:	6a03      	ldr	r3, [r0, #32]
 800364e:	b90b      	cbnz	r3, 8003654 <__swsetup_r+0x14>
 8003650:	f7ff fece 	bl	80033f0 <__sinit>
 8003654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003658:	0719      	lsls	r1, r3, #28
 800365a:	d422      	bmi.n	80036a2 <__swsetup_r+0x62>
 800365c:	06da      	lsls	r2, r3, #27
 800365e:	d407      	bmi.n	8003670 <__swsetup_r+0x30>
 8003660:	2209      	movs	r2, #9
 8003662:	602a      	str	r2, [r5, #0]
 8003664:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003668:	81a3      	strh	r3, [r4, #12]
 800366a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800366e:	e033      	b.n	80036d8 <__swsetup_r+0x98>
 8003670:	0758      	lsls	r0, r3, #29
 8003672:	d512      	bpl.n	800369a <__swsetup_r+0x5a>
 8003674:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003676:	b141      	cbz	r1, 800368a <__swsetup_r+0x4a>
 8003678:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800367c:	4299      	cmp	r1, r3
 800367e:	d002      	beq.n	8003686 <__swsetup_r+0x46>
 8003680:	4628      	mov	r0, r5
 8003682:	f000 f8bf 	bl	8003804 <_free_r>
 8003686:	2300      	movs	r3, #0
 8003688:	6363      	str	r3, [r4, #52]	@ 0x34
 800368a:	89a3      	ldrh	r3, [r4, #12]
 800368c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003690:	81a3      	strh	r3, [r4, #12]
 8003692:	2300      	movs	r3, #0
 8003694:	6063      	str	r3, [r4, #4]
 8003696:	6923      	ldr	r3, [r4, #16]
 8003698:	6023      	str	r3, [r4, #0]
 800369a:	89a3      	ldrh	r3, [r4, #12]
 800369c:	f043 0308 	orr.w	r3, r3, #8
 80036a0:	81a3      	strh	r3, [r4, #12]
 80036a2:	6923      	ldr	r3, [r4, #16]
 80036a4:	b94b      	cbnz	r3, 80036ba <__swsetup_r+0x7a>
 80036a6:	89a3      	ldrh	r3, [r4, #12]
 80036a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80036ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036b0:	d003      	beq.n	80036ba <__swsetup_r+0x7a>
 80036b2:	4621      	mov	r1, r4
 80036b4:	4628      	mov	r0, r5
 80036b6:	f000 fc91 	bl	8003fdc <__smakebuf_r>
 80036ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036be:	f013 0201 	ands.w	r2, r3, #1
 80036c2:	d00a      	beq.n	80036da <__swsetup_r+0x9a>
 80036c4:	2200      	movs	r2, #0
 80036c6:	60a2      	str	r2, [r4, #8]
 80036c8:	6962      	ldr	r2, [r4, #20]
 80036ca:	4252      	negs	r2, r2
 80036cc:	61a2      	str	r2, [r4, #24]
 80036ce:	6922      	ldr	r2, [r4, #16]
 80036d0:	b942      	cbnz	r2, 80036e4 <__swsetup_r+0xa4>
 80036d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80036d6:	d1c5      	bne.n	8003664 <__swsetup_r+0x24>
 80036d8:	bd38      	pop	{r3, r4, r5, pc}
 80036da:	0799      	lsls	r1, r3, #30
 80036dc:	bf58      	it	pl
 80036de:	6962      	ldrpl	r2, [r4, #20]
 80036e0:	60a2      	str	r2, [r4, #8]
 80036e2:	e7f4      	b.n	80036ce <__swsetup_r+0x8e>
 80036e4:	2000      	movs	r0, #0
 80036e6:	e7f7      	b.n	80036d8 <__swsetup_r+0x98>
 80036e8:	20000018 	.word	0x20000018

080036ec <memset>:
 80036ec:	4402      	add	r2, r0
 80036ee:	4603      	mov	r3, r0
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d100      	bne.n	80036f6 <memset+0xa>
 80036f4:	4770      	bx	lr
 80036f6:	f803 1b01 	strb.w	r1, [r3], #1
 80036fa:	e7f9      	b.n	80036f0 <memset+0x4>

080036fc <_close_r>:
 80036fc:	b538      	push	{r3, r4, r5, lr}
 80036fe:	4d06      	ldr	r5, [pc, #24]	@ (8003718 <_close_r+0x1c>)
 8003700:	2300      	movs	r3, #0
 8003702:	4604      	mov	r4, r0
 8003704:	4608      	mov	r0, r1
 8003706:	602b      	str	r3, [r5, #0]
 8003708:	f7fd fb50 	bl	8000dac <_close>
 800370c:	1c43      	adds	r3, r0, #1
 800370e:	d102      	bne.n	8003716 <_close_r+0x1a>
 8003710:	682b      	ldr	r3, [r5, #0]
 8003712:	b103      	cbz	r3, 8003716 <_close_r+0x1a>
 8003714:	6023      	str	r3, [r4, #0]
 8003716:	bd38      	pop	{r3, r4, r5, pc}
 8003718:	200002e0 	.word	0x200002e0

0800371c <_lseek_r>:
 800371c:	b538      	push	{r3, r4, r5, lr}
 800371e:	4d07      	ldr	r5, [pc, #28]	@ (800373c <_lseek_r+0x20>)
 8003720:	4604      	mov	r4, r0
 8003722:	4608      	mov	r0, r1
 8003724:	4611      	mov	r1, r2
 8003726:	2200      	movs	r2, #0
 8003728:	602a      	str	r2, [r5, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	f7fd fb65 	bl	8000dfa <_lseek>
 8003730:	1c43      	adds	r3, r0, #1
 8003732:	d102      	bne.n	800373a <_lseek_r+0x1e>
 8003734:	682b      	ldr	r3, [r5, #0]
 8003736:	b103      	cbz	r3, 800373a <_lseek_r+0x1e>
 8003738:	6023      	str	r3, [r4, #0]
 800373a:	bd38      	pop	{r3, r4, r5, pc}
 800373c:	200002e0 	.word	0x200002e0

08003740 <_read_r>:
 8003740:	b538      	push	{r3, r4, r5, lr}
 8003742:	4d07      	ldr	r5, [pc, #28]	@ (8003760 <_read_r+0x20>)
 8003744:	4604      	mov	r4, r0
 8003746:	4608      	mov	r0, r1
 8003748:	4611      	mov	r1, r2
 800374a:	2200      	movs	r2, #0
 800374c:	602a      	str	r2, [r5, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	f7fd faf3 	bl	8000d3a <_read>
 8003754:	1c43      	adds	r3, r0, #1
 8003756:	d102      	bne.n	800375e <_read_r+0x1e>
 8003758:	682b      	ldr	r3, [r5, #0]
 800375a:	b103      	cbz	r3, 800375e <_read_r+0x1e>
 800375c:	6023      	str	r3, [r4, #0]
 800375e:	bd38      	pop	{r3, r4, r5, pc}
 8003760:	200002e0 	.word	0x200002e0

08003764 <_sbrk_r>:
 8003764:	b538      	push	{r3, r4, r5, lr}
 8003766:	4d06      	ldr	r5, [pc, #24]	@ (8003780 <_sbrk_r+0x1c>)
 8003768:	2300      	movs	r3, #0
 800376a:	4604      	mov	r4, r0
 800376c:	4608      	mov	r0, r1
 800376e:	602b      	str	r3, [r5, #0]
 8003770:	f7fd fb50 	bl	8000e14 <_sbrk>
 8003774:	1c43      	adds	r3, r0, #1
 8003776:	d102      	bne.n	800377e <_sbrk_r+0x1a>
 8003778:	682b      	ldr	r3, [r5, #0]
 800377a:	b103      	cbz	r3, 800377e <_sbrk_r+0x1a>
 800377c:	6023      	str	r3, [r4, #0]
 800377e:	bd38      	pop	{r3, r4, r5, pc}
 8003780:	200002e0 	.word	0x200002e0

08003784 <_write_r>:
 8003784:	b538      	push	{r3, r4, r5, lr}
 8003786:	4d07      	ldr	r5, [pc, #28]	@ (80037a4 <_write_r+0x20>)
 8003788:	4604      	mov	r4, r0
 800378a:	4608      	mov	r0, r1
 800378c:	4611      	mov	r1, r2
 800378e:	2200      	movs	r2, #0
 8003790:	602a      	str	r2, [r5, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	f7fd faee 	bl	8000d74 <_write>
 8003798:	1c43      	adds	r3, r0, #1
 800379a:	d102      	bne.n	80037a2 <_write_r+0x1e>
 800379c:	682b      	ldr	r3, [r5, #0]
 800379e:	b103      	cbz	r3, 80037a2 <_write_r+0x1e>
 80037a0:	6023      	str	r3, [r4, #0]
 80037a2:	bd38      	pop	{r3, r4, r5, pc}
 80037a4:	200002e0 	.word	0x200002e0

080037a8 <__errno>:
 80037a8:	4b01      	ldr	r3, [pc, #4]	@ (80037b0 <__errno+0x8>)
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	20000018 	.word	0x20000018

080037b4 <__libc_init_array>:
 80037b4:	b570      	push	{r4, r5, r6, lr}
 80037b6:	4d0d      	ldr	r5, [pc, #52]	@ (80037ec <__libc_init_array+0x38>)
 80037b8:	4c0d      	ldr	r4, [pc, #52]	@ (80037f0 <__libc_init_array+0x3c>)
 80037ba:	1b64      	subs	r4, r4, r5
 80037bc:	10a4      	asrs	r4, r4, #2
 80037be:	2600      	movs	r6, #0
 80037c0:	42a6      	cmp	r6, r4
 80037c2:	d109      	bne.n	80037d8 <__libc_init_array+0x24>
 80037c4:	4d0b      	ldr	r5, [pc, #44]	@ (80037f4 <__libc_init_array+0x40>)
 80037c6:	4c0c      	ldr	r4, [pc, #48]	@ (80037f8 <__libc_init_array+0x44>)
 80037c8:	f000 fc66 	bl	8004098 <_init>
 80037cc:	1b64      	subs	r4, r4, r5
 80037ce:	10a4      	asrs	r4, r4, #2
 80037d0:	2600      	movs	r6, #0
 80037d2:	42a6      	cmp	r6, r4
 80037d4:	d105      	bne.n	80037e2 <__libc_init_array+0x2e>
 80037d6:	bd70      	pop	{r4, r5, r6, pc}
 80037d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037dc:	4798      	blx	r3
 80037de:	3601      	adds	r6, #1
 80037e0:	e7ee      	b.n	80037c0 <__libc_init_array+0xc>
 80037e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e6:	4798      	blx	r3
 80037e8:	3601      	adds	r6, #1
 80037ea:	e7f2      	b.n	80037d2 <__libc_init_array+0x1e>
 80037ec:	08004348 	.word	0x08004348
 80037f0:	08004348 	.word	0x08004348
 80037f4:	08004348 	.word	0x08004348
 80037f8:	0800434c 	.word	0x0800434c

080037fc <__retarget_lock_init_recursive>:
 80037fc:	4770      	bx	lr

080037fe <__retarget_lock_acquire_recursive>:
 80037fe:	4770      	bx	lr

08003800 <__retarget_lock_release_recursive>:
 8003800:	4770      	bx	lr
	...

08003804 <_free_r>:
 8003804:	b538      	push	{r3, r4, r5, lr}
 8003806:	4605      	mov	r5, r0
 8003808:	2900      	cmp	r1, #0
 800380a:	d041      	beq.n	8003890 <_free_r+0x8c>
 800380c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003810:	1f0c      	subs	r4, r1, #4
 8003812:	2b00      	cmp	r3, #0
 8003814:	bfb8      	it	lt
 8003816:	18e4      	addlt	r4, r4, r3
 8003818:	f7ff fd52 	bl	80032c0 <__malloc_lock>
 800381c:	4a1d      	ldr	r2, [pc, #116]	@ (8003894 <_free_r+0x90>)
 800381e:	6813      	ldr	r3, [r2, #0]
 8003820:	b933      	cbnz	r3, 8003830 <_free_r+0x2c>
 8003822:	6063      	str	r3, [r4, #4]
 8003824:	6014      	str	r4, [r2, #0]
 8003826:	4628      	mov	r0, r5
 8003828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800382c:	f7ff bd4e 	b.w	80032cc <__malloc_unlock>
 8003830:	42a3      	cmp	r3, r4
 8003832:	d908      	bls.n	8003846 <_free_r+0x42>
 8003834:	6820      	ldr	r0, [r4, #0]
 8003836:	1821      	adds	r1, r4, r0
 8003838:	428b      	cmp	r3, r1
 800383a:	bf01      	itttt	eq
 800383c:	6819      	ldreq	r1, [r3, #0]
 800383e:	685b      	ldreq	r3, [r3, #4]
 8003840:	1809      	addeq	r1, r1, r0
 8003842:	6021      	streq	r1, [r4, #0]
 8003844:	e7ed      	b.n	8003822 <_free_r+0x1e>
 8003846:	461a      	mov	r2, r3
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	b10b      	cbz	r3, 8003850 <_free_r+0x4c>
 800384c:	42a3      	cmp	r3, r4
 800384e:	d9fa      	bls.n	8003846 <_free_r+0x42>
 8003850:	6811      	ldr	r1, [r2, #0]
 8003852:	1850      	adds	r0, r2, r1
 8003854:	42a0      	cmp	r0, r4
 8003856:	d10b      	bne.n	8003870 <_free_r+0x6c>
 8003858:	6820      	ldr	r0, [r4, #0]
 800385a:	4401      	add	r1, r0
 800385c:	1850      	adds	r0, r2, r1
 800385e:	4283      	cmp	r3, r0
 8003860:	6011      	str	r1, [r2, #0]
 8003862:	d1e0      	bne.n	8003826 <_free_r+0x22>
 8003864:	6818      	ldr	r0, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	6053      	str	r3, [r2, #4]
 800386a:	4408      	add	r0, r1
 800386c:	6010      	str	r0, [r2, #0]
 800386e:	e7da      	b.n	8003826 <_free_r+0x22>
 8003870:	d902      	bls.n	8003878 <_free_r+0x74>
 8003872:	230c      	movs	r3, #12
 8003874:	602b      	str	r3, [r5, #0]
 8003876:	e7d6      	b.n	8003826 <_free_r+0x22>
 8003878:	6820      	ldr	r0, [r4, #0]
 800387a:	1821      	adds	r1, r4, r0
 800387c:	428b      	cmp	r3, r1
 800387e:	bf04      	itt	eq
 8003880:	6819      	ldreq	r1, [r3, #0]
 8003882:	685b      	ldreq	r3, [r3, #4]
 8003884:	6063      	str	r3, [r4, #4]
 8003886:	bf04      	itt	eq
 8003888:	1809      	addeq	r1, r1, r0
 800388a:	6021      	streq	r1, [r4, #0]
 800388c:	6054      	str	r4, [r2, #4]
 800388e:	e7ca      	b.n	8003826 <_free_r+0x22>
 8003890:	bd38      	pop	{r3, r4, r5, pc}
 8003892:	bf00      	nop
 8003894:	200001a0 	.word	0x200001a0

08003898 <__sfputc_r>:
 8003898:	6893      	ldr	r3, [r2, #8]
 800389a:	3b01      	subs	r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	b410      	push	{r4}
 80038a0:	6093      	str	r3, [r2, #8]
 80038a2:	da08      	bge.n	80038b6 <__sfputc_r+0x1e>
 80038a4:	6994      	ldr	r4, [r2, #24]
 80038a6:	42a3      	cmp	r3, r4
 80038a8:	db01      	blt.n	80038ae <__sfputc_r+0x16>
 80038aa:	290a      	cmp	r1, #10
 80038ac:	d103      	bne.n	80038b6 <__sfputc_r+0x1e>
 80038ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038b2:	f7ff be86 	b.w	80035c2 <__swbuf_r>
 80038b6:	6813      	ldr	r3, [r2, #0]
 80038b8:	1c58      	adds	r0, r3, #1
 80038ba:	6010      	str	r0, [r2, #0]
 80038bc:	7019      	strb	r1, [r3, #0]
 80038be:	4608      	mov	r0, r1
 80038c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <__sfputs_r>:
 80038c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c8:	4606      	mov	r6, r0
 80038ca:	460f      	mov	r7, r1
 80038cc:	4614      	mov	r4, r2
 80038ce:	18d5      	adds	r5, r2, r3
 80038d0:	42ac      	cmp	r4, r5
 80038d2:	d101      	bne.n	80038d8 <__sfputs_r+0x12>
 80038d4:	2000      	movs	r0, #0
 80038d6:	e007      	b.n	80038e8 <__sfputs_r+0x22>
 80038d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038dc:	463a      	mov	r2, r7
 80038de:	4630      	mov	r0, r6
 80038e0:	f7ff ffda 	bl	8003898 <__sfputc_r>
 80038e4:	1c43      	adds	r3, r0, #1
 80038e6:	d1f3      	bne.n	80038d0 <__sfputs_r+0xa>
 80038e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038ec <_vfiprintf_r>:
 80038ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f0:	460d      	mov	r5, r1
 80038f2:	b09d      	sub	sp, #116	@ 0x74
 80038f4:	4614      	mov	r4, r2
 80038f6:	4698      	mov	r8, r3
 80038f8:	4606      	mov	r6, r0
 80038fa:	b118      	cbz	r0, 8003904 <_vfiprintf_r+0x18>
 80038fc:	6a03      	ldr	r3, [r0, #32]
 80038fe:	b90b      	cbnz	r3, 8003904 <_vfiprintf_r+0x18>
 8003900:	f7ff fd76 	bl	80033f0 <__sinit>
 8003904:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003906:	07d9      	lsls	r1, r3, #31
 8003908:	d405      	bmi.n	8003916 <_vfiprintf_r+0x2a>
 800390a:	89ab      	ldrh	r3, [r5, #12]
 800390c:	059a      	lsls	r2, r3, #22
 800390e:	d402      	bmi.n	8003916 <_vfiprintf_r+0x2a>
 8003910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003912:	f7ff ff74 	bl	80037fe <__retarget_lock_acquire_recursive>
 8003916:	89ab      	ldrh	r3, [r5, #12]
 8003918:	071b      	lsls	r3, r3, #28
 800391a:	d501      	bpl.n	8003920 <_vfiprintf_r+0x34>
 800391c:	692b      	ldr	r3, [r5, #16]
 800391e:	b99b      	cbnz	r3, 8003948 <_vfiprintf_r+0x5c>
 8003920:	4629      	mov	r1, r5
 8003922:	4630      	mov	r0, r6
 8003924:	f7ff fe8c 	bl	8003640 <__swsetup_r>
 8003928:	b170      	cbz	r0, 8003948 <_vfiprintf_r+0x5c>
 800392a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800392c:	07dc      	lsls	r4, r3, #31
 800392e:	d504      	bpl.n	800393a <_vfiprintf_r+0x4e>
 8003930:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003934:	b01d      	add	sp, #116	@ 0x74
 8003936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800393a:	89ab      	ldrh	r3, [r5, #12]
 800393c:	0598      	lsls	r0, r3, #22
 800393e:	d4f7      	bmi.n	8003930 <_vfiprintf_r+0x44>
 8003940:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003942:	f7ff ff5d 	bl	8003800 <__retarget_lock_release_recursive>
 8003946:	e7f3      	b.n	8003930 <_vfiprintf_r+0x44>
 8003948:	2300      	movs	r3, #0
 800394a:	9309      	str	r3, [sp, #36]	@ 0x24
 800394c:	2320      	movs	r3, #32
 800394e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003952:	f8cd 800c 	str.w	r8, [sp, #12]
 8003956:	2330      	movs	r3, #48	@ 0x30
 8003958:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003b08 <_vfiprintf_r+0x21c>
 800395c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003960:	f04f 0901 	mov.w	r9, #1
 8003964:	4623      	mov	r3, r4
 8003966:	469a      	mov	sl, r3
 8003968:	f813 2b01 	ldrb.w	r2, [r3], #1
 800396c:	b10a      	cbz	r2, 8003972 <_vfiprintf_r+0x86>
 800396e:	2a25      	cmp	r2, #37	@ 0x25
 8003970:	d1f9      	bne.n	8003966 <_vfiprintf_r+0x7a>
 8003972:	ebba 0b04 	subs.w	fp, sl, r4
 8003976:	d00b      	beq.n	8003990 <_vfiprintf_r+0xa4>
 8003978:	465b      	mov	r3, fp
 800397a:	4622      	mov	r2, r4
 800397c:	4629      	mov	r1, r5
 800397e:	4630      	mov	r0, r6
 8003980:	f7ff ffa1 	bl	80038c6 <__sfputs_r>
 8003984:	3001      	adds	r0, #1
 8003986:	f000 80a7 	beq.w	8003ad8 <_vfiprintf_r+0x1ec>
 800398a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800398c:	445a      	add	r2, fp
 800398e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003990:	f89a 3000 	ldrb.w	r3, [sl]
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 809f 	beq.w	8003ad8 <_vfiprintf_r+0x1ec>
 800399a:	2300      	movs	r3, #0
 800399c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80039a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039a4:	f10a 0a01 	add.w	sl, sl, #1
 80039a8:	9304      	str	r3, [sp, #16]
 80039aa:	9307      	str	r3, [sp, #28]
 80039ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80039b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80039b2:	4654      	mov	r4, sl
 80039b4:	2205      	movs	r2, #5
 80039b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039ba:	4853      	ldr	r0, [pc, #332]	@ (8003b08 <_vfiprintf_r+0x21c>)
 80039bc:	f7fc fc28 	bl	8000210 <memchr>
 80039c0:	9a04      	ldr	r2, [sp, #16]
 80039c2:	b9d8      	cbnz	r0, 80039fc <_vfiprintf_r+0x110>
 80039c4:	06d1      	lsls	r1, r2, #27
 80039c6:	bf44      	itt	mi
 80039c8:	2320      	movmi	r3, #32
 80039ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039ce:	0713      	lsls	r3, r2, #28
 80039d0:	bf44      	itt	mi
 80039d2:	232b      	movmi	r3, #43	@ 0x2b
 80039d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039d8:	f89a 3000 	ldrb.w	r3, [sl]
 80039dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80039de:	d015      	beq.n	8003a0c <_vfiprintf_r+0x120>
 80039e0:	9a07      	ldr	r2, [sp, #28]
 80039e2:	4654      	mov	r4, sl
 80039e4:	2000      	movs	r0, #0
 80039e6:	f04f 0c0a 	mov.w	ip, #10
 80039ea:	4621      	mov	r1, r4
 80039ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039f0:	3b30      	subs	r3, #48	@ 0x30
 80039f2:	2b09      	cmp	r3, #9
 80039f4:	d94b      	bls.n	8003a8e <_vfiprintf_r+0x1a2>
 80039f6:	b1b0      	cbz	r0, 8003a26 <_vfiprintf_r+0x13a>
 80039f8:	9207      	str	r2, [sp, #28]
 80039fa:	e014      	b.n	8003a26 <_vfiprintf_r+0x13a>
 80039fc:	eba0 0308 	sub.w	r3, r0, r8
 8003a00:	fa09 f303 	lsl.w	r3, r9, r3
 8003a04:	4313      	orrs	r3, r2
 8003a06:	9304      	str	r3, [sp, #16]
 8003a08:	46a2      	mov	sl, r4
 8003a0a:	e7d2      	b.n	80039b2 <_vfiprintf_r+0xc6>
 8003a0c:	9b03      	ldr	r3, [sp, #12]
 8003a0e:	1d19      	adds	r1, r3, #4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	9103      	str	r1, [sp, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bfbb      	ittet	lt
 8003a18:	425b      	neglt	r3, r3
 8003a1a:	f042 0202 	orrlt.w	r2, r2, #2
 8003a1e:	9307      	strge	r3, [sp, #28]
 8003a20:	9307      	strlt	r3, [sp, #28]
 8003a22:	bfb8      	it	lt
 8003a24:	9204      	strlt	r2, [sp, #16]
 8003a26:	7823      	ldrb	r3, [r4, #0]
 8003a28:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a2a:	d10a      	bne.n	8003a42 <_vfiprintf_r+0x156>
 8003a2c:	7863      	ldrb	r3, [r4, #1]
 8003a2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a30:	d132      	bne.n	8003a98 <_vfiprintf_r+0x1ac>
 8003a32:	9b03      	ldr	r3, [sp, #12]
 8003a34:	1d1a      	adds	r2, r3, #4
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	9203      	str	r2, [sp, #12]
 8003a3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a3e:	3402      	adds	r4, #2
 8003a40:	9305      	str	r3, [sp, #20]
 8003a42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003b18 <_vfiprintf_r+0x22c>
 8003a46:	7821      	ldrb	r1, [r4, #0]
 8003a48:	2203      	movs	r2, #3
 8003a4a:	4650      	mov	r0, sl
 8003a4c:	f7fc fbe0 	bl	8000210 <memchr>
 8003a50:	b138      	cbz	r0, 8003a62 <_vfiprintf_r+0x176>
 8003a52:	9b04      	ldr	r3, [sp, #16]
 8003a54:	eba0 000a 	sub.w	r0, r0, sl
 8003a58:	2240      	movs	r2, #64	@ 0x40
 8003a5a:	4082      	lsls	r2, r0
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	3401      	adds	r4, #1
 8003a60:	9304      	str	r3, [sp, #16]
 8003a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a66:	4829      	ldr	r0, [pc, #164]	@ (8003b0c <_vfiprintf_r+0x220>)
 8003a68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003a6c:	2206      	movs	r2, #6
 8003a6e:	f7fc fbcf 	bl	8000210 <memchr>
 8003a72:	2800      	cmp	r0, #0
 8003a74:	d03f      	beq.n	8003af6 <_vfiprintf_r+0x20a>
 8003a76:	4b26      	ldr	r3, [pc, #152]	@ (8003b10 <_vfiprintf_r+0x224>)
 8003a78:	bb1b      	cbnz	r3, 8003ac2 <_vfiprintf_r+0x1d6>
 8003a7a:	9b03      	ldr	r3, [sp, #12]
 8003a7c:	3307      	adds	r3, #7
 8003a7e:	f023 0307 	bic.w	r3, r3, #7
 8003a82:	3308      	adds	r3, #8
 8003a84:	9303      	str	r3, [sp, #12]
 8003a86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a88:	443b      	add	r3, r7
 8003a8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a8c:	e76a      	b.n	8003964 <_vfiprintf_r+0x78>
 8003a8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a92:	460c      	mov	r4, r1
 8003a94:	2001      	movs	r0, #1
 8003a96:	e7a8      	b.n	80039ea <_vfiprintf_r+0xfe>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	3401      	adds	r4, #1
 8003a9c:	9305      	str	r3, [sp, #20]
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	f04f 0c0a 	mov.w	ip, #10
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003aaa:	3a30      	subs	r2, #48	@ 0x30
 8003aac:	2a09      	cmp	r2, #9
 8003aae:	d903      	bls.n	8003ab8 <_vfiprintf_r+0x1cc>
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0c6      	beq.n	8003a42 <_vfiprintf_r+0x156>
 8003ab4:	9105      	str	r1, [sp, #20]
 8003ab6:	e7c4      	b.n	8003a42 <_vfiprintf_r+0x156>
 8003ab8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003abc:	4604      	mov	r4, r0
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e7f0      	b.n	8003aa4 <_vfiprintf_r+0x1b8>
 8003ac2:	ab03      	add	r3, sp, #12
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	462a      	mov	r2, r5
 8003ac8:	4b12      	ldr	r3, [pc, #72]	@ (8003b14 <_vfiprintf_r+0x228>)
 8003aca:	a904      	add	r1, sp, #16
 8003acc:	4630      	mov	r0, r6
 8003ace:	f3af 8000 	nop.w
 8003ad2:	4607      	mov	r7, r0
 8003ad4:	1c78      	adds	r0, r7, #1
 8003ad6:	d1d6      	bne.n	8003a86 <_vfiprintf_r+0x19a>
 8003ad8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ada:	07d9      	lsls	r1, r3, #31
 8003adc:	d405      	bmi.n	8003aea <_vfiprintf_r+0x1fe>
 8003ade:	89ab      	ldrh	r3, [r5, #12]
 8003ae0:	059a      	lsls	r2, r3, #22
 8003ae2:	d402      	bmi.n	8003aea <_vfiprintf_r+0x1fe>
 8003ae4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ae6:	f7ff fe8b 	bl	8003800 <__retarget_lock_release_recursive>
 8003aea:	89ab      	ldrh	r3, [r5, #12]
 8003aec:	065b      	lsls	r3, r3, #25
 8003aee:	f53f af1f 	bmi.w	8003930 <_vfiprintf_r+0x44>
 8003af2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003af4:	e71e      	b.n	8003934 <_vfiprintf_r+0x48>
 8003af6:	ab03      	add	r3, sp, #12
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	462a      	mov	r2, r5
 8003afc:	4b05      	ldr	r3, [pc, #20]	@ (8003b14 <_vfiprintf_r+0x228>)
 8003afe:	a904      	add	r1, sp, #16
 8003b00:	4630      	mov	r0, r6
 8003b02:	f000 f879 	bl	8003bf8 <_printf_i>
 8003b06:	e7e4      	b.n	8003ad2 <_vfiprintf_r+0x1e6>
 8003b08:	0800430c 	.word	0x0800430c
 8003b0c:	08004316 	.word	0x08004316
 8003b10:	00000000 	.word	0x00000000
 8003b14:	080038c7 	.word	0x080038c7
 8003b18:	08004312 	.word	0x08004312

08003b1c <_printf_common>:
 8003b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b20:	4616      	mov	r6, r2
 8003b22:	4698      	mov	r8, r3
 8003b24:	688a      	ldr	r2, [r1, #8]
 8003b26:	690b      	ldr	r3, [r1, #16]
 8003b28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	bfb8      	it	lt
 8003b30:	4613      	movlt	r3, r2
 8003b32:	6033      	str	r3, [r6, #0]
 8003b34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b38:	4607      	mov	r7, r0
 8003b3a:	460c      	mov	r4, r1
 8003b3c:	b10a      	cbz	r2, 8003b42 <_printf_common+0x26>
 8003b3e:	3301      	adds	r3, #1
 8003b40:	6033      	str	r3, [r6, #0]
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	0699      	lsls	r1, r3, #26
 8003b46:	bf42      	ittt	mi
 8003b48:	6833      	ldrmi	r3, [r6, #0]
 8003b4a:	3302      	addmi	r3, #2
 8003b4c:	6033      	strmi	r3, [r6, #0]
 8003b4e:	6825      	ldr	r5, [r4, #0]
 8003b50:	f015 0506 	ands.w	r5, r5, #6
 8003b54:	d106      	bne.n	8003b64 <_printf_common+0x48>
 8003b56:	f104 0a19 	add.w	sl, r4, #25
 8003b5a:	68e3      	ldr	r3, [r4, #12]
 8003b5c:	6832      	ldr	r2, [r6, #0]
 8003b5e:	1a9b      	subs	r3, r3, r2
 8003b60:	42ab      	cmp	r3, r5
 8003b62:	dc26      	bgt.n	8003bb2 <_printf_common+0x96>
 8003b64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b68:	6822      	ldr	r2, [r4, #0]
 8003b6a:	3b00      	subs	r3, #0
 8003b6c:	bf18      	it	ne
 8003b6e:	2301      	movne	r3, #1
 8003b70:	0692      	lsls	r2, r2, #26
 8003b72:	d42b      	bmi.n	8003bcc <_printf_common+0xb0>
 8003b74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b78:	4641      	mov	r1, r8
 8003b7a:	4638      	mov	r0, r7
 8003b7c:	47c8      	blx	r9
 8003b7e:	3001      	adds	r0, #1
 8003b80:	d01e      	beq.n	8003bc0 <_printf_common+0xa4>
 8003b82:	6823      	ldr	r3, [r4, #0]
 8003b84:	6922      	ldr	r2, [r4, #16]
 8003b86:	f003 0306 	and.w	r3, r3, #6
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	bf02      	ittt	eq
 8003b8e:	68e5      	ldreq	r5, [r4, #12]
 8003b90:	6833      	ldreq	r3, [r6, #0]
 8003b92:	1aed      	subeq	r5, r5, r3
 8003b94:	68a3      	ldr	r3, [r4, #8]
 8003b96:	bf0c      	ite	eq
 8003b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b9c:	2500      	movne	r5, #0
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	bfc4      	itt	gt
 8003ba2:	1a9b      	subgt	r3, r3, r2
 8003ba4:	18ed      	addgt	r5, r5, r3
 8003ba6:	2600      	movs	r6, #0
 8003ba8:	341a      	adds	r4, #26
 8003baa:	42b5      	cmp	r5, r6
 8003bac:	d11a      	bne.n	8003be4 <_printf_common+0xc8>
 8003bae:	2000      	movs	r0, #0
 8003bb0:	e008      	b.n	8003bc4 <_printf_common+0xa8>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	4652      	mov	r2, sl
 8003bb6:	4641      	mov	r1, r8
 8003bb8:	4638      	mov	r0, r7
 8003bba:	47c8      	blx	r9
 8003bbc:	3001      	adds	r0, #1
 8003bbe:	d103      	bne.n	8003bc8 <_printf_common+0xac>
 8003bc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bc8:	3501      	adds	r5, #1
 8003bca:	e7c6      	b.n	8003b5a <_printf_common+0x3e>
 8003bcc:	18e1      	adds	r1, r4, r3
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	2030      	movs	r0, #48	@ 0x30
 8003bd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003bd6:	4422      	add	r2, r4
 8003bd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003bdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003be0:	3302      	adds	r3, #2
 8003be2:	e7c7      	b.n	8003b74 <_printf_common+0x58>
 8003be4:	2301      	movs	r3, #1
 8003be6:	4622      	mov	r2, r4
 8003be8:	4641      	mov	r1, r8
 8003bea:	4638      	mov	r0, r7
 8003bec:	47c8      	blx	r9
 8003bee:	3001      	adds	r0, #1
 8003bf0:	d0e6      	beq.n	8003bc0 <_printf_common+0xa4>
 8003bf2:	3601      	adds	r6, #1
 8003bf4:	e7d9      	b.n	8003baa <_printf_common+0x8e>
	...

08003bf8 <_printf_i>:
 8003bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bfc:	7e0f      	ldrb	r7, [r1, #24]
 8003bfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c00:	2f78      	cmp	r7, #120	@ 0x78
 8003c02:	4691      	mov	r9, r2
 8003c04:	4680      	mov	r8, r0
 8003c06:	460c      	mov	r4, r1
 8003c08:	469a      	mov	sl, r3
 8003c0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c0e:	d807      	bhi.n	8003c20 <_printf_i+0x28>
 8003c10:	2f62      	cmp	r7, #98	@ 0x62
 8003c12:	d80a      	bhi.n	8003c2a <_printf_i+0x32>
 8003c14:	2f00      	cmp	r7, #0
 8003c16:	f000 80d2 	beq.w	8003dbe <_printf_i+0x1c6>
 8003c1a:	2f58      	cmp	r7, #88	@ 0x58
 8003c1c:	f000 80b9 	beq.w	8003d92 <_printf_i+0x19a>
 8003c20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c28:	e03a      	b.n	8003ca0 <_printf_i+0xa8>
 8003c2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c2e:	2b15      	cmp	r3, #21
 8003c30:	d8f6      	bhi.n	8003c20 <_printf_i+0x28>
 8003c32:	a101      	add	r1, pc, #4	@ (adr r1, 8003c38 <_printf_i+0x40>)
 8003c34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c38:	08003c91 	.word	0x08003c91
 8003c3c:	08003ca5 	.word	0x08003ca5
 8003c40:	08003c21 	.word	0x08003c21
 8003c44:	08003c21 	.word	0x08003c21
 8003c48:	08003c21 	.word	0x08003c21
 8003c4c:	08003c21 	.word	0x08003c21
 8003c50:	08003ca5 	.word	0x08003ca5
 8003c54:	08003c21 	.word	0x08003c21
 8003c58:	08003c21 	.word	0x08003c21
 8003c5c:	08003c21 	.word	0x08003c21
 8003c60:	08003c21 	.word	0x08003c21
 8003c64:	08003da5 	.word	0x08003da5
 8003c68:	08003ccf 	.word	0x08003ccf
 8003c6c:	08003d5f 	.word	0x08003d5f
 8003c70:	08003c21 	.word	0x08003c21
 8003c74:	08003c21 	.word	0x08003c21
 8003c78:	08003dc7 	.word	0x08003dc7
 8003c7c:	08003c21 	.word	0x08003c21
 8003c80:	08003ccf 	.word	0x08003ccf
 8003c84:	08003c21 	.word	0x08003c21
 8003c88:	08003c21 	.word	0x08003c21
 8003c8c:	08003d67 	.word	0x08003d67
 8003c90:	6833      	ldr	r3, [r6, #0]
 8003c92:	1d1a      	adds	r2, r3, #4
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6032      	str	r2, [r6, #0]
 8003c98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e09d      	b.n	8003de0 <_printf_i+0x1e8>
 8003ca4:	6833      	ldr	r3, [r6, #0]
 8003ca6:	6820      	ldr	r0, [r4, #0]
 8003ca8:	1d19      	adds	r1, r3, #4
 8003caa:	6031      	str	r1, [r6, #0]
 8003cac:	0606      	lsls	r6, r0, #24
 8003cae:	d501      	bpl.n	8003cb4 <_printf_i+0xbc>
 8003cb0:	681d      	ldr	r5, [r3, #0]
 8003cb2:	e003      	b.n	8003cbc <_printf_i+0xc4>
 8003cb4:	0645      	lsls	r5, r0, #25
 8003cb6:	d5fb      	bpl.n	8003cb0 <_printf_i+0xb8>
 8003cb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003cbc:	2d00      	cmp	r5, #0
 8003cbe:	da03      	bge.n	8003cc8 <_printf_i+0xd0>
 8003cc0:	232d      	movs	r3, #45	@ 0x2d
 8003cc2:	426d      	negs	r5, r5
 8003cc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cc8:	4859      	ldr	r0, [pc, #356]	@ (8003e30 <_printf_i+0x238>)
 8003cca:	230a      	movs	r3, #10
 8003ccc:	e011      	b.n	8003cf2 <_printf_i+0xfa>
 8003cce:	6821      	ldr	r1, [r4, #0]
 8003cd0:	6833      	ldr	r3, [r6, #0]
 8003cd2:	0608      	lsls	r0, r1, #24
 8003cd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003cd8:	d402      	bmi.n	8003ce0 <_printf_i+0xe8>
 8003cda:	0649      	lsls	r1, r1, #25
 8003cdc:	bf48      	it	mi
 8003cde:	b2ad      	uxthmi	r5, r5
 8003ce0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003ce2:	4853      	ldr	r0, [pc, #332]	@ (8003e30 <_printf_i+0x238>)
 8003ce4:	6033      	str	r3, [r6, #0]
 8003ce6:	bf14      	ite	ne
 8003ce8:	230a      	movne	r3, #10
 8003cea:	2308      	moveq	r3, #8
 8003cec:	2100      	movs	r1, #0
 8003cee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003cf2:	6866      	ldr	r6, [r4, #4]
 8003cf4:	60a6      	str	r6, [r4, #8]
 8003cf6:	2e00      	cmp	r6, #0
 8003cf8:	bfa2      	ittt	ge
 8003cfa:	6821      	ldrge	r1, [r4, #0]
 8003cfc:	f021 0104 	bicge.w	r1, r1, #4
 8003d00:	6021      	strge	r1, [r4, #0]
 8003d02:	b90d      	cbnz	r5, 8003d08 <_printf_i+0x110>
 8003d04:	2e00      	cmp	r6, #0
 8003d06:	d04b      	beq.n	8003da0 <_printf_i+0x1a8>
 8003d08:	4616      	mov	r6, r2
 8003d0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d0e:	fb03 5711 	mls	r7, r3, r1, r5
 8003d12:	5dc7      	ldrb	r7, [r0, r7]
 8003d14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d18:	462f      	mov	r7, r5
 8003d1a:	42bb      	cmp	r3, r7
 8003d1c:	460d      	mov	r5, r1
 8003d1e:	d9f4      	bls.n	8003d0a <_printf_i+0x112>
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d10b      	bne.n	8003d3c <_printf_i+0x144>
 8003d24:	6823      	ldr	r3, [r4, #0]
 8003d26:	07df      	lsls	r7, r3, #31
 8003d28:	d508      	bpl.n	8003d3c <_printf_i+0x144>
 8003d2a:	6923      	ldr	r3, [r4, #16]
 8003d2c:	6861      	ldr	r1, [r4, #4]
 8003d2e:	4299      	cmp	r1, r3
 8003d30:	bfde      	ittt	le
 8003d32:	2330      	movle	r3, #48	@ 0x30
 8003d34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d38:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003d3c:	1b92      	subs	r2, r2, r6
 8003d3e:	6122      	str	r2, [r4, #16]
 8003d40:	f8cd a000 	str.w	sl, [sp]
 8003d44:	464b      	mov	r3, r9
 8003d46:	aa03      	add	r2, sp, #12
 8003d48:	4621      	mov	r1, r4
 8003d4a:	4640      	mov	r0, r8
 8003d4c:	f7ff fee6 	bl	8003b1c <_printf_common>
 8003d50:	3001      	adds	r0, #1
 8003d52:	d14a      	bne.n	8003dea <_printf_i+0x1f2>
 8003d54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d58:	b004      	add	sp, #16
 8003d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d5e:	6823      	ldr	r3, [r4, #0]
 8003d60:	f043 0320 	orr.w	r3, r3, #32
 8003d64:	6023      	str	r3, [r4, #0]
 8003d66:	4833      	ldr	r0, [pc, #204]	@ (8003e34 <_printf_i+0x23c>)
 8003d68:	2778      	movs	r7, #120	@ 0x78
 8003d6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	6831      	ldr	r1, [r6, #0]
 8003d72:	061f      	lsls	r7, r3, #24
 8003d74:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d78:	d402      	bmi.n	8003d80 <_printf_i+0x188>
 8003d7a:	065f      	lsls	r7, r3, #25
 8003d7c:	bf48      	it	mi
 8003d7e:	b2ad      	uxthmi	r5, r5
 8003d80:	6031      	str	r1, [r6, #0]
 8003d82:	07d9      	lsls	r1, r3, #31
 8003d84:	bf44      	itt	mi
 8003d86:	f043 0320 	orrmi.w	r3, r3, #32
 8003d8a:	6023      	strmi	r3, [r4, #0]
 8003d8c:	b11d      	cbz	r5, 8003d96 <_printf_i+0x19e>
 8003d8e:	2310      	movs	r3, #16
 8003d90:	e7ac      	b.n	8003cec <_printf_i+0xf4>
 8003d92:	4827      	ldr	r0, [pc, #156]	@ (8003e30 <_printf_i+0x238>)
 8003d94:	e7e9      	b.n	8003d6a <_printf_i+0x172>
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	f023 0320 	bic.w	r3, r3, #32
 8003d9c:	6023      	str	r3, [r4, #0]
 8003d9e:	e7f6      	b.n	8003d8e <_printf_i+0x196>
 8003da0:	4616      	mov	r6, r2
 8003da2:	e7bd      	b.n	8003d20 <_printf_i+0x128>
 8003da4:	6833      	ldr	r3, [r6, #0]
 8003da6:	6825      	ldr	r5, [r4, #0]
 8003da8:	6961      	ldr	r1, [r4, #20]
 8003daa:	1d18      	adds	r0, r3, #4
 8003dac:	6030      	str	r0, [r6, #0]
 8003dae:	062e      	lsls	r6, r5, #24
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	d501      	bpl.n	8003db8 <_printf_i+0x1c0>
 8003db4:	6019      	str	r1, [r3, #0]
 8003db6:	e002      	b.n	8003dbe <_printf_i+0x1c6>
 8003db8:	0668      	lsls	r0, r5, #25
 8003dba:	d5fb      	bpl.n	8003db4 <_printf_i+0x1bc>
 8003dbc:	8019      	strh	r1, [r3, #0]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	6123      	str	r3, [r4, #16]
 8003dc2:	4616      	mov	r6, r2
 8003dc4:	e7bc      	b.n	8003d40 <_printf_i+0x148>
 8003dc6:	6833      	ldr	r3, [r6, #0]
 8003dc8:	1d1a      	adds	r2, r3, #4
 8003dca:	6032      	str	r2, [r6, #0]
 8003dcc:	681e      	ldr	r6, [r3, #0]
 8003dce:	6862      	ldr	r2, [r4, #4]
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	4630      	mov	r0, r6
 8003dd4:	f7fc fa1c 	bl	8000210 <memchr>
 8003dd8:	b108      	cbz	r0, 8003dde <_printf_i+0x1e6>
 8003dda:	1b80      	subs	r0, r0, r6
 8003ddc:	6060      	str	r0, [r4, #4]
 8003dde:	6863      	ldr	r3, [r4, #4]
 8003de0:	6123      	str	r3, [r4, #16]
 8003de2:	2300      	movs	r3, #0
 8003de4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003de8:	e7aa      	b.n	8003d40 <_printf_i+0x148>
 8003dea:	6923      	ldr	r3, [r4, #16]
 8003dec:	4632      	mov	r2, r6
 8003dee:	4649      	mov	r1, r9
 8003df0:	4640      	mov	r0, r8
 8003df2:	47d0      	blx	sl
 8003df4:	3001      	adds	r0, #1
 8003df6:	d0ad      	beq.n	8003d54 <_printf_i+0x15c>
 8003df8:	6823      	ldr	r3, [r4, #0]
 8003dfa:	079b      	lsls	r3, r3, #30
 8003dfc:	d413      	bmi.n	8003e26 <_printf_i+0x22e>
 8003dfe:	68e0      	ldr	r0, [r4, #12]
 8003e00:	9b03      	ldr	r3, [sp, #12]
 8003e02:	4298      	cmp	r0, r3
 8003e04:	bfb8      	it	lt
 8003e06:	4618      	movlt	r0, r3
 8003e08:	e7a6      	b.n	8003d58 <_printf_i+0x160>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	4632      	mov	r2, r6
 8003e0e:	4649      	mov	r1, r9
 8003e10:	4640      	mov	r0, r8
 8003e12:	47d0      	blx	sl
 8003e14:	3001      	adds	r0, #1
 8003e16:	d09d      	beq.n	8003d54 <_printf_i+0x15c>
 8003e18:	3501      	adds	r5, #1
 8003e1a:	68e3      	ldr	r3, [r4, #12]
 8003e1c:	9903      	ldr	r1, [sp, #12]
 8003e1e:	1a5b      	subs	r3, r3, r1
 8003e20:	42ab      	cmp	r3, r5
 8003e22:	dcf2      	bgt.n	8003e0a <_printf_i+0x212>
 8003e24:	e7eb      	b.n	8003dfe <_printf_i+0x206>
 8003e26:	2500      	movs	r5, #0
 8003e28:	f104 0619 	add.w	r6, r4, #25
 8003e2c:	e7f5      	b.n	8003e1a <_printf_i+0x222>
 8003e2e:	bf00      	nop
 8003e30:	0800431d 	.word	0x0800431d
 8003e34:	0800432e 	.word	0x0800432e

08003e38 <__sflush_r>:
 8003e38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e40:	0716      	lsls	r6, r2, #28
 8003e42:	4605      	mov	r5, r0
 8003e44:	460c      	mov	r4, r1
 8003e46:	d454      	bmi.n	8003ef2 <__sflush_r+0xba>
 8003e48:	684b      	ldr	r3, [r1, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	dc02      	bgt.n	8003e54 <__sflush_r+0x1c>
 8003e4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	dd48      	ble.n	8003ee6 <__sflush_r+0xae>
 8003e54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e56:	2e00      	cmp	r6, #0
 8003e58:	d045      	beq.n	8003ee6 <__sflush_r+0xae>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003e60:	682f      	ldr	r7, [r5, #0]
 8003e62:	6a21      	ldr	r1, [r4, #32]
 8003e64:	602b      	str	r3, [r5, #0]
 8003e66:	d030      	beq.n	8003eca <__sflush_r+0x92>
 8003e68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003e6a:	89a3      	ldrh	r3, [r4, #12]
 8003e6c:	0759      	lsls	r1, r3, #29
 8003e6e:	d505      	bpl.n	8003e7c <__sflush_r+0x44>
 8003e70:	6863      	ldr	r3, [r4, #4]
 8003e72:	1ad2      	subs	r2, r2, r3
 8003e74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003e76:	b10b      	cbz	r3, 8003e7c <__sflush_r+0x44>
 8003e78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e7a:	1ad2      	subs	r2, r2, r3
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e80:	6a21      	ldr	r1, [r4, #32]
 8003e82:	4628      	mov	r0, r5
 8003e84:	47b0      	blx	r6
 8003e86:	1c43      	adds	r3, r0, #1
 8003e88:	89a3      	ldrh	r3, [r4, #12]
 8003e8a:	d106      	bne.n	8003e9a <__sflush_r+0x62>
 8003e8c:	6829      	ldr	r1, [r5, #0]
 8003e8e:	291d      	cmp	r1, #29
 8003e90:	d82b      	bhi.n	8003eea <__sflush_r+0xb2>
 8003e92:	4a2a      	ldr	r2, [pc, #168]	@ (8003f3c <__sflush_r+0x104>)
 8003e94:	410a      	asrs	r2, r1
 8003e96:	07d6      	lsls	r6, r2, #31
 8003e98:	d427      	bmi.n	8003eea <__sflush_r+0xb2>
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	6062      	str	r2, [r4, #4]
 8003e9e:	04d9      	lsls	r1, r3, #19
 8003ea0:	6922      	ldr	r2, [r4, #16]
 8003ea2:	6022      	str	r2, [r4, #0]
 8003ea4:	d504      	bpl.n	8003eb0 <__sflush_r+0x78>
 8003ea6:	1c42      	adds	r2, r0, #1
 8003ea8:	d101      	bne.n	8003eae <__sflush_r+0x76>
 8003eaa:	682b      	ldr	r3, [r5, #0]
 8003eac:	b903      	cbnz	r3, 8003eb0 <__sflush_r+0x78>
 8003eae:	6560      	str	r0, [r4, #84]	@ 0x54
 8003eb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003eb2:	602f      	str	r7, [r5, #0]
 8003eb4:	b1b9      	cbz	r1, 8003ee6 <__sflush_r+0xae>
 8003eb6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003eba:	4299      	cmp	r1, r3
 8003ebc:	d002      	beq.n	8003ec4 <__sflush_r+0x8c>
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	f7ff fca0 	bl	8003804 <_free_r>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ec8:	e00d      	b.n	8003ee6 <__sflush_r+0xae>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	4628      	mov	r0, r5
 8003ece:	47b0      	blx	r6
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	1c50      	adds	r0, r2, #1
 8003ed4:	d1c9      	bne.n	8003e6a <__sflush_r+0x32>
 8003ed6:	682b      	ldr	r3, [r5, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0c6      	beq.n	8003e6a <__sflush_r+0x32>
 8003edc:	2b1d      	cmp	r3, #29
 8003ede:	d001      	beq.n	8003ee4 <__sflush_r+0xac>
 8003ee0:	2b16      	cmp	r3, #22
 8003ee2:	d11e      	bne.n	8003f22 <__sflush_r+0xea>
 8003ee4:	602f      	str	r7, [r5, #0]
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	e022      	b.n	8003f30 <__sflush_r+0xf8>
 8003eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003eee:	b21b      	sxth	r3, r3
 8003ef0:	e01b      	b.n	8003f2a <__sflush_r+0xf2>
 8003ef2:	690f      	ldr	r7, [r1, #16]
 8003ef4:	2f00      	cmp	r7, #0
 8003ef6:	d0f6      	beq.n	8003ee6 <__sflush_r+0xae>
 8003ef8:	0793      	lsls	r3, r2, #30
 8003efa:	680e      	ldr	r6, [r1, #0]
 8003efc:	bf08      	it	eq
 8003efe:	694b      	ldreq	r3, [r1, #20]
 8003f00:	600f      	str	r7, [r1, #0]
 8003f02:	bf18      	it	ne
 8003f04:	2300      	movne	r3, #0
 8003f06:	eba6 0807 	sub.w	r8, r6, r7
 8003f0a:	608b      	str	r3, [r1, #8]
 8003f0c:	f1b8 0f00 	cmp.w	r8, #0
 8003f10:	dde9      	ble.n	8003ee6 <__sflush_r+0xae>
 8003f12:	6a21      	ldr	r1, [r4, #32]
 8003f14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003f16:	4643      	mov	r3, r8
 8003f18:	463a      	mov	r2, r7
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	47b0      	blx	r6
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	dc08      	bgt.n	8003f34 <__sflush_r+0xfc>
 8003f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f2a:	81a3      	strh	r3, [r4, #12]
 8003f2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f34:	4407      	add	r7, r0
 8003f36:	eba8 0800 	sub.w	r8, r8, r0
 8003f3a:	e7e7      	b.n	8003f0c <__sflush_r+0xd4>
 8003f3c:	dfbffffe 	.word	0xdfbffffe

08003f40 <_fflush_r>:
 8003f40:	b538      	push	{r3, r4, r5, lr}
 8003f42:	690b      	ldr	r3, [r1, #16]
 8003f44:	4605      	mov	r5, r0
 8003f46:	460c      	mov	r4, r1
 8003f48:	b913      	cbnz	r3, 8003f50 <_fflush_r+0x10>
 8003f4a:	2500      	movs	r5, #0
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	bd38      	pop	{r3, r4, r5, pc}
 8003f50:	b118      	cbz	r0, 8003f5a <_fflush_r+0x1a>
 8003f52:	6a03      	ldr	r3, [r0, #32]
 8003f54:	b90b      	cbnz	r3, 8003f5a <_fflush_r+0x1a>
 8003f56:	f7ff fa4b 	bl	80033f0 <__sinit>
 8003f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f3      	beq.n	8003f4a <_fflush_r+0xa>
 8003f62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003f64:	07d0      	lsls	r0, r2, #31
 8003f66:	d404      	bmi.n	8003f72 <_fflush_r+0x32>
 8003f68:	0599      	lsls	r1, r3, #22
 8003f6a:	d402      	bmi.n	8003f72 <_fflush_r+0x32>
 8003f6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f6e:	f7ff fc46 	bl	80037fe <__retarget_lock_acquire_recursive>
 8003f72:	4628      	mov	r0, r5
 8003f74:	4621      	mov	r1, r4
 8003f76:	f7ff ff5f 	bl	8003e38 <__sflush_r>
 8003f7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f7c:	07da      	lsls	r2, r3, #31
 8003f7e:	4605      	mov	r5, r0
 8003f80:	d4e4      	bmi.n	8003f4c <_fflush_r+0xc>
 8003f82:	89a3      	ldrh	r3, [r4, #12]
 8003f84:	059b      	lsls	r3, r3, #22
 8003f86:	d4e1      	bmi.n	8003f4c <_fflush_r+0xc>
 8003f88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f8a:	f7ff fc39 	bl	8003800 <__retarget_lock_release_recursive>
 8003f8e:	e7dd      	b.n	8003f4c <_fflush_r+0xc>

08003f90 <__swhatbuf_r>:
 8003f90:	b570      	push	{r4, r5, r6, lr}
 8003f92:	460c      	mov	r4, r1
 8003f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f98:	2900      	cmp	r1, #0
 8003f9a:	b096      	sub	sp, #88	@ 0x58
 8003f9c:	4615      	mov	r5, r2
 8003f9e:	461e      	mov	r6, r3
 8003fa0:	da0d      	bge.n	8003fbe <__swhatbuf_r+0x2e>
 8003fa2:	89a3      	ldrh	r3, [r4, #12]
 8003fa4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003fa8:	f04f 0100 	mov.w	r1, #0
 8003fac:	bf14      	ite	ne
 8003fae:	2340      	movne	r3, #64	@ 0x40
 8003fb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	6031      	str	r1, [r6, #0]
 8003fb8:	602b      	str	r3, [r5, #0]
 8003fba:	b016      	add	sp, #88	@ 0x58
 8003fbc:	bd70      	pop	{r4, r5, r6, pc}
 8003fbe:	466a      	mov	r2, sp
 8003fc0:	f000 f848 	bl	8004054 <_fstat_r>
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	dbec      	blt.n	8003fa2 <__swhatbuf_r+0x12>
 8003fc8:	9901      	ldr	r1, [sp, #4]
 8003fca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003fce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003fd2:	4259      	negs	r1, r3
 8003fd4:	4159      	adcs	r1, r3
 8003fd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fda:	e7eb      	b.n	8003fb4 <__swhatbuf_r+0x24>

08003fdc <__smakebuf_r>:
 8003fdc:	898b      	ldrh	r3, [r1, #12]
 8003fde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fe0:	079d      	lsls	r5, r3, #30
 8003fe2:	4606      	mov	r6, r0
 8003fe4:	460c      	mov	r4, r1
 8003fe6:	d507      	bpl.n	8003ff8 <__smakebuf_r+0x1c>
 8003fe8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003fec:	6023      	str	r3, [r4, #0]
 8003fee:	6123      	str	r3, [r4, #16]
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	6163      	str	r3, [r4, #20]
 8003ff4:	b003      	add	sp, #12
 8003ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ff8:	ab01      	add	r3, sp, #4
 8003ffa:	466a      	mov	r2, sp
 8003ffc:	f7ff ffc8 	bl	8003f90 <__swhatbuf_r>
 8004000:	9f00      	ldr	r7, [sp, #0]
 8004002:	4605      	mov	r5, r0
 8004004:	4639      	mov	r1, r7
 8004006:	4630      	mov	r0, r6
 8004008:	f7ff f8da 	bl	80031c0 <_malloc_r>
 800400c:	b948      	cbnz	r0, 8004022 <__smakebuf_r+0x46>
 800400e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004012:	059a      	lsls	r2, r3, #22
 8004014:	d4ee      	bmi.n	8003ff4 <__smakebuf_r+0x18>
 8004016:	f023 0303 	bic.w	r3, r3, #3
 800401a:	f043 0302 	orr.w	r3, r3, #2
 800401e:	81a3      	strh	r3, [r4, #12]
 8004020:	e7e2      	b.n	8003fe8 <__smakebuf_r+0xc>
 8004022:	89a3      	ldrh	r3, [r4, #12]
 8004024:	6020      	str	r0, [r4, #0]
 8004026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800402a:	81a3      	strh	r3, [r4, #12]
 800402c:	9b01      	ldr	r3, [sp, #4]
 800402e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004032:	b15b      	cbz	r3, 800404c <__smakebuf_r+0x70>
 8004034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004038:	4630      	mov	r0, r6
 800403a:	f000 f81d 	bl	8004078 <_isatty_r>
 800403e:	b128      	cbz	r0, 800404c <__smakebuf_r+0x70>
 8004040:	89a3      	ldrh	r3, [r4, #12]
 8004042:	f023 0303 	bic.w	r3, r3, #3
 8004046:	f043 0301 	orr.w	r3, r3, #1
 800404a:	81a3      	strh	r3, [r4, #12]
 800404c:	89a3      	ldrh	r3, [r4, #12]
 800404e:	431d      	orrs	r5, r3
 8004050:	81a5      	strh	r5, [r4, #12]
 8004052:	e7cf      	b.n	8003ff4 <__smakebuf_r+0x18>

08004054 <_fstat_r>:
 8004054:	b538      	push	{r3, r4, r5, lr}
 8004056:	4d07      	ldr	r5, [pc, #28]	@ (8004074 <_fstat_r+0x20>)
 8004058:	2300      	movs	r3, #0
 800405a:	4604      	mov	r4, r0
 800405c:	4608      	mov	r0, r1
 800405e:	4611      	mov	r1, r2
 8004060:	602b      	str	r3, [r5, #0]
 8004062:	f7fc feaf 	bl	8000dc4 <_fstat>
 8004066:	1c43      	adds	r3, r0, #1
 8004068:	d102      	bne.n	8004070 <_fstat_r+0x1c>
 800406a:	682b      	ldr	r3, [r5, #0]
 800406c:	b103      	cbz	r3, 8004070 <_fstat_r+0x1c>
 800406e:	6023      	str	r3, [r4, #0]
 8004070:	bd38      	pop	{r3, r4, r5, pc}
 8004072:	bf00      	nop
 8004074:	200002e0 	.word	0x200002e0

08004078 <_isatty_r>:
 8004078:	b538      	push	{r3, r4, r5, lr}
 800407a:	4d06      	ldr	r5, [pc, #24]	@ (8004094 <_isatty_r+0x1c>)
 800407c:	2300      	movs	r3, #0
 800407e:	4604      	mov	r4, r0
 8004080:	4608      	mov	r0, r1
 8004082:	602b      	str	r3, [r5, #0]
 8004084:	f7fc feae 	bl	8000de4 <_isatty>
 8004088:	1c43      	adds	r3, r0, #1
 800408a:	d102      	bne.n	8004092 <_isatty_r+0x1a>
 800408c:	682b      	ldr	r3, [r5, #0]
 800408e:	b103      	cbz	r3, 8004092 <_isatty_r+0x1a>
 8004090:	6023      	str	r3, [r4, #0]
 8004092:	bd38      	pop	{r3, r4, r5, pc}
 8004094:	200002e0 	.word	0x200002e0

08004098 <_init>:
 8004098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409a:	bf00      	nop
 800409c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800409e:	bc08      	pop	{r3}
 80040a0:	469e      	mov	lr, r3
 80040a2:	4770      	bx	lr

080040a4 <_fini>:
 80040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a6:	bf00      	nop
 80040a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040aa:	bc08      	pop	{r3}
 80040ac:	469e      	mov	lr, r3
 80040ae:	4770      	bx	lr
