digraph "parse_RaspberryPI_Request"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="parse_RaspberryPI_Request",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Process the command received from the Raspberry Pi over UART."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="BMP280_get_pressure",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$BMP280__driver_8c.html#a5ee7cd62db9e5e3ae5a20073af186812",tooltip="Get the compensated pressure in Pascals."];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="BMP280_compensate_P\l_int64",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$BMP280__driver_8c.html#a910d1e5dd2fbdb3870e5cf4ca5a763ec",tooltip="Compensate pressure reading from BMP280."];
  Node2 -> Node4 [id="edge3_Node000002_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="BMP280_Read_Reg",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$BMP280__driver_8c.html#aa66b5f318d41d4ead70418d8d4e0a21f",tooltip="Read data from a BMP280 register."];
  Node1 -> Node5 [id="edge4_Node000001_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="BMP280_get_temperature",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$BMP280__driver_8c.html#a9ad63608e8acf7960d27522dd0b207e7",tooltip="Get the compensated temperature in degrees Celsius."];
  Node5 -> Node6 [id="edge5_Node000005_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="BMP280_compensate_T\l_int32",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$BMP280__driver_8c.html#a834859c5ae69b3526a0b585923956c46",tooltip="Compensate temperature reading from BMP280."];
  Node5 -> Node4 [id="edge6_Node000005_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node7 [id="edge7_Node000001_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="MPU_calcAttitude",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$MPU9250__driver_8c.html#a9e48249ac6c48ba5b4e1816e67d8807f",tooltip="Calculate the attitude of the sensor in degrees using a complementary filter."];
  Node7 -> Node8 [id="edge8_Node000007_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="MPU_readProcessedData",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$MPU9250__driver_8c.html#a0b9572bcd1f2755e895204e9bdcc313f",tooltip="Calculate the real world sensor values."];
  Node8 -> Node9 [id="edge9_Node000008_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="MPU_readRawData",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$MPU9250__driver_8c.html#a9c3d9fc8303a931dd23be6debffaa598",tooltip="Read raw data from IMU."];
  Node1 -> Node10 [id="edge10_Node000001_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="MPU_calibrateGyro",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$MPU9250__driver_8c.html#aa847c36df2da652d7fa796696a056758",tooltip="Find offsets for each axis of gyroscope."];
  Node10 -> Node9 [id="edge11_Node000010_Node000009",color="steelblue1",style="solid",tooltip=" "];
}
